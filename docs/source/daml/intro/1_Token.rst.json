[
  {
    "id" : "0d7a04e8-260c-44fa-9af8-a67f53d0692b",
    "prId" : 6839,
    "comments" : [
      {
        "id" : "4a4a0b3e-1543-4022-847c-97af49869cc6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That isn’t downloading anything. Maybe `Remember that you can checkout all the code for this section locally by running …`?",
        "createdAt" : "2020-07-23T08:42:59Z",
        "updatedAt" : "2020-09-02T13:20:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9f11b946-4588-4a66-aecb-03715050298e",
        "parentId" : "4a4a0b3e-1543-4022-847c-97af49869cc6",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "went with \"load\"",
        "createdAt" : "2020-07-23T09:22:59Z",
        "updatedAt" : "2020-09-02T13:20:34Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f28a535621854053790b029ea20f965e8902ee4f",
    "line" : null,
    "diffHunk" : "@@ -12,6 +12,10 @@ To begin with, you're going to write a very small DAML template, which represent\n - Contracts\n - Signatories\n \n+.. hint::\n+\n+  Remember that you can download all the code for this section by running ``daml new 1_Token daml-intro-1``"
  },
  {
    "id" : "29c289ad-f38d-42e8-8e59-ec73d53834d2",
    "prId" : 1717,
    "comments" : [
      {
        "id" : "b07b594a-1fba-44b2-a682-c24d14bff5a3",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "sentence case\r\n```suggestion\r\nDAML ledger basics\r\n```",
        "createdAt" : "2019-06-17T13:26:48Z",
        "updatedAt" : "2019-06-18T09:05:02Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "64d0389f2c6ccd0a16f369739cc879b850f52d78",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+1 Basic contracts\n+=================\n+\n+To begin with, you're going to write a very small DAML template, which represents a self-issued, non-transferrable token. Because it's a minimal template, it isn't actually useful on its own - you'll make it more useful later - but it's enough that it can show you the most basic concepts:\n+\n+- Transactions\n+- DAML Modules and Files\n+- Templates\n+- Contracts\n+- Signatories\n+\n+DAML Ledger Basics"
  },
  {
    "id" : "7ebc702e-bafe-477d-8721-f4ab27730d5e",
    "prId" : 1717,
    "comments" : [
      {
        "id" : "6058fce5-f032-4dc4-92c0-1f8ce87307ca",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "sentence case\r\n```suggestion\r\nDAML files and modules\r\n```",
        "createdAt" : "2019-06-17T13:26:56Z",
        "updatedAt" : "2019-06-18T09:05:02Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "64d0389f2c6ccd0a16f369739cc879b850f52d78",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+1 Basic contracts\n+=================\n+\n+To begin with, you're going to write a very small DAML template, which represents a self-issued, non-transferrable token. Because it's a minimal template, it isn't actually useful on its own - you'll make it more useful later - but it's enough that it can show you the most basic concepts:\n+\n+- Transactions\n+- DAML Modules and Files\n+- Templates\n+- Contracts\n+- Signatories\n+\n+DAML Ledger Basics\n+------------------\n+\n+Like most structures called ledgers, a DAML Ledger is just a list of *commits*. When we say *commit*, we mean the final result of when a *party* successfully *submits* a *transaction* to the ledger.\n+\n+*Transaction* is a concept we'll cover in more detail through this introduction. The most basic examples are the creation and archival of a *contract*.\n+\n+A contract is *active* from the point where there is a committed transaction that creates it, up to the point where there is a committed transaction that *archives* it again.\n+\n+.. Graphic with timeline inactive -> create -> active -> archive -> inactive\n+\n+DAML specifies what transactions are legal on a DAML Ledger. The rules the DAML code specifies are collectively called a *DAML model* or *contract model*.\n+\n+DAML Files and Modules"
  },
  {
    "id" : "88e0a9d7-904c-47ef-b55d-31f524cad74b",
    "prId" : 1717,
    "comments" : [
      {
        "id" : "674a1c1f-c933-4dfd-9b2a-b7241c1845a8",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "sentence case\r\n```suggestion\r\nNext up\r\n```",
        "createdAt" : "2019-06-17T13:27:03Z",
        "updatedAt" : "2019-06-18T09:05:02Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "64d0389f2c6ccd0a16f369739cc879b850f52d78",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+1 Basic contracts\n+=================\n+\n+To begin with, you're going to write a very small DAML template, which represents a self-issued, non-transferrable token. Because it's a minimal template, it isn't actually useful on its own - you'll make it more useful later - but it's enough that it can show you the most basic concepts:\n+\n+- Transactions\n+- DAML Modules and Files\n+- Templates\n+- Contracts\n+- Signatories\n+\n+DAML Ledger Basics\n+------------------\n+\n+Like most structures called ledgers, a DAML Ledger is just a list of *commits*. When we say *commit*, we mean the final result of when a *party* successfully *submits* a *transaction* to the ledger.\n+\n+*Transaction* is a concept we'll cover in more detail through this introduction. The most basic examples are the creation and archival of a *contract*.\n+\n+A contract is *active* from the point where there is a committed transaction that creates it, up to the point where there is a committed transaction that *archives* it again.\n+\n+.. Graphic with timeline inactive -> create -> active -> archive -> inactive\n+\n+DAML specifies what transactions are legal on a DAML Ledger. The rules the DAML code specifies are collectively called a *DAML model* or *contract model*.\n+\n+DAML Files and Modules\n+----------------------\n+\n+Each ``.daml`` file defines a *DAML Module*. At the top of each DAML file is a pragma informing the compiler of the language version and the module name:\n+\n+.. literalinclude:: daml/daml-intro-1/Token.daml\n+  :language: daml\n+  :lines: 6, 9\n+\n+Code comments in DAML are introduced with `--`:\n+\n+.. literalinclude:: daml/daml-intro-1/Token.daml\n+  :language: daml\n+  :lines: 4-9\n+\n+Templates\n+---------\n+\n+A ``template`` defines a type of contract that can be created, and who has the right to do so. *Contracts* are instances of *templates*.\n+\n+.. literalinclude:: daml/daml-intro-1/Token.daml\n+  :language: daml\n+  :lines: 16,21,25,29,34\n+  :caption: A simple template\n+\n+You declare a template starting with the ``template`` keyword, which takes a name as an argument.\n+\n+DAML is whitespace-aware and uses layout to structure *blocks*. Everything that's below the first line is indented, and thus part of the template's body.\n+\n+*Contracts* contain data, referred to as the *create arguments* or simply *arguments*. The ``with`` block defines the data type of the create arguments by listing field names and their types. The single colon ``:`` means \"of type\", so you can read this as \"template ``Token`` with a field ``owner`` of type ``Party``\".\n+\n+``Token`` contracts have a single field ``owner`` of type ``Party``. The fields declared in a template's ``with`` block are in scope in the rest of the template body, which is contained in a ``where`` block.\n+\n+Signatories\n+-----------\n+\n+The ``signatory`` keyword specifies the *signatories* of a contract instance. These are the parties whose *authority* is required to create the contract or archive it again -- just like a real contract. Every contract must have at least one signatory.\n+\n+Furthermore, DAML ledgers *guarantee* that parties see all transactions where their authority is used. This means that signatories of a contract are guaranteed to see the creation and archival of that contract.\n+\n+Next Up"
  }
]