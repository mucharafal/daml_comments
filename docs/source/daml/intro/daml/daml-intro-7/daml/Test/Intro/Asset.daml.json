[
  {
    "id" : "bf6717af-9acc-4a8a-8c20-75aa4916822f",
    "prId" : 7264,
    "comments" : [
      {
        "id" : "08ff6d3d-0383-4317-b7e1-61502f52524f",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "I think this is not a pattern to teach. Much better to use query.",
        "createdAt" : "2020-08-31T14:43:33Z",
        "updatedAt" : "2020-09-08T11:42:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90e9d4d8-d115-49e0-b8c9-31ed05d72cff",
        "parentId" : "08ff6d3d-0383-4317-b7e1-61502f52524f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think you can dismiss this that easily. `query` doesn’t handle divulgence, you have to filter on the client side and it doesn’t allow you to do everything in a single transaction. The latter is not super important for `fetch` but it’s crucial for `fetchByKey` so I’m very hesitant to start telling people to give up on atomicity.",
        "createdAt" : "2020-08-31T14:46:09Z",
        "updatedAt" : "2020-09-08T11:42:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5c80eab3-ec2a-45f2-aab9-b1baaf7287f6",
        "parentId" : "08ff6d3d-0383-4317-b7e1-61502f52524f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Replaced by `queryContractId`",
        "createdAt" : "2020-09-01T11:33:12Z",
        "updatedAt" : "2020-09-08T11:42:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "edfcefed5831fd27018f4cb3fdeb4a98f8ea266a",
    "line" : null,
    "diffHunk" : "@@ -1,74 +1,77 @@\n -- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n -- SPDX-License-Identifier: Apache-2.0\n-\n+{-# LANGUAGE ApplicativeDo #-}\n \n module Test.Intro.Asset where\n \n+import Daml.Script\n+\n import Intro.Asset\n import Intro.Asset.Role\n \n import Test.Intro.Asset.Role\n \n-test_asset = scenario do\n+test_asset = do\n   ((alice, bob, bank, aha, ahb), assetCid) <- test_issuance\n \n   tp <- submit alice do\n-    exercise assetCid ProposeTransfer with\n+    exerciseCmd assetCid ProposeTransfer with\n       newOwner = bob\n \n   assetCid <- submit bob do\n-    exercise ahb Accept_Transfer with\n+    exerciseCmd ahb Accept_Transfer with\n       transferProposalCid = tp\n \n-  submit bank do\n-    asset <- fetch assetCid\n-    assert (asset == Asset with\n+  asset <- submit bank do\n+    createAndExerciseCmd (Helper bank) (FetchAsset assetCid)\n+  assert (asset == Asset with\n       issuer = bank\n       owner = bob\n       symbol = \"USD\"\n       quantity = 100.0\n       observers = []\n         )\n \n-test_split = scenario do\n+test_split = do\n   (setupResult@(alice, bob, bank, _, _), assetCid) <- test_issuance\n \n   submitMustFail alice do\n-    exercise assetCid Split with\n+    exerciseCmd assetCid Split with\n       splitQuantity = -30.0\n \n   submitMustFail alice do\n-    exercise assetCid Split with\n+    exerciseCmd assetCid Split with\n       splitQuantity = 0.0\n \n   submitMustFail alice do\n-    exercise assetCid Split with\n+    exerciseCmd assetCid Split with\n       splitQuantity = 101.0\n \n   splitResult <- submit alice do\n-    exercise assetCid Split with\n+    exerciseCmd assetCid Split with\n       splitQuantity = 30.0\n \n-  submit bank do\n-    splitAsset <- fetch splitResult.splitAsset\n-    remainder <- fetch splitResult.remainder\n+  (splitAsset, remainder) <- submit bank do"
  }
]