[
  {
    "id" : "4ed2796d-9230-45fe-a5cd-9dff7cd05175",
    "prId" : 1717,
    "comments" : [
      {
        "id" : "09c4265b-f577-4298-9a0a-992998bd7d20",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nThe ``SimpleIou`` contract from :doc:`4_Transformations` and :doc:`5_Restrictions` has one major problem: the contract is only signed by the ``issuer``, and the signatories are the parties with the power to create and archive contracts.\r\n\r\nThis means, if Alice gave Bob a ``SimpleIou`` for $100 in exchange for some goods, she could just archive it again after receiving the goods. Bob would have a record of her actions, but would have to resort to off-ledger means to get his money back.\r\n```",
        "createdAt" : "2019-06-17T14:07:15Z",
        "updatedAt" : "2019-06-18T09:05:02Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "876b45ed-9623-454f-837b-40438898ad1a",
        "parentId" : "09c4265b-f577-4298-9a0a-992998bd7d20",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "I would capitalize after colon if what comes after is a complete sentence. Do you always lower-case after colon?",
        "createdAt" : "2019-06-18T07:33:07Z",
        "updatedAt" : "2019-06-18T09:05:02Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "64d0389f2c6ccd0a16f369739cc879b850f52d78",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@-------------------------\n\nThe ``SimpleIou`` contract from :doc:`4_Transformations` and :doc:`5_Restrictions` has one major problem: The contract is only signed by the ``issuer``. The signatories are the parties with the power to create and archive contracts. If Alice gave Bob a ``SimpleIou`` for $100 in exchange for some goods, she could just archive it again after receiving the goods. Bob would have a record such actions, but would have to resort to off-ledger means to get his money back.\n\n.. literalinclude:: daml/daml-intro-6/Parties.daml"
  },
  {
    "id" : "41a6379a-3c2c-4814-ba9a-68c670f6b96f",
    "prId" : 1717,
    "comments" : [
      {
        "id" : "e9f909b6-27ed-49ab-a354-d10b31f16a8f",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Maybe a sub-heading here, \"Who must authorize a transaction\"",
        "createdAt" : "2019-06-17T14:36:21Z",
        "updatedAt" : "2019-06-18T09:05:02Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "64d0389f2c6ccd0a16f369739cc879b850f52d78",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@Hopefully, the above will have given you a good intuition for how authority is passed around in DAML. In this section you'll learn about  the formal authorization model to allow you to reason through your contract models. This will allow you to construct them in such a way that you don't run into authorization errors at runtime, or, worse still, allow malicious transactions.\n\nIn :ref:`choices` you learned that a transaction is, equivalently, a tree of transactions, or a forest of actions, where each transaction is a list of actions, and each action has a child-transaction called its consequences.\n\nEach action has a set of *required authorizers* -- the parties that must authorize that action -- and each transaction has a set of *authorizers* -- the parties that did actually authorize the transaction."
  }
]