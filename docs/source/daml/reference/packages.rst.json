[
  {
    "id" : "45b7e7bb-9645-426e-a0a4-03cd02f6eab0",
    "prId" : 6105,
    "comments" : [
      {
        "id" : "a1731275-6e68-454f-9513-bee9c34e9921",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is it possible to use a prefix with a dot, like `Foo.Bar`, as well? If not, should we consider making it possible? Either way, let's document what is possible in this regard.",
        "createdAt" : "2020-05-28T09:58:18Z",
        "updatedAt" : "2020-05-28T10:13:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8eb91d45-048c-49a3-b676-0f609f0ab944",
        "parentId" : "a1731275-6e68-454f-9513-bee9c34e9921",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yes, we just append it. I’ll document it.",
        "createdAt" : "2020-05-28T10:03:31Z",
        "updatedAt" : "2020-05-28T10:13:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "79647101f49fbd42145e2372c71626b259193f63",
    "line" : 14,
    "diffHunk" : "@@ -230,3 +230,16 @@ This will alias the ``X`` in ``foo-1.0.0`` as ``Foo1.X``, and alias the ``X`` in\n \n   import qualified Foo1.X\n   import qualified Foo2.X\n+\n+It is also possible to add a prefix to all modules in a package using\n+the ``module-prefixes`` field in your ``daml.yaml``. For the example\n+above you can use the following:\n+\n+.. code-block:: yaml\n+\n+  module-prefixes:\n+    foo-1.0.0: Foo1"
  },
  {
    "id" : "2b1f1e0a-4350-4f3e-8825-c325727d00cd",
    "prId" : 6105,
    "comments" : [
      {
        "id" : "5a66c89f-0498-4b58-ad89-115bc744a48e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we add some motivation why you would want to do this here? Or shall we add something to the upgrading docs and reference it from here?",
        "createdAt" : "2020-05-28T09:59:17Z",
        "updatedAt" : "2020-05-28T10:13:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1c985b2f-eb3a-4b16-94ef-2b662be3c9a4",
        "parentId" : "5a66c89f-0498-4b58-ad89-115bc744a48e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This whole section is about handling module name collisions so the motivation is there but I’ll try to make it a bit clearer.",
        "createdAt" : "2020-05-28T10:03:19Z",
        "updatedAt" : "2020-05-28T10:13:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "79647101f49fbd42145e2372c71626b259193f63",
    "line" : null,
    "diffHunk" : "@@ -230,3 +230,16 @@ This will alias the ``X`` in ``foo-1.0.0`` as ``Foo1.X``, and alias the ``X`` in\n \n   import qualified Foo1.X\n   import qualified Foo2.X\n+\n+It is also possible to add a prefix to all modules in a package using\n+the ``module-prefixes`` field in your ``daml.yaml``. For the example\n+above you can use the following:"
  },
  {
    "id" : "f905abc5-99f8-410e-b192-e252774797ef",
    "prId" : 6076,
    "comments" : [
      {
        "id" : "2b249b02-a3c9-44a6-b14e-1553fc896115",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\nYou can run ``daml damlc inspect-dar /path/to/your.dar`` to get a\r\n```",
        "createdAt" : "2020-05-22T18:16:57Z",
        "updatedAt" : "2020-05-22T18:28:31Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "13350f820b88f45a977cfc405a4f6bf6558e647f",
    "line" : null,
    "diffHunk" : "@@ -24,6 +24,87 @@ You can specify a different path for the DAML archive by using the ``-o`` flag:\n \n For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML packages in other DAML projects.\n \n+.. _inspecting_dars:\n+\n+Inspecting DARs\n+***************\n+\n+To inspect a DAR and get information about the packages inside it, you\n+can use the ``daml damlc inspect-dar`` command. This is often useful\n+to find the package id of the project you just built.\n+\n+You can run ``damlc damlc inspect-dar /path/to/your.dar`` to get a"
  },
  {
    "id" : "92722bba-c41c-4166-8e67-23250c2263bb",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "20943ede-2f60-4bc7-9244-1dd078a893b5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nWhen a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code that can be uploaded to a DAML ledger or imported in other DAML projects.\r\n```",
        "createdAt" : "2020-03-11T12:23:40Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9dc18d2d-0fbd-4039-876c-4a5d70d9d7b2",
        "parentId" : "20943ede-2f60-4bc7-9244-1dd078a893b5",
        "author" : null,
        "body" : ":'( English is so ambiguous.",
        "createdAt" : "2020-03-11T14:02:16Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects."
  },
  {
    "id" : "3138cd26-2b24-43c3-8e33-2ffde8dcac86",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We should document how you can rename modules if you have the same name but different versions so you cannot use package-qualified imports to disambiguate. Totally fine to do that in a separate PR. This is also not specific to dependencies or data-dependencies so I wonder if it would make sense to put this into a separate “Handling colliding module names” section at the end or somethin glike that.",
        "createdAt" : "2020-03-11T12:29:35Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82438597-4d83-479f-a8d8-abcf29e24ec7",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : null,
        "body" : "is this just `import \"foo\" Foo as Foo1`, or something else? I agree that dealing with conflicting module names should move to a separate section.",
        "createdAt" : "2020-03-11T14:11:19Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "35dfcb7e-e776-484f-bc03-2ce8b82a983c",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No you need to specify something like `--package foo-1.0.0 (Foo as Foo1)` in your `daml.yaml` in that case.",
        "createdAt" : "2020-03-11T14:15:59Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "786fd2d0-a69f-4878-bd7a-1e099cc652bd",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "See https://github.com/digital-asset/daml/blob/master/compiler/damlc/tests/src/DA/Test/Packaging.hs#L102",
        "createdAt" : "2020-03-11T14:16:21Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cb9438a0-da7f-430a-8a28-084a40c381c5",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : null,
        "body" : "Oh, I see, this is for the case where you have two packages with the same name but different versions. This is terrible UX. Could we not change unit IDs to make package qualified imports work in this case?",
        "createdAt" : "2020-03-11T14:20:26Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b23a5c88-9ac2-4fc0-8cc9-78d6d49fbb89",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : null,
        "body" : "(I mean, change the way unit IDs are chosen from LF packages, so they include the package version.)",
        "createdAt" : "2020-03-11T14:21:20Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dec392a5-c979-4dee-ad05-3a216acede5b",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "GHC has fairly strictly rules about what can be a package name sadly. `foobar-1.0.0` is a valid unit id but it’s not a valid package name (the latter is what you use in package-qualified imports). I believe `foobar-1_0_0` would be but that doesn’t seem very satisfying. I looked into patching GHC at some point to allow the unit id in package-qualified imports and it looked fairly doable but then decided that I’m too lazy :slightly_smiling_face: I think for now, documenting the current state first and then seeing if we can improve upon it seems like the best option.",
        "createdAt" : "2020-03-11T15:49:13Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "61929b21-075b-4efc-8422-750309dbf10b",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : null,
        "body" : "Sounds good 👍 \r\n\r\nMaybe in the future the user could specify an alias for packages in `dependencies` or `data-dependencies`, e.g.\r\n\r\n``` yaml\r\ndependencies:\r\n- daml-prim\r\n- daml-stdlib\r\n- package: foo-1.4.2.dar\r\n  alias: foo-v1  \r\n```\r\n\r\nor whatever syntax is most appropriate",
        "createdAt" : "2020-03-11T16:16:24Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d94352c-1939-4490-9ba5-5ba933ca16fd",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "ah yeah, I thought about this in the past but then forgot about it. That sounds like a reasonably simple option :+1:",
        "createdAt" : "2020-03-11T16:18:55Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5507c44a-337e-4968-a1de-87cd8584b53f",
        "parentId" : "16822f34-9e11-412b-838b-dffd0fe72d8e",
        "author" : null,
        "body" : "I added an issue so we don't forget about it:\r\nhttps://github.com/digital-asset/daml/issues/4948",
        "createdAt" : "2020-03-11T16:45:33Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo"
  },
  {
    "id" : "f534f894-5821-4a47-a15e-1ca45be16a53",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "aef29a1c-85ef-4b62-b20b-577137123cf6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nBy default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To limit which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\r\n```\r\nMakes it a bit clearer that you only need this if you don’t want to export everything.",
        "createdAt" : "2020-03-11T12:30:16Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:"
  },
  {
    "id" : "fa7f912d-26b5-4e6b-a4fe-d155c0081cd3",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "adda66ef-7305-40bb-9aed-e73b936b79e8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I expect that at least for now where libraries don’t really exist, most users will actually want `data-dependencies` not `dependencies` so the warning here at the end might be a bit late. What do you think of adding a small section at the beginning that compares them and maybe swapping the order of `dependencies` and `data-dependencies`?\r\n\r\nHappy to leave that out of this PR.",
        "createdAt" : "2020-03-11T12:32:38Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section."
  },
  {
    "id" : "0795efaf-78e0-48ea-b0f5-a70d713d7619",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "ceb94dd7-5d9a-4b1a-a885-9f1790cae5c0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The way this is written it sounds like maybe I should start out using `dependencies` and then switch to `data-dependencies` once I upgrade SDK versions. I think this is a bit misleading. At least in my view, you should always use data-dependencies once you refer to something where the package id is fixed (which includes everything that has already been uploaded to the ledger). The only case where you should use `dependencies` is when you don’t care about the package id and are free to recompile it at some point, potentially in a different SDK version.",
        "createdAt" : "2020-03-11T12:35:04Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:"
  },
  {
    "id" : "e94332d3-480e-4c1b-8950-6c3c0778fe34",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "d1b2b9f1-0545-4d41-8811-ab2cc5ce23b8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would leave this out. Shipping DALFs around on their own is not something I want anyone to do and I don’t think there are really good reasons for it. as soon as your DALF is not self-contained you also manually have to ensure that all your dependencies are there which becomes very messy.",
        "createdAt" : "2020-03-11T12:36:16Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies."
  },
  {
    "id" : "2c77eb30-e406-40c2-a2cc-8b8b79b64851",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "3a08d270-91dc-44f2-b7c0-ec8f77e6cff5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This sounds a bit too much like it’s describing the implementation rather than what I care about as a user. Not quite sure what a better phrasing is.",
        "createdAt" : "2020-03-11T12:37:54Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive."
  },
  {
    "id" : "b0cc0cd1-f8f6-4c9e-b621-9fd440d6836a",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "dc6462fc-a99b-4e3e-86c0-1a99b21776e4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nTo allow `data-dependencies` to work across SDK versions, they have to abstract over some details which are not compatible across SDK versions. This means that there are some DAML features that cannot be recovered when using `data-dependencies`.\r\n```\r\nSounds a bit less negative, happy to change the wording. This is just a suggestion :slightly_smiling_face: ",
        "createdAt" : "2020-03-11T12:41:01Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive.\n+\n+Compared to dependencies, there are certain disadvantages to this method."
  },
  {
    "id" : "4832acdd-0dad-4f97-a30d-dbb1ae1e05bc",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "e59bb75d-b679-4e22-89d0-db9abba5e43a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would leave this out. This is mainly an artifact of #4413. Once that is implemented, you only pay for this once  and it’s not really a big deal.",
        "createdAt" : "2020-03-11T12:41:43Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive.\n+\n+Compared to dependencies, there are certain disadvantages to this method.\n+\n+The first disadvantage is that the reconstruction process used for data-dependencies is slower than the direct import process used for dependencies, so it will negatively affect the speed of compilation."
  },
  {
    "id" : "ac725118-0d27-4197-badf-fa87f97cb95f",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "0ab1b93a-01a6-4182-9305-febfe7234dee",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think it’s worth pointing out somewhere here that this is not any worse than DAML-LF and therefore the ledger API which also does not support data abstraction (:crying_cat_face:). Currently it sounds a bit too scary imho.",
        "createdAt" : "2020-03-11T12:43:58Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive.\n+\n+Compared to dependencies, there are certain disadvantages to this method.\n+\n+The first disadvantage is that the reconstruction process used for data-dependencies is slower than the direct import process used for dependencies, so it will negatively affect the speed of compilation.\n+\n+The second disadvantage, which has far-reaching consequences, is that not everything can be perfectly reconstructed via data-dependencies. In particular:\n+\n+#. Export lists cannot be reconstructed, so imports via data-dependencies can access definitions that were originally hidden. This means it is up to the importing module to respect the data encapsulation of the original module. On the positive side, the encapsulation can also be ignored on purpose, to facilitate upgrades of DAML models to newer SDK versions."
  },
  {
    "id" : "74d5984f-d057-4ce6-ad8f-de0cbec30c0f",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "b1194fda-eb84-4a7c-b8a2-9c6c992b93e4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think it’s worth mentioning here that this includes all template operations since most users probably have no clue that those involve typeclasses.",
        "createdAt" : "2020-03-11T12:44:51Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive.\n+\n+Compared to dependencies, there are certain disadvantages to this method.\n+\n+The first disadvantage is that the reconstruction process used for data-dependencies is slower than the direct import process used for dependencies, so it will negatively affect the speed of compilation.\n+\n+The second disadvantage, which has far-reaching consequences, is that not everything can be perfectly reconstructed via data-dependencies. In particular:\n+\n+#. Export lists cannot be reconstructed, so imports via data-dependencies can access definitions that were originally hidden. This means it is up to the importing module to respect the data encapsulation of the original module. On the positive side, the encapsulation can also be ignored on purpose, to facilitate upgrades of DAML models to newer SDK versions.\n+\n+#. Certain advanced type system features also cannot be reconstructed, as they are erased in the process of compiling DAML LF binaries. This includes the ``DataKinds``, ``DeriveGeneric``, and ``FunctionalDependencies`` extensions from GHC. This may result in some definitions being unavailable when importing a module that uses these advanced features.\n+\n+#. Prior to DAML LF version 1.8, typeclasses could not be reconstructed from DAML archives. This means if you have an archive that is compiled with an older version of DAML LF, typeclasses and typeclass instances will not be carried over via data-dependencies, and you will not be able to call functions that rely on typeclass instances."
  },
  {
    "id" : "0d8fb1b7-6985-4782-85de-82d56a9a8416",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "6ece753e-a155-44d6-992e-9d5028ebf6c6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think `DataKinds` don’t work in general anyway? We special case a very small number of kinds, primarily generics, in https://github.com/digital-asset/daml/blob/master/compiler/damlc/daml-lf-conversion/src/DA/Daml/LFConversion.hs#L1606 but I’m not sure it works at all outside of that.\r\n\r\nFor FunctionalDepencies, I believe things work as long as we can reexport the typeclass?",
        "createdAt" : "2020-03-11T12:47:30Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive.\n+\n+Compared to dependencies, there are certain disadvantages to this method.\n+\n+The first disadvantage is that the reconstruction process used for data-dependencies is slower than the direct import process used for dependencies, so it will negatively affect the speed of compilation.\n+\n+The second disadvantage, which has far-reaching consequences, is that not everything can be perfectly reconstructed via data-dependencies. In particular:\n+\n+#. Export lists cannot be reconstructed, so imports via data-dependencies can access definitions that were originally hidden. This means it is up to the importing module to respect the data encapsulation of the original module. On the positive side, the encapsulation can also be ignored on purpose, to facilitate upgrades of DAML models to newer SDK versions.\n+\n+#. Certain advanced type system features also cannot be reconstructed, as they are erased in the process of compiling DAML LF binaries. This includes the ``DataKinds``, ``DeriveGeneric``, and ``FunctionalDependencies`` extensions from GHC. This may result in some definitions being unavailable when importing a module that uses these advanced features."
  },
  {
    "id" : "83367466-3ce1-4082-8eee-85e58404571d",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "057c8574-ff96-4430-9954-4a0f06357074",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would switch this section and the one before. I expect basically noone to use the advanced typelevel stuff but typeclasses are more important and at least for a while we’ll have people trying to use DAML-LF < 1.8.",
        "createdAt" : "2020-03-11T12:48:22Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive.\n+\n+Compared to dependencies, there are certain disadvantages to this method.\n+\n+The first disadvantage is that the reconstruction process used for data-dependencies is slower than the direct import process used for dependencies, so it will negatively affect the speed of compilation.\n+\n+The second disadvantage, which has far-reaching consequences, is that not everything can be perfectly reconstructed via data-dependencies. In particular:\n+\n+#. Export lists cannot be reconstructed, so imports via data-dependencies can access definitions that were originally hidden. This means it is up to the importing module to respect the data encapsulation of the original module. On the positive side, the encapsulation can also be ignored on purpose, to facilitate upgrades of DAML models to newer SDK versions.\n+\n+#. Certain advanced type system features also cannot be reconstructed, as they are erased in the process of compiling DAML LF binaries. This includes the ``DataKinds``, ``DeriveGeneric``, and ``FunctionalDependencies`` extensions from GHC. This may result in some definitions being unavailable when importing a module that uses these advanced features.\n+\n+#. Prior to DAML LF version 1.8, typeclasses could not be reconstructed from DAML archives. This means if you have an archive that is compiled with an older version of DAML LF, typeclasses and typeclass instances will not be carried over via data-dependencies, and you will not be able to call functions that rely on typeclass instances."
  },
  {
    "id" : "14f1ca56-18d3-4274-8242-ca2777863f61",
    "prId" : 4936,
    "comments" : [
      {
        "id" : "9f25dcba-a9e8-4d94-be07-8fa0a9769c1d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I agree with this but I think it’s worded a bit too strongly. As mentioned above, I expect that right now, data-dependencies will see far more usage than dependencies so I would go the other way around “use data-dependencies unless you have a library that you can recompile”.",
        "createdAt" : "2020-03-11T12:50:19Z",
        "updatedAt" : "2020-03-12T12:11:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9584bde8322e9b5ef0e505ede56bb2ebbc70ba90",
    "line" : null,
    "diffHunk" : "@@ -12,75 +12,94 @@ This page gives reference information on DAML package dependencies:\n DAML archives\n *************\n \n-When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n-directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n-project is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives are platform\n-independent. They can be deployed on a ledger (see :ref:`deploy <deploy-ref_overview>`) or can be\n-imported into other projects as a package dependency.\n+When a DAML project is compiled, the compiler produces a `DAML archive`. These are platform-independent packages of compiled DAML code, that can be uploaded to a DAML ledger or imported in other DAML projects.\n \n-Importing DAML archives\n-***********************\n+DAML archives have a ``.dar`` file ending. By default, when you run ``daml build``, it will generate the ``.dar`` file in the ``.daml/dist`` folder in the project root folder. For example, running ``daml build`` in project ``foo`` with project version ``0.0.1`` will result in a DAML archive ``.daml/dist/foo-0.0.1.dar``.\n \n-A DAML project can import DAML archive dependencies. Note that currently there is no tooling for\n-DAML package management. To import a package ``Bar`` in project ``Foo``, add the file path of the\n-``Bar`` DAML archive to the ``dependencies`` section of the `daml.yaml` project file:\n+You can specify a different path for the DAML archive by using the ``-o`` flag:\n+\n+.. code-block:: sh\n+\n+  daml build -o foo.dar\n+\n+For details on how to upload a DAML archive to the ledger, see the :ref:`deploy documentation <deploy-ref_overview>`. The rest of this page will focus on how to import a DAML archive as a dependncy in other DAML projects.\n+\n+Importing a DAML archive via dependencies\n+*****************************************\n+\n+A DAML project can declare a DAML archive as a dependency in the ``dependencies` field of ``daml.yaml``. This lets you import modules and reuse definitions from another DAML project.\n+\n+Let's go through an example. Suppose you have an existing DAML project ``foo``, located at ``/home/user/foo``, and you want to use it as a dependency in a project ``bar``, located at ``/home/user/bar``.\n+\n+To do so, you first need to generate the DAML archive of ``foo``. Go into ``/home/user/foo`` and run ``daml build -o foo.dar``. This will create the DAML archive, ``/home/user/foo/foo.dar``.\n+\n+.. TODO (#4925): Make the above step redundant by letting users declare projects directly. Then update this doc.\n+\n+Next, we will update the project config for ``bar`` to use the generated DAML archive as a depndency. Go into ``/home/user/bar`` and change the ``dependencies`` field in ``daml.yaml`` to point to the created `DAML archive`:\n \n .. code-block:: yaml\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n-  exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n   dependencies:\n     - daml-prim\n     - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar-1.0.0.dar\n+    - ../foo/foo.dar\n \n-The import path needs to be the relative or absolute path pointing to the created DAML archive of\n-the ``bar`` project. The archive can reside anywhere on the local file system. Note that the SDK\n-versions of the packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package\n-that was created with an older SDK.\n+The import path can also be absolute, for example, by changing the last line to:\n \n-Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n-imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n-If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n-disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n-Some.Module``.\n+.. code-block:: yaml\n \n-Note that all modules of package ``foo`` that should be available as imports of other packages need\n-to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file. If the\n-``exposed-modules`` stanza is omitted, all modules of the project are exposed by default.\n+    - /home/user/foo/foo.dar\n \n-Importing archives compiled with different SDK's\n-************************************************\n+When you run ``daml build`` in ``bar`` project, the compiler will make the definitions in ``foo.dar`` available for importing. For example, if ``foo`` exports the module ``Foo``, you can import it in the usual way:\n \n-All DAML archive dependencies of a project need to be compiled with the same SDK as the project\n-itself. However, it is possible to import templates and data types of an archive compiled with an\n-older SDK, by listing them under the ``data-dependencies`` stanza:\n+.. code-block:: daml\n \n-.. code-block:: yaml\n+  import Foo\n+\n+Sometimes you will have multiple packages with the same exported module name. In that case, you must also specify which package the module comes from, as follows:\n+\n+.. code-block:: daml\n+\n+  import \"foo\" Foo\n+\n+By default, all modules of ``foo`` are made available when importing ``foo`` as a dependency. To control which modules of ``foo`` get exported, you may add an ``exposed-modules`` field in the ``daml.yaml`` file for ``foo``:\n \n-  sdk-version: 0.0.0\n-  name: foo\n-  source: daml\n-  version: 1.0.0\n   exposed-modules:\n-    - Some.Module\n-    - Some.Other.Module\n+  - Foo\n+\n+**Important Limitation:** For DAML archive imports via ``dependencies`` to work, the archive should be compiled with the same DAML SDK version. Otherwise, compilation will fail. If matching the SDK version is not possible, see the next section.\n+\n+Importing a DAML archive via data-dependencies\n+**********************************************\n+\n+A secondary method for importing a DAML archive, which can be used when the DAML SDK versions do not match, is to import a DAML archive via the ``data-dependencies`` field in ``daml.yaml``:\n+\n+.. code-block:: yaml\n+\n   dependencies:\n-    - daml-prim\n-    - daml-stdlib\n-    - /home/johndoe/bar/.daml/dist/bar.dar\n+  - daml-prim\n+  - daml-stdlib\n   data-dependencies:\n-    - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+  - ../foo/foo.dar\n \n-Modules from data dependencies can be imported as usual, but need to be qualified by the\n-(generated) instances package:\n+You can also import a ``.dalf`` file via data-dependencies.\n \n-.. code-block:: daml\n+When importing packages this way, the DAML compiler will attempt to reconstruct the DAML interface from the compiled DAML-LF binaries included in the DAML archive.\n+\n+Compared to dependencies, there are certain disadvantages to this method.\n+\n+The first disadvantage is that the reconstruction process used for data-dependencies is slower than the direct import process used for dependencies, so it will negatively affect the speed of compilation.\n+\n+The second disadvantage, which has far-reaching consequences, is that not everything can be perfectly reconstructed via data-dependencies. In particular:\n+\n+#. Export lists cannot be reconstructed, so imports via data-dependencies can access definitions that were originally hidden. This means it is up to the importing module to respect the data encapsulation of the original module. On the positive side, the encapsulation can also be ignored on purpose, to facilitate upgrades of DAML models to newer SDK versions.\n+\n+#. Certain advanced type system features also cannot be reconstructed, as they are erased in the process of compiling DAML LF binaries. This includes the ``DataKinds``, ``DeriveGeneric``, and ``FunctionalDependencies`` extensions from GHC. This may result in some definitions being unavailable when importing a module that uses these advanced features.\n+\n+#. Prior to DAML LF version 1.8, typeclasses could not be reconstructed from DAML archives. This means if you have an archive that is compiled with an older version of DAML LF, typeclasses and typeclass instances will not be carried over via data-dependencies, and you will not be able to call functions that rely on typeclass instances.\n+\n+#. When possible, typeclass instances will be reconstructed using the typeclass definitions from dependencies (such as the typeclass definitions from ``daml-stdlib``). But if the typeclass methods or signature has changed, you will get an instance for a reconstructed typeclass instead, which will not interoperate with code from dependencies. So this is something to keep in mind when typeclass definitions have changed.\n \n-  import \"instances-bar\" Foo\n+.. TODO (#4932): Add warnings for advanced features that aren't supported, and add a comment on bullet #2.\n \n+Given this long list of disadvantages, data-dependencies are a tool that is only recommended when dependencies cannot be used. In particular, data-dependencies should only be used to interface with deployed code on a ledger, such as to interact with a deployed DAML model or to upgrade of a deployed DAML model. See the :ref:`upgrade documentation <upgrade-overview>` for more details on the latter."
  },
  {
    "id" : "7f79f155-a5cf-4240-aacd-a9035ba1a7a2",
    "prId" : 3457,
    "comments" : [
      {
        "id" : "2355b315-007f-4830-8bee-1bbd345442d5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I am not sure I understand why this is required. Which module do we collide with? Afaict we should only be loading interface files for the `instances` package but not from the original package (which might not even have interface files). I would prefer if we could avoid having the instances module leak to users.",
        "createdAt" : "2019-11-14T09:15:33Z",
        "updatedAt" : "2019-11-14T09:15:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7794055f-8305-4c57-b5c1-07219484bf2e",
        "parentId" : "2355b315-007f-4830-8bee-1bbd345442d5",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "discussed this with @hurryabit . the imports are ambiguous without package qualification because the original module is also in the package database. we might get away by removing it from the package database after having built the interface package. but we'd like to go with this for now and see if we can drop the qualification in a later step.",
        "createdAt" : "2019-11-14T12:50:46Z",
        "updatedAt" : "2019-11-14T12:50:46Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ce4cd5cddf56cebf007276e5da02f5357cbcf54d",
    "line" : 7,
    "diffHunk" : "@@ -77,12 +77,10 @@ older SDK, by listing them under the ``data-dependencies`` stanza:\n   data-dependencies:\n     - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n \n-Modules from data dependencies can be imported as usual via a ``import Foo`` statement. To have the\n-``Template``, ``Choice``, ``TemplateKey``, ``Eq``, ``Show`` and ``HasField`` available of the imported template\n-types, also import the generated instances module:\n+Modules from data dependencies can be imported as usual, but need to be qualified by the"
  },
  {
    "id" : "192500f6-b681-48a2-ba88-5dfc8d483599",
    "prId" : 3433,
    "comments" : [
      {
        "id" : "fdf548de-15a2-489f-a0ec-c53e6ba63202",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we do `import qualified \"foo\" Foo as Foo.Data` in `FooInstances` and then re-export `module Foo.Data`? If so, let's also rename `FooInstances` to plain `Foo`.",
        "createdAt" : "2019-11-12T18:47:48Z",
        "updatedAt" : "2019-11-12T18:47:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eb82f4c8-f891-476c-95b1-14756583c30f",
        "parentId" : "fdf548de-15a2-489f-a0ec-c53e6ba63202",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I'll try.",
        "createdAt" : "2019-11-13T11:42:12Z",
        "updatedAt" : "2019-11-13T11:42:13Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "007479827821259d89a71123630a08138029a07c",
    "line" : 12,
    "diffHunk" : "@@ -76,3 +76,13 @@ older SDK, by listing them under the ``data-dependencies`` stanza:\n     - /home/johndoe/bar/.daml/dist/bar.dar\n   data-dependencies:\n     - /home/jondoe/bar-0.0.0/.daml/dist/bar-0.0.0.dar\n+\n+Modules from data dependencies can be imported as usual via a ``import Foo`` statement. To have the\n+``Template``, ``Choice``, ``TemplateKey``, ``Eq``, ``Show`` and ``HasField`` available of the imported template\n+types, also import the generated instances module:\n+\n+.. code-block:: daml\n+\n+  import Foo\n+  import FooInstances()"
  },
  {
    "id" : "b942aed7-4fec-4f61-9498-9e82761b6c20",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "0403baab-fe70-46fe-a58a-5a217369d61e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nproject is the `DAML archive`, recognized by the ``.dar`` file ending. DAML archives can be deployed\r\n```",
        "createdAt" : "2019-08-14T06:58:32Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed"
  },
  {
    "id" : "e25aad0d-2c80-415a-bb6c-caa72c293668",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "413b361b-e9e6-4876-bb49-db77bf59349b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe `Depending on DAML archives` would be better? Otherwise we have two sections that talk about `imports` which is a bit confusing.",
        "createdAt" : "2019-08-14T06:59:45Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : 21,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives"
  },
  {
    "id" : "62d466f1-d6f6-45f3-a3bd-455408858be5",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "5163b4a2-1bb3-4bd2-8da7-01621e53d42c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should that be `DAML archive`? We seem to be a bit inconsistent on whether we call it a package or an archive.",
        "createdAt" : "2019-08-14T07:00:25Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e80ecee-0c6a-4181-b8e1-401f91cc6d54",
        "parentId" : "5163b4a2-1bb3-4bd2-8da7-01621e53d42c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I'm also not quite sure about what our terminology is.",
        "createdAt" : "2019-08-14T10:15:52Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46ac0dc6-6edd-4174-9c5c-b5e6cf3e01a5",
        "parentId" : "5163b4a2-1bb3-4bd2-8da7-01621e53d42c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I go with archive for now",
        "createdAt" : "2019-08-14T10:20:28Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package"
  },
  {
    "id" : "dd7b9808-6b80-4c36-8b83-19d347ff5629",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "86ff7127-b959-49fe-8c3f-122b64a31c81",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "IIRC @lucianojoublanc-da tried relative paths and that worked.",
        "createdAt" : "2019-08-14T07:01:26Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "86a5c857-a53c-4358-85eb-bf15308f2644",
        "parentId" : "86ff7127-b959-49fe-8c3f-122b64a31c81",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Ah, even better.",
        "createdAt" : "2019-08-14T10:21:13Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package\n+managing tooling for DAML packages and the process is manual. To import a package ``Bar`` in project\n+``Foo``, add the file path of the ``Bar`` DAML archive to the ``dependencies`` section of the\n+`daml.yaml` project file:\n+\n+.. code-block:: yaml\n+\n+  sdk-version: 0.0.0\n+  name: foo\n+  source: daml/foo.daml\n+  version: 1.0.0\n+  exposed-modules:\n+    - Some.Module\n+    - Some.Other.Module\n+  dependencies:\n+    - daml-prim\n+    - daml-stdlib\n+    - /home/johndoe/bar/.daml/dist/bar.dar\n+\n+The import path needs to be the absolute path pointing to the created DAML archive of the ``bar``"
  },
  {
    "id" : "89ab82d2-077c-4122-bb9e-3d7eef703080",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "edbfcbed-74c9-4406-bc86-72ea244939b5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We should also mention that the archives are platform specific (at least I think they are).",
        "createdAt" : "2019-08-14T07:04:28Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cddd649f-8846-4eff-a915-bade2055c83d",
        "parentId" : "edbfcbed-74c9-4406-bc86-72ea244939b5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@robin-da Can you please check if an archive created under Linux works under Windows. And vice versa.",
        "createdAt" : "2019-08-14T07:45:15Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "541aee91-c6ba-4441-8ea7-ceadc4a18455",
        "parentId" : "edbfcbed-74c9-4406-bc86-72ea244939b5",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "They should be, I'll check.",
        "createdAt" : "2019-08-14T10:21:05Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package\n+managing tooling for DAML packages and the process is manual. To import a package ``Bar`` in project\n+``Foo``, add the file path of the ``Bar`` DAML archive to the ``dependencies`` section of the\n+`daml.yaml` project file:\n+\n+.. code-block:: yaml\n+\n+  sdk-version: 0.0.0\n+  name: foo\n+  source: daml/foo.daml\n+  version: 1.0.0\n+  exposed-modules:\n+    - Some.Module\n+    - Some.Other.Module\n+  dependencies:\n+    - daml-prim\n+    - daml-stdlib\n+    - /home/johndoe/bar/.daml/dist/bar.dar\n+\n+The import path needs to be the absolute path pointing to the created DAML archive of the ``bar``\n+project. The archive can reside anywhere on the local file system. Note that the SDK versions of the\n+packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package that was created"
  },
  {
    "id" : "6a460440-ed78-467e-bb4d-1184bb7d8486",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "789ca8d3-fb43-4d37-9230-0c1956a4653d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Probably worth mentioning here again that if you do not specify `exposed-modules` we default to exposing all modules.",
        "createdAt" : "2019-08-14T07:06:11Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cedf0914-aa56-4f5e-8504-b7e5ee611b69",
        "parentId" : "789ca8d3-fb43-4d37-9230-0c1956a4653d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "done.",
        "createdAt" : "2019-08-14T10:24:46Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package\n+managing tooling for DAML packages and the process is manual. To import a package ``Bar`` in project\n+``Foo``, add the file path of the ``Bar`` DAML archive to the ``dependencies`` section of the\n+`daml.yaml` project file:\n+\n+.. code-block:: yaml\n+\n+  sdk-version: 0.0.0\n+  name: foo\n+  source: daml/foo.daml\n+  version: 1.0.0\n+  exposed-modules:\n+    - Some.Module\n+    - Some.Other.Module\n+  dependencies:\n+    - daml-prim\n+    - daml-stdlib\n+    - /home/johndoe/bar/.daml/dist/bar.dar\n+\n+The import path needs to be the absolute path pointing to the created DAML archive of the ``bar``\n+project. The archive can reside anywhere on the local file system. Note that the SDK versions of the\n+packages ``foo`` and ``bar`` need to match, i.e. it is an error to import a package that was created\n+with an older SDK.\n+\n+Once a package has been added to the dependencies of the ``foo`` project, modules of ``bar`` can be\n+imported as usual with the ``import Some.Module`` directive (see :ref:`Imports <daml-ref-imports>`).\n+If both projects ``foo`` as well as ``bar`` contain a module with the same name, the import can be\n+disambiguated by adding the package name in front of the module name, e.g. ``import \"bar\"\n+Some.Module``.\n+\n+Note that all modules of package ``foo`` that should be available as imports of other packages need\n+to be exposed by adding them to the ``exposed-modules`` stanza of the `daml.yaml` file."
  },
  {
    "id" : "ba3c2b65-4b26-4e8d-b545-b9a92219ccfd",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "2bc20c61-5505-41cc-8a2a-385fb78aa233",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Maybe:\r\n> Note that currently there is no tooling for DAML package management.",
        "createdAt" : "2019-08-14T07:41:13Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5ce3440a-5ca3-4337-a1a4-168fdc53878b",
        "parentId" : "2bc20c61-5505-41cc-8a2a-385fb78aa233",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "changed.",
        "createdAt" : "2019-08-14T10:28:44Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package\n+managing tooling for DAML packages and the process is manual. To import a package ``Bar`` in project"
  },
  {
    "id" : "ec946b06-4f94-48d3-8c0e-063590d95f04",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "74c20a0b-c90b-4a1c-88f9-6a3d19ac1629",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That SDK version is basically an internal hack. Do we want that in the docs?",
        "createdAt" : "2019-08-14T07:42:24Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c114d901-1c13-4508-8e37-0fcce00638c7",
        "parentId" : "74c20a0b-c90b-4a1c-88f9-6a3d19ac1629",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "If I put the current sdk version, it will be outdated quickly. Is there a way to get the current sdk version inserted here?",
        "createdAt" : "2019-08-14T10:26:06Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : 30,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package\n+managing tooling for DAML packages and the process is manual. To import a package ``Bar`` in project\n+``Foo``, add the file path of the ``Bar`` DAML archive to the ``dependencies`` section of the\n+`daml.yaml` project file:\n+\n+.. code-block:: yaml\n+\n+  sdk-version: 0.0.0"
  },
  {
    "id" : "88396188-78fa-47ae-b4d0-f4a6f66921e2",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "6ee3feda-7a40-4da6-8c6a-35542c31d632",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Perhaps our documentation should not use `foo`, `bar` and friends. Applies below as well.\r\n```suggestion\r\n  name: example-package\r\n```",
        "createdAt" : "2019-08-14T07:43:14Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a3e3f2ea-bc47-44fb-95e8-f074f1e71c2e",
        "parentId" : "6ee3feda-7a40-4da6-8c6a-35542c31d632",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I find example-package1 and example-package2 rather heavy to read and prefer foo/bar.",
        "createdAt" : "2019-08-14T10:29:45Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3362c8e1-7a57-4b25-b2d6-565867ab456e",
        "parentId" : "6ee3feda-7a40-4da6-8c6a-35542c31d632",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "How about `demo-lib` and `demo-app`? That also makes it easier to remember. which package import which.",
        "createdAt" : "2019-08-14T10:58:32Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : 31,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package\n+managing tooling for DAML packages and the process is manual. To import a package ``Bar`` in project\n+``Foo``, add the file path of the ``Bar`` DAML archive to the ``dependencies`` section of the\n+`daml.yaml` project file:\n+\n+.. code-block:: yaml\n+\n+  sdk-version: 0.0.0\n+  name: foo"
  },
  {
    "id" : "45afb34c-19d3-42b6-913e-6822a80e454b",
    "prId" : 2518,
    "comments" : [
      {
        "id" : "acd5b51a-eb00-4871-925e-9254332e5f54",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  source: daml/Main.daml\r\n```",
        "createdAt" : "2019-08-14T07:43:25Z",
        "updatedAt" : "2019-08-14T11:36:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e09ecfa935fe309a570bfb5364c456790103a7d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Reference: DAML packages\n+########################\n+\n+This page gives reference information on DAML package dependencies:\n+\n+.. contents:: :local:\n+\n+DAML archives\n+*************\n+\n+When a DAML project is build with ``daml build``, build artifacts are generated in the hidden\n+directory ``.daml/dist/`` relative to the project root directory. The main build artifact of a\n+project is the `DAML archive`, recoginzed by the ``.dar`` file ending. DAML archives can be deployed\n+on a ledger (see :ref:`deploy <daml-ref-deploy>`) or can be imported into other projects as a package dependency.\n+\n+Importing DAML archives\n+***********************\n+\n+A DAML project can import DAML package dependencies. Note that currently there is no package\n+managing tooling for DAML packages and the process is manual. To import a package ``Bar`` in project\n+``Foo``, add the file path of the ``Bar`` DAML archive to the ``dependencies`` section of the\n+`daml.yaml` project file:\n+\n+.. code-block:: yaml\n+\n+  sdk-version: 0.0.0\n+  name: foo\n+  source: daml/foo.daml"
  }
]