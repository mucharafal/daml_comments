[
  {
    "id" : "4d8618b7-bc3d-402a-9511-2294a8096200",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "a5ba8182-590c-46e3-b3c3-55a7b19faa35",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nThe Trigger Service is currently an :doc:`Early Access Feature in Alpha status </support/status-definitions>`. At this time, the documentation is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\r\n```",
        "createdAt" : "2020-09-24T07:31:07Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -4,7 +4,7 @@\n Trigger Service\n ###############\n \n-**WARNING:** The Trigger Service is an early access feature that is actively being designed and is *subject to breaking changes*. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\n+The Trigger Service is currently an :doc:`Early Access Feature in Alpha status </support/status-definitions>`. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_."
  },
  {
    "id" : "6af9f61f-9cf1-488b-83ce-f5fd8d2863d5",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "96b0ecb0-fd53-4ba1-ad04-18a2585a20b8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would suggest that you copy the header from DAML REPL. In particular, it would be nice to have links to issue tracker, forum and slack.",
        "createdAt" : "2020-06-12T17:19:00Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9152eb93-e8b3-4dbb-bf69-d1a62f28c56f",
        "parentId" : "96b0ecb0-fd53-4ba1-ad04-18a2585a20b8",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok!",
        "createdAt" : "2020-06-12T17:39:02Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,123 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack."
  },
  {
    "id" : "9a7a2f8f-388d-402e-a087-ae0b3baa588e",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "7c9fccf7-7911-4eec-b722-1e1412e63100",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nComplex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The Trigger Service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\r\n```\r\nor different capitalization but this should be consistent with the title imho. Same thing fr a couple of references below.",
        "createdAt" : "2020-06-12T17:20:01Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "20be7c44-ff06-4854-8156-327e2ea03996",
        "parentId" : "7c9fccf7-7911-4eec-b722-1e1412e63100",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Done holistically.",
        "createdAt" : "2020-06-12T17:44:04Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,123 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them."
  },
  {
    "id" : "186a1d7f-3d98-4076-afa1-66c1fc3473de",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "e4753dc5-e571-4231-93c0-d88da114440f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nThe trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is an HTTP REST service. All requests and responses use JSON to encode data.\r\n```\r\nI like short explanations for this kind of stuff. Everyone knows what a REST API is and people will expect it to be JSON by default so you only have to confirm what they believe anyway.",
        "createdAt" : "2020-06-12T17:24:08Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a6387aea-820d-43b5-b7df-6f76ea59f971",
        "parentId" : "e4753dc5-e571-4231-93c0-d88da114440f",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "much nicer.",
        "createdAt" : "2020-06-12T17:44:48Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format."
  },
  {
    "id" : "6a3e2f3b-dec2-4042-8728-3d98db77d542",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "aca36c81-729c-4faa-8e8a-05b96ea169f9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nIn this example, it is assumed there is a sandbox ledger running on port 6865 on localhost.\r\n```",
        "createdAt" : "2020-06-12T17:24:41Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d48228a4-6471-443f-b3b2-67517a9843bd",
        "parentId" : "aca36c81-729c-4faa-8e8a-05b96ea169f9",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ \r\n",
        "createdAt" : "2020-06-12T17:45:20Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host."
  },
  {
    "id" : "93c46483-c21a-415d-867d-0b8e3fb1d8c2",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "a53f18e0-bdc0-4ed0-8fb7-193c42cf9775",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Definitely not for this PR but if we want to keep the `--dar` option we should probably extend it to allow passing it multiple times. Implementation effort should be very low given that we have dynamic DAR uploads.",
        "createdAt" : "2020-06-12T17:26:01Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a411d59c-dc61-4a0e-91d7-8542b11044c2",
        "parentId" : "a53f18e0-bdc0-4ed0-8fb7-193c42cf9775",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "That's a good idea. I'll raise an issue.",
        "createdAt" : "2020-06-12T17:45:36Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "449d4eb5-10af-4c88-8107-38a4554ee42e",
        "parentId" : "a53f18e0-bdc0-4ed0-8fb7-193c42cf9775",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "https://github.com/digital-asset/daml/issues/6332",
        "createdAt" : "2020-06-12T17:46:49Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the trigger-service using a number of default parameters. Most notably, the HTTP port the trigger service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in the next section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the trigger-service exposes an endpoint for end-users to upload DAR files to the service (DAML archives containing triggers), it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided."
  },
  {
    "id" : "c138724a-50c9-4dee-ba27-cc4b6efbb425",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "8b3beaf9-aa39-4f0f-bd01-a371e3f0f946",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wouldn’t explain DARs here. If you get to the point where you use the trigger service, you’ve interacted with DARs quite a bit.",
        "createdAt" : "2020-06-12T17:26:28Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1343ae22-8713-4ebf-8df2-02eac8ae6224",
        "parentId" : "8b3beaf9-aa39-4f0f-bd01-a371e3f0f946",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Fair.\r\n",
        "createdAt" : "2020-06-12T17:47:20Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the trigger-service using a number of default parameters. Most notably, the HTTP port the trigger service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in the next section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the trigger-service exposes an endpoint for end-users to upload DAR files to the service (DAML archives containing triggers), it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided."
  },
  {
    "id" : "9dac6bf0-efa9-4d93-80a1-064a01da57c5",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "952aece2-8ccd-443c-acf2-b621e2e48421",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wouldn’t be so detailed when it comes to later versions. Just state something like “for now the password is ignored. future versions of the trigger service will support authentication and validate passwords.”",
        "createdAt" : "2020-06-12T17:27:57Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "209d5cc5-f1eb-4712-910e-67614a8e21a2",
        "parentId" : "952aece2-8ccd-443c-acf2-b621e2e48421",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok!",
        "createdAt" : "2020-06-12T17:47:53Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the trigger-service using a number of default parameters. Most notably, the HTTP port the trigger service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in the next section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the trigger-service exposes an endpoint for end-users to upload DAR files to the service (DAML archives containing triggers), it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+Identifying trigger parties\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this section, we briefly explain how parties are identified in end-user interactions with a running trigger service.\n+\n+When an end-user interacts with a trigger-service, they do so by sending HTTP requests to one of several trigger-service HTTP endpoints. Such requests must contain information detailing the party the trigger-service is to act on the behalf of in its handling of the user request.\n+\n+This party information is conveyed via  HTTP basic authentication headers where the requesting party is represented by a unique username/password pair (Later versions of this documentation will explain running the trigger-service in authenticated contexts. For now, we assume non-authenticated contexts. In these contexts, the passwords associated with parties are not important and may have any values at all but they still must be provided)."
  },
  {
    "id" : "a1c7dd54-4e15-455d-82e9-c30fe49d714c",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "2cacf071-5858-4497-975d-973520b03d5f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think this is the right place to explain how HTTP Basic Auth works. Basically all http libraries do this for you. Even `curl` does! You can simplify your examples below by using curl’s `--user` option and nobody ever has to know that this is base64 encoded or which header you have to set.",
        "createdAt" : "2020-06-12T17:31:28Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f6e5e0c-3bca-438a-a751-d71eb272b0c8",
        "parentId" : "2cacf071-5858-4497-975d-973520b03d5f",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "i didn't know about that. ok, let me look into this and removing this crud :)",
        "createdAt" : "2020-06-12T17:49:27Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fa86771a-a293-47b8-bced-baef1c77140f",
        "parentId" : "2cacf071-5858-4497-975d-973520b03d5f",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ ",
        "createdAt" : "2020-06-12T17:56:45Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the trigger-service using a number of default parameters. Most notably, the HTTP port the trigger service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in the next section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the trigger-service exposes an endpoint for end-users to upload DAR files to the service (DAML archives containing triggers), it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+Identifying trigger parties\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this section, we briefly explain how parties are identified in end-user interactions with a running trigger service.\n+\n+When an end-user interacts with a trigger-service, they do so by sending HTTP requests to one of several trigger-service HTTP endpoints. Such requests must contain information detailing the party the trigger-service is to act on the behalf of in its handling of the user request.\n+\n+This party information is conveyed via  HTTP basic authentication headers where the requesting party is represented by a unique username/password pair (Later versions of this documentation will explain running the trigger-service in authenticated contexts. For now, we assume non-authenticated contexts. In these contexts, the passwords associated with parties are not important and may have any values at all but they still must be provided).\n+\n+With an understanding of the role of credentials now in mind we can explain the ``--no-secret-key`` parameter passed to the trigger-service in the preceding section. When the trigger-service stores credentials it first encrypts them. The encryption/decryption algorithms it uses to do so require the use of a \"key\". What key is to be used is expected to be provided as the value of the environment variable ``TRIGGER_SERVICE_SECRET_KEY`` (for example, before starting the trigger-service by a command like ``export TRIGGER_SERVICE_SECRET_KEY=\"my secret key\"``). At startup, if the trigger-service detects that the environment variable is not defined then it will terminate unless the parameter ``--no-secret-key`` is in its startup options. If it is, the service will continue with a default key.\n+\n+If the party 'alice' has password '&alC2l3SDS*V' then we can construct her credentials token by joining her username to her password separated by ':' giving 'alice:&alC2l3SDS*V'. Then base64 encoding her credentials token gives 'YWxpY2U6JmFsQzJsM1NEUypW'. We will see example usage of the credential tokens produced in this fashion in the next section where examples are given sending requests to the trigger-service."
  },
  {
    "id" : "b016167d-8250-44bc-9ada-5c4446be2fc1",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "ceb37e6f-1a61-4760-879a-961f3ac3a08b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Given that these requests are not sorted alphabetically, I would suggest to sort them by importance. The first thing I want to know is how I can start a trigger, then how I can stop a trigger. Then probably listing and then it starts to become less important in general so the order matters less as well. The health check is probably the very last thing anyone cares about when they are just starting out.",
        "createdAt" : "2020-06-12T17:33:00Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a3a7c8ab-22b2-443e-b1a1-2215b2447d36",
        "parentId" : "ceb37e6f-1a61-4760-879a-961f3ac3a08b",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "there's a bit of a narrative there though - upload dar - start trigger -stop trigger - list - status - health. how do you feel about that?",
        "createdAt" : "2020-06-12T17:57:46Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3acc8b22-47f4-4cba-8fb1-f708313564fe",
        "parentId" : "ceb37e6f-1a61-4760-879a-961f3ac3a08b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would still move uploading later since you can skip it if you pass in the DAR. Apart from that sounds like a great order :+1:",
        "createdAt" : "2020-06-12T17:58:56Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f224468-a753-4f0e-bc1b-84a40de68795",
        "parentId" : "ceb37e6f-1a61-4760-879a-961f3ac3a08b",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ \r\n",
        "createdAt" : "2020-06-12T18:01:59Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the trigger-service using a number of default parameters. Most notably, the HTTP port the trigger service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in the next section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the trigger-service exposes an endpoint for end-users to upload DAR files to the service (DAML archives containing triggers), it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+Identifying trigger parties\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this section, we briefly explain how parties are identified in end-user interactions with a running trigger service.\n+\n+When an end-user interacts with a trigger-service, they do so by sending HTTP requests to one of several trigger-service HTTP endpoints. Such requests must contain information detailing the party the trigger-service is to act on the behalf of in its handling of the user request.\n+\n+This party information is conveyed via  HTTP basic authentication headers where the requesting party is represented by a unique username/password pair (Later versions of this documentation will explain running the trigger-service in authenticated contexts. For now, we assume non-authenticated contexts. In these contexts, the passwords associated with parties are not important and may have any values at all but they still must be provided).\n+\n+With an understanding of the role of credentials now in mind we can explain the ``--no-secret-key`` parameter passed to the trigger-service in the preceding section. When the trigger-service stores credentials it first encrypts them. The encryption/decryption algorithms it uses to do so require the use of a \"key\". What key is to be used is expected to be provided as the value of the environment variable ``TRIGGER_SERVICE_SECRET_KEY`` (for example, before starting the trigger-service by a command like ``export TRIGGER_SERVICE_SECRET_KEY=\"my secret key\"``). At startup, if the trigger-service detects that the environment variable is not defined then it will terminate unless the parameter ``--no-secret-key`` is in its startup options. If it is, the service will continue with a default key.\n+\n+If the party 'alice' has password '&alC2l3SDS*V' then we can construct her credentials token by joining her username to her password separated by ':' giving 'alice:&alC2l3SDS*V'. Then base64 encoding her credentials token gives 'YWxpY2U6JmFsQzJsM1NEUypW'. We will see example usage of the credential tokens produced in this fashion in the next section where examples are given sending requests to the trigger-service.\n+\n+End-user interaction with the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``health``"
  },
  {
    "id" : "2aba819a-2a6a-49c6-9d96-a5bd3abf067c",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "6c7761a7-4a09-44cc-b29c-32a368acdb9b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "As suggested above, I recommend using `--user`.",
        "createdAt" : "2020-06-12T17:33:22Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cca4747f-1b09-44e5-89ad-8d884e44108e",
        "parentId" : "6c7761a7-4a09-44cc-b29c-32a368acdb9b",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yep.",
        "createdAt" : "2020-06-12T18:02:06Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the trigger-service using a number of default parameters. Most notably, the HTTP port the trigger service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in the next section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the trigger-service exposes an endpoint for end-users to upload DAR files to the service (DAML archives containing triggers), it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+Identifying trigger parties\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this section, we briefly explain how parties are identified in end-user interactions with a running trigger service.\n+\n+When an end-user interacts with a trigger-service, they do so by sending HTTP requests to one of several trigger-service HTTP endpoints. Such requests must contain information detailing the party the trigger-service is to act on the behalf of in its handling of the user request.\n+\n+This party information is conveyed via  HTTP basic authentication headers where the requesting party is represented by a unique username/password pair (Later versions of this documentation will explain running the trigger-service in authenticated contexts. For now, we assume non-authenticated contexts. In these contexts, the passwords associated with parties are not important and may have any values at all but they still must be provided).\n+\n+With an understanding of the role of credentials now in mind we can explain the ``--no-secret-key`` parameter passed to the trigger-service in the preceding section. When the trigger-service stores credentials it first encrypts them. The encryption/decryption algorithms it uses to do so require the use of a \"key\". What key is to be used is expected to be provided as the value of the environment variable ``TRIGGER_SERVICE_SECRET_KEY`` (for example, before starting the trigger-service by a command like ``export TRIGGER_SERVICE_SECRET_KEY=\"my secret key\"``). At startup, if the trigger-service detects that the environment variable is not defined then it will terminate unless the parameter ``--no-secret-key`` is in its startup options. If it is, the service will continue with a default key.\n+\n+If the party 'alice' has password '&alC2l3SDS*V' then we can construct her credentials token by joining her username to her password separated by ':' giving 'alice:&alC2l3SDS*V'. Then base64 encoding her credentials token gives 'YWxpY2U6JmFsQzJsM1NEUypW'. We will see example usage of the credential tokens produced in this fashion in the next section where examples are given sending requests to the trigger-service.\n+\n+End-user interaction with the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``health``\n+**********\n+\n+Test connectivity.\n+\n+.. code-block:: bash\n+\n+   $ curl -X GET localhost:8088/v1/health\n+   {\"status\":\"pass\"}\n+\n+``upload_dar``\n+**************\n+\n+Upload an automation DAR. If successful, the DAR's \"main package ID\" will be in the response (the main package ID for a DAR can also be obtained using ``daml damlc inspect-dar DAR`` where ``DAR`` is the path to the DAR file on disk).\n+\n+.. code-block:: bash\n+\n+   $ curl -F 'dar=@/home/alice/test-model.dar' localhost:8088/v1/upload_dar\n+   {\"result\":{\"mainPackageId\":\"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\"},\"status\":200}\n+\n+``start``\n+*********\n+\n+Start a trigger. In this example, Alice (note the authorization header) starts the trigger called ``trigger`` in the ``TestTrigger`` module of the DAR uploaded in the previous section. The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger.\n+\n+.. code-block:: bash\n+\n+   $ curl -X POST localhost:8088/v1/start \\\n+       -H \"Content-type: application/json\" \\\n+       -H \"Accept: application/json\" \\\n+       -H \"Authorization: Basic YWxpY2U6JmFsQzJsM1NEUypW\" \\"
  },
  {
    "id" : "db85b5ad-a09f-44a5-ad09-a5e73ed6d55f",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "fc93cab9-36e7-4f3c-bf3b-e1a5da485d39",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Similar to my comment below, I would suggest to move the requests above this so people can get started quickly. If I see a `--user` option to `curl` I can probably guess what it does and if I cannot I can still read the details below.",
        "createdAt" : "2020-06-12T17:35:34Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d7ddf6f4-54b9-41ce-9e69-51c940cd713c",
        "parentId" : "fc93cab9-36e7-4f3c-bf3b-e1a5da485d39",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok.",
        "createdAt" : "2020-06-12T18:02:23Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "269a12ac-a8a9-407b-90e4-a213824b49de",
        "parentId" : "fc93cab9-36e7-4f3c-bf3b-e1a5da485d39",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ ",
        "createdAt" : "2020-06-12T18:03:48Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,119 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The triggers-service is an early access feature that is actively being designed and is subject to breaking changes. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the trigger-service on our issue tracker, our forum, or on Slack.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The trigger-service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is a REST service that interacts with end-users by exchanging HTTP requests and responses. Request/response data exchanged between the end-users and the trigger-service is in the JSON data-interchange format.\n+\n+Starting the trigger-service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on the local host.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the trigger-service using a number of default parameters. Most notably, the HTTP port the trigger service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in the next section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the trigger-service exposes an endpoint for end-users to upload DAR files to the service (DAML archives containing triggers), it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+Identifying trigger parties"
  },
  {
    "id" : "c0f87ae8-a47b-4071-86ae-e86108c98111",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "02dff36e-97ab-4d11-9f3a-bca6db9deee0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nStart a trigger. In this example, Alice starts the trigger called ``trigger`` in a module called ``TestTrigger`` of a package with ID ``312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14``. The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger.\r\n```\r\n\r\nYou could also consider “cheating” and using a placeholder, e.g., `pkgid` to shorten things a bit.",
        "createdAt" : "2020-06-12T18:10:46Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5f9b76f-3ed8-4f5a-8d4a-d9543d9e4515",
        "parentId" : "02dff36e-97ab-4d11-9f3a-bca6db9deee0",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ ",
        "createdAt" : "2020-06-12T18:18:23Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The Trigger Service is an early access feature that is actively being designed and is *subject to breaking changes*. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The Trigger Service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is an HTTP REST service. All requests and responses use JSON to encode data.\n+\n+Starting the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on localhost.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the Trigger Service using a number of default parameters. Most notably, the HTTP port the Trigger Service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in a later section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the Trigger Service exposes an endpoint for end-users to upload DAR files to the service it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+End-user interaction with the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``start``\n+*********\n+\n+Start a trigger. In this example, Alice starts the trigger called ``trigger`` in a module called ``TestTrigger`` of a package with ID \"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\". The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger."
  },
  {
    "id" : "b5b20b88-ec5a-4e9c-9480-ec0328c22008",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "dedb7d29-aeb7-44c6-89c6-dffad8686f93",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you use `secret` or `password` it might just be slightly more obvious what is going on without having to go into the details.",
        "createdAt" : "2020-06-12T18:12:44Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a3495fde-126b-4e2a-99eb-05ba339f6750",
        "parentId" : "dedb7d29-aeb7-44c6-89c6-dffad8686f93",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "switched to `secret`.",
        "createdAt" : "2020-06-12T18:19:12Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The Trigger Service is an early access feature that is actively being designed and is *subject to breaking changes*. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The Trigger Service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is an HTTP REST service. All requests and responses use JSON to encode data.\n+\n+Starting the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on localhost.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the Trigger Service using a number of default parameters. Most notably, the HTTP port the Trigger Service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in a later section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the Trigger Service exposes an endpoint for end-users to upload DAR files to the service it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+End-user interaction with the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``start``\n+*********\n+\n+Start a trigger. In this example, Alice starts the trigger called ``trigger`` in a module called ``TestTrigger`` of a package with ID \"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\". The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger.\n+\n+.. code-block:: bash\n+\n+   $ curl --user 'alice:&alC2l3SDS*V' \\"
  },
  {
    "id" : "7a9acc10-b1ab-422c-8981-e98d7d8ad381",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "f19c509d-ef92-480e-8ad2-21741176c4a2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n   $ curl --user 'alice:&alC2l3SDS*V' \\\r\n```",
        "createdAt" : "2020-06-12T18:13:06Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ad76ad91-8c52-4486-9197-37360699869f",
        "parentId" : "f19c509d-ef92-480e-8ad2-21741176c4a2",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "thanks",
        "createdAt" : "2020-06-12T18:19:53Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The Trigger Service is an early access feature that is actively being designed and is *subject to breaking changes*. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The Trigger Service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is an HTTP REST service. All requests and responses use JSON to encode data.\n+\n+Starting the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on localhost.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the Trigger Service using a number of default parameters. Most notably, the HTTP port the Trigger Service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in a later section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the Trigger Service exposes an endpoint for end-users to upload DAR files to the service it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+End-user interaction with the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``start``\n+*********\n+\n+Start a trigger. In this example, Alice starts the trigger called ``trigger`` in a module called ``TestTrigger`` of a package with ID \"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\". The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger.\n+\n+.. code-block:: bash\n+\n+   $ curl --user 'alice:&alC2l3SDS*V' \\\n+       -X POST localhost:8088/v1/start \\\n+       -H \"Content-type: application/json\" -H \"Accept: application/json\" \\\n+       -d '{\"triggerName\":\"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14:TestTrigger:trigger\"}'\n+   {\"result\":{\"triggerId\":\"4d539e9c-b962-4762-be71-40a5c97a47a6\"},\"status\":200}\n+\n+``stop``\n+********\n+\n+Stop a running trigger. Alice stops her running trigger like so.\n+\n+.. code-block:: bash\n+\n+   $curl --user 'alice:&alC2l3SDS*V' \\"
  },
  {
    "id" : "5786c44a-9d2e-40c5-8697-12ef7b80fd22",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "879acd92-a197-432f-b618-fbb036d74bf0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Unrelated to this PR: The fact that you send a `DELETE` to a `stop` endpoint feels wrong. I think the REST-ful thing would be to send delete to a generic endpoint for the trigger, e.g., `localhost:8088/v1/triggerid`",
        "createdAt" : "2020-06-12T18:14:08Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bb33b5a3-44c4-4e1c-a0ed-3c26dfe41244",
        "parentId" : "879acd92-a197-432f-b618-fbb036d74bf0",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "i'll get this in an issue too.",
        "createdAt" : "2020-06-12T18:20:41Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c0d17093-32a8-40a6-a4cd-a3424d669f0a",
        "parentId" : "879acd92-a197-432f-b618-fbb036d74bf0",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "https://github.com/digital-asset/daml/issues/6333",
        "createdAt" : "2020-06-12T18:22:21Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : 56,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The Trigger Service is an early access feature that is actively being designed and is *subject to breaking changes*. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The Trigger Service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is an HTTP REST service. All requests and responses use JSON to encode data.\n+\n+Starting the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on localhost.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the Trigger Service using a number of default parameters. Most notably, the HTTP port the Trigger Service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in a later section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the Trigger Service exposes an endpoint for end-users to upload DAR files to the service it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+End-user interaction with the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``start``\n+*********\n+\n+Start a trigger. In this example, Alice starts the trigger called ``trigger`` in a module called ``TestTrigger`` of a package with ID \"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\". The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger.\n+\n+.. code-block:: bash\n+\n+   $ curl --user 'alice:&alC2l3SDS*V' \\\n+       -X POST localhost:8088/v1/start \\\n+       -H \"Content-type: application/json\" -H \"Accept: application/json\" \\\n+       -d '{\"triggerName\":\"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14:TestTrigger:trigger\"}'\n+   {\"result\":{\"triggerId\":\"4d539e9c-b962-4762-be71-40a5c97a47a6\"},\"status\":200}\n+\n+``stop``\n+********\n+\n+Stop a running trigger. Alice stops her running trigger like so.\n+\n+.. code-block:: bash\n+\n+   $curl --user 'alice:&alC2l3SDS*V' \\\n+      -X DELETE localhost:8088/v1/stop/4d539e9c-b962-4762-be71-40a5c97a47a6 \\"
  },
  {
    "id" : "18dae04a-ca02-4d8c-9987-53c9600bd032",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "7588562d-0272-4962-bc58-ae6f7430693a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nUpload an automation DAR. If successful, the DAR's \"main package ID\" will be in the response (the main package ID for a DAR can also be obtained using ``daml damlc inspect-dar path/to/dar``.\r\n```",
        "createdAt" : "2020-06-12T18:14:52Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fccaf968-b9b8-4221-9617-c7621995be2d",
        "parentId" : "7588562d-0272-4962-bc58-ae6f7430693a",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ ",
        "createdAt" : "2020-06-12T18:23:02Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The Trigger Service is an early access feature that is actively being designed and is *subject to breaking changes*. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The Trigger Service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is an HTTP REST service. All requests and responses use JSON to encode data.\n+\n+Starting the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on localhost.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the Trigger Service using a number of default parameters. Most notably, the HTTP port the Trigger Service listens on which defaults to 8088. The meanining of the ``--no-secret-key`` parameter will be explained in a later section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the Trigger Service exposes an endpoint for end-users to upload DAR files to the service it is sometimes convenient to start the service preconfigured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+End-user interaction with the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``start``\n+*********\n+\n+Start a trigger. In this example, Alice starts the trigger called ``trigger`` in a module called ``TestTrigger`` of a package with ID \"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\". The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger.\n+\n+.. code-block:: bash\n+\n+   $ curl --user 'alice:&alC2l3SDS*V' \\\n+       -X POST localhost:8088/v1/start \\\n+       -H \"Content-type: application/json\" -H \"Accept: application/json\" \\\n+       -d '{\"triggerName\":\"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14:TestTrigger:trigger\"}'\n+   {\"result\":{\"triggerId\":\"4d539e9c-b962-4762-be71-40a5c97a47a6\"},\"status\":200}\n+\n+``stop``\n+********\n+\n+Stop a running trigger. Alice stops her running trigger like so.\n+\n+.. code-block:: bash\n+\n+   $curl --user 'alice:&alC2l3SDS*V' \\\n+      -X DELETE localhost:8088/v1/stop/4d539e9c-b962-4762-be71-40a5c97a47a6 \\\n+      -H \"Content-type: application/json\" -H \"Accept: application/json\"\n+   {\"result\":{\"triggerId\":\"4d539e9c-b962-4762-be71-40a5c97a47a6\"},\"status\":200}\n+\n+``upload_dar``\n+**************\n+\n+Upload an automation DAR. If successful, the DAR's \"main package ID\" will be in the response (the main package ID for a DAR can also be obtained using ``daml damlc inspect-dar DAR`` where ``DAR`` is the path to the DAR file on disk)."
  },
  {
    "id" : "a4408d13-0134-473c-bd1f-eac61760e435",
    "prId" : 6329,
    "comments" : [
      {
        "id" : "ea3e7ee3-fcba-45c3-84dc-40e5c9c65942",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n   $ curl --user 'alice:&alC2l3SDS*V' \\\r\n```",
        "createdAt" : "2020-06-12T18:16:02Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e2f2f2c-3458-43c1-89a8-96283c11730c",
        "parentId" : "ea3e7ee3-fcba-45c3-84dc-40e5c9c65942",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ ",
        "createdAt" : "2020-06-12T18:23:10Z",
        "updatedAt" : "2020-06-12T18:24:30Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f630b6113df64101c03eec90af12ce20def38463",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Trigger Service\n+###############\n+\n+**WARNING:** The Trigger Service is an early access feature that is actively being designed and is *subject to breaking changes*. The documentation here at this time is limited to basic usage. As more features become available the documentation will be updated to include them. We welcome feedback about the Trigger Service on our `our issue tracker <https://github.com/digital-asset/daml/issues/new>`_ or `on our forum <https://discuss.daml.com>`_, or on `on Slack <https://slack.daml.com>`_.\n+\n+The `DAML triggers <../triggers/index.html#running-a-daml-trigger>`_ documentation shows a simple method using the ``daml trigger`` command to arrange for the execution of a single trigger. Using this method, a dedicated process is launched to host the trigger.\n+\n+Complex workflows can require running many triggers for many parties and at a certain point, use of ``daml trigger`` with its process per trigger model becomes unwieldy. The Trigger Service provides the means to host multiple triggers for multiple parties running against a common ledger in a single process and provides a convenient interface for starting, stopping and monitoring them.\n+\n+The trigger-service is a ledger client that acts as an end-user agent. The trigger service intermediates between the ledger and end-users by running triggers on their behalf. The trigger-service is an HTTP REST service. All requests and responses use JSON to encode data.\n+\n+Starting the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+In this example, it is assumed there is a sandbox ledger running on port 6865 on localhost.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key\n+\n+The above starts the Trigger Service using a number of default parameters. Most notably, the HTTP port the Trigger Service listens on which defaults to 8088. The meaning of the ``--no-secret-key`` parameter will be explained in a later section. To see all of the available parameters, their defaults and descriptions, one can execute the command ``daml trigger-service --help``.\n+\n+Although as we'll see, the Trigger Service exposes an endpoint for end-users to upload DAR files to the service it is sometimes convenient to start the service pre-configured with a specific DAR. To do this, the ``--dar`` option is provided.\n+\n+.. code-block:: bash\n+\n+   daml trigger-service --ledger-host localhost --ledger-port 6865 --wall-clock-time --no-secret-key --dar <DAR>\n+\n+End-user interaction with the Trigger Service\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+``start``\n+*********\n+\n+Start a trigger. In this example, Alice starts the trigger called ``trigger`` in a module called ``TestTrigger`` of a package with ID \"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\". The response contains an identifier for the running trigger that Alice can use in subsequent commands involving the trigger.\n+\n+.. code-block:: bash\n+\n+   $ curl --user 'alice:&alC2l3SDS*V' \\\n+       -X POST localhost:8088/v1/start \\\n+       -H \"Content-type: application/json\" -H \"Accept: application/json\" \\\n+       -d '{\"triggerName\":\"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14:TestTrigger:trigger\"}'\n+   {\"result\":{\"triggerId\":\"4d539e9c-b962-4762-be71-40a5c97a47a6\"},\"status\":200}\n+\n+``stop``\n+********\n+\n+Stop a running trigger. Alice stops her running trigger like so.\n+\n+.. code-block:: bash\n+\n+   $curl --user 'alice:&alC2l3SDS*V' \\\n+      -X DELETE localhost:8088/v1/stop/4d539e9c-b962-4762-be71-40a5c97a47a6 \\\n+      -H \"Content-type: application/json\" -H \"Accept: application/json\"\n+   {\"result\":{\"triggerId\":\"4d539e9c-b962-4762-be71-40a5c97a47a6\"},\"status\":200}\n+\n+``upload_dar``\n+**************\n+\n+Upload an automation DAR. If successful, the DAR's \"main package ID\" will be in the response (the main package ID for a DAR can also be obtained using ``daml damlc inspect-dar DAR`` where ``DAR`` is the path to the DAR file on disk).\n+\n+.. code-block:: bash\n+\n+   $ curl -F 'dar=@/home/alice/test-model.dar' localhost:8088/v1/upload_dar\n+   {\"result\":{\"mainPackageId\":\"312094804c1468e2166bae3c9ba8b5cc0d285e31356304a2e9b0ac549df59d14\"},\"status\":200}\n+\n+``list``\n+********\n+\n+List the DARS running on behalf of a given party. Alice can check on her running triggers as follows.\n+\n+.. code-block:: bash\n+\n+   $curl --user 'alice:&alC2l3SDS*V' \\"
  }
]