[
  {
    "id" : "56a3f2ef-11a6-4bba-9db3-792b429a9197",
    "prId" : 7576,
    "comments" : [
      {
        "id" : "64cbaa87-196c-4151-bb98-0a543124e364",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Do we also need to document these as part of the DAML on SQL documentation?\r\n\r\n(We really need to put metrics documentation into the docs.)",
        "createdAt" : "2020-10-06T08:05:41Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1b294b48-487b-482d-a133-7e6f919e94da",
        "parentId" : "64cbaa87-196c-4151-bb98-0a543124e364",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Added.",
        "createdAt" : "2020-10-06T15:51:11Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "76f067753b482633f0992ac86992896c2f75fcda",
    "line" : null,
    "diffHunk" : "@@ -377,6 +377,30 @@ further sent to deduplication and interpretation.\n A timer. Time to validate submitted commands before they are\n fed to the DAML interpreter.\n \n+``daml.commands.<party_name>.input_buffer_size``"
  },
  {
    "id" : "1e114441-f489-467b-8928-60d2381b9914",
    "prId" : 6662,
    "comments" : [
      {
        "id" : "63cf7422-36b7-4123-9b1c-71bb4d02d5f6",
        "parentId" : null,
        "author" : {
          "login" : "pgarmaz-da",
          "name" : "Peter Garmaz",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40190826?u=fd2dbac2c7e7150eacdfdfdf4fa25e0345cce6e5&v=4"
        },
        "body" : "```suggestion\r\n  - ``graphite:<server_host>:<server_port>``: sends captured metrics to a Graphite server. If the port\r\n```\r\nMight make more sense to have the server and port separate since the port is optional and has a default value of `2003`.",
        "createdAt" : "2020-07-14T22:42:54Z",
        "updatedAt" : "2020-07-16T08:46:56Z",
        "lastEditedBy" : {
          "login" : "pgarmaz-da",
          "name" : "Peter Garmaz",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40190826?u=fd2dbac2c7e7150eacdfdfdf4fa25e0345cce6e5&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e99df896b75fe5cc63c2fece7e017af7828bae61",
    "line" : null,
    "diffHunk" : "@@ -226,3 +226,391 @@ Command-line reference\n To start Sandbox, run: ``sandbox [options] <archive>...``.\n \n To see all the available options, run ``daml sandbox --help``.\n+\n+Metrics\n+*******\n+\n+Enable and configure reporting\n+==============================\n+\n+To enable metrics and configure reporting, you can use the two following CLI options:\n+\n+- ``--metrics-reporter``: passing a legal value will enable reporting; the accepted values\n+  are ``console``, ``csv:</path/to/metrics.csv>`` and ``graphite:<local_server_port>``.\n+\n+  - ``console``: prints captured metrics on the standard output\n+\n+  - ``csv:</path/to/metrics.csv>``: saves the captured metrics in CSV format at the specified location\n+\n+  - ``graphite:<local_server_port>``: sends captured metrics to a local Graphite server. If the port"
  },
  {
    "id" : "e568a810-3c4a-411a-9209-849e50fd12b0",
    "prId" : 6662,
    "comments" : [
      {
        "id" : "a650ceee-da76-4481-9f02-4924d37cb4f8",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nA timer records all metrics registered by a meter and by a histogram, where\r\n```",
        "createdAt" : "2020-07-15T16:02:04Z",
        "updatedAt" : "2020-07-16T08:46:56Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "351c0d15-e045-470f-86df-19a43c227b12",
        "parentId" : "a650ceee-da76-4481-9f02-4924d37cb4f8",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : ":it: ",
        "createdAt" : "2020-07-15T16:09:59Z",
        "updatedAt" : "2020-07-16T08:46:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e99df896b75fe5cc63c2fece7e017af7828bae61",
    "line" : 91,
    "diffHunk" : "@@ -226,3 +226,391 @@ Command-line reference\n To start Sandbox, run: ``sandbox [options] <archive>...``.\n \n To see all the available options, run ``daml sandbox --help``.\n+\n+Metrics\n+*******\n+\n+Enable and configure reporting\n+==============================\n+\n+To enable metrics and configure reporting, you can use the two following CLI options:\n+\n+- ``--metrics-reporter``: passing a legal value will enable reporting; the accepted values\n+  are ``console``, ``csv:</path/to/metrics.csv>`` and ``graphite:<local_server_port>``.\n+\n+  - ``console``: prints captured metrics on the standard output\n+\n+  - ``csv://</path/to/metrics.csv>``: saves the captured metrics in CSV format at the specified location\n+\n+  - ``graphite://<server_host>[:<server_port>]``: sends captured metrics to a Graphite server. If the port\n+    is omitted, the default value ``2003`` will be used.\n+\n+- ``--metrics-reporting-interval``: metrics are pre-aggregated on the sandbox and sent to\n+  the reporter, this option allows the user to set the interval. The formats accepted are based\n+  on the ISO-8601 duration format ``PnDTnHnMn.nS`` with days considered to be exactly 24 hours.\n+  The default interval is 10 seconds.\n+\n+Types of metrics\n+================\n+\n+This is a list of type of metrics with all data points recorded for each.\n+Use this as a reference when reading the list of metrics.\n+\n+Gauge\n+-----\n+\n+An individual instantaneous measurement.\n+\n+Counter\n+-------\n+\n+Number of occurrences of some event.\n+\n+Meter\n+-----\n+\n+A meter tracks the number of times a given event occurred. The following data\n+points are kept and reported by any meter.\n+\n+- ``<metric.qualified.name>.count``: number of registered data points overall\n+- ``<metric.qualified.name>.m1_rate``: number of registered data points per minute\n+- ``<metric.qualified.name>.m5_rate``: number of registered data points every 5 minutes\n+- ``<metric.qualified.name>.m15_rate``: number of registered data points every 15 minutes\n+- ``<metric.qualified.name>.mean_rate``: mean number of registered data points\n+\n+Histogram\n+---------\n+\n+An histogram records aggregated statistics about collections of events.\n+The exact meaning of the number depends on the metric (e.g. timers\n+are histograms about the time necessary to complete an operation).\n+\n+- ``<metric.qualified.name>.mean``: arithmetic mean\n+- ``<metric.qualified.name>.stddev``: standard deviation\n+- ``<metric.qualified.name>.p50``: median\n+- ``<metric.qualified.name>.p75``: 75th percentile\n+- ``<metric.qualified.name>.p95``: 95th percentile\n+- ``<metric.qualified.name>.p98``: 98th percentile\n+- ``<metric.qualified.name>.p99``: 99th percentile\n+- ``<metric.qualified.name>.p999``: 99.9th percentile\n+- ``<metric.qualified.name>.min``: lowest registered value overall\n+- ``<metric.qualified.name>.max``: highest registered value overall\n+\n+Histograms only keep a small *reservoir* of statistically relevant data points\n+to ensure that metrics collection can be reasonably accurate without being\n+too taxing resource-wise.\n+\n+Unless mentioned otherwise all histograms (including timers, mentioned below)\n+use exponentially decaying reservoirs (i.e. the data is roughly relevant for\n+the last five minutes of recording) to ensure that recent and possibly\n+operationally relevant changes are visible through the metrics reporter.\n+\n+Note that ``min`` and ``max`` values are not affected by the reservoir sampling policy.\n+\n+You can read more about reservoir sampling and possible associated policies\n+in the `Dropwizard Metrics library documentation <https://metrics.dropwizard.io/4.1.2/manual/core.html#man-core-histograms/>`__.\n+\n+Timers\n+------\n+\n+A timer records all metrics registered by a meter and by an histogram, where"
  },
  {
    "id" : "bf935d55-15ce-4078-984f-459bc8b92032",
    "prId" : 6662,
    "comments" : [
      {
        "id" : "e408622c-3cb2-4f09-abd3-90588aed9f96",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The measurement itself is taken in nanoseconds, but the graphite reporter reports durations in milliseconds. This could be changed in `MetricsReporter.scala` by using `GraphiteReporter.Builder#convertDurationsTo()`.",
        "createdAt" : "2020-07-15T16:04:29Z",
        "updatedAt" : "2020-07-16T08:46:56Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e60e87db-2650-45fc-b960-485b6da755f2",
        "parentId" : "e408622c-3cb2-4f09-abd3-90588aed9f96",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I was referring to the unit, not the precision. How could I phrase it better?",
        "createdAt" : "2020-07-15T16:10:35Z",
        "updatedAt" : "2020-07-16T08:46:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f3d8f497-d184-4a61-818b-0cf52dfedaee",
        "parentId" : "e408622c-3cb2-4f09-abd3-90588aed9f96",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6662/commits/995f5b536bfc6336a5e05d08c10ebb8ee0ea88e0",
        "createdAt" : "2020-07-16T08:36:36Z",
        "updatedAt" : "2020-07-16T08:46:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e99df896b75fe5cc63c2fece7e017af7828bae61",
    "line" : null,
    "diffHunk" : "@@ -226,3 +226,391 @@ Command-line reference\n To start Sandbox, run: ``sandbox [options] <archive>...``.\n \n To see all the available options, run ``daml sandbox --help``.\n+\n+Metrics\n+*******\n+\n+Enable and configure reporting\n+==============================\n+\n+To enable metrics and configure reporting, you can use the two following CLI options:\n+\n+- ``--metrics-reporter``: passing a legal value will enable reporting; the accepted values\n+  are ``console``, ``csv:</path/to/metrics.csv>`` and ``graphite:<local_server_port>``.\n+\n+  - ``console``: prints captured metrics on the standard output\n+\n+  - ``csv://</path/to/metrics.csv>``: saves the captured metrics in CSV format at the specified location\n+\n+  - ``graphite://<server_host>[:<server_port>]``: sends captured metrics to a Graphite server. If the port\n+    is omitted, the default value ``2003`` will be used.\n+\n+- ``--metrics-reporting-interval``: metrics are pre-aggregated on the sandbox and sent to\n+  the reporter, this option allows the user to set the interval. The formats accepted are based\n+  on the ISO-8601 duration format ``PnDTnHnMn.nS`` with days considered to be exactly 24 hours.\n+  The default interval is 10 seconds.\n+\n+Types of metrics\n+================\n+\n+This is a list of type of metrics with all data points recorded for each.\n+Use this as a reference when reading the list of metrics.\n+\n+Gauge\n+-----\n+\n+An individual instantaneous measurement.\n+\n+Counter\n+-------\n+\n+Number of occurrences of some event.\n+\n+Meter\n+-----\n+\n+A meter tracks the number of times a given event occurred. The following data\n+points are kept and reported by any meter.\n+\n+- ``<metric.qualified.name>.count``: number of registered data points overall\n+- ``<metric.qualified.name>.m1_rate``: number of registered data points per minute\n+- ``<metric.qualified.name>.m5_rate``: number of registered data points every 5 minutes\n+- ``<metric.qualified.name>.m15_rate``: number of registered data points every 15 minutes\n+- ``<metric.qualified.name>.mean_rate``: mean number of registered data points\n+\n+Histogram\n+---------\n+\n+An histogram records aggregated statistics about collections of events.\n+The exact meaning of the number depends on the metric (e.g. timers\n+are histograms about the time necessary to complete an operation).\n+\n+- ``<metric.qualified.name>.mean``: arithmetic mean\n+- ``<metric.qualified.name>.stddev``: standard deviation\n+- ``<metric.qualified.name>.p50``: median\n+- ``<metric.qualified.name>.p75``: 75th percentile\n+- ``<metric.qualified.name>.p95``: 95th percentile\n+- ``<metric.qualified.name>.p98``: 98th percentile\n+- ``<metric.qualified.name>.p99``: 99th percentile\n+- ``<metric.qualified.name>.p999``: 99.9th percentile\n+- ``<metric.qualified.name>.min``: lowest registered value overall\n+- ``<metric.qualified.name>.max``: highest registered value overall\n+\n+Histograms only keep a small *reservoir* of statistically relevant data points\n+to ensure that metrics collection can be reasonably accurate without being\n+too taxing resource-wise.\n+\n+Unless mentioned otherwise all histograms (including timers, mentioned below)\n+use exponentially decaying reservoirs (i.e. the data is roughly relevant for\n+the last five minutes of recording) to ensure that recent and possibly\n+operationally relevant changes are visible through the metrics reporter.\n+\n+Note that ``min`` and ``max`` values are not affected by the reservoir sampling policy.\n+\n+You can read more about reservoir sampling and possible associated policies\n+in the `Dropwizard Metrics library documentation <https://metrics.dropwizard.io/4.1.2/manual/core.html#man-core-histograms/>`__.\n+\n+Timers\n+------\n+\n+A timer records all metrics registered by a meter and by an histogram, where\n+the histogram records the time necessary to execute a given operation (measured\n+in milliseconds, unless otherwise specified)."
  },
  {
    "id" : "55ebdc3d-152a-41bd-884d-e03524e7aabe",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "583ff55b-50e9-4cb0-bc5f-c9dd7e3e5a4f",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\nSandbox supports two contract identifier generator schemes:\r\n```",
        "createdAt" : "2020-03-24T10:01:24Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes."
  },
  {
    "id" : "5fa4c543-f709-4273-84d4-3fe5e0a0721e",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "0e876d9e-6166-48f8-89c4-608d569d8b4e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n* The *deterministic* scheme that deterministically produces\r\n```",
        "createdAt" : "2020-03-24T10:02:08Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces"
  },
  {
    "id" : "94535ba4-0d7e-4d74-9079-1058ecfeee9e",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "c065eb2e-a8b5-47df-b177-6fa89bfea7e9",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n* The *random* scheme that produces contract identifiers\r\n```",
        "createdAt" : "2020-03-24T10:02:25Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers"
  },
  {
    "id" : "c57399bf-ae5d-4a2e-af28-706f9159feb9",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "5869c0c6-0de9-496c-af19-3ab1fb2cefab",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n- ``--contract-id-seeding=<seeding-mode>``. The Sandbox will use the\r\n  sending mode `<sending-mode>` to seed the generation of random\r\n  contract IDs. Possible seeding modes are:\r\n```",
        "createdAt" : "2020-03-24T10:02:54Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :"
  },
  {
    "id" : "590e55ea-8049-41d9-a200-d34abfc6af1a",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "29c812ad-ee31-41e0-8d11-127554e08587",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  seeding mode `<seeding-mode>` to seed the generation of random\r\n```",
        "createdAt" : "2020-03-24T10:03:01Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random"
  },
  {
    "id" : "9612445b-a206-47fc-a934-e5e04f27ca7d",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "8a71f66f-bcfc-460d-a4b2-b9e4f44efcd2",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  contract ids. Possible seeding modes are:\r\n```",
        "createdAt" : "2020-03-24T10:03:15Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :"
  },
  {
    "id" : "2d5a8636-866b-4895-8f14-bd3a93b71c46",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "04248269-b9f1-4aab-ad12-8c4c565f08f7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n  * ``no``: The Sandbox uses the ``deterministic`` scheme.\r\n```",
        "createdAt" : "2020-03-24T10:03:31Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :\n+  * ``no``. The sandbox uses ``deterministic`` scheme"
  },
  {
    "id" : "66963c8d-812d-4319-8769-50995b89077a",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "8c3f017b-03e4-4e93-a1fd-0c1696175307",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n  * ``strong``: The Sandbox uses the ``random`` scheme initialized\r\n    with a high-entropy seed. Depending on the underlying operating\r\n    system, the startup of the Sandbox may block as entropy is being\r\n    gathered to generate the seed.\r\n```",
        "createdAt" : "2020-03-24T10:03:48Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :\n+  * ``no``. The sandbox uses ``deterministic`` scheme\n+  * ``strong``. The sandbox uses the ``random`` scheme initialized\n+    with a high entropy seed. Depending on the underlying operating\n+    system, the startup of the sandbox may block as entropy is being\n+    gathered to generate the seed."
  },
  {
    "id" : "d9badcd2-bb08-42ee-ac63-6ab6a0d2e9b2",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "65c9aa1b-5d5a-4f88-915e-9b30b86e2aee",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n    used in testing environments to avoid exhausting the system entropy\r\n```",
        "createdAt" : "2020-03-24T10:03:50Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :\n+  * ``no``. The sandbox uses ``deterministic`` scheme\n+  * ``strong``. The sandbox uses the ``random`` scheme initialized\n+    with a high entropy seed. Depending on the underlying operating\n+    system, the startup of the sandbox may block as entropy is being\n+    gathered to generate the seed.\n+  * ``weak``. (**For testing purpose only**) The sandbox uses the\n+    ``random`` scheme initialized with a low entropy seed. This may be\n+    used in testing environment to avoid exhausting the system entropy"
  },
  {
    "id" : "d8bf35d8-30e6-48c6-be83-b770ae773bcd",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "564b22d6-7c32-4af0-b216-49d44cbf08dd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What is the difference between `static` and `deterministic`? A PRNG initialized with a fixed seed sounds like it is deterministic as well. ",
        "createdAt" : "2020-03-24T10:04:24Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "df88cdaf-9346-4ccb-93fb-65f9aee6001d",
        "parentId" : "564b22d6-7c32-4af0-b216-49d44cbf08dd",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Here it is the seeding which is static.\r\nOf course you obtain a deterministic contract-id, but your are still using the (pseudo)-random scheme with static seed. \r\nIn my point of view, the deterministic/random scheme, refer to the produce usage.\r\nWe plane anyway to hide completely this mode for next week release. ",
        "createdAt" : "2020-03-24T10:58:54Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :\n+  * ``no``. The sandbox uses ``deterministic`` scheme\n+  * ``strong``. The sandbox uses the ``random`` scheme initialized\n+    with a high entropy seed. Depending on the underlying operating\n+    system, the startup of the sandbox may block as entropy is being\n+    gathered to generate the seed.\n+  * ``weak``. (**For testing purpose only**) The sandbox uses the\n+    ``random`` scheme initialized with a low entropy seed. This may be\n+    used in testing environment to avoid exhausting the system entropy\n+    pool when a large number of sandboxed are started in a short time\n+    interval.\n+  * ``static``. (**For testing purpose only**) The sandbox uses the"
  },
  {
    "id" : "34ecf8e4-a9a9-4cff-a2ee-fe4d5dd955e5",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "1a54fbb9-6e21-4487-9736-41192a6e49d4",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n  * ``weak``: (**For testing purposes only**) The Sandbox uses the\r\n    ``random`` scheme initialized with a low entropy seed. This may be\r\n    used in a testing environment to avoid exhausting the system\r\n    entropy pool when a large number of Sandboxes are started in a\r\n    short time interval.\r\n```",
        "createdAt" : "2020-03-24T10:05:06Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :\n+  * ``no``. The sandbox uses ``deterministic`` scheme\n+  * ``strong``. The sandbox uses the ``random`` scheme initialized\n+    with a high entropy seed. Depending on the underlying operating\n+    system, the startup of the sandbox may block as entropy is being\n+    gathered to generate the seed.\n+  * ``weak``. (**For testing purpose only**) The sandbox uses the\n+    ``random`` scheme initialized with a low entropy seed. This may be\n+    used in testing environment to avoid exhausting the system entropy\n+    pool when a large number of sandboxed are started in a short time\n+    interval."
  },
  {
    "id" : "0a355582-fd1a-48fb-b330-c32166b131cc",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "d96ce197-9f63-4552-b619-cd75a688245c",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n  * ``static``: (**For testing purposes only**) The sandbox uses the\r\n    ``random`` scheme with a fixed seed. This may be used in testing\r\n    for reproducible runs.\r\n```",
        "createdAt" : "2020-03-24T10:05:41Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,42 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifiers generator schemes.\n+\n+* The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+* The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``.  The sandbox will use the\n+  sending mode `<sending-mode>` to seed the generation of random\n+  contract id.  Possible seeding mode are :\n+  * ``no``. The sandbox uses ``deterministic`` scheme\n+  * ``strong``. The sandbox uses the ``random`` scheme initialized\n+    with a high entropy seed. Depending on the underlying operating\n+    system, the startup of the sandbox may block as entropy is being\n+    gathered to generate the seed.\n+  * ``weak``. (**For testing purpose only**) The sandbox uses the\n+    ``random`` scheme initialized with a low entropy seed. This may be\n+    used in testing environment to avoid exhausting the system entropy\n+    pool when a large number of sandboxed are started in a short time\n+    interval.\n+  * ``static``. (**For testing purpose only**) The sandbox uses the\n+    ``random`` scheme with a fixed seed. This may be used in a testing\n+    to have reproducible run."
  },
  {
    "id" : "c066eb61-2d25-4423-b2e7-fe87854f2790",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "f9503cb7-2d17-4347-b51d-11d957647bdf",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  - ``testing-weak``: (**For testing purposes only**) The Sandbox uses the\r\n```",
        "createdAt" : "2020-03-24T13:33:38Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,46 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifier generator schemes:\n+\n+- The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+- The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``. The Sandbox will use the\n+  seeding mode `<seeding-mode>` to seed the generation of random\n+  contract identifiers. Possible seeding modes are:\n+\n+  - ``no``: The Sandbox uses the ``deterministic`` scheme.\n+\n+  - ``strong``: The Sandbox uses the ``random`` scheme initialized\n+    with a high-entropy seed. Depending on the underlying operating\n+    system, the startup of the Sandbox may block as entropy is being\n+    gathered to generate the seed.\n+\n+  - ``weak``: (**For testing purposes only**) The Sandbox uses the"
  },
  {
    "id" : "6164adc1-6aa9-4720-ae84-2f8e84e02f66",
    "prId" : 5153,
    "comments" : [
      {
        "id" : "b20b466d-8e45-4811-a652-389c2ecf5218",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  - ``testing-static``: (**For testing purposes only**) The sandbox uses the\r\n```",
        "createdAt" : "2020-03-24T13:33:51Z",
        "updatedAt" : "2020-03-24T13:37:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a51e130bda0a95624613ca4993b2ac098cd80ff6",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,46 @@ Here, ``daml sandbox`` tells the SDK Assistant to run ``sandbox`` from the activ\n \n   ``submitMustFail`` is only supported by the test-ledger used by ``daml test`` and the IDE, not by the Sandbox.\n \n+Contract Identifier Generation\n+******************************\n+\n+Sandbox supports two contract identifier generator schemes:\n+\n+- The so-called *deterministic* scheme that deterministically produces\n+  contract identifiers from the state of the underlying ledger.  Those\n+  identifiers are strings starting with ``#``. \n+\n+- The so-called *random* scheme that produces contract identifiers\n+  indistinguishable from random. In practice, the schemes use a\n+  cryptographically secure pseudorandom number generator initialized\n+  with a truly random seed. Those identifiers are hexadecimal strings\n+  prefixed by ``00``.\n+\n+The sandbox can be configured to use one or the other scheme with one\n+of the following command line options:\n+\n+- ``--contract-id-seeding=<seeding-mode>``. The Sandbox will use the\n+  seeding mode `<seeding-mode>` to seed the generation of random\n+  contract identifiers. Possible seeding modes are:\n+\n+  - ``no``: The Sandbox uses the ``deterministic`` scheme.\n+\n+  - ``strong``: The Sandbox uses the ``random`` scheme initialized\n+    with a high-entropy seed. Depending on the underlying operating\n+    system, the startup of the Sandbox may block as entropy is being\n+    gathered to generate the seed.\n+\n+  - ``weak``: (**For testing purposes only**) The Sandbox uses the\n+    ``random`` scheme initialized with a low entropy seed. This may be\n+    used in a testing environment to avoid exhausting the system\n+    entropy pool when a large number of Sandboxes are started in a\n+    short time interval.\n+\n+  - ``static``: (**For testing purposes only**) The sandbox uses the"
  },
  {
    "id" : "8e17ac1c-14cc-4952-947c-870c93eccdb4",
    "prId" : 5033,
    "comments" : [
      {
        "id" : "a9176252-d073-48b0-b23f-9a4b7bb1a81c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Any reason why we want static time here?",
        "createdAt" : "2020-03-17T14:08:37Z",
        "updatedAt" : "2020-03-17T17:55:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "10a47319-fc9f-4142-aca5-72f1eb928851",
        "parentId" : "a9176252-d073-48b0-b23f-9a4b7bb1a81c",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Scenarios can't be run under wall clock time. (TBH we should probably just remove this section and tell people to use DAML Script.) It's explained on line 30.",
        "createdAt" : "2020-03-17T14:20:45Z",
        "updatedAt" : "2020-03-17T17:55:06Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b3f4f50f-a1e4-4231-b4e0-951d5d27e541",
        "parentId" : "a9176252-d073-48b0-b23f-9a4b7bb1a81c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh of course, I completely missed the fact that this uses a scenario.",
        "createdAt" : "2020-03-17T14:27:48Z",
        "updatedAt" : "2020-03-17T17:55:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "78139a92-50fd-4d65-90b7-a03f281e19ba",
        "parentId" : "a9176252-d073-48b0-b23f-9a4b7bb1a81c",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I'd say let's remove everything about scenarios and add a link to DAML Triggers for initializing the ledger. Sorry to have missed this bit of text when deprecating scenarios the last time around.",
        "createdAt" : "2020-03-17T19:49:32Z",
        "updatedAt" : "2020-03-17T19:51:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cf7a6133b71d3bcd920d7c4fc7aba174420a05b9",
    "line" : 14,
    "diffHunk" : "@@ -10,13 +10,15 @@ The DAML Sandbox, or Sandbox for short, is a simple ledger implementation that e\n \n You can start Sandbox together with :doc:`Navigator </tools/navigator/index>` using the ``daml start`` command in a DAML SDK project. This command will compile the DAML file and its dependencies as specified in the ``daml.yaml``. It will then launch Sandbox passing the just obtained DAR packages. Sandbox will also be given the name of the startup scenario specified in the project's ``daml.yaml``. Finally, it launches the navigator connecting it to the running Sandbox.\n \n-It is possible to execute the Sandbox launching step in isolation by typing ``daml sandbox``.\n+It is possible to execute the Sandbox launching step in isolation by typing ``daml sandbox --wall-clock-time``.\n+\n+Note: Sandbox is currently in the process of moving from Static Time mode to Wall Clock Time mode as the default. For this version only, you need to specify the time mode explicitly when launching Sandbox outside ``daml start``. (When you use ``daml start``, it provides this flag and any other flags in the ``sandbox-options:`` section of ``daml.yaml``.) From the next release, you can omit this flag.\n \n Sandbox can also be run manually as in this example:\n \n .. code-block:: none\n \n-  $ daml sandbox Main.dar --scenario Main:example\n+  $ daml sandbox Main.dar --static-time --scenario Main:example"
  },
  {
    "id" : "24c8c70c-7be4-4533-9ae6-dc6deacef76c",
    "prId" : 4930,
    "comments" : [
      {
        "id" : "48ad64da-763e-4fa5-a956-772cdfbf31c3",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'm sure you meant \"DSA\" to mean \"digital signature algorithm\", but it turns out it means [\"Digital Signature Algorithm\"](https://en.wikipedia.org/wiki/Digital_Signature_Algorithm), which is another signing algorithm unrelated to RSA.\r\n\r\n[Auth0 refers to it as \"RSA Signature with SHA-256\".](https://auth0.com/docs/tokens/concepts/signing-algorithms) Perhaps we can just use their terminology.\r\n\r\n```suggestion\r\n  The sandbox will expect all tokens to be signed with RS256 (RSA signature with SHA-256) with the public key loaded from the given X.509 certificate file.\r\n```",
        "createdAt" : "2020-03-11T11:08:43Z",
        "updatedAt" : "2020-03-11T12:32:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b11efa7bbae73685e0ab13521cd59b4d6f96b5db",
    "line" : null,
    "diffHunk" : "@@ -70,17 +70,22 @@ To start Sandbox with authentication based on `JWT <https://jwt.io/>`__ tokens,\n use one of the following command line options:\n \n - ``--auth-jwt-rs256-crt=<filename>``.\n-  The sandbox will expect all tokens to be signed with RSA256 with the public key loaded from the given X.509 certificate file.\n+  The sandbox will expect all tokens to be signed with RS256 (RSA DSA with SHA-256) with the public key loaded from the given X.509 certificate file."
  },
  {
    "id" : "c22ca6d7-1405-438b-aaf1-8261e2d3b13c",
    "prId" : 4930,
    "comments" : [
      {
        "id" : "0e3cb3c1-cda7-43dc-a7e1-49f384a8bac9",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Same here.\r\n\r\n```suggestion\r\n  The sandbox will expect all tokens to be signed with RS256 (RSA signature with SHA-256) with the public key loaded from the given `JWKS <https://tools.ietf.org/html/rfc7517>`__ URL.\r\n```",
        "createdAt" : "2020-03-11T11:09:12Z",
        "updatedAt" : "2020-03-11T12:32:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b11efa7bbae73685e0ab13521cd59b4d6f96b5db",
    "line" : null,
    "diffHunk" : "@@ -70,17 +70,22 @@ To start Sandbox with authentication based on `JWT <https://jwt.io/>`__ tokens,\n use one of the following command line options:\n \n - ``--auth-jwt-rs256-crt=<filename>``.\n-  The sandbox will expect all tokens to be signed with RSA256 with the public key loaded from the given X.509 certificate file.\n+  The sandbox will expect all tokens to be signed with RS256 (RSA DSA with SHA-256) with the public key loaded from the given X.509 certificate file.\n   Both PEM-encoded certificates (text files starting with ``-----BEGIN CERTIFICATE-----``)\n-  and DER-encoded certicates (binary files) are supported.\n+  and DER-encoded certificates (binary files) are supported.\n \n-- ``--auth-jwt-ec-crt=<filename>``.\n-  The sandbox will expect all tokens to be signed with ECDSA512 with the public key loaded from the given X.509 certificate file.\n+- ``--auth-jwt-es256-crt=<filename>``.\n+  The sandbox will expect all tokens to be signed with ES256 (ECDSA using P-256 and SHA-256) with the public key loaded from the given X.509 certificate file.\n   Both PEM-encoded certificates (text files starting with ``-----BEGIN CERTIFICATE-----``)\n   and DER-encoded certicates (binary files) are supported.\n \n+- ``--auth-jwt-es512-crt=<filename>``.\n+  The sandbox will expect all tokens to be signed with ES512 (ECDSA using P-521 and SHA-512)     with the public key loaded from the given X.509 certificate file.\n+  Both PEM-encoded certificates (text files starting with ``-----BEGIN CERTIFICATE-----``)\n+  and DER-encoded certificates (binary files) are supported.\n+\n - ``--auth-jwt-rs256-jwks=<url>``.\n-  The sandbox will expect all tokens to be signed with RSA256 with the public key loaded from the given `JWKS <https://tools.ietf.org/html/rfc7517>`__ URL.\n+  The sandbox will expect all tokens to be signed with RS256 (RSA DSA with SHA-256) with the public key loaded from the given `JWKS <https://tools.ietf.org/html/rfc7517>`__ URL."
  },
  {
    "id" : "ad6a108f-9be2-48e0-8061-07e100c67fbe",
    "prId" : 3953,
    "comments" : [
      {
        "id" : "a987d948-c0e8-443e-88d3-28158346554a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Please choose between either JWT or tokens. The _T_ in _JWT_ stands for token. :wink: ",
        "createdAt" : "2020-01-07T09:50:57Z",
        "updatedAt" : "2020-01-08T17:32:49Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "21bcf7bd-3ff1-4b83-a60a-d00cb34fdeb8",
        "parentId" : "a987d948-c0e8-443e-88d3-28158346554a",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "```suggestion\r\nGenerating JSON Web Tokens (JWT)\r\n```\r\n\r\nThis would also be an alternative (inspired by the intro text on https://jwt.io/)",
        "createdAt" : "2020-01-07T11:11:37Z",
        "updatedAt" : "2020-01-08T17:32:49Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "99755b60-9dbc-4e83-83c8-513fc8aa5a90",
        "parentId" : "a987d948-c0e8-443e-88d3-28158346554a",
        "author" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "body" : "updated based on @rautenrieth-da suggestion",
        "createdAt" : "2020-01-08T02:34:41Z",
        "updatedAt" : "2020-01-08T17:32:49Z",
        "lastEditedBy" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "92dae860832d93cc5bd64273b897a7c169a46095",
    "line" : null,
    "diffHunk" : "@@ -112,11 +117,15 @@ where\n \n The ``public`` claim is implicitly held by anyone bearing a valid JWT (even without being an admin or being able to act or read on behalf of any party).\n \n-Generating tokens\n-=================\n+Generating JWT tokens"
  },
  {
    "id" : "5fc72a1a-ba42-42de-96bc-aa594217fce3",
    "prId" : 3283,
    "comments" : [
      {
        "id" : "a2df7aa7-fcde-4569-991c-1be2d2a28178",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "`doesn't`?",
        "createdAt" : "2019-11-06T18:29:32Z",
        "updatedAt" : "2019-11-07T21:24:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5745bee4e7b5679372438fb65bfc553a184a767b",
    "line" : null,
    "diffHunk" : "@@ -59,6 +59,35 @@ Due to possible conflicts between the ``&`` character and various terminal shell\n \n If you're not familiar with JDBC URLs, see the JDBC docs for more information: https://jdbc.postgresql.org/documentation/head/connect.html\n \n+Running with authentication\n+***************************\n+\n+By default, Sandbox does use any authentication and accepts all valid ledger API requests."
  },
  {
    "id" : "514c1c48-dc61-481f-8f83-83604c32f932",
    "prId" : 3016,
    "comments" : [
      {
        "id" : "00fde801-05ca-42f3-8920-658db8d61697",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nDue to possible conflicts between the ``&`` character and various terminal shells, we recommend quoting the jdbc url like so:\r\n```",
        "createdAt" : "2019-09-25T08:02:08Z",
        "updatedAt" : "2019-09-25T16:04:50Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9cdc6e4fe00e3b0294349a2750c4eb52f108f854",
    "line" : null,
    "diffHunk" : "@@ -48,6 +48,10 @@ To start Sandbox using persistence, pass an ``--sql-backend-jdbcurl <value>`` op\n \n Here is an example for such a url: ``jdbc:postgresql://localhost/test?user=fred&password=secret``\n \n+Due to possible conflicts between the ``&`` and various terminal shells, we recommend quoting the jdbc url like so:"
  },
  {
    "id" : "96506e3d-e1f4-4a79-b302-9e623a338691",
    "prId" : 3016,
    "comments" : [
      {
        "id" : "c4f7f7ed-b13c-4336-9f81-31df67f95e3a",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Having already approved, I'd strongly recommend using the `code-block` directive over the colon + indentation syntax, as Sphinx tends to use default (Python) highlighting for the latter.",
        "createdAt" : "2019-09-25T13:42:32Z",
        "updatedAt" : "2019-09-25T16:04:50Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9cdc6e4fe00e3b0294349a2750c4eb52f108f854",
    "line" : 29,
    "diffHunk" : "@@ -48,6 +48,10 @@ To start Sandbox using persistence, pass an ``--sql-backend-jdbcurl <value>`` op\n \n Here is an example for such a url: ``jdbc:postgresql://localhost/test?user=fred&password=secret``\n \n+Due to possible conflicts between the ``&`` character and various terminal shells, we recommend quoting the jdbc url like so:\n+\n+  $ daml sandbox Main.dar --sql-backend-jdbcurl \"jdbc:postgresql://localhost/test?user=fred&password=secret\""
  },
  {
    "id" : "f823ca6d-f408-416e-ac40-91533c3ea92c",
    "prId" : 740,
    "comments" : [
      {
        "id" : "95587e2b-c371-4c0b-8c45-7fa3bf251430",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  $ daml sandbox Main.dar --scenario Main:example\r\n```",
        "createdAt" : "2019-04-26T18:32:24Z",
        "updatedAt" : "2019-05-13T15:44:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "99c9517ca1924c14854af2532f86f73f33e73ccd",
    "line" : null,
    "diffHunk" : "@@ -8,13 +8,13 @@ DAML Sandbox\n \n The DAML Sandbox, or Sandbox for short, is an in-memory ledger that enables rapid application prototyping by simulating the Digital Asset Distributed Ledger. It is a stand-alone JVM application utilizing the same components as the runtime platform.\n \n-You can start DAML Sandbox together with :doc:`Navigator </tools/navigator/index>` using the ``da start`` command in a DAML SDK project. This command will compile the DAML file and its dependencies as specified in the ``da.yaml``. It will then launch Sandbox passing the just obtained DAR packages. Sandbox will also be given the name of the startup scenario specified in the project's ``da.yaml``. Finally, it launches the navigator connecting it to the running Sandbox.\n+You can start DAML Sandbox together with :doc:`Navigator </tools/navigator/index>` using the ``daml start`` command in a DAML SDK project. This command will compile the DAML file and its dependencies as specified in the ``da.yaml``. It will then launch Sandbox passing the just obtained DAR packages. Sandbox will also be given the name of the startup scenario specified in the project's ``da.yaml``. Finally, it launches the navigator connecting it to the running Sandbox.\n \n-It is possible to execute the Sandbox launching step in isolation by typing ``da sandbox``.\n+It is possible to execute the Sandbox launching step in isolation by typing ``daml sandbox``.\n \n Sandbox can also be run manually as in this example::\n \n-  $ da run sandbox -- Main.dar --scenario Main:example\n+  $ daml sandbox -- Main.dar --scenario Main:example"
  },
  {
    "id" : "4b4c4bce-19ba-4c07-8007-6eea07471f32",
    "prId" : 740,
    "comments" : [
      {
        "id" : "7c659ae6-2a42-495c-88c3-783f78e1f1c5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nHere, ``daml sandbox `` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\r\n```",
        "createdAt" : "2019-04-26T18:33:03Z",
        "updatedAt" : "2019-05-13T15:44:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "99c9517ca1924c14854af2532f86f73f33e73ccd",
    "line" : null,
    "diffHunk" : "@@ -24,7 +24,7 @@ Sandbox can also be run manually as in this example::\n   Initialized Static time provider, starting from 1970-01-01T00:00:00Z\n   listening on localhost:6865\n \n-Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n+Here, ``daml sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production."
  },
  {
    "id" : "41410d66-4419-4e94-9363-ea806e151862",
    "prId" : 722,
    "comments" : [
      {
        "id" : "91820132-37c2-4f04-9f21-f08daae01315",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nBy default, Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. If you want to keep the state, you can use a Postgres database for persistence. This allows you to shut down Sandbox and start it up later, continuing where it left off.\r\n```",
        "createdAt" : "2019-04-29T09:19:58Z",
        "updatedAt" : "2019-04-29T12:44:39Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af578f527d06dd80e63a5b53c815548675b05bd8",
    "line" : null,
    "diffHunk" : "@@ -26,23 +26,19 @@ Sandbox can also be run manually as in this example::\n \n Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n \n+\n+Running with persistence\n+************************\n+\n+By default the Sandbox uses an in-memory store and as such it loses its state when stopped or restarted. There is a possibility to use a Postgres database for persistence, which allows the Sandbox to be shut down and continued later where it left off."
  },
  {
    "id" : "95e7b26b-4044-4896-b1f3-228b4c950bb3",
    "prId" : 722,
    "comments" : [
      {
        "id" : "60823609-82cc-4bb5-9c1b-98ef717918ad",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nTo set this up, you must:\r\n- create an initially empty Postgres database that the Sandbox application can access \r\n- have a database user for Sandbox that has authority to execute DDL operations \r\n\r\n  This is because the Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. \r\n```",
        "createdAt" : "2019-04-29T09:21:51Z",
        "updatedAt" : "2019-04-29T12:44:39Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af578f527d06dd80e63a5b53c815548675b05bd8",
    "line" : null,
    "diffHunk" : "@@ -26,23 +26,19 @@ Sandbox can also be run manually as in this example::\n \n Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n \n+\n+Running with persistence\n+************************\n+\n+By default the Sandbox uses an in-memory store and as such it loses its state when stopped or restarted. There is a possibility to use a Postgres database for persistence, which allows the Sandbox to be shut down and continued later where it left off.\n+\n+The application has to have access to an initially empty database, and the database user needs to have authority to execute DDL operations as the Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. "
  },
  {
    "id" : "57a3af4b-98b2-48a8-80c4-d6e5d4174416",
    "prId" : 722,
    "comments" : [
      {
        "id" : "35cefad7-d70b-4098-bd43-485b21b73392",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nTo start Sandbox using persistence, pass an ``--jdbcurl <value>`` option, where `<value>` is a valid jdbc url containing the username, password and database name to connect to.\r\n\r\nHere is an example for such a url: ``jdbc:postgresql://localhost/test?user=fred&password=secret``\r\n```",
        "createdAt" : "2019-04-29T09:22:16Z",
        "updatedAt" : "2019-04-29T12:44:39Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af578f527d06dd80e63a5b53c815548675b05bd8",
    "line" : null,
    "diffHunk" : "@@ -26,23 +26,19 @@ Sandbox can also be run manually as in this example::\n \n Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n \n+\n+Running with persistence\n+************************\n+\n+By default the Sandbox uses an in-memory store and as such it loses its state when stopped or restarted. There is a possibility to use a Postgres database for persistence, which allows the Sandbox to be shut down and continued later where it left off.\n+\n+The application has to have access to an initially empty database, and the database user needs to have authority to execute DDL operations as the Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. \n+\n+In order to start the Sandox using persistence you need to pass an ``--jdbcurl <value>`` option, where `<value>` is a valid jdbc url containing the username, password and database name to connect to. Here is an example for such a url: ``jdbc:postgresql://localhost/test?user=fred&password=secret``"
  },
  {
    "id" : "2d1d12fe-d790-43f8-ac78-0321bb70bbf3",
    "prId" : 722,
    "comments" : [
      {
        "id" : "32e77ec7-b1b5-460f-a277-4354099d8cb1",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Making things more active and instructing:\r\n\r\n```suggestion\r\nTo start Sandbox, run: ``sandbox [options] <archive>...``\r\n\r\nTo see all the available options, run ``da run sandbox -- --help``\r\n```",
        "createdAt" : "2019-04-29T09:22:49Z",
        "updatedAt" : "2019-04-29T12:44:39Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af578f527d06dd80e63a5b53c815548675b05bd8",
    "line" : null,
    "diffHunk" : "@@ -26,23 +26,19 @@ Sandbox can also be run manually as in this example::\n \n Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n \n+\n+Running with persistence\n+************************\n+\n+By default the Sandbox uses an in-memory store and as such it loses its state when stopped or restarted. There is a possibility to use a Postgres database for persistence, which allows the Sandbox to be shut down and continued later where it left off.\n+\n+The application has to have access to an initially empty database, and the database user needs to have authority to execute DDL operations as the Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. \n+\n+In order to start the Sandox using persistence you need to pass an ``--jdbcurl <value>`` option, where `<value>` is a valid jdbc url containing the username, password and database name to connect to. Here is an example for such a url: ``jdbc:postgresql://localhost/test?user=fred&password=secret``\n+\n+More on jdbc urls can be found here: https://jdbc.postgresql.org/documentation/head/connect.html\n+\n Command-line reference\n **********************\n \n-::\n-\n-  Usage: sandbox [options] <archive>...\n-  \n-    -p, --port <value>     Sandbox service port. Defaults to 6865.\n-    -a, --address <value>  Sandbox service host. Defaults to binding on all addresses.\n-    --dalf                 This argument is present for backwards compatibility. DALF and DAR archives are now identified by their extensions.\n-    -s, --static-time      Use static time, configured with TimeService through gRPC.\n-    -w, --wall-clock-time  Use wall clock time (UTC). When not provided, static time is used.\n-    --no-parity            Legacy flag with no effect.\n-    --scenario <value>     If set, the sandbox will execute the given scenario on startup and store all the contracts created by it. Two formats are supported: Module.Name:Entity.Name (preferred) and Module.Name.Entity.Name (deprecated, will print a warning when used).\n-    <archive>...           Daml archives to load. Either in .dar or .dalf format. Only DAML-LF v1 Archives are currently supported.\n-    --pem <value>          TLS: The pem file to be used as the private key.\n-    --crt <value>          TLS: The crt file to be used as the cert chain. Required if any other TLS parameters are set.\n-    --cacrt <value>        TLS: The crt file to be used as the the trusted root CA.\n-    --ledgerid <value>     Sandbox ledger ID. If missing, a random unique ledger ID will be used. Only useful with persistent stores.\n-    --help                 Print the usage text\n+You can start the Sandbox by running: ``sandbox [options] <archive>...`` All the available options can be seen by running ``da run sandbox -- --help``"
  },
  {
    "id" : "473cf2e8-1608-4d6a-b3ad-7fbf3f2ab9f4",
    "prId" : 722,
    "comments" : [
      {
        "id" : "ffb7f0d3-6d2b-4fac-a376-22bdd155cf5e",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nIf you're not familiar with JDBC URLs, see the JDBC docs for more information: https://jdbc.postgresql.org/documentation/head/connect.html\r\n```",
        "createdAt" : "2019-04-29T09:24:47Z",
        "updatedAt" : "2019-04-29T12:44:39Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af578f527d06dd80e63a5b53c815548675b05bd8",
    "line" : null,
    "diffHunk" : "@@ -26,23 +26,19 @@ Sandbox can also be run manually as in this example::\n \n Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n \n+\n+Running with persistence\n+************************\n+\n+By default the Sandbox uses an in-memory store and as such it loses its state when stopped or restarted. There is a possibility to use a Postgres database for persistence, which allows the Sandbox to be shut down and continued later where it left off.\n+\n+The application has to have access to an initially empty database, and the database user needs to have authority to execute DDL operations as the Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. \n+\n+In order to start the Sandox using persistence you need to pass an ``--jdbcurl <value>`` option, where `<value>` is a valid jdbc url containing the username, password and database name to connect to. Here is an example for such a url: ``jdbc:postgresql://localhost/test?user=fred&password=secret``\n+\n+More on jdbc urls can be found here: https://jdbc.postgresql.org/documentation/head/connect.html"
  },
  {
    "id" : "1d007f97-74eb-4548-9d92-f4ea456749be",
    "prId" : 722,
    "comments" : [
      {
        "id" : "a2eb3d32-ee94-42b9-8f27-86e16e7ff930",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nTo start Sandbox using persistence, pass an ``--jdbcurl <value>`` option, where ``<value>`` is a valid jdbc url containing the username, password and database name to connect to.\r\n```",
        "createdAt" : "2019-04-29T12:07:17Z",
        "updatedAt" : "2019-04-29T12:44:39Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af578f527d06dd80e63a5b53c815548675b05bd8",
    "line" : null,
    "diffHunk" : "@@ -26,23 +26,27 @@ Sandbox can also be run manually as in this example::\n \n Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n \n+\n+Running with persistence\n+************************\n+\n+By default, Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. If you want to keep the state, you can use a Postgres database for persistence. This allows you to shut down Sandbox and start it up later, continuing where it left off.\n+\n+To set this up, you must:\n+- create an initially empty Postgres database that the Sandbox application can access \n+- have a database user for Sandbox that has authority to execute DDL operations \n+\n+  This is because the Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. \n+\n+To start Sandbox using persistence, pass an ``--jdbcurl <value>`` option, where `<value>` is a valid jdbc url containing the username, password and database name to connect to."
  },
  {
    "id" : "42892000-30f8-467e-8858-2569ec67dd0d",
    "prId" : 722,
    "comments" : [
      {
        "id" : "74a32e39-bd68-4d7d-b6a2-3c3e807b99d3",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n  This is because Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. \r\n```",
        "createdAt" : "2019-04-29T12:07:23Z",
        "updatedAt" : "2019-04-29T12:44:39Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af578f527d06dd80e63a5b53c815548675b05bd8",
    "line" : null,
    "diffHunk" : "@@ -26,23 +26,27 @@ Sandbox can also be run manually as in this example::\n \n Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the active SDK release and pass it any arguments that follow. The example passes the DAR file to load (``Main.dar``) and the optional ``--scenario`` flag tells Sandbox to run the ``Main:example`` scenario on startup. The scenario must be fully qualified; here ``Main`` is the module and ``example`` is the name of the scenario, separated by a ``:``. The scenario is used for testing and development; it is not run in production.\n \n+\n+Running with persistence\n+************************\n+\n+By default, Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. If you want to keep the state, you can use a Postgres database for persistence. This allows you to shut down Sandbox and start it up later, continuing where it left off.\n+\n+To set this up, you must:\n+- create an initially empty Postgres database that the Sandbox application can access \n+- have a database user for Sandbox that has authority to execute DDL operations \n+\n+  This is because the Sandbox manages its own database schema, applying migrations if necessary when upgrading versions. "
  },
  {
    "id" : "57e29ac6-8198-48ff-81ee-0c96e6cdef30",
    "prId" : 668,
    "comments" : [
      {
        "id" : "f7a85064-6db5-4652-a97e-dd1b8f3dbe7a",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This looks like you've removed the thing that makes it a code block. Have you previewed it locally to check it looks alright?",
        "createdAt" : "2019-04-24T13:59:29Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3979c921-ac52-4b26-9579-c5609619e84e",
        "parentId" : "f7a85064-6db5-4652-a97e-dd1b8f3dbe7a",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "right, just fixed it",
        "createdAt" : "2019-04-24T14:12:51Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2947cafe20480cf6ac32705c79e05ba04cad0568",
    "line" : 21,
    "diffHunk" : "@@ -29,18 +29,19 @@ Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the\n Command-line reference\n **********************\n \n-Sandbox requires the names of the input ``.dar`` or ``.dalf`` files as arguments to start.\n-The available command line options are listed here::\n-\n-    -p, --port <value>       Sandbox service port. Defaults to 6865.\n-    -a, --address <value>    Sandbox service host. Defaults to binding on all addresses.\n-    --dalf                   This argument is present for backwards compatibility. DALF and DAR archives are now identified by their extensions.\n-    --static-time            Use static time, configured with TimeService through gRPC.\n-    -w, --wall-clock-time    Use wall clock time (UTC). When not provided, static time is used.\n-    --no-parity              Disables Ledger Server parity mode. Features which are not supported by the Platform become available.\n-    --scenario <value>       If set, the sandbox will execute the given scenario on startup and store all the contracts created by it. Two formats are supported: Module.Name:Entity.Name (preferred) and Module.Name.Entity.Name (deprecated, will print a warning when used).\n-    --daml-lf-archive-recursion-limit <value>\n-                             Set the recursion limit when decoding DAML-LF archives (.dalf files). Default is 1000\n-    <archive>...             Daml archives to load. Either in .dar or .dalf format. Only DAML-LF v1 Archives are currently supported.\n-    --help                   Print the usage text\n-\n+  Usage: sandbox [options] <archive>..."
  },
  {
    "id" : "4d3653c0-671e-4338-96bd-84e47b15ef87",
    "prId" : 668,
    "comments" : [
      {
        "id" : "7620e6e7-1b09-4b8f-9b47-246254661c7e",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Is this something we want to expose to users?",
        "createdAt" : "2019-04-24T14:01:26Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "004034e7-279b-4764-b29b-1fa55d9ffa38",
        "parentId" : "7620e6e7-1b09-4b8f-9b47-246254661c7e",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "it's part of the `--help`, so I guess the answer is yes. If not we must make it `hidden`",
        "createdAt" : "2019-04-24T14:13:42Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94ddd3d8-6aa7-423b-823d-c0118dd3ae86",
        "parentId" : "7620e6e7-1b09-4b8f-9b47-246254661c7e",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "If it's not something useful to users, I'd suggest making it hidden.",
        "createdAt" : "2019-04-24T14:27:12Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "adebac41-9ab5-4657-a3b8-897972c288c5",
        "parentId" : "7620e6e7-1b09-4b8f-9b47-246254661c7e",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "@gaboraranyossy-da please make it hidden -- we're going to remove DAML-LF dev soon anyway.",
        "createdAt" : "2019-04-24T14:46:08Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8556b515-95be-4542-acb3-22f1e4ec2d38",
        "parentId" : "7620e6e7-1b09-4b8f-9b47-246254661c7e",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-24T14:59:19Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2947cafe20480cf6ac32705c79e05ba04cad0568",
    "line" : null,
    "diffHunk" : "@@ -29,18 +29,19 @@ Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the\n Command-line reference\n **********************\n \n-Sandbox requires the names of the input ``.dar`` or ``.dalf`` files as arguments to start.\n-The available command line options are listed here::\n-\n-    -p, --port <value>       Sandbox service port. Defaults to 6865.\n-    -a, --address <value>    Sandbox service host. Defaults to binding on all addresses.\n-    --dalf                   This argument is present for backwards compatibility. DALF and DAR archives are now identified by their extensions.\n-    --static-time            Use static time, configured with TimeService through gRPC.\n-    -w, --wall-clock-time    Use wall clock time (UTC). When not provided, static time is used.\n-    --no-parity              Disables Ledger Server parity mode. Features which are not supported by the Platform become available.\n-    --scenario <value>       If set, the sandbox will execute the given scenario on startup and store all the contracts created by it. Two formats are supported: Module.Name:Entity.Name (preferred) and Module.Name.Entity.Name (deprecated, will print a warning when used).\n-    --daml-lf-archive-recursion-limit <value>\n-                             Set the recursion limit when decoding DAML-LF archives (.dalf files). Default is 1000\n-    <archive>...             Daml archives to load. Either in .dar or .dalf format. Only DAML-LF v1 Archives are currently supported.\n-    --help                   Print the usage text\n-\n+  Usage: sandbox [options] <archive>...\n+  \n+    -p, --port <value>     Sandbox service port. Defaults to 6865.\n+    -a, --address <value>  Sandbox service host. Defaults to binding on all addresses.\n+    --dalf                 This argument is present for backwards compatibility. DALF and DAR archives are now identified by their extensions.\n+    -s, --static-time      Use static time, configured with TimeService through gRPC.\n+    -w, --wall-clock-time  Use wall clock time (UTC). When not provided, static time is used.\n+    --no-parity            Legacy flag with no effect.\n+    --scenario <value>     If set, the sandbox will execute the given scenario on startup and store all the contracts created by it. Two formats are supported: Module.Name:Entity.Name (preferred) and Module.Name.Entity.Name (deprecated, will print a warning when used).\n+    <archive>...           Daml archives to load. Either in .dar or .dalf format. Only DAML-LF v1 Archives are currently supported.\n+    --pem <value>          TLS: The pem file to be used as the private key.\n+    --crt <value>          TLS: The crt file to be used as the cert chain. Required if any other TLS parameters are set.\n+    --cacrt <value>        TLS: The crt file to be used as the the trusted root CA.\n+    --allow-dev            Allow usage of DAML-LF dev version. Do not use in production!"
  },
  {
    "id" : "4ec679fb-571c-46dd-aff7-d62af2a20083",
    "prId" : 668,
    "comments" : [
      {
        "id" : "50402e39-11c7-44a2-81cf-af99472eb8d7",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Any guidance on what that should look like? An example value would help.",
        "createdAt" : "2019-04-24T14:01:53Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d89875bf-521a-4aea-ae96-de11255253ad",
        "parentId" : "50402e39-11c7-44a2-81cf-af99472eb8d7",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "it can be any `String` for now, which is probably a bit broader than what we should have. I don't remember having this specified more precisely. @bitonic @mziolekda ? I'm happy to put restrictions on this in a follow-up PR, but I think it's out of scope for this one.",
        "createdAt" : "2019-04-24T14:17:54Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fbd6b223-3c4b-4fc7-9896-92b2ef03970f",
        "parentId" : "50402e39-11c7-44a2-81cf-af99472eb8d7",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I don't mean restrictions - literally just giving people an idea of an example value, otherwise the space is huge. Help them out a bit. What do we use in our testing?",
        "createdAt" : "2019-04-24T14:26:54Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b066fe87-4ba0-417b-ad67-3cc381206888",
        "parentId" : "50402e39-11c7-44a2-81cf-af99472eb8d7",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "i don't know if we've specified any restriction.",
        "createdAt" : "2019-04-24T14:46:33Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be395004-f286-48da-84fe-a279ec8fac80",
        "parentId" : "50402e39-11c7-44a2-81cf-af99472eb8d7",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "we use mostly arbitrary strings for testing (without spaces). I think we should restrict the format to something sensible, have that validated then change the docs.",
        "createdAt" : "2019-04-24T14:56:30Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7291abcb-a7ee-4da4-a7c3-cf1d59fda38b",
        "parentId" : "50402e39-11c7-44a2-81cf-af99472eb8d7",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "I created an issue: https://github.com/digital-asset/daml/issues/674 ",
        "createdAt" : "2019-04-24T14:58:30Z",
        "updatedAt" : "2019-04-26T07:09:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2947cafe20480cf6ac32705c79e05ba04cad0568",
    "line" : 34,
    "diffHunk" : "@@ -29,18 +29,19 @@ Here, ``da run sandbox --`` tells the SDK Assistant to run ``sandbox`` from the\n Command-line reference\n **********************\n \n-Sandbox requires the names of the input ``.dar`` or ``.dalf`` files as arguments to start.\n-The available command line options are listed here::\n-\n-    -p, --port <value>       Sandbox service port. Defaults to 6865.\n-    -a, --address <value>    Sandbox service host. Defaults to binding on all addresses.\n-    --dalf                   This argument is present for backwards compatibility. DALF and DAR archives are now identified by their extensions.\n-    --static-time            Use static time, configured with TimeService through gRPC.\n-    -w, --wall-clock-time    Use wall clock time (UTC). When not provided, static time is used.\n-    --no-parity              Disables Ledger Server parity mode. Features which are not supported by the Platform become available.\n-    --scenario <value>       If set, the sandbox will execute the given scenario on startup and store all the contracts created by it. Two formats are supported: Module.Name:Entity.Name (preferred) and Module.Name.Entity.Name (deprecated, will print a warning when used).\n-    --daml-lf-archive-recursion-limit <value>\n-                             Set the recursion limit when decoding DAML-LF archives (.dalf files). Default is 1000\n-    <archive>...             Daml archives to load. Either in .dar or .dalf format. Only DAML-LF v1 Archives are currently supported.\n-    --help                   Print the usage text\n-\n+  Usage: sandbox [options] <archive>...\n+  \n+    -p, --port <value>     Sandbox service port. Defaults to 6865.\n+    -a, --address <value>  Sandbox service host. Defaults to binding on all addresses.\n+    --dalf                 This argument is present for backwards compatibility. DALF and DAR archives are now identified by their extensions.\n+    -s, --static-time      Use static time, configured with TimeService through gRPC.\n+    -w, --wall-clock-time  Use wall clock time (UTC). When not provided, static time is used.\n+    --no-parity            Legacy flag with no effect.\n+    --scenario <value>     If set, the sandbox will execute the given scenario on startup and store all the contracts created by it. Two formats are supported: Module.Name:Entity.Name (preferred) and Module.Name.Entity.Name (deprecated, will print a warning when used).\n+    <archive>...           Daml archives to load. Either in .dar or .dalf format. Only DAML-LF v1 Archives are currently supported.\n+    --pem <value>          TLS: The pem file to be used as the private key.\n+    --crt <value>          TLS: The crt file to be used as the cert chain. Required if any other TLS parameters are set.\n+    --cacrt <value>        TLS: The crt file to be used as the the trusted root CA.\n+    --allow-dev            Allow usage of DAML-LF dev version. Do not use in production!\n+    --ledgerid <value>     Sandbox ledger ID. If missing, a random unique ledger ID will be used. Only useful with persistent stores."
  }
]