[
  {
    "id" : "429538da-b4e3-4aae-93d6-71a5da73cd76",
    "prId" : 7448,
    "comments" : [
      {
        "id" : "5ae6188d-e1a4-427b-bcf3-5f001381e002",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I've learned to spell out small numbers.\r\n```suggestion\r\n   #. You use something that is not part of the four ledger API command\r\n```",
        "createdAt" : "2020-09-21T12:21:12Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "41506f22-796b-496f-90f1-8723f785d900",
        "parentId" : "5ae6188d-e1a4-427b-bcf3-5f001381e002",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I really dislike that pattern. I know it is common to recommend this in style guides but I find it harder to read and in the end I care less about style than I care about readability in documentation.",
        "createdAt" : "2020-09-21T12:26:08Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ecdf6e272d2721bf8ddc245c4cadbdf7c1eb3687",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +250,254 @@      choice and call that using ``createAndExerciseCmd``.\n\n   #. You use something that is not part of the 4 ledger API command\n      types, e.g., ``fetch``. For ``fetch`` and ``fetchByKey``, you\n      can instead use ``queryContractId`` and ``queryContractKey``"
  },
  {
    "id" : "7fef83b6-6c2b-458f-abc0-c3c285f6d228",
    "prId" : 6477,
    "comments" : [
      {
        "id" : "57518fd7-a510-4a08-bd3f-2890a935cb30",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What I was calling API here is things like `submit`, i.e., the scenario specific API provided by `daml-stdlib` not the gRPC API of the scenario service. But I do agree that your formulation is better :+1:",
        "createdAt" : "2020-06-24T10:58:51Z",
        "updatedAt" : "2020-06-24T10:58:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc1657c00b0a093c7ac0c1e2c66c44703c7daa5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +10,14 @@   daml-script-docs\n\nDAML scenarios provide a simple way for testing DAML models\nand getting quick feedback in DAML studio. However, scenarios are run\nin a special process and do not interact with an actual ledger. This"
  },
  {
    "id" : "5136b977-9bbc-4ded-8a67-13b6ba511ac4",
    "prId" : 4834,
    "comments" : [
      {
        "id" : "13f4e933-9736-4d24-9e85-59328e3e1dc8",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Should there be a separate section introducing `init-script` as a concept before going into migration, or is this planned for later when DAML script is stabilized?",
        "createdAt" : "2020-03-05T13:39:34Z",
        "updatedAt" : "2020-03-05T14:47:05Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "867e9f3e-97b9-44f2-9893-bb6c6cfcb03d",
        "parentId" : "13f4e933-9736-4d24-9e85-59328e3e1dc8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good point! Iâ€™ve added a section on that. PTAL",
        "createdAt" : "2020-03-05T14:00:50Z",
        "updatedAt" : "2020-03-05T14:47:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "25e15402-ca03-45e1-a2be-8fa6fe0c989c",
        "parentId" : "13f4e933-9736-4d24-9e85-59328e3e1dc8",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Thank you, that looks great!",
        "createdAt" : "2020-03-05T16:10:13Z",
        "updatedAt" : "2020-03-05T16:10:13Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +220,224 @@\nExisting scenarios that you used for ledger initialization can be\ntranslated to DAML script but there are a few things to keep in mind:\n\n#. You need to add ``daml-script`` to the list of dependencies in your"
  },
  {
    "id" : "f7636ea3-1f9a-4764-8883-3ac3194ad5d9",
    "prId" : 4834,
    "comments" : [
      {
        "id" : "cbcf0c69-d8e6-4449-b700-598a19f41e06",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ncreate a party with a specific party identifier during development, you can\r\n```\r\nSame below.",
        "createdAt" : "2020-03-06T10:08:48Z",
        "updatedAt" : "2020-03-06T10:11:33Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +204,208 @@your ``daml.yaml``. This will automatically be picked up by ``daml\nstart`` and used to initialize sandbox. Since it is often useful to\ncreate a party with a specific party id during development, you can\nuse the ``allocatePartyWithHint`` function which accepts not only the\ndisplay name but also a hint for the party id. On Sandbox, the hint"
  },
  {
    "id" : "7f09ed25-e0e5-4f3a-b00f-57741a7c6233",
    "prId" : 4834,
    "comments" : [
      {
        "id" : "4158794e-fd8e-430b-84ac-9e88f8af468d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What do you mean by \"create a choice\"? I suppose you mean something like creating a contract with a single choice?",
        "createdAt" : "2020-03-06T10:11:18Z",
        "updatedAt" : "2020-03-06T10:11:33Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ffaee3b-39ab-429e-ad9f-75a2c966318e",
        "parentId" : "4158794e-fd8e-430b-84ac-9e88f8af468d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yep, tried to make it a bit clearer in https://github.com/digital-asset/daml/pull/4870",
        "createdAt" : "2020-03-06T10:36:16Z",
        "updatedAt" : "2020-03-06T10:36:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +235,239 @@   intentional. Your initialization scripts should not be able to\n   create transactions that a ledger client would not be able to\n   create. If you need, you can create a choice and call that via\n   ``createAndExercise``.\n#. You need to replace calls to ``getParty x`` by"
  },
  {
    "id" : "de155c44-f7b0-4fdb-bc6d-4a7b6547a181",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "035a1a9f-cf13-45f3-b188-e3a0b572488a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nDAML Script addresses this problem by providing you with an API with\r\n```\r\nI think we should do this consistently.",
        "createdAt" : "2019-11-19T15:23:13Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n\nDAML script addresses this problem by providing you with an API with\nthe simplicity of DAML scenarios and all the benefits such as being\nable to reuse your DAML types and logic while running against an"
  },
  {
    "id" : "4e39757e-c5bc-4013-9418-57c522c670cc",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "de80a0eb-db18-456d-9b75-15bd6eedf5a8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nand getting quick feedback in DAML Studio. However, scenarios are run\r\n```",
        "createdAt" : "2019-11-19T15:23:31Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@\nDAML scenarios provide a simple API for experimenting with DAML models\nand getting quick feedback in DAML studio. However, scenarios are run\nin a special process and do not interact with an actual ledger. This\nmeans that you cannot use scenarios to test other ledger clients,"
  },
  {
    "id" : "bfe38fe1-07ba-4540-ba7f-ea9fd0d6aa23",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "fad8c1c1-2fbf-42db-9c3f-6cc0667ae432",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nlogic and your UI. DAML Script can also be used for ledger initialization on all ledger implementations.\r\n```\r\nIt took me a while to understand the sentence. I don't think it's really necessary to mention here that scenarios can be used to initialize the sandbox. IMO, it is more likely to cause confusion rather than really help the documentation of DAML Script.",
        "createdAt" : "2019-11-19T15:29:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@able to reuse your DAML types and logic while running against an\nactual ledger. This means that you can use it to test automation\nlogic, your UI but also for ledger initialization where scenarios\ncannot be used (with the exception of :doc:`/tools/sandbox`).\n"
  },
  {
    "id" : "87dea4a1-5493-464c-8da8-db7b7ed315db",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "c9c4f004-8c82-44c5-b17d-75d56f82ef47",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nOur example for this tutorial consists of two templates.\r\n```",
        "createdAt" : "2019-11-19T15:29:18Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@=====\n\nOur example for this tutorial consists of 2 templates.\n\nFirst, we have a template called ``Coin``:"
  },
  {
    "id" : "0882e68d-9529-4f00-94e7-bb01cf3b0e45",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "6f0a55c8-f27e-4127-8288-a49d000aa208",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nsingle ``Accept`` choice to the ``owner``, which will create the corresponding ``Coin`` when exercised.\r\n```",
        "createdAt" : "2019-11-19T15:32:14Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@\n``CoinProposal`` is only signed by the ``issuer`` and it provides a\nsingle ``Accept`` choice which, when exercised by the controller will\ncreate the corresponding ``Coin``.\n"
  },
  {
    "id" : "e26c3adc-2a0c-4174-a2af-c9cd6b1ed10d",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "d5a176d4-cbe8-4d48-903f-ae2e12db1fa6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nthat operate on these templates. In order to use DAML Script, you need to add the ``daml-script``\r\n```",
        "createdAt" : "2019-11-19T15:34:08Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@\nHaving defined the templates, we can now move on to write DAML scripts\nthat operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\nlibrary to the ``dependencies`` field in ``daml.yaml``.\n"
  },
  {
    "id" : "dc4feb08-f868-4ebc-ae78-ac1ae8b6117e",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "2a89a68d-b97d-4c93-99f4-477be2d14834",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nIn addition to that, you also need to import the ``Daml.Script`` module.\r\n```",
        "createdAt" : "2019-11-19T15:34:37Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@   :end-before: # script-dependencies-end\n\nIn addition to that you also need to import the ``Daml.Script`` module\nand since DAML script provides ``submit`` and ``submitMustFail``\nfunctions that collide with the ones used in scenarios, we need to"
  },
  {
    "id" : "81451670-19d2-4ce6-af23-8cf139c14d73",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "781b3298-671d-4fb8-ba0a-b02bed3f9ffb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nSince DAML script provides ``submit`` and ``submitMustFail``\r\n```",
        "createdAt" : "2019-11-19T15:35:02Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@\nIn addition to that you also need to import the ``Daml.Script`` module\nand since DAML script provides ``submit`` and ``submitMustFail``\nfunctions that collide with the ones used in scenarios, we need to\nhide those. We also enable the ``ApplicativeDo`` extension. We will"
  },
  {
    "id" : "01ee0ede-7110-4923-8541-4f676f314341",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "2affb75b-1c1e-4084-a597-8739704f1e61",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nSince parties cannot be arbitrary strings on an actual ledger, we\r\n```",
        "createdAt" : "2019-11-19T15:36:56Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@   :end-before: -- DAML_SCRIPT_HEADER_END\n\nSince on an actual ledger parties cannot be arbitrary strings, we\ndefine a record containing all the parties that we will use in our\nscript so that we can easily swap them out."
  },
  {
    "id" : "c72d3a7b-626c-4d32-b1ff-5dc2e3e98f63",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "4d52f5a0-22eb-44df-ba8c-3878af76092b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nLet us now write a function to initialize the ledger with three\r\n```",
        "createdAt" : "2019-11-19T15:37:42Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@   :end-before: -- LEDGER_PARTIES_END\n\nLet us now write a function to initialize the ledger with 3\n``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script"
  },
  {
    "id" : "7bb42db2-a813-4d40-a7e5-34958221d4bd",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "31857aa6-6577-40df-999d-c244f04cc937",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n``CoinProposal``s and accept two of them. This function takes the\r\n```",
        "createdAt" : "2019-11-19T15:37:54Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@\nLet us now write a function to initialize the ledger with 3\n``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script\n()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``."
  },
  {
    "id" : "c44c49d8-14f3-4ed1-ac5d-daac40575078",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "13b8d4ee-93cc-4633-a73b-9f3e3bc65e19",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n``LedgerParties`` as an argument and returns a ``Script\r\n```",
        "createdAt" : "2019-11-19T15:38:31Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@Let us now write a function to initialize the ledger with 3\n``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script\n()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n"
  },
  {
    "id" : "6a4a571c-5885-4d29-9e90-6b45d50584f0",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "66dc6829-c7da-47ab-a795-bf03e6a638da",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n()``, which is DAML Scriptâ€™s equivalent of ``Scenario ()``.\r\n```",
        "createdAt" : "2019-11-19T15:38:44Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script\n()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n\n.. literalinclude:: ./template-root/src/ScriptExample.daml"
  },
  {
    "id" : "7a151b6a-22e8-41f7-98a6-54d6cbae7ae5",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "02e592c0-e7c9-48b3-ac6e-8634d2c05766",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nmust be of type ``Commands a``. In our case that becomes ``Commands (ContractId\r\n```",
        "createdAt" : "2019-11-19T15:40:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@submitting the transaction. In our case, we want all proposals to be\ncreated by the bank so we use ``parties.bank``. The second argument\nmust be of type ``Commands a`` so in our case ``Commands (ContractId\nCoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\ncorresponding to the 3 proposals that we create. ``Commands`` is"
  },
  {
    "id" : "b976796a-f9b4-42e2-a5ea-984fc19ef11f",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "226e81f2-a5da-4e77-863a-f33ebdbd620e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ncorresponding to the three proposals that we create. ``Commands`` is\r\n```",
        "createdAt" : "2019-11-19T15:40:25Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@must be of type ``Commands a`` so in our case ``Commands (ContractId\nCoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\ncorresponding to the 3 proposals that we create. ``Commands`` is\nsimilar to ``Update`` which is used in the ``submit`` function in\nscenarios. However, ``Commands`` requires that the individual commands"
  },
  {
    "id" : "10fc5a48-3c9b-408d-b9cd-4dc1172c0ef6",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "56ff5b0b-93c5-4e34-8f61-28929751a23a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nrespect this restriction. In ``Commands`` we use ``createCmd`` instead of\r\n```",
        "createdAt" : "2019-11-19T15:41:13Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +100,104 @@Ledger API where a transaction consists of a list of commands.  Using\n``ApplicativeDo`` we can still use ``do``-notation as long as we\nrespect this. In ``Commands`` we use ``createCmd`` instead of\n``create`` and ``exerciseCmd`` instead of ``exercise``.\n"
  },
  {
    "id" : "a4aed2e9-db36-4412-969f-2c6ba595fa9f",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "57473eda-1f04-4b06-8a3c-fd34bb2512ed",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nAfter creating the ``CoinProposal``s, we want ``Alice`` and\r\n```",
        "createdAt" : "2019-11-19T15:41:48Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@   :end-before: -- INITIALIZE_PROPOSAL_END\n\nNow that we have created the ``CoinProposal``s, we want ``Alice`` and\n``Bob`` to accept the proposal while the ``Bank`` will ignore the\nproposal that it has created for itself. To do so we use separate"
  },
  {
    "id" : "a33fc326-8101-4722-98b2-c72cef6e89f5",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "180a5742-1632-4d09-a3e0-ae7e7becc24a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nUp to here, we have defined a way to initialize the ledger. Next, we will write a\r\n```",
        "createdAt" : "2019-11-19T15:44:33Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@   :end-before: -- INITIALIZE_PURE_END\n\nWe have now defined a way to initialize the ledger so we can write a\ntest that checks that the contracts that we expect exist afterwards.\n"
  },
  {
    "id" : "d5712833-d4a2-4827-8023-61b7dc99d6e2",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "765c7556-d3b4-4de6-9be5-2e05a1e6632b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ntest that checks that the contracts we expect to exist do actually exist.\r\n```",
        "createdAt" : "2019-11-19T15:45:12Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +128,132 @@\nWe have now defined a way to initialize the ledger so we can write a\ntest that checks that the contracts that we expect exist afterwards.\n\nFirst, we define the signature of our test. We will create the parties"
  },
  {
    "id" : "4f898b72-63ec-49fd-b219-443a20701bf5",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "bf883af1-6e94-429f-9b59-7218a4b48d6d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nTo this end, we first define the signature of our test. We will create the parties\r\n```",
        "createdAt" : "2019-11-19T15:45:30Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@test that checks that the contracts that we expect exist afterwards.\n\nFirst, we define the signature of our test. We will create the parties\nused here in the test, so it does not take any arguments.\n"
  },
  {
    "id" : "770b4e03-8a9c-4d24-99e8-1de98a5afaa2",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "950ca3e5-8bca-477a-81db-b58faccdd581",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nname, it will create two different parties. This is very convenient for\r\n```",
        "createdAt" : "2019-11-19T15:46:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@display name. Note that the display name does not identify a party\nuniquely. If you call ``allocateParty`` twice with the same display\nname, it will create 2 different parties. This is very convenient for\ntesting since a new party cannot see any old contracts on the ledger\nso using new parties for each test removes the need to reset the"
  },
  {
    "id" : "4f1a6111-0002-4dca-a71a-13e2875d9355",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "af2be800-30ce-457d-9dee-6377c0c8f467",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nHence, using new parties for each test removes the need to reset the ledger between tests.\r\n```",
        "createdAt" : "2019-11-19T15:47:48Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@name, it will create 2 different parties. This is very convenient for\ntesting since a new party cannot see any old contracts on the ledger\nso using new parties for each test removes the need to reset the\nledger.\n"
  }
]