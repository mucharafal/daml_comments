[
  {
    "id" : "eeb8cce5-f7e8-40a0-9ffb-3783bfdd5c2d",
    "prId" : 7448,
    "comments" : [
      {
        "id" : "bebd2554-1c70-4ff4-817a-fd8c924644a0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is that what you meant?\r\n```suggestion\r\n      important that they are part of a single transaction, split\r\n```\r\nAlso, words like \"simply\" are a double-edged sword. People who don't immediately get what you mean might feel insulted.",
        "createdAt" : "2020-09-21T12:19:00Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ecdf6e272d2721bf8ddc245c4cadbdf7c1eb3687",
    "line" : null,
    "diffHunk" : "@@ -235,15 +235,44 @@ translated to DAML script but there are a few things to keep in mind:\n #. Instead of specifying a ``scenario`` field in your ``daml.yaml``,\n    you need to specify an ``init-script`` field. The initialization\n    script is specified via ``Module:identifier`` for both fields.\n-#. DAML script only supports the commands available on the ledger API\n-   so you cannot call functions like ``fetch`` directly. This is\n-   intentional. Your initialization scripts should not be able to\n-   create transactions that a ledger client would not be able to\n-   create. If you want to call methods not exposed via the Ledger API,\n-   you can create a new template with a single choice\n-   and call that via ``createAndExercise``.\n-#. You need to replace calls to ``getParty x`` by\n-   ``allocatePartyWithHint x (PartyIdHint x)``.\n+#. In DAML script, ``submit`` and ``submitMustFail`` are limited to\n+   the functionality provided by the ledger API: A list of independent\n+   commands consisting of ``createCmd``, ``exerciseCmd``,\n+   ``createAndExerciseCmd`` and ``exerciseByKeyCmd``. There are two\n+   issues you might run into when migrating an existing scenario:\n+\n+   #. Your commands depend on each other, e.g., you use the result of\n+      a ``create`` within a following command in the same\n+      ``submit``. In this case, you have two options: If it is not\n+      important that they are part of the translation, simply split"
  },
  {
    "id" : "622c1fcc-688f-4024-9678-158e2e047bde",
    "prId" : 7448,
    "comments" : [
      {
        "id" : "8935c764-e789-4038-956a-e24068d12b52",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I've learned to spell out small numbers.\r\n```suggestion\r\n   #. You use something that is not part of the four ledger API command\r\n```",
        "createdAt" : "2020-09-21T12:21:12Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12534440-d1b0-471e-8232-9d4cd0040af7",
        "parentId" : "8935c764-e789-4038-956a-e24068d12b52",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I really dislike that pattern. I know it is common to recommend this in style guides but I find it harder to read and in the end I care less about style than I care about readability in documentation.",
        "createdAt" : "2020-09-21T12:26:08Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ecdf6e272d2721bf8ddc245c4cadbdf7c1eb3687",
    "line" : 27,
    "diffHunk" : "@@ -235,15 +235,44 @@ translated to DAML script but there are a few things to keep in mind:\n #. Instead of specifying a ``scenario`` field in your ``daml.yaml``,\n    you need to specify an ``init-script`` field. The initialization\n    script is specified via ``Module:identifier`` for both fields.\n-#. DAML script only supports the commands available on the ledger API\n-   so you cannot call functions like ``fetch`` directly. This is\n-   intentional. Your initialization scripts should not be able to\n-   create transactions that a ledger client would not be able to\n-   create. If you want to call methods not exposed via the Ledger API,\n-   you can create a new template with a single choice\n-   and call that via ``createAndExercise``.\n-#. You need to replace calls to ``getParty x`` by\n-   ``allocatePartyWithHint x (PartyIdHint x)``.\n+#. In DAML script, ``submit`` and ``submitMustFail`` are limited to\n+   the functionality provided by the ledger API: A list of independent\n+   commands consisting of ``createCmd``, ``exerciseCmd``,\n+   ``createAndExerciseCmd`` and ``exerciseByKeyCmd``. There are two\n+   issues you might run into when migrating an existing scenario:\n+\n+   #. Your commands depend on each other, e.g., you use the result of\n+      a ``create`` within a following command in the same\n+      ``submit``. In this case, you have two options: If it is not\n+      important that they are part of the translation, simply split\n+      them into multiple calls to ``submit``. If you do need them to\n+      be within the same transaction, you can move the logic to a\n+      choice and call that using ``createAndExerciseCmd``.\n+\n+   #. You use something that is not part of the 4 ledger API command"
  },
  {
    "id" : "768ecee9-c319-4093-b3c0-62150f592f2f",
    "prId" : 7448,
    "comments" : [
      {
        "id" : "f380a33a-dc1d-43ef-b7ee-6905f14fbad0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `x` has not really been introduced and occurs twice:\r\n```suggestion\r\n      can use ``allocatePartyWithHint x (PartyIdHint x)`` as a replacement for `getParty x`. Note that\r\n```",
        "createdAt" : "2020-09-21T12:22:33Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ecdf6e272d2721bf8ddc245c4cadbdf7c1eb3687",
    "line" : null,
    "diffHunk" : "@@ -235,15 +235,44 @@ translated to DAML script but there are a few things to keep in mind:\n #. Instead of specifying a ``scenario`` field in your ``daml.yaml``,\n    you need to specify an ``init-script`` field. The initialization\n    script is specified via ``Module:identifier`` for both fields.\n-#. DAML script only supports the commands available on the ledger API\n-   so you cannot call functions like ``fetch`` directly. This is\n-   intentional. Your initialization scripts should not be able to\n-   create transactions that a ledger client would not be able to\n-   create. If you want to call methods not exposed via the Ledger API,\n-   you can create a new template with a single choice\n-   and call that via ``createAndExercise``.\n-#. You need to replace calls to ``getParty x`` by\n-   ``allocatePartyWithHint x (PartyIdHint x)``.\n+#. In DAML script, ``submit`` and ``submitMustFail`` are limited to\n+   the functionality provided by the ledger API: A list of independent\n+   commands consisting of ``createCmd``, ``exerciseCmd``,\n+   ``createAndExerciseCmd`` and ``exerciseByKeyCmd``. There are two\n+   issues you might run into when migrating an existing scenario:\n+\n+   #. Your commands depend on each other, e.g., you use the result of\n+      a ``create`` within a following command in the same\n+      ``submit``. In this case, you have two options: If it is not\n+      important that they are part of the translation, simply split\n+      them into multiple calls to ``submit``. If you do need them to\n+      be within the same transaction, you can move the logic to a\n+      choice and call that using ``createAndExerciseCmd``.\n+\n+   #. You use something that is not part of the 4 ledger API command\n+      types, e.g., ``fetch``. For ``fetch`` and ``fetchByKey``, you\n+      can instead use ``queryContractId`` and ``queryContractKey``\n+      with the caveat that they do not run within the same\n+      transaction. Other types of ``Update`` statements can be moved\n+      to a choice that you call via ``createAndExerciseCmd``.\n+#. Instead of Scenarioâ€™s ``getParty``, DAML Script provides you with\n+   ``allocateParty`` and ``allocatePartyWithHint``. There are a few\n+   important differences:\n+\n+   #. Allocating a party always gives you back a new party (or\n+      fails). If you have multiple calls to ``getParty`` with the same\n+      string and expect to get back the same party, you should instead\n+      allocate the party once at the beginning and pass it along to\n+      the rest of the code.\n+\n+   #. If you want to allocate a party with a specific party id, you\n+      can use ``allocatePartyWithHint x (PartyIdHint x)``. Note that"
  },
  {
    "id" : "c4555871-6365-458c-8b52-045338c0786d",
    "prId" : 7448,
    "comments" : [
      {
        "id" : "f330f606-5974-4d03-bde4-7abe3cc0d39a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      while this is supported in DAML Studio and DAML-on-SQL, other\r\n```",
        "createdAt" : "2020-09-21T12:22:40Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8c313e7a-fe31-4c1f-9b2e-b38ee91c56af",
        "parentId" : "f330f606-5974-4d03-bde4-7abe3cc0d39a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Afaik, the product is spelled without hyphens.",
        "createdAt" : "2020-09-21T12:27:08Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1ff75f22-1178-4afd-aca4-4e6f91b0df69",
        "parentId" : "f330f606-5974-4d03-bde4-7abe3cc0d39a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Actually looking at it again, this is still true but it is called `DAML for PostgreSQL` now so Iâ€™ll change it to that.",
        "createdAt" : "2020-09-21T12:28:05Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f4edca5d-770a-449b-95f9-27afa82eaf62",
        "parentId" : "f330f606-5974-4d03-bde4-7abe3cc0d39a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thanks for double checking.",
        "createdAt" : "2020-09-21T13:23:21Z",
        "updatedAt" : "2020-09-21T13:23:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ecdf6e272d2721bf8ddc245c4cadbdf7c1eb3687",
    "line" : null,
    "diffHunk" : "@@ -235,15 +235,44 @@ translated to DAML script but there are a few things to keep in mind:\n #. Instead of specifying a ``scenario`` field in your ``daml.yaml``,\n    you need to specify an ``init-script`` field. The initialization\n    script is specified via ``Module:identifier`` for both fields.\n-#. DAML script only supports the commands available on the ledger API\n-   so you cannot call functions like ``fetch`` directly. This is\n-   intentional. Your initialization scripts should not be able to\n-   create transactions that a ledger client would not be able to\n-   create. If you want to call methods not exposed via the Ledger API,\n-   you can create a new template with a single choice\n-   and call that via ``createAndExercise``.\n-#. You need to replace calls to ``getParty x`` by\n-   ``allocatePartyWithHint x (PartyIdHint x)``.\n+#. In DAML script, ``submit`` and ``submitMustFail`` are limited to\n+   the functionality provided by the ledger API: A list of independent\n+   commands consisting of ``createCmd``, ``exerciseCmd``,\n+   ``createAndExerciseCmd`` and ``exerciseByKeyCmd``. There are two\n+   issues you might run into when migrating an existing scenario:\n+\n+   #. Your commands depend on each other, e.g., you use the result of\n+      a ``create`` within a following command in the same\n+      ``submit``. In this case, you have two options: If it is not\n+      important that they are part of the translation, simply split\n+      them into multiple calls to ``submit``. If you do need them to\n+      be within the same transaction, you can move the logic to a\n+      choice and call that using ``createAndExerciseCmd``.\n+\n+   #. You use something that is not part of the 4 ledger API command\n+      types, e.g., ``fetch``. For ``fetch`` and ``fetchByKey``, you\n+      can instead use ``queryContractId`` and ``queryContractKey``\n+      with the caveat that they do not run within the same\n+      transaction. Other types of ``Update`` statements can be moved\n+      to a choice that you call via ``createAndExerciseCmd``.\n+#. Instead of Scenarioâ€™s ``getParty``, DAML Script provides you with\n+   ``allocateParty`` and ``allocatePartyWithHint``. There are a few\n+   important differences:\n+\n+   #. Allocating a party always gives you back a new party (or\n+      fails). If you have multiple calls to ``getParty`` with the same\n+      string and expect to get back the same party, you should instead\n+      allocate the party once at the beginning and pass it along to\n+      the rest of the code.\n+\n+   #. If you want to allocate a party with a specific party id, you\n+      can use ``allocatePartyWithHint x (PartyIdHint x)``. Note that\n+      while this is supported in DAML Studio and DAML on SQL, other"
  },
  {
    "id" : "a8bd8636-b52e-41f6-a76e-b60b58a00295",
    "prId" : 7448,
    "comments" : [
      {
        "id" : "d710bba9-4eff-454b-9f83-3dad159049e4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      interpret it another way. Try to not rely on any specific\r\n```",
        "createdAt" : "2020-09-21T12:23:05Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ecdf6e272d2721bf8ddc245c4cadbdf7c1eb3687",
    "line" : null,
    "diffHunk" : "@@ -235,15 +235,44 @@ translated to DAML script but there are a few things to keep in mind:\n #. Instead of specifying a ``scenario`` field in your ``daml.yaml``,\n    you need to specify an ``init-script`` field. The initialization\n    script is specified via ``Module:identifier`` for both fields.\n-#. DAML script only supports the commands available on the ledger API\n-   so you cannot call functions like ``fetch`` directly. This is\n-   intentional. Your initialization scripts should not be able to\n-   create transactions that a ledger client would not be able to\n-   create. If you want to call methods not exposed via the Ledger API,\n-   you can create a new template with a single choice\n-   and call that via ``createAndExercise``.\n-#. You need to replace calls to ``getParty x`` by\n-   ``allocatePartyWithHint x (PartyIdHint x)``.\n+#. In DAML script, ``submit`` and ``submitMustFail`` are limited to\n+   the functionality provided by the ledger API: A list of independent\n+   commands consisting of ``createCmd``, ``exerciseCmd``,\n+   ``createAndExerciseCmd`` and ``exerciseByKeyCmd``. There are two\n+   issues you might run into when migrating an existing scenario:\n+\n+   #. Your commands depend on each other, e.g., you use the result of\n+      a ``create`` within a following command in the same\n+      ``submit``. In this case, you have two options: If it is not\n+      important that they are part of the translation, simply split\n+      them into multiple calls to ``submit``. If you do need them to\n+      be within the same transaction, you can move the logic to a\n+      choice and call that using ``createAndExerciseCmd``.\n+\n+   #. You use something that is not part of the 4 ledger API command\n+      types, e.g., ``fetch``. For ``fetch`` and ``fetchByKey``, you\n+      can instead use ``queryContractId`` and ``queryContractKey``\n+      with the caveat that they do not run within the same\n+      transaction. Other types of ``Update`` statements can be moved\n+      to a choice that you call via ``createAndExerciseCmd``.\n+#. Instead of Scenarioâ€™s ``getParty``, DAML Script provides you with\n+   ``allocateParty`` and ``allocatePartyWithHint``. There are a few\n+   important differences:\n+\n+   #. Allocating a party always gives you back a new party (or\n+      fails). If you have multiple calls to ``getParty`` with the same\n+      string and expect to get back the same party, you should instead\n+      allocate the party once at the beginning and pass it along to\n+      the rest of the code.\n+\n+   #. If you want to allocate a party with a specific party id, you\n+      can use ``allocatePartyWithHint x (PartyIdHint x)``. Note that\n+      while this is supported in DAML Studio and DAML on SQL, other\n+      ledgers can behave differently and ignore the party id hint or\n+      interpret it another way. Try not to rely on any specific"
  },
  {
    "id" : "1f75694f-a7b6-4167-94e3-7dfd4f56fb10",
    "prId" : 6477,
    "comments" : [
      {
        "id" : "8d2788a6-34c3-4529-8395-78b676c539e5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What I was calling API here is things like `submit`, i.e., the scenario specific API provided by `daml-stdlib` not the gRPC API of the scenario service. But I do agree that your formulation is better :+1:",
        "createdAt" : "2020-06-24T10:58:51Z",
        "updatedAt" : "2020-06-24T10:58:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc1657c00b0a093c7ac0c1e2c66c44703c7daa5",
    "line" : 5,
    "diffHunk" : "@@ -9,7 +9,7 @@ DAML Script\n \n    daml-script-docs\n \n-DAML scenarios provide a simple API for testing DAML models\n+DAML scenarios provide a simple way for testing DAML models"
  },
  {
    "id" : "0cc62072-40b9-4771-99b8-bf9a9bfcfba4",
    "prId" : 5484,
    "comments" : [
      {
        "id" : "f13c178e-cd6c-4fec-85b6-c36b9c01ba43",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n   a JWT token.\r\n```",
        "createdAt" : "2020-04-08T08:29:52Z",
        "updatedAt" : "2020-04-08T08:55:18Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "85f8a83301f4ba5440893efbeedbf3bf30086565",
    "line" : null,
    "diffHunk" : "@@ -278,9 +278,8 @@ To run DAML script against the JSON API you have to pass the ``--json-api`` para\n    ledger API command, e.g., one ``createCmd`` or one ``exerciseCmd``.\n #. The JSON API requires an authentication token even when it is run\n    against an unauthenticated ledger. The authentication token must be\n-   a JWT ``Bearer`` token so the ``--access-token-file`` passed to\n-   ``daml script`` should only contain the actual JWT without the\n-   ``Bearer`` prefix.\n+   a JWT token so the ``--access-token-file`` passed to\n+   ``daml script`` should contain the actual JWT."
  },
  {
    "id" : "87cfa3e5-1f54-45fa-9ba4-26d9a3fda663",
    "prId" : 4834,
    "comments" : [
      {
        "id" : "a39bed23-ae50-40d9-be19-e6803a7a35ff",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Should there be a separate section introducing `init-script` as a concept before going into migration, or is this planned for later when DAML script is stabilized?",
        "createdAt" : "2020-03-05T13:39:34Z",
        "updatedAt" : "2020-03-05T14:47:05Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "749f2e55-7994-497c-b940-0ed45900f824",
        "parentId" : "a39bed23-ae50-40d9-be19-e6803a7a35ff",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good point! Iâ€™ve added a section on that. PTAL",
        "createdAt" : "2020-03-05T14:00:50Z",
        "updatedAt" : "2020-03-05T14:47:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6c5ee349-5a53-444a-b8a1-689e76098b27",
        "parentId" : "a39bed23-ae50-40d9-be19-e6803a7a35ff",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Thank you, that looks great!",
        "createdAt" : "2020-03-05T16:10:13Z",
        "updatedAt" : "2020-03-05T16:10:13Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 27,
    "diffHunk" : "@@ -199,6 +199,30 @@ We can then initialize our ledger passing in the json file via ``--input-file``.\n \n If you open Navigator, you can now see the contracts that have been created.\n \n+Migrating from Scenarios to DAML Script for Ledger Initialization\n+=================================================================\n+\n+Existing scenarios that you used for ledger initialization can be\n+translated to DAML script but there are a few things to keep in mind:"
  },
  {
    "id" : "b16a01c3-a0a3-40e6-8444-af282f6f905c",
    "prId" : 4834,
    "comments" : [
      {
        "id" : "a61f3274-323a-4267-ac91-92b56b454277",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ncreate a party with a specific party identifier during development, you can\r\n```\r\nSame below.",
        "createdAt" : "2020-03-06T10:08:48Z",
        "updatedAt" : "2020-03-06T10:11:33Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 11,
    "diffHunk" : "@@ -196,6 +196,49 @@ We can then initialize our ledger passing in the json file via ``--input-file``.\n \n If you open Navigator, you can now see the contracts that have been created.\n \n+Using DAML Script for Ledger Initialization\n+===========================================\n+\n+You can use DAML script to initialize a ledger on startup. To do so,\n+specify an ``init-script: ScriptExample:initializeFixed`` field in\n+your ``daml.yaml``. This will automatically be picked up by ``daml\n+start`` and used to initialize sandbox. Since it is often useful to\n+create a party with a specific party id during development, you can"
  },
  {
    "id" : "81f070a3-5b30-47d5-97ff-e330f7b16ee0",
    "prId" : 4834,
    "comments" : [
      {
        "id" : "abb75907-c426-4907-9043-0efe86297ee8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What do you mean by \"create a choice\"? I suppose you mean something like creating a contract with a single choice?",
        "createdAt" : "2020-03-06T10:11:18Z",
        "updatedAt" : "2020-03-06T10:11:33Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "69f327c5-4296-4425-8af7-cbf9b8d04a27",
        "parentId" : "abb75907-c426-4907-9043-0efe86297ee8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yep, tried to make it a bit clearer in https://github.com/digital-asset/daml/pull/4870",
        "createdAt" : "2020-03-06T10:36:16Z",
        "updatedAt" : "2020-03-06T10:36:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 42,
    "diffHunk" : "@@ -196,6 +196,49 @@ We can then initialize our ledger passing in the json file via ``--input-file``.\n \n If you open Navigator, you can now see the contracts that have been created.\n \n+Using DAML Script for Ledger Initialization\n+===========================================\n+\n+You can use DAML script to initialize a ledger on startup. To do so,\n+specify an ``init-script: ScriptExample:initializeFixed`` field in\n+your ``daml.yaml``. This will automatically be picked up by ``daml\n+start`` and used to initialize sandbox. Since it is often useful to\n+create a party with a specific party id during development, you can\n+use the ``allocatePartyWithHint`` function which accepts not only the\n+display name but also a hint for the party id. On Sandbox, the hint\n+will be used directly as the party id of the newly allocated\n+party. This allows us to implement ``initializeFixed`` as a small\n+wrapper around the ``initialize`` function we defined above:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_FIXED_BEGIN\n+   :end-before: -- INITIALIZE_FIXED_END\n+\n+Migrating from Scenarios\n+------------------------\n+\n+Existing scenarios that you used for ledger initialization can be\n+translated to DAML script but there are a few things to keep in mind:\n+\n+#. You need to add ``daml-script`` to the list of dependencies in your\n+   ``daml.yaml``.\n+#. You need to import the ``Daml.Script`` module.\n+#. Calls to ``create``, ``exercise``, ``exerciseByKey`` and\n+   ``createAndExercise`` need to be suffixed with ``Cmd``, e.g.,\n+   ``createCmd``.\n+#. Instead of specifying a ``scenario`` field in your ``daml.yaml``,\n+   you need to specify an ``init-script`` field. The initialization\n+   script is specified via ``Module:identifier`` for both fields.\n+#. DAML script only supports the commands available on the ledger API\n+   so you cannot call functions like ``fetch`` directly. This is\n+   intentional. Your initialization scripts should not be able to\n+   create transactions that a ledger client would not be able to\n+   create. If you need, you can create a choice and call that via"
  },
  {
    "id" : "3063b717-10c9-4c71-ae22-587f4b64dd24",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "ed38cf09-ebec-48ff-b3b4-7fe2957553ff",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nDAML Script addresses this problem by providing you with an API with\r\n```\r\nI think we should do this consistently.",
        "createdAt" : "2019-11-19T15:23:13Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 19,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with"
  },
  {
    "id" : "0d4f75da-d1dd-4344-b9a0-eceb00e3a78c",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "0678f4ab-c0f3-4ab7-88f7-178039ad3f9e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nand getting quick feedback in DAML Studio. However, scenarios are run\r\n```",
        "createdAt" : "2019-11-19T15:23:31Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run"
  },
  {
    "id" : "f94c2ee5-a9bd-4c6f-b9db-a87ddb25117d",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "6806b1da-5edb-4c2c-8275-e8b5102dfeb1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nlogic and your UI. DAML Script can also be used for ledger initialization on all ledger implementations.\r\n```\r\nIt took me a while to understand the sentence. I don't think it's really necessary to mention here that scenarios can be used to initialize the sandbox. IMO, it is more likely to cause confusion rather than really help the documentation of DAML Script.",
        "createdAt" : "2019-11-19T15:29:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 23,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios"
  },
  {
    "id" : "d4febb06-54f2-4b27-a94d-1ec427680a30",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "2b71c34d-6524-4aab-9a7c-083f77a03f62",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nOur example for this tutorial consists of two templates.\r\n```",
        "createdAt" : "2019-11-19T15:29:18Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 29,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates."
  },
  {
    "id" : "1aa7ce34-2157-416b-8e46-934beb0e46b8",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "b652ebe0-201f-4702-a2b8-60ca9c028e30",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nsingle ``Accept`` choice to the ``owner``, which will create the corresponding ``Coin`` when exercised.\r\n```",
        "createdAt" : "2019-11-19T15:32:14Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 49,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will"
  },
  {
    "id" : "3f0e14fe-6283-4b1a-af89-f8db2e8b5ef1",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "13f711ea-1223-4ac3-8cd7-225f7b78b1cc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nthat operate on these templates. In order to use DAML Script, you need to add the ``daml-script``\r\n```",
        "createdAt" : "2019-11-19T15:34:08Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 53,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``"
  },
  {
    "id" : "f5a2f02b-2ed9-42c4-8d46-3baf63f91a9e",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "1e799cbf-5087-402d-85e0-c3772f1c2aad",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nIn addition to that, you also need to import the ``Daml.Script`` module.\r\n```",
        "createdAt" : "2019-11-19T15:34:37Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 60,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module"
  },
  {
    "id" : "de2e74b3-479a-45a0-9548-8a2c9d519d0b",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "bd4514f5-4ee0-429c-af15-b1475b8c02f0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nSince DAML script provides ``submit`` and ``submitMustFail``\r\n```",
        "createdAt" : "2019-11-19T15:35:02Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 61,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``"
  },
  {
    "id" : "6155f36e-97b2-4cb9-aa19-a2d4d8625bd9",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "8244732d-8b09-4fbc-b5cb-b76f8858ac3e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nSince parties cannot be arbitrary strings on an actual ledger, we\r\n```",
        "createdAt" : "2019-11-19T15:36:56Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 71,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we"
  },
  {
    "id" : "6e1b7ddb-7f8a-43e5-9da3-53d1f7bd8f08",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "f1828429-b141-46a9-bdda-c92bddc6493e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nLet us now write a function to initialize the ledger with three\r\n```",
        "createdAt" : "2019-11-19T15:37:42Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 80,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3"
  },
  {
    "id" : "5504da28-cda6-4615-be87-ee51bb44acd5",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "1ab29b7f-b65b-4272-bfff-6d2c1dd94a52",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n``CoinProposal``s and accept two of them. This function takes the\r\n```",
        "createdAt" : "2019-11-19T15:37:54Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 81,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the"
  },
  {
    "id" : "ec765534-cf9c-4cdf-bd5c-a640f884eee8",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "6f840306-de9b-4c8b-82a4-e433484c60b0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n``LedgerParties`` as an argument and returns a ``Script\r\n```",
        "createdAt" : "2019-11-19T15:38:31Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 82,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script"
  },
  {
    "id" : "89ed865e-70e7-40e7-a08c-b50490087339",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "d733485c-6732-4dc4-bb8f-9359c71a5c5c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n()``, which is DAML Scriptâ€™s equivalent of ``Scenario ()``.\r\n```",
        "createdAt" : "2019-11-19T15:38:44Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 83,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``."
  },
  {
    "id" : "f64f3192-34c2-4d16-a0ef-9af8525e5113",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "d8af9cc7-aa06-4b17-9177-f264c14c1f42",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nmust be of type ``Commands a``. In our case that becomes ``Commands (ContractId\r\n```",
        "createdAt" : "2019-11-19T15:40:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 94,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId"
  },
  {
    "id" : "e7a27d32-ba2b-4fac-94e8-d8d7a3c95684",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "1c6ba227-be9a-45bb-90d8-e6d6c4dbd6c5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ncorresponding to the three proposals that we create. ``Commands`` is\r\n```",
        "createdAt" : "2019-11-19T15:40:25Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 96,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is"
  },
  {
    "id" : "e14d22ee-98ca-4eac-b263-1376c11d6750",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "54ed03d5-5cee-4c34-a830-f6772c86da30",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nrespect this restriction. In ``Commands`` we use ``createCmd`` instead of\r\n```",
        "createdAt" : "2019-11-19T15:41:13Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 102,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is\n+similar to ``Update`` which is used in the ``submit`` function in\n+scenarios. However, ``Commands`` requires that the individual commands\n+do not depend on each other. This matches the restriction on the\n+Ledger API where a transaction consists of a list of commands.  Using\n+``ApplicativeDo`` we can still use ``do``-notation as long as we\n+respect this. In ``Commands`` we use ``createCmd`` instead of"
  },
  {
    "id" : "abcaf08c-ef6b-42bf-bf79-ba93d0a0f17d",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "3538c09e-e402-4735-a75d-8a2c11568b72",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nAfter creating the ``CoinProposal``s, we want ``Alice`` and\r\n```",
        "createdAt" : "2019-11-19T15:41:48Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 110,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is\n+similar to ``Update`` which is used in the ``submit`` function in\n+scenarios. However, ``Commands`` requires that the individual commands\n+do not depend on each other. This matches the restriction on the\n+Ledger API where a transaction consists of a list of commands.  Using\n+``ApplicativeDo`` we can still use ``do``-notation as long as we\n+respect this. In ``Commands`` we use ``createCmd`` instead of\n+``create`` and ``exerciseCmd`` instead of ``exercise``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PROPOSAL_BEGIN\n+   :end-before: -- INITIALIZE_PROPOSAL_END\n+\n+Now that we have created the ``CoinProposal``s, we want ``Alice`` and"
  },
  {
    "id" : "55db4079-bc91-4845-b2dc-f075cca50fbb",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "547bbb36-a631-46f6-9abd-8f4611ee2ebd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nUp to here, we have defined a way to initialize the ledger. Next, we will write a\r\n```",
        "createdAt" : "2019-11-19T15:44:33Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 129,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is\n+similar to ``Update`` which is used in the ``submit`` function in\n+scenarios. However, ``Commands`` requires that the individual commands\n+do not depend on each other. This matches the restriction on the\n+Ledger API where a transaction consists of a list of commands.  Using\n+``ApplicativeDo`` we can still use ``do``-notation as long as we\n+respect this. In ``Commands`` we use ``createCmd`` instead of\n+``create`` and ``exerciseCmd`` instead of ``exercise``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PROPOSAL_BEGIN\n+   :end-before: -- INITIALIZE_PROPOSAL_END\n+\n+Now that we have created the ``CoinProposal``s, we want ``Alice`` and\n+``Bob`` to accept the proposal while the ``Bank`` will ignore the\n+proposal that it has created for itself. To do so we use separate\n+``submit`` statements for ``Alice`` and ``Bob`` and call\n+``exerciseCmd``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_ACCEPT_BEGIN\n+   :end-before: -- INITIALIZE_ACCEPT_END\n+\n+Finally, we call ``pure ()`` on the last line of our script to match\n+the type ``Script ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PURE_BEGIN\n+   :end-before: -- INITIALIZE_PURE_END\n+\n+We have now defined a way to initialize the ledger so we can write a"
  },
  {
    "id" : "e08544b7-993d-46f0-857b-09039165128c",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "bffb7415-22c7-4ce0-97a2-685fe1d07102",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ntest that checks that the contracts we expect to exist do actually exist.\r\n```",
        "createdAt" : "2019-11-19T15:45:12Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 130,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is\n+similar to ``Update`` which is used in the ``submit`` function in\n+scenarios. However, ``Commands`` requires that the individual commands\n+do not depend on each other. This matches the restriction on the\n+Ledger API where a transaction consists of a list of commands.  Using\n+``ApplicativeDo`` we can still use ``do``-notation as long as we\n+respect this. In ``Commands`` we use ``createCmd`` instead of\n+``create`` and ``exerciseCmd`` instead of ``exercise``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PROPOSAL_BEGIN\n+   :end-before: -- INITIALIZE_PROPOSAL_END\n+\n+Now that we have created the ``CoinProposal``s, we want ``Alice`` and\n+``Bob`` to accept the proposal while the ``Bank`` will ignore the\n+proposal that it has created for itself. To do so we use separate\n+``submit`` statements for ``Alice`` and ``Bob`` and call\n+``exerciseCmd``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_ACCEPT_BEGIN\n+   :end-before: -- INITIALIZE_ACCEPT_END\n+\n+Finally, we call ``pure ()`` on the last line of our script to match\n+the type ``Script ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PURE_BEGIN\n+   :end-before: -- INITIALIZE_PURE_END\n+\n+We have now defined a way to initialize the ledger so we can write a\n+test that checks that the contracts that we expect exist afterwards."
  },
  {
    "id" : "c635cb8b-4e31-49ea-8c7d-95ab97663f1a",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "d6d85361-abf3-4f53-99a8-cd5f32921649",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nTo this end, we first define the signature of our test. We will create the parties\r\n```",
        "createdAt" : "2019-11-19T15:45:30Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 132,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is\n+similar to ``Update`` which is used in the ``submit`` function in\n+scenarios. However, ``Commands`` requires that the individual commands\n+do not depend on each other. This matches the restriction on the\n+Ledger API where a transaction consists of a list of commands.  Using\n+``ApplicativeDo`` we can still use ``do``-notation as long as we\n+respect this. In ``Commands`` we use ``createCmd`` instead of\n+``create`` and ``exerciseCmd`` instead of ``exercise``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PROPOSAL_BEGIN\n+   :end-before: -- INITIALIZE_PROPOSAL_END\n+\n+Now that we have created the ``CoinProposal``s, we want ``Alice`` and\n+``Bob`` to accept the proposal while the ``Bank`` will ignore the\n+proposal that it has created for itself. To do so we use separate\n+``submit`` statements for ``Alice`` and ``Bob`` and call\n+``exerciseCmd``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_ACCEPT_BEGIN\n+   :end-before: -- INITIALIZE_ACCEPT_END\n+\n+Finally, we call ``pure ()`` on the last line of our script to match\n+the type ``Script ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PURE_BEGIN\n+   :end-before: -- INITIALIZE_PURE_END\n+\n+We have now defined a way to initialize the ledger so we can write a\n+test that checks that the contracts that we expect exist afterwards.\n+\n+First, we define the signature of our test. We will create the parties"
  },
  {
    "id" : "6acd484e-5251-49a9-abfa-48e2e52f5fd0",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "8cb177a9-9cb8-4dea-a399-81b0544224ce",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nname, it will create two different parties. This is very convenient for\r\n```",
        "createdAt" : "2019-11-19T15:46:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 144,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is\n+similar to ``Update`` which is used in the ``submit`` function in\n+scenarios. However, ``Commands`` requires that the individual commands\n+do not depend on each other. This matches the restriction on the\n+Ledger API where a transaction consists of a list of commands.  Using\n+``ApplicativeDo`` we can still use ``do``-notation as long as we\n+respect this. In ``Commands`` we use ``createCmd`` instead of\n+``create`` and ``exerciseCmd`` instead of ``exercise``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PROPOSAL_BEGIN\n+   :end-before: -- INITIALIZE_PROPOSAL_END\n+\n+Now that we have created the ``CoinProposal``s, we want ``Alice`` and\n+``Bob`` to accept the proposal while the ``Bank`` will ignore the\n+proposal that it has created for itself. To do so we use separate\n+``submit`` statements for ``Alice`` and ``Bob`` and call\n+``exerciseCmd``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_ACCEPT_BEGIN\n+   :end-before: -- INITIALIZE_ACCEPT_END\n+\n+Finally, we call ``pure ()`` on the last line of our script to match\n+the type ``Script ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PURE_BEGIN\n+   :end-before: -- INITIALIZE_PURE_END\n+\n+We have now defined a way to initialize the ledger so we can write a\n+test that checks that the contracts that we expect exist afterwards.\n+\n+First, we define the signature of our test. We will create the parties\n+used here in the test, so it does not take any arguments.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- TEST_SIGNATURE_BEGIN\n+   :end-before: -- TEST_SIGNATURE_END\n+\n+Now, we create the parties using the ``allocateParty`` function. This\n+uses the party management service to create new parties with the given\n+display name. Note that the display name does not identify a party\n+uniquely. If you call ``allocateParty`` twice with the same display\n+name, it will create 2 different parties. This is very convenient for"
  },
  {
    "id" : "60086173-adc5-41b8-9e19-a78f06398227",
    "prId" : 3527,
    "comments" : [
      {
        "id" : "a91a7f14-02ed-4ad1-9d5a-fe3a4bbe5179",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nHence, using new parties for each test removes the need to reset the ledger between tests.\r\n```",
        "createdAt" : "2019-11-19T15:47:48Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 146,
    "diffHunk" : "@@ -0,0 +1,191 @@\n+.. Copyright (c) 2019 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Script\n+###########\n+\n+**WARNING:** DAML Script is an experimental feature that is actively\n+being designed and is *subject to breaking changes*.\n+We welcome feedback about DAML script on\n+`our issue tracker <https://github.com/digital-asset/daml/issues/new?milestone=DAML+Script>`_\n+or `on Slack <https://hub.daml.com/slack/>`_.\n+\n+DAML scenarios provide a simple API for experimenting with DAML models\n+and getting quick feedback in DAML studio. However, scenarios are run\n+in a special process and do not interact with an actual ledger. This\n+means that you cannot use scenarios to test other ledger clients,\n+e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n+\n+DAML script addresses this problem by providing you with an API with\n+the simplicity of DAML scenarios and all the benefits such as being\n+able to reuse your DAML types and logic while running against an\n+actual ledger. This means that you can use it to test automation\n+logic, your UI but also for ledger initialization where scenarios\n+cannot be used (with the exception of :doc:`/tools/sandbox`).\n+\n+Usage\n+=====\n+\n+Our example for this tutorial consists of 2 templates.\n+\n+First, we have a template called ``Coin``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_TEMPLATE_BEGIN\n+   :end-before: -- COIN_TEMPLATE_END\n+\n+This template represents a coin issued to ``owner`` by ``issuer``.\n+``Coin`` has both the ``owner`` and the ``issuer`` as signatories.\n+\n+Second, we have a template called ``CoinProposal``:\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- COIN_PROPOSAL_TEMPLATE_BEGIN\n+   :end-before: -- COIN_PROPOSAL_TEMPLATE_END\n+\n+``CoinProposal`` is only signed by the ``issuer`` and it provides a\n+single ``Accept`` choice which, when exercised by the controller will\n+create the corresponding ``Coin``.\n+\n+Having defined the templates, we can now move on to write DAML scripts\n+that operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\n+library to the ``dependencies`` field in ``daml.yaml``.\n+\n+.. literalinclude:: ./template-root/daml.yaml.template\n+   :start-after: # script-dependencies-begin\n+   :end-before: # script-dependencies-end\n+\n+In addition to that you also need to import the ``Daml.Script`` module\n+and since DAML script provides ``submit`` and ``submitMustFail``\n+functions that collide with the ones used in scenarios, we need to\n+hide those. We also enable the ``ApplicativeDo`` extension. We will\n+see below why this is useful.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- DAML_SCRIPT_HEADER_BEGIN\n+   :end-before: -- DAML_SCRIPT_HEADER_END\n+\n+Since on an actual ledger parties cannot be arbitrary strings, we\n+define a record containing all the parties that we will use in our\n+script so that we can easily swap them out.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- LEDGER_PARTIES_BEGIN\n+   :end-before: -- LEDGER_PARTIES_END\n+\n+Let us now write a function to initialize the ledger with 3\n+``CoinProposal``s and accept 2 of them. This function takes the\n+``LedgerParties`` as an argument and return something of type ``Script\n+()`` which is DAML scriptâ€™s equivalent of ``Scenario ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_SIGNATURE_BEGIN\n+   :end-before: -- INITIALIZE_SIGNATURE_END\n+\n+First we create the proposals. To do so, we use the ``submit``\n+function to submit a transaction. The first argument is the party\n+submitting the transaction. In our case, we want all proposals to be\n+created by the bank so we use ``parties.bank``. The second argument\n+must be of type ``Commands a`` so in our case ``Commands (ContractId\n+CoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\n+corresponding to the 3 proposals that we create. ``Commands`` is\n+similar to ``Update`` which is used in the ``submit`` function in\n+scenarios. However, ``Commands`` requires that the individual commands\n+do not depend on each other. This matches the restriction on the\n+Ledger API where a transaction consists of a list of commands.  Using\n+``ApplicativeDo`` we can still use ``do``-notation as long as we\n+respect this. In ``Commands`` we use ``createCmd`` instead of\n+``create`` and ``exerciseCmd`` instead of ``exercise``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PROPOSAL_BEGIN\n+   :end-before: -- INITIALIZE_PROPOSAL_END\n+\n+Now that we have created the ``CoinProposal``s, we want ``Alice`` and\n+``Bob`` to accept the proposal while the ``Bank`` will ignore the\n+proposal that it has created for itself. To do so we use separate\n+``submit`` statements for ``Alice`` and ``Bob`` and call\n+``exerciseCmd``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_ACCEPT_BEGIN\n+   :end-before: -- INITIALIZE_ACCEPT_END\n+\n+Finally, we call ``pure ()`` on the last line of our script to match\n+the type ``Script ()``.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- INITIALIZE_PURE_BEGIN\n+   :end-before: -- INITIALIZE_PURE_END\n+\n+We have now defined a way to initialize the ledger so we can write a\n+test that checks that the contracts that we expect exist afterwards.\n+\n+First, we define the signature of our test. We will create the parties\n+used here in the test, so it does not take any arguments.\n+\n+.. literalinclude:: ./template-root/src/ScriptExample.daml\n+   :language: daml\n+   :start-after: -- TEST_SIGNATURE_BEGIN\n+   :end-before: -- TEST_SIGNATURE_END\n+\n+Now, we create the parties using the ``allocateParty`` function. This\n+uses the party management service to create new parties with the given\n+display name. Note that the display name does not identify a party\n+uniquely. If you call ``allocateParty`` twice with the same display\n+name, it will create 2 different parties. This is very convenient for\n+testing since a new party cannot see any old contracts on the ledger\n+so using new parties for each test removes the need to reset the"
  }
]