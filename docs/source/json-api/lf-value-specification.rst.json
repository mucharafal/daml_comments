[
  {
    "id" : "3a5f288f-97cf-4775-ae97-5448ccc93bb9",
    "prId" : 5223,
    "comments" : [
      {
        "id" : "4dc7e888-045b-428f-8ef1-5fafe5c9c4f2",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-03-27T08:00:19Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4c6c7c118876a03f4fb995d33280f39a4f00a91b",
    "line" : 10,
    "diffHunk" : "@@ -291,15 +291,25 @@ Lists are represented as\n \n     [v₁, ..., vₙ]\n \n-Map\n-***\n+TextMap\n+*******\n \n-Maps are represented as objects:\n+TextMaps are represented as objects:"
  },
  {
    "id" : "d29bf9ba-31b8-4fad-b6d0-d78c3f3530e1",
    "prId" : 5223,
    "comments" : [
      {
        "id" : "a4fb180e-9092-4460-bf04-f3b567e685c3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The current approach on the ledger API is to accept repeat key, the last key overwrite the previous one. \r\n(I should have added that to the ledger API doc) \r\nSo there is no requirement that `ValueGenMap` coming from the input does not require the value to be ordered. \r\nThe 'dropping' of duplicate key will be done by the `ValueTranslator#translateValue` method. \r\n\r\nI do not think we this behaviour for the http service.  \r\n\r\nThat is to say: \r\nInput maps are just list of tuples. \r\nOutput maps are list list of tuples with the extra guarantee that field are ordered without  duplicate keys. \r\n\r\n\r\n\r\n",
        "createdAt" : "2020-03-30T11:56:07Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ce6bebe2-ac6f-4b9d-85d7-2081f6a8c5db",
        "parentId" : "a4fb180e-9092-4460-bf04-f3b567e685c3",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@gerolf-da @hurryabit What do you think ? ",
        "createdAt" : "2020-03-30T12:00:53Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e80992eb-7e00-4274-a7e3-1c859367ea27",
        "parentId" : "a4fb180e-9092-4460-bf04-f3b567e685c3",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@hurryabit said we should fail on duplicate keys in #5031 discussion; that is why this is planned.",
        "createdAt" : "2020-03-30T14:40:59Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a559b81-bbab-4083-b744-97666a03aedb",
        "parentId" : "a4fb180e-9092-4460-bf04-f3b567e685c3",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Being lenient on the input is pretty much the question of whether you want to notify the user of a possible data problem (duplicate keys) over convenience to not have to care about it.\r\nI think we can start out being more strict, and then later loosen the restriction.",
        "createdAt" : "2020-03-30T14:51:34Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4c6c7c118876a03f4fb995d33280f39a4f00a91b",
    "line" : 23,
    "diffHunk" : "@@ -291,15 +291,25 @@ Lists are represented as\n \n     [v₁, ..., vₙ]\n \n-Map\n-***\n+TextMap\n+*******\n \n-Maps are represented as objects:\n+TextMaps are represented as objects:\n \n ::\n \n     { k₁: v₁, ..., kₙ: vₙ }\n \n+GenMap\n+******\n+\n+GenMaps are represented as lists of pairs::\n+\n+    [ [k₁, v₁], [kₙ, vₙ] ]\n+\n+Order does not matter.  However, any duplicate keys will cause the map"
  },
  {
    "id" : "cad128b2-80d6-41c9-824c-37b7fa7f701a",
    "prId" : 3882,
    "comments" : [
      {
        "id" : "370d68f3-777a-43ad-b1a9-bc40160147f4",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Maybe using `switch`/`case`:\r\n\r\n```suggestion\r\n.. _a type refinement example: https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9nKBeAsAKCpqBvKwCGA5gFxQBEAQvgE5kA0UAbvgDYCuEpuAZgIykA7NgFsARhGoNuAJlKiELCPgFQAvmvSYAPjjxFSlfAC96TVhy5q1AbnTpubAQGNgASzgrgEAM7AAFIyk8HAAlDiaUN4A7q7ATgAWUAEAdASEYdgRmE743tCGtMRZWE4e3nCKySxwhCnM7BDJfAyMyfUcTdIhthhYmNQQwGzUAj19OXnkVCZFveNlFY3Vta3tEN3F-YPDo8UAJhDc+GwswLN92WXAUAD6ghCMEshMYxpoqkA\r\n```",
        "createdAt" : "2019-12-20T16:55:45Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64b49e6e-d5e3-4fad-8526-96fb8e437554",
        "parentId" : "370d68f3-777a-43ad-b1a9-bc40160147f4",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "There's no need for the `default` branch. TypeScripts pattern match exhaustiveness checker will yell at you even if you omit it.",
        "createdAt" : "2019-12-20T17:14:52Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "91122e3e-563b-4082-b184-73bbd699799b",
        "parentId" : "370d68f3-777a-43ad-b1a9-bc40160147f4",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@hurryabit I don't observe such an error or warning [for this example](https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9nKBeAsAKCpqBvKwCGA5gFxQBEAQvgE5kA0UAbvgDYCuEpuAZgIykA7NgFsARhGoNuAJlKiELCPgFQAvmvSYAPjjxFSlfAC96TVhy5q1AbnTpubAQGNgASzgrgEAM7AAFIyk8HAAlDiaUN4A7q7ATgAWUAEAdASEYdgRmE743tCGtMRZWE4e3nCKySxwhCnM7BDJfAyMyfUcTdIhthhYmNQQwGzUAj19APQAVDl55FQmRb19pQLlldW1re0Q3cX9g8Ojk+MRquiqQA). Do you have to pass a special typechecker flag?",
        "createdAt" : "2019-12-20T17:17:37Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "56345bc9-4454-4566-9e51-9913cd894d87",
        "parentId" : "370d68f3-777a-43ad-b1a9-bc40160147f4",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Interesting. The exhaustiveness checker does not fire for functions \"returning\" `void`. If you return a proper value, say `boolean`, you'll get an error. See [this example](https://www.typescriptlang.org/play/?ssl=9&ssc=1&pln=11&pc=1#code/C4TwDgpgBAYg9nKBeAsAKCpqBvKwCGA5gFxQBEAQvgE5kA0UAbvgDYCuEpuAZgIykA7NgFsARhGoNuAJlKiELCPgFQAvmvSYAPjjxFSlfAC96TVhy5q1AbnTpubAQGNgASzgrgEAM7AAFIyk8HAAlDiaUN4A7q7ATgAWUAEAdASEYdgRmE743tCGtMRZWNQQwGzUKozJzOwQyTK2GFgA9C1QOXnkVCZFzZhtJWUVKtyseU2YquiqQA).",
        "createdAt" : "2019-12-20T18:03:17Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a120c3f0-7eda-40bb-9f0d-ce5f106fc714",
        "parentId" : "370d68f3-777a-43ad-b1a9-bc40160147f4",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's keep the `default` branch then.",
        "createdAt" : "2019-12-20T18:07:45Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "915034e8-463e-4a5d-ab44-0abb0dd859b6",
        "parentId" : "370d68f3-777a-43ad-b1a9-bc40160147f4",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It seems the `switch` body itself must also be wholly responsible for the return value, [contra this example](https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9nKBeAsAKCpqBvKwCGA5gFxQBEAQvgE5kA0UAbvgDYCuEpuAZgIykA7NgFsARhGoNuAJlKiELCPgFQAvmvSYAPjjxFSlfAC96TVhy5q1AbnTpubAQGNgASzgrgEAM7AAFIyk8HAAlDiaUN4A7q7ATgAWUAEAdASEYdgRmE743tCGtMRZWNQQwGzUKozJzOwQyTK2GFgA9C1QOXnkVCZFzZhtJWUVKtyseU2YqhGl5ZVQYywT6KpAA).\r\n\r\nI don't know what Typescript common practice is, but I think for my own style this would imply using the no-`default` shortcut wherever possible (which naturally depends on a functional style) but including the `default` `v: never` case otherwise. For this example I think presenting only the latter is fine (we are not writing a Typescript tutorial after all) but we could include both.",
        "createdAt" : "2019-12-20T18:10:25Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "41030735c34f5ee15171e782aa55742d40e5f99b",
    "line" : null,
    "diffHunk" : "@@ -418,13 +418,13 @@ and then, from JSON\n \n ::\n \n-    {\"Bar\": {\"f1\": 42, \"f2\": true}}\n-    {\"Baz\": {}}\n+    {\"tag\": \"Bar\", \"value\": {\"f1\": 42, \"f2\": true}}\n+    {\"tag\": \"Baz\", \"value\": {}}\n \n This can be encoded and used in TypeScript, including exhaustiveness\n-checking; see `a keyed example`_.\n+checking; see `a type refinement example`_.\n \n-.. _a keyed example: https://www.typescriptlang.org/play/#src=type%20Foo%20%3D%0D%0A%20%20%20%20%7B%20Bar%3A%20%7B%20f1%3A%20number%2C%20f2%3A%20boolean%20%7D%20%7D%0D%0A%20%20%7C%20%7B%20Baz%3A%20%7B%20f3%3A%20string%20%7D%20%7D%3B%0D%0A%0D%0Afunction%20test(v%3A%20Foo)%20%7B%0D%0A%20%20if%20(%22Bar%22%20in%20v)%20%7B%0D%0A%20%20%20%20console.log(v.Bar.f1%2C%20v.Bar.f2)%3B%0D%0A%20%20%7D%20else%20if%20(%22Baz%22%20in%20v)%20%7B%0D%0A%20%20%20%20console.log(v.Baz.f3)%3B%0D%0A%20%20%7D%20else%20%7B%0D%0A%20%20%20%20const%20_%3A%20never%20%3D%20v%3B%0D%0A%20%20%7D%0D%0A%7D%20%0D%0A\n+.. _a type refinement example: https://www.typescriptlang.org/play/?ssl=10&ssc=4&pln=8&pc=5#code/C4TwDgpgBAYg9nKBeAsAKCpqBvKwCGA5gFxQBEAQvgE5kA0UAbvgDYCuEpuAZgIykA7NgFsARhGoNuAJlKiELCPgFQAvmvSYAPjjxFSlfAC96TVhy5q1AbnTpubAQGNgASzgrgEAM7AAFIyk8HAAlDiaUK7cUAEAdASEyEhI5FS0YdgRmE4e3nCKsSxwhHHM7BCxfAyMsWUcldIhthhWECze0FExNQlJKYYmGVlQOQJ5BUUlNXUQTRHqbR3hLdm5wFAA+oIQjBLITM2Yqujq6EA"
  },
  {
    "id" : "0cda82b6-9923-4ed8-8479-fa1da12e8260",
    "prId" : 3012,
    "comments" : [
      {
        "id" : "1b45eb48-f0c6-400b-88ec-09c348f2e734",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The backtick literals in this paragraph that are split across lines probably need to be joined back to start and end in the same line.",
        "createdAt" : "2019-09-24T20:10:59Z",
        "updatedAt" : "2019-09-24T20:17:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "149968bb-1a65-416b-adbe-d04f5afdb250",
        "parentId" : "1b45eb48-f0c6-400b-88ec-09c348f2e734",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Ah, I just accidentally added an empty line between them; renders fine after reverting that d2ef790834",
        "createdAt" : "2019-09-24T20:18:00Z",
        "updatedAt" : "2019-09-24T20:18:01Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d2ef7908343297b9e6dc5a35bd3cd1ae9e972779",
    "line" : 100,
    "diffHunk" : "@@ -213,9 +213,10 @@ quotes::\n     \"Bob\"\n \n Unit\n-----\n+****\n \n Represented as empty object ``{}``. Note that in JavaScript ``{} !=="
  }
]