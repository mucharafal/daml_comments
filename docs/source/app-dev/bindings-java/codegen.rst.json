[
  {
    "id" : "c2479587-2e1d-488f-a629-da1981387273",
    "prId" : 5272,
    "comments" : [
      {
        "id" : "e1f40172-8104-4651-a6f2-795a8a707a4e",
        "parentId" : null,
        "author" : null,
        "body" : "Based on the changes, shouldn't it be:\r\n\r\n```suggestion\r\nYou can download the `latest version <https://search.maven.org/artifact/com.daml.bindings.java/codegen>`__  of the Java codegen. Make sure that the following versions are aligned:\r\n```\r\n",
        "createdAt" : "2020-03-30T11:29:15Z",
        "updatedAt" : "2020-04-01T06:51:55Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "02e811bd-f05f-41c5-a8e8-0efb29b0dcc4",
        "parentId" : "e1f40172-8104-4651-a6f2-795a8a707a4e",
        "author" : null,
        "body" : "Shouldn't we direct users to use `daml codegen java` instead of downloading a codegen jar separately? (Sounds like that would be a separate PR thought.)",
        "createdAt" : "2020-03-30T11:31:45Z",
        "updatedAt" : "2020-04-01T06:51:55Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b3303fad-a31a-4036-b444-9af7311c7ab9",
        "parentId" : "e1f40172-8104-4651-a6f2-795a8a707a4e",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thank you üôè \r\nYes, this needs to be brought into today's codegen world via the daml assistant.",
        "createdAt" : "2020-03-30T11:45:25Z",
        "updatedAt" : "2020-04-01T06:51:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89330f7b27582cdb0a66d5353de307e46c5e2267",
    "line" : null,
    "diffHunk" : "@@ -14,7 +14,7 @@ When writing applications for the ledger in Java, you want to work with a repres\n Download\n ========\n \n-You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/java/codegen/$latest/codegen-$latest.jar?bt_package=sdk-components>`__  of the Java codegen. Make sure that the following versions are aligned:\n+You can download the `latest version <https://search.maven.org/artifact/com.daml.java/codegen>`__  of the Java codegen. Make sure that the following versions are aligned:"
  },
  {
    "id" : "28ecf862-0e10-43ad-adbc-4ba60e095724",
    "prId" : 1151,
    "comments" : [
      {
        "id" : "a8971c9a-7534-47b1-8218-2056eaf84b64",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@gerolf-da: Use a `:ref:` link.",
        "createdAt" : "2019-05-15T17:52:56Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "296d7a37-dc0d-4546-b5fb-9c521e0e38a2",
        "parentId" : "a8971c9a-7534-47b1-8218-2056eaf84b64",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Nvm, this is actually referring to the java docs.",
        "createdAt" : "2019-05-16T06:42:32Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa40588773325065a44dc4d703aec04bc19f0c20",
    "line" : 10,
    "diffHunk" : "@@ -60,7 +60,7 @@ To avoid possible name clashes in the generated Java sources, you should specify\n Generate the decoder utility class\n ----------------------------------\n \n-When reading transactions from the ledger, you typically want to convert a `CreatedEvent <https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/CreatedEvent.html>`__ from the Ledger API to the corresponding generated ``Contract`` class. The Java codegen can optionally generate a decoder class based on the input DAR files that calls the ``fromIdAndRecord`` method of the respective generated ``Contract`` class (see :ref:`daml-codegen-java-templates`). The decoder class can do this for all templates in the input DAR files. \n+When reading transactions from the ledger, you typically want to convert a `CreatedEvent <https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/CreatedEvent.html>`__ from the Ledger API to the corresponding generated ``Contract`` class. The Java codegen can optionally generate a decoder class based on the input DAR files that calls the ``fromCreatedEvent`` method of the respective generated ``Contract`` class (see :ref:`daml-codegen-java-templates`). The decoder class can do this for all templates in the input DAR files."
  },
  {
    "id" : "b8f82a2f-15e1-4828-bb2e-cba8201bd74d",
    "prId" : 1151,
    "comments" : [
      {
        "id" : "9c260684-d61b-4f14-a5dc-7137293a5063",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@gerolf-da: Use a `:ref:` link.",
        "createdAt" : "2019-05-15T17:53:11Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2dbfb3bd-c1f1-4adf-abbc-52eb04538815",
        "parentId" : "9c260684-d61b-4f14-a5dc-7137293a5063",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Also referring to the java docs.",
        "createdAt" : "2019-05-16T06:42:48Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa40588773325065a44dc4d703aec04bc19f0c20",
    "line" : 19,
    "diffHunk" : "@@ -254,7 +254,7 @@ The Java codegen generates three classes for a DAML template:\n       .. TODO: refer to another section explaining exactly that, when we have it.\n \n   **TemplateName.Contract**\n-      Represents an actual contract on the ledger. It contains a field for the contract ID (of type ``TemplateName.ContractId``) and a field for the template data (of type ``TemplateName``). With the static method ``TemplateName.Contract.fromIdAndRecord``, you can deserialize a `CreatedEvent <https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/CreatedEvent.html>`__ to an instance of ``TemplateName.Contract``.\n+      Represents an actual contract on the ledger. It contains a field for the contract ID (of type ``TemplateName.ContractId``) and a field for the template data (of type ``TemplateName``). With the static method ``TemplateName.Contract.fromCreatedEvent``, you can deserialize a `CreatedEvent <https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/CreatedEvent.html>`__ to an instance of ``TemplateName.Contract``."
  },
  {
    "id" : "74eb8dcb-fcee-4fc8-a3ab-d96b02ee1aad",
    "prId" : 362,
    "comments" : [
      {
        "id" : "4c94c080-6962-438c-8a74-928731318660",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "\"Make sure the Java codegen version is the same as the SDK version\" How do I actually check that in practise - ie, where do I look?",
        "createdAt" : "2019-04-10T15:27:01Z",
        "updatedAt" : "2019-04-11T14:45:55Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a8cc1c86-1ed4-43fe-b44d-32bb3cb7c0b4",
        "parentId" : "4c94c080-6962-438c-8a74-928731318660",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "So the combo to check is:\r\n- downloaded java codegen jar: actively done by the user\r\n- maven dependency in pom.xml: comes initially from the quickstart, which depends on the SDK version\r\n- SDK version",
        "createdAt" : "2019-04-10T15:53:45Z",
        "updatedAt" : "2019-04-11T14:45:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "339c18fd-4eb5-4dcf-a09e-3f49395db724",
        "parentId" : "4c94c080-6962-438c-8a74-928731318660",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "How about something like:\r\n\r\n```\r\nMake sure that the following versions are aligned:\r\n* the downloaded Java codegen jar file, eg. 10x.y.z\r\n* the dependency to bindings-java, eg. 10x.y.z\r\n* the sdk-version attribute in the da.yaml file, eg. x.y.z\r\n```",
        "createdAt" : "2019-04-10T16:03:35Z",
        "updatedAt" : "2019-04-11T14:45:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a55deef9-461b-4cfd-a723-926900a629a8",
        "parentId" : "4c94c080-6962-438c-8a74-928731318660",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "That looks perfect!",
        "createdAt" : "2019-04-11T08:40:58Z",
        "updatedAt" : "2019-04-11T14:45:55Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6e0342bdd8c99d27d2d8e4fcea4030b45d5f1ab1",
    "line" : null,
    "diffHunk" : "@@ -14,7 +14,7 @@ When writing applications for the ledger in Java, you want to work with a repres\n Download\n ========\n \n-You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/java/codegen/$latest/codegen-$latest.jar?bt_package=sdk-components>`__  of the Java codegen.\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/java/codegen/$latest/codegen-$latest.jar?bt_package=sdk-components>`__  of the Java codegen. Make sure the Java codegen version is the same as the SDK version you are using (see :ref:`assistant-manual-managing-releases`)."
  },
  {
    "id" : "2917fd51-e6d5-42a4-951f-c3478f4c6cbc",
    "prId" : 362,
    "comments" : [
      {
        "id" : "4d87a2dc-f1b5-4128-8472-842dcbcccf9d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "```suggestion\r\nTo compile the generated Java code, add the :ref:`Java Bindings <bindings-java-setup-maven>` library with the same version as the Java codegen to the classpath. \r\n\r\nWith Maven you can do this by adding a ``dependency`` to the ``pom.xml`` file:\r\n```",
        "createdAt" : "2019-04-10T15:28:10Z",
        "updatedAt" : "2019-04-11T14:45:55Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6e0342bdd8c99d27d2d8e4fcea4030b45d5f1ab1",
    "line" : null,
    "diffHunk" : "@@ -92,6 +92,22 @@ The following snippet is an excerpt from the ``pom.xml`` that is part of the :re\n     :lines: 73-105,121-122\n     :dedent: 12\n \n+\n+Compile the generated Java code\n+===============================\n+\n+To compile the generated Java code, add the :ref:`Java Bindings <bindings-java-setup-maven>` library with the same version as the Java codegen to the classpath. With Maven you can do this by adding a ``dependency`` to the ``pom.xml`` file:"
  },
  {
    "id" : "bc6777f4-f734-4275-8ebc-6d97c4bd03e9",
    "prId" : 290,
    "comments" : [
      {
        "id" : "cd31eb36-c353-40e0-989d-88ee0f70832f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@bethaitman-da: is it okay that we use absolute URLs to docs.daml.com?",
        "createdAt" : "2019-04-09T06:24:03Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb56efbe-897d-4386-8310-fb18a189a22d",
        "parentId" : "cd31eb36-c353-40e0-989d-88ee0f70832f",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "No, we definitely don't want to do that!",
        "createdAt" : "2019-04-09T07:34:38Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ff3eb30c-0911-415f-9f9a-deecde10369a",
        "parentId" : "cd31eb36-c353-40e0-989d-88ee0f70832f",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "I think this (or something very similar) would work instead, but you'll need to test it locally - see the [docs README](https://github.com/digital-asset/daml/tree/master/docs#previewing), you want to run the script with `--gen` to check this works. \r\n```suggestion\r\n.. _Int64: /app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/Int64.html\r\n```",
        "createdAt" : "2019-04-09T07:36:45Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ee312adc-99bf-43fe-b09d-c47366b747ec",
        "parentId" : "cd31eb36-c353-40e0-989d-88ee0f70832f",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "@bethaitman-da Many thanks for the info!",
        "createdAt" : "2019-04-09T07:38:17Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "96d9daba-af38-49f5-b9b1-934ad68dd900",
        "parentId" : "cd31eb36-c353-40e0-989d-88ee0f70832f",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "live-preview.sh doesn't seem to transform the links even with `--gen` but live-preview.sh does.",
        "createdAt" : "2019-04-09T09:30:01Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -105,43 +105,53 @@ Map DAML primitives to Java types\n DAML built-in types are translated to the following equivalent types in\n Java:\n \n-+-----------------------------------+---------------------------------------+\n-| DAML type                         | Java type                             |\n-+===================================+=======================================+\n-| ``Int``                           | ``java.lang.Long``                    |\n-+-----------------------------------+---------------------------------------+\n-| ``Decimal``                       | ``java.math.BigDecimal``              |\n-+-----------------------------------+---------------------------------------+\n-| ``Text``                          | ``java.lang.String``                  |\n-+-----------------------------------+---------------------------------------+\n-| ``Bool``                          | ``java.util.Boolean``                 |\n-+-----------------------------------+---------------------------------------+\n-| ``Party``                         | ``java.lang.String``                  |\n-+-----------------------------------+---------------------------------------+\n-| ``Date``                          | ``java.time.LocalDate``               |\n-+-----------------------------------+---------------------------------------+\n-| ``Time``                          | ``java.time.Instant``                 |\n-+-----------------------------------+---------------------------------------+\n-| ``List`` or ``[]``                | ``java.util.List``                    |\n-+-----------------------------------+---------------------------------------+\n-| ``TextMap``                       | ``java.util.Map``                     |\n-|                                   | Restricted to using ``String`` keys.  |\n-+-----------------------------------+---------------------------------------+\n-| ``Optional``                      | ``java.util.Optional``                |\n-+-----------------------------------+---------------------------------------+\n-| ``()`` (Unit)                     | Since Java doesn‚Äôt have an            |\n-|                                   | equivalent of DAML‚Äôs Unit type        |\n-|                                   | ``()`` in the standard library,       |\n-|                                   | the generated code uses               |\n-|                                   | `com.daml.ledger.javaapi.data.Unit`_  |\n-|                                   | from the Java Bindings library.       |\n-+-----------------------------------+---------------------------------------+\n-| ``ContractId``                    | Fields of type ``ContractId X`` refer |\n-|                                   | to the generated ``ContractId`` class |\n-|                                   | of the respective template ``X``.     |\n-+-----------------------------------+---------------------------------------+\n-\n-.. _com.daml.ledger.javaapi.data.Unit: https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/Unit.html\n++--------------------------------+--------------------------------------------+------------------------+\n+| DAML type                      | Java type                                  | Java Bindings          |\n+|                                |                                            | Value Type             |\n++================================+============================================+========================+\n+| ``Int``                        | ``java.lang.Long``                         | `Int64`_               |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Decimal``                    | ``java.math.BigDecimal``                   | `Decimal`_             |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Text``                       | ``java.lang.String``                       | `Text`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Bool``                       | ``java.util.Boolean``                      | `Bool`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Party``                      | ``java.lang.String``                       | `Party`_               |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Date``                       | ``java.time.LocalDate``                    | `Date`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Time``                       | ``java.time.Instant``                      | `Timestamp`_           |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``List`` or ``[]``             | ``java.util.List``                         | `DamlList`_            |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``TextMap``                    | ``java.util.Map``                          | `TextMap`_             |\n+|                                | Restricted to using ``String`` keys.       |                        |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Optional``                   | ``java.util.Optional``                     | `DamlOptional`_        |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``()`` (Unit)                  | **None** since the Java language doesn‚Äôt   | `Unit`_                |\n+|                                | have a direct equivalent of DAML‚Äôs Unit    |                        |\n+|                                | type ``()``, the generated code uses the   |                        |\n+|                                | Java Bindings value type.                  |                        |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``ContractId``                 | Fields of type ``ContractId X`` refer to   | `ContractId`_          |\n+|                                | the generated ``ContractId`` class of the  |                        |\n+|                                | respective template ``X``.                 |                        |\n++--------------------------------+--------------------------------------------+------------------------+\n+\n+.. _Int64: https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/Int64.html"
  },
  {
    "id" : "6991cae9-07dd-4f6a-a01d-53b97803423f",
    "prId" : 290,
    "comments" : [
      {
        "id" : "b1e5ba08-4771-485b-aacc-572e67a438c7",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I'm not sure we need to explain what parameterized types are. Especially considering that the DAML reference documentation doesn't go very deep into it either.\r\n```suggestion\r\n```",
        "createdAt" : "2019-04-09T06:39:24Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "577fea53-790e-4c3f-b928-4f0cb729d904",
        "parentId" : "b1e5ba08-4771-485b-aacc-572e67a438c7",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "Agreed with this and Gerolf's suggestion below as well.",
        "createdAt" : "2019-04-09T07:39:49Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition."
  },
  {
    "id" : "60c1267b-580e-4b76-9082-ba68dad7c889",
    "prId" : 290,
    "comments" : [
      {
        "id" : "08130828-b3d4-43a7-8467-4b294c46815f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The sentence appears to be incomplete.",
        "createdAt" : "2019-04-09T06:40:03Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dd90bbf0-a2ff-4c70-beb1-690e23adb2b6",
        "parentId" : "08130828-b3d4-43a7-8467-4b294c46815f",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done\r\n",
        "createdAt" : "2019-04-09T09:28:55Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `"
  },
  {
    "id" : "7574b36f-91f9-473b-9b5b-dce17dbcb95d",
    "prId" : 290,
    "comments" : [
      {
        "id" : "0e7bd35f-c77e-4703-89aa-a0639d477078",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nThe Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\r\n```",
        "createdAt" : "2019-04-09T06:40:40Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type."
  },
  {
    "id" : "688899cf-fd62-4cc2-925e-a20056e49c9a",
    "prId" : 290,
    "comments" : [
      {
        "id" : "892019d1-036e-41d7-a540-81477e6179ff",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think this note should go after the serialization and deserialization has been described. @bethaitman-da, what do you think?",
        "createdAt" : "2019-04-09T06:42:02Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f1bccda-e621-4f67-ae2a-de99647772ec",
        "parentId" : "892019d1-036e-41d7-a540-81477e6179ff",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "That sounds sensible to me - as it is, it interrupts the link between the previous paragraph and the code block.",
        "createdAt" : "2019-04-09T07:41:57Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization"
  },
  {
    "id" : "9f42c1ce-31c6-4d02-b78f-b07d7cc0d4ba",
    "prId" : 290,
    "comments" : [
      {
        "id" : "5027de73-7af9-4e7e-9a4f-cb35624d6772",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think inline code formatting is done with two back-ticks in reST. Please check the rest of the changes as well.",
        "createdAt" : "2019-04-09T06:44:24Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:"
  },
  {
    "id" : "dab1f473-8624-4d94-8f78-8116027bafdb",
    "prId" : 290,
    "comments" : [
      {
        "id" : "1799f97b-0b00-4daa-8e12-1eef5fa6e483",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nTo serialize an instance of the `Attribute<a>` data type, a function for serializing the type ``a`` to the correct Java Bindings ``Value`` type\r\n```",
        "createdAt" : "2019-04-09T06:46:39Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4ac83d20-161b-4627-90c4-3c100c01f94d",
        "parentId" : "1799f97b-0b00-4daa-8e12-1eef5fa6e483",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-09T09:25:58Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+**Serializing**\n+\n+To serialize an instance of the `Attribute<a>` data type function for creating the Ledger API equivalent of the attribute value"
  },
  {
    "id" : "56729c64-165a-477d-80ee-a3cb1ad427d3",
    "prId" : 290,
    "comments" : [
      {
        "id" : "34a9aa2c-361b-4011-b027-83fc0908b7d6",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think we should replace `field` with type here (and the line below). Two fields of type `a` still only need one function `a => Value`.",
        "createdAt" : "2019-04-09T06:49:30Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6c26e78c-62aa-4f64-961e-5c60bb89749e",
        "parentId" : "34a9aa2c-361b-4011-b027-83fc0908b7d6",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-09T09:25:51Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+**Serializing**\n+\n+To serialize an instance of the `Attribute<a>` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the `toValue` method as the `fromValuea` argument (see the above `com/acme/Attribute.java` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a `java.lang.Long` value to Ledger API representation using the *method reference*\n+`Int64::new` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized field, then a function for creating the"
  },
  {
    "id" : "ad3eb9ac-fc19-4b44-bea2-d23ed75ddb98",
    "prId" : 290,
    "comments" : [
      {
        "id" : "759b877c-c765-4f5b-853e-17bc790bb7a0",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nAnalogous to the generated ``toValue`` method, the deserialization method ``fromValue`` takes a function to convert a Java Bindings ``Value`` type to the expected Java type.\r\n```",
        "createdAt" : "2019-04-09T06:52:05Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+**Serializing**\n+\n+To serialize an instance of the `Attribute<a>` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the `toValue` method as the `fromValuea` argument (see the above `com/acme/Attribute.java` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a `java.lang.Long` value to Ledger API representation using the *method reference*\n+`Int64::new` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized field, then a function for creating the\n+Java Binding values must be supplied for *each* such fields.\n+\n+**Deserializing**\n+\n+The deserialization method `fromValue` requires in a similar manner, a function to convert the Java Bindings value types to it's corresponding Java type."
  },
  {
    "id" : "c16a4731-df19-4e2f-b5af-5f7c2dc05731",
    "prId" : 290,
    "comments" : [
      {
        "id" : "967a8c9d-4971-4cab-83dc-2254cd8d8824",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I don't quite understand this sentence. Are you referring to a record that has a field that is itself a parameterized type? In that case this section is more about *nested parameterized types* I  think.",
        "createdAt" : "2019-04-09T06:57:56Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d30f3da-7fc3-46bb-9744-2201e58a2572",
        "parentId" : "967a8c9d-4971-4cab-83dc-2254cd8d8824",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "It's more about DamlList and DamlOptional being creating using pre-converted Java Binding values.",
        "createdAt" : "2019-04-09T07:27:23Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d984fdb5-e90c-443b-b7a6-1ac48f0b645f",
        "parentId" : "967a8c9d-4971-4cab-83dc-2254cd8d8824",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Hm, if this is about DamlList and DamlOptional, maybe change the heading to refer to those. As it is, DamlList and DamlOptional aren't product types at all.",
        "createdAt" : "2019-04-09T07:57:46Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7f49a708-7648-4d57-8af7-7a2bd656de61",
        "parentId" : "967a8c9d-4971-4cab-83dc-2254cd8d8824",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-09T08:04:13Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+**Serializing**\n+\n+To serialize an instance of the `Attribute<a>` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the `toValue` method as the `fromValuea` argument (see the above `com/acme/Attribute.java` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a `java.lang.Long` value to Ledger API representation using the *method reference*\n+`Int64::new` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized field, then a function for creating the\n+Java Binding values must be supplied for *each* such fields.\n+\n+**Deserializing**\n+\n+The deserialization method `fromValue` requires in a similar manner, a function to convert the Java Bindings value types to it's corresponding Java type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = Attribute.<Long>fromValue(serializedPages,\n+      f -> f.asInt64().getOrElseThrow(() -> throw new IllegalArgumentException(\"Expected Int field\").getValue());\n+\n+See Java Bindings `Value`_ class for the methods to transform the Java Bindings types into corresponding Java types.\n+\n+.. _Value: https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/Value.html\n+\n+**Parameterized product types**\n+\n+The serialization of parameterized product types require a multiple stage conversion function where the elements must be"
  },
  {
    "id" : "6a86e929-3f19-4a35-b2e0-92c336ff762f",
    "prId" : 290,
    "comments" : [
      {
        "id" : "35b18f97-3bee-4c34-87c3-b2b2e91f057a",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "I couldn't quite follow this sentence - the \"None\" at the start confused me. Maybe \"There is no equivalent Java type\", then \"Since...\" instead?",
        "createdAt" : "2019-04-09T07:38:31Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : 71,
    "diffHunk" : "@@ -105,43 +105,53 @@ Map DAML primitives to Java types\n DAML built-in types are translated to the following equivalent types in\n Java:\n \n-+-----------------------------------+---------------------------------------+\n-| DAML type                         | Java type                             |\n-+===================================+=======================================+\n-| ``Int``                           | ``java.lang.Long``                    |\n-+-----------------------------------+---------------------------------------+\n-| ``Decimal``                       | ``java.math.BigDecimal``              |\n-+-----------------------------------+---------------------------------------+\n-| ``Text``                          | ``java.lang.String``                  |\n-+-----------------------------------+---------------------------------------+\n-| ``Bool``                          | ``java.util.Boolean``                 |\n-+-----------------------------------+---------------------------------------+\n-| ``Party``                         | ``java.lang.String``                  |\n-+-----------------------------------+---------------------------------------+\n-| ``Date``                          | ``java.time.LocalDate``               |\n-+-----------------------------------+---------------------------------------+\n-| ``Time``                          | ``java.time.Instant``                 |\n-+-----------------------------------+---------------------------------------+\n-| ``List`` or ``[]``                | ``java.util.List``                    |\n-+-----------------------------------+---------------------------------------+\n-| ``TextMap``                       | ``java.util.Map``                     |\n-|                                   | Restricted to using ``String`` keys.  |\n-+-----------------------------------+---------------------------------------+\n-| ``Optional``                      | ``java.util.Optional``                |\n-+-----------------------------------+---------------------------------------+\n-| ``()`` (Unit)                     | Since Java doesn‚Äôt have an            |\n-|                                   | equivalent of DAML‚Äôs Unit type        |\n-|                                   | ``()`` in the standard library,       |\n-|                                   | the generated code uses               |\n-|                                   | `com.daml.ledger.javaapi.data.Unit`_  |\n-|                                   | from the Java Bindings library.       |\n-+-----------------------------------+---------------------------------------+\n-| ``ContractId``                    | Fields of type ``ContractId X`` refer |\n-|                                   | to the generated ``ContractId`` class |\n-|                                   | of the respective template ``X``.     |\n-+-----------------------------------+---------------------------------------+\n-\n-.. _com.daml.ledger.javaapi.data.Unit: https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/Unit.html\n++--------------------------------+--------------------------------------------+------------------------+\n+| DAML type                      | Java type                                  | Java Bindings          |\n+|                                |                                            | Value Type             |\n++================================+============================================+========================+\n+| ``Int``                        | ``java.lang.Long``                         | `Int64`_               |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Decimal``                    | ``java.math.BigDecimal``                   | `Decimal`_             |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Text``                       | ``java.lang.String``                       | `Text`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Bool``                       | ``java.util.Boolean``                      | `Bool`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Party``                      | ``java.lang.String``                       | `Party`_               |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Date``                       | ``java.time.LocalDate``                    | `Date`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Time``                       | ``java.time.Instant``                      | `Timestamp`_           |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``List`` or ``[]``             | ``java.util.List``                         | `DamlList`_            |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``TextMap``                    | ``java.util.Map``                          | `TextMap`_             |\n+|                                | Restricted to using ``String`` keys.       |                        |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Optional``                   | ``java.util.Optional``                     | `DamlOptional`_        |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``()`` (Unit)                  | **None** since the Java language doesn‚Äôt   | `Unit`_                |"
  },
  {
    "id" : "09d21069-fe44-4db6-9f2b-f59f1e4af6de",
    "prId" : 290,
    "comments" : [
      {
        "id" : "37678741-915a-440a-81ac-303f8ccbd60a",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "Any particular reason for removing the reference to the specific type?",
        "createdAt" : "2019-04-09T07:38:54Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8af449b2-b828-4021-955a-6d5c56b6cc67",
        "parentId" : "37678741-915a-440a-81ac-303f8ccbd60a",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "I didn't want to duplicate the reference in the same row as referring to the 'Java Bindings value type' which is the title on the third column that contains the reference should suffice?",
        "createdAt" : "2019-04-09T07:50:03Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e8dd2405-e795-4c22-a33b-9a88be6097aa",
        "parentId" : "37678741-915a-440a-81ac-303f8ccbd60a",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "Oh, I see, I've misread this table! My bad.\r\n\r\nI wonder if you might prefer to use a [list table](http://docutils.sourceforge.net/docs/ref/rst/directives.html#list-table) for this table? Might be easier to read and write. ",
        "createdAt" : "2019-04-09T07:59:33Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : 74,
    "diffHunk" : "@@ -105,43 +105,53 @@ Map DAML primitives to Java types\n DAML built-in types are translated to the following equivalent types in\n Java:\n \n-+-----------------------------------+---------------------------------------+\n-| DAML type                         | Java type                             |\n-+===================================+=======================================+\n-| ``Int``                           | ``java.lang.Long``                    |\n-+-----------------------------------+---------------------------------------+\n-| ``Decimal``                       | ``java.math.BigDecimal``              |\n-+-----------------------------------+---------------------------------------+\n-| ``Text``                          | ``java.lang.String``                  |\n-+-----------------------------------+---------------------------------------+\n-| ``Bool``                          | ``java.util.Boolean``                 |\n-+-----------------------------------+---------------------------------------+\n-| ``Party``                         | ``java.lang.String``                  |\n-+-----------------------------------+---------------------------------------+\n-| ``Date``                          | ``java.time.LocalDate``               |\n-+-----------------------------------+---------------------------------------+\n-| ``Time``                          | ``java.time.Instant``                 |\n-+-----------------------------------+---------------------------------------+\n-| ``List`` or ``[]``                | ``java.util.List``                    |\n-+-----------------------------------+---------------------------------------+\n-| ``TextMap``                       | ``java.util.Map``                     |\n-|                                   | Restricted to using ``String`` keys.  |\n-+-----------------------------------+---------------------------------------+\n-| ``Optional``                      | ``java.util.Optional``                |\n-+-----------------------------------+---------------------------------------+\n-| ``()`` (Unit)                     | Since Java doesn‚Äôt have an            |\n-|                                   | equivalent of DAML‚Äôs Unit type        |\n-|                                   | ``()`` in the standard library,       |\n-|                                   | the generated code uses               |\n-|                                   | `com.daml.ledger.javaapi.data.Unit`_  |\n-|                                   | from the Java Bindings library.       |\n-+-----------------------------------+---------------------------------------+\n-| ``ContractId``                    | Fields of type ``ContractId X`` refer |\n-|                                   | to the generated ``ContractId`` class |\n-|                                   | of the respective template ``X``.     |\n-+-----------------------------------+---------------------------------------+\n-\n-.. _com.daml.ledger.javaapi.data.Unit: https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/Unit.html\n++--------------------------------+--------------------------------------------+------------------------+\n+| DAML type                      | Java type                                  | Java Bindings          |\n+|                                |                                            | Value Type             |\n++================================+============================================+========================+\n+| ``Int``                        | ``java.lang.Long``                         | `Int64`_               |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Decimal``                    | ``java.math.BigDecimal``                   | `Decimal`_             |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Text``                       | ``java.lang.String``                       | `Text`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Bool``                       | ``java.util.Boolean``                      | `Bool`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Party``                      | ``java.lang.String``                       | `Party`_               |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Date``                       | ``java.time.LocalDate``                    | `Date`_                |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Time``                       | ``java.time.Instant``                      | `Timestamp`_           |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``List`` or ``[]``             | ``java.util.List``                         | `DamlList`_            |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``TextMap``                    | ``java.util.Map``                          | `TextMap`_             |\n+|                                | Restricted to using ``String`` keys.       |                        |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``Optional``                   | ``java.util.Optional``                     | `DamlOptional`_        |\n++--------------------------------+--------------------------------------------+------------------------+\n+| ``()`` (Unit)                  | **None** since the Java language doesn‚Äôt   | `Unit`_                |\n+|                                | have a direct equivalent of DAML‚Äôs Unit    |                        |\n+|                                | type ``()``, the generated code uses the   |                        |\n+|                                | Java Bindings value type.                  |                        |"
  },
  {
    "id" : "7f45ddc8-c816-46ae-90f7-589d5f78dc17",
    "prId" : 290,
    "comments" : [
      {
        "id" : "3d4140e0-7106-44c4-a9f1-72bafea3811a",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "If possible, it's better to create a separate DAML file (in the same directory) and then pull the code in using a `literalinclude` block - that means we actually test whether the DAML compiles.",
        "createdAt" : "2019-04-09T07:40:34Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml"
  },
  {
    "id" : "b3b25b64-49b8-4603-994d-6a746e65abdf",
    "prId" : 290,
    "comments" : [
      {
        "id" : "7f956916-8afe-4896-a975-cd2588959923",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "Agree with the other comment, plus\r\n```suggestion\r\nA Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\r\n```",
        "createdAt" : "2019-04-09T07:41:15Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:"
  },
  {
    "id" : "c919fa1d-6943-4df7-96f7-1f9d6e646cae",
    "prId" : 290,
    "comments" : [
      {
        "id" : "a1d16f97-8e4a-419b-9c09-6a8b07e21abd",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "This and below - if it's meant to be a title, can you use an rst title? The [docs README](https://github.com/digital-asset/daml/tree/master/docs#style-conventions) has the order of headings we conventionally use.",
        "createdAt" : "2019-04-09T07:42:46Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+**Serializing**"
  },
  {
    "id" : "ad5fa39c-1fa6-4a39-b1ee-8ebf75f8a883",
    "prId" : 290,
    "comments" : [
      {
        "id" : "a33dfedb-cb72-419c-91ef-9bea5ec21d0c",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "Same comment about headings",
        "createdAt" : "2019-04-09T07:44:12Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+**Serializing**\n+\n+To serialize an instance of the `Attribute<a>` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the `toValue` method as the `fromValuea` argument (see the above `com/acme/Attribute.java` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a `java.lang.Long` value to Ledger API representation using the *method reference*\n+`Int64::new` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized field, then a function for creating the\n+Java Binding values must be supplied for *each* such fields.\n+\n+**Deserializing**"
  },
  {
    "id" : "83ea9272-fae6-4abe-b1d8-cf0d8bd6185f",
    "prId" : 290,
    "comments" : [
      {
        "id" : "b7a4d4fc-ce9c-43b2-bc94-bdb042d994ff",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "This link needs updating too :)",
        "createdAt" : "2019-04-09T07:44:42Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +390,99 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+A :ref:`parameterized type <daml-ref-parameterized-types>` is where the actual type is specified at instantiation as *type parameters* and not as part of type definition.\n+The Java Code Generator uses Java Generic types to represent the DAML parameterized type.\n+\n+Below is a DAML fragment defining the parameterized type `Attribute` for use by the `\n+\n+.. code-block:: daml\n+  :caption: Com/Acme.daml\n+\n+  daml 1.2\n+  module Com.Acme where\n+\n+  data Attribute a = Attribute\n+      with v : a\n+\n+  data BookAttributes = BookAttributes with\n+     pages : (Attribute Int)\n+     authors : (Attribute [Text])\n+     title : (Attribute Text)\n+\n+A file Java file is generated for the `Attribute` data type that defines the Java Generic class:\n+\n+Note: If the parameterized type is contained in a type where the *actual* type is specified (as in the `BookAttributes` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+**Serializing**\n+\n+To serialize an instance of the `Attribute<a>` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the `toValue` method as the `fromValuea` argument (see the above `com/acme/Attribute.java` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a `java.lang.Long` value to Ledger API representation using the *method reference*\n+`Int64::new` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized field, then a function for creating the\n+Java Binding values must be supplied for *each* such fields.\n+\n+**Deserializing**\n+\n+The deserialization method `fromValue` requires in a similar manner, a function to convert the Java Bindings value types to it's corresponding Java type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = Attribute.<Long>fromValue(serializedPages,\n+      f -> f.asInt64().getOrElseThrow(() -> throw new IllegalArgumentException(\"Expected Int field\").getValue());\n+\n+See Java Bindings `Value`_ class for the methods to transform the Java Bindings types into corresponding Java types.\n+\n+.. _Value: https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/Value.html"
  },
  {
    "id" : "265bacb7-f2b0-4b1a-a348-202c7442d7a9",
    "prId" : 290,
    "comments" : [
      {
        "id" : "63b351ab-8a9c-4aed-8b71-cdb97eda1fc4",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nTo serialize an instance of the ``Attribute<a>`` data type, a function for creating the Ledger API equivalent of the attribute value\r\n```",
        "createdAt" : "2019-04-09T09:38:53Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +382,95 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type function for creating the Ledger API equivalent of the attribute value"
  },
  {
    "id" : "0289dd61-3e87-4746-bb0b-d90384790de1",
    "prId" : 290,
    "comments" : [
      {
        "id" : "320c5ad7-ec1a-45ea-ae5f-60f5e3bda5d2",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nBelow is a Java fragment that serializes an attribute with a ``java.lang.Long`` value to the Ledger API representation using the *method reference*\r\n```",
        "createdAt" : "2019-04-09T09:39:36Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +382,95 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a ``java.lang.Long`` value to Ledger API representation using the *method reference*"
  },
  {
    "id" : "fa7364f9-f33c-4ba3-8318-c353654cef3e",
    "prId" : 290,
    "comments" : [
      {
        "id" : "04cf1852-3ba1-4d09-8287-d5855a7028d9",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nNote: If the DAML type is a record that has more than one parameterized type, a function for creating the\r\n```",
        "createdAt" : "2019-04-09T09:51:04Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +382,95 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a ``java.lang.Long`` value to Ledger API representation using the *method reference*\n+``Int64::new`` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue`` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized type, then a function for creating the"
  },
  {
    "id" : "03a245f3-dd67-4b1a-b842-43d07ede6294",
    "prId" : 290,
    "comments" : [
      {
        "id" : "a4d69ddd-c3a3-465e-83fb-0a0a6d6ca700",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nconverted to the Java Binding Java Types before the creating the ``DamlList`` or ``DamlOptional``.\r\n```",
        "createdAt" : "2019-04-09T09:52:49Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +382,95 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a ``java.lang.Long`` value to Ledger API representation using the *method reference*\n+``Int64::new`` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue`` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized type, then a function for creating the\n+Java Binding values must be supplied for *each* such type.\n+\n+Deserializing\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+Analogous to the generated ``toValue`` method, the deserialization method ``fromValue`` takes a function to convert a Java Bindings ``Value`` type to the expected Java type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = Attribute.<Long>fromValue(serializedPages,\n+      f -> f.asInt64().getOrElseThrow(() -> throw new IllegalArgumentException(\"Expected Int field\").getValue());\n+\n+See Java Bindings `Value`_ class for the methods to transform the Java Bindings types into corresponding Java types.\n+\n+.. _Value: /app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/Value.html\n+\n+Non-exposed parameterized types\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+If the parameterized type is contained in a type where the *actual* type is specified (as in the ``BookAttributes`` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+DAML List and DAML Optional\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+The serialization of the Java ``List`` and ``Optional`` types require a multiple stage conversion function where the elements must be\n+converted to the Java Binding Java Types before the creating the product type."
  },
  {
    "id" : "0ea9cc41-e31c-4dce-84bf-d143bf9666a9",
    "prId" : 290,
    "comments" : [
      {
        "id" : "923038b0-7ea3-4a3f-92cc-80919280a678",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nConverting List and Optional\r\n```",
        "createdAt" : "2019-04-09T09:53:33Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +382,95 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a ``java.lang.Long`` value to Ledger API representation using the *method reference*\n+``Int64::new`` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue`` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized type, then a function for creating the\n+Java Binding values must be supplied for *each* such type.\n+\n+Deserializing\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+Analogous to the generated ``toValue`` method, the deserialization method ``fromValue`` takes a function to convert a Java Bindings ``Value`` type to the expected Java type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = Attribute.<Long>fromValue(serializedPages,\n+      f -> f.asInt64().getOrElseThrow(() -> throw new IllegalArgumentException(\"Expected Int field\").getValue());\n+\n+See Java Bindings `Value`_ class for the methods to transform the Java Bindings types into corresponding Java types.\n+\n+.. _Value: /app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/Value.html\n+\n+Non-exposed parameterized types\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+If the parameterized type is contained in a type where the *actual* type is specified (as in the ``BookAttributes`` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+DAML List and DAML Optional"
  },
  {
    "id" : "c236521b-8ba3-43a0-8f34-25b443dbb62d",
    "prId" : 290,
    "comments" : [
      {
        "id" : "0620e8a1-5cfe-4614-a5f2-4db9b3266548",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n```",
        "createdAt" : "2019-04-09T09:53:56Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +382,95 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a ``java.lang.Long`` value to Ledger API representation using the *method reference*\n+``Int64::new`` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue`` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized type, then a function for creating the\n+Java Binding values must be supplied for *each* such type.\n+\n+Deserializing\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+Analogous to the generated ``toValue`` method, the deserialization method ``fromValue`` takes a function to convert a Java Bindings ``Value`` type to the expected Java type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = Attribute.<Long>fromValue(serializedPages,\n+      f -> f.asInt64().getOrElseThrow(() -> throw new IllegalArgumentException(\"Expected Int field\").getValue());\n+\n+See Java Bindings `Value`_ class for the methods to transform the Java Bindings types into corresponding Java types.\n+\n+.. _Value: /app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/Value.html\n+\n+Non-exposed parameterized types\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+If the parameterized type is contained in a type where the *actual* type is specified (as in the ``BookAttributes`` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+DAML List and DAML Optional\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""
  },
  {
    "id" : "4693165e-2e14-461f-8450-c39c905d8242",
    "prId" : 290,
    "comments" : [
      {
        "id" : "5811e1e5-7a84-4439-82b2-5253fa078042",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nThe deserialization to the Java ``List`` and ``Optional`` types similarly require that the Java Bindings types ``DamlList`` and ``DamlOptional``  are converted to it's Java\r\n```",
        "createdAt" : "2019-04-09T09:57:12Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +382,95 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract).\n+\n+Below is a Java fragment to serialize an attribute with a ``java.lang.Long`` value to Ledger API representation using the *method reference*\n+``Int64::new`` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue`` method.\n+\n+Note: That if the DAML type is a record that has more that one parameterized type, then a function for creating the\n+Java Binding values must be supplied for *each* such type.\n+\n+Deserializing\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+Analogous to the generated ``toValue`` method, the deserialization method ``fromValue`` takes a function to convert a Java Bindings ``Value`` type to the expected Java type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = Attribute.<Long>fromValue(serializedPages,\n+      f -> f.asInt64().getOrElseThrow(() -> throw new IllegalArgumentException(\"Expected Int field\").getValue());\n+\n+See Java Bindings `Value`_ class for the methods to transform the Java Bindings types into corresponding Java types.\n+\n+.. _Value: /app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/Value.html\n+\n+Non-exposed parameterized types\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+If the parameterized type is contained in a type where the *actual* type is specified (as in the ``BookAttributes`` type above), then the serialization\n+and deserialization of the enclosing type provides the necessary methods for serialization and deserialization.\n+\n+DAML List and DAML Optional\n+\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n+\n+The serialization of the Java ``List`` and ``Optional`` types require a multiple stage conversion function where the elements must be\n+converted to the Java Binding Java Types before the creating the product type.\n+\n+.. code-block:: java\n+\n+  Attribute<List<String>> authorsAttribute = new Attribute<List<String>>(Arrays.asList(\"Homer\", \"Ovid\", \"Vergil\"));\n+\n+  Value serializedAuthors = authorsAttribute.toValue(f -> new DamlList(f.stream().map(Text::new).collect(Collectors.<Value>toList())));\n+\n+The deserialization to the Java ``List`` and ``Optional`` types similarly require that the Java Bindings product type is converted to it's Java"
  },
  {
    "id" : "5c592df4-3b5d-474b-a59a-64446b0f5483",
    "prId" : 290,
    "comments" : [
      {
        "id" : "201c4575-3cba-4495-9d1d-b420215eb6e9",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nThe Java codegen generates a Java file with a generic class for  the ``Attribute a`` data type:\r\n```",
        "createdAt" : "2019-04-09T13:05:44Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +383,96 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :lines: 3-11\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:"
  },
  {
    "id" : "37b1af1d-fb11-4514-b8ea-54c9f02f4146",
    "prId" : 290,
    "comments" : [
      {
        "id" : "cd2d565f-15b8-4fc9-b089-3b53f4ce7bda",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nSee :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the ``fromValue`` method.\r\n```",
        "createdAt" : "2019-04-09T13:06:52Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +383,96 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :lines: 3-11\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type, a function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract).\n+\n+Below is a Java fragment that serializes an attribute with a ``java.lang.Long`` value to the Ledger API representation using the *method reference*\n+``Int64::new`` to create a new instance of the Java Bindings value type.\n+\n+.. code-block:: java\n+\n+  Attribute<Long> pagesAttribute = new Attributes<>(42L);\n+\n+  Value serializedPages = pagesAttribute.toValue(Int64::new);\n+\n+See :ref:`DAML To Java Type Mapping <daml-codegen-java-primitive-types>` for the Java Bindings value types need to be created in the `fromValue`` method."
  },
  {
    "id" : "6e66c067-8c1a-476b-8bb3-b626b0804634",
    "prId" : 290,
    "comments" : [
      {
        "id" : "4f56f461-478c-4ea4-83d2-2d67036e9705",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think we should maybe actually mention here that this section is only for completeness, and we don't expect users to make use of the `fromValue` and `toValue` methods, because they would typically come from a template that doesn't have any unbound type parameters.\r\n@bethaitman-da: do you think this makes sense from a \"user education\" point of view?",
        "createdAt" : "2019-04-09T13:17:40Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "417f96a1-a70b-459c-96b5-270638ce92f5",
        "parentId" : "4f56f461-478c-4ea4-83d2-2d67036e9705",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "This sounds pretty important - if there are caveats that mean you don't have to read this, they should definitely go up front!",
        "createdAt" : "2019-04-10T11:41:06Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : 136,
    "diffHunk" : "@@ -380,3 +383,96 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+"
  },
  {
    "id" : "2cd11058-b56f-424f-8cd1-512f65ce627e",
    "prId" : 290,
    "comments" : [
      {
        "id" : "849936b6-5fc7-47b3-88a9-5926736eab98",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "You say \"is passed\" here - does that mean we do that or the user needs to do that? If the user, I'd rewrite this as an instruction, for example \"to serialize an instance of the data type, pass a function ... to the toValue method...\"",
        "createdAt" : "2019-04-10T11:38:50Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0cd6705b-e294-4b71-b0f6-5469164f2dfe",
        "parentId" : "849936b6-5fc7-47b3-88a9-5926736eab98",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Good idea, thanks.",
        "createdAt" : "2019-04-10T11:49:54Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2ef75897-ad6c-41dc-8242-78e8a2279490",
        "parentId" : "849936b6-5fc7-47b3-88a9-5926736eab98",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-10T14:22:03Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +383,96 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :lines: 3-11\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type, a function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract)."
  },
  {
    "id" : "ae7f5a33-9647-490a-981f-60340e866c95",
    "prId" : 290,
    "comments" : [
      {
        "id" : "8f175a79-2369-4be9-9457-9dd88c9a649c",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "```suggestion\r\nis passed to the ``toValue`` method as the ``fromValue`` argument (see the above ``com/acme/Attribute.java`` source extract).\r\n```",
        "createdAt" : "2019-04-10T11:38:58Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "57db52dc-3091-4629-91eb-7330602925fd",
        "parentId" : "8f175a79-2369-4be9-9457-9dd88c9a649c",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Maybe somewhat surprisingly, this is not a typo but the generated parameter name `fromValue` for the type parameter `a` -> `fromValuea`. I agree, not very intuitive without an explanation.",
        "createdAt" : "2019-04-10T11:51:13Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d0dede82-7616-431f-92ce-f66fa269be2c",
        "parentId" : "8f175a79-2369-4be9-9457-9dd88c9a649c",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "oh, my bad! An explanation would be great.",
        "createdAt" : "2019-04-10T12:03:04Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a00ab5d4-fa6c-4c97-8710-e9e747073df2",
        "parentId" : "8f175a79-2369-4be9-9457-9dd88c9a649c",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Added explanation.",
        "createdAt" : "2019-04-10T14:22:19Z",
        "updatedAt" : "2019-04-11T11:53:37Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c663a4cfed954f1a32781522be1c130e78a96c41",
    "line" : null,
    "diffHunk" : "@@ -380,3 +383,96 @@ The Java code generated for this variant is:\n     public Published(Long year, String publisher) { /* ... */ }\n     public Record toValue() { /* ... */ }\n   }\n+\n+Parameterized types\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Java Code Generator uses Java Generic types to represent :ref:`DAML parameterized types <daml-ref-parameterized-types>`.\n+\n+Below is a DAML fragment defining the parameterized type ``Attribute`` for use by the ``BookAttribute`` type for modeling\n+the characteristics of the book.\n+\n+.. literalinclude:: ./code-snippets/ParameterizedTypes.daml\n+   :language: daml\n+   :lines: 3-11\n+   :caption: Com/Acme.daml\n+\n+A file Java file is generated for the ``Attribute`` data type that defines the Java Generic class:\n+\n+.. code-block:: java\n+  :caption: com/acme/Attribute.java\n+  :emphasize-lines: 3,8,10\n+\n+  package com.acme;\n+\n+  public class Attribute<a> {\n+    public final a value;\n+\n+    public Attribute(a value) { /* ... */  }\n+\n+    public Record toValue(Function<a, Value> toValuea) { /* ... */ }\n+\n+    public static <a> Attribute<a> fromValue(Value value$, Function<Value, a> fromValuea) { /* ... */ }\n+  }\n+\n+Serializing\n+\"\"\"\"\"\"\"\"\"\"\"\n+\n+To serialize an instance of the ``Attribute<a>`` data type, a function for creating the Ledger API equivalent of the attribute value\n+is passed to the ``toValue`` method as the ``fromValuea`` argument (see the above ``com/acme/Attribute.java`` source extract)."
  },
  {
    "id" : "26cab5a3-d966-4bf8-aeaf-54cd80589e81",
    "prId" : 281,
    "comments" : [
      {
        "id" : "b22867d5-c1ec-4e1e-98ea-60210d91ff82",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "I don't think you need a numbered list for this, unless it is ordered and I hadn't realised? ",
        "createdAt" : "2019-04-08T11:39:12Z",
        "updatedAt" : "2019-04-08T11:43:09Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1770e5e4-4f51-4e58-b634-b1d9d2aa8774",
        "parentId" : "b22867d5-c1ec-4e1e-98ea-60210d91ff82",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Oh, good point. There's definitely no order to it, and I also don't refer to any specific point later. üëç ",
        "createdAt" : "2019-04-08T11:40:16Z",
        "updatedAt" : "2019-04-08T11:43:09Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2534b5fb-fce1-4101-8183-1abf23fd01e7",
        "parentId" : "b22867d5-c1ec-4e1e-98ea-60210d91ff82",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in https://github.com/digital-asset/daml/pull/281/commits/4d848c719a057b2337f492901fe1a68cd76ca35d.",
        "createdAt" : "2019-04-08T11:44:00Z",
        "updatedAt" : "2019-04-08T11:44:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4d848c719a057b2337f492901fe1a68cd76ca35d",
    "line" : null,
    "diffHunk" : "@@ -141,6 +143,19 @@ Java:\n \n .. _com.daml.ledger.javaapi.data.Unit: https://docs.daml.com/app-dev/bindings-java/javadocs/com/daml/ledger/javaapi/data/Unit.html\n \n+Understand escaping rules\n+-------------------------\n+\n+To avoid clashes with Java keywords, the Java codegen applies escaping rules to the following DAML identifiers:\n+\n+#. Type names (except the already mapped :ref:`built-in types <daml-codegen-java-primitive-types>`)"
  },
  {
    "id" : "e8b5dc70-8f6a-47f7-968c-83a5aac58e01",
    "prId" : 201,
    "comments" : [
      {
        "id" : "df0daeea-c84d-4b2e-b97b-e33d309a23a0",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "There's a stray `i`.",
        "createdAt" : "2019-04-05T07:20:10Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -109,7 +109,8 @@ Java:\n +-----------------------------------+---------------------------------------+\n | ``List`` or ``[]``                | ``java.util.List``                    |\n +-----------------------------------+---------------------------------------+\n-| ``TextMap``                       | ``java.util.Map`` (with ``String Keys``) |\n+| ``TextMap``                       | ``java.util.Map`` i                   |"
  },
  {
    "id" : "f57d9cd6-01a1-4d19-a081-a4ca8463e6f2",
    "prId" : 201,
    "comments" : [
      {
        "id" : "923bb94b-a072-4985-98ff-22cfd580dc04",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n|                                   | Restricted to using ``String`` keys   |\r\n```",
        "createdAt" : "2019-04-05T07:20:48Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -109,6 +109,9 @@ Java:\n +-----------------------------------+---------------------------------------+\n | ``List`` or ``[]``                | ``java.util.List``                    |\n +-----------------------------------+---------------------------------------+\n+| ``TextMap``                       | ``java.util.Map`` i                   |\n+|                                   | Restricted to using ``String'' keys`` |"
  }
]