[
  {
    "id" : "6ab29440-e71e-4560-a1e0-190a9eb03c5a",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "b864afcf-9cb1-4f4a-a6d7-c47448375173",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I don't think this is needed?",
        "createdAt" : "2019-05-10T13:56:36Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::"
  },
  {
    "id" : "3c986e18-6d8c-40db-ab1d-ea450b6de2c4",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "4f2ef289-7e16-465a-877d-880898722343",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nThe Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\r\n```",
        "createdAt" : "2019-05-10T13:56:59Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language."
  },
  {
    "id" : "a6dd0e61-2a33-4532-8ac1-b5ddd3e51a77",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "ed588d25-0b80-4720-85e4-40fb3bc4a3ef",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n- The Akka Streams-based API\r\n```",
        "createdAt" : "2019-05-10T13:57:06Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API"
  },
  {
    "id" : "761d5518-aeaf-4726-9cfc-ed440e221ad3",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "d29da865-233f-4668-95f9-4d4e86f7455d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n    The API that you use to send commands to the ledger and receive transactions back.\r\n```",
        "createdAt" : "2019-05-10T13:57:18Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back."
  },
  {
    "id" : "a4eec616-e4dd-4733-a5b3-cef71c9f046f",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "0512b2cb-a0af-471c-a064-5f89a88bb357",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\r\n```",
        "createdAt" : "2019-05-10T13:57:33Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command)."
  },
  {
    "id" : "200563a8-7bfd-4bea-81bc-41431f2fe095",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "e0c32061-0a31-4738-a960-5dd7c7075547",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nIn order to use the Scala bindings, you should be familiar with:\r\n```",
        "createdAt" : "2019-05-10T13:57:50Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\n+\n+The reader must be familiar with:"
  },
  {
    "id" : "04c74b4a-5378-4b4b-86ea-a6efac31ef39",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "2a0c9e07-52bf-4bad-bfbf-807516aa4f32",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "It'd be nice to provide a sentence of context after this - eg, \"In order to use the Scala bindings, you need to set up SBT.\"",
        "createdAt" : "2019-05-10T13:58:18Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6c929a58-f171-4787-a0ab-61dbbe57de41",
        "parentId" : "2a0c9e07-52bf-4bad-bfbf-807516aa4f32",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "you can use it from maven too, it is just we don't provide an example how to set it up in maven.",
        "createdAt" : "2019-05-10T21:03:24Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\n+\n+The reader must be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+\n+Getting started with SBT"
  },
  {
    "id" : "19ab7682-e1be-4f9c-91d8-cae23026febe",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "6077f048-fe1f-419a-869e-3ce890864ca0",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "could you rephrase this as an instruction?",
        "createdAt" : "2019-05-10T14:00:44Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\n+\n+The reader must be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+\n+Getting started with SBT\n+************************\n+\n+Setting up dependencies in ``build.sbt``:"
  },
  {
    "id" : "1b232a92-209b-478b-873a-32fbe9a8b209",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "4a538a52-bb99-43a8-9d2a-e7604fd79fd1",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Above you said \"classes\" - can you pick one term or the other?",
        "createdAt" : "2019-05-10T14:01:06Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "426eadd4-4674-4495-abf4-465b33108f78",
        "parentId" : "4a538a52-bb99-43a8-9d2a-e7604fd79fd1",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "ADTs (algebraic data types) are classes. But not all classes are ADTs. I will use classes. Thanks.",
        "createdAt" : "2019-05-10T18:32:39Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\n+\n+The reader must be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+\n+Getting started with SBT\n+************************\n+\n+Setting up dependencies in ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains generated Scala ADTs."
  },
  {
    "id" : "ebd2848a-4d7d-44fe-b977-80246fa256a9",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "2fe23c54-2b9a-4a4e-8592-10bbe70ab7cf",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Is this just needed to get your quickstart example working, or will everyone need this?",
        "createdAt" : "2019-05-10T14:13:45Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5e5266a8-2487-4951-9a44-88563c7bc193",
        "parentId" : "2fe23c54-2b9a-4a4e-8592-10bbe70ab7cf",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yep, everyone will need it. This is a recommended way of setting up an application that uses scala codegen. Two modules, one module that contains generated classes and another module for the application code.",
        "createdAt" : "2019-05-10T18:33:50Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\n+\n+The reader must be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+\n+Getting started with SBT\n+************************\n+\n+Setting up dependencies in ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains generated Scala ADTs.\n+- ``application``\n+    This is the application code that makes use of the generated Scala ADTs."
  },
  {
    "id" : "58a52e65-c4f6-458a-b340-6087db0c3cb4",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "cacb5aa0-c5b3-4333-932b-d7491d3cfbb8",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I don't understand - is this describing how to set up SBT in general, or for the quickstart example specifically?",
        "createdAt" : "2019-05-10T14:14:09Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "410d89a0-b322-41bb-b6f3-8b1c9f58c6b6",
        "parentId" : "cacb5aa0-c5b3-4333-932b-d7491d3cfbb8",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "This is SBT specific setup., there is nothing quickstart specific in here.",
        "createdAt" : "2019-05-10T18:34:44Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2901a351-1e24-40dd-b686-654f1f1f6a16",
        "parentId" : "cacb5aa0-c5b3-4333-932b-d7491d3cfbb8",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I am just referring to something that I know works.",
        "createdAt" : "2019-05-10T18:41:52Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\n+\n+The reader must be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+\n+Getting started with SBT"
  },
  {
    "id" : "db324beb-c8b7-4c36-9445-4036b5de7a4c",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "5debaf84-3fe7-4ca4-9a73-24bde4d5eb61",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This is missing?",
        "createdAt" : "2019-05-10T14:14:24Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2c671537-ea3a-4144-8234-edfe756fc322",
        "parentId" : "5debaf84-3fe7-4ca4-9a73-24bde4d5eb61",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yep, it is still WIP... it is a darf PR :)",
        "createdAt" : "2019-05-10T18:35:00Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,66 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+.. toctree::\n+  :hidden:\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+************\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using Scala programming language.\n+\n+There are two main components:\n+\n+- The Akka Streams based API\n+    The API to send commands to the ledger and receive transactions back.\n+\n+- Scala codegen\n+    DAML to Scala code generator. Generates Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (create command) and exercising contract choices (exercise command).\n+\n+The reader must be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+\n+Getting started with SBT\n+************************\n+\n+Setting up dependencies in ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains generated Scala ADTs.\n+- ``application``\n+    This is the application code that makes use of the generated Scala ADTs.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala ADTs from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Example code\n+************\n+\n+TODO: Explain ADTs here"
  },
  {
    "id" : "89452c1b-a297-4be8-908f-8d9e5ceb7787",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "16ae6213-f611-4969-9f12-20c0775eb669",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Since akka-streams is optional, we might not say that it is \"based on\" it here.",
        "createdAt" : "2019-05-13T02:08:51Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_."
  },
  {
    "id" : "43605eb7-40fd-42a7-a73b-067cc0f1e4e4",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "e06ccf84-398c-4c82-a53e-e10dbe91b339",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Likewise, we probably want to mention a third component, the akka-less API.",
        "createdAt" : "2019-05-13T02:09:08Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2e98875b-0a63-489c-aa9d-7ff6711f3430",
        "parentId" : "e06ccf84-398c-4c82-a53e-e10dbe91b339",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@stephencompall-DA what is that 3rd component? We have not tested Scala codegen with anything else but akka-based API.",
        "createdAt" : "2019-05-13T14:16:47Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c8f248e8-4c4b-4624-8991-85f3bbd23722",
        "parentId" : "e06ccf84-398c-4c82-a53e-e10dbe91b339",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "you technically can send generated commands using any existing API, doesn't have to be scala akka-based bindings, can be java rx-based api too. But the 3rd component... is something I am not aware of.",
        "createdAt" : "2019-05-13T14:21:11Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : 21,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+The Scala bindings is a client implementation of the *Ledger API*\n+based on `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_.\n+\n+Introduction\n+============\n+\n+The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back."
  },
  {
    "id" : "998cbf4f-93d0-4a75-84b8-2e39cd82da4f",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "af74433c-bac7-4196-9fdf-967e2072124d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "What build.sbt? Do you expect them to have this file already?",
        "createdAt" : "2019-05-14T10:38:12Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:"
  },
  {
    "id" : "61ca4ba3-c3e4-4f6e-acf2-7c0ad2c3cd30",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "98087b2c-e26d-4749-94f3-5b407deebee5",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Do you want to tell them to get the quickstart-scala example first?",
        "createdAt" : "2019-05-14T10:38:42Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:"
  },
  {
    "id" : "34a288f9-1622-4990-a7da-5e69e225f736",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "50bc2723-c93d-4c5a-8fee-0e055ae08503",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I'm a bit confused as to what you're doing here. Are you telling people how to do something, or are you showing them what an example build.sbt file looks like? You need to explicitly tell the reader what the purpose of the information you're giving them is.",
        "createdAt" : "2019-05-14T10:39:52Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt"
  },
  {
    "id" : "790af805-4e80-4ef2-b01d-927fd39b1c9f",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "898ec6f8-c537-4a51-a5dd-1356200ff378",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nYou can get the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`__ from the ``daml`` repository on GitHub.\r\n```\r\n\r\nI'm a bit anxious about this link - if you move or rewrite the example, it'll just break.",
        "createdAt" : "2019-05-14T10:40:24Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03baa98b-3de3-4c90-a24f-35395d57298d",
        "parentId" : "898ec6f8-c537-4a51-a5dd-1356200ff378",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "we should not be moving it. I thought the RST doc build tool actually checks if links exist",
        "createdAt" : "2019-05-14T13:55:21Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d5338f6f-0b62-453e-8ae8-c26264fb6849",
        "parentId" : "898ec6f8-c537-4a51-a5dd-1356200ff378",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "It checks if links internal to the docs exist. It doesn't have a way of checking links to external websites!",
        "createdAt" : "2019-05-14T13:57:42Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fc77152f-7c3e-4285-8f0d-6a53e2050282",
        "parentId" : "898ec6f8-c537-4a51-a5dd-1356200ff378",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I will see if I can change it to point to the symlink inside the docs that I created",
        "createdAt" : "2019-05-14T14:18:49Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "37f81f08-aa0c-407f-a78b-a0e1de60f2a2",
        "parentId" : "898ec6f8-c537-4a51-a5dd-1356200ff378",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I don't think that'll work - as far as I'm aware, that code file won't be published, so you won't be able to link to it within the docs site.\r\n\r\nYou might be able to make it a download link instead? Search \"sphinx download directive\" for how to do that - you'll want to [preview it locally](https://github.com/digital-asset/daml/blob/master/docs/README.md#previewing) and make sure it works, though",
        "createdAt" : "2019-05-14T14:20:25Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2308e39b-15e7-4603-9fbd-58e0f0662975",
        "parentId" : "898ec6f8-c537-4a51-a5dd-1356200ff378",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "In this case I will leave it for later as a tech debt (issue will be created)... I have a hard deadline to finish the docs by Thursday. We will not be moving the examples anywhere any time soon.",
        "createdAt" : "2019-05-14T14:47:59Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "277d661a-d82f-4b45-973b-5a35576374ad",
        "parentId" : "898ec6f8-c537-4a51-a5dd-1356200ff378",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "#1134",
        "createdAt" : "2019-05-14T15:05:15Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_"
  },
  {
    "id" : "b011b30b-5503-4e1f-84bf-c870562c6e7c",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "bba9a51d-3b43-4f5c-a9ad-2e32835f51ea",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Not sure why the capital letters here?\r\n\r\n```suggestion\r\nGenerating Scala code from the command line\r\n```",
        "createdAt" : "2019-05-14T10:41:38Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line"
  },
  {
    "id" : "d3e787d1-73c2-4da4-a4c8-25dae6124f61",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "01b0d04b-af5a-490a-adc6-f90a2a90de04",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "\"For information on how to build a **DAR** file\" comes completely out of the blue here - you haven't told anyone why they'd need to care about it at all! \r\n\r\nI'd suggest rewriting this as a set of instructions:\r\n\r\n1. If you're not on the latest, upgrade the SDK\r\n2. Download the codegen tool\r\n3. Build the DAR file (this is the right place to link to instructions)\r\n4. Run the codegend tool.\r\n\r\nThe reason for this is that you need to help people out: you're giving them a bunch of information but it's not in the logical order that they'd need to follow it in, so it makes it much tougher to use this doc.",
        "createdAt" : "2019-05-14T10:44:02Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`."
  },
  {
    "id" : "2a88815b-b1a7-4b4d-b36f-591609441f85",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "b365a46e-2540-4c71-b55e-d152c1632c14",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "You haven't told users what this section is about! Can you write a brief introduction saying what they'll learn from reading it - eg, this section shows you how to use the Scala bindings to achieve common tasks?",
        "createdAt" : "2019-05-14T10:44:52Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : 99,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and"
  },
  {
    "id" : "e802f483-5e14-42df-b84f-daf38dbf65c0",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "9dd2f14f-f220-4cea-90d4-b0728a2869de",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Can you tell me why this is important?",
        "createdAt" : "2019-05-14T10:45:14Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option."
  },
  {
    "id" : "19adabd7-ab3d-4c45-868b-8915cb74dfa4",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "4eabb4c5-ea8e-4878-bcbf-4ada414734b9",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nCreate a contract and send a create command\r\n```\r\n\r\nAgain, no need for capital letters.\r\n\r\nAren't 'creating a contract' and 'sending a create command' the same thing?",
        "createdAt" : "2019-05-14T10:45:42Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command"
  },
  {
    "id" : "185c2e25-66ea-4d04-bd4a-86409684d8e2",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "d1a721b3-138e-4352-b232-9998ef9dfeee",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "You don't need the :: on a separate line, you can have it at the end of the previous one. ",
        "createdAt" : "2019-05-14T10:46:09Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::"
  },
  {
    "id" : "4b8cfa9f-5ca4-4a8c-aa2d-116e088b0577",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "02772b19-1a7d-4d40-95af-d846412ab148",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Could you `literalinclude` this from somewhere rather than having it inline? Otherwise there's no guarantee this code won't break.",
        "createdAt" : "2019-05-14T10:46:32Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}"
  },
  {
    "id" : "1436dee8-04bd-4a0b-9dc6-ea9bba45deb0",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "319998d2-b6d2-47d1-a775-12eb46f814ba",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Same comment as above, can you use a literalinclude?",
        "createdAt" : "2019-05-14T10:46:47Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}\n+    import com.digitalasset.quickstart.iou.model.{Iou => M}\n+    ...\n+    private val issuer = P.Party(\"Alice\")\n+    ...\n+\n+    val iou = M.Iou(\n+      issuer = issuer,\n+      owner = issuer,\n+      currency = \"USD\",\n+      amount = BigDecimal(\"1000.00\"),\n+      observers = List())\n+\n+To send a corresponding create command:\n+::\n+\n+    val createCmd = iou.create"
  },
  {
    "id" : "de7621c1-63e8-4914-8393-fd308faf2ec2",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "5f39e870-9c7b-48f3-8f61-dca10c5a5f83",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "What exactly will they find out from reading that? ie - what are the more details?",
        "createdAt" : "2019-05-14T10:47:06Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}\n+    import com.digitalasset.quickstart.iou.model.{Iou => M}\n+    ...\n+    private val issuer = P.Party(\"Alice\")\n+    ...\n+\n+    val iou = M.Iou(\n+      issuer = issuer,\n+      owner = issuer,\n+      currency = \"USD\",\n+      amount = BigDecimal(\"1000.00\"),\n+      observers = List())\n+\n+To send a corresponding create command:\n+::\n+\n+    val createCmd = iou.create\n+    clientUtil.submitCommand(issuer, issuerWorkflowId, createCmd)\n+\n+For more details, please refer to the implementation of `com.digitalasset.quickstart.iou.ClientUtil#submitCommand <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/ClientUtil.scala>`_."
  },
  {
    "id" : "80d2ea52-8ca7-4ce0-a065-074c38eebcc6",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "bbeb6b7f-0015-4194-89cd-5005ca4cf659",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nReceive a transaction, exercise a choice and send an exercise command\r\n```\r\n\r\nReceive a transaction feels like a separate task to me?",
        "createdAt" : "2019-05-14T10:47:33Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}\n+    import com.digitalasset.quickstart.iou.model.{Iou => M}\n+    ...\n+    private val issuer = P.Party(\"Alice\")\n+    ...\n+\n+    val iou = M.Iou(\n+      issuer = issuer,\n+      owner = issuer,\n+      currency = \"USD\",\n+      amount = BigDecimal(\"1000.00\"),\n+      observers = List())\n+\n+To send a corresponding create command:\n+::\n+\n+    val createCmd = iou.create\n+    clientUtil.submitCommand(issuer, issuerWorkflowId, createCmd)\n+\n+For more details, please refer to the implementation of `com.digitalasset.quickstart.iou.ClientUtil#submitCommand <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/ClientUtil.scala>`_.\n+\n+Receive a Transaction, Exercise a Choice and Send an Exercise Command"
  },
  {
    "id" : "c707c96f-ac96-47a7-8823-57c538f899a7",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "f816f623-2e53-46b4-bb5f-7ed9947e5f20",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Same comment as above - please use a literalinclude",
        "createdAt" : "2019-05-14T10:47:47Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}\n+    import com.digitalasset.quickstart.iou.model.{Iou => M}\n+    ...\n+    private val issuer = P.Party(\"Alice\")\n+    ...\n+\n+    val iou = M.Iou(\n+      issuer = issuer,\n+      owner = issuer,\n+      currency = \"USD\",\n+      amount = BigDecimal(\"1000.00\"),\n+      observers = List())\n+\n+To send a corresponding create command:\n+::\n+\n+    val createCmd = iou.create\n+    clientUtil.submitCommand(issuer, issuerWorkflowId, createCmd)\n+\n+For more details, please refer to the implementation of `com.digitalasset.quickstart.iou.ClientUtil#submitCommand <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/ClientUtil.scala>`_.\n+\n+Receive a Transaction, Exercise a Choice and Send an Exercise Command\n+---------------------------------------------------------------------\n+\n+To receive a transaction and decode a create event for ``IouTransfer`` contract:\n+::\n+\n+    private val newOwner = P.Party(\"Bob\")"
  },
  {
    "id" : "ac0d0307-8b2b-48cf-baa5-28614a7468e7",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "5f262987-9bab-4b14-8b3f-5e8413988aaf",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Same comment as above - please use a literalinclude",
        "createdAt" : "2019-05-14T10:47:51Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}\n+    import com.digitalasset.quickstart.iou.model.{Iou => M}\n+    ...\n+    private val issuer = P.Party(\"Alice\")\n+    ...\n+\n+    val iou = M.Iou(\n+      issuer = issuer,\n+      owner = issuer,\n+      currency = \"USD\",\n+      amount = BigDecimal(\"1000.00\"),\n+      observers = List())\n+\n+To send a corresponding create command:\n+::\n+\n+    val createCmd = iou.create\n+    clientUtil.submitCommand(issuer, issuerWorkflowId, createCmd)\n+\n+For more details, please refer to the implementation of `com.digitalasset.quickstart.iou.ClientUtil#submitCommand <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/ClientUtil.scala>`_.\n+\n+Receive a Transaction, Exercise a Choice and Send an Exercise Command\n+---------------------------------------------------------------------\n+\n+To receive a transaction and decode a create event for ``IouTransfer`` contract:\n+::\n+\n+    private val newOwner = P.Party(\"Bob\")\n+    ...\n+    clientUtil.subscribe(newOwner, offset0, None) { tx =>\n+      logger.info(s\"$newOwner received transaction: $tx\")\n+      decodeCreated[M.IouTransfer](tx).foreach { contract: Contract[M.IouTransfer] =>\n+        logger.info(s\"$newOwner received contract: $contract\")\n+        ...\n+      }\n+    }\n+\n+To exercise ``IouTransfer_Accept`` choice on the received ``IourTransfer`` contract and send a corresponding exercise command:\n+::\n+\n+    val exerciseCmd = contract.contractId.exerciseIouTransfer_Accept(actor = newOwner)"
  },
  {
    "id" : "ce43666a-7bbf-4bd1-ad6c-f42bf976dd6a",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "b81ae014-13c1-4a36-9b4b-78ba619bb77c",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Could you also write some comments in this code to explain what it's doing?",
        "createdAt" : "2019-05-14T10:48:20Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4830ca67-3ac8-48bb-af57-b96a0e054398",
        "parentId" : "b81ae014-13c1-4a36-9b4b-78ba619bb77c",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I don't think that creating a Party instance needs explanations.",
        "createdAt" : "2019-05-14T15:20:50Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bc2cc24b-0d33-4629-a201-c66cfacfef94",
        "parentId" : "b81ae014-13c1-4a36-9b4b-78ba619bb77c",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I just put the comment here as it was the start of the code snippet - I leave it to you to best decide which bits of the code are worthwhile commenting. But in general just giving some descriptive comments is helpful in documentation - more than you would in your own source code",
        "createdAt" : "2019-05-14T15:59:02Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b13b38e-3656-4636-99b1-6edf0ab7086f",
        "parentId" : "b81ae014-13c1-4a36-9b4b-78ba619bb77c",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I think the doc reference comments and the logging calls should be enough to figure out what the following code snippet supposed to do:\r\n``` \r\n    // <doc-ref:subscribe-and-decode-iou-transfer>\r\n    _ <- clientUtil.subscribe(newOwner, offset0, None) { tx =>\r\n      logger.info(s\"$newOwner received transaction: $tx\")\r\n```\r\nSorry, I will not add more comments explaining what the example does. I prefer to receive a feed back from the developers looking at the example and make it cleaner if needed.",
        "createdAt" : "2019-05-14T19:56:32Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}\n+    import com.digitalasset.quickstart.iou.model.{Iou => M}\n+    ...\n+    private val issuer = P.Party(\"Alice\")\n+    ...\n+\n+    val iou = M.Iou(\n+      issuer = issuer,\n+      owner = issuer,\n+      currency = \"USD\",\n+      amount = BigDecimal(\"1000.00\"),\n+      observers = List())\n+\n+To send a corresponding create command:\n+::\n+\n+    val createCmd = iou.create\n+    clientUtil.submitCommand(issuer, issuerWorkflowId, createCmd)\n+\n+For more details, please refer to the implementation of `com.digitalasset.quickstart.iou.ClientUtil#submitCommand <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/ClientUtil.scala>`_.\n+\n+Receive a Transaction, Exercise a Choice and Send an Exercise Command\n+---------------------------------------------------------------------\n+\n+To receive a transaction and decode a create event for ``IouTransfer`` contract:\n+::\n+\n+    private val newOwner = P.Party(\"Bob\")"
  },
  {
    "id" : "384daddd-bf8b-467e-84b4-85caf78d65fd",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "c3d75ca5-fd9c-4f77-a5b7-02a871d9c79d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Same as above - what will they learn from this? Be specific as to why they should follow the link, what it will help them with.",
        "createdAt" : "2019-05-14T10:48:46Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the *Ledger API*.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started with sbt\n+========================\n+\n+Set up the following dependencies in your ``build.sbt``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+Here is the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`_\n+\n+Generating Scala Code from Command Line\n+=======================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line. For information on how to build a **DAR** file from a **DAML** model see :ref:`assistant-manual-building-dars`.\n+\n+You can download the `latest version <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_\n+of the Scala codegen command line interface. Make sure that this versions is aligned with the version of the SDK you used to build the **DAR** file.\n+\n+To run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala sbt example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+Please keep in mind that all Scala examples compiled with ``-Xsource:2.13`` **scalac** option.\n+\n+Create a Contract and Send a Create Command\n+-------------------------------------------\n+\n+To create a Scala class representing an ``Iou`` contract:\n+::\n+\n+    import com.digitalasset.ledger.client.binding.{Primitive => P}\n+    import com.digitalasset.quickstart.iou.model.{Iou => M}\n+    ...\n+    private val issuer = P.Party(\"Alice\")\n+    ...\n+\n+    val iou = M.Iou(\n+      issuer = issuer,\n+      owner = issuer,\n+      currency = \"USD\",\n+      amount = BigDecimal(\"1000.00\"),\n+      observers = List())\n+\n+To send a corresponding create command:\n+::\n+\n+    val createCmd = iou.create\n+    clientUtil.submitCommand(issuer, issuerWorkflowId, createCmd)\n+\n+For more details, please refer to the implementation of `com.digitalasset.quickstart.iou.ClientUtil#submitCommand <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/ClientUtil.scala>`_.\n+\n+Receive a Transaction, Exercise a Choice and Send an Exercise Command\n+---------------------------------------------------------------------\n+\n+To receive a transaction and decode a create event for ``IouTransfer`` contract:\n+::\n+\n+    private val newOwner = P.Party(\"Bob\")\n+    ...\n+    clientUtil.subscribe(newOwner, offset0, None) { tx =>\n+      logger.info(s\"$newOwner received transaction: $tx\")\n+      decodeCreated[M.IouTransfer](tx).foreach { contract: Contract[M.IouTransfer] =>\n+        logger.info(s\"$newOwner received contract: $contract\")\n+        ...\n+      }\n+    }\n+\n+To exercise ``IouTransfer_Accept`` choice on the received ``IourTransfer`` contract and send a corresponding exercise command:\n+::\n+\n+    val exerciseCmd = contract.contractId.exerciseIouTransfer_Accept(actor = newOwner)\n+    clientUtil.submitCommand(newOwner, newOwnerWorkflowId, exerciseCmd)\n+\n+Fore more details, please refer to the `com.digitalasset.quickstart.iou.IouMain#newOwnerAcceptsAllTransfers <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala>`_."
  },
  {
    "id" : "6ab5c0ca-366a-4984-a756-ca37c644ead6",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "19e2b6a7-e418-434a-b412-180667205d91",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I wouldn't call this a tutorial - a tutorial walks you through step by step how to achieve something. I would just say \"this page\".",
        "createdAt" : "2019-05-14T10:49:13Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,144 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This tutorial provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,"
  },
  {
    "id" : "05c1026b-1668-4936-bd0c-bf0037397928",
    "prId" : 1025,
    "comments" : [
      {
        "id" : "a7eaae71-c0b7-4cb8-9b14-8bd8bac6818b",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\nTo exercise ``IouTransfer_Accept`` choice on the ``IouTransfer`` contract that you received and send a corresponding :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand`:\r\n```",
        "createdAt" : "2019-05-14T21:41:00Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81e9bcb7-eb9c-4152-8de5-e1d06a700a0c",
        "parentId" : "a7eaae71-c0b7-4cb8-9b14-8bd8bac6818b",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "thanks... but the ref link is no caps.",
        "createdAt" : "2019-05-15T12:17:02Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "350c04bb-306c-45b0-bff2-86dacea75d03",
        "parentId" : "a7eaae71-c0b7-4cb8-9b14-8bd8bac6818b",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "actually the doc build tool takes references in camel notation too and converts them to lower case, but I like camel... more readable. Going to check the rest of the link in the doc.",
        "createdAt" : "2019-05-15T12:59:29Z",
        "updatedAt" : "2019-05-15T13:07:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbca296d77714be8ded267bf6a5db60f2e714bd2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,154 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Scala bindings\n+##############\n+\n+This page provides a basic Scala programmer's introduction to working with Digital Asset distributed ledger,\n+using the Scala programming language and the **Ledger API**.\n+\n+Introduction\n+============\n+\n+The Scala bindings is a client implementation of the *Ledger API*. The Scala bindings library lets you write applications that connect to the Digital Asset distributed ledger using the Scala programming language.\n+\n+There are two main components:\n+\n+- Scala codegen\n+    DAML to Scala code generator. Use this to generate Scala classes from DAML models. The generated Scala code provides a type safe way of creating contracts (:ref:`com.digitalasset.ledger.api.v1.createcommand`) and exercising contract choices (:ref:`com.digitalasset.ledger.api.v1.exercisecommand`).\n+\n+- Akka Streams-based API\n+    The API that you use to send commands to the ledger and receive transactions back.\n+\n+In order to use the Scala bindings, you should be familiar with:\n+\n+- :doc:`DAML language </daml/reference/index>`\n+- :doc:`Ledger API </app-dev/grpc/index>`\n+- `Akka Streams API <https://doc.akka.io/docs/akka/current/stream/index.html>`_\n+- `Scala programming language <https://www.scala-lang.org>`_\n+- :ref:`assistant-manual-building-dars`\n+\n+Getting started\n+===============\n+\n+If this is your first experience with the Scala bindings library, we recommend that you start by looking at the\n+`quickstart-scala example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_.\n+\n+To use the Scala bindings, set up the following dependencies in your project:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:dependencies>\n+   :end-before: // </doc-ref:dependencies>\n+\n+We recommend separating generated code and application code into different modules. There are two modules in the example below:\n+\n+- ``scala-codegen``\n+    This modules contains all generated Scala classes.\n+- ``application``\n+    This is the application code that makes use of the generated Scala classes.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:modules>\n+   :end-before: // </doc-ref:modules>\n+\n+``scala-codegen`` module uses the following function to generate Scala classes from a DAR file.\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/build.sbt\n+   :start-after: // <doc-ref:generate-scala>\n+   :end-before: // </doc-ref:generate-scala>\n+\n+You can get the entire `build.sbt file <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/build.sbt>`__ from the ``daml`` repository on GitHub.\n+\n+Generating Scala code from the command line\n+===========================================\n+\n+The above example demonstrates how to use Scala codegen from **sbt**. You can also call Scala codegen directly\n+from a command line.\n+\n+\n+1) Install :doc:`the latest version of the DAML SDK </getting-started/installation>`.\n+\n+2) Download `the latest version of the Scala codegen command line interface <https://bintray.com/api/v1/content/digitalassetsdk/DigitalAssetSDK/com/daml/codegen-main/$latest/codegen-main-$latest.jar?bt_package=sdk-components>`_.\n+\n+3) Build a **DAR** file from a **DAML** model. Refer to :ref:`assistant-manual-building-dars` for more instructions.\n+\n+4) Run Scala codegen::\n+\n+    $ java -jar <parth-to-codegen-main-jar> scala <path-to-DAR-file>=<package-name> \\\n+        --output-directory=<path-to-output-directory> --verbosity=<0|1|2|3|4>\n+\n+Here is an example, assuming SDK Version: **0.12.17**, DAR file: **./quickstart-scala.dar**,\n+package name: **com.digitalasset.quickstart.iou.model**, codegen output directory: **./codegen-out** and\n+verbosity level: **2** (INFO)::\n+\n+    $ java -jar codegen-main-100.12.17.jar scala ./quickstart-scala.dar=com.digitalasset.quickstart.iou.model \\\n+        --output-directory=./codegen-out --verbosity=2\n+    ...\n+    [INFO ] Scala Codegen result:\n+    Number of generated templates: 3\n+    Number of not generated templates: 0\n+    Details:\n+\n+The output above tells that codegen produced Scala classes for 3 templates without errors (empty ``Details:`` line).\n+\n+Example code\n+============\n+\n+In this section we will demonstrate how to use the Scala bindings library.\n+\n+This section refers to the IOU DAML example from the :doc:`Quickstart guide </getting-started/quickstart>` and\n+`quickstart-scala example <https://github.com/digital-asset/daml/tree/master/language-support/scala/examples/quickstart-scala>`_ that we already mentioned above.\n+\n+Please keep in mind that **quickstart-scala example** compiles with ``-Xsource:2.13`` **scalac** option, this is to activate the fix for a Scala bug that forced users to add extra imports for implicits that should not be needed.\n+\n+Create a contract and send a CreateCommand\n+------------------------------------------\n+\n+To create a Scala class representing an **IOU** contract, you need the following **imports**:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:imports>\n+   :end-before: // </doc-ref:imports>\n+\n+the definition of the **issuer** ``Party``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:issuer-definition>\n+   :end-before: // </doc-ref:issuer-definition>\n+\n+and the following code to create an instance of the ``M.Iou`` class:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:iou-contract-instance>\n+   :end-before: // </doc-ref:iou-contract-instance>\n+\n+To send a :ref:`com.digitalasset.ledger.api.v1.createcommand` (keep in mind the following code snippet is part of the Scala *for comprehension expression*):\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:submit-iou-create-command>\n+   :end-before: // </doc-ref:submit-iou-create-command>\n+\n+For more details on how to submit a command, please refer to the implementation of `com.digitalasset.quickstart.iou.ClientUtil#submitCommand <https://github.com/digital-asset/daml/blob/master/language-support/scala/examples/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/ClientUtil.scala>`_.\n+\n+Receive a transaction, exercise a choice and send an ExerciseCommand\n+---------------------------------------------------------------------\n+\n+To receive a transaction as a **newOwner** and decode a :ref:`com.digitalasset.ledger.api.v1.createdevent` for ``IouTransfer`` contract, you need the definition of the **newOwner** ``Party``:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:new-owner-definition>\n+   :end-before: // </doc-ref:new-owner-definition>\n+\n+and the following code that handles subscription and decoding:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:subscribe-and-decode-iou-transfer>\n+   :end-before: // </doc-ref:subscribe-and-decode-iou-transfer>\n+\n+To exercise ``IouTransfer_Accept`` choice on the ``IourTransfer`` contract that you received and send a corresponding :ref:`com.digitalasset.ledger.api.v1.exercisecommand`:"
  }
]