[
  {
    "id" : "1ae5be10-e7a4-4971-a99c-c60684404f41",
    "prId" : 5664,
    "comments" : [
      {
        "id" : "4a5bf849-b54e-40a2-a86f-cf096984852c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we add this information somewhere in the protobuf tarball, e.g., some readme file?",
        "createdAt" : "2020-04-22T09:00:09Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5193d390-8ae0-4362-b7bc-1e155a127f27",
        "parentId" : "4a5bf849-b54e-40a2-a86f-cf096984852c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sure. It's a bit unclear to me, though, which rule originates the tarball published on the GitHub releases page. Do you remember it off the top of your head?",
        "createdAt" : "2020-04-22T09:08:48Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a14a07a9-9c5f-4083-ad5c-6e61798bd2d1",
        "parentId" : "4a5bf849-b54e-40a2-a86f-cf096984852c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I found this in `artifacts.yml` but I'm not 100% sure:\r\n```yaml\r\n- target: //ledger-api/grpc-definitions:ledger-api-protos-tarball\r\n  type: targz\r\n  location:\r\n    groupId: com.daml\r\n    artifactId: ledger-api-protos\r\n```",
        "createdAt" : "2020-04-22T09:09:43Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cdfedbd1-55d2-44f1-a9f3-3ebc67f526ae",
        "parentId" : "4a5bf849-b54e-40a2-a86f-cf096984852c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It comes from https://github.com/digital-asset/daml/blob/246d246ee500464f034ce841f0f3942575f1fd0d/release/util.bzl#L86. The line you are showing here should no longer be in `artifacts.yaml` and `artifacts.yaml` is completely unrelated to github releases. It only defines Maven artifacts.",
        "createdAt" : "2020-04-22T09:14:02Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "abdd0d15-692d-4356-a665-d487eb0cee43",
        "parentId" : "4a5bf849-b54e-40a2-a86f-cf096984852c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ok, it looks like you're packaging together the contents of `//ledger-api/grpc-definitions:ledger-api-protos.tar.gz` with the DAML-LF stuff. There is probably not much to gain in having it always around, but for simplicity I think I'll just add the `README.md` to the tarball.",
        "createdAt" : "2020-04-22T09:45:00Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b18fe5ed-6846-4e53-af6a-b642db6b1cb6",
        "parentId" : "4a5bf849-b54e-40a2-a86f-cf096984852c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```\r\n> tar tf bazel-bin/ledger-api/grpc-definitions/ledger-api-protos.tar.gz\r\n./\r\n./com/\r\n...\r\n./com/daml/ledger/api/v1/value.proto\r\n./README.md\r\n```",
        "createdAt" : "2020-04-22T10:01:28Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "30a16209-043f-4a40-9427-c77feddb80c6",
        "parentId" : "4a5bf849-b54e-40a2-a86f-cf096984852c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5664/commits/9e09c02dd823490a7f35019b1d348ae226bfe395",
        "createdAt" : "2020-04-22T10:05:48Z",
        "updatedAt" : "2020-04-22T10:05:48Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9e09c02dd823490a7f35019b1d348ae226bfe395",
    "line" : null,
    "diffHunk" : "@@ -94,4 +94,13 @@ Links\n \n - gRPC documentation: https://grpc.io/docs/\n \n-- DAML Ledger API gRPC protobuf definitions: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions\n+- DAML Ledger API gRPC protobuf definitions"
  },
  {
    "id" : "24ed754d-09fc-47db-be1d-ce6d6b2fa234",
    "prId" : 5664,
    "comments" : [
      {
        "id" : "acb3faf9-5492-4e58-b77f-1d2c2b466c6e",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Hm, we never refer to this in any protobuf file, but it's only used for the reflection service, so not really needed for building bindings. WDYT?",
        "createdAt" : "2020-04-22T09:10:54Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d846e4ab-e791-4215-b418-e6ac53125d00",
        "parentId" : "acb3faf9-5492-4e58-b77f-1d2c2b466c6e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Don't you need it to make something that interacts with the reflection service? I added it to the optional category.",
        "createdAt" : "2020-04-22T09:13:18Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "853be355-0710-4e1b-9173-c4d57bdde542",
        "parentId" : "acb3faf9-5492-4e58-b77f-1d2c2b466c6e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, thinking better about it, I think it makes sense to just drop this.",
        "createdAt" : "2020-04-22T09:50:35Z",
        "updatedAt" : "2020-04-22T10:05:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c1a8d56-4307-4a2e-bba5-e236aa2b2a7c",
        "parentId" : "acb3faf9-5492-4e58-b77f-1d2c2b466c6e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5664/commits/9e09c02dd823490a7f35019b1d348ae226bfe395",
        "createdAt" : "2020-04-22T10:06:00Z",
        "updatedAt" : "2020-04-22T10:06:00Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b143d95-eb30-420e-8a71-df586c2fa9e5",
        "parentId" : "acb3faf9-5492-4e58-b77f-1d2c2b466c6e",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "sure, but we pretty much only added the reflection service so that `grpcurl` works nicely, iirc.",
        "createdAt" : "2020-04-22T10:27:15Z",
        "updatedAt" : "2020-04-22T10:27:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9e09c02dd823490a7f35019b1d348ae226bfe395",
    "line" : null,
    "diffHunk" : "@@ -94,4 +94,13 @@ Links\n \n - gRPC documentation: https://grpc.io/docs/\n \n-- DAML Ledger API gRPC protobuf definitions: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions\n+- DAML Ledger API gRPC protobuf definitions\n+    - current master: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions\n+    - for specific versions: https://github.com/digital-asset/daml/releases\n+\n+- External required protobuf definitions:\n+    - https://raw.githubusercontent.com/grpc/grpc/v1.18.0/src/proto/grpc/status/status.proto\n+    - https://raw.githubusercontent.com/grpc/grpc/v1.18.0/src/proto/grpc/health/v1/health.proto\n+\n+- External optional protobuf definitions:\n+    - https://raw.githubusercontent.com/grpc/grpc/v1.18.0/src/proto/grpc/reflection/v1alpha/reflection.proto"
  },
  {
    "id" : "d09138e2-f805-4234-8901-e68a876898f0",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "2c10f81a-e265-44b7-b9c7-9a6221f705f7",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\nIf you do not specify `party` field or type its name or value incorrectly, or don't order the fields exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly. Codegen is expected to simplify the command construction by providing auto-generated utilities to help you construct commands. Here is how a similar contract instantiation would look if you are using Scala codegen to generate contract classes::\r\n```",
        "createdAt" : "2019-06-07T20:55:19Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,46 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- Java\n+\n+- Scala\n+\n+- Node.js\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions back. Generated from gRPC protobuf definitions: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code responsible for constructing: (:ref:`com.digitalasset.ledger.api.v1.CreateCommand`) and (:ref:`com.digitalasset.ledger.api.v1.ExerciseCommand`) corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct (:ref:`com.digitalasset.ledger.api.v1.CreateCommand`) and (:ref:`com.digitalasset.ledger.api.v1.ExerciseCommand`) manually. However this is very tedious and error-prone.\n+\n+Here is an example of constructing a :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for contract template with one field: `party` ::\n+\n+\n+  val fields = Seq(RecordField(\"party\", Some(Value(party))))\n+  val command =\n+    Command.Create(\n+      CreateCommand(\n+        templateId = Some(templateId),\n+        createArguments = Some(Record(Some(templateId), fields))))\n+\n+if you do not specify `party` field or type it's name or value incorrectly, the above code will compile but fail in run-time because you did not structure you create command correctly. Codegen is expected to simplify the command construction by providing an auto-generated utilities to help you constructing commands. E.g. here is how a similar contract instantiation would look if you are using a scala codegen to generate contract classes::"
  },
  {
    "id" : "15f41493-0016-44d0-bbbc-8b80edbd9b0d",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "38889388-7678-45f2-a80b-e7181e104374",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n- decide whether to write a codegen to generate contract classes or manually build commands for all contracts defined in your DAML model.\r\n```",
        "createdAt" : "2019-06-10T16:22:15Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.\n+\n+Building Create Command\n+=======================\n+\n+Let's recall an **IOU** example from the :doc:`Quickstart guide </getting-started/quickstart>`, where `Iou` template is defined like this:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 9-15\n+\n+Here is how to manually build :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-create-command>\n+   :end-before: // </doc-ref:iou-no-codegen-create-command>\n+\n+If you do not specify any of the above fields or type their names or values incorrectly, or do not order them exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly. Codegen is expected to simplify the command construction by providing auto-generated utilities to help you construct commands.\n+\n+When you use :doc:`Scala codegen </app-dev/bindings-scala/index>` to generate contract classes, a similar contract instantiation would look:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:iou-contract-instance>\n+   :end-before: // </doc-ref:iou-contract-instance>\n+\n+Building Exercise Command\n+=========================\n+\n+To build :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` for `Iou_Transfer`:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 23, 52-55\n+\n+manually in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-exercise-command>\n+   :end-before: // </doc-ref:iou-no-codegen-exercise-command>\n+\n+versus creating the same command using a value class generated by :doc:`Scala codegen </app-dev/bindings-scala/index>`:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:iou-exercise-transfer-cmd>\n+   :end-before: // </doc-ref:iou-exercise-transfer-cmd>\n+\n+Summary\n+=======\n+\n+If you are creating custom bindings for the Digital Asset distributed ledger, you will need to:\n+\n+- generate **Ledger API** from the gRPC definitions\n+\n+- decide if you write a codegen to generate contract classes or you manually build commands for all contracts defined in your DAML model."
  },
  {
    "id" : "aba0e239-d723-4a68-92b6-6c0bdea5e1d6",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "8d887f5c-7a3e-4f81-a5a0-a43b76d943a3",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I find the \"x\" phrasing a bit hard to follow - I've suggested an alternative here.\r\n```suggestion\r\nWhat do we mean by \"bindings\"? Bindings for a language consist of two main components:\r\n```",
        "createdAt" : "2019-06-11T08:48:52Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:"
  },
  {
    "id" : "756cdadb-46e8-4b3d-98bf-2aea191f4c4b",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "0fede3f1-c162-41e2-a6e8-8b96b5ac6dd5",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I didn't quite follow what this was saying. I've tried to edit it so it says what I think it's trying to say, but please tell me if I was incorrect!\r\n```suggestion\r\n    Client \"stubs\" for the language, based on the ledger API that allows sending ledger commands and receiving ledger transactions. You need to generate these from `the gRPC protobuf definitions in the daml repository on GitHub <https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions>`__ and documented on this page: :doc:`/app-dev/grpc/index`.\r\n```",
        "createdAt" : "2019-06-11T08:51:10Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3ed04ea1-eb70-49f2-8680-e0936bd26532",
        "parentId" : "0fede3f1-c162-41e2-a6e8-8b96b5ac6dd5",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "going to accept parts of the suggested changes. I want to explain that Ledger API is client stubs, AKA remote API.",
        "createdAt" : "2019-06-11T13:41:22Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4197dde-e259-4d7d-8fd8-3d73288f3345",
        "parentId" : "0fede3f1-c162-41e2-a6e8-8b96b5ac6dd5",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Great, that sounds really helpful",
        "createdAt" : "2019-06-11T13:42:52Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`"
  },
  {
    "id" : "4680d005-90d7-4093-97d6-8934733e2394",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "5daffc94-de21-4471-9f1f-983c33456095",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Similar changes to above.\r\n```suggestion\r\n    A code generator is program that generates classes representing DAML contract templates in the language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\r\n```",
        "createdAt" : "2019-06-11T08:51:44Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template."
  },
  {
    "id" : "227a7ece-adf8-4e28-8f23-ff6d648e41ee",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "12a0e7da-e491-472e-8304-e7330a230618",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nTechnically codegen is optional: you could construct the commands manually. However it is very tedious and error-prone, so we recommend including codegen in your bindings.\r\n```",
        "createdAt" : "2019-06-11T08:52:16Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c7529fc5-2091-41bc-ba64-e5c00d0e584d",
        "parentId" : "12a0e7da-e491-472e-8304-e7330a230618",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I don't agree with this... Codegen will be an overkill for a small project with 5-10 templates. You will spend 2-3 months creating a proper codegen vs 2-3 weeks of manually constructing the commands. It all depends on what users want to achieve. ",
        "createdAt" : "2019-06-11T14:01:08Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e423eada-48d0-4dc6-b20a-4236bc084ef9",
        "parentId" : "12a0e7da-e491-472e-8304-e7330a230618",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Ah, I see - I over-extrapolated from what you wrote. In that case could you edit it so it reflects the comment you just made? Maybe something like it makes sense for a big/long-term project, but for short projects is overkill",
        "createdAt" : "2019-06-11T14:03:19Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0db29646-a41a-423b-8167-69fb0dc78c78",
        "parentId" : "12a0e7da-e491-472e-8304-e7330a230618",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yep... done. Let me know if it reads ok.",
        "createdAt" : "2019-06-11T14:56:24Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone."
  },
  {
    "id" : "bd5058c1-93f7-449c-b5be-092dd73a29f7",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "eb6cef23-95ca-4443-8064-fab27253bfda",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I think this might make it clearer in the TOC what you'll get from reading this page?\r\n```suggestion\r\nCreating your own bindings\r\n```",
        "createdAt" : "2019-06-11T08:54:19Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings"
  },
  {
    "id" : "5ddd51f2-5111-4bc8-ab23-b3cc99400c5c",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "3554f2bb-8f76-4b45-8be2-e7ae57bb432a",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Needs extending but I don't know by how many characters.",
        "createdAt" : "2019-06-11T08:54:33Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############"
  },
  {
    "id" : "05f4caf0-6945-4bcf-b552-81d3cc9c39e7",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "a44c391d-dec0-4668-b1e7-89f9e218ceaf",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This maybe makes more sense in a list of languages?\r\n```suggestion\r\n- :doc:`JavaScript (Node.js) </app-dev/bindings-js>`\r\n```",
        "createdAt" : "2019-06-11T08:56:53Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`"
  },
  {
    "id" : "35fa4c79-5ecf-4f0e-8a8c-dc11db71d7e0",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "846f22dc-2cf5-4a20-846c-ae671b737d6b",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Making the phrasing more direct\r\n```suggestion\r\nHowever, you can create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\r\n```",
        "createdAt" : "2019-06-11T08:57:11Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_."
  },
  {
    "id" : "abd755ff-dee8-41cc-8cc7-957f5f7230df",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "d91911e2-fe1e-4e6c-a6d5-0446d0e486a0",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "It's hard to understand what this relates to without any context. Could you write a little introduction maybe? I'm guessing this is something like \"the following section shows the difference between manually building a create command, and building a create command when you've implemented code generation\".\r\n\r\nI guess the purpose of this section is to show people that codegen is worthwhile? Or does it do other things for the user too?",
        "createdAt" : "2019-06-11T08:59:48Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "61975511-ee17-4799-8482-27638b2f5e26",
        "parentId" : "d91911e2-fe1e-4e6c-a6d5-0446d0e486a0",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "updated",
        "createdAt" : "2019-06-11T15:50:27Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.\n+\n+Building Create Command"
  },
  {
    "id" : "71389863-fceb-4971-ad6d-8baa5532dd08",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "fd9d91c7-39e6-4cff-ad4d-fb51cbafe439",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Tiny grammar tweak\r\n```suggestion\r\nHere is how to manually build a :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:\r\n```",
        "createdAt" : "2019-06-11T09:00:10Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.\n+\n+Building Create Command\n+=======================\n+\n+Let's recall an **IOU** example from the :doc:`Quickstart guide </getting-started/quickstart>`, where `Iou` template is defined like this:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 9-15\n+\n+Here is how to manually build :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:"
  },
  {
    "id" : "00fe59e6-ff83-410a-a7fe-e628f2f60fa8",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "65a61393-6c49-46ab-b974-aa055dc9d97d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Just suggesting breaking this up slightly differently. \r\n```suggestion\r\nIf you do not specify any of the above fields or type their names or values incorrectly, or do not order them exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly.\r\n\r\nCodegen will usually simplify the command construction by providing auto-generated utilities to help you construct commands. For example, when you use :doc:`Scala codegen </app-dev/bindings-scala/index>` to generate contract classes, a similar contract instantiation would look like this:\r\n```",
        "createdAt" : "2019-06-11T09:01:02Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.\n+\n+Building Create Command\n+=======================\n+\n+Let's recall an **IOU** example from the :doc:`Quickstart guide </getting-started/quickstart>`, where `Iou` template is defined like this:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 9-15\n+\n+Here is how to manually build :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-create-command>\n+   :end-before: // </doc-ref:iou-no-codegen-create-command>\n+\n+If you do not specify any of the above fields or type their names or values incorrectly, or do not order them exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly. Codegen is expected to simplify the command construction by providing auto-generated utilities to help you construct commands."
  },
  {
    "id" : "60165a8f-ae59-4fac-881d-c6a789bf2094",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "23d4ab5e-6bc1-45bd-9b22-7efa9812954b",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Removing as I've added it above.\r\n```suggestion\r\n```",
        "createdAt" : "2019-06-11T09:01:11Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.\n+\n+Building Create Command\n+=======================\n+\n+Let's recall an **IOU** example from the :doc:`Quickstart guide </getting-started/quickstart>`, where `Iou` template is defined like this:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 9-15\n+\n+Here is how to manually build :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-create-command>\n+   :end-before: // </doc-ref:iou-no-codegen-create-command>\n+\n+If you do not specify any of the above fields or type their names or values incorrectly, or do not order them exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly. Codegen is expected to simplify the command construction by providing auto-generated utilities to help you construct commands.\n+\n+When you use :doc:`Scala codegen </app-dev/bindings-scala/index>` to generate contract classes, a similar contract instantiation would look:"
  },
  {
    "id" : "c6c18932-74f6-45ee-bc60-81046faa0a2c",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "16923115-2030-43b2-b288-5ba4b27eb30c",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This is a little bit light on detail. Is there anything we can link to in the gRPC docs to explain how to do this? Otherwise it's a bit [\"draw the rest of the owl\"](https://www.google.com/search?q=draw+the+owl&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiC5ZDviOHiAhXTwsQBHflmAE0Q_AUIECgB&biw=1280&bih=721#imgrc=gbPGHaXIjOhvjM:). ",
        "createdAt" : "2019-06-11T09:02:47Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b9d21f9c-7275-4ccb-8d0b-7adf6835842a",
        "parentId" : "16923115-2030-43b2-b288-5ba4b27eb30c",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "it is just a summary to re-iterate what needs to be done. The **Ledger API** doc and the link to gRPC tutorial above cover this up.",
        "createdAt" : "2019-06-11T14:13:00Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e199764c-9ed4-4a62-ac4a-a2f4cf549f27",
        "parentId" : "16923115-2030-43b2-b288-5ba4b27eb30c",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I am also fine with removing this completely.",
        "createdAt" : "2019-06-11T20:11:00Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : 95,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.\n+\n+Building Create Command\n+=======================\n+\n+Let's recall an **IOU** example from the :doc:`Quickstart guide </getting-started/quickstart>`, where `Iou` template is defined like this:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 9-15\n+\n+Here is how to manually build :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-create-command>\n+   :end-before: // </doc-ref:iou-no-codegen-create-command>\n+\n+If you do not specify any of the above fields or type their names or values incorrectly, or do not order them exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly. Codegen is expected to simplify the command construction by providing auto-generated utilities to help you construct commands.\n+\n+When you use :doc:`Scala codegen </app-dev/bindings-scala/index>` to generate contract classes, a similar contract instantiation would look:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:iou-contract-instance>\n+   :end-before: // </doc-ref:iou-contract-instance>\n+\n+Building Exercise Command\n+=========================\n+\n+To build :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` for `Iou_Transfer`:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 23, 52-55\n+\n+manually in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-exercise-command>\n+   :end-before: // </doc-ref:iou-no-codegen-exercise-command>\n+\n+versus creating the same command using a value class generated by :doc:`Scala codegen </app-dev/bindings-scala/index>`:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:iou-exercise-transfer-cmd>\n+   :end-before: // </doc-ref:iou-exercise-transfer-cmd>\n+\n+Summary\n+=======\n+\n+If you are creating custom bindings for the Digital Asset distributed ledger, you will need to:\n+\n+- generate **Ledger API** from the gRPC definitions"
  },
  {
    "id" : "ffe1a9be-79ed-4396-8c53-b84a21ebad9a",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "9d4ff579-8226-44ff-95b7-472e6f407bdd",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Totally up to you, but it might be better to link to the support page instead (`/support/support`). That way, we have one centralised way of telling people how to ask for help. ",
        "createdAt" : "2019-06-11T09:03:36Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,92 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Custom bindings\n+###############\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`Node.js JavaScript </app-dev/bindings-js>`\n+\n+However it is possible to create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What exactly is \"bindings\"? X language bindings consists of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for X language, -- the remote ledger API that allows sending ledger commands and receiving ledger transactions. Generated from gRPC protobuf definitions in the **daml** repository on GitHub: https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions and documented on this page: :doc:`The Ledger API using gRPC </app-dev/grpc/index>`\n+\n+- Codegen\n+    Code generator. A program that generates classes representing DAML contract templates in X language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. It is possible to construct the commands manually. However it is very tedious and error-prone.\n+\n+Building Create Command\n+=======================\n+\n+Let's recall an **IOU** example from the :doc:`Quickstart guide </getting-started/quickstart>`, where `Iou` template is defined like this:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 9-15\n+\n+Here is how to manually build :ref:`com.digitalasset.ledger.api.v1.CreateCommand` for the above contract template in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-create-command>\n+   :end-before: // </doc-ref:iou-no-codegen-create-command>\n+\n+If you do not specify any of the above fields or type their names or values incorrectly, or do not order them exactly as they are in the DAML template, the above code will compile but fail at run-time because you did not structure your create command correctly. Codegen is expected to simplify the command construction by providing auto-generated utilities to help you construct commands.\n+\n+When you use :doc:`Scala codegen </app-dev/bindings-scala/index>` to generate contract classes, a similar contract instantiation would look:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:iou-contract-instance>\n+   :end-before: // </doc-ref:iou-contract-instance>\n+\n+Building Exercise Command\n+=========================\n+\n+To build :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` for `Iou_Transfer`:\n+\n+.. literalinclude:: ./code-snippets/quickstart/template-root/daml/Iou.daml\n+  :language: daml\n+  :lines: 23, 52-55\n+\n+manually in Scala:\n+\n+.. literalinclude:: ./code-snippets/iou-no-codegen/application/src/main/scala/com/digitalasset/quickstart/iou/IouCommands.scala\n+   :start-after: // <doc-ref:iou-no-codegen-exercise-command>\n+   :end-before: // </doc-ref:iou-no-codegen-exercise-command>\n+\n+versus creating the same command using a value class generated by :doc:`Scala codegen </app-dev/bindings-scala/index>`:\n+\n+.. literalinclude:: ./code-snippets/quickstart-scala/application/src/main/scala/com/digitalasset/quickstart/iou/IouMain.scala\n+   :start-after: // <doc-ref:iou-exercise-transfer-cmd>\n+   :end-before: // </doc-ref:iou-exercise-transfer-cmd>\n+\n+Summary\n+=======\n+\n+If you are creating custom bindings for the Digital Asset distributed ledger, you will need to:\n+\n+- generate **Ledger API** from the gRPC definitions\n+\n+- decide whether to write a codegen to generate contract classes or manually build commands for all contracts defined in your DAML model.\n+\n+The above examples should help you get started. Feel free to contact us on the DAML community `Slack <https://damldriven.slack.com/sso/saml/start>`_ or open a `GitHub issue <https://github.com/digital-asset/daml/issues>`_."
  },
  {
    "id" : "78a62f8f-c995-42c8-89d4-bf3296073ca2",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "8de6777d-e3b6-4530-8757-309d554747c7",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It's a little more difficult to talk about, but there's really a broad category of metaprogramming features that can solve this problem just as well or even better than codegen; they're language-specific, but often much easier to maintain (i.e. no need to add a build step). Some examples are\r\n\r\n1. F# [type providers](https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/creating-a-type-provider#a-type-provider-that-is-backed-by-local-data),\r\n2. Template Haskell,\r\n3. Scala macro annotations (not future-proof enough to use when implementing the last Scala codegen),\r\n\r\nor pretty much any sort of metaprogramming mechanism that works opposite to the usual unsafe \"reflection\", working to _produce_ types instead of _inspect_ them, at _compile_ time instead of runtime.\r\n\r\nI don't know how much we want to say about that, though.",
        "createdAt" : "2019-06-11T15:59:28Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ed50d128-dcb0-4d14-848b-152809001fa6",
        "parentId" : "8de6777d-e3b6-4530-8757-309d554747c7",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@S11001001 are you suggesting we remove this entire section of just leave it like:\r\n> Technically codegen is optional. You can construct the commands manually from the auto-generated **Ledger API** classes. However it is very tedious and error-prone",
        "createdAt" : "2019-06-11T16:08:23Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5a8d2ce0-41f0-41ad-86cf-87f6248b251f",
        "parentId" : "8de6777d-e3b6-4530-8757-309d554747c7",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "but I think we need to give readers a hint that you can solve the same problem with either codegen, macros or metaprogramming if you don't want to write your commands manually. ",
        "createdAt" : "2019-06-11T16:15:41Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7e5b20d6-f9f0-459c-bf7d-1301036ece66",
        "parentId" : "8de6777d-e3b6-4530-8757-309d554747c7",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@S11001001, how about this explantion for the `codgen`. A code generator is a program or any metaprogramming mechanism that works opposite to the usual unsafe \"reflection\", working to produce types instead of inspect them, at compile time instead of run-time.",
        "createdAt" : "2019-06-11T16:19:48Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "89b6c1fd-659d-4cab-a1e9-4f6cc143f42c",
        "parentId" : "8de6777d-e3b6-4530-8757-309d554747c7",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> are you suggesting we remove this entire section\r\n\r\nNot at all, you're right ⬇️ \r\n\r\n> we need to give readers a hint that you can solve the same problem with either codegen, macros or metaprogramming if you don't want to write your commands manually\r\n\r\nBecause nowhere else have we explained why we bother writing codegens, it's just something _we_ know.\r\n\r\nAlso, notwithstanding a rewrite to talk about other metaprogramming forms:\r\n\r\n```suggestion\r\nTechnically codegen is optional. You can construct the commands manually from the auto-generated **Ledger API** classes. However, it is very tedious and error-prone. If you are creating *ad hoc* bindings for a project with a few contract templates, writing a proper codegen may be overkill. On the other hand, if you have hundreds of contract templates in your project or are planning to build language bindings that you will share across multiple projects, we recommend including a codegen in your bindings. It will save you and your users time in the long run.\r\n```",
        "createdAt" : "2019-06-11T16:19:52Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f2c008d1-babc-4efa-987a-9b470e033db2",
        "parentId" : "8de6777d-e3b6-4530-8757-309d554747c7",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> how about this explantion for the `codgen`. A code generator is a program or any metaprogramming technic that generates ledger commands at compile-time.\r\n\r\nNo, that would be very misleading. I mentioned the other metaprogramming techniques because they _aren't_ codegens.",
        "createdAt" : "2019-06-11T16:21:48Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64b338d0-d47f-4d2e-9f32-25458c9fdfbf",
        "parentId" : "8de6777d-e3b6-4530-8757-309d554747c7",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "added codegen alternatives",
        "createdAt" : "2019-06-11T16:39:17Z",
        "updatedAt" : "2019-06-11T20:22:16Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,97 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Creating your own bindings\n+##########################\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`JavaScript (Node.js) </app-dev/bindings-js>`\n+\n+However, you can create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What do we mean by \"bindings\"? Bindings for a language consist of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for the programming language, -- the remote API that allows sending ledger commands and receiving ledger transactions. You have to generate **Ledger API** from `the gRPC protobuf definitions in the daml repository on GitHub <https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions>`_. **Ledger API** is documented on this page: :doc:`/app-dev/grpc/index`. The `gRPC <https://grpc.io/docs/>`_ tutorial explains how to generate client \"stubs\".\n+\n+- Codegen\n+     A code generator is a program that generates classes representing DAML contract templates in the language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. You can construct the commands manually from the auto-generated **Ledger API** classes. However it is very tedious and error-prone. If you are creating ah hoc bindings for a project with a few contract templates, writing a proper codegen may be an overkill. On the other hand if you have hundreds of contract templates in your project or planning to build language bindings that you will share across multiple projects, we recommend including codegen in your bindings. It will save you time in the long run."
  },
  {
    "id" : "9d45d738-c119-4419-8683-ce6efb9e649a",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "9bae5296-d269-44df-92c4-772d853f1a2b",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Big improvement, this is much clearer!",
        "createdAt" : "2019-06-12T12:18:47Z",
        "updatedAt" : "2019-06-12T12:18:47Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : 25,
    "diffHunk" : "@@ -0,0 +1,110 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Creating your own bindings\n+##########################\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`JavaScript (Node.js) </app-dev/bindings-js>`\n+\n+You can create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What do we mean by \"bindings\"? Bindings for a language consist of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for the programming language, -- the remote API that allows sending ledger commands and receiving ledger transactions. You have to generate **Ledger API** from `the gRPC protobuf definitions in the daml repository on GitHub <https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions>`_. **Ledger API** is documented on this page: :doc:`/app-dev/grpc/index`. The `gRPC <https://grpc.io/docs/>`_ tutorial explains how to generate client \"stubs\"."
  },
  {
    "id" : "e33a758b-13f9-443f-a07c-b478c1de0781",
    "prId" : 1569,
    "comments" : [
      {
        "id" : "19b6f1d3-cd1e-4a94-9d19-21edaecafb97",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Also a massive improvement. Nice!",
        "createdAt" : "2019-06-12T12:19:18Z",
        "updatedAt" : "2019-06-12T12:19:19Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e0d65ca625ce2ff4b3cb2e165a49ed05357f92bc",
    "line" : 43,
    "diffHunk" : "@@ -0,0 +1,110 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Creating your own bindings\n+##########################\n+\n+This page gets you started with creating custom bindings for the Digital Asset distributed ledger.\n+\n+Introduction\n+============\n+\n+Digital Asset currently provides bindings for the following programming languages:\n+\n+- :doc:`Java </app-dev/bindings-java/index>`\n+\n+- :doc:`Scala </app-dev/bindings-scala/index>`\n+\n+- :doc:`JavaScript (Node.js) </app-dev/bindings-js>`\n+\n+You can create bindings for any programming language supported by `gRPC <https://grpc.io/docs/>`_.\n+\n+What do we mean by \"bindings\"? Bindings for a language consist of two main components:\n+\n+- Ledger API\n+    Client \"stubs\" for the programming language, -- the remote API that allows sending ledger commands and receiving ledger transactions. You have to generate **Ledger API** from `the gRPC protobuf definitions in the daml repository on GitHub <https://github.com/digital-asset/daml/tree/master/ledger-api/grpc-definitions>`_. **Ledger API** is documented on this page: :doc:`/app-dev/grpc/index`. The `gRPC <https://grpc.io/docs/>`_ tutorial explains how to generate client \"stubs\".\n+\n+- Codegen\n+     A code generator is a program that generates classes representing DAML contract templates in the language. These classes incorporate all boilerplate code for constructing: :ref:`com.digitalasset.ledger.api.v1.CreateCommand` and :ref:`com.digitalasset.ledger.api.v1.ExerciseCommand` corresponding for each DAML contract template.\n+\n+Technically codegen is optional. You can construct the commands manually from the auto-generated **Ledger API** classes. However, it is very tedious and error-prone. If you are creating *ad hoc* bindings for a project with a few contract templates, writing a proper codegen may be overkill. On the other hand, if you have hundreds of contract templates in your project or are planning to build language bindings that you will share across multiple projects, we recommend including a codegen in your bindings. It will save you and your users time in the long run.\n+\n+Note that for different reasons we chose codegen, but that is not the only option. There is really a broad category of metaprogramming features that can solve this problem just as well or even better than codegen; they are language-specific, but often much easier to maintain (i.e. no need to add a build step). Some examples are:\n+\n+- `F# Type Providers <https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/creating-a-type-provider#a-type-provider-that-is-backed-by-local-data>`_\n+\n+- `Template Haskell <https://wiki.haskell.org/Template_Haskell>`_\n+\n+- Scala macro annotations (not future-proof enough to use when implementing the last Scala codegen)\n+\n+Building Ledger Commands\n+========================\n+\n+No matter what approach you take, either manually building commands or writing a codegen to do this, you need to understand how ledger commands are structured. This section demonstrates how to build create and exercise commands manually and how it can be done using contract classes generated by Scala codegen."
  }
]