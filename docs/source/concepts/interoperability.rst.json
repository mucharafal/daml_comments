[
  {
    "id" : "7cc76c3e-070c-4e12-90f5-74f1af424377",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "8d4ea59f-cec4-4002-9c1f-db28a1cc5817",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "```suggestion\r\n  **Transfer** actions must have at least one of them. A **transfer** action with both set represents a complete transfer. If only the incoming ledger is set, that represents the partial information of an **Enter** event, if only outgoing is set, that's the partial information of a **Leave** event. \r\n```",
        "createdAt" : "2020-08-14T12:24:29Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "85282c5f-716e-46ae-baf7-54e551e093cb",
        "parentId" : "8d4ea59f-cec4-4002-9c1f-db28a1cc5817",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "*Enter* and *Leave* are events, not actions so far so I think this is a little less confusing.",
        "createdAt" : "2020-08-14T12:25:19Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e0b6a3db-c626-4213-8f1c-71f4ed671c97",
        "parentId" : "8d4ea59f-cec4-4002-9c1f-db28a1cc5817",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Good point. Changed.",
        "createdAt" : "2020-08-17T07:36:23Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : 208,
    "diffHunk" : "@@ -0,0 +1,464 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them."
  },
  {
    "id" : "142d9602-e045-446a-9165-b4044e16e64d",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "78742ae3-e2f2-4397-950d-874421ae0ea5",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "```suggestion\r\n  #. All **Transfer** actions in `X` are ordered with all other actions in `X`.\r\n```",
        "createdAt" : "2020-08-14T12:29:11Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d97d6ea3-a9ea-4f39-b306-f21c44fe619c",
        "parentId" : "78742ae3-e2f2-4397-950d-874421ae0ea5",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2020-08-17T07:37:33Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,464 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  If a **Transfer** action is annotated only with an incoming ledger, this constitutes a **Leave** action.\n+  If it is annotated only with an outgoing ledger, this constitutes an **Enter** action.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions on a contract in `c` that belong to vertices in `G`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action.\n+     This action precedes all other actions in `X`.\n+\n+  #. `X` contains at most one **Create** action.\n+     If so, this action precedes all other actions in `X`.\n+\n+  #. If `X` contains a consuming **Exercise** action `act`, then `act` follows all other actions in `X` in `G`\\ 's action order.\n+\n+  #. For every transfer action `act` in `X`, every other action `act'` in `X` either precedes or follows `act` in `G`\\ 's action order."
  },
  {
    "id" : "e9473b9b-c6fd-44f6-8567-a78fafcbb4b1",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "aee8e31c-61c2-4635-9dcd-54775b85a74a",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "```suggestion\r\n  Let `G` be an interoperable causality graph and `X` be a set of actions from `G` on a contract `c`.\r\n```",
        "createdAt" : "2020-08-14T12:36:56Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "91434108-89e4-40d7-ac47-e09b45b1be16",
        "parentId" : "aee8e31c-61c2-4635-9dcd-54775b85a74a",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2020-08-17T07:37:41Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,464 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  If a **Transfer** action is annotated only with an incoming ledger, this constitutes a **Leave** action.\n+  If it is annotated only with an outgoing ledger, this constitutes an **Enter** action.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions on a contract in `c` that belong to vertices in `G`."
  },
  {
    "id" : "cd1c1941-c414-4eac-b267-aa06dd65a327",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "cd70666e-cf28-4f24-8bfa-5e87dae8399a",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "This definition confuses me. What's `A`? What are \"the maximal elements\"? What happens if I witness subtransactions on ledgers outside of `Y`?",
        "createdAt" : "2020-08-14T12:59:38Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e7d580d8-b39d-46a4-a5b0-3e57c2c405bb",
        "parentId" : "cd70666e-cf28-4f24-8bfa-5e87dae8399a",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "`A` should be `P`. Changed.",
        "createdAt" : "2020-08-17T07:39:34Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5bdf814b-1742-448a-ad8d-d7330298db7b",
        "parentId" : "cd70666e-cf28-4f24-8bfa-5e87dae8399a",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Can you clarify what confuses you about maximal elements?\r\n\r\n`Act` is a subset of all the subactions of the transaction `tx`. All subactions of `tx` are ordered w.r.t. the subaction relation. Now, `act` is a maximal element of `Act` if there is no other `act'` in `Act` of which `act` is a sub-action. (https://en.wikipedia.org/wiki/Maximal_and_minimal_elements). Now, `the maximal elements` are all those maximal elements of `Act`. If they contain another subaction whose labelling is not in `Y`, then that subaction is nevertheless part of the ledger-aware projection, because an action contains all its subactions.\r\n\r\nDo you think I should expand the explanation?\r\n",
        "createdAt" : "2020-08-17T07:46:33Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1dd0528f-bcc6-4b8f-9a8c-5deb6c4d75e1",
        "parentId" : "cd70666e-cf28-4f24-8bfa-5e87dae8399a",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Added an explanation as discussed offline.",
        "createdAt" : "2020-08-17T08:50:48Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : 375,
    "diffHunk" : "@@ -0,0 +1,464 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  If a **Transfer** action is annotated only with an incoming ledger, this constitutes a **Leave** action.\n+  If it is annotated only with an outgoing ledger, this constitutes an **Enter** action.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions on a contract in `c` that belong to vertices in `G`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action.\n+     This action precedes all other actions in `X`.\n+\n+  #. `X` contains at most one **Create** action.\n+     If so, this action precedes all other actions in `X`.\n+\n+  #. If `X` contains a consuming **Exercise** action `act`, then `act` follows all other actions in `X` in `G`\\ 's action order.\n+\n+  #. For every transfer action `act` in `X`, every other action `act'` in `X` either precedes or follows `act` in `G`\\ 's action order.\n+\n+  #. For every maximal chain in `X` (i.e., maximal totally ordered subset of `X`), the sequence of `(`\\ incoming ledger, outgoing ledger\\ `)` pairs is a ledger trace, using `NONE` if the action does not have an incoming or outgoing ledger annotation.\n+\n+The first three conditions mimick the conditions of :ref:`causal consistency <def-causal-consistency-contract>` for ordinary causality graphs.\n+They ensure that **Create** actions come first and consuming **Exercise** actions last.\n+An **Enter** action takes the role of a **Create** if there is no **Create**.\n+The fourth condition ensures that all transfer actions are synchronization points for a contract.\n+The last condition about ledger traces ensures that contracts reside on only one DAML ledger and all usages happen on the ledger of residence.\n+In particular, the next contract action after a **Leave** must be an **Enter**.\n+\n+For example, the above :ref:`interoperable causality graph with transfer actions <interoperable-causality-graph-linear>` is interoperable consistent for `c`.\n+In particular, there is only one maximal chain in the actions on `c`, namely\n+\n+  **Create** `c` -> `tf1` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **ExeN** `B` `c` `ch3`,\n+\n+and for each edge `act`:sub:`1` -> `act`:sub:`2`, the outgoing ledger color of `act`:sub:`1` is the same as the incoming ledger color of `act`:sub:`2`.\n+The restriction to maximal chains ensures that no node is skipped.\n+For example, the (non-maximal) chain\n+\n+  **Create** `c` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **Exe** `B` `c` `ch3`\n+\n+is not a ledger trace because the outgoing ledger of the **Create** action (yellow) is not the same as the incoming ledger of the non-consuming **Exercise** action for `ch1` (green).\n+Accordingly, the subgraph without the `tf1` vertex is not interoperable consistent for `c` even though it is an interoperable causality graph.\n+\n+Definition »Consistency for an interoperable causality graph«\n+  Let `X` be a subset of actions in an interoperable causality graph `G`.\n+  Then `G` is **interoperable consistent** for `X` (or `X`-**interoperable consistent**)\n+  if `G` is interoperable consistent for all contracts `c` on the set of actions on `c` in `X`.\n+  `G` is **interoperable consistent** if `G` is interoperable consistent on all the actions in `G`.\n+\n+.. note::\n+   There is no interoperable consistency requirement for contract keys.\n+   So interoperability does not provide consistency guarantees beyond those that come from the contracts they reference.\n+   In particular, contract keys need not be unique and **NoSuchKey** actions do not check that the contract key is unassigned.\n+\n+The :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is interoperable consistent.\n+In particular all maximal chains of actions on a contract are ledger traces:\n+\n++-------------------------+-----------------------------------------+\n+| contract                | maximal chains                          |\n++=========================+=========================================+\n+| `Iou Bank A`            | **Create** -> **Fetch** -> **Exercise** |\n++-------------------------+-----------------------------------------+\n+| `ShowIou A P Bank`      | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Counteroffer A P Bank` | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Iou Bank P`            | **Create**                              |\n++-------------------------+-----------------------------------------+\n+| `PaintAgree P A`        | **Create**                              |\n++-------------------------+-----------------------------------------+\n+   \n+Minimality and reduction\n+========================\n+\n+When edges are added to an `X`-interoperable consistent causality graph such that it remains acyclic and transitively closed,\n+the resulting graph is again `X`-interoperable consistent.\n+The notions :ref:`minimally consistent <minimal-consistent-causality-graph>` and :ref:`reduction <def-reduction-causality-graph>` therefore generalize from ordinary causality graphs accordingly.\n+\n+Definition »Minimal interoperable-consistent causality graph«\n+  An `X`-interoperable consistent causality graph `G` is `X`\\ -**minimal** if no strict subgraph of `G` (same vertices, fewer edges) is an `X`-interoperable consistent causality graph.\n+  If `X` is the set of all actions in `G`, then `X` is omitted.\n+\n+Definition »Reduction of an interoperable consistent causality graph«\n+  For an `X`\\ -interoperable consistent causality graph `G`, there exists a unique minimal `X`\\ -interoperable consistent causality graph `reduce`:sub:`X`\\ `(G)` with the same vertices and the edges being a subset of `G`.\n+  `reduce`:sub:`X`\\ `(G)` is called the `X`\\ -**reduction** of `G`.\n+  As before, `X` is omitted if it contains all actions in `G`.\n+\n+Since interoperable causality graphs are acyclic, their vertices can be sorted topologically and the resulting list is again a causality graph, where every vertex has an outgoing edge to all later vertices.\n+If the original causality graph is `X`\\ -consistent, then so is the topological sort, as topological sorting merely adds edges.\n+\n+\n+From interoperable causality graphs to ledgers\n+==============================================\n+\n+Interoperable causality graphs `G` are linked to ledgers `L` in the DAML Ledger Model via topological sort and reduction.\n+\n+* Given an interoperable causality graph `G`,\n+  drop the incoming and outgoing ledger annotations and all transfer vertices,\n+  topologically sort the transaction vertices,\n+  and extend the resulting list of transactions with the requesters to obtain a sequence of commits `L`.\n+\n+* Given a sequence of commits `L`,\n+  use the transactions as vertices and add an edge from `tx1` to `tx2` whenever `tx1`\\ 's commit precedes `tx2`\\ 's commit in the sequence.\n+  Then add transfer vertices and incoming and outgoing ledger annotations as needed and connect them with edges to the transaction vertices.\n+\n+This link preserves consistency only to some extent.\n+Namely, if an interoperable causality graph is interoperable consistent for a contract `c`, then the corresponding ledger is consistent for the contract `c`, too.\n+However, an interoperable-consistent causality graph does not yield a consistent ledger because key consistency may be violated.\n+Conversely, a consistent ledger does not talk about the incoming and outgoing ledger annotations and therefore cannot enforce that the annotations are consistent.\n+\n+.. _ledger-aware-projection:\n+\n+Ledger-aware projection\n+***********************\n+\n+A Participant Node maintains a local ledger for each party it hosts and the Transaction Service outputs a topological sort of this local ledger.\n+When the Participant Node hosts the party on several ledgers, this local ledger is an interoperable causality graph.\n+This section defines the ledger-aware projection of an interoperable causality graph, which yields such a local ledger.\n+\n+Definition »Y-labelled action«\n+  An action with incoming and outgoing ledger annotations is **Y-labelled** for a set `Y`\n+  if its incoming or outgoing ledger annotation is an element of `Y`.\n+\n+Definition »Ledger-aware projection for transactions«"
  },
  {
    "id" : "fb79ea53-fc38-4030-a140-dd853b485d2c",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "2ced791b-c11a-434e-8930-779d9530e754",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Would it be worth saying that **Transfer** actions are never the consequence of another action, nor do they have consequences? Otherwise the projections section becomes confusing as one might start thinking about witnessing transfers or consequences of transfers.",
        "createdAt" : "2020-08-14T13:02:52Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bc86c089-be21-42d7-a5e5-ffbff9a6dc39",
        "parentId" : "2ced791b-c11a-434e-8930-779d9530e754",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Good suggestion. Added.",
        "createdAt" : "2020-08-17T07:48:36Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : 179,
    "diffHunk" : "@@ -0,0 +1,464 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions."
  },
  {
    "id" : "5ab15c74-e614-4007-9bb3-3606b10f43cc",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "0aef8b4a-f9ee-438d-bfa1-9825a51a722d",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "So the Transaction Tree service doesn't contain transfer information, but the flat stream does? That seems odd to me. The flat service should surely be a projection of the tree one.",
        "createdAt" : "2020-08-14T13:09:25Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "af1a9a9a-1e8f-4b59-bbc3-6366f6ed45ed",
        "parentId" : "0aef8b4a-f9ee-438d-bfa1-9825a51a722d",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "The transaction tree service does contain the `Enter` and `Leave` events, just like the flat service. Added a sentence to make this clear.",
        "createdAt" : "2020-08-17T07:51:12Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,464 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  If a **Transfer** action is annotated only with an incoming ledger, this constitutes a **Leave** action.\n+  If it is annotated only with an outgoing ledger, this constitutes an **Enter** action.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions on a contract in `c` that belong to vertices in `G`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action.\n+     This action precedes all other actions in `X`.\n+\n+  #. `X` contains at most one **Create** action.\n+     If so, this action precedes all other actions in `X`.\n+\n+  #. If `X` contains a consuming **Exercise** action `act`, then `act` follows all other actions in `X` in `G`\\ 's action order.\n+\n+  #. For every transfer action `act` in `X`, every other action `act'` in `X` either precedes or follows `act` in `G`\\ 's action order.\n+\n+  #. For every maximal chain in `X` (i.e., maximal totally ordered subset of `X`), the sequence of `(`\\ incoming ledger, outgoing ledger\\ `)` pairs is a ledger trace, using `NONE` if the action does not have an incoming or outgoing ledger annotation.\n+\n+The first three conditions mimick the conditions of :ref:`causal consistency <def-causal-consistency-contract>` for ordinary causality graphs.\n+They ensure that **Create** actions come first and consuming **Exercise** actions last.\n+An **Enter** action takes the role of a **Create** if there is no **Create**.\n+The fourth condition ensures that all transfer actions are synchronization points for a contract.\n+The last condition about ledger traces ensures that contracts reside on only one DAML ledger and all usages happen on the ledger of residence.\n+In particular, the next contract action after a **Leave** must be an **Enter**.\n+\n+For example, the above :ref:`interoperable causality graph with transfer actions <interoperable-causality-graph-linear>` is interoperable consistent for `c`.\n+In particular, there is only one maximal chain in the actions on `c`, namely\n+\n+  **Create** `c` -> `tf1` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **ExeN** `B` `c` `ch3`,\n+\n+and for each edge `act`:sub:`1` -> `act`:sub:`2`, the outgoing ledger color of `act`:sub:`1` is the same as the incoming ledger color of `act`:sub:`2`.\n+The restriction to maximal chains ensures that no node is skipped.\n+For example, the (non-maximal) chain\n+\n+  **Create** `c` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **Exe** `B` `c` `ch3`\n+\n+is not a ledger trace because the outgoing ledger of the **Create** action (yellow) is not the same as the incoming ledger of the non-consuming **Exercise** action for `ch1` (green).\n+Accordingly, the subgraph without the `tf1` vertex is not interoperable consistent for `c` even though it is an interoperable causality graph.\n+\n+Definition »Consistency for an interoperable causality graph«\n+  Let `X` be a subset of actions in an interoperable causality graph `G`.\n+  Then `G` is **interoperable consistent** for `X` (or `X`-**interoperable consistent**)\n+  if `G` is interoperable consistent for all contracts `c` on the set of actions on `c` in `X`.\n+  `G` is **interoperable consistent** if `G` is interoperable consistent on all the actions in `G`.\n+\n+.. note::\n+   There is no interoperable consistency requirement for contract keys.\n+   So interoperability does not provide consistency guarantees beyond those that come from the contracts they reference.\n+   In particular, contract keys need not be unique and **NoSuchKey** actions do not check that the contract key is unassigned.\n+\n+The :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is interoperable consistent.\n+In particular all maximal chains of actions on a contract are ledger traces:\n+\n++-------------------------+-----------------------------------------+\n+| contract                | maximal chains                          |\n++=========================+=========================================+\n+| `Iou Bank A`            | **Create** -> **Fetch** -> **Exercise** |\n++-------------------------+-----------------------------------------+\n+| `ShowIou A P Bank`      | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Counteroffer A P Bank` | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Iou Bank P`            | **Create**                              |\n++-------------------------+-----------------------------------------+\n+| `PaintAgree P A`        | **Create**                              |\n++-------------------------+-----------------------------------------+\n+   \n+Minimality and reduction\n+========================\n+\n+When edges are added to an `X`-interoperable consistent causality graph such that it remains acyclic and transitively closed,\n+the resulting graph is again `X`-interoperable consistent.\n+The notions :ref:`minimally consistent <minimal-consistent-causality-graph>` and :ref:`reduction <def-reduction-causality-graph>` therefore generalize from ordinary causality graphs accordingly.\n+\n+Definition »Minimal interoperable-consistent causality graph«\n+  An `X`-interoperable consistent causality graph `G` is `X`\\ -**minimal** if no strict subgraph of `G` (same vertices, fewer edges) is an `X`-interoperable consistent causality graph.\n+  If `X` is the set of all actions in `G`, then `X` is omitted.\n+\n+Definition »Reduction of an interoperable consistent causality graph«\n+  For an `X`\\ -interoperable consistent causality graph `G`, there exists a unique minimal `X`\\ -interoperable consistent causality graph `reduce`:sub:`X`\\ `(G)` with the same vertices and the edges being a subset of `G`.\n+  `reduce`:sub:`X`\\ `(G)` is called the `X`\\ -**reduction** of `G`.\n+  As before, `X` is omitted if it contains all actions in `G`.\n+\n+Since interoperable causality graphs are acyclic, their vertices can be sorted topologically and the resulting list is again a causality graph, where every vertex has an outgoing edge to all later vertices.\n+If the original causality graph is `X`\\ -consistent, then so is the topological sort, as topological sorting merely adds edges.\n+\n+\n+From interoperable causality graphs to ledgers\n+==============================================\n+\n+Interoperable causality graphs `G` are linked to ledgers `L` in the DAML Ledger Model via topological sort and reduction.\n+\n+* Given an interoperable causality graph `G`,\n+  drop the incoming and outgoing ledger annotations and all transfer vertices,\n+  topologically sort the transaction vertices,\n+  and extend the resulting list of transactions with the requesters to obtain a sequence of commits `L`.\n+\n+* Given a sequence of commits `L`,\n+  use the transactions as vertices and add an edge from `tx1` to `tx2` whenever `tx1`\\ 's commit precedes `tx2`\\ 's commit in the sequence.\n+  Then add transfer vertices and incoming and outgoing ledger annotations as needed and connect them with edges to the transaction vertices.\n+\n+This link preserves consistency only to some extent.\n+Namely, if an interoperable causality graph is interoperable consistent for a contract `c`, then the corresponding ledger is consistent for the contract `c`, too.\n+However, an interoperable-consistent causality graph does not yield a consistent ledger because key consistency may be violated.\n+Conversely, a consistent ledger does not talk about the incoming and outgoing ledger annotations and therefore cannot enforce that the annotations are consistent.\n+\n+.. _ledger-aware-projection:\n+\n+Ledger-aware projection\n+***********************\n+\n+A Participant Node maintains a local ledger for each party it hosts and the Transaction Service outputs a topological sort of this local ledger.\n+When the Participant Node hosts the party on several ledgers, this local ledger is an interoperable causality graph.\n+This section defines the ledger-aware projection of an interoperable causality graph, which yields such a local ledger.\n+\n+Definition »Y-labelled action«\n+  An action with incoming and outgoing ledger annotations is **Y-labelled** for a set `Y`\n+  if its incoming or outgoing ledger annotation is an element of `Y`.\n+\n+Definition »Ledger-aware projection for transactions«\n+  Let `Y` be a set of DAML ledgers and `tx` a transaction whose actions are annotated with incoming and outgoing ledgers.\n+  Let `Act` be the set of `Y`-labelled subactions of `tx` that `A` is an informee of.\n+  The **ledger-aware projection** of `tx` for a party `P` (`P`-**projection on** `Y`) consists of the maximal elements of `Act` (w.r.t. the subaction relation) in execution order.\n+\n+The :ref:`cross-domain transaction in the paint counteroffer workflow <counteroffer-interoperable-causality-graph>`, for example, has the following projections for Alice and the painter on the `Iou` ledger (yellow) and the painting ledger (green).\n+Here, the projections on the green ledger include the actions of the yellow ledger because a projection includes the subactions.\n+\n+.. https://www.lucidchart.com/documents/edit/f8ec5741-7a37-4cf5-92a9-bf7b3132ba8e\n+.. image:: ./images/projecting-transactions-paint-offer-ledger-aware.svg\n+   :align: center\n+   :width: 60%\n+\n+Definition »Projection for transfer actions«\n+  Let `act` be a transfer action annotated with an incoming ledger and/or an outgoing ledger.\n+  The **projection** of `act` on a set of ledgers `Y`\n+  removes the annotations from `act` that are not in `Y`.\n+  If the projection removes all annotations, it is empty.\n+\n+  The **projection** of `act` to a party `P` on `Y` (`P`\\ -**projection** on `Y`)\n+  is the projection of `act` on `Y` if `P` is a stakeholder of the contract, and empty otherwise.\n+\n+Definition »Interoperable consistency for a party«\n+  An interoperable causality graph `G` is **consistent for a party** `P` on a set of ledgers `Y` (`P`\\ -**consistent** on `Y`)\n+  if `G` is interoperable consistent on the set of `Y`\\ -labelled actions in `G` of which `P` is an informee.\n+\n+The notions of `X`-minimality and `X`-reduction extend to a party `P` on a set `Y` of ledgers accordingly.\n+\n+Definition »Ledger-aware projection for interoperable causality graphs«\n+  Let `G` be an interoperable consistent causality graph and `Y` be a set of DAML ledgers.\n+  The **projection** of `G` to party `P` on `Y` (`P`\\ -**projection** on `Y`) is the `P`\\ -reduction on `Y` of the following causality graph `G'`, which is `P`\\ -consistent on `Y`:\n+\n+  * The vertices of `G'` are the vertices of `G` projected to `P` on `Y`, excluding empty projections.\n+\n+  * There is an edge between two vertices `v`:sub:`1` and `v`:sub:`2` in `G'` if there is an edge from the `G`\\ -vertex corresponding to `v`:sub:`1` to the `G`\\ -vertex corresponding to `v`:sub:`2`.\n+\n+If `G` is an interoperable consistent causality graph, then the `P`\\ -projection on `Y` is `P`\\ -consistent on `Y`, too.\n+\n+For example, the :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is projected as follows.\n+\n+.. https://app.lucidchart.com/documents/edit/d788b464-d670-4029-b2c0-d537c023052f\n+   \n+.. image:: ./images/counteroffer-causality-ledgeraware-projection.svg\n+   :align: center\n+   :width: 100%\n+\n+The following points are worth highlighting:\n+\n+* In Alice's projection on the green ledger, Alice witnesses the archival of her `Iou`.\n+  As explained in the :ref:`interop-ordering-guarantees` below,\n+  the **Exercise** action is marked as merely being witnessed\n+  in the transaction stream of a Participant Node that hosts Alice on the green ledger but not on the yellow ledger.\n+  Similarly, the Painter merely witnesses the **Create** of his `Iou` in the Painter's projection on the green ledger.\n+\n+* In the Painter's projections, the `ShouIou` transaction `tx3` is unordered w.r.t. to the `CounterOffer` acceptance in `tx4`\n+  like in the :ref:`case of ordinary causality graphs <counteroffer-causality-projections>`.\n+  The edge `tx3` -> `tx4` is removed by the reduction step during projection.\n+\n+The projection of transfer actions can be illustrated with the :ref:`interoperable-causality-graph-linear`.\n+The `A`-projections on the yellow and green ledger look as follows.\n+The white color indicates that a transfer action has no incoming or outgoing ledger annotation.\n+That is, a **Leave** action is white on the right hand side and an **Enter** action is white on the left hand side.\n+\n+.. https://app.lucidchart.com/documents/edit/edbf9aaf-b7da-4e68-b9c9-9e631c3a87bb\n+\n+.. image:: ./images/transfer-projection.svg\n+   :align: center\n+   :width: 100%\n+\n+.. _interop-ordering-guarantees:\n+\n+Ledger API ordering guarantees\n+******************************\n+\n+The Transaction Service and the Active Contract Service are derived from the local ledger that the Participant Node maintains for the party.\n+Let `Y` be the set of ledgers on which the Participant Node hosts a party.\n+The transaction tree stream outputs a topological sort of the party's local ledger on `Y`, with the following modifications:\n+\n+#. **Transfer** actions with both incoming and outgoing ledger annotations are omitted."
  },
  {
    "id" : "a1443398-364a-401c-be33-1bc1318c1b2e",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "3be430c7-90d3-473a-9784-670099b7ce88",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "I think we should say here that there is no interoperable consistency for contract keys _yet_, because we haven't decided on the uniqueness guarantees in interoperable contexts yet.\r\n\r\nIt would be easy to extend this model with domain uniqueness where Enter and Leave are also key operations, for example.",
        "createdAt" : "2020-08-14T13:11:53Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f5a83e9-fd8a-4152-a4ed-61b76c434e09",
        "parentId" : "3be430c7-90d3-473a-9784-670099b7ce88",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Added `yet`.",
        "createdAt" : "2020-08-17T07:52:00Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,464 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  If a **Transfer** action is annotated only with an incoming ledger, this constitutes a **Leave** action.\n+  If it is annotated only with an outgoing ledger, this constitutes an **Enter** action.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions on a contract in `c` that belong to vertices in `G`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action.\n+     This action precedes all other actions in `X`.\n+\n+  #. `X` contains at most one **Create** action.\n+     If so, this action precedes all other actions in `X`.\n+\n+  #. If `X` contains a consuming **Exercise** action `act`, then `act` follows all other actions in `X` in `G`\\ 's action order.\n+\n+  #. For every transfer action `act` in `X`, every other action `act'` in `X` either precedes or follows `act` in `G`\\ 's action order.\n+\n+  #. For every maximal chain in `X` (i.e., maximal totally ordered subset of `X`), the sequence of `(`\\ incoming ledger, outgoing ledger\\ `)` pairs is a ledger trace, using `NONE` if the action does not have an incoming or outgoing ledger annotation.\n+\n+The first three conditions mimick the conditions of :ref:`causal consistency <def-causal-consistency-contract>` for ordinary causality graphs.\n+They ensure that **Create** actions come first and consuming **Exercise** actions last.\n+An **Enter** action takes the role of a **Create** if there is no **Create**.\n+The fourth condition ensures that all transfer actions are synchronization points for a contract.\n+The last condition about ledger traces ensures that contracts reside on only one DAML ledger and all usages happen on the ledger of residence.\n+In particular, the next contract action after a **Leave** must be an **Enter**.\n+\n+For example, the above :ref:`interoperable causality graph with transfer actions <interoperable-causality-graph-linear>` is interoperable consistent for `c`.\n+In particular, there is only one maximal chain in the actions on `c`, namely\n+\n+  **Create** `c` -> `tf1` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **ExeN** `B` `c` `ch3`,\n+\n+and for each edge `act`:sub:`1` -> `act`:sub:`2`, the outgoing ledger color of `act`:sub:`1` is the same as the incoming ledger color of `act`:sub:`2`.\n+The restriction to maximal chains ensures that no node is skipped.\n+For example, the (non-maximal) chain\n+\n+  **Create** `c` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **Exe** `B` `c` `ch3`\n+\n+is not a ledger trace because the outgoing ledger of the **Create** action (yellow) is not the same as the incoming ledger of the non-consuming **Exercise** action for `ch1` (green).\n+Accordingly, the subgraph without the `tf1` vertex is not interoperable consistent for `c` even though it is an interoperable causality graph.\n+\n+Definition »Consistency for an interoperable causality graph«\n+  Let `X` be a subset of actions in an interoperable causality graph `G`.\n+  Then `G` is **interoperable consistent** for `X` (or `X`-**interoperable consistent**)\n+  if `G` is interoperable consistent for all contracts `c` on the set of actions on `c` in `X`.\n+  `G` is **interoperable consistent** if `G` is interoperable consistent on all the actions in `G`.\n+\n+.. note::\n+   There is no interoperable consistency requirement for contract keys."
  },
  {
    "id" : "134d8d83-35d2-43af-b010-119868d1fc48",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "c0f69ed9-3947-4b70-8937-e77a857d232d",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "This only happens if a party is hosted on multiple participants, I'd expand a bit on that, not sure if it's clear otherwise.",
        "createdAt" : "2020-08-17T10:38:40Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03a51c04-362e-4439-add4-30b7869c4ef3",
        "parentId" : "c0f69ed9-3947-4b70-8937-e77a857d232d",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Added the multiple participants restriction.",
        "createdAt" : "2020-08-17T12:51:41Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`."
  },
  {
    "id" : "d722f744-2c75-4288-a539-afcfa43d2cb1",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "7bb5ec78-1327-4eea-9c42-05712286e9ac",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "```suggestion\r\nthen `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but Alice's stream at `P2` will not.\r\n```",
        "createdAt" : "2020-08-17T10:41:46Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`."
  },
  {
    "id" : "2d1ef3ff-a814-403f-94af-f40ad520e949",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "d3fa5f82-2272-498c-911f-dab502b37265",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "In practice, the events would be caused by a transfer; why \"synchronizes\"? There's nothing on synchronization before this, as far as I could see.",
        "createdAt" : "2020-08-17T10:48:14Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "445779da-bde5-4e08-a60c-5eee94e91a56",
        "parentId" : "d3fa5f82-2272-498c-911f-dab502b37265",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "You're right. We don't need to go into the synchronization details. Removed the half sentence about ledger synchronization.",
        "createdAt" : "2020-08-17T12:53:06Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers."
  },
  {
    "id" : "a208d313-d003-4239-b26f-8d8da71ae38e",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "699c2c05-7577-45fd-a336-35fce9186cc6",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "`Enter` hasn't really been defined as an action up until now (they're mentioned as events before).",
        "createdAt" : "2020-08-17T11:12:11Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "47d3584e-6e60-49a6-96a7-3dcf7bf06356",
        "parentId" : "699c2c05-7577-45fd-a336-35fce9186cc6",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "True. I used to define them, but @bame-da's rephrasing removed them as actions. Added back in.",
        "createdAt" : "2020-08-17T12:56:17Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : 262,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+Transfer actions do not appear in transactions though.\n+So a transaction action cannot have a transfer action as a consequence and transfer actions do not have consequences at all.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  A **transfer** action with both set represents a complete transfer. If only the incoming ledger is set, that represents the partial information of an **Enter** event, if only outgoing is set, that's the partial information of a **Leave** event.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions from `G` on a contract in `c`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action."
  },
  {
    "id" : "8fe712c9-829f-41f8-8cdf-87b98c7ac003",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "5cfbb50d-099d-45b9-be83-da79bb0d0c11",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "In Canton, we don't have atomic transfers in reality. What's the benefit of having them in the model? I know that you want to be able to \"cancel out\" successive leaves and enters locally at participants, but I don't think this really allows you to do that, as they can't be atomic on the \"global ledger\".",
        "createdAt" : "2020-08-17T11:31:12Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a9b5bb56-0e1d-4c06-a06c-40425e4f7278",
        "parentId" : "5cfbb50d-099d-45b9-be83-da79bb0d0c11",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "As discussed, we'll leave it this way as it's anyway marked as WIP. We can revisit in a few months when the situation is clearer.",
        "createdAt" : "2020-08-17T13:44:01Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+Transfer actions do not appear in transactions though.\n+So a transaction action cannot have a transfer action as a consequence and transfer actions do not have consequences at all.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  A **transfer** action with both set represents a complete transfer. If only the incoming ledger is set, that represents the partial information of an **Enter** event, if only outgoing is set, that's the partial information of a **Leave** event."
  },
  {
    "id" : "9dec33fb-2be0-4133-9580-e243c44d8436",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "7c45e4fc-2a31-4960-884a-ac1ac63215a0",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Maybe: \"cross-ledger causality graphs\", \"multi-ledger causality graphs\"? Later, \"interoperable consistent\" sounds a bit off.",
        "createdAt" : "2020-08-17T11:37:28Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7cfd1194-9598-4d91-8f70-d4010943e53e",
        "parentId" : "7c45e4fc-2a31-4960-884a-ac1ac63215a0",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "I'm hesitant about cross-ledger because I already use \"cross-ledger transaction\" and that's only when a single transaction spans multiple DAML ledgers. But I could live with multi-ledger causality graph and multi-ledger consistent.",
        "createdAt" : "2020-08-17T12:59:47Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs"
  },
  {
    "id" : "154f0de9-2873-4dfa-94d1-060593dc11ae",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "7408d9c6-4238-4045-adef-d16d9bff06c7",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "```suggestion\r\n  The **ledger-aware projection** of `tx` for `P` on `Y` (`P`-**projection on** `Y`) consists of all the maximal elements of `Act` (w.r.t. the subaction relation) in execution order.\r\n```",
        "createdAt" : "2020-08-17T11:40:18Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+Transfer actions do not appear in transactions though.\n+So a transaction action cannot have a transfer action as a consequence and transfer actions do not have consequences at all.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  A **transfer** action with both set represents a complete transfer. If only the incoming ledger is set, that represents the partial information of an **Enter** event, if only outgoing is set, that's the partial information of a **Leave** event.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions from `G` on a contract in `c`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action.\n+     This action precedes all other actions in `X`.\n+\n+  #. `X` contains at most one **Create** action.\n+     If so, this action precedes all other actions in `X`.\n+\n+  #. If `X` contains a consuming **Exercise** action `act`, then `act` follows all other actions in `X` in `G`\\ 's action order.\n+\n+  #. All **Transfer** actions in `X` are ordered with all other actions in `X`.\n+\n+  #. For every maximal chain in `X` (i.e., maximal totally ordered subset of `X`), the sequence of `(`\\ incoming ledger, outgoing ledger\\ `)` pairs is a ledger trace, using `NONE` if the action does not have an incoming or outgoing ledger annotation.\n+\n+The first three conditions mimick the conditions of :ref:`causal consistency <def-causal-consistency-contract>` for ordinary causality graphs.\n+They ensure that **Create** actions come first and consuming **Exercise** actions last.\n+An **Enter** action takes the role of a **Create** if there is no **Create**.\n+The fourth condition ensures that all transfer actions are synchronization points for a contract.\n+The last condition about ledger traces ensures that contracts reside on only one DAML ledger and all usages happen on the ledger of residence.\n+In particular, the next contract action after a **Leave** must be an **Enter**.\n+\n+For example, the above :ref:`interoperable causality graph with transfer actions <interoperable-causality-graph-linear>` is interoperable consistent for `c`.\n+In particular, there is only one maximal chain in the actions on `c`, namely\n+\n+  **Create** `c` -> `tf1` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **ExeN** `B` `c` `ch3`,\n+\n+and for each edge `act`:sub:`1` -> `act`:sub:`2`, the outgoing ledger color of `act`:sub:`1` is the same as the incoming ledger color of `act`:sub:`2`.\n+The restriction to maximal chains ensures that no node is skipped.\n+For example, the (non-maximal) chain\n+\n+  **Create** `c` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **Exe** `B` `c` `ch3`\n+\n+is not a ledger trace because the outgoing ledger of the **Create** action (yellow) is not the same as the incoming ledger of the non-consuming **Exercise** action for `ch1` (green).\n+Accordingly, the subgraph without the `tf1` vertex is not interoperable consistent for `c` even though it is an interoperable causality graph.\n+\n+Definition »Consistency for an interoperable causality graph«\n+  Let `X` be a subset of actions in an interoperable causality graph `G`.\n+  Then `G` is **interoperable consistent** for `X` (or `X`-**interoperable consistent**)\n+  if `G` is interoperable consistent for all contracts `c` on the set of actions on `c` in `X`.\n+  `G` is **interoperable consistent** if `G` is interoperable consistent on all the actions in `G`.\n+\n+.. note::\n+   There is no interoperable consistency requirement for contract keys yet.\n+   So interoperability does not provide consistency guarantees beyond those that come from the contracts they reference.\n+   In particular, contract keys need not be unique and **NoSuchKey** actions do not check that the contract key is unassigned.\n+\n+The :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is interoperable consistent.\n+In particular all maximal chains of actions on a contract are ledger traces:\n+\n++-------------------------+-----------------------------------------+\n+| contract                | maximal chains                          |\n++=========================+=========================================+\n+| `Iou Bank A`            | **Create** -> **Fetch** -> **Exercise** |\n++-------------------------+-----------------------------------------+\n+| `ShowIou A P Bank`      | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Counteroffer A P Bank` | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Iou Bank P`            | **Create**                              |\n++-------------------------+-----------------------------------------+\n+| `PaintAgree P A`        | **Create**                              |\n++-------------------------+-----------------------------------------+\n+   \n+Minimality and reduction\n+========================\n+\n+When edges are added to an `X`-interoperable consistent causality graph such that it remains acyclic and transitively closed,\n+the resulting graph is again `X`-interoperable consistent.\n+The notions :ref:`minimally consistent <minimal-consistent-causality-graph>` and :ref:`reduction <def-reduction-causality-graph>` therefore generalize from ordinary causality graphs accordingly.\n+\n+Definition »Minimal interoperable-consistent causality graph«\n+  An `X`-interoperable consistent causality graph `G` is `X`\\ -**minimal** if no strict subgraph of `G` (same vertices, fewer edges) is an `X`-interoperable consistent causality graph.\n+  If `X` is the set of all actions in `G`, then `X` is omitted.\n+\n+Definition »Reduction of an interoperable consistent causality graph«\n+  For an `X`\\ -interoperable consistent causality graph `G`, there exists a unique minimal `X`\\ -interoperable consistent causality graph `reduce`:sub:`X`\\ `(G)` with the same vertices and the edges being a subset of `G`.\n+  `reduce`:sub:`X`\\ `(G)` is called the `X`\\ -**reduction** of `G`.\n+  As before, `X` is omitted if it contains all actions in `G`.\n+\n+Since interoperable causality graphs are acyclic, their vertices can be sorted topologically and the resulting list is again a causality graph, where every vertex has an outgoing edge to all later vertices.\n+If the original causality graph is `X`\\ -consistent, then so is the topological sort, as topological sorting merely adds edges.\n+\n+\n+From interoperable causality graphs to ledgers\n+==============================================\n+\n+Interoperable causality graphs `G` are linked to ledgers `L` in the DAML Ledger Model via topological sort and reduction.\n+\n+* Given an interoperable causality graph `G`,\n+  drop the incoming and outgoing ledger annotations and all transfer vertices,\n+  topologically sort the transaction vertices,\n+  and extend the resulting list of transactions with the requesters to obtain a sequence of commits `L`.\n+\n+* Given a sequence of commits `L`,\n+  use the transactions as vertices and add an edge from `tx1` to `tx2` whenever `tx1`\\ 's commit precedes `tx2`\\ 's commit in the sequence.\n+  Then add transfer vertices and incoming and outgoing ledger annotations as needed and connect them with edges to the transaction vertices.\n+\n+This link preserves consistency only to some extent.\n+Namely, if an interoperable causality graph is interoperable consistent for a contract `c`, then the corresponding ledger is consistent for the contract `c`, too.\n+However, an interoperable-consistent causality graph does not yield a consistent ledger because key consistency may be violated.\n+Conversely, a consistent ledger does not talk about the incoming and outgoing ledger annotations and therefore cannot enforce that the annotations are consistent.\n+\n+.. _ledger-aware-projection:\n+\n+Ledger-aware projection\n+***********************\n+\n+A Participant Node maintains a local ledger for each party it hosts and the Transaction Service outputs a topological sort of this local ledger.\n+When the Participant Node hosts the party on several ledgers, this local ledger is an interoperable causality graph.\n+This section defines the ledger-aware projection of an interoperable causality graph, which yields such a local ledger.\n+\n+Definition »Y-labelled action«\n+  An action with incoming and outgoing ledger annotations is **Y-labelled** for a set `Y`\n+  if its incoming or outgoing ledger annotation is an element of `Y`.\n+\n+Definition »Ledger-aware projection for transactions«\n+  Let `Y` be a set of DAML ledgers and `tx` a transaction whose actions are annotated with incoming and outgoing ledgers.\n+  Let `Act` be the set of `Y`\\ -labelled subactions of `tx` that the party `P` is an informee of.\n+  The **ledger-aware projection** of `tx` for `P` (`P`-**projection on** `Y`) consists of all the maximal elements of `Act` (w.r.t. the subaction relation) in execution order."
  },
  {
    "id" : "88e030dc-b0b3-4b21-998d-db5677ca5199",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "f5c41d3e-201e-45e7-b0ac-b5e61c9a9e7f",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "```suggestion\r\n* In the Painter's projections, the `ShowIou` transaction `tx3` is unordered w.r.t. to the `CounterOffer` acceptance in `tx4`\r\n```",
        "createdAt" : "2020-08-17T11:42:41Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+Transfer actions do not appear in transactions though.\n+So a transaction action cannot have a transfer action as a consequence and transfer actions do not have consequences at all.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  A **transfer** action with both set represents a complete transfer. If only the incoming ledger is set, that represents the partial information of an **Enter** event, if only outgoing is set, that's the partial information of a **Leave** event.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions from `G` on a contract in `c`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action.\n+     This action precedes all other actions in `X`.\n+\n+  #. `X` contains at most one **Create** action.\n+     If so, this action precedes all other actions in `X`.\n+\n+  #. If `X` contains a consuming **Exercise** action `act`, then `act` follows all other actions in `X` in `G`\\ 's action order.\n+\n+  #. All **Transfer** actions in `X` are ordered with all other actions in `X`.\n+\n+  #. For every maximal chain in `X` (i.e., maximal totally ordered subset of `X`), the sequence of `(`\\ incoming ledger, outgoing ledger\\ `)` pairs is a ledger trace, using `NONE` if the action does not have an incoming or outgoing ledger annotation.\n+\n+The first three conditions mimick the conditions of :ref:`causal consistency <def-causal-consistency-contract>` for ordinary causality graphs.\n+They ensure that **Create** actions come first and consuming **Exercise** actions last.\n+An **Enter** action takes the role of a **Create** if there is no **Create**.\n+The fourth condition ensures that all transfer actions are synchronization points for a contract.\n+The last condition about ledger traces ensures that contracts reside on only one DAML ledger and all usages happen on the ledger of residence.\n+In particular, the next contract action after a **Leave** must be an **Enter**.\n+\n+For example, the above :ref:`interoperable causality graph with transfer actions <interoperable-causality-graph-linear>` is interoperable consistent for `c`.\n+In particular, there is only one maximal chain in the actions on `c`, namely\n+\n+  **Create** `c` -> `tf1` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **ExeN** `B` `c` `ch3`,\n+\n+and for each edge `act`:sub:`1` -> `act`:sub:`2`, the outgoing ledger color of `act`:sub:`1` is the same as the incoming ledger color of `act`:sub:`2`.\n+The restriction to maximal chains ensures that no node is skipped.\n+For example, the (non-maximal) chain\n+\n+  **Create** `c` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **Exe** `B` `c` `ch3`\n+\n+is not a ledger trace because the outgoing ledger of the **Create** action (yellow) is not the same as the incoming ledger of the non-consuming **Exercise** action for `ch1` (green).\n+Accordingly, the subgraph without the `tf1` vertex is not interoperable consistent for `c` even though it is an interoperable causality graph.\n+\n+Definition »Consistency for an interoperable causality graph«\n+  Let `X` be a subset of actions in an interoperable causality graph `G`.\n+  Then `G` is **interoperable consistent** for `X` (or `X`-**interoperable consistent**)\n+  if `G` is interoperable consistent for all contracts `c` on the set of actions on `c` in `X`.\n+  `G` is **interoperable consistent** if `G` is interoperable consistent on all the actions in `G`.\n+\n+.. note::\n+   There is no interoperable consistency requirement for contract keys yet.\n+   So interoperability does not provide consistency guarantees beyond those that come from the contracts they reference.\n+   In particular, contract keys need not be unique and **NoSuchKey** actions do not check that the contract key is unassigned.\n+\n+The :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is interoperable consistent.\n+In particular all maximal chains of actions on a contract are ledger traces:\n+\n++-------------------------+-----------------------------------------+\n+| contract                | maximal chains                          |\n++=========================+=========================================+\n+| `Iou Bank A`            | **Create** -> **Fetch** -> **Exercise** |\n++-------------------------+-----------------------------------------+\n+| `ShowIou A P Bank`      | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Counteroffer A P Bank` | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Iou Bank P`            | **Create**                              |\n++-------------------------+-----------------------------------------+\n+| `PaintAgree P A`        | **Create**                              |\n++-------------------------+-----------------------------------------+\n+   \n+Minimality and reduction\n+========================\n+\n+When edges are added to an `X`-interoperable consistent causality graph such that it remains acyclic and transitively closed,\n+the resulting graph is again `X`-interoperable consistent.\n+The notions :ref:`minimally consistent <minimal-consistent-causality-graph>` and :ref:`reduction <def-reduction-causality-graph>` therefore generalize from ordinary causality graphs accordingly.\n+\n+Definition »Minimal interoperable-consistent causality graph«\n+  An `X`-interoperable consistent causality graph `G` is `X`\\ -**minimal** if no strict subgraph of `G` (same vertices, fewer edges) is an `X`-interoperable consistent causality graph.\n+  If `X` is the set of all actions in `G`, then `X` is omitted.\n+\n+Definition »Reduction of an interoperable consistent causality graph«\n+  For an `X`\\ -interoperable consistent causality graph `G`, there exists a unique minimal `X`\\ -interoperable consistent causality graph `reduce`:sub:`X`\\ `(G)` with the same vertices and the edges being a subset of `G`.\n+  `reduce`:sub:`X`\\ `(G)` is called the `X`\\ -**reduction** of `G`.\n+  As before, `X` is omitted if it contains all actions in `G`.\n+\n+Since interoperable causality graphs are acyclic, their vertices can be sorted topologically and the resulting list is again a causality graph, where every vertex has an outgoing edge to all later vertices.\n+If the original causality graph is `X`\\ -consistent, then so is the topological sort, as topological sorting merely adds edges.\n+\n+\n+From interoperable causality graphs to ledgers\n+==============================================\n+\n+Interoperable causality graphs `G` are linked to ledgers `L` in the DAML Ledger Model via topological sort and reduction.\n+\n+* Given an interoperable causality graph `G`,\n+  drop the incoming and outgoing ledger annotations and all transfer vertices,\n+  topologically sort the transaction vertices,\n+  and extend the resulting list of transactions with the requesters to obtain a sequence of commits `L`.\n+\n+* Given a sequence of commits `L`,\n+  use the transactions as vertices and add an edge from `tx1` to `tx2` whenever `tx1`\\ 's commit precedes `tx2`\\ 's commit in the sequence.\n+  Then add transfer vertices and incoming and outgoing ledger annotations as needed and connect them with edges to the transaction vertices.\n+\n+This link preserves consistency only to some extent.\n+Namely, if an interoperable causality graph is interoperable consistent for a contract `c`, then the corresponding ledger is consistent for the contract `c`, too.\n+However, an interoperable-consistent causality graph does not yield a consistent ledger because key consistency may be violated.\n+Conversely, a consistent ledger does not talk about the incoming and outgoing ledger annotations and therefore cannot enforce that the annotations are consistent.\n+\n+.. _ledger-aware-projection:\n+\n+Ledger-aware projection\n+***********************\n+\n+A Participant Node maintains a local ledger for each party it hosts and the Transaction Service outputs a topological sort of this local ledger.\n+When the Participant Node hosts the party on several ledgers, this local ledger is an interoperable causality graph.\n+This section defines the ledger-aware projection of an interoperable causality graph, which yields such a local ledger.\n+\n+Definition »Y-labelled action«\n+  An action with incoming and outgoing ledger annotations is **Y-labelled** for a set `Y`\n+  if its incoming or outgoing ledger annotation is an element of `Y`.\n+\n+Definition »Ledger-aware projection for transactions«\n+  Let `Y` be a set of DAML ledgers and `tx` a transaction whose actions are annotated with incoming and outgoing ledgers.\n+  Let `Act` be the set of `Y`\\ -labelled subactions of `tx` that the party `P` is an informee of.\n+  The **ledger-aware projection** of `tx` for `P` (`P`-**projection on** `Y`) consists of all the maximal elements of `Act` (w.r.t. the subaction relation) in execution order.\n+\n+.. note::\n+   Every action contains all its subactions.\n+   So if `act` is included in the `P`\\ -projection on `Y` of `tx`,\n+   then all subactions of `act` are also part of the projection.\n+   Such a subaction `act'` may not be `Y`\\ -labelled itself though, i.e., belong to a different ledger.\n+   If `P` is an informee of `act'`, the Participant Node will mark `act'` as merely being witnessed on `P`\\ 's transaction stream, as explained below.\n+\n+The :ref:`cross-domain transaction in the paint counteroffer workflow <counteroffer-interoperable-causality-graph>`, for example, has the following projections for Alice and the painter on the `Iou` ledger (yellow) and the painting ledger (green).\n+Here, the projections on the green ledger include the actions of the yellow ledger because a projection includes the subactions.\n+\n+.. https://www.lucidchart.com/documents/edit/f8ec5741-7a37-4cf5-92a9-bf7b3132ba8e\n+.. image:: ./images/projecting-transactions-paint-offer-ledger-aware.svg\n+   :align: center\n+   :width: 60%\n+\n+Definition »Projection for transfer actions«\n+  Let `act` be a transfer action annotated with an incoming ledger and/or an outgoing ledger.\n+  The **projection** of `act` on a set of ledgers `Y`\n+  removes the annotations from `act` that are not in `Y`.\n+  If the projection removes all annotations, it is empty.\n+\n+  The **projection** of `act` to a party `P` on `Y` (`P`\\ -**projection** on `Y`)\n+  is the projection of `act` on `Y` if `P` is a stakeholder of the contract, and empty otherwise.\n+\n+Definition »Interoperable consistency for a party«\n+  An interoperable causality graph `G` is **consistent for a party** `P` on a set of ledgers `Y` (`P`\\ -**consistent** on `Y`)\n+  if `G` is interoperable consistent on the set of `Y`\\ -labelled actions in `G` of which `P` is an informee.\n+\n+The notions of `X`-minimality and `X`-reduction extend to a party `P` on a set `Y` of ledgers accordingly.\n+\n+Definition »Ledger-aware projection for interoperable causality graphs«\n+  Let `G` be an interoperable consistent causality graph and `Y` be a set of DAML ledgers.\n+  The **projection** of `G` to party `P` on `Y` (`P`\\ -**projection** on `Y`) is the `P`\\ -reduction on `Y` of the following causality graph `G'`, which is `P`\\ -consistent on `Y`:\n+\n+  * The vertices of `G'` are the vertices of `G` projected to `P` on `Y`, excluding empty projections.\n+\n+  * There is an edge between two vertices `v`:sub:`1` and `v`:sub:`2` in `G'` if there is an edge from the `G`\\ -vertex corresponding to `v`:sub:`1` to the `G`\\ -vertex corresponding to `v`:sub:`2`.\n+\n+If `G` is an interoperable consistent causality graph, then the `P`\\ -projection on `Y` is `P`\\ -consistent on `Y`, too.\n+\n+For example, the :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is projected as follows.\n+\n+.. https://app.lucidchart.com/documents/edit/d788b464-d670-4029-b2c0-d537c023052f\n+   \n+.. image:: ./images/counteroffer-causality-ledgeraware-projection.svg\n+   :align: center\n+   :width: 100%\n+\n+The following points are worth highlighting:\n+\n+* In Alice's projection on the green ledger, Alice witnesses the archival of her `Iou`.\n+  As explained in the :ref:`interop-ordering-guarantees` below,\n+  the **Exercise** action is marked as merely being witnessed\n+  in the transaction stream of a Participant Node that hosts Alice on the green ledger but not on the yellow ledger.\n+  Similarly, the Painter merely witnesses the **Create** of his `Iou` in the Painter's projection on the green ledger.\n+\n+* In the Painter's projections, the `ShouIou` transaction `tx3` is unordered w.r.t. to the `CounterOffer` acceptance in `tx4`"
  },
  {
    "id" : "725b3741-0b1b-4628-969e-f7cac4ab4b5a",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "a1d38f3f-9470-4914-8691-d2f8d6aca6ed",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Maybe clarify that the \"Transaction Service\" is the same as the \"flat transaction stream\".",
        "createdAt" : "2020-08-17T11:47:12Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9fc52577-584e-46ea-92bb-abcee3a77e1a",
        "parentId" : "a1d38f3f-9470-4914-8691-d2f8d6aca6ed",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "It's not the same (you can also read off activeness from the tree stream), but it doesn't matter here. Changed to flat transaction stream.",
        "createdAt" : "2020-08-17T12:57:53Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,474 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+   \n+.. _interoperable-ledgers:\n+\n+Ledger Interoperability\n+#######################\n+\n+Certain DAML ledgers can interoperate with other DAML ledgers.\n+That is, the contracts created on one ledger can be used and archived in transactions on other ledgers.\n+Some Participant Nodes can connect to multiple ledgers and provide their parties unified access to those ledgers via the :ref:`Ledger API <ledger-api-services>`.\n+For example, when an organization initially deploys two workflows to two DAML ledgers, it can later compose those workflows into a larger workflow that spans both ledgers.\n+\n+Interoperability may limit the visibility a Participant Node has into a party's ledger projection, i.e., its :ref:`local ledger <local-ledger>`.\n+These limitations influence what parties can observe via the Ledger API.\n+In particular, interoperability affects which events a party observes and their order.\n+This document explains the visibility limitations due to interoperability and their consequences for the Transaction Service, by :ref:`example <interop-limitation-examples>` and formally by introducing interoperable versions of :ref:`causality graphs <interop-causality-graph>` and :ref:`projections <ledger-aware-projection>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+* :ref:`Local ledgers and causality graphs <local-ledger>`\n+\n+.. note::\n+   Interoperability for DAML ledgers is under active development.\n+   This document describes the vision for interoperability\n+   and gives an idea of how the Ledger API services may change and what guarantees are provided.\n+   The described services and guarantees may change without notice as the interoperability implementation proceeds.\n+\n+.. _interop-limitation-examples:\n+   \n+Interoperability examples\n+*************************\n+   \n+.. _interoperable-topology:\n+\n+Topology\n+========\n+\n+Participant Nodes connect to DAML ledgers and parties access projections of these ledgers via the Ledger API.\n+The following picture shows such a setup.\n+\n+.. https://app.lucidchart.com/documents/edit/6b818d37-cf4c-4513-9d31-d68acddf4533\n+\n+.. figure:: ./images/multiple-domains.svg\n+   :align: center\n+   :name: multiple-ledgers\n+\n+   Example topology with three interoperable ledgers\n+\n+The components in this diagram are the following:\n+\n+* There is a set of interoperable **DAML ledgers**: Ledger 1 (green) and Ledger 2 (yellow).\n+\n+* Each **Participant Node** is connected to a subset of the DAML ledgers.\n+  \n+  - Participant Nodes 1 and 3 are connected to Ledger 1 and 2.\n+  - Participant Node 2 is connected to Ledger 1 only.\n+\n+* Participant Nodes host parties on a subset of the DAML ledgers they are connected to.\n+  A Participant Node provides a party access to the DAML ledgers that it hosts the party on.\n+\n+  - Participant Node 1 hosts Alice on Ledger 1 and 2.\n+  - Participant Node 2 hosts Alice on Ledger 1.\n+  - Participant Node 3 hosts the painter on Ledger 1 and 2.\n+\n+.. _interoperable-aggregation:\n+\n+Aggregation at the participant\n+==============================\n+\n+The Participant Node assembles the updates from these ledgers and outputs them via the party's Transaction Service and Active Contract Service.\n+When a Participant Node hosts a party only on a subset of the interoperable DAML ledgers,\n+then the transaction and active contract services of the Participant Node are derived only from those ledgers.\n+\n+For example, in the :ref:`above topology <multiple-ledgers>`, when a transaction creates a contract with stakeholder Alice on Ledger 2,\n+then `P1`\\ 's transaction stream for Alice will emit this transaction and report the contract as active, but not `P2`.\n+\n+\n+.. _enter-leave-event:\n+\n+Enter and Leave events\n+======================\n+\n+With interoperability, a transaction can use a contract whose creation was recorded on a different ledger.\n+In the :ref:`above topology <multiple-ledgers>`, e.g., one transaction creates a contract `c1` with stakeholder Alice on Ledger 1 and another archives the contract on Ledger 2.\n+Then the Participant Node `P2` outputs the **Create** action as a ``CreatedEvent``, but not the **Exercise** in form of an ``ArchiveEvent`` on the transaction service\n+because Ledger 2 can not notify `P2` as `P2` does not host Alice on Ledger 2.\n+Conversely, when one transaction creates a contract `c2` with stakeholder Alice on Ledger 2 and another archives the contract on Ledger 1, then `P2` outputs the ``ArchivedEvent``, but not the ``CreatedEvent``.\n+\n+To keep the transaction stream consistent, `P2` additionally outputs a **Leave** `c1` action on Alice's transaction stream.\n+This action signals that the Participant Node no longer outputs events concerning this contract;\n+in particular not when the contract is archived.\n+The contract is accordingly no longer reported in the active contract service and cannot be used by command submissions.\n+\n+Conversely, `P2` outputs an **Enter** `c2` action some time before the ``ArchivedEvent`` on the transaction stream.\n+This action signals that the Participant Node starts outputting events concerning this contract.\n+The contract is reported in the Active Contract Service and can be used by command submission.\n+\n+The actions **Enter** and **Leave** are similar to a **Create** and a consuming **Exercise** action, respectively, except that **Enter** and **Leave** may occur several times for the same contract whereas \n+there should be at most one **Create** action and at most one consuming **Exercise** action for each contract.\n+\n+These **Enter** and **Leave** events are generated when the underlying interoperability protocol synchronizes between the different ledgers.\n+This may happen as part of command submission or for other reasons, e.g., load balancing.\n+It is guaranteed that the **Enter** action precedes contract usage, subject to the trust assumptions of the underlying ledgers and the interoperability protocol.\n+\n+A contract may enter and leave the visibility of a Participant Node several times.\n+For example, suppose that the painter submits the following commands and their commits end up on the given ledgers.\n+\n+#. Create a contract `c` with signatories Alice and the painter on Ledger 2\n+#. Exercise a non-consuming choice `ch1` on `c` on Ledger 1.\n+#. Exercise a non-consuming choice `ch2` on `c` on Ledger 2.\n+#. Exercise a consuming choice `ch3` on `c` on Ledger 1.\n+\n+Then, the transaction tree stream that `P2` provides for `A` contains five actions involving contract `c`: **Enter**, non-consuming **Exercise**, **Leave**, **Enter**, consuming **Exercise**.\n+Importantly, `P2` must not omit the **Leave** action and the subsequent **Enter**, even though they seem to cancel out.\n+This is because their presence indicates that `P2`\\ 's event stream for Alice may miss some events in between; in this example, exercising the choice `ch2`.\n+\n+The flat transaction stream by `P2` omits the non-consuming exercise choices.\n+It nevertheless contains the three actions **Enter**, **Leave**, **Enter** before the consuming **Exercise**.\n+This is because the Participant Node cannot know at the **Leave** action that there will be another **Enter** action coming.\n+\n+In contrast, `P1` need not output the **Enter** and **Leave** actions at all in this example because `P1` hosts Alice on both ledgers.\n+\n+.. _cross-ledger-transaction:\n+\n+Cross-ledger transactions\n+=========================\n+\n+With interoperability, a cross-ledger transaction can be committed on several interoperable DAML ledgers simultaneously.\n+Such a cross-ledger transaction avoids some of the synchronization overhead of **Enter** and **Leave** actions.\n+When a cross-ledger transaction uses contracts from several DAML ledgers,\n+stakeholders may witness actions on their contracts that are actually not visible on the Participant Node.\n+\n+For example, suppose that the :ref:`paint counteroffer workflow <split-counteroffer-ledger>` from the causality examples is committed as follows:\n+The actions on `CounterOffer` and `PaintAgree` contracts are committed on Ledger 1.\n+All actions on `Iou`\\ s are committed on Ledger 2, assuming that some Participant Node hosts the Bank on Ledger 2.\n+The last transaction is a cross-ledger transaction because the archival of the `CounterOffer` and the creation of the `PaintAgree`\\ ment commits on Ledger 1 simultaneously with the transfer of Alice's `Iou` to the painter on Ledger 2.\n+\n+For the last transaction, Participant Node 1 notifies Alice of the transaction tree, the two archivals and the `PaintAgree` creation via the Transaction Service as usual.\n+Participant Node 2 also output's the whole transaction tree on Alice's transaction tree stream, which contains the consuming **Exercise** of Alice's `Iou`.\n+However, it has not output the **Create** of Alice's `Iou` because `Iou` actions commit on Ledger 2, on which Participant Node 2 does not host Alice.\n+So Alice merely *witnesses* the archival even though she is an :ref:`informee <def-informee>` of the exercise.\n+The **Exercise** action is therefore marked as merely being witnessed on Participant Node 2's transaction tree stream.\n+\n+In general, an action is marked as **merely being witnessed** when a party is an informee of the action, but the action is not committed on a ledger on which the Participant Node hosts the party.\n+Unlike **Enter** and **Leave**, such witnessed actions do not affect causality from the participant's point of view and therefore provide weaker ordering guarantees.\n+Such witnessed actions show up neither in the flat transaction stream nor in the Active Contracts Service.\n+\n+For example, suppose that the **Create** `PaintAgree` action commits on Ledger 2 instead of Ledger 1, i.e., only the `CounterOffer` actions commit on Ledger 1.\n+Then, Participant Node 2 marks the **Create** `PaintAgree` action also as merely being witnessed on the transaction tree stream.\n+Accordingly, it does not report the contract as active nor can Alice use the contract in her submissions via Participant Node 2.\n+\n+.. _interop-causality-graph:\n+\n+Interoperable causality graphs\n+******************************\n+\n+This section generalizes :ref:`causality graphs <causality-graph>` to the interoperability setting.\n+\n+Every active DAML contract resides on at most one DAML ledger.\n+Any use of a contract must be committed on the DAML ledger where it resides.\n+Initially, when the contract is created, it takes up residence on the DAML ledger on which the **Create** action is committed.\n+To use contracts residing on different DAML ledgers, cross-ledger transactions are committed on several DAML ledgers.\n+\n+However, cross-ledger transactions incur overheads and if a contract is frequently used on a DAML ledger that is not its residence, the interoperability protocol can migrate the contract to the other DAML ledger.\n+The process of the contract giving up residence on the origin DAML ledger and taking up residence on the target DAML ledger is called a **contract transfer**.\n+The **Enter** and **Leave** events on the transaction stream originate from such contract transfers, as will be explained below.\n+Moreover, contract transfers are synchronization points between the origin and target DAML ledgers and therefore affect the ordering guarantees.\n+We therefore generalize causality graphs for interoperability.\n+\n+Definition »Transfer action«\n+  A **transfer action** on a contract `c` is written **Transfer** `c`.\n+  The **informees** of the transfer actions are the stakeholders of `c`.\n+\n+In the following, the term *action* refers to transaction actions (**Create**, **Exercise**, **Fetch**, and **NoSuchKey**) as well as transfer actions.\n+In particular, a transfer action on a contract `c` is an action on `c`.\n+Transfer actions do not appear in transactions though.\n+So a transaction action cannot have a transfer action as a consequence and transfer actions do not have consequences at all.\n+\n+Definition »Interoperable causality graph«\n+  An **interoperable causality graph** `G` for a set `Y` of DAML ledgers is a finite, transitively closed, directed acyclic graph.\n+  The vertices are either transactions or transfer actions.\n+  Every action is possibly annotated with an **incoming ledger** and an **outgoing ledger** from `Y` according to the following table:\n+\n+  +---------------+-----------------+-----------------+\n+  | Action        | incoming ledger | outgoing ledger |\n+  +===============+=================+=================+\n+  | **Create**    | no              | yes             |\n+  +---------------+-----------------+-----------------+\n+  | consuming     |                 |                 |\n+  | **Exercise**  | yes             | no              |\n+  +---------------+-----------------+-----------------+\n+  | non-consuming |                 |                 |\n+  | **Exercise**  | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **Fetch**     | yes             | yes             |\n+  +---------------+-----------------+-----------------+\n+  | **NoSuchKey** | no              | no              |\n+  +---------------+-----------------+-----------------+\n+  | **Transfer**  | maybe           | maybe           |\n+  +---------------+-----------------+-----------------+\n+\n+  For non-consuming **Exercise** and **Fetch** actions, the incoming ledger must be the same as the outgoing ledger.\n+  **Transfer** actions must have at least one of them.\n+  A **transfer** action with both set represents a complete transfer. If only the incoming ledger is set, that represents the partial information of an **Enter** event, if only outgoing is set, that's the partial information of a **Leave** event.\n+\n+The :ref:`action order <def-action-order>` generalizes to interoperable causality graphs accordingly.\n+\n+In the :ref:`example for Enter and Leave events <enter-leave-event>` where the painter exercises three choices on contract `c` with signatories Alice and the painter, the four transactions yield the following interoperable causality graph.\n+Incoming and outgoing ledgers are encoded as colors (green for Ledger 1 and yellow for Ledger 2).\n+**Transfer** vertices are shown as circles, where the left half is colored with the incoming ledger and the right half with the outgoing ledger.\n+\n+.. https://app.lucidchart.com/documents/edit/ef1e60ac-fa1e-40be-b1e6-7b3197d4543b\n+\n+.. _interoperable-causality-graph-linear:\n+   \n+.. figure:: ./images/interoperable-causality-graph-linear.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph with transfer actions\n+\n+.. note::\n+   As for ordinary causality graphs, the diagrams for interoperable causality graphs omit transitive edges for readability.\n+\n+As an example for a cross-domain transaction, consider the :ref:`paint counteroffer workflow with the cross-domain transaction <cross-ledger-transaction>`.\n+The corresponding interoperable causality graph is shown below.\n+The last transaction `tx4` is a cross-ledger transaction because its actions have more than one color.\n+\n+.. https://app.lucidchart.com/documents/edit/c3b120cf-1974-4ae8-8334-435642f94eed/\n+\n+.. _counteroffer-interoperable-causality-graph:\n+   \n+.. figure:: ./images/counteroffer-interoperable-causality-graph.svg\n+   :align: center\n+   :width: 100%\n+\n+   Interoperable causality graph for the paint counteroffer workflow on two DAML ledgers\n+\n+\n+Consistency\n+===========\n+\n+Definition »Ledger trace«\n+  A **ledger trace** is a finite list of pairs `(a`:sub:`i`\\ `, b`:sub:`i`\\ `)`\n+  such that `b`:sub:`i - 1` = `a`:sub:`i` for all `i` > 0.\n+  Here `a`:sub:`i` and `b`:sub:`i` identify DAML ledgers or are the special value `NONE`,\n+  which is different from all DAML ledger identifiers.\n+\n+ \n+Definition »Interoperable causal consistency for a contract«\n+  Let `G` be an interoperable causality graph and `X` be a set of actions from `G` on a contract in `c`.\n+  The graph `G` is **interoperable consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  #. If `X` is not empty, then `X` contains a **Create** or **Enter** action.\n+     This action precedes all other actions in `X`.\n+\n+  #. `X` contains at most one **Create** action.\n+     If so, this action precedes all other actions in `X`.\n+\n+  #. If `X` contains a consuming **Exercise** action `act`, then `act` follows all other actions in `X` in `G`\\ 's action order.\n+\n+  #. All **Transfer** actions in `X` are ordered with all other actions in `X`.\n+\n+  #. For every maximal chain in `X` (i.e., maximal totally ordered subset of `X`), the sequence of `(`\\ incoming ledger, outgoing ledger\\ `)` pairs is a ledger trace, using `NONE` if the action does not have an incoming or outgoing ledger annotation.\n+\n+The first three conditions mimick the conditions of :ref:`causal consistency <def-causal-consistency-contract>` for ordinary causality graphs.\n+They ensure that **Create** actions come first and consuming **Exercise** actions last.\n+An **Enter** action takes the role of a **Create** if there is no **Create**.\n+The fourth condition ensures that all transfer actions are synchronization points for a contract.\n+The last condition about ledger traces ensures that contracts reside on only one DAML ledger and all usages happen on the ledger of residence.\n+In particular, the next contract action after a **Leave** must be an **Enter**.\n+\n+For example, the above :ref:`interoperable causality graph with transfer actions <interoperable-causality-graph-linear>` is interoperable consistent for `c`.\n+In particular, there is only one maximal chain in the actions on `c`, namely\n+\n+  **Create** `c` -> `tf1` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **ExeN** `B` `c` `ch3`,\n+\n+and for each edge `act`:sub:`1` -> `act`:sub:`2`, the outgoing ledger color of `act`:sub:`1` is the same as the incoming ledger color of `act`:sub:`2`.\n+The restriction to maximal chains ensures that no node is skipped.\n+For example, the (non-maximal) chain\n+\n+  **Create** `c` -> **ExeN** `B` `c` `ch1` -> `tf2` -> **ExeN** `B` `c` `ch2` -> `tf3` -> **Exe** `B` `c` `ch3`\n+\n+is not a ledger trace because the outgoing ledger of the **Create** action (yellow) is not the same as the incoming ledger of the non-consuming **Exercise** action for `ch1` (green).\n+Accordingly, the subgraph without the `tf1` vertex is not interoperable consistent for `c` even though it is an interoperable causality graph.\n+\n+Definition »Consistency for an interoperable causality graph«\n+  Let `X` be a subset of actions in an interoperable causality graph `G`.\n+  Then `G` is **interoperable consistent** for `X` (or `X`-**interoperable consistent**)\n+  if `G` is interoperable consistent for all contracts `c` on the set of actions on `c` in `X`.\n+  `G` is **interoperable consistent** if `G` is interoperable consistent on all the actions in `G`.\n+\n+.. note::\n+   There is no interoperable consistency requirement for contract keys yet.\n+   So interoperability does not provide consistency guarantees beyond those that come from the contracts they reference.\n+   In particular, contract keys need not be unique and **NoSuchKey** actions do not check that the contract key is unassigned.\n+\n+The :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is interoperable consistent.\n+In particular all maximal chains of actions on a contract are ledger traces:\n+\n++-------------------------+-----------------------------------------+\n+| contract                | maximal chains                          |\n++=========================+=========================================+\n+| `Iou Bank A`            | **Create** -> **Fetch** -> **Exercise** |\n++-------------------------+-----------------------------------------+\n+| `ShowIou A P Bank`      | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Counteroffer A P Bank` | **Create** -> **Exercise**              |\n++-------------------------+-----------------------------------------+\n+| `Iou Bank P`            | **Create**                              |\n++-------------------------+-----------------------------------------+\n+| `PaintAgree P A`        | **Create**                              |\n++-------------------------+-----------------------------------------+\n+   \n+Minimality and reduction\n+========================\n+\n+When edges are added to an `X`-interoperable consistent causality graph such that it remains acyclic and transitively closed,\n+the resulting graph is again `X`-interoperable consistent.\n+The notions :ref:`minimally consistent <minimal-consistent-causality-graph>` and :ref:`reduction <def-reduction-causality-graph>` therefore generalize from ordinary causality graphs accordingly.\n+\n+Definition »Minimal interoperable-consistent causality graph«\n+  An `X`-interoperable consistent causality graph `G` is `X`\\ -**minimal** if no strict subgraph of `G` (same vertices, fewer edges) is an `X`-interoperable consistent causality graph.\n+  If `X` is the set of all actions in `G`, then `X` is omitted.\n+\n+Definition »Reduction of an interoperable consistent causality graph«\n+  For an `X`\\ -interoperable consistent causality graph `G`, there exists a unique minimal `X`\\ -interoperable consistent causality graph `reduce`:sub:`X`\\ `(G)` with the same vertices and the edges being a subset of `G`.\n+  `reduce`:sub:`X`\\ `(G)` is called the `X`\\ -**reduction** of `G`.\n+  As before, `X` is omitted if it contains all actions in `G`.\n+\n+Since interoperable causality graphs are acyclic, their vertices can be sorted topologically and the resulting list is again a causality graph, where every vertex has an outgoing edge to all later vertices.\n+If the original causality graph is `X`\\ -consistent, then so is the topological sort, as topological sorting merely adds edges.\n+\n+\n+From interoperable causality graphs to ledgers\n+==============================================\n+\n+Interoperable causality graphs `G` are linked to ledgers `L` in the DAML Ledger Model via topological sort and reduction.\n+\n+* Given an interoperable causality graph `G`,\n+  drop the incoming and outgoing ledger annotations and all transfer vertices,\n+  topologically sort the transaction vertices,\n+  and extend the resulting list of transactions with the requesters to obtain a sequence of commits `L`.\n+\n+* Given a sequence of commits `L`,\n+  use the transactions as vertices and add an edge from `tx1` to `tx2` whenever `tx1`\\ 's commit precedes `tx2`\\ 's commit in the sequence.\n+  Then add transfer vertices and incoming and outgoing ledger annotations as needed and connect them with edges to the transaction vertices.\n+\n+This link preserves consistency only to some extent.\n+Namely, if an interoperable causality graph is interoperable consistent for a contract `c`, then the corresponding ledger is consistent for the contract `c`, too.\n+However, an interoperable-consistent causality graph does not yield a consistent ledger because key consistency may be violated.\n+Conversely, a consistent ledger does not talk about the incoming and outgoing ledger annotations and therefore cannot enforce that the annotations are consistent.\n+\n+.. _ledger-aware-projection:\n+\n+Ledger-aware projection\n+***********************\n+\n+A Participant Node maintains a local ledger for each party it hosts and the Transaction Service outputs a topological sort of this local ledger.\n+When the Participant Node hosts the party on several ledgers, this local ledger is an interoperable causality graph.\n+This section defines the ledger-aware projection of an interoperable causality graph, which yields such a local ledger.\n+\n+Definition »Y-labelled action«\n+  An action with incoming and outgoing ledger annotations is **Y-labelled** for a set `Y`\n+  if its incoming or outgoing ledger annotation is an element of `Y`.\n+\n+Definition »Ledger-aware projection for transactions«\n+  Let `Y` be a set of DAML ledgers and `tx` a transaction whose actions are annotated with incoming and outgoing ledgers.\n+  Let `Act` be the set of `Y`\\ -labelled subactions of `tx` that the party `P` is an informee of.\n+  The **ledger-aware projection** of `tx` for `P` (`P`-**projection on** `Y`) consists of all the maximal elements of `Act` (w.r.t. the subaction relation) in execution order.\n+\n+.. note::\n+   Every action contains all its subactions.\n+   So if `act` is included in the `P`\\ -projection on `Y` of `tx`,\n+   then all subactions of `act` are also part of the projection.\n+   Such a subaction `act'` may not be `Y`\\ -labelled itself though, i.e., belong to a different ledger.\n+   If `P` is an informee of `act'`, the Participant Node will mark `act'` as merely being witnessed on `P`\\ 's transaction stream, as explained below.\n+\n+The :ref:`cross-domain transaction in the paint counteroffer workflow <counteroffer-interoperable-causality-graph>`, for example, has the following projections for Alice and the painter on the `Iou` ledger (yellow) and the painting ledger (green).\n+Here, the projections on the green ledger include the actions of the yellow ledger because a projection includes the subactions.\n+\n+.. https://www.lucidchart.com/documents/edit/f8ec5741-7a37-4cf5-92a9-bf7b3132ba8e\n+.. image:: ./images/projecting-transactions-paint-offer-ledger-aware.svg\n+   :align: center\n+   :width: 60%\n+\n+Definition »Projection for transfer actions«\n+  Let `act` be a transfer action annotated with an incoming ledger and/or an outgoing ledger.\n+  The **projection** of `act` on a set of ledgers `Y`\n+  removes the annotations from `act` that are not in `Y`.\n+  If the projection removes all annotations, it is empty.\n+\n+  The **projection** of `act` to a party `P` on `Y` (`P`\\ -**projection** on `Y`)\n+  is the projection of `act` on `Y` if `P` is a stakeholder of the contract, and empty otherwise.\n+\n+Definition »Interoperable consistency for a party«\n+  An interoperable causality graph `G` is **consistent for a party** `P` on a set of ledgers `Y` (`P`\\ -**consistent** on `Y`)\n+  if `G` is interoperable consistent on the set of `Y`\\ -labelled actions in `G` of which `P` is an informee.\n+\n+The notions of `X`-minimality and `X`-reduction extend to a party `P` on a set `Y` of ledgers accordingly.\n+\n+Definition »Ledger-aware projection for interoperable causality graphs«\n+  Let `G` be an interoperable consistent causality graph and `Y` be a set of DAML ledgers.\n+  The **projection** of `G` to party `P` on `Y` (`P`\\ -**projection** on `Y`) is the `P`\\ -reduction on `Y` of the following causality graph `G'`, which is `P`\\ -consistent on `Y`:\n+\n+  * The vertices of `G'` are the vertices of `G` projected to `P` on `Y`, excluding empty projections.\n+\n+  * There is an edge between two vertices `v`:sub:`1` and `v`:sub:`2` in `G'` if there is an edge from the `G`\\ -vertex corresponding to `v`:sub:`1` to the `G`\\ -vertex corresponding to `v`:sub:`2`.\n+\n+If `G` is an interoperable consistent causality graph, then the `P`\\ -projection on `Y` is `P`\\ -consistent on `Y`, too.\n+\n+For example, the :ref:`interoperable causality graph for the paint counteroffer workflow <counteroffer-interoperable-causality-graph>` is projected as follows.\n+\n+.. https://app.lucidchart.com/documents/edit/d788b464-d670-4029-b2c0-d537c023052f\n+   \n+.. image:: ./images/counteroffer-causality-ledgeraware-projection.svg\n+   :align: center\n+   :width: 100%\n+\n+The following points are worth highlighting:\n+\n+* In Alice's projection on the green ledger, Alice witnesses the archival of her `Iou`.\n+  As explained in the :ref:`interop-ordering-guarantees` below,\n+  the **Exercise** action is marked as merely being witnessed\n+  in the transaction stream of a Participant Node that hosts Alice on the green ledger but not on the yellow ledger.\n+  Similarly, the Painter merely witnesses the **Create** of his `Iou` in the Painter's projection on the green ledger.\n+\n+* In the Painter's projections, the `ShouIou` transaction `tx3` is unordered w.r.t. to the `CounterOffer` acceptance in `tx4`\n+  like in the :ref:`case of ordinary causality graphs <counteroffer-causality-projections>`.\n+  The edge `tx3` -> `tx4` is removed by the reduction step during projection.\n+\n+The projection of transfer actions can be illustrated with the :ref:`interoperable-causality-graph-linear`.\n+The `A`-projections on the yellow and green ledger look as follows.\n+The white color indicates that a transfer action has no incoming or outgoing ledger annotation.\n+That is, a **Leave** action is white on the right hand side and an **Enter** action is white on the left hand side.\n+\n+.. https://app.lucidchart.com/documents/edit/edbf9aaf-b7da-4e68-b9c9-9e631c3a87bb\n+\n+.. image:: ./images/transfer-projection.svg\n+   :align: center\n+   :width: 100%\n+\n+.. _interop-ordering-guarantees:\n+\n+Ledger API ordering guarantees\n+******************************\n+\n+The Transaction Service and the Active Contract Service are derived from the local ledger that the Participant Node maintains for the party.\n+Let `Y` be the set of ledgers on which the Participant Node hosts a party.\n+The transaction tree stream outputs a topological sort of the party's local ledger on `Y`, with the following modifications:\n+\n+#. **Transfer** actions with either an incoming or an outgoing ledger annotation are output as **Enter** and **Leave** events.\n+   **Transfer** actions with both incoming and outgoing ledger annotations are omitted.\n+\n+#. The incoming and outgoing ledger annotations are not output.\n+   Transaction actions with an incoming or outgoing ledger annotation\n+   that is not in `Y` are marked as merely being witnessed if the\n+   party is an informee of the action.\n+\n+#. **Fetch** nodes and **NoSuchKey** are omitted.\n+\n+The flat transaction stream contains precisely the ``CreatedEvent``\\ s, ``ArchivedEvent``\\ s, and the **Enter** and **Leave** actions that correspond to **Create**, consuming **Exercise**, **Enter** and **Leave** actions in transaction trees on the transaction tree stream where the party is a stakeholder of the affected contract and that are not marked as merely being witnessed.\n+\n+Similarly, the active contract service provides the set of contracts that are active at the returned offset according to the Transaction Service streams."
  }
]