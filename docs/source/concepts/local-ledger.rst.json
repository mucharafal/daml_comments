[
  {
    "id" : "9e339da2-bf35-474f-b600-9d0f64d243ae",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "00c0a138-b9e0-49b7-9432-a139f405b0f2",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "The images (and the ledger model) assume a total ordering, which might be confusing since we're saying that there's no total order in the previous paragraph; can you briefly explain this?",
        "createdAt" : "2020-08-17T08:51:48Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c6ba071c-d479-4064-b4b7-c52a64f3d7f3",
        "parentId" : "00c0a138-b9e0-49b7-9432-a139f405b0f2",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Added two sentences.",
        "createdAt" : "2020-08-17T12:42:45Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,452 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _local-ledger:\n+\n+Causality and Local Ledgers\n+###########################\n+\n+DAML ledgers do not totally order all transactions.\n+So different parties may observe two transactions on different Participant Nodes in different orders via the :ref:`Ledger API <ledger-api-services>`.\n+Moreover, different Participant Nodes may output two transactions for the same party in different orders.\n+This document explains the ordering guarantees that DAML ledgers do provide, by :ref:`example <causality-examples>` and formally via the concept of :ref:`causality graphs <causality-graph>` and :ref:`local ledgers <local-ledger-structure>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+.. _causality-examples:\n+\n+Causality examples\n+******************\n+\n+The following examples illustrate the ordering guarantees of the Ledger API.\n+They use the paint counteroffer workflow from the DAML Ledger Model's :ref:`privacy section <da-model-privacy>`."
  },
  {
    "id" : "ce9aefc7-5dfc-4ab9-b0d9-0d7efb483b75",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "315098a3-1a7e-4cff-93b6-ee7e49609e64",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Again, they're clearly ordered in the image, so I'd try to reword this slightly (basically, what the last sentence of the paragraph does).",
        "createdAt" : "2020-08-17T08:56:27Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3d163c06-193f-42c4-ba25-0f8e6f34bbba",
        "parentId" : "315098a3-1a7e-4cff-93b6-ee7e49609e64",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Slightly reworded.",
        "createdAt" : "2020-08-17T12:44:09Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,452 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _local-ledger:\n+\n+Causality and Local Ledgers\n+###########################\n+\n+DAML ledgers do not totally order all transactions.\n+So different parties may observe two transactions on different Participant Nodes in different orders via the :ref:`Ledger API <ledger-api-services>`.\n+Moreover, different Participant Nodes may output two transactions for the same party in different orders.\n+This document explains the ordering guarantees that DAML ledgers do provide, by :ref:`example <causality-examples>` and formally via the concept of :ref:`causality graphs <causality-graph>` and :ref:`local ledgers <local-ledger-structure>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+.. _causality-examples:\n+\n+Causality examples\n+******************\n+\n+The following examples illustrate the ordering guarantees of the Ledger API.\n+They use the paint counteroffer workflow from the DAML Ledger Model's :ref:`privacy section <da-model-privacy>`.\n+Recall that :ref:`the party projections <da-paint-counteroffer-example>` are as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/c4df0455-13ab-415f-b457-f5654c2684be\n+.. image:: ./ledger-model/images/divulgence-for-disclosure-counteroffer.svg\n+   :align: center\n+   :width: 100%\n+\n+\n+.. _causality-example-create-archive:\n+\n+Stakeholders of a contract see creation and archival in the same order.\n+=======================================================================\n+\n+The creation of the `CounterOffer A P Bank` is ordered before the painter exercising the consuming choice on the `CounterOffer`."
  },
  {
    "id" : "11b1d2a2-da00-412b-acf1-5de153885530",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "54587f1f-4fe8-457e-ba75-090f81829f1e",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "```suggestion\r\nbecause the Bank is a signatory of the `Iou Bank A` contract and Alice is a stakeholder of the `Iou Bank A` contract and an actor on the **Fetch** action.\r\n```",
        "createdAt" : "2020-08-17T09:00:16Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,452 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _local-ledger:\n+\n+Causality and Local Ledgers\n+###########################\n+\n+DAML ledgers do not totally order all transactions.\n+So different parties may observe two transactions on different Participant Nodes in different orders via the :ref:`Ledger API <ledger-api-services>`.\n+Moreover, different Participant Nodes may output two transactions for the same party in different orders.\n+This document explains the ordering guarantees that DAML ledgers do provide, by :ref:`example <causality-examples>` and formally via the concept of :ref:`causality graphs <causality-graph>` and :ref:`local ledgers <local-ledger-structure>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+.. _causality-examples:\n+\n+Causality examples\n+******************\n+\n+The following examples illustrate the ordering guarantees of the Ledger API.\n+They use the paint counteroffer workflow from the DAML Ledger Model's :ref:`privacy section <da-model-privacy>`.\n+Recall that :ref:`the party projections <da-paint-counteroffer-example>` are as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/c4df0455-13ab-415f-b457-f5654c2684be\n+.. image:: ./ledger-model/images/divulgence-for-disclosure-counteroffer.svg\n+   :align: center\n+   :width: 100%\n+\n+\n+.. _causality-example-create-archive:\n+\n+Stakeholders of a contract see creation and archival in the same order.\n+=======================================================================\n+\n+The creation of the `CounterOffer A P Bank` is ordered before the painter exercising the consuming choice on the `CounterOffer`.\n+(If the **Create** was ordered after the **Exercise**, the resulting shared ledger would be inconsistent, which violates the validity guarantee of DAML ledgers.)\n+Accordingly, Alice will see the creation before the archival on her transaction stream and so will the painter.\n+This does not depend on whether they are hosted on the same Participant Node.\n+\n+.. _causality-example-create-use-archive:\n+\n+Signatories of a contract and stakeholder actors see usages after the creation and before the archival.\n+=======================================================================================================\n+\n+The `Fetch A (Iou Bank A)` action comes after the creation of the `Iou Bank A` and before its archival,\n+for both Alice and the Bank,\n+because the Bank is a signatory of the `Iou Bank A` contract and Alice is stakeholder of the `Iou Bank A` contract and an actor on the **Fetch** action."
  },
  {
    "id" : "2799741e-2875-4995-9736-49084ec0eba9",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "46ebe149-7928-414c-b449-2c2d336d2f7c",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "```suggestion\r\nSimilarly, being an actor of an **Exercise** action induces order with respect to other uses of the contract only if the actor is a contract stakeholder.\r\n```",
        "createdAt" : "2020-08-17T09:17:27Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,452 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _local-ledger:\n+\n+Causality and Local Ledgers\n+###########################\n+\n+DAML ledgers do not totally order all transactions.\n+So different parties may observe two transactions on different Participant Nodes in different orders via the :ref:`Ledger API <ledger-api-services>`.\n+Moreover, different Participant Nodes may output two transactions for the same party in different orders.\n+This document explains the ordering guarantees that DAML ledgers do provide, by :ref:`example <causality-examples>` and formally via the concept of :ref:`causality graphs <causality-graph>` and :ref:`local ledgers <local-ledger-structure>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+.. _causality-examples:\n+\n+Causality examples\n+******************\n+\n+The following examples illustrate the ordering guarantees of the Ledger API.\n+They use the paint counteroffer workflow from the DAML Ledger Model's :ref:`privacy section <da-model-privacy>`.\n+Recall that :ref:`the party projections <da-paint-counteroffer-example>` are as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/c4df0455-13ab-415f-b457-f5654c2684be\n+.. image:: ./ledger-model/images/divulgence-for-disclosure-counteroffer.svg\n+   :align: center\n+   :width: 100%\n+\n+\n+.. _causality-example-create-archive:\n+\n+Stakeholders of a contract see creation and archival in the same order.\n+=======================================================================\n+\n+The creation of the `CounterOffer A P Bank` is ordered before the painter exercising the consuming choice on the `CounterOffer`.\n+(If the **Create** was ordered after the **Exercise**, the resulting shared ledger would be inconsistent, which violates the validity guarantee of DAML ledgers.)\n+Accordingly, Alice will see the creation before the archival on her transaction stream and so will the painter.\n+This does not depend on whether they are hosted on the same Participant Node.\n+\n+.. _causality-example-create-use-archive:\n+\n+Signatories of a contract and stakeholder actors see usages after the creation and before the archival.\n+=======================================================================================================\n+\n+The `Fetch A (Iou Bank A)` action comes after the creation of the `Iou Bank A` and before its archival,\n+for both Alice and the Bank,\n+because the Bank is a signatory of the `Iou Bank A` contract and Alice is stakeholder of the `Iou Bank A` contract and an actor on the **Fetch** action.\n+\n+.. _causality-example-commit-atomic:\n+\n+Commits are atomic.\n+===================\n+\n+Alice sees the **Create** of her `Iou` before the creation of the `CounterOffer`,\n+because the `CounterOffer` is created in the same commit as the **Fetch** of the `Iou`\n+and the **Fetch** commit comes after the **Create** of the `Iou`.\n+\n+.. _causality-example-non-consuming:\n+\n+Non-consuming usages in different commits may appear in different orders.\n+=========================================================================\n+\n+Suppose that the Bank exercises a non-consuming choice on the `Iou Bank A` without consequences while Alice creates the `CounterOffer`.\n+In the ledger shown below, the Bank's commit comes before Alice's commit.\n+   \n+.. https://app.lucidchart.com/documents/edit/1923969f-7bf2-45e0-a68d-6a0b2d308883/0_0\n+   \n+.. image:: ./images/counteroffer-double-fetch.svg\n+   :align: center\n+   :width: 100%\n+\n+The Bank's projection contains the nonconsuming **Exercise** and the **Fetch** action on the `Iou`.\n+Yet, the **Fetch** may come before the non-consuming **Exercise** in the Bank's transaction tree stream.\n+\n+.. _causality-example-out-of-band:\n+\n+Out-of-band causality is not respected.\n+=======================================\n+\n+The following examples assume that Alice splits up her commit into two as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/05be08a6-7374-41f0-8b96-31276d2c5349/\n+\n+.. _split-counteroffer-ledger:\n+   \n+.. figure:: ./images/counteroffer-split-commit.svg\n+   :align: center\n+   :width: 100%\n+\n+   Counteroffer workflow with four commits.\n+   \n+Alice can specify in the `CounterOffer` the `Iou` that she wants to pay the painter with.\n+In a deployed implementation, Alice's application first observes the created `Iou` contract via the transaction service or active contract service before she requests to create the `CounterOffer`.\n+Such application logic does not induce an ordering between commits.\n+So the creation of the `CounterOffer` need not come after the creation of the `Iou`.\n+\n+If Alice is hosted on several Participant Nodes, the Participant Nodes can therefore output the two creations in either order.\n+   \n+The rationale for this behaviour is that Alice could have learnt about the contract ID out of band or made it up.\n+The Participant Nodes therefore cannot know whether there will ever be a **Create** event for the contract.\n+So if Participant Nodes delayed outputting the **Create** action for the `CounterOffer` until a **Create** event for the `Iou` contract was published,\n+this delay might last forever and liveness is lost.\n+DAML ledgers therefore do not capture data flow through applications.\n+\n+.. _causality-divulgence-example:\n+\n+Divulged actions do not induce order.\n+=====================================\n+\n+The painter witnesses the fetching of Alice's `Iou` when the `ShowIou` contract is consumed.\n+The painter also witnesses the **Exercise** of the `Iou` when Alice exercises the transfer choice as a consequence of the painter accepting the `CounterOffer`.\n+However, as the painter is not a stakeholder of Alice's `Iou` contract, he may observe Alice's `ShowIou` commit after the archival of the `Iou` as part of accepting the `CounterOffer`.\n+\n+In practice, this can happen in a setup where two Participant Nodes `N`:sub:`1` and `N`:sub:`2` host the painter.\n+He sees the divulged `Iou` and the created `CounterOffer` through `N`:sub:`1`\\ 's transaction tree stream\n+and then submits the acceptance through `N`:sub:`1`.\n+Like in the previous example, `N`:sub:`2` does not know about the dependence of the two commits.\n+Accordingly, `N`:sub:`2` may output the accepting transaction *before* the `ShowIou` contract on the transaction stream.\n+      \n+Even though this may seem unexpected, it is in line with stakeholder-based ledgers:\n+Since the painter is not a stakeholder of the `Iou` contract, he should not care about the archivals or creates of the contract.\n+In fact, the divulged `Iou` contract shows up neither in the painter's active contract service nor in the flat transaction stream.\n+Such witnessed events are included in the transaction tree stream as a convenience:\n+They relieve the painter from computing the consequences of the choice and enable him to check that the action conforms to the DAML model.\n+\n+By a similar argument, being an actor of an **Exercise** action induces order with respect to other uses of the contract only if the actor is a contract stakeholder."
  },
  {
    "id" : "4d416957-c8c9-410e-81fd-c9bd793491fd",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "e9e9273d-334b-47d9-88ba-4ec76eddb43a",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Minor: notation `topo(-)` not defined before. Is it a function or a relation?",
        "createdAt" : "2020-08-17T09:33:42Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81925a4b-dd4f-427b-b07e-3cedadf1ddf1",
        "parentId" : "e9e9273d-334b-47d9-88ba-4ec76eddb43a",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "I read this as being the definition of `topo` as in \" For a causality graph `G`, `topo(G)` is the topological sort of `G`\"",
        "createdAt" : "2020-08-17T11:23:01Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "de2b36cb-68c3-439b-9c33-3b60e7f049aa",
        "parentId" : "e9e9273d-334b-47d9-88ba-4ec76eddb43a",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "It was meant as @bame-da writes. But we actually use this notation only once more, so I removed it completely.",
        "createdAt" : "2020-08-17T12:45:58Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,452 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _local-ledger:\n+\n+Causality and Local Ledgers\n+###########################\n+\n+DAML ledgers do not totally order all transactions.\n+So different parties may observe two transactions on different Participant Nodes in different orders via the :ref:`Ledger API <ledger-api-services>`.\n+Moreover, different Participant Nodes may output two transactions for the same party in different orders.\n+This document explains the ordering guarantees that DAML ledgers do provide, by :ref:`example <causality-examples>` and formally via the concept of :ref:`causality graphs <causality-graph>` and :ref:`local ledgers <local-ledger-structure>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+.. _causality-examples:\n+\n+Causality examples\n+******************\n+\n+The following examples illustrate the ordering guarantees of the Ledger API.\n+They use the paint counteroffer workflow from the DAML Ledger Model's :ref:`privacy section <da-model-privacy>`.\n+Recall that :ref:`the party projections <da-paint-counteroffer-example>` are as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/c4df0455-13ab-415f-b457-f5654c2684be\n+.. image:: ./ledger-model/images/divulgence-for-disclosure-counteroffer.svg\n+   :align: center\n+   :width: 100%\n+\n+\n+.. _causality-example-create-archive:\n+\n+Stakeholders of a contract see creation and archival in the same order.\n+=======================================================================\n+\n+The creation of the `CounterOffer A P Bank` is ordered before the painter exercising the consuming choice on the `CounterOffer`.\n+(If the **Create** was ordered after the **Exercise**, the resulting shared ledger would be inconsistent, which violates the validity guarantee of DAML ledgers.)\n+Accordingly, Alice will see the creation before the archival on her transaction stream and so will the painter.\n+This does not depend on whether they are hosted on the same Participant Node.\n+\n+.. _causality-example-create-use-archive:\n+\n+Signatories of a contract and stakeholder actors see usages after the creation and before the archival.\n+=======================================================================================================\n+\n+The `Fetch A (Iou Bank A)` action comes after the creation of the `Iou Bank A` and before its archival,\n+for both Alice and the Bank,\n+because the Bank is a signatory of the `Iou Bank A` contract and Alice is stakeholder of the `Iou Bank A` contract and an actor on the **Fetch** action.\n+\n+.. _causality-example-commit-atomic:\n+\n+Commits are atomic.\n+===================\n+\n+Alice sees the **Create** of her `Iou` before the creation of the `CounterOffer`,\n+because the `CounterOffer` is created in the same commit as the **Fetch** of the `Iou`\n+and the **Fetch** commit comes after the **Create** of the `Iou`.\n+\n+.. _causality-example-non-consuming:\n+\n+Non-consuming usages in different commits may appear in different orders.\n+=========================================================================\n+\n+Suppose that the Bank exercises a non-consuming choice on the `Iou Bank A` without consequences while Alice creates the `CounterOffer`.\n+In the ledger shown below, the Bank's commit comes before Alice's commit.\n+   \n+.. https://app.lucidchart.com/documents/edit/1923969f-7bf2-45e0-a68d-6a0b2d308883/0_0\n+   \n+.. image:: ./images/counteroffer-double-fetch.svg\n+   :align: center\n+   :width: 100%\n+\n+The Bank's projection contains the nonconsuming **Exercise** and the **Fetch** action on the `Iou`.\n+Yet, the **Fetch** may come before the non-consuming **Exercise** in the Bank's transaction tree stream.\n+\n+.. _causality-example-out-of-band:\n+\n+Out-of-band causality is not respected.\n+=======================================\n+\n+The following examples assume that Alice splits up her commit into two as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/05be08a6-7374-41f0-8b96-31276d2c5349/\n+\n+.. _split-counteroffer-ledger:\n+   \n+.. figure:: ./images/counteroffer-split-commit.svg\n+   :align: center\n+   :width: 100%\n+\n+   Counteroffer workflow with four commits.\n+   \n+Alice can specify in the `CounterOffer` the `Iou` that she wants to pay the painter with.\n+In a deployed implementation, Alice's application first observes the created `Iou` contract via the transaction service or active contract service before she requests to create the `CounterOffer`.\n+Such application logic does not induce an ordering between commits.\n+So the creation of the `CounterOffer` need not come after the creation of the `Iou`.\n+\n+If Alice is hosted on several Participant Nodes, the Participant Nodes can therefore output the two creations in either order.\n+   \n+The rationale for this behaviour is that Alice could have learnt about the contract ID out of band or made it up.\n+The Participant Nodes therefore cannot know whether there will ever be a **Create** event for the contract.\n+So if Participant Nodes delayed outputting the **Create** action for the `CounterOffer` until a **Create** event for the `Iou` contract was published,\n+this delay might last forever and liveness is lost.\n+DAML ledgers therefore do not capture data flow through applications.\n+\n+.. _causality-divulgence-example:\n+\n+Divulged actions do not induce order.\n+=====================================\n+\n+The painter witnesses the fetching of Alice's `Iou` when the `ShowIou` contract is consumed.\n+The painter also witnesses the **Exercise** of the `Iou` when Alice exercises the transfer choice as a consequence of the painter accepting the `CounterOffer`.\n+However, as the painter is not a stakeholder of Alice's `Iou` contract, he may observe Alice's `ShowIou` commit after the archival of the `Iou` as part of accepting the `CounterOffer`.\n+\n+In practice, this can happen in a setup where two Participant Nodes `N`:sub:`1` and `N`:sub:`2` host the painter.\n+He sees the divulged `Iou` and the created `CounterOffer` through `N`:sub:`1`\\ 's transaction tree stream\n+and then submits the acceptance through `N`:sub:`1`.\n+Like in the previous example, `N`:sub:`2` does not know about the dependence of the two commits.\n+Accordingly, `N`:sub:`2` may output the accepting transaction *before* the `ShowIou` contract on the transaction stream.\n+      \n+Even though this may seem unexpected, it is in line with stakeholder-based ledgers:\n+Since the painter is not a stakeholder of the `Iou` contract, he should not care about the archivals or creates of the contract.\n+In fact, the divulged `Iou` contract shows up neither in the painter's active contract service nor in the flat transaction stream.\n+Such witnessed events are included in the transaction tree stream as a convenience:\n+They relieve the painter from computing the consequences of the choice and enable him to check that the action conforms to the DAML model.\n+\n+By a similar argument, being an actor of an **Exercise** action induces order with respect to other uses of the contract only if the actor is a contract stakeholder.\n+This is because non-stakeholder actors of an **Exercise** action merely authorize the action, but they do not track whether the contract is active; this is what signatories and observers are for.\n+\n+.. _causality-example-depend-on-party:\n+\n+The ordering guarantees depend on the party.\n+============================================\n+\n+By the previous example, for the painter, fetching the `Iou` is not ordered before transferring the `Iou`.\n+For Alice, however, the **Fetch** must appear before the **Exercise** \n+because Alice is a stakeholder on the `Iou` contract.\n+This shows that the ordering guarantees depend on the party.\n+\n+\n+.. _causality-graph:\n+   \n+Causality graphs\n+****************\n+\n+The above examples indicate that DAML ledgers order transactions only partially.\n+DAML ledgers can be represented as finite directed acyclic graphs (DAG) of transactions.\n+\n+.. _def-causality-graph:\n+\n+Definition »causality graph«\n+  A **causality graph** is a finite directed acyclic graph `G` of transactions that is transitively closed.\n+  Transitively closed means that whenever `v`:sub:`1` -> `v`:sub:`2` and `v`:sub:`2` -> `v`:sub:`3` are edges in `G`,\n+  then there is also an edge `v`:sub:`1` -> `v`:sub:`3` in `G`.\n+\n+.. _def-action-order:\n+\n+Definition »action order«\n+  For a causality graph `G`,\n+  the induced **action order** on the actions in the transactions combines the graph-induced order between transactions with the execution order of actions inside each transaction.\n+  It is the least partial order that includes the following ordering relations between two actions `act`:sub:`1` and `act`:sub:`2`:\n+  \n+  * `act`:sub:`1` and `act`:sub:`2` belong to the same transaction and `act`:sub:`1` precedes `act`:sub:`2` in the transaction.\n+  * `act`:sub:`1` and `act`:sub:`2` belong to different transactions in vertices `tx`:sub:`1` and `tx`:sub:`2` and there is a path in `G` from `tx`:sub:`1` to `tx`:sub:`2`.\n+\n+    .. note::\n+       Checking for an *edge* instead of a *path* in `G` from `tx`:sub:`1` to `tx`:sub:`2` is equivalent\n+       because causality graphs are transitively closed.\n+       The definition uses *path* because the figures below omit transitive edges for readability.\n+\n+The action order is a partial order on the actions in a causality graph.\n+For example, the following diagram shows such a causality graph for the ledger in the above :ref:`Out-of-band causality example <causality-example-out-of-band>`.\n+Each grey box represents one transaction and the graph edges are the solid arrows between the boxes.\n+Diagrams omit transitive edges for readability; in this graph the edge from `tx1` to `tx4` is not shown.\n+The **Create** action of Alice's `Iou` is ordered before the **Create** action of the `ShowIou` contract because there is an edge from the transaction `tx1` with the `Iou` **Create** to the transaction `tx3` with the `ShowIou` **Create**.\n+Moreover, the `ShowIou` **Create** action is ordered before the **Fetch** of Alice's `Iou` because the **Create** action precedes the **Fetch** action in the transaction.\n+In contrast, the **Create** actions of the `CounterOffer` and Alice's `Iou` are unordered: neither precedes the other because they belong to different transaction and there is no directed path between them.\n+\n+.. https://app.lucidchart.com/documents/edit/44d97c43-1bb2-4d60-ac30-6b6048b5b5f5\n+\n+.. _causality-graph-couteroffer-split:\n+\n+.. figure:: ./images/counteroffer-split-action-order.svg\n+   :align: center\n+   :width: 100%\n+\n+   Causality graph for the :ref:`counteroffer workflow with four commits <split-counteroffer-ledger>`.\n+\n+.. _causality-graph-consistency:\n+\n+Consistency\n+===========\n+\n+Consistency ensures that a causality graph sufficiently orders all the transactions.\n+It generalizes :ref:`ledger consistency <da-model-consistency>` from the DAML Ledger Model as :ref:`explained below <causality-consistency-ledger-model>`.\n+\n+.. _def-causal-consistency-contract:\n+\n+Definition »Causal consistency for a contract«\n+  Let `G` be a causality graph and `X` be a set of actions on a contract `c` that belong to transactions in `G`.\n+  The graph `G` is **causally consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  * If `X` is not empty, then `X` contains exactly one **Create** action.\n+    This action precedes all other actions in `X` in `G`\\ 's action order.\n+\n+  * If `X` contains a consuming **Exercise** action `act`, then `act` follows all actions in `X` other than `act` in `G`\\ 's action order.\n+\n+Definition »Causal consistency for a key«\n+  Let `G` be a causality graph and `X` be a set of actions on a key `k` that belong to transactions in `G`.\n+  The graph `G` is **causally consistent for the key** `k` on `X` if all of the following hold:\n+\n+  * All **Create** and consuming **Exercise** actions in `X` are totally ordered in `G`\\ 's action order\n+    and **Create**\\ s and consuming **Exercise**\\ s alternate, starting with **Create**.\n+    Every consecutive **Create**\\ -**Exercise** pair acts on the same contract.\n+\n+  * All **NoSuchKey** actions in `X` are action-ordered with respect to all **Create** and consuming **Exercise** actions in `X`.\n+    No **NoSuchKey** action is action-ordered between a **Create** action and its subsequent consuming **Exercise** action in `X`.\n+\n+.. _def-consistency-causality-graph:\n+    \n+Definition »Consistency for a causality graph«\n+  Let `X` be a subset of the actions in a causality graph `G`.\n+  Then `G` is **consistent** on `X` (or `X`-**consistent**) if `G` is causally consistent for all contracts `c` on the set of actions on `c` in `X` and for all keys `k` on the set of actions on `k` in `X`.\n+  `G` is **consistent** if `G` is consistent on all the actions in `G`.\n+\n+When edges are added to an `X`-consistent causality graph such that it remains acyclic and transitively closed,\n+the resulting graph is again `X`-consistent.\n+So it makes sense to consider minimal consistent causality graphs.\n+\n+.. _minimal-consistent-causality-graph:\n+\n+Definition »Minimal consistent causality graph«\n+  An `X`-consistent causality graph `G` is `X`\\ -**minimal** if no strict subgraph of `G` (same vertices, fewer edges) is an `X`-consistent causality graph.\n+  If `X` is the set of all actions in `G`, then `X` is omitted.\n+\n+For example, the :ref:`above causality graph for the counteroffer workflow <causality-graph-couteroffer-split>` is consistent.\n+This causality graph is minimal, as the following analysis shows:\n+\n++----------------+--------------------------------------------------------------------------------------+\n+| Edge           | Justification                                                                        |\n++================+======================================================================================+\n+| `tx1` -> `tx3` | Alice's `Iou` **Create** action of  must precede the **Fetch** action.               |\n++----------------+--------------------------------------------------------------------------------------+\n+| `tx2` -> `tx4` | The `CounterOffer` **Create** action of  must precede the **Exercise** action.       |\n++----------------+--------------------------------------------------------------------------------------+\n+| `tx3` -> `tx4` | The consuming **Exercise** action on Alice's `Iou` must follow the **Fetch** action. |\n++----------------+--------------------------------------------------------------------------------------+\n+\n+We can focus on parts of the causality graph by restricting the set `X`.\n+If `X` consists of the actions on `Iou` contracts, this causality graph is `X`\\ -consistent.\n+Yet, it is not `X`\\ -minimal since the edge `tx2` -> `tx4` can be removed without violating `X`\\ -consistency: the edge is required only because of the `CounterOffer` actions, which are excluded from `X`.\n+The `X`\\ -minimal consistent causality graph looks as follows, where the actions in `X` are highlighted in red.\n+\n+.. https://app.lucidchart.com/documents/edit/4aa93018-bf32-42e1-98a1-3cc1943cdd36\n+\n+.. _causality-counteroffer-Iou-minimal:\n+   \n+.. figure:: ./images/causality-counteroffer-Iou-minimal.svg\n+   :align: center\n+   :width: 100%\n+\n+   Minimal consistent causality graph for the highlighted actions.\n+\n+Another example of a minimal causality graph is shown below.\n+At the top, the transactions `tx1` to `tx4` create an `Iou` for Alice, exercise two non-consuming choices on it, and transfer the `Iou` to the painter.\n+At the bottom, `tx5` asserts that there is no key for an Account contract for the painter.\n+Then, `tx6` creates an such account with balance 0 and `tx7` deposits the painter's `Iou` from `tx4` into the account, updating the balance to 1.\n+\n+.. https://app.lucidchart.com/documents/edit/b9d84f0f-e459-427c-86b8-c767662af326\n+   \n+.. image:: ./images/causality-consistency-examples.svg\n+   :align: center\n+   :width: 100%\n+\n+Unlike in a linearly ordered ledger, the causality graph relates the transactions of the `Iou` transfer workflow with the `Account` creation workflow only at the end, when the `Iou` is deposited into the account.\n+As will be formalized below, the Bank, Alice, and the painter therefore need not observe the transactions `tx1` to `tx7` in the same order.\n+\n+Moreover, transaction `tx2` and `tx3` are unordered in this causality graph even though they act on the same `Iou` contract.\n+However, as both actions are non-consuming, they do not interfere with each other and could therefore be parallelized, too.\n+Alice and the Bank accordingly may observe them in different orders.\n+\n+The **NoSuchKey** action in `tx5` must be ordered with respect to the two Account **Create** actions in `tx6` and `tx7` and the consuming **Exercise** on the Account contract in `tx7`, by the key consistency conditions.\n+For this set of transactions, consistency allows only one such order: `tx5` comes before `tx6` because `tx7` is atomic: `tx5` cannot be interleaved with `tx7`, e.g., between the consuming **Exercise** of the `Acc Bank P P 0` and the **Create** of the updated account `Acc Bank P P 1`.\n+\n+**NoSuchKey** actions are similar to non-consuming **Exercise**\\ s and **Fetch**\\ es of contracts when it comes to causal ordering: If there were another transaction `tx5'` with a **NoSuchKey** `(Acc, Bank, P)` action, then `tx5` and `tx5'` need not be ordered, just like `tx2` and `tx3` are unordered.\n+\n+.. _causality-consistency-ledger-model:\n+\n+From causality graphs to ledgers\n+================================\n+\n+Since causality graphs are acyclic, their vertices can be sorted topologically and the resulting list is again a causality graph, where every vertex has an outgoing edge to all later vertices.\n+If the original causality graph is `X`\\ -consistent, then so is the topological sort, as topological sorting merely adds edges.\n+For example, the transactions on the :ref:`ledger <split-counteroffer-ledger>` in the :ref:`out-of-band causality example <causality-example-out-of-band>` are a topological sort of the :ref:`corresponding causality graph <causality-graph-couteroffer-split>`.\n+\n+Conversely, we can reduce an `X`\\ -consistent causality graph to only the causal dependencies that `X`\\ -consistency imposes.\n+This gives a minimal `X`\\ -consistent causality graph.\n+\n+.. _def-reduction-causality-graph:\n+\n+Definition »Reduction of a consistent causality graph«\n+  For an `X`\\ -consistent causality graph `G`, there exists a unique minimal `X`\\ -consistent causality graph `reduce`:sub:`X`\\ `(G)` with the same vertices and the edges being a subset of `G`.\n+  `reduce`:sub:`X`\\ `(G)` is called the `X`\\ -**reduction** of `G`.\n+  As before, `X` is omitted if it contains all actions in `G`.\n+\n+The causality graph for the `CounterOffer` workflow is minimal and therefore its own reduction.\n+It is also the reduction of the topological sort, i.e., the :ref:`ledger <split-counteroffer-ledger>` in the :ref:`out-of-band causality example <causality-example-out-of-band>`.\n+\n+.. note::\n+   The reduction `reduce`:sub:`X`\\ `(G)` of an `X`\\ -consistent causality graph `G` can be computed as follows:\n+   \n+   #. Set the vertices of `G'` to the vertices of `G`.\n+   #. The causal consistency conditions for contracts and keys demand that certain pairs of actions\n+      `act`:sub:`1` and `act`:sub:`2` in `X` must be action-ordered.\n+      For each such pair, determine the actions' ordering in `G` and add an edge to `G'` from the earlier action's transaction to the later action's transaction.\n+   #. `reduce`:sub:`X`\\ `(G)` is the transitive closure of `G'`.\n+\n+Topological sort and reduction link causality graphs `G` to the ledgers `L` from the DAML Ledger Model.\n+Topological sort transforms a causality graph `G` into a sequence of transactions `topo(G)`; extending them with the requesters gives a sequence of commits, i.e., a ledger in the DAML Ledger Model."
  },
  {
    "id" : "f50425c8-bd31-4761-a28d-577c1a3fa276",
    "prId" : 6920,
    "comments" : [
      {
        "id" : "54178959-67fb-4114-b593-7e2981055b64",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "This is the \"split counteroffer\", do we consistently (what a pun!) distinguish between the split and the \"normal\" one in the doc?",
        "createdAt" : "2020-08-17T09:42:07Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "98fd89a4-793b-47fc-a3ac-6ac15cd0b53b",
        "parentId" : "54178959-67fb-4114-b593-7e2981055b64",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "No, we didn't. I've added a lot more `split` to the text to make it uniform.",
        "createdAt" : "2020-08-17T12:50:07Z",
        "updatedAt" : "2020-08-17T13:54:28Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8885b30c6321888b162207e49de808c69e3e0178",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,452 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _local-ledger:\n+\n+Causality and Local Ledgers\n+###########################\n+\n+DAML ledgers do not totally order all transactions.\n+So different parties may observe two transactions on different Participant Nodes in different orders via the :ref:`Ledger API <ledger-api-services>`.\n+Moreover, different Participant Nodes may output two transactions for the same party in different orders.\n+This document explains the ordering guarantees that DAML ledgers do provide, by :ref:`example <causality-examples>` and formally via the concept of :ref:`causality graphs <causality-graph>` and :ref:`local ledgers <local-ledger-structure>`.\n+\n+The presentation assumes that you are familiar with the following concepts:\n+\n+* The :ref:`Ledger API <ledger-api-services>`\n+\n+* The :ref:`DAML Ledger Model <da-ledgers>`\n+\n+.. _causality-examples:\n+\n+Causality examples\n+******************\n+\n+The following examples illustrate the ordering guarantees of the Ledger API.\n+They use the paint counteroffer workflow from the DAML Ledger Model's :ref:`privacy section <da-model-privacy>`.\n+Recall that :ref:`the party projections <da-paint-counteroffer-example>` are as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/c4df0455-13ab-415f-b457-f5654c2684be\n+.. image:: ./ledger-model/images/divulgence-for-disclosure-counteroffer.svg\n+   :align: center\n+   :width: 100%\n+\n+\n+.. _causality-example-create-archive:\n+\n+Stakeholders of a contract see creation and archival in the same order.\n+=======================================================================\n+\n+The creation of the `CounterOffer A P Bank` is ordered before the painter exercising the consuming choice on the `CounterOffer`.\n+(If the **Create** was ordered after the **Exercise**, the resulting shared ledger would be inconsistent, which violates the validity guarantee of DAML ledgers.)\n+Accordingly, Alice will see the creation before the archival on her transaction stream and so will the painter.\n+This does not depend on whether they are hosted on the same Participant Node.\n+\n+.. _causality-example-create-use-archive:\n+\n+Signatories of a contract and stakeholder actors see usages after the creation and before the archival.\n+=======================================================================================================\n+\n+The `Fetch A (Iou Bank A)` action comes after the creation of the `Iou Bank A` and before its archival,\n+for both Alice and the Bank,\n+because the Bank is a signatory of the `Iou Bank A` contract and Alice is stakeholder of the `Iou Bank A` contract and an actor on the **Fetch** action.\n+\n+.. _causality-example-commit-atomic:\n+\n+Commits are atomic.\n+===================\n+\n+Alice sees the **Create** of her `Iou` before the creation of the `CounterOffer`,\n+because the `CounterOffer` is created in the same commit as the **Fetch** of the `Iou`\n+and the **Fetch** commit comes after the **Create** of the `Iou`.\n+\n+.. _causality-example-non-consuming:\n+\n+Non-consuming usages in different commits may appear in different orders.\n+=========================================================================\n+\n+Suppose that the Bank exercises a non-consuming choice on the `Iou Bank A` without consequences while Alice creates the `CounterOffer`.\n+In the ledger shown below, the Bank's commit comes before Alice's commit.\n+   \n+.. https://app.lucidchart.com/documents/edit/1923969f-7bf2-45e0-a68d-6a0b2d308883/0_0\n+   \n+.. image:: ./images/counteroffer-double-fetch.svg\n+   :align: center\n+   :width: 100%\n+\n+The Bank's projection contains the nonconsuming **Exercise** and the **Fetch** action on the `Iou`.\n+Yet, the **Fetch** may come before the non-consuming **Exercise** in the Bank's transaction tree stream.\n+\n+.. _causality-example-out-of-band:\n+\n+Out-of-band causality is not respected.\n+=======================================\n+\n+The following examples assume that Alice splits up her commit into two as follows:\n+\n+.. https://www.lucidchart.com/documents/edit/05be08a6-7374-41f0-8b96-31276d2c5349/\n+\n+.. _split-counteroffer-ledger:\n+   \n+.. figure:: ./images/counteroffer-split-commit.svg\n+   :align: center\n+   :width: 100%\n+\n+   Counteroffer workflow with four commits.\n+   \n+Alice can specify in the `CounterOffer` the `Iou` that she wants to pay the painter with.\n+In a deployed implementation, Alice's application first observes the created `Iou` contract via the transaction service or active contract service before she requests to create the `CounterOffer`.\n+Such application logic does not induce an ordering between commits.\n+So the creation of the `CounterOffer` need not come after the creation of the `Iou`.\n+\n+If Alice is hosted on several Participant Nodes, the Participant Nodes can therefore output the two creations in either order.\n+   \n+The rationale for this behaviour is that Alice could have learnt about the contract ID out of band or made it up.\n+The Participant Nodes therefore cannot know whether there will ever be a **Create** event for the contract.\n+So if Participant Nodes delayed outputting the **Create** action for the `CounterOffer` until a **Create** event for the `Iou` contract was published,\n+this delay might last forever and liveness is lost.\n+DAML ledgers therefore do not capture data flow through applications.\n+\n+.. _causality-divulgence-example:\n+\n+Divulged actions do not induce order.\n+=====================================\n+\n+The painter witnesses the fetching of Alice's `Iou` when the `ShowIou` contract is consumed.\n+The painter also witnesses the **Exercise** of the `Iou` when Alice exercises the transfer choice as a consequence of the painter accepting the `CounterOffer`.\n+However, as the painter is not a stakeholder of Alice's `Iou` contract, he may observe Alice's `ShowIou` commit after the archival of the `Iou` as part of accepting the `CounterOffer`.\n+\n+In practice, this can happen in a setup where two Participant Nodes `N`:sub:`1` and `N`:sub:`2` host the painter.\n+He sees the divulged `Iou` and the created `CounterOffer` through `N`:sub:`1`\\ 's transaction tree stream\n+and then submits the acceptance through `N`:sub:`1`.\n+Like in the previous example, `N`:sub:`2` does not know about the dependence of the two commits.\n+Accordingly, `N`:sub:`2` may output the accepting transaction *before* the `ShowIou` contract on the transaction stream.\n+      \n+Even though this may seem unexpected, it is in line with stakeholder-based ledgers:\n+Since the painter is not a stakeholder of the `Iou` contract, he should not care about the archivals or creates of the contract.\n+In fact, the divulged `Iou` contract shows up neither in the painter's active contract service nor in the flat transaction stream.\n+Such witnessed events are included in the transaction tree stream as a convenience:\n+They relieve the painter from computing the consequences of the choice and enable him to check that the action conforms to the DAML model.\n+\n+By a similar argument, being an actor of an **Exercise** action induces order with respect to other uses of the contract only if the actor is a contract stakeholder.\n+This is because non-stakeholder actors of an **Exercise** action merely authorize the action, but they do not track whether the contract is active; this is what signatories and observers are for.\n+\n+.. _causality-example-depend-on-party:\n+\n+The ordering guarantees depend on the party.\n+============================================\n+\n+By the previous example, for the painter, fetching the `Iou` is not ordered before transferring the `Iou`.\n+For Alice, however, the **Fetch** must appear before the **Exercise** \n+because Alice is a stakeholder on the `Iou` contract.\n+This shows that the ordering guarantees depend on the party.\n+\n+\n+.. _causality-graph:\n+   \n+Causality graphs\n+****************\n+\n+The above examples indicate that DAML ledgers order transactions only partially.\n+DAML ledgers can be represented as finite directed acyclic graphs (DAG) of transactions.\n+\n+.. _def-causality-graph:\n+\n+Definition »causality graph«\n+  A **causality graph** is a finite directed acyclic graph `G` of transactions that is transitively closed.\n+  Transitively closed means that whenever `v`:sub:`1` -> `v`:sub:`2` and `v`:sub:`2` -> `v`:sub:`3` are edges in `G`,\n+  then there is also an edge `v`:sub:`1` -> `v`:sub:`3` in `G`.\n+\n+.. _def-action-order:\n+\n+Definition »action order«\n+  For a causality graph `G`,\n+  the induced **action order** on the actions in the transactions combines the graph-induced order between transactions with the execution order of actions inside each transaction.\n+  It is the least partial order that includes the following ordering relations between two actions `act`:sub:`1` and `act`:sub:`2`:\n+  \n+  * `act`:sub:`1` and `act`:sub:`2` belong to the same transaction and `act`:sub:`1` precedes `act`:sub:`2` in the transaction.\n+  * `act`:sub:`1` and `act`:sub:`2` belong to different transactions in vertices `tx`:sub:`1` and `tx`:sub:`2` and there is a path in `G` from `tx`:sub:`1` to `tx`:sub:`2`.\n+\n+    .. note::\n+       Checking for an *edge* instead of a *path* in `G` from `tx`:sub:`1` to `tx`:sub:`2` is equivalent\n+       because causality graphs are transitively closed.\n+       The definition uses *path* because the figures below omit transitive edges for readability.\n+\n+The action order is a partial order on the actions in a causality graph.\n+For example, the following diagram shows such a causality graph for the ledger in the above :ref:`Out-of-band causality example <causality-example-out-of-band>`.\n+Each grey box represents one transaction and the graph edges are the solid arrows between the boxes.\n+Diagrams omit transitive edges for readability; in this graph the edge from `tx1` to `tx4` is not shown.\n+The **Create** action of Alice's `Iou` is ordered before the **Create** action of the `ShowIou` contract because there is an edge from the transaction `tx1` with the `Iou` **Create** to the transaction `tx3` with the `ShowIou` **Create**.\n+Moreover, the `ShowIou` **Create** action is ordered before the **Fetch** of Alice's `Iou` because the **Create** action precedes the **Fetch** action in the transaction.\n+In contrast, the **Create** actions of the `CounterOffer` and Alice's `Iou` are unordered: neither precedes the other because they belong to different transaction and there is no directed path between them.\n+\n+.. https://app.lucidchart.com/documents/edit/44d97c43-1bb2-4d60-ac30-6b6048b5b5f5\n+\n+.. _causality-graph-couteroffer-split:\n+\n+.. figure:: ./images/counteroffer-split-action-order.svg\n+   :align: center\n+   :width: 100%\n+\n+   Causality graph for the :ref:`counteroffer workflow with four commits <split-counteroffer-ledger>`.\n+\n+.. _causality-graph-consistency:\n+\n+Consistency\n+===========\n+\n+Consistency ensures that a causality graph sufficiently orders all the transactions.\n+It generalizes :ref:`ledger consistency <da-model-consistency>` from the DAML Ledger Model as :ref:`explained below <causality-consistency-ledger-model>`.\n+\n+.. _def-causal-consistency-contract:\n+\n+Definition »Causal consistency for a contract«\n+  Let `G` be a causality graph and `X` be a set of actions on a contract `c` that belong to transactions in `G`.\n+  The graph `G` is **causally consistent for the contract** `c` on `X` if all of the following hold:\n+\n+  * If `X` is not empty, then `X` contains exactly one **Create** action.\n+    This action precedes all other actions in `X` in `G`\\ 's action order.\n+\n+  * If `X` contains a consuming **Exercise** action `act`, then `act` follows all actions in `X` other than `act` in `G`\\ 's action order.\n+\n+Definition »Causal consistency for a key«\n+  Let `G` be a causality graph and `X` be a set of actions on a key `k` that belong to transactions in `G`.\n+  The graph `G` is **causally consistent for the key** `k` on `X` if all of the following hold:\n+\n+  * All **Create** and consuming **Exercise** actions in `X` are totally ordered in `G`\\ 's action order\n+    and **Create**\\ s and consuming **Exercise**\\ s alternate, starting with **Create**.\n+    Every consecutive **Create**\\ -**Exercise** pair acts on the same contract.\n+\n+  * All **NoSuchKey** actions in `X` are action-ordered with respect to all **Create** and consuming **Exercise** actions in `X`.\n+    No **NoSuchKey** action is action-ordered between a **Create** action and its subsequent consuming **Exercise** action in `X`.\n+\n+.. _def-consistency-causality-graph:\n+    \n+Definition »Consistency for a causality graph«\n+  Let `X` be a subset of the actions in a causality graph `G`.\n+  Then `G` is **consistent** on `X` (or `X`-**consistent**) if `G` is causally consistent for all contracts `c` on the set of actions on `c` in `X` and for all keys `k` on the set of actions on `k` in `X`.\n+  `G` is **consistent** if `G` is consistent on all the actions in `G`.\n+\n+When edges are added to an `X`-consistent causality graph such that it remains acyclic and transitively closed,\n+the resulting graph is again `X`-consistent.\n+So it makes sense to consider minimal consistent causality graphs.\n+\n+.. _minimal-consistent-causality-graph:\n+\n+Definition »Minimal consistent causality graph«\n+  An `X`-consistent causality graph `G` is `X`\\ -**minimal** if no strict subgraph of `G` (same vertices, fewer edges) is an `X`-consistent causality graph.\n+  If `X` is the set of all actions in `G`, then `X` is omitted.\n+\n+For example, the :ref:`above causality graph for the counteroffer workflow <causality-graph-couteroffer-split>` is consistent.\n+This causality graph is minimal, as the following analysis shows:\n+\n++----------------+--------------------------------------------------------------------------------------+\n+| Edge           | Justification                                                                        |\n++================+======================================================================================+\n+| `tx1` -> `tx3` | Alice's `Iou` **Create** action of  must precede the **Fetch** action.               |\n++----------------+--------------------------------------------------------------------------------------+\n+| `tx2` -> `tx4` | The `CounterOffer` **Create** action of  must precede the **Exercise** action.       |\n++----------------+--------------------------------------------------------------------------------------+\n+| `tx3` -> `tx4` | The consuming **Exercise** action on Alice's `Iou` must follow the **Fetch** action. |\n++----------------+--------------------------------------------------------------------------------------+\n+\n+We can focus on parts of the causality graph by restricting the set `X`.\n+If `X` consists of the actions on `Iou` contracts, this causality graph is `X`\\ -consistent.\n+Yet, it is not `X`\\ -minimal since the edge `tx2` -> `tx4` can be removed without violating `X`\\ -consistency: the edge is required only because of the `CounterOffer` actions, which are excluded from `X`.\n+The `X`\\ -minimal consistent causality graph looks as follows, where the actions in `X` are highlighted in red.\n+\n+.. https://app.lucidchart.com/documents/edit/4aa93018-bf32-42e1-98a1-3cc1943cdd36\n+\n+.. _causality-counteroffer-Iou-minimal:\n+   \n+.. figure:: ./images/causality-counteroffer-Iou-minimal.svg\n+   :align: center\n+   :width: 100%\n+\n+   Minimal consistent causality graph for the highlighted actions.\n+\n+Another example of a minimal causality graph is shown below.\n+At the top, the transactions `tx1` to `tx4` create an `Iou` for Alice, exercise two non-consuming choices on it, and transfer the `Iou` to the painter.\n+At the bottom, `tx5` asserts that there is no key for an Account contract for the painter.\n+Then, `tx6` creates an such account with balance 0 and `tx7` deposits the painter's `Iou` from `tx4` into the account, updating the balance to 1.\n+\n+.. https://app.lucidchart.com/documents/edit/b9d84f0f-e459-427c-86b8-c767662af326\n+   \n+.. image:: ./images/causality-consistency-examples.svg\n+   :align: center\n+   :width: 100%\n+\n+Unlike in a linearly ordered ledger, the causality graph relates the transactions of the `Iou` transfer workflow with the `Account` creation workflow only at the end, when the `Iou` is deposited into the account.\n+As will be formalized below, the Bank, Alice, and the painter therefore need not observe the transactions `tx1` to `tx7` in the same order.\n+\n+Moreover, transaction `tx2` and `tx3` are unordered in this causality graph even though they act on the same `Iou` contract.\n+However, as both actions are non-consuming, they do not interfere with each other and could therefore be parallelized, too.\n+Alice and the Bank accordingly may observe them in different orders.\n+\n+The **NoSuchKey** action in `tx5` must be ordered with respect to the two Account **Create** actions in `tx6` and `tx7` and the consuming **Exercise** on the Account contract in `tx7`, by the key consistency conditions.\n+For this set of transactions, consistency allows only one such order: `tx5` comes before `tx6` because `tx7` is atomic: `tx5` cannot be interleaved with `tx7`, e.g., between the consuming **Exercise** of the `Acc Bank P P 0` and the **Create** of the updated account `Acc Bank P P 1`.\n+\n+**NoSuchKey** actions are similar to non-consuming **Exercise**\\ s and **Fetch**\\ es of contracts when it comes to causal ordering: If there were another transaction `tx5'` with a **NoSuchKey** `(Acc, Bank, P)` action, then `tx5` and `tx5'` need not be ordered, just like `tx2` and `tx3` are unordered.\n+\n+.. _causality-consistency-ledger-model:\n+\n+From causality graphs to ledgers\n+================================\n+\n+Since causality graphs are acyclic, their vertices can be sorted topologically and the resulting list is again a causality graph, where every vertex has an outgoing edge to all later vertices.\n+If the original causality graph is `X`\\ -consistent, then so is the topological sort, as topological sorting merely adds edges.\n+For example, the transactions on the :ref:`ledger <split-counteroffer-ledger>` in the :ref:`out-of-band causality example <causality-example-out-of-band>` are a topological sort of the :ref:`corresponding causality graph <causality-graph-couteroffer-split>`.\n+\n+Conversely, we can reduce an `X`\\ -consistent causality graph to only the causal dependencies that `X`\\ -consistency imposes.\n+This gives a minimal `X`\\ -consistent causality graph.\n+\n+.. _def-reduction-causality-graph:\n+\n+Definition »Reduction of a consistent causality graph«\n+  For an `X`\\ -consistent causality graph `G`, there exists a unique minimal `X`\\ -consistent causality graph `reduce`:sub:`X`\\ `(G)` with the same vertices and the edges being a subset of `G`.\n+  `reduce`:sub:`X`\\ `(G)` is called the `X`\\ -**reduction** of `G`.\n+  As before, `X` is omitted if it contains all actions in `G`.\n+\n+The causality graph for the `CounterOffer` workflow is minimal and therefore its own reduction.\n+It is also the reduction of the topological sort, i.e., the :ref:`ledger <split-counteroffer-ledger>` in the :ref:`out-of-band causality example <causality-example-out-of-band>`.\n+\n+.. note::\n+   The reduction `reduce`:sub:`X`\\ `(G)` of an `X`\\ -consistent causality graph `G` can be computed as follows:\n+   \n+   #. Set the vertices of `G'` to the vertices of `G`.\n+   #. The causal consistency conditions for contracts and keys demand that certain pairs of actions\n+      `act`:sub:`1` and `act`:sub:`2` in `X` must be action-ordered.\n+      For each such pair, determine the actions' ordering in `G` and add an edge to `G'` from the earlier action's transaction to the later action's transaction.\n+   #. `reduce`:sub:`X`\\ `(G)` is the transitive closure of `G'`.\n+\n+Topological sort and reduction link causality graphs `G` to the ledgers `L` from the DAML Ledger Model.\n+Topological sort transforms a causality graph `G` into a sequence of transactions `topo(G)`; extending them with the requesters gives a sequence of commits, i.e., a ledger in the DAML Ledger Model.\n+Conversely, a sequence of commits `L` yields a causality graph `G`:sub:`L` by taking the transactions as vertices and adding an edge from `tx1` to `tx2` whenever `tx1`\\ 's commit precedes `tx2`\\ 's commit in the sequence.\n+\n+There are now two consistency definitions:\n+\n+* :ref:`Ledger Consistency <da-model-ledger-consistency>` according to DAML Ledger Model\n+\n+* :ref:`Consistency of causality graph <def-consistency-causality-graph>`\n+\n+Fortunately, the two definitions are equivalent:\n+If `G` is a consistent causality graph, then `topo(G)` is ledger consistent.\n+Conversely, if the sequence of commits `L` is ledger consistent, `G`:sub:`L` is a consistent causality graph, and so is the reduction `reduce(G`:sub:`L`\\ `)`.\n+\n+.. _local-ledger-structure:\n+   \n+Local ledgers\n+*************\n+\n+As explained in the DAML Ledger Model, parties see only a :ref:`projection <da-model-projections>` of the shared ledger for privacy reasons.\n+Like consistency, projection extends to causality graphs as follows.\n+\n+Definition »Causal consistency for a party«\n+  A causality graph `G` is **consistent for a party** `P` (`P`-consistent) if `G` is consistent on all the actions that `P` is an informee of.\n+\n+The notions of `X`\\ -minimality and `X`\\ -reduction extend to parties accordingly.\n+\n+For example, the :ref:`counteroffer causality graph without the edge tx2 -> tx4 <causality-counteroffer-Iou-minimal>` is consistent for the Bank because the Bank is an informee of exactly the highlighted actions.\n+It is also minimal Bank-consistent and the Bank-reduction of the :ref:`original counteroffer causality graph <causality-graph-couteroffer-split>`.\n+  \n+Definition »Projection of a consistent causality graph«\n+  The **projection** `proj`:sub:`P`\\ `(G)` of a consistent causality graph `G` to a party `P` is the `P`\\ -reduction of the following causality graph `G'`:\n+\n+  * The vertices of `G'` are the vertices of `G` projected to `P`, excluding empty projections.\n+\n+  * There is an edge between two vertices `v`:sub:`1` and `v`:sub:`2` in `G'` if there is an edge from the `G`\\ -vertex corresponding to `v`:sub:`1` to the `G`\\ -vertex corresponding to `v`:sub:`2`.\n+\n+For the :ref:`Counteroffer causality graph <causality-graph-couteroffer-split>`, the projections to Alice, the Bank, and the painter are as follows."
  }
]