[
  {
    "id" : "1c7a2e27-915b-4f84-864c-0fc0f59f256b",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "9409f72d-d5f0-4e36-9d09-089c58b1b5c5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth at least hinting at some of the problems for users that aren’t too familiar with this?",
        "createdAt" : "2020-07-13T17:31:32Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "21a3fed2-5383-414c-b9df-5392952b9941",
        "parentId" : "9409f72d-d5f0-4e36-9d09-089c58b1b5c5",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Probably yes, but I don't feel comfortable with stating any issues. Do you have suggestions? Just a generic \"clock skew, synchronization, and if you solve these you always have space time from theory of relativity?\"",
        "createdAt" : "2020-07-16T14:29:30Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1af98be7-0c8b-4252-9b7d-46ab829b861d",
        "parentId" : "9409f72d-d5f0-4e36-9d09-089c58b1b5c5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not sure I have great suggestions so maybe just leave it out for now. We can always add it later.",
        "createdAt" : "2020-07-17T09:28:28Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 10,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting."
  },
  {
    "id" : "74525d2c-dbba-4c52-8e11-9affa3df7198",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "d82f9500-2611-40cb-a93d-97e221dfdb00",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not quite sure how to improve this but at this point it’s somewhat unclear what `transaction_latency` is used for while the skew values have been clearly introduced before.",
        "createdAt" : "2020-07-13T17:38:13Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 74,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned.\n+\n+Ledger time model\n+*****************\n+\n+The *ledger time model* is the set of parameters used in the assignment and validation of ledger time.\n+It consists of the following:\n+\n+#. ``skew_min`` and ``skew_max``, the bounds on the difference between ``lt_TX`` and ``rt_TX``.\n+\n+#. ``transaction_latency``, the average duration from the time a transaction is submitted from a participant to the ledger"
  },
  {
    "id" : "ada128c6-82b3-4419-8f0a-5fa843bef624",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "71201cdd-b0ae-4fb9-b11d-9f6b36d5095a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What is used for the first interpretation which you need to determine the contracts used by the transaction? Do we first calculate the time with the set of contracts used by the transaction being empty?",
        "createdAt" : "2020-07-13T17:41:13Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d99f465-9a41-4819-8a65-2c5fd2c97879",
        "parentId" : "71201cdd-b0ae-4fb9-b11d-9f6b36d5095a",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Yes, that's basically what happens.\r\n\r\nThis section does not describe the actual algorithm, only the properties of the algorithm. The actual algorithm is:\r\n\r\n1. Pick a ledger time using the current local time and the `min_ledger_time_*` parameters\r\n2. Interpret the command. During interpretation, track whether the ledger time was used.\r\n3. Get the maximum ledger time of all contracts used by the resulting transaction. If this fails (because one of the used contracts was archived between step 2 and 3), abort and fail the command submission.\r\n  3.1. If the transaction does not violate causal monotonicity, finish.\r\n  3.2. If the transaction violates causal monotonicity and the transaction depends on time, advance the ledger time and go back to step 2. After 3 iterations, abort and fail the command submission.\r\n  3.3. If the transaction violates causal monotonicity and the transaction does *not* depend on time, modify the ledger time of the transaction and finish.\r\n\r\nDo you think the reader would care about these details?",
        "createdAt" : "2020-07-14T08:57:14Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d23c3eb-322d-4e8c-b37e-53069d572282",
        "parentId" : "71201cdd-b0ae-4fb9-b11d-9f6b36d5095a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think it’s fine to omit those details but it might be helpful to clarify that the description is not intended to reflect the full algorithm but only a high-level overview. Maybe just rephrasing the point here as follows helps\r\n\r\n> Since the set of commands used by given transaction can depend on the chosen time, the above process might need to be repeated until a suitable ledger time is found.",
        "createdAt" : "2020-07-14T09:02:09Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d0cf2f5-cf09-4d08-88f0-4e650a00bd10",
        "parentId" : "71201cdd-b0ae-4fb9-b11d-9f6b36d5095a",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Also: is there a bound on the number of the repetitions?",
        "createdAt" : "2020-07-14T09:15:18Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "50ce7f98-7ee8-4479-9966-684eaf453144",
        "parentId" : "71201cdd-b0ae-4fb9-b11d-9f6b36d5095a",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Yes, the maximum number of iterations is 3. I have added it  to the text.",
        "createdAt" : "2020-07-16T14:27:30Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned.\n+\n+Ledger time model\n+*****************\n+\n+The *ledger time model* is the set of parameters used in the assignment and validation of ledger time.\n+It consists of the following:\n+\n+#. ``skew_min`` and ``skew_max``, the bounds on the difference between ``lt_TX`` and ``rt_TX``.\n+\n+#. ``transaction_latency``, the average duration from the time a transaction is submitted from a participant to the ledger\n+   until the transaction is recorded.\n+\n+\n+The ledger time model is part of the ledger configuration and can be changed by ledger operators through the\n+:ref:`SetTimeModel <com.daml.ledger.api.v1.admin.SetTimeModelRequest>` config management API.\n+\n+Assigning ledger time\n+*********************\n+\n+The ledger time is assigned automatically by the participant.\n+In most cases, DAML applications will not need to worry about ledger time and record time at all.\n+\n+For reference, this section describes the details of how the ledger time is assigned. \n+\n+#. When submitting commands over the ledger API,\n+   users can optionally specify a ``min_ledger_time_rel`` or ``min_ledger_time_abs`` argument.\n+   This defines a lower bound for the ledger time in relative and absolute terms, respectively.\n+\n+#. The ledger time is set to the highest of the following values:\n+\n+   #. ``max(lt_C_1, ..., lt_C_n)``, the maximum ledger time of all contracts used by the given transaction\n+   #. ``t_p``, the local time on the participant\n+   #. ``t_p + min_ledger_time_rel``, if ``min_ledger_time_rel`` is given\n+   #. ``min_ledger_time_abs``, if ``min_ledger_time_abs`` is given\n+\n+#. If the set of contracts used by the transaction depends on time,\n+   then the command interpretation may need to be repeated until a suitable ledger time is found."
  },
  {
    "id" : "7eafa792-084d-428f-947e-53fe108969af",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "f22db784-9adb-47a8-add3-256a883b7bf9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "My understanding is that this only helps you very little. You can use this to ensure that the transaction arrives roughly at rt_TX at the ledger but If the ledger also interprets the transaction (to validate it) you’ve lost. You need to increase the skew as well to handle commands that take a long time to interpret.",
        "createdAt" : "2020-07-13T17:46:45Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0b677bbc-ddac-4d2d-a5ed-6b551068ebde",
        "parentId" : "f22db784-9adb-47a8-add3-256a883b7bf9",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "That's a very good point; for such a ledger, submitting the transaction with roughly `lt = 2 * interpretation_time` should work, but the Ledger API server might get in your way, as its guess of the `transaction_latency` will be far off. I propose we make `transaction_latency` also settable by the user; its purpose is only informative anyways, and if the user has better information, we should let them provide it. Yes, it requires the user to understand the guts of the architecture, but unfortunately I think that they have to, if they want to understand when their transactions will get accepted by the ledger.\r\n\r\nA related question is on what kind of stability guarantees do we want to give here. Are we committing to the processing pipeline described here? I don't think we should, especially since if the ledger implementation changes, I believe the application will unfortunately have to adapt slightly. This is worth a sentence or two too IMO.",
        "createdAt" : "2020-07-14T09:41:14Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1a9ba9a1-35b9-4d54-b1d3-c0b203c2c894",
        "parentId" : "f22db784-9adb-47a8-add3-256a883b7bf9",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Good point, `min_ledger_time_*` can only be used to work around a very long interpretation time, but it won't save you if the validation time is also too long. \r\n\r\nThere are currently no plans to change the ledger time model. In the future, we might improve it to better handle such large transactions, e.g., giving the user more control, or by better estimating the actual time it will take for the transaction to be committed (from data like the current network latency, current ledger load, or transaction size).\r\n\r\n> Are we committing to the processing pipeline described here\r\n\r\nNo, both the ledger time model and the algorithm for assigning may be changed in the future. I have added a sentence.\r\n\r\nAs a side note, `min_ledger_time_*` gives you the ability to delay submissions, which is useful for internal tests dealing with contention.",
        "createdAt" : "2020-07-16T14:22:24Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7518e5eb-ce28-4504-87c6-11cc32235099",
        "parentId" : "f22db784-9adb-47a8-add3-256a883b7bf9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We did have users run into this issue I believe so I would at least mention that this might not be sufficient and you need to bump the skew as well.",
        "createdAt" : "2020-07-17T09:31:34Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 116,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned.\n+\n+Ledger time model\n+*****************\n+\n+The *ledger time model* is the set of parameters used in the assignment and validation of ledger time.\n+It consists of the following:\n+\n+#. ``skew_min`` and ``skew_max``, the bounds on the difference between ``lt_TX`` and ``rt_TX``.\n+\n+#. ``transaction_latency``, the average duration from the time a transaction is submitted from a participant to the ledger\n+   until the transaction is recorded.\n+\n+\n+The ledger time model is part of the ledger configuration and can be changed by ledger operators through the\n+:ref:`SetTimeModel <com.daml.ledger.api.v1.admin.SetTimeModelRequest>` config management API.\n+\n+Assigning ledger time\n+*********************\n+\n+The ledger time is assigned automatically by the participant.\n+In most cases, DAML applications will not need to worry about ledger time and record time at all.\n+\n+For reference, this section describes the details of how the ledger time is assigned. \n+\n+#. When submitting commands over the ledger API,\n+   users can optionally specify a ``min_ledger_time_rel`` or ``min_ledger_time_abs`` argument.\n+   This defines a lower bound for the ledger time in relative and absolute terms, respectively.\n+\n+#. The ledger time is set to the highest of the following values:\n+\n+   #. ``max(lt_C_1, ..., lt_C_n)``, the maximum ledger time of all contracts used by the given transaction\n+   #. ``t_p``, the local time on the participant\n+   #. ``t_p + min_ledger_time_rel``, if ``min_ledger_time_rel`` is given\n+   #. ``min_ledger_time_abs``, if ``min_ledger_time_abs`` is given\n+\n+#. If the set of contracts used by the transaction depends on time,\n+   then the command interpretation may need to be repeated until a suitable ledger time is found.\n+\n+#. At this point, the ledger time may lie in the future (e.g., if a large value for ``min_ledger_time_rel`` was given).\n+   The participant waits until ``lt_TX - transaction_latency`` before it submits the transaction to the ledger - \n+   the intention is that the transaction is record at ``lt_TX == rt_TX``.\n+\n+Use the parameters ``min_ledger_time_rel`` and ``min_ledger_time_abs`` if you expect that"
  },
  {
    "id" : "e89eab7b-b63d-4127-a1ba-19155e6161d5",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "9a1e8f71-f4d1-4cbe-a8a7-228c6b3e7439",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Minor: I'd turn these two around and put the link to `getTime` first (microsecond resolution is less important) IMO.",
        "createdAt" : "2020-07-14T08:49:41Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8a601d27-8975-457f-a264-8ef739a9869b",
        "parentId" : "9a1e8f71-f4d1-4cbe-a8a7-228c6b3e7439",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-16T14:22:32Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,"
  },
  {
    "id" : "57467423-4fb0-47b8-a32f-f03f78c06a0e",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "51a2146f-3ec8-4168-ab38-c7cdf8f07313",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "```suggestion\r\nThe ledger time is assigned by the submitting participant as part of the DAML command interpretation.\r\n```",
        "createdAt" : "2020-07-14T08:50:31Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e69564a3-87a2-4b60-a920-5738471deb0b",
        "parentId" : "51a2146f-3ec8-4168-ab38-c7cdf8f07313",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-16T14:22:38Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation."
  },
  {
    "id" : "562d4e60-a073-4a14-a33a-25a94b413108",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "a3b1ef79-f486-4b65-850f-d467606bbcc1",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Since `rt_TX` is not defined here yet, I suggest moving the \"skew\" condition to the next section. You could use a rough description of this condition it as a segue to the next section, something along the lines of \"this time is only a fuzzy approximation of some notion of 'real time', as we will see next\".\r\n\r\nAlso, should we call it \"bounded skew\"?",
        "createdAt" : "2020-07-14T08:52:07Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "264ed108-21f0-4e8f-adc0-93012c7e2e1e",
        "parentId" : "a3b1ef79-f486-4b65-850f-d467606bbcc1",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Done, I have moved both constraints to a new section.",
        "createdAt" : "2020-07-16T14:26:47Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,"
  },
  {
    "id" : "a47db2a6-2035-461e-9c01-3d575d02e02e",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "064febfd-8d8a-4941-8ee6-d7099d5611ef",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "I think we should say something along the lines of it being some intuitive representation of \"real time\". Then you could also explain that in a distributed system there isn't a single notion of real time, throw in space-time if you feel like it - I'm sure @daravep would approve muchly ;)\r\n\r\nI also think we should specifically state that record time needn't increase monotonically (and the user thus shouldn't rely on that), as it might be non-obvious.",
        "createdAt" : "2020-07-14T09:05:58Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "413c4af8-0ef6-4bfb-a22d-77843b53c00b",
        "parentId" : "064febfd-8d8a-4941-8ee6-d7099d5611ef",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-16T14:22:53Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned."
  },
  {
    "id" : "5bf9b230-0bd6-4c72-b543-1d98bb046e0f",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "3184b0b7-2828-4a36-a024-72522a31e564",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "it's unclear to me how this will translate to multi-domain Canton (aka multi-canton Canton). Nothing to be solved in this PR, though.",
        "createdAt" : "2020-07-14T09:08:18Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 66,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned.\n+\n+Ledger time model"
  },
  {
    "id" : "a1e25b00-1698-402d-81c8-eb78282cabc5",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "39ae395e-22bf-4c4d-b6f6-0f976e404a2a",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "I'd state some example cases when people have to worry about (otherwise, it's unclear when/why they should read the rest of this section).",
        "createdAt" : "2020-07-14T09:10:27Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 89,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned.\n+\n+Ledger time model\n+*****************\n+\n+The *ledger time model* is the set of parameters used in the assignment and validation of ledger time.\n+It consists of the following:\n+\n+#. ``skew_min`` and ``skew_max``, the bounds on the difference between ``lt_TX`` and ``rt_TX``.\n+\n+#. ``transaction_latency``, the average duration from the time a transaction is submitted from a participant to the ledger\n+   until the transaction is recorded.\n+\n+\n+The ledger time model is part of the ledger configuration and can be changed by ledger operators through the\n+:ref:`SetTimeModel <com.daml.ledger.api.v1.admin.SetTimeModelRequest>` config management API.\n+\n+Assigning ledger time\n+*********************\n+\n+The ledger time is assigned automatically by the participant.\n+In most cases, DAML applications will not need to worry about ledger time and record time at all."
  },
  {
    "id" : "fb788ff4-40b6-41ef-b953-9e42db7a7d2e",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "183400c2-6a57-4892-a670-8417e13e8f03",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Relative to what?",
        "createdAt" : "2020-07-14T09:11:07Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 96,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned.\n+\n+Ledger time model\n+*****************\n+\n+The *ledger time model* is the set of parameters used in the assignment and validation of ledger time.\n+It consists of the following:\n+\n+#. ``skew_min`` and ``skew_max``, the bounds on the difference between ``lt_TX`` and ``rt_TX``.\n+\n+#. ``transaction_latency``, the average duration from the time a transaction is submitted from a participant to the ledger\n+   until the transaction is recorded.\n+\n+\n+The ledger time model is part of the ledger configuration and can be changed by ledger operators through the\n+:ref:`SetTimeModel <com.daml.ledger.api.v1.admin.SetTimeModelRequest>` config management API.\n+\n+Assigning ledger time\n+*********************\n+\n+The ledger time is assigned automatically by the participant.\n+In most cases, DAML applications will not need to worry about ledger time and record time at all.\n+\n+For reference, this section describes the details of how the ledger time is assigned. \n+\n+#. When submitting commands over the ledger API,\n+   users can optionally specify a ``min_ledger_time_rel`` or ``min_ledger_time_abs`` argument.\n+   This defines a lower bound for the ledger time in relative and absolute terms, respectively."
  },
  {
    "id" : "d855b6ff-f83e-4efb-ba46-7e8950c08739",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "0b98da24-6c7f-4469-9994-4ee015d18ed6",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Can they specify both?",
        "createdAt" : "2020-07-14T09:12:09Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 95,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:\n+the *ledger time* ``lt_TX`` and the *record time* ``rt_TX``.\n+\n+Ledger time\n+***********\n+\n+The *ledger time* ``lt_TX`` is a property of a transaction.\n+It is a timestamp with microsecond resolution,\n+and defines the value of all :ref:`getTime <daml-ref-gettime>` calls in the given transaction.\n+The ledger time is assigned by the participant as part of the DAML command interpretation.\n+\n+The ledger time of valid transaction ``TX`` must fullfil the following rules:\n+\n+#. **Causal monotonicity**: for any action (create, exercise, fetch, lookup) in ``TX``\n+   on a contract ``C``, ``lt_TX >= lt_C``,\n+   where ``lt_C`` is the ledger time of the transaction that created ``C``.\n+\n+#. **Skew**: ``rt_TX - skew_min <= lt_TX <= rt_TX + skew_max``,\n+   where ``skew_min`` and ``skew_max`` are parameters defined by the ledger.\n+\n+Apart from that, no other guarantees are given on the ledger time.\n+Time has therefore to be considered slightly fuzzy in DAML, with the fuzziness depending on the skew parameters.\n+DAML applications should not interpret the value returned by :ref:`getTime <daml-ref-gettime>` as a precise timestamp.\n+\n+\n+Record time\n+***********\n+\n+The *record time* ``rt_TX`` is another property of a transaction.\n+It is timestamp with microsecond resolution,\n+and is assigned by the ledger when the transaction is recorded on the ledger.\n+\n+The DAML ledger model does not prescribe how the record time is assigned.\n+\n+Ledger time model\n+*****************\n+\n+The *ledger time model* is the set of parameters used in the assignment and validation of ledger time.\n+It consists of the following:\n+\n+#. ``skew_min`` and ``skew_max``, the bounds on the difference between ``lt_TX`` and ``rt_TX``.\n+\n+#. ``transaction_latency``, the average duration from the time a transaction is submitted from a participant to the ledger\n+   until the transaction is recorded.\n+\n+\n+The ledger time model is part of the ledger configuration and can be changed by ledger operators through the\n+:ref:`SetTimeModel <com.daml.ledger.api.v1.admin.SetTimeModelRequest>` config management API.\n+\n+Assigning ledger time\n+*********************\n+\n+The ledger time is assigned automatically by the participant.\n+In most cases, DAML applications will not need to worry about ledger time and record time at all.\n+\n+For reference, this section describes the details of how the ledger time is assigned. \n+\n+#. When submitting commands over the ledger API,\n+   users can optionally specify a ``min_ledger_time_rel`` or ``min_ledger_time_abs`` argument."
  },
  {
    "id" : "bc57b78a-123c-4f69-bcdd-f6f2d80e1d6b",
    "prId" : 6705,
    "comments" : [
      {
        "id" : "52524580-6ea7-41a1-ba8c-7facc314a761",
        "parentId" : null,
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Some thinking out loud: I'm wondering what the best way to link this to the ledger model is. The model has a notion of a commit, and the `lt/rt` would in reality be assigned to commits. I don't think it's urgent to change/solve it for this PR, as I think that just saying \"transaction\" will be sufficiently understandable.\r\n\r\nChanging lt/rt to refer to commits also introduces problems, though, since the ledger model also has a notion of projections, which are just transactions, but we still want to assign these timestamps to them. I see a couple of ways out:\r\n1. we assign the timestamps to both a commit and to every action in the commit, with all actions within a single commit having the same timestamp\r\n2. we change the notion of a projection to be a commit, though this one is tricky, as we have to figure out what to do with requesters, such that we don't mess the authorization definitions up (likely: a commit would then have to allow for a different requester for each top-level action in the commit).",
        "createdAt" : "2020-07-14T09:29:17Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "adfef57b-726f-4d42-a095-85d24ba2cfa1",
        "parentId" : "52524580-6ea7-41a1-ba8c-7facc314a761",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "I'd pick option 1:\r\n\r\nDefine that the ledger time is a property of the commit, then define that everything that \"belongs\" to a commit (all actions, all contracts created by that commit) have a ledger time equal to the ledger time of the commit.\r\n\r\nThe current text already has the sentence \"where lt_C is the ledger time of the transaction that created C\".",
        "createdAt" : "2020-07-16T14:25:42Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "20968655-e009-402a-96c5-11f64f789ee9",
        "parentId" : "52524580-6ea7-41a1-ba8c-7facc314a761",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "@oggy- is this something you would like to resolve now? ",
        "createdAt" : "2020-07-16T20:31:04Z",
        "updatedAt" : "2020-07-17T14:41:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92a1f771c9356f590c2119e8a66c419baaba461b",
    "line" : 13,
    "diffHunk" : "@@ -0,0 +1,90 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _time:\n+\n+Time\n+####\n+\n+The DAML language contains a function :ref:`getTime <daml-ref-gettime>` which returns the “current time”.\n+However, the notion of time comes with a lot of problems in a distributed setting.\n+\n+This document describes the detailed semantics of time on DAML ledgers,\n+centered around the two timestamps assigned to each transaction:"
  }
]