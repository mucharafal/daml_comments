[
  {
    "id" : "14ab0dc1-b006-41d3-a96b-842e59eab006",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "7e689e68-ac31-49c4-b1a3-11dce6d9f842",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Would be good to write what tests are covered in a list (just naming them), so the user knows what he can see in there. This primes him for what s/he's getting into (lower cognitive load).",
        "createdAt" : "2020-03-23T09:08:07Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@\nLet's see how to use these tools to write some tests for our social network app.\nYou can see the full suite in the file ``index.test.tsx``.\nThe actual tests are the clauses beginning with ``test``.\nYou can scroll down to the important ones with the following descriptions (the first argument to each ``test``):"
  },
  {
    "id" : "39ef1c11-c214-4710-b7b6-3ac2268d9f17",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "7c2e6806-7b53-4169-997a-8d765ccbf7dd",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Are the two tools \"blended\" in use, i.e., they are used in a single test? So I write the expected behavior in Jest and I perform the actions with Puppeteer, right?",
        "createdAt" : "2020-03-23T09:10:04Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "67b331bc-72a4-402e-94b5-f390583d3abc",
        "parentId" : "7c2e6806-7b53-4169-997a-8d765ccbf7dd",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "That's right. Well I suppose Jest is the \"framework\" encompassing your tests and expectations, and Puppeteer is a library that you use during those tests to perform the necessary actions. Do you think this should be made clearer, or can the reader wait until we show an example?",
        "createdAt" : "2020-03-23T14:33:56Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fd12f966-c92c-43e5-9e48-4945b7856ae3",
        "parentId" : "7c2e6806-7b53-4169-997a-8d765ccbf7dd",
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "I would spell it out really, as I wasn't 100% sure if this is how the two work together (lookup Steve Krug's \"Don't make me think!\", some excerpts can be found [here](https://docs.google.com/document/d/18dZb4jR-nMpl5Ah5SELkcNBCkmiJABnQ-CGWi6J5X3A/edit?ts=5e4a6779#heading=h.8tudxn1xifo1) ). Had to read back and forth. ",
        "createdAt" : "2020-03-23T14:39:27Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@====================\n\nLet's see how to use these tools to write some tests for our social network app.\nYou can see the full suite in the file ``index.test.tsx``.\nThe actual tests are the clauses beginning with ``test``."
  },
  {
    "id" : "0382fd67-e2fe-4af8-8e92-ee7bb554f1d7",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "89886abb-28ba-498d-9e8b-217af8650c53",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Would be great to have a new subsection here \"Initialising tests\" or something like that. In general adding more structure.",
        "createdAt" : "2020-03-23T09:11:33Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@Specifically, we have child processes for the ``daml start`` and ``yarn start`` commands, which run for the duration of our tests.\nWe also have a single Puppeteer browser that we share among tests, opening new browser pages for each one.\n\nThe ``beforeAll()`` section is a function run once before any of the tests run.\nWe use it to spawn the ``daml start`` and ``yarn start`` processes and launch the browser."
  },
  {
    "id" : "5ac42b31-ed63-4aa9-ba75-1d2238b36336",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "68113a08-c56f-46ec-ae9c-975875901f7a",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "New subsection \"Writing a simple login test\", \"Staging a simple login test\", or something like that.",
        "createdAt" : "2020-03-23T09:15:02Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@On the other hand the ``afterAll()`` section is used to shut down these processes and close the browser.\nThis step is important to prevent child processes persisting in the background after our program has finished.\n\n\nExample: Logging in and out"
  },
  {
    "id" : "8c6dece6-8d86-4196-b2dd-bb94082935ce",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "bd1c33e3-2996-4e80-83e9-5a84364752f8",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "These are the basics for any test, right?",
        "createdAt" : "2020-03-23T10:00:40Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d0a66017-c161-4520-a7ce-4701d036b49d",
        "parentId" : "bd1c33e3-2996-4e80-83e9-5a84364752f8",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "That's right, I'll try to mention that.",
        "createdAt" : "2020-03-23T15:01:19Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@    - The ``test`` syntax is provided by Jest to indicate a new test running the function given as an argument (along with a description and time limit).\n    - ``getParty()`` gives us a new party name. Right now it is just a string unique to this set of tests, but in the future we will use the Party Management Service to allocate parties.\n    - ``newUiPage()`` is a helper function that uses the Puppeteer browser to open a new page (we use one page per party in these tests), navigate to the app URL and return a ``Page`` object.\n    - Next we ``login()`` using the new page and party name. This should take the user to the main screen. We'll show how the ``login()`` function does this shortly.\n    - We use the ``@daml/ledger`` library to check the ledger state. In this case, we want to ensure there is a single ``User`` contract created for the new party. Hence we create a new connection to the ``Ledger``, ``query()`` it and state what we ``expect`` of the result. When we run the tests, Jest will check these expectations and report any failures for us to fix."
  },
  {
    "id" : "0bf9dfde-7fc2-4832-b7ec-7849fe40554d",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "e0d6baca-ac64-4d84-998f-855bd2d1af29",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "This one as well is part of the basics, right? Would be great to provide an overview of what commands are needed for every test (at least in the GSG).",
        "createdAt" : "2020-03-23T10:01:24Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@    - We use the ``@daml/ledger`` library to check the ledger state. In this case, we want to ensure there is a single ``User`` contract created for the new party. Hence we create a new connection to the ``Ledger``, ``query()`` it and state what we ``expect`` of the result. When we run the tests, Jest will check these expectations and report any failures for us to fix.\n    - The test also simulates the new user logging out and then logging back in. We again check the state of the ledger and see that it's the same as before.\n    - Finally we must ``close()`` the browser page, which was opened in ``newUiPage()``, to avoid runaway Puppeteer processes after the tests finish.\n\nYou will likely use ``test``, ``getParty()``, ``newUiPage()`` and ``Browser.close()`` for all your tests."
  },
  {
    "id" : "4dcefe71-912c-4d12-aaa4-6119d38d27d4",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "81054c26-9843-4262-a63f-dfb60bd98da8",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Subsection, e.g., \"Writing CSS selectors\"",
        "createdAt" : "2020-03-23T10:13:50Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +107,111 @@=====================\n\nWhen writing CSS selectors for your tests, you will likely need to check the structure of the rendered HTML in your app by running it manually and inspecting elements using your browser's developer tools.\nFor example, the image below is from inspecting the username field using the developer tools in Google Chrome.\n"
  },
  {
    "id" : "8cfeb103-f14c-4759-8995-58803c503cea",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "8913aabf-4598-49d6-9cce-e8f78d1bd003",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Add an image showing what the nested div looks like. Easier to understand.",
        "createdAt" : "2020-03-23T10:15:15Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f4912204-d589-468c-918b-4bb27367a9fa",
        "parentId" : "8913aabf-4598-49d6-9cce-e8f78d1bd003",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "It is shown in the screenshot, though a little hard to read. Added a sentence pointing out it's there.",
        "createdAt" : "2020-03-23T15:38:44Z",
        "updatedAt" : "2020-03-23T19:34:47Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +114,118 @@There is a subtlety to explain here due to the `Semantic UI <https://semantic-ui.com/>`_ framework we use for our app.\nSemantic UI provides a convenient set of UI elements which get translated to HTML.\nIn the example of the username field above, the original Semantic UI ``Input`` is translated to nested ``div`` nodes with the ``input`` inside.\nYou can see this highlighted on the right side of the screenshot.\nWhile harmless in this case, in general you may need to inspect the HTML translation of UI elements and write your CSS selectors accordingly."
  },
  {
    "id" : "c5f792aa-2d0e-4c18-8364-4b5061806383",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "d9fb5969-dbcf-435c-ae41-a9a7d8d40462",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we please have a ticket in the GSG milestone for this.",
        "createdAt" : "2020-03-25T08:24:31Z",
        "updatedAt" : "2020-03-25T09:14:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a5f2ec83-52f8-4d0e-b13f-b9a81b54322c",
        "parentId" : "d9fb5969-dbcf-435c-ae41-a9a7d8d40462",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "It's not actionable right now as I understand, but it's here https://github.com/digital-asset/daml/issues/5185 so we don't forget.",
        "createdAt" : "2020-03-25T14:14:10Z",
        "updatedAt" : "2020-03-25T14:14:11Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@\n    - The ``test`` syntax is provided by Jest to indicate a new test running the function given as an argument (along with a description and time limit).\n    - ``getParty()`` gives us a new party name. Right now it is just a string unique to this set of tests, but in the future we will use the Party Management Service to allocate parties.\n    - ``newUiPage()`` is a helper function that uses the Puppeteer browser to open a new page (we use one page per party in these tests), navigate to the app URL and return a ``Page`` object.\n    - Next we ``login()`` using the new page and party name. This should take the user to the main screen. We'll show how the ``login()`` function does this shortly."
  },
  {
    "id" : "1155ba6b-9b05-4802-8ebb-6fa8245d47ee",
    "prId" : 5119,
    "comments" : [
      {
        "id" : "ab031238-665b-4548-8507-ac23a88490f4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not convinced this section adds more value than confusion. I think the issues we're facing here are pretty universal for any React UI framework. Since we're not trying to teach web development but rather want to focus on the issues related to DAML application, I'd prefer to entirely remove this section, particularly since there's no actual issue but only an anticipated potential one.",
        "createdAt" : "2020-03-25T09:14:45Z",
        "updatedAt" : "2020-03-25T09:14:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f2148495-d033-43b6-aab4-b569ff58dd0f",
        "parentId" : "ab031238-665b-4548-8507-ac23a88490f4",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I'm not sure. Agree we're not trying to teach web dev in its entirety, but we're also not assuming the reader is familiar with these concepts. I don't think it's fair to expect the reader to automatically understand the fact that we are using Semantic UI (we actually don't mention that anywhere) which translates into HTML, and we are selecting the resulting HTML elements. This was an actual issue for me when I was writing selectors, until I realised this point. I take your point that it's in the weeds, but it might still be helpful.",
        "createdAt" : "2020-03-25T14:23:39Z",
        "updatedAt" : "2020-03-25T14:23:49Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d7064026-db94-46d5-96e5-5183a5999233",
        "parentId" : "ab031238-665b-4548-8507-ac23a88490f4",
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Don't think this section hurts. It's short and points out a specific thing for Semantic UI when testing DAML applications built with create-daml-app (that uses the Semantic UI).",
        "createdAt" : "2020-03-26T07:35:56Z",
        "updatedAt" : "2020-03-26T07:35:57Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00d9624f640640d63b8c5a5d434999c8368347dd",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@\n\nWriting CSS Selectors\n=====================\n"
  }
]