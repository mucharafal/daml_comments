[
  {
    "id" : "e4a21e02-ef62-41a1-af3b-ee544389a574",
    "prId" : 7604,
    "comments" : [
      {
        "id" : "711a3922-50b5-4615-8931-aa265e71014d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "While we're at it, shouldn't it be like this?\r\n```suggestion\r\nThe result is an up-to-date JavaScript interface to our DAML model, in particular to the new ``Message`` template and ``SendMessage`` choice.\r\n```",
        "createdAt" : "2020-10-07T18:07:04Z",
        "updatedAt" : "2020-10-07T18:24:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ab6648e-aa02-4ee3-bef9-8b219e3bafd3",
        "parentId" : "711a3922-50b5-4615-8931-aa265e71014d",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Not in this fix.",
        "createdAt" : "2020-10-07T18:23:01Z",
        "updatedAt" : "2020-10-07T18:24:13Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "39b837cfa746b723910f8df0fa2a7ac0d5df4486",
    "line" : 2,
    "diffHunk" : "@@ -78,11 +78,6 @@ Open a new terminal and run the following commands::\n \n The result is an up-to-date TypeScript interface to our DAML model, in particular to the new ``Message`` template and ``SendMessage`` choice."
  },
  {
    "id" : "eafc619e-6d48-4a66-b4eb-127c2650d34d",
    "prId" : 7604,
    "comments" : [
      {
        "id" : "500f54a3-a3cb-441e-9d58-4d061bb43f65",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we mention that `npm start` will pick up the changes automatically or would that only cause confusion for users who didn't even think about this problem in the first place?",
        "createdAt" : "2020-10-07T18:07:58Z",
        "updatedAt" : "2020-10-07T18:24:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c55c9741-db34-4c5a-952e-95f811d3ff55",
        "parentId" : "500f54a3-a3cb-441e-9d58-4d061bb43f65",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I'd say deciding that goes a bit beyond the quickfix on a patched release, unless someone else has a strong opinion either way.",
        "createdAt" : "2020-10-07T18:11:29Z",
        "updatedAt" : "2020-10-07T18:24:13Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac694efe-f25c-4eb9-94d5-81525614364c",
        "parentId" : "500f54a3-a3cb-441e-9d58-4d061bb43f65",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "(And can express it right now.)",
        "createdAt" : "2020-10-07T18:11:42Z",
        "updatedAt" : "2020-10-07T18:24:13Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cbfd6312-88fa-4516-995d-cb0d7bbf1467",
        "parentId" : "500f54a3-a3cb-441e-9d58-4d061bb43f65",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's skip it then. I guess it wouldn't be too helpful anyway.",
        "createdAt" : "2020-10-07T18:15:28Z",
        "updatedAt" : "2020-10-07T18:24:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "39b837cfa746b723910f8df0fa2a7ac0d5df4486",
    "line" : 8,
    "diffHunk" : "@@ -78,11 +78,6 @@ Open a new terminal and run the following commands::\n \n The result is an up-to-date TypeScript interface to our DAML model, in particular to the new ``Message`` template and ``SendMessage`` choice.\n \n-To make sure that Yarn picks up the newly generated JavaScript code,\n-we have to run the following command in the ``ui`` directory::\n-\n-  npm install --frozen-lockfile\n-"
  },
  {
    "id" : "92d002df-de24-44fc-aa27-6873b6a82f8d",
    "prId" : 7562,
    "comments" : [
      {
        "id" : "747ae5b3-e546-4528-8f54-490a63940f5e",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Hmm, we might want to suggest pressing Enter/Return on Windows. Not sure about the actual wording though.\r\n\r\n```suggestion\r\nNavigate to the terminal window where the ``daml start`` process is running and press 'r'. On Windows, you must also press the return key. This will\r\n```",
        "createdAt" : "2020-10-08T14:11:51Z",
        "updatedAt" : "2020-10-08T14:49:02Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4213067e41cc7905f8e45c9041367cb28233c69a",
    "line" : 5,
    "diffHunk" : "@@ -68,16 +68,11 @@ This completes the workflow for messaging in our app.\n Running the New Feature\n =======================\n \n-We need to terminate the previous ``daml start`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running ``daml start`` again we will\n+Navigate to the terminal window where the ``daml start`` process is running and press 'r'. This will"
  },
  {
    "id" : "dcd5b9df-efad-4806-ba9b-31d42dd76b04",
    "prId" : 7327,
    "comments" : [
      {
        "id" : "4bfb68df-2ec4-4cb2-94af-051315acfe6f",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Third badge is missing but I'm pretty sure you're working on it 😄 ",
        "createdAt" : "2020-09-07T06:04:11Z",
        "updatedAt" : "2020-09-08T15:35:13Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1ffb86e1-7d32-4914-9b1c-a1d45ee8d1e3",
        "parentId" : "4bfb68df-2ec4-4cb2-94af-051315acfe6f",
        "author" : {
          "login" : "anthonylusardi-da",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/59614480?u=a1e38232a15470bcbf95f10bf7293011710be3e8&v=4"
        },
        "body" : "You can only get the third badge with daml.com/learn so I linked to the task where you can get it.",
        "createdAt" : "2020-09-08T14:26:11Z",
        "updatedAt" : "2020-09-08T15:35:13Z",
        "lastEditedBy" : {
          "login" : "anthonylusardi-da",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/59614480?u=a1e38232a15470bcbf95f10bf7293011710be3e8&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2c2744dd-c7dc-4732-9de8-587767385e27",
        "parentId" : "4bfb68df-2ec4-4cb2-94af-051315acfe6f",
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Ah, I see. Makes sense. ",
        "createdAt" : "2020-09-08T14:37:36Z",
        "updatedAt" : "2020-09-08T15:35:13Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3ba0508da273030a0c860f4c21c10a171798c34e",
    "line" : 5,
    "diffHunk" : "@@ -224,11 +224,12 @@ You'll notice that new messages appear in the UI as soon as they are sent (due t\n       :scale: 50 %\n       :alt: In the create-daml-app as soon as you send the message it will appear in the \"Messsaging\" panel\n \n+.. tip:: You completed the second part of the Getting Started Guide! `Join our forum <https://discuss.daml.com>`_ and share a screenshot of your accomplishment to `get your second of 3 badges <https://discuss.daml.com/badges/126/hey-look-what-i-can-do>`_! Get the third badge by `deploying to project:DABL <https://daml.com/learn/getting-started/deploy-to-dabl/>`_\n+"
  },
  {
    "id" : "38267fe1-d5cf-40f2-939f-eadfef805416",
    "prId" : 6281,
    "comments" : [
      {
        "id" : "838243a2-1815-4d7a-aa6a-9e67d8775281",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nFor each contract in the stream, we destructure the *payload* (the data as opposed to metadata like the contract ID) into the ``{sender, receiver, content}`` object pattern.\r\n```",
        "createdAt" : "2020-06-10T10:21:48Z",
        "updatedAt" : "2020-06-10T13:25:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5478b3ca1381efbe6f81e79743d506f0d899964d",
    "line" : null,
    "diffHunk" : "@@ -115,11 +115,10 @@ You should copy this into a new ``MessageList.tsx`` file in ``ui/src/components`\n   :start-after: // MESSAGELIST_BEGIN\n   :end-before: // MESSAGELIST_END\n \n-First we get the ``username`` of the current user with the ``useParty`` hook.\n-Then ``messagesResult`` gets the stream of all ``Message`` contracts where the ``receiver`` is our ``username``.\n+In the component body, ``messagesResult`` gets the stream of all ``Message`` contracts visible to the current user.\n The streaming aspect means that we don't need to reload the page when new messages come in.\n-We extract the *payload* of every ``Message`` contract (the data as opposed to metadata like the contract ID) in ``messages``.\n-The rest of the component simply constructs a React ``List`` element with an item for each message.\n+For each contract in the stream, we extract the *payload* (the data as opposed to metadata like the contract ID) to the ``{sender, receiver, content}`` record."
  },
  {
    "id" : "0ce5078b-204f-4499-833f-4c470f749f48",
    "prId" : 5489,
    "comments" : [
      {
        "id" : "93ea2591-0215-4627-b17c-f0798323ceba",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "For the sake of consistency with the rest of the text:\r\n```suggestion\r\nTo make sure that yarn picks up the newly generated JavaScript code,\r\n```",
        "createdAt" : "2020-04-08T10:05:03Z",
        "updatedAt" : "2020-04-08T10:05:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c29c1a23-e558-4b4a-91bc-ef197b14c48c",
        "parentId" : "93ea2591-0215-4627-b17c-f0798323ceba",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yarn capitalizes itself on its own web page so I think we should be consistent with that.",
        "createdAt" : "2020-04-08T10:06:14Z",
        "updatedAt" : "2020-04-08T10:06:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "425d018e87ad1213c4b16231d15465b3e5d27eb3",
    "line" : 4,
    "diffHunk" : "@@ -78,6 +78,11 @@ Open a new terminal and run the following commands::\n \n The result is an up-to-date TypeScript interface to our DAML model, in particular to the new ``Message`` template and ``SendMessage`` choice.\n \n+To make sure that Yarn picks up the newly generated JavaScript code,"
  },
  {
    "id" : "f0e4ab17-b77f-4d1f-b88b-a8b3645c2628",
    "prId" : 5102,
    "comments" : [
      {
        "id" : "746cd4d0-786b-4795-86de-86cf48c5ef0d",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I don't think we need to write the `--start-navigator=no` argument when just referring to the process that's running or that you want to kill. I think just referring to the `daml start` process is enough, though of course you need to give the full command when asking the user to run it. Maybe this point will be moot if we change the defaults.",
        "createdAt" : "2020-03-20T15:12:33Z",
        "updatedAt" : "2020-03-20T15:14:49Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "87c5a45f116e3bd38c7a6e325fffbbf6972d081c",
    "line" : 14,
    "diffHunk" : "@@ -180,13 +180,13 @@ Let's give the new functionality a spin.\n Running the New Feature\n =======================\n \n-We need to terminate the previous ``./daml-start.sh`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running ``./daml-start.sh`` again we will \n+We need to terminate the previous ``daml start --start-navigator=no`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running ``daml start --start-navigator=no`` again we will"
  },
  {
    "id" : "ca9cda27-e4aa-497e-9caa-1161bab9353a",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "2a19c4b7-5131-490d-ad1b-fcb1bae0c6be",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It might be good to configure your editor to remove trailing spaces. Are you using VSCode?\r\n```suggestion\r\nLet's dive into implementing a new feature for our social network app.\r\n```",
        "createdAt" : "2020-03-18T16:06:44Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : 5,
    "diffHunk" : "@@ -4,17 +4,15 @@\n Your First Feature\n ******************\n \n-Let's dive into implementing a new feature for our social network app.\n+Let's dive into implementing a new feature for our social network app. "
  },
  {
    "id" : "e7945d48-ce6c-447a-aafb-97de3903722c",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "e3ce4bbb-d0a8-4af0-a1f8-c49ecd0174ff",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nFor the authorization part, we take the following approach: a user Bob can message another user Alice only when Alice follows Bob.\r\n```",
        "createdAt" : "2020-03-18T16:07:37Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : 31,
    "diffHunk" : "@@ -34,14 +32,12 @@ As mentioned in the :doc:`architecture <app-architecture>` section, the DAML cod\n The workflow aspect refers to the interactions between parties that are permitted by the system.\n In the context of a messaging feature, these are essentially the authorization and privacy concerns listed above.\n \n-For the authorization part, we take the following approach: a user Bob can message another user Alice exactly when Alice has added Bob as a friend.\n-When Alice adds Bob as a friend, she gives permission or *authority* to Bob to send her a message.\n-It is important to remember that friendships can go in a single direction in our app.\n-This means its possible for Bob to message Alice without Alice being able to message him back!\n+For the authorization part, we take the following approach: a user Bob can message another user Alice when Alice starts following Bob back."
  },
  {
    "id" : "770959b5-e15d-4aab-aeac-f681f962e9ea",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "f91bb089-2ff3-4ddb-b74d-cf6cd1049841",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nWhen Alice follows Bob, she gives permission or *authority* to Bob to send her a message.\r\n```",
        "createdAt" : "2020-03-18T16:08:00Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : 32,
    "diffHunk" : "@@ -34,14 +32,12 @@ As mentioned in the :doc:`architecture <app-architecture>` section, the DAML cod\n The workflow aspect refers to the interactions between parties that are permitted by the system.\n In the context of a messaging feature, these are essentially the authorization and privacy concerns listed above.\n \n-For the authorization part, we take the following approach: a user Bob can message another user Alice exactly when Alice has added Bob as a friend.\n-When Alice adds Bob as a friend, she gives permission or *authority* to Bob to send her a message.\n-It is important to remember that friendships can go in a single direction in our app.\n-This means its possible for Bob to message Alice without Alice being able to message him back!\n+For the authorization part, we take the following approach: a user Bob can message another user Alice when Alice starts following Bob back.\n+When Alice starts following Bob back, she gives permission or *authority* to Bob to send her a message."
  },
  {
    "id" : "cf32bed0-bdd7-4597-9365-56b7c8be5fa9",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "9d31c895-6562-4543-ae03-4ee96f0c5ae5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nNavigate to the ``daml/User.daml`` file and copy the following ``Message`` template to the bottom.\r\n```",
        "createdAt" : "2020-03-18T16:08:11Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : 37,
    "diffHunk" : "@@ -34,14 +32,12 @@ As mentioned in the :doc:`architecture <app-architecture>` section, the DAML cod\n The workflow aspect refers to the interactions between parties that are permitted by the system.\n In the context of a messaging feature, these are essentially the authorization and privacy concerns listed above.\n \n-For the authorization part, we take the following approach: a user Bob can message another user Alice exactly when Alice has added Bob as a friend.\n-When Alice adds Bob as a friend, she gives permission or *authority* to Bob to send her a message.\n-It is important to remember that friendships can go in a single direction in our app.\n-This means its possible for Bob to message Alice without Alice being able to message him back!\n+For the authorization part, we take the following approach: a user Bob can message another user Alice when Alice starts following Bob back.\n+When Alice starts following Bob back, she gives permission or *authority* to Bob to send her a message.\n \n To implement this workflow, let's start by adding the new *data* for messages.\n-Navigate to the ``daml/User.daml`` file and copy the following ``Message`` template to the bottom.\n-(Indentation is important: it should be at the top level like the original ``User`` template.)\n+Navigate to the ``daml/User.daml`` file and copy the following ``Message`` template to the bottom. "
  },
  {
    "id" : "0cf16cdd-7678-49d6-a1da-8a1df02b4e77",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "51bb52ea-9e4c-4c6e-befe-410935861d24",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    2. A form with a dropdown menu for follower selection and a text field for composing the message.\r\n```",
        "createdAt" : "2020-03-18T16:09:10Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : null,
    "diffHunk" : "@@ -92,11 +87,11 @@ We can now implement our messaging feature in the UI!\n Messaging UI\n ============\n \n-The UI for messaging will consist of a new *Messages* panel in addition to the *Friends* and *Network* panel.\n+The UI for messaging will consist of a new *Messages* panel in addition to the *Follow* and *Network* panel.\n This panel will have two parts:\n \n     1. A list of messages you've received with their senders.\n-    2. A form with a dropdown menu for friend selection and a text field for composing the message.\n+    2. A form with a dropdown menu for user selection and a text field for composing the message."
  },
  {
    "id" : "80eb5493-95a5-4fda-9096-8fd051b847c3",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "d37350a8-5839-4ed9-a56a-24f3118903e6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We don't need to follow somebody to message them. They give us the authority to message them by following us.\r\n```suggestion\r\nNext we need the ``MessageEdit`` component to compose and send messages to our followers.\r\n```",
        "createdAt" : "2020-03-18T16:10:24Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : null,
    "diffHunk" : "@@ -129,7 +124,7 @@ This is a major benefit of writing apps on DAML: the burden of ensuring privacy\n MessageEdit Component\n ---------------------\n \n-Next we need the ``MessageEdit`` component to compose and send messages to selected friends.\n+Next we need the ``MessageEdit`` component to compose and send messages to selected users that we are following (and who are also following us back)."
  },
  {
    "id" : "c401f8c4-6933-4588-86f6-68e9838dd1bd",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "a6ffd97f-e18e-4ca3-a49a-b18d49928774",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nDue to the logic of the ``SendMessage`` choice, it is impossible to send a message to a user who is not following us (even if you could somehow access their ``User`` contract).\r\n```",
        "createdAt" : "2020-03-18T16:10:54Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : null,
    "diffHunk" : "@@ -151,11 +146,11 @@ The ``sendMessage`` wrapper reports potential errors to the user, and ``submitMe\n The result of a successful call to ``submitMessage`` is a new ``Message`` contract created on the ledger.\n \n The return value of this component is the React ``Form`` element.\n-This contains a dropdown menu to select a receiver from the ``friends``, a text field for the message content, and a *Send* button which triggers ``submitMessage``.\n+This contains a dropdown menu to select a receiver from the ``following``, a text field for the message content, and a *Send* button which triggers ``submitMessage``.\n \n There is again an important point here, in this case about how *authorization* is enforced.\n-Due to the logic of the ``SendMessage`` choice, it is impossible to send a message to a user who has not added you as a friend (even if you could somehow access their ``User`` contract).\n-The assertion that ``elem sender friends`` in ``SendMessage`` ensures this: no mistake or malice by the UI programmer could breach this.\n+Due to the logic of the ``SendMessage`` choice, it is impossible to send a message to a user who has not followed us back (even if you could somehow access their ``User`` contract)."
  },
  {
    "id" : "c940bd2e-ae6f-4dcf-bcc6-98bcd070d090",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "1324d923-8a60-4bd4-9fef-5377cfaace56",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nAs mentioned at the beginning of this *Getting Started with DAML* guide, DAML Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. That means that all user data and follower relationships are lost. \r\n```",
        "createdAt" : "2020-03-18T16:13:12Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : null,
    "diffHunk" : "@@ -193,15 +188,15 @@ We need to terminate the previous ``./daml-start.sh`` process and run it again,\n \n First, navigate to the terminal window where the ``daml-start.sh`` process is running and terminate the active process by hitting ``Ctrl-C``. This shuts down the previous instances of the sandbox. Next in the root ``create-daml-app`` folder run ``./daml-start.sh``.\n \n-As mentioned at the beginning of this *Getting Started with DAML* guide, DAML Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. That means that all the friends and their connections are lost. \n+As mentioned at the beginning of this *Getting Started with DAML* guide, DAML Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. That means that all user data and list of ``following`` connections between them are lost. "
  },
  {
    "id" : "dafe790a-6286-436a-8711-4ec74bf1e9f0",
    "prId" : 5067,
    "comments" : [
      {
        "id" : "dc3415e9-4a1e-41af-8f48-f79f3477cc5d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nThen, if you click on the dropdown menu in the *Messages* panel, you'll be able to see some followers to message!\r\n```",
        "createdAt" : "2020-03-18T16:13:44Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : null,
    "diffHunk" : "@@ -193,15 +188,15 @@ We need to terminate the previous ``./daml-start.sh`` process and run it again,\n \n First, navigate to the terminal window where the ``daml-start.sh`` process is running and terminate the active process by hitting ``Ctrl-C``. This shuts down the previous instances of the sandbox. Next in the root ``create-daml-app`` folder run ``./daml-start.sh``.\n \n-As mentioned at the beginning of this *Getting Started with DAML* guide, DAML Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. That means that all the friends and their connections are lost. \n+As mentioned at the beginning of this *Getting Started with DAML* guide, DAML Sandbox uses an in-memory store, which means it loses its state when stopped or restarted. That means that all user data and list of ``following`` connections between them are lost. \n \n If you have the frontend UI up and running you're all set. In case you don't have the UI running open a new terminal window and navigate to the ``create-daml-app/ui`` folder and run the ``yaml start`` command, which will start the UI. \n \n Once you've done all these changes you should see the same login page as before at http://localhost:3000.\n Once you've logged in, you'll see a familiar UI but with our new *Messages* panel at the bottom!\n-Go ahead and add some friends, and log in as some of those friends in separate browser windows to add yourself back.\n-Then, if you click on the dropdown menu in the *Messages* panel, you'll be able to see some friends to message!\n-Send some messages between friends and make sure you can see each one from the other side.\n+Go ahead and add follow more users, and log in as some of those users in separate browser windows to follow yourself back.\n+Then, if you click on the dropdown menu in the *Messages* panel, you'll be able to see some users to message!"
  },
  {
    "id" : "651c73c4-04f3-43a3-a961-8652a0b849b2",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "257ab0bf-e963-4cdd-8db4-3e3116ef4fe4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nOpen a new terminal and run the following commands::\r\n```\r\nIt sounds like you’re explaining how to open a new terminal with those commands.",
        "createdAt" : "2020-03-12T15:20:20Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : null,
    "diffHunk" : "@@ -72,7 +76,7 @@ TypeScript Code Generation\n \n Remember that we interface with the DAML model from the UI components using generated TypeScript.\n Since we have changed our DAML code, we also need to rerun the TypeScript code generator.\n-Let's do this by running::\n+Open a new terminal Let's do this by running::"
  },
  {
    "id" : "a3473101-760d-47c2-ad19-c91bae4f2259",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "150573ab-e0c1-493c-99d9-61269563f68c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n=======================\r\n```",
        "createdAt" : "2020-03-12T15:21:16Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : null,
    "diffHunk" : "@@ -175,24 +179,22 @@ You can see we simply follow the formatting of the previous panels and include t\n That is all for the implementation!\n Let's give the new functionality a spin.\n \n-Running the New App\n+Running the New Feature\n ==================="
  },
  {
    "id" : "993853f8-b3eb-402f-bb25-34b34384030e",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "39a67c9f-0dff-488d-85da-28e55f67e693",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think this is misleading. This is not about restarting sandbox or the JSON API. This is about building the DAR and uploading it. It just happens that for simplicity we do not upload the DAR to the running sandbox but kill and restart it to also clear out data.",
        "createdAt" : "2020-03-12T15:22:29Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2c7be746-ac4e-4901-91ff-21e1425d77fb",
        "parentId" : "39a67c9f-0dff-488d-85da-28e55f67e693",
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "I see your point, but it is too detailed for the getting started guide, as the effect of the action are the same. If I look in our docs this is how _daml start_ (used in the ./daml-start.sh) is described \r\n\r\n\"Launch Sandbox, Navigator and the HTTP JSON API Service: daml start You can disable the HTTP JSON API by passing --json-api-port none to daml start. To specify additional options for sandbox/navigator/the HTTP JSON API you can use --sandbox-option=opt, --navigator-option=opt and --json-api-option=opt.\"\r\n\r\nNothing about the actual mechanics of building and uploading the DAR. Overall, think including this would make a very lengthy explanation. Once we do have the possibility to upload the DAR file to a running sandbox we can change it in here as well.",
        "createdAt" : "2020-03-13T08:44:38Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "01e6ec3e-5e85-4378-a673-bf1797e1a908",
        "parentId" : "39a67c9f-0dff-488d-85da-28e55f67e693",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we maybe make it less precise, e.g., something like “we need to run `daml start` again to restart the components with our new model”? I fully agree that a lengthy explanation is not suitable here. What I find confusing is that the current explanation is very precise in what you do (restart sandbox and the JSON API) but in an incorrect way (restarting those components on their own doesn’t do what you want here).",
        "createdAt" : "2020-03-13T08:51:53Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b058fb44-8be2-4841-afb9-de1517e1df6c",
        "parentId" : "39a67c9f-0dff-488d-85da-28e55f67e693",
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "Will mark this comment as resolved and will commit a new version with different text",
        "createdAt" : "2020-03-13T10:17:06Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : null,
    "diffHunk" : "@@ -175,24 +179,22 @@ You can see we simply follow the formatting of the previous panels and include t\n That is all for the implementation!\n Let's give the new functionality a spin.\n \n-Running the New App\n+Running the New Feature\n ===================\n \n-To start up the new app, open up your terminal application.\n-First make sure your previously run commands are terminated, in particular the ``daml-start.sh`` command.\n-You can do this by hitting ``Ctrl-C`` in the terminal window where you ran the command.\n-This shuts down the previous instances of the sandbox and JSON API server: it is important that we start our new app with new instances of these components.\n+As previously mentioned, we need to restart the DAML Sandbox and the JSON API, in order to get the messaging feature up and running. "
  },
  {
    "id" : "52eaf9e9-a71f-47b4-a2b0-689d006ecf03",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "fd8fe5dc-8118-40c1-a00b-b93468fede19",
        "parentId" : null,
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "@cocreature This is the new explanation that also serves as a refresher on what ./daml-start.sh does (from the \"Getting started with DAML\" section)",
        "createdAt" : "2020-03-13T10:20:57Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6c7b3f94-484e-46d6-b4e7-d9a1df9c3e88",
        "parentId" : "fd8fe5dc-8118-40c1-a00b-b93468fede19",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-03-13T10:28:08Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : null,
    "diffHunk" : "@@ -175,24 +179,22 @@ You can see we simply follow the formatting of the previous panels and include t\n That is all for the implementation!\n Let's give the new functionality a spin.\n \n-Running the New App\n-===================\n+Running the New Feature\n+=======================\n \n-To start up the new app, open up your terminal application.\n-First make sure your previously run commands are terminated, in particular the ``daml-start.sh`` command.\n-You can do this by hitting ``Ctrl-C`` in the terminal window where you ran the command.\n-This shuts down the previous instances of the sandbox and JSON API server: it is important that we start our new app with new instances of these components.\n+We need to terminate the previous ``./daml-start.ch`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running the ``./daml-start.ch`` again we will \n \n-Having done that, first restart the DAML sandbox and JSON API server in the root ``create-daml-app`` folder::\n+  - Compile our DAML code into a *DAR file contatining the new feature*\n+  - Run a fresh instance of the *Sandbox with the new DAR file*\n+  - Start the HTTP JSON API \n \n-    ./daml-start.sh\n+First, navigate to the terminal window where the ``daml-start.sh`` is running and terminate the active process by hitting ``Ctrl-C``. This shuts down the previous instances of the sandbox. Next in the root ``create-daml-app`` folder run ``./daml-start.sh``."
  },
  {
    "id" : "21c5972c-fc34-4c6a-9689-82383ba15488",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "67d5e067-b5c7-43c6-88b9-353590e9696e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  - Compile our DAML code into a *DAR file containing the new feature*\r\n```",
        "createdAt" : "2020-03-13T13:54:15Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : null,
    "diffHunk" : "@@ -175,24 +179,22 @@ You can see we simply follow the formatting of the previous panels and include t\n That is all for the implementation!\n Let's give the new functionality a spin.\n \n-Running the New App\n-===================\n+Running the New Feature\n+=======================\n \n-To start up the new app, open up your terminal application.\n-First make sure your previously run commands are terminated, in particular the ``daml-start.sh`` command.\n-You can do this by hitting ``Ctrl-C`` in the terminal window where you ran the command.\n-This shuts down the previous instances of the sandbox and JSON API server: it is important that we start our new app with new instances of these components.\n+We need to terminate the previous ``./daml-start.ch`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running the ``./daml-start.ch`` again we will \n \n-Having done that, first restart the DAML sandbox and JSON API server in the root ``create-daml-app`` folder::\n+  - Compile our DAML code into a *DAR file contatining the new feature*"
  },
  {
    "id" : "c4b0bf26-0be4-48b9-92d5-742d028fea52",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "f4f05525-2994-443b-ba39-99979512fe9e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nWe need to terminate the previous ``./daml-start.sh`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running ``./daml-start.sh`` again we will \r\n```\r\nAre you sure you are not Swiss :joy: ",
        "createdAt" : "2020-03-13T13:54:43Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "320eeba6-2b46-4a48-a083-e5a74cf2da9c",
        "parentId" : "f4f05525-2994-443b-ba39-99979512fe9e",
        "author" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "body" : "😂I went back and forth between .sh and .ch so many times while writing it",
        "createdAt" : "2020-03-13T14:19:57Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "nemanja-da",
          "name" : "Nemanja",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/56260209?u=23eb68502e88fcc2fb3821623951562c3bea45e8&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : null,
    "diffHunk" : "@@ -175,24 +179,22 @@ You can see we simply follow the formatting of the previous panels and include t\n That is all for the implementation!\n Let's give the new functionality a spin.\n \n-Running the New App\n-===================\n+Running the New Feature\n+=======================\n \n-To start up the new app, open up your terminal application.\n-First make sure your previously run commands are terminated, in particular the ``daml-start.sh`` command.\n-You can do this by hitting ``Ctrl-C`` in the terminal window where you ran the command.\n-This shuts down the previous instances of the sandbox and JSON API server: it is important that we start our new app with new instances of these components.\n+We need to terminate the previous ``./daml-start.ch`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running the ``./daml-start.ch`` again we will "
  },
  {
    "id" : "3ed6d521-5f07-49f6-9a68-db20a4638b01",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "77905a48-774a-4234-b471-21dee7270e23",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nFirst, navigate to the terminal window where the ``daml-start.sh`` process is running and terminate the active process by hitting ``Ctrl-C``. This shuts down the previous instances of the sandbox. Next in the root ``create-daml-app`` folder run ``./daml-start.sh``.\r\n```\r\nOr remove the article",
        "createdAt" : "2020-03-13T13:55:28Z",
        "updatedAt" : "2020-03-13T14:20:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : null,
    "diffHunk" : "@@ -175,24 +179,22 @@ You can see we simply follow the formatting of the previous panels and include t\n That is all for the implementation!\n Let's give the new functionality a spin.\n \n-Running the New App\n-===================\n+Running the New Feature\n+=======================\n \n-To start up the new app, open up your terminal application.\n-First make sure your previously run commands are terminated, in particular the ``daml-start.sh`` command.\n-You can do this by hitting ``Ctrl-C`` in the terminal window where you ran the command.\n-This shuts down the previous instances of the sandbox and JSON API server: it is important that we start our new app with new instances of these components.\n+We need to terminate the previous ``./daml-start.ch`` process and run it again, as we need to have a Sandbox instance with a DAR file containing the new feature. As a reminder, by running the ``./daml-start.ch`` again we will \n \n-Having done that, first restart the DAML sandbox and JSON API server in the root ``create-daml-app`` folder::\n+  - Compile our DAML code into a *DAR file contatining the new feature*\n+  - Run a fresh instance of the *Sandbox with the new DAR file*\n+  - Start the HTTP JSON API \n \n-    ./daml-start.sh\n+First, navigate to the terminal window where the ``daml-start.sh`` is running and terminate the active process by hitting ``Ctrl-C``. This shuts down the previous instances of the sandbox. Next in the root ``create-daml-app`` folder run ``./daml-start.sh``."
  },
  {
    "id" : "313acbc6-cd51-4b84-969d-6f94cc32e3db",
    "prId" : 4968,
    "comments" : [
      {
        "id" : "775b936d-4aaa-4b03-ae41-7d4d0be96aed",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "There's a typo. It should be `./daml-start.sh` (with `sh` in the end, not `ch`.)",
        "createdAt" : "2020-03-16T11:40:28Z",
        "updatedAt" : "2020-03-16T11:41:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c80b4cf506a681bf93fa4f47782156e5fa132623",
    "line" : 9,
    "diffHunk" : "@@ -19,7 +19,12 @@ This means:\n \n We will see that DAML lets us implement these guarantees in a direct and intuitive way.\n \n-There are two parts to building the messaging feature: the DAML model and the UI.\n+There are three parts to building and running the messaging feature: \n+\n+    1. Adding the necessary changes to the DAML model  \n+    2. Making the corresponding changes in the UI\n+    3. Running the new feature. In order to do that we need to terminate the previous ``./daml-start.ch`` process and run it again.  "
  },
  {
    "id" : "08ccd3fd-e546-4087-ae3f-39efec18b9c9",
    "prId" : 4736,
    "comments" : [
      {
        "id" : "26ef7875-4d9e-48d2-a45f-a772e4c6f241",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nIf you've added the ``SendMessage`` choice correctly, you should see an error in the bottom *Problems* pane of Visual Studio Code that ``Message`` is undefined.\r\n```",
        "createdAt" : "2020-02-27T08:52:20Z",
        "updatedAt" : "2020-02-27T08:59:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12d68d7c-b9f4-44df-a513-e46e0526b4a4",
        "parentId" : "26ef7875-4d9e-48d2-a45f-a772e4c6f241",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Wouldn't it make sense to first add the `Message` template and then the `SendMessage` choice? Otherwise, we'll end up calling `create` for a template whose data model hasn't been defined yet.",
        "createdAt" : "2020-02-27T08:55:30Z",
        "updatedAt" : "2020-02-27T08:59:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cb5421db-daa9-44e2-a549-afef4de2b23c",
        "parentId" : "26ef7875-4d9e-48d2-a45f-a772e4c6f241",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yeah, that might be better.",
        "createdAt" : "2020-02-27T09:36:39Z",
        "updatedAt" : "2020-02-27T09:36:40Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "64b213bd4a509e36e5f9e58911c8d7c9b325c141",
    "line" : 73,
    "diffHunk" : "@@ -5,124 +5,178 @@ Your First Feature\n ******************\n \n Let's dive into implementing a new feature for our social network app.\n-From that we'll get a better idea of how to build DAML applications using our template.\n+This will give us a better idea how to develop DAML applications using our template.\n \n-Right now our app allows us to add friends to our network, but we can't communicate with them!\n-Let's fix that by adding a private messaging feature.\n-This should allow a user to send messages to a chosen friend, and see all messages that have been sent to them.\n-Of course we must make sure that no one can see messages that were not sent to them.\n-We will see that DAML lets us implement this in a direct and intuitive way.\n+At the moment, our app lets us add friends to our network, but we have no way to communicate with them!\n+Let's fix that by adding a *private messaging* feature.\n+This should let a user send messages to any chosen friend, and see all messages that have been sent to them.\n \n-There are two parts to building the messaging feature: the DAML code and the UI.\n-Let's start with adding to the DAML code, on which we will base our UI changes.\n+This feature should also respect *authorization* and *privacy*.\n+This means:\n+\n+    1. You cannot send a message to someone unless they have added you as a friend.\n+    2. You cannot see a message unless it was sent specifically to you.\n+\n+We will see that DAML lets us implement these guarantees in a direct and intuitive way.\n+\n+There are two parts to building the messaging feature: the DAML model and the UI.\n+As usual, we must start with the DAML model and base our UI changes on top of that.\n \n DAML Changes\n ============\n \n-The DAML code defines the *workflow* of the application.\n-This means: what interactions between users (or *parties*) are permitted by the system?\n-In the context of our feature, the question is: when is a user allowed to message another user?\n+As mentioned in the :doc:`architecture <app-architecture>` section, the DAML code defines the data and *workflow* of the application.\n+The workflow aspect refers to the interactions between parties that are permitted by the system.\n+In the context of a messaging feature, these are essentially the authorization and privacy concerns listed above.\n \n-The approach we'll take is: a user Bob can message another user Alice if Alice has added Bob as a friend.\n-Remember that friendships are single-directional in our app.\n-So Alice adding Bob as a friend means that she gives permission (or *authority*) for Bob to send her a message.\n+For the authorization part, we take the following approach: a user Bob can message another user Alice exactly when Alice has added Bob as a friend.\n+When Alice adds Bob as a friend, she gives permission or *authority* to Bob to send her a message.\n+It is important to remember that friendships can go in a single direction in our app.\n+This means its possible for Bob to message Alice without Alice being able to message him back!\n \n-In DAML this workflow is represented as a new choice on the ``User`` contract.\n+To implement this workflow, we add a new choice to the ``User`` template.\n+Copy and paste the following code at the end of the ``User.daml`` file.\n+(Take care to match the indentation of the ``AddFriend`` choice, as the DAML parser pays attention to it.)\n \n .. literalinclude:: code/daml/User.daml\n   :language: daml\n   :start-after: -- SENDMESSAGE_BEGIN\n   :end-before: -- SENDMESSAGE_END\n \n-Let's break this down.\n-The choice is ``nonconsuming`` because sending a message should not affect the existence of the ``User`` contract.\n-By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n-The parameters to the choice are the sender (the party wishing to talk to the signatory of this ``User`` contract) and the message text.\n-The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n-Finally, the body of the choice makes sure that the sender is a friend of the user and then creates the ``Message`` with the sender, receiver and content.\n+As with the ``AddFriend`` choice, there are a few aspects to note here.\n+\n+    - The choice is ``nonconsuming`` because sending a message should not consume the ``User`` contract.\n+    - By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n+    - The parameters to the choice are the ``sender`` and ``content`` of this message.\n+    - The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n+    - The body of the choice first ensures that the sender is a friend of the user and then creates the ``Message`` contract with the ``receiver`` being the signatory of the ``User`` contract.\n \n-Now let's see the ``Message`` contract template.\n-This is very simple - data and no choices - as well as the ``signatory`` declaration.\n+If you've added the ``SendMessage`` choice correctly, you should an error in the bottom *Problems* pane of Visual Studio Code that ``Message`` is undefined."
  },
  {
    "id" : "607c5690-f471-4eff-8f36-bbb7a0bac842",
    "prId" : 4736,
    "comments" : [
      {
        "id" : "50662125-c7f9-4bbb-9bd0-3b50b7d2e5d0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "You can also see it if you were the sender.",
        "createdAt" : "2020-02-27T08:52:51Z",
        "updatedAt" : "2020-02-27T08:59:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "64b213bd4a509e36e5f9e58911c8d7c9b325c141",
    "line" : 22,
    "diffHunk" : "@@ -5,124 +5,178 @@ Your First Feature\n ******************\n \n Let's dive into implementing a new feature for our social network app.\n-From that we'll get a better idea of how to build DAML applications using our template.\n+This will give us a better idea how to develop DAML applications using our template.\n \n-Right now our app allows us to add friends to our network, but we can't communicate with them!\n-Let's fix that by adding a private messaging feature.\n-This should allow a user to send messages to a chosen friend, and see all messages that have been sent to them.\n-Of course we must make sure that no one can see messages that were not sent to them.\n-We will see that DAML lets us implement this in a direct and intuitive way.\n+At the moment, our app lets us add friends to our network, but we have no way to communicate with them!\n+Let's fix that by adding a *private messaging* feature.\n+This should let a user send messages to any chosen friend, and see all messages that have been sent to them.\n \n-There are two parts to building the messaging feature: the DAML code and the UI.\n-Let's start with adding to the DAML code, on which we will base our UI changes.\n+This feature should also respect *authorization* and *privacy*.\n+This means:\n+\n+    1. You cannot send a message to someone unless they have added you as a friend.\n+    2. You cannot see a message unless it was sent specifically to you."
  },
  {
    "id" : "32e451b7-0744-46c0-965c-aad48488a0e4",
    "prId" : 4736,
    "comments" : [
      {
        "id" : "a453d409-23e2-4121-be0d-61fc6e4c27bc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "... and hence have given you the authority to send them messages.",
        "createdAt" : "2020-02-27T08:53:24Z",
        "updatedAt" : "2020-02-27T08:59:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "64b213bd4a509e36e5f9e58911c8d7c9b325c141",
    "line" : 21,
    "diffHunk" : "@@ -5,124 +5,178 @@ Your First Feature\n ******************\n \n Let's dive into implementing a new feature for our social network app.\n-From that we'll get a better idea of how to build DAML applications using our template.\n+This will give us a better idea how to develop DAML applications using our template.\n \n-Right now our app allows us to add friends to our network, but we can't communicate with them!\n-Let's fix that by adding a private messaging feature.\n-This should allow a user to send messages to a chosen friend, and see all messages that have been sent to them.\n-Of course we must make sure that no one can see messages that were not sent to them.\n-We will see that DAML lets us implement this in a direct and intuitive way.\n+At the moment, our app lets us add friends to our network, but we have no way to communicate with them!\n+Let's fix that by adding a *private messaging* feature.\n+This should let a user send messages to any chosen friend, and see all messages that have been sent to them.\n \n-There are two parts to building the messaging feature: the DAML code and the UI.\n-Let's start with adding to the DAML code, on which we will base our UI changes.\n+This feature should also respect *authorization* and *privacy*.\n+This means:\n+\n+    1. You cannot send a message to someone unless they have added you as a friend."
  },
  {
    "id" : "592be3ca-7587-4d89-b30b-0b25d2cb7554",
    "prId" : 4736,
    "comments" : [
      {
        "id" : "81d8eea6-99a5-4cc0-8132-188f47687805",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This will change in the future when we add explicit disclosure. Let's keep that in mind.",
        "createdAt" : "2020-02-27T08:57:06Z",
        "updatedAt" : "2020-02-27T08:59:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "64b213bd4a509e36e5f9e58911c8d7c9b325c141",
    "line" : 153,
    "diffHunk" : "@@ -5,124 +5,178 @@ Your First Feature\n ******************\n \n Let's dive into implementing a new feature for our social network app.\n-From that we'll get a better idea of how to build DAML applications using our template.\n+This will give us a better idea how to develop DAML applications using our template.\n \n-Right now our app allows us to add friends to our network, but we can't communicate with them!\n-Let's fix that by adding a private messaging feature.\n-This should allow a user to send messages to a chosen friend, and see all messages that have been sent to them.\n-Of course we must make sure that no one can see messages that were not sent to them.\n-We will see that DAML lets us implement this in a direct and intuitive way.\n+At the moment, our app lets us add friends to our network, but we have no way to communicate with them!\n+Let's fix that by adding a *private messaging* feature.\n+This should let a user send messages to any chosen friend, and see all messages that have been sent to them.\n \n-There are two parts to building the messaging feature: the DAML code and the UI.\n-Let's start with adding to the DAML code, on which we will base our UI changes.\n+This feature should also respect *authorization* and *privacy*.\n+This means:\n+\n+    1. You cannot send a message to someone unless they have added you as a friend.\n+    2. You cannot see a message unless it was sent specifically to you.\n+\n+We will see that DAML lets us implement these guarantees in a direct and intuitive way.\n+\n+There are two parts to building the messaging feature: the DAML model and the UI.\n+As usual, we must start with the DAML model and base our UI changes on top of that.\n \n DAML Changes\n ============\n \n-The DAML code defines the *workflow* of the application.\n-This means: what interactions between users (or *parties*) are permitted by the system?\n-In the context of our feature, the question is: when is a user allowed to message another user?\n+As mentioned in the :doc:`architecture <app-architecture>` section, the DAML code defines the data and *workflow* of the application.\n+The workflow aspect refers to the interactions between parties that are permitted by the system.\n+In the context of a messaging feature, these are essentially the authorization and privacy concerns listed above.\n \n-The approach we'll take is: a user Bob can message another user Alice if Alice has added Bob as a friend.\n-Remember that friendships are single-directional in our app.\n-So Alice adding Bob as a friend means that she gives permission (or *authority*) for Bob to send her a message.\n+For the authorization part, we take the following approach: a user Bob can message another user Alice exactly when Alice has added Bob as a friend.\n+When Alice adds Bob as a friend, she gives permission or *authority* to Bob to send her a message.\n+It is important to remember that friendships can go in a single direction in our app.\n+This means its possible for Bob to message Alice without Alice being able to message him back!\n \n-In DAML this workflow is represented as a new choice on the ``User`` contract.\n+To implement this workflow, we add a new choice to the ``User`` template.\n+Copy and paste the following code at the end of the ``User.daml`` file.\n+(Take care to match the indentation of the ``AddFriend`` choice, as the DAML parser pays attention to it.)\n \n .. literalinclude:: code/daml/User.daml\n   :language: daml\n   :start-after: -- SENDMESSAGE_BEGIN\n   :end-before: -- SENDMESSAGE_END\n \n-Let's break this down.\n-The choice is ``nonconsuming`` because sending a message should not affect the existence of the ``User`` contract.\n-By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n-The parameters to the choice are the sender (the party wishing to talk to the signatory of this ``User`` contract) and the message text.\n-The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n-Finally, the body of the choice makes sure that the sender is a friend of the user and then creates the ``Message`` with the sender, receiver and content.\n+As with the ``AddFriend`` choice, there are a few aspects to note here.\n+\n+    - The choice is ``nonconsuming`` because sending a message should not consume the ``User`` contract.\n+    - By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n+    - The parameters to the choice are the ``sender`` and ``content`` of this message.\n+    - The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n+    - The body of the choice first ensures that the sender is a friend of the user and then creates the ``Message`` contract with the ``receiver`` being the signatory of the ``User`` contract.\n \n-Now let's see the ``Message`` contract template.\n-This is very simple - data and no choices - as well as the ``signatory`` declaration.\n+If you've added the ``SendMessage`` choice correctly, you should an error in the bottom *Problems* pane of Visual Studio Code that ``Message`` is undefined.\n+Let's add the ``Message`` template at the bottom of the same file (copy it from below).\n \n .. literalinclude:: code/daml/User.daml\n   :language: daml\n   :start-after: -- MESSAGE_BEGIN\n   :end-before: -- MESSAGE_END\n \n-Note that we have two signatories on the ``Message`` contract: both the sender and receiver.\n-This enforces the fact that the contract creation (and archival) must be authorized by both parties.\n+This template is very simple: it contains data but no choices.\n+The ``signatory`` clause is the interesting part: both the sender and receiver are signatories on the template.\n+This enforces the fact that creation and archival of ``Message`` contracts must be authorized by both parties.\n \n-Now we've specified the workflow of sending messages, let's integrate the functionality into our app.\n+This completes the workflow for messaging in our app.\n+Now let's integrate this functionality into the UI.\n \n TypeScript Code Generation\n ==========================\n \n-Remember that we interface with our DAML code from the UI components using the generated TypeScript.\n+Remember that we interface with the DAML model from the UI components using generated TypeScript.\n Since we have changed our DAML code, we also need to rerun the TypeScript code generator.\n-Let's do this now by running::\n+Let's do this by running::\n \n   daml build\n   daml codegen ts .daml/dist/create-daml-app-0.1.0.dar -o daml-ts/src\n \n-As the TypeScript code is generated into the separate ``daml-ts`` workspace on which the UI depends, we need to rebuild the workspaces from the root directory using::\n+As the TypeScript code is generated into the separate ``daml-ts`` workspace which the UI depends on, we need to rebuild the workspaces from the root ``create-daml-app`` folder using::\n \n   yarn workspaces run build\n \n-We should now have the updated TypeScript code with equivalents of the ``Message`` template and ``SendMessage`` choice.\n+We should now have an up-to-date TypeScript interface to our DAML model, in particular to the ``Message`` template and ``SendMessage`` choice.\n \n-Now let's implement our messaging feature in the UI!\n+We can now implement our messaging feature in the UI!\n \n Messaging UI\n ============\n \n-Our messaging feature has two parts: a form with inputs for selecting friends and composing the message text, and a \"feed\" of messages that have been sent to you.\n-Both parts will be implemented as React components that render on the main screen.\n+The UI for messaging will consist of a new *Messages* panel in addition to the *Friends* and *Network* panel.\n+This panel will have two parts:\n+\n+    1. A list of messages you've received with their senders.\n+    2. A form with a dropdown menu for friend selection and a text field for composing the message.\n+\n+We will implement each part as a React component, which we'll name ``MessageList`` and ``MessageEdit`` respectively.\n+Let's start with the simpler ``MessageList``.\n \n MessageList Component\n ---------------------\n \n-The MessageList component is fairly straight-forward: it queries all ``Message`` contracts and displays their contents as a list.\n-Here is the code for the entire component.\n+The goal of the ``MessageList`` component is to query all ``Message`` contracts where the ``receiver`` is the current user, and display their contents and senders in a list.\n+The entire component is shown below.\n+You should copy this into a new ``MessageList.tsx`` file in ``ui/src/components``.\n+\n+.. TODO Include file in template with placeholder for component logic.\n \n .. literalinclude:: code/ui-after/MessageList.tsx\n \n-The ``messagesResult`` tracks the state of ``Message`` contracts on the ledger, where we specify no restrictions on the query.\n-We extract the actual message data in ``messages``.\n-Note that for any particular user, the ``Message`` query yields exactly the messages that have been either written by or sent to that user.\n-This is due to how we modelled the signatories and observers in the ``Message`` template, and means we do not risk a privacy breach coming from the application code.\n+First we get the ``username`` of the current user with the ``useParty`` hook.\n+Then ``messagesResult`` gets the stream of all ``Message`` contracts where the ``receiver`` is our ``username``.\n+The streaming aspect means that we don't need to reload the page when new messages come in.\n+We extract the *payload* of every ``Message`` contract (the data as opposed to metadata like the contract ID) in ``messages``.\n+The rest of the component simply constructs a React ``List`` element with an item for each message.\n+\n+There is one important point about privacy here.\n+No matter how we write our ``Message`` query in the UI code, it is impossible to break the privacy rules given by the DAML model.\n+That is, it is impossible to see a ``Message`` contract of which you are not the ``sender`` or the ``receiver`` (the only parties that can observe the contract)."
  },
  {
    "id" : "47f8df11-ffa7-42d3-a3ef-a61254228714",
    "prId" : 4736,
    "comments" : [
      {
        "id" : "94f33399-ca14-4cde-9735-a0e2602166ed",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's not use the infix-with-backticks syntax in out example code. I don't think this language feature is very beginner friendly and doesn't add any value here.",
        "createdAt" : "2020-02-27T08:58:56Z",
        "updatedAt" : "2020-02-27T08:59:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ee6d50c-d164-4731-ad1d-551da47184a8",
        "parentId" : "94f33399-ca14-4cde-9735-a0e2602166ed",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Agreed, I'll change it.",
        "createdAt" : "2020-02-27T09:35:01Z",
        "updatedAt" : "2020-02-27T09:35:01Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "50f2e643-6a18-4a14-af37-d1b37daae4b3",
        "parentId" : "94f33399-ca14-4cde-9735-a0e2602166ed",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Oh... DLint gives a warning if you use prefix `elem`. That might be worse.",
        "createdAt" : "2020-02-27T09:42:47Z",
        "updatedAt" : "2020-02-27T09:42:47Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "825e4726-3fc5-4024-875f-f53cbc2dc96c",
        "parentId" : "94f33399-ca14-4cde-9735-a0e2602166ed",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> Oh... DLint gives a warning if you use prefix `elem`. That might be worse.\r\n\r\nDisable the warning? I agree with @hurryabit that infix syntax only adds one more thing that people have to learn so the warning just doesn’t make sense.",
        "createdAt" : "2020-02-27T09:43:59Z",
        "updatedAt" : "2020-02-27T09:43:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "60b3156c-a791-451e-9f2a-4f2eda1fecf3",
        "parentId" : "94f33399-ca14-4cde-9735-a0e2602166ed",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yeah, I can add a dlint.yaml file which can hopefully be easily ignored.",
        "createdAt" : "2020-02-27T09:48:07Z",
        "updatedAt" : "2020-02-27T09:48:08Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8b9cf730-2f8b-495f-a3e4-da61bcd2dc46",
        "parentId" : "94f33399-ca14-4cde-9735-a0e2602166ed",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I was more thinking of disabling it everywhere by default. IMHO if our default config does not work for the quickstart guide we should change the default config not overwrite it for quickstart.",
        "createdAt" : "2020-02-27T09:58:55Z",
        "updatedAt" : "2020-02-27T09:58:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "64b213bd4a509e36e5f9e58911c8d7c9b325c141",
    "line" : 192,
    "diffHunk" : "@@ -5,124 +5,178 @@ Your First Feature\n ******************\n \n Let's dive into implementing a new feature for our social network app.\n-From that we'll get a better idea of how to build DAML applications using our template.\n+This will give us a better idea how to develop DAML applications using our template.\n \n-Right now our app allows us to add friends to our network, but we can't communicate with them!\n-Let's fix that by adding a private messaging feature.\n-This should allow a user to send messages to a chosen friend, and see all messages that have been sent to them.\n-Of course we must make sure that no one can see messages that were not sent to them.\n-We will see that DAML lets us implement this in a direct and intuitive way.\n+At the moment, our app lets us add friends to our network, but we have no way to communicate with them!\n+Let's fix that by adding a *private messaging* feature.\n+This should let a user send messages to any chosen friend, and see all messages that have been sent to them.\n \n-There are two parts to building the messaging feature: the DAML code and the UI.\n-Let's start with adding to the DAML code, on which we will base our UI changes.\n+This feature should also respect *authorization* and *privacy*.\n+This means:\n+\n+    1. You cannot send a message to someone unless they have added you as a friend.\n+    2. You cannot see a message unless it was sent specifically to you.\n+\n+We will see that DAML lets us implement these guarantees in a direct and intuitive way.\n+\n+There are two parts to building the messaging feature: the DAML model and the UI.\n+As usual, we must start with the DAML model and base our UI changes on top of that.\n \n DAML Changes\n ============\n \n-The DAML code defines the *workflow* of the application.\n-This means: what interactions between users (or *parties*) are permitted by the system?\n-In the context of our feature, the question is: when is a user allowed to message another user?\n+As mentioned in the :doc:`architecture <app-architecture>` section, the DAML code defines the data and *workflow* of the application.\n+The workflow aspect refers to the interactions between parties that are permitted by the system.\n+In the context of a messaging feature, these are essentially the authorization and privacy concerns listed above.\n \n-The approach we'll take is: a user Bob can message another user Alice if Alice has added Bob as a friend.\n-Remember that friendships are single-directional in our app.\n-So Alice adding Bob as a friend means that she gives permission (or *authority*) for Bob to send her a message.\n+For the authorization part, we take the following approach: a user Bob can message another user Alice exactly when Alice has added Bob as a friend.\n+When Alice adds Bob as a friend, she gives permission or *authority* to Bob to send her a message.\n+It is important to remember that friendships can go in a single direction in our app.\n+This means its possible for Bob to message Alice without Alice being able to message him back!\n \n-In DAML this workflow is represented as a new choice on the ``User`` contract.\n+To implement this workflow, we add a new choice to the ``User`` template.\n+Copy and paste the following code at the end of the ``User.daml`` file.\n+(Take care to match the indentation of the ``AddFriend`` choice, as the DAML parser pays attention to it.)\n \n .. literalinclude:: code/daml/User.daml\n   :language: daml\n   :start-after: -- SENDMESSAGE_BEGIN\n   :end-before: -- SENDMESSAGE_END\n \n-Let's break this down.\n-The choice is ``nonconsuming`` because sending a message should not affect the existence of the ``User`` contract.\n-By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n-The parameters to the choice are the sender (the party wishing to talk to the signatory of this ``User`` contract) and the message text.\n-The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n-Finally, the body of the choice makes sure that the sender is a friend of the user and then creates the ``Message`` with the sender, receiver and content.\n+As with the ``AddFriend`` choice, there are a few aspects to note here.\n+\n+    - The choice is ``nonconsuming`` because sending a message should not consume the ``User`` contract.\n+    - By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n+    - The parameters to the choice are the ``sender`` and ``content`` of this message.\n+    - The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n+    - The body of the choice first ensures that the sender is a friend of the user and then creates the ``Message`` contract with the ``receiver`` being the signatory of the ``User`` contract.\n \n-Now let's see the ``Message`` contract template.\n-This is very simple - data and no choices - as well as the ``signatory`` declaration.\n+If you've added the ``SendMessage`` choice correctly, you should an error in the bottom *Problems* pane of Visual Studio Code that ``Message`` is undefined.\n+Let's add the ``Message`` template at the bottom of the same file (copy it from below).\n \n .. literalinclude:: code/daml/User.daml\n   :language: daml\n   :start-after: -- MESSAGE_BEGIN\n   :end-before: -- MESSAGE_END\n \n-Note that we have two signatories on the ``Message`` contract: both the sender and receiver.\n-This enforces the fact that the contract creation (and archival) must be authorized by both parties.\n+This template is very simple: it contains data but no choices.\n+The ``signatory`` clause is the interesting part: both the sender and receiver are signatories on the template.\n+This enforces the fact that creation and archival of ``Message`` contracts must be authorized by both parties.\n \n-Now we've specified the workflow of sending messages, let's integrate the functionality into our app.\n+This completes the workflow for messaging in our app.\n+Now let's integrate this functionality into the UI.\n \n TypeScript Code Generation\n ==========================\n \n-Remember that we interface with our DAML code from the UI components using the generated TypeScript.\n+Remember that we interface with the DAML model from the UI components using generated TypeScript.\n Since we have changed our DAML code, we also need to rerun the TypeScript code generator.\n-Let's do this now by running::\n+Let's do this by running::\n \n   daml build\n   daml codegen ts .daml/dist/create-daml-app-0.1.0.dar -o daml-ts/src\n \n-As the TypeScript code is generated into the separate ``daml-ts`` workspace on which the UI depends, we need to rebuild the workspaces from the root directory using::\n+As the TypeScript code is generated into the separate ``daml-ts`` workspace which the UI depends on, we need to rebuild the workspaces from the root ``create-daml-app`` folder using::\n \n   yarn workspaces run build\n \n-We should now have the updated TypeScript code with equivalents of the ``Message`` template and ``SendMessage`` choice.\n+We should now have an up-to-date TypeScript interface to our DAML model, in particular to the ``Message`` template and ``SendMessage`` choice.\n \n-Now let's implement our messaging feature in the UI!\n+We can now implement our messaging feature in the UI!\n \n Messaging UI\n ============\n \n-Our messaging feature has two parts: a form with inputs for selecting friends and composing the message text, and a \"feed\" of messages that have been sent to you.\n-Both parts will be implemented as React components that render on the main screen.\n+The UI for messaging will consist of a new *Messages* panel in addition to the *Friends* and *Network* panel.\n+This panel will have two parts:\n+\n+    1. A list of messages you've received with their senders.\n+    2. A form with a dropdown menu for friend selection and a text field for composing the message.\n+\n+We will implement each part as a React component, which we'll name ``MessageList`` and ``MessageEdit`` respectively.\n+Let's start with the simpler ``MessageList``.\n \n MessageList Component\n ---------------------\n \n-The MessageList component is fairly straight-forward: it queries all ``Message`` contracts and displays their contents as a list.\n-Here is the code for the entire component.\n+The goal of the ``MessageList`` component is to query all ``Message`` contracts where the ``receiver`` is the current user, and display their contents and senders in a list.\n+The entire component is shown below.\n+You should copy this into a new ``MessageList.tsx`` file in ``ui/src/components``.\n+\n+.. TODO Include file in template with placeholder for component logic.\n \n .. literalinclude:: code/ui-after/MessageList.tsx\n \n-The ``messagesResult`` tracks the state of ``Message`` contracts on the ledger, where we specify no restrictions on the query.\n-We extract the actual message data in ``messages``.\n-Note that for any particular user, the ``Message`` query yields exactly the messages that have been either written by or sent to that user.\n-This is due to how we modelled the signatories and observers in the ``Message`` template, and means we do not risk a privacy breach coming from the application code.\n+First we get the ``username`` of the current user with the ``useParty`` hook.\n+Then ``messagesResult`` gets the stream of all ``Message`` contracts where the ``receiver`` is our ``username``.\n+The streaming aspect means that we don't need to reload the page when new messages come in.\n+We extract the *payload* of every ``Message`` contract (the data as opposed to metadata like the contract ID) in ``messages``.\n+The rest of the component simply constructs a React ``List`` element with an item for each message.\n+\n+There is one important point about privacy here.\n+No matter how we write our ``Message`` query in the UI code, it is impossible to break the privacy rules given by the DAML model.\n+That is, it is impossible to see a ``Message`` contract of which you are not the ``sender`` or the ``receiver`` (the only parties that can observe the contract).\n+This is a major benefit of writing apps on DAML: the burden of ensuring privacy and authorization is confined to the DAML model.\n \n-Message Edit Component\n-----------------------\n+MessageEdit Component\n+---------------------\n+\n+Next we need the ``MessageEdit`` component to compose and send messages to selected friends.\n+Again we show the entire component here; you should copy this into a new file in ``ui/src/components``.\n \n-In addition to the feed component, we need a component for composing messages and sending them using the appropriate choice on the ``User`` contract.\n+.. TODO Include file in template with placeholder for component logic.\n \n .. literalinclude:: code/ui-after/MessageEdit.tsx\n \n-In this component we use React hooks to track the current choice of message receiver and content.\n-The ``exerciseSendMessage`` hook gives us a function to exercise the appropriate choice on our ``User``.\n-We wrap this in the ``sendMessage`` function to report potential errors to the user, and then the ``submitMessage`` function, called when the \"Send\" button is clicked.\n-The ``isSubmitting`` state is used to ensure that message requests are processed one at a time.\n-The result of each send is a new ``Message`` contract created on the ledger.\n+You will first notice a ``Props`` type near the top of the file with a single ``friends`` field.\n+A *prop* in React is an input to a component; in this case a list of users from which to select the message receiver.\n+The prop will be passed down from the ``MainView`` component, reusing the work required to query users from the ledger.\n+You can see this ``friends`` field bound at the start of the ``MessageEdit`` component.\n+\n+We use the React ``useState`` hook to get and set the current choices of message ``receiver`` and ``content``.\n+The DAML-specific ``useExerciseByKey`` hook gives us a function to both look up a ``User`` contract and exercise the ``SendMessage`` choice on it.\n+The call to ``exerciseSendMessage`` in ``sendMessage`` looks up the ``User`` contract with the receiver's username and exercises ``SendMessage`` with the appropriate arguments.\n+The ``sendMessage`` wrapper reports potential errors to the user, and ``submitMessage`` additionally uses the ``isSubmitting`` state to ensure message requests are processed one at a time.\n+The result of a successful call to ``submitMessage`` is a new ``Message`` contract created on the ledger.\n+\n+The return value of this component is the React ``Form`` element.\n+This contains a dropdown menu to select a receiver from the ``friends``, a text field for the message content, and a *Send* button which triggers ``submitMessage``.\n \n-View Component\n---------------------\n+There is again an important point here, in this case about how *authorization* is enforced.\n+Due to the logic of the ``SendMessage`` choice, it is impossible to send a message to a user who has not added you as a friend (even if you could somehow access their ``User`` contract).\n+The assertion that ``sender `elem` friends`` in ``SendMessage`` ensures this: no mistake or malice by the UI programmer could breach this."
  },
  {
    "id" : "18e9458c-b9d0-40bb-9ea3-fbe644d02525",
    "prId" : 4619,
    "comments" : [
      {
        "id" : "28033ebd-6e4e-4304-881d-de343a8c9109",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n---------------------\r\n```",
        "createdAt" : "2020-02-20T12:42:52Z",
        "updatedAt" : "2020-02-20T12:47:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39002dbbc737233157dec467b25f23c6933c9161",
    "line" : null,
    "diffHunk" : "@@ -78,15 +78,17 @@ Messaging UI\n Our messaging feature has two parts: a form with inputs for selecting friends and composing the message text, and a \"feed\" of messages that have been sent to you.\n Both parts will be implemented as React components that render on the main screen.\n \n-Feed Component\n+MessageList Component\n --------------"
  },
  {
    "id" : "f94a3fe8-681e-4e1f-bf46-e5edd1e33c4b",
    "prId" : 4548,
    "comments" : [
      {
        "id" : "ae7ea7f7-8b1a-416f-bac6-fb5b1ee4795a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We've decided to drop the \"remove friends\" feature.",
        "createdAt" : "2020-02-17T17:01:14Z",
        "updatedAt" : "2020-02-17T17:09:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 10,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Your First Feature: Messaging Friends\n+*************************************\n+\n+Let's dive into implementing a feature for our social network app.\n+From that we'll get a better idea of how to build DAML applications using our template.\n+\n+Right now our app allows us to add and remove friends, but we can't communicate with them!"
  },
  {
    "id" : "8db17af2-a47e-4196-8c0a-95eba3d8a141",
    "prId" : 4548,
    "comments" : [
      {
        "id" : "0a26b9d6-c1b5-4d6e-8e79-9c06526bd980",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We only want to message single parties.",
        "createdAt" : "2020-02-17T17:02:15Z",
        "updatedAt" : "2020-02-17T17:09:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 12,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Your First Feature: Messaging Friends\n+*************************************\n+\n+Let's dive into implementing a feature for our social network app.\n+From that we'll get a better idea of how to build DAML applications using our template.\n+\n+Right now our app allows us to add and remove friends, but we can't communicate with them!\n+Let's fix that by adding a private messaging feature.\n+We will allow a user to send messages to a number of friends at once, and see all the messages that have been sent to them."
  },
  {
    "id" : "8185ce2d-357a-4924-b388-420c6aa0328c",
    "prId" : 4548,
    "comments" : [
      {
        "id" : "a54afb2c-d183-4532-83fa-fd0e9f79091b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nThe parameters to the choice are the sender (the party wishing to talk to the signatory of this ``User`` contract) and the message text.\r\n```\r\nOtherwise, we'll have two occurrences of the word \"next\" next to each other.",
        "createdAt" : "2020-02-17T17:04:40Z",
        "updatedAt" : "2020-02-17T17:09:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 40,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Your First Feature: Messaging Friends\n+*************************************\n+\n+Let's dive into implementing a feature for our social network app.\n+From that we'll get a better idea of how to build DAML applications using our template.\n+\n+Right now our app allows us to add and remove friends, but we can't communicate with them!\n+Let's fix that by adding a private messaging feature.\n+We will allow a user to send messages to a number of friends at once, and see all the messages that have been sent to them.\n+Of course we must make sure that no one can see messages that were not sent to them.\n+We will see that DAML lets us implement this in a direct and intuitive way.\n+\n+There are two parts to building the messaging feature: the DAML code and the UI.\n+Let's start with adding to the DAML code, on which we will base our UI changes.\n+\n+DAML Changes\n+============\n+\n+The DAML code defines the *workflow* of the application.\n+This means: what interactions between users (or *parties*) are permitted by the system?\n+In the context of our feature, the question is: when is a user allowed to message another user?\n+\n+The approach we'll take is: a user Bob can message another user Alice if Alice has added Bob as a friend.\n+Remember that friendships are single-directional in our app.\n+So Alice adding Bob as a friend means that she gives permission (or *authority*) for Bob to send her a message.\n+\n+In DAML this workflow is represented as a new choice on the ``User`` contract.\n+\n+.. literalinclude:: code/daml/User.daml\n+  :language: daml\n+  :start-after: -- SENDMESSAGE_BEGIN\n+  :end-before: -- SENDMESSAGE_END\n+\n+Let's break this down.\n+The choice is ``nonconsuming`` because sending a message should not affect the existence of the ``User`` contract.\n+By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n+Next, the parameters to the choice are the sender (the party wishing to talk to the signatory of this ``User`` contract) and the message text."
  },
  {
    "id" : "1574d63e-6410-4705-87f1-ac1fb891be9d",
    "prId" : 4548,
    "comments" : [
      {
        "id" : "e38621ab-a6d8-4ec5-8781-31a20f57119e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That is not true. There's also divulgence. Let's please add a check that the sender is indeed a friend.",
        "createdAt" : "2020-02-17T17:05:53Z",
        "updatedAt" : "2020-02-17T17:09:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 45,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Your First Feature: Messaging Friends\n+*************************************\n+\n+Let's dive into implementing a feature for our social network app.\n+From that we'll get a better idea of how to build DAML applications using our template.\n+\n+Right now our app allows us to add and remove friends, but we can't communicate with them!\n+Let's fix that by adding a private messaging feature.\n+We will allow a user to send messages to a number of friends at once, and see all the messages that have been sent to them.\n+Of course we must make sure that no one can see messages that were not sent to them.\n+We will see that DAML lets us implement this in a direct and intuitive way.\n+\n+There are two parts to building the messaging feature: the DAML code and the UI.\n+Let's start with adding to the DAML code, on which we will base our UI changes.\n+\n+DAML Changes\n+============\n+\n+The DAML code defines the *workflow* of the application.\n+This means: what interactions between users (or *parties*) are permitted by the system?\n+In the context of our feature, the question is: when is a user allowed to message another user?\n+\n+The approach we'll take is: a user Bob can message another user Alice if Alice has added Bob as a friend.\n+Remember that friendships are single-directional in our app.\n+So Alice adding Bob as a friend means that she gives permission (or *authority*) for Bob to send her a message.\n+\n+In DAML this workflow is represented as a new choice on the ``User`` contract.\n+\n+.. literalinclude:: code/daml/User.daml\n+  :language: daml\n+  :start-after: -- SENDMESSAGE_BEGIN\n+  :end-before: -- SENDMESSAGE_END\n+\n+Let's break this down.\n+The choice is ``nonconsuming`` because sending a message should not affect the existence of the ``User`` contract.\n+By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n+Next, the parameters to the choice are the sender (the party wishing to talk to the signatory of this ``User`` contract) and the message text.\n+The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n+Finally, the body of the choice simply creates the new ``Message`` with the sender, receiver and content.\n+\n+Note that there is no explicit check in the choice that the ``sender`` is a friend of the user.\n+This is because the ``User`` contract is only ever visible to friends (the observers of the contract)."
  },
  {
    "id" : "f99272b6-247c-4cef-9e83-d6aa0a3f309c",
    "prId" : 4548,
    "comments" : [
      {
        "id" : "f0183db8-72db-4bf2-b480-beafdf4c98cd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That is technically not true. This boolean flag is actually completely broken. Let's correct this place once the flag does something useful.",
        "createdAt" : "2020-02-17T17:08:53Z",
        "updatedAt" : "2020-02-17T17:09:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 104,
    "diffHunk" : "@@ -0,0 +1,143 @@\n+.. Copyright (c) 2020 The DAML Authors. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Your First Feature: Messaging Friends\n+*************************************\n+\n+Let's dive into implementing a feature for our social network app.\n+From that we'll get a better idea of how to build DAML applications using our template.\n+\n+Right now our app allows us to add and remove friends, but we can't communicate with them!\n+Let's fix that by adding a private messaging feature.\n+We will allow a user to send messages to a number of friends at once, and see all the messages that have been sent to them.\n+Of course we must make sure that no one can see messages that were not sent to them.\n+We will see that DAML lets us implement this in a direct and intuitive way.\n+\n+There are two parts to building the messaging feature: the DAML code and the UI.\n+Let's start with adding to the DAML code, on which we will base our UI changes.\n+\n+DAML Changes\n+============\n+\n+The DAML code defines the *workflow* of the application.\n+This means: what interactions between users (or *parties*) are permitted by the system?\n+In the context of our feature, the question is: when is a user allowed to message another user?\n+\n+The approach we'll take is: a user Bob can message another user Alice if Alice has added Bob as a friend.\n+Remember that friendships are single-directional in our app.\n+So Alice adding Bob as a friend means that she gives permission (or *authority*) for Bob to send her a message.\n+\n+In DAML this workflow is represented as a new choice on the ``User`` contract.\n+\n+.. literalinclude:: code/daml/User.daml\n+  :language: daml\n+  :start-after: -- SENDMESSAGE_BEGIN\n+  :end-before: -- SENDMESSAGE_END\n+\n+Let's break this down.\n+The choice is ``nonconsuming`` because sending a message should not affect the existence of the ``User`` contract.\n+By convention, the choice returns the ``ContractId`` of the resulting ``Message`` contract (which we'll show next).\n+Next, the parameters to the choice are the sender (the party wishing to talk to the signatory of this ``User`` contract) and the message text.\n+The ``controller`` clause suggests that it is the ``sender`` who can exercise the choice.\n+Finally, the body of the choice simply creates the new ``Message`` with the sender, receiver and content.\n+\n+Note that there is no explicit check in the choice that the ``sender`` is a friend of the user.\n+This is because the ``User`` contract is only ever visible to friends (the observers of the contract).\n+\n+Now let's see the ``Message`` contract template.\n+This is very simple - data and no choices - as well as the ``signatory`` declaration.\n+\n+.. literalinclude:: code/daml/User.daml\n+  :language: daml\n+  :start-after: -- MESSAGE_BEGIN\n+  :end-before: -- MESSAGE_END\n+\n+Note that we have two signatories on the ``Message`` contract: both the sender and receiver.\n+This enforces the fact that the contract creation (and archival) must be authorized by both parties.\n+\n+Now we've specified the workflow of sending messages, let's integrate the functionality into our app.\n+\n+TypeScript Code Generation\n+==========================\n+\n+Remember that we interface with our DAML code from the UI components using the generated TypeScript.\n+Since we have changed our DAML code, we also need to rerun the TypeScript code generator.\n+Let's do this now by running::\n+\n+  daml build\n+  daml codegen ts .daml/dist/create-daml-app-0.1.0.dar -o daml-ts/src\n+\n+As the TypeScript code is generated into the separate ``daml-ts`` workspace on which the UI depends, we need to rebuild the workspaces from the root directory using::\n+\n+  yarn workspaces run build\n+\n+We should now have the updated TypeScript code with equivalents of the ``Message`` template and ``SendMessage`` choice.\n+\n+Now let's implement our messaging feature in the UI!\n+\n+Messaging UI\n+============\n+\n+Our messaging feature has two parts: a form with inputs for selecting friends and composing the message text, and a \"feed\" of messages that have been sent to you.\n+Both parts will be implemented as React components that render on the main screen.\n+\n+Feed Component\n+--------------\n+\n+The feed component is fairly straight-forward: it queries all ``Message`` contracts and displays their contents as a list.\n+Here is the code for the entire component.\n+\n+.. literalinclude:: code/ui-after/Feed.tsx\n+\n+The key point here is that for any particular user, the ``Message`` query yields exactly the messages that have been either written by or sent to that user.\n+This is due to how we modelled the signatories and observers in the ``Message`` template, and means we do not risk a privacy breach coming from the application code.\n+\n+Message Edit Component\n+----------------------\n+\n+In addition to the feed component, we need a component for composing messages and sending them using the appropriate choice on the ``User`` contract.\n+\n+.. literalinclude:: code/ui-after/MessageEdit.tsx\n+\n+In this component we use React hooks for the message content and receiver.\n+You can see these used in the ``submitMessage`` function, called when the \"Send\" button is clicked.\n+The ``isSubmitting`` state is used to ensure that message requests are processed one at a time."
  }
]