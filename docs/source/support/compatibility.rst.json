[
  {
    "id" : "3ec4846d-1214-45f2-ae53-d9118bc8671c",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "2d5c08fa-99e8-4e5f-8981-04733a6b46a7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can’t figure out how to comment on the picture but you put the Java and the JS bindings at the same level both of them going through the runtime components and APIs. I assume you intentionally ignore the fact that this isn’t quite true for the Java bindings?",
        "createdAt" : "2020-09-22T10:40:09Z",
        "updatedAt" : "2020-09-24T12:12:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6697003-47e3-4ace-9665-2dfde9cb0d5f",
        "parentId" : "2d5c08fa-99e8-4e5f-8981-04733a6b46a7",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Yes. Libraries have arrows to both Runtime Components and Participant Server. I'm not saying all Libraries go to both, but some go to one, some to the other. But it never goes the other way around so Libraries are strictly \"above\" Runtime Components.",
        "createdAt" : "2020-09-22T11:42:52Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : 1,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved."
  },
  {
    "id" : "bf10d322-077e-421f-8ca9-d97acc05e284",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "253bc1cb-ae6b-4231-9970-c508bee5a541",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe that’s just me but “sideways compatibility guarantee” sounds very weird. Maybe just say “other”?",
        "createdAt" : "2020-09-22T10:41:11Z",
        "updatedAt" : "2020-09-24T12:12:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59ae5af6-a419-4a22-b0f2-636b3f036f86",
        "parentId" : "253bc1cb-ae6b-4231-9970-c508bee5a541",
        "author" : {
          "login" : "derekhenninger",
          "name" : "Derek Henninger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/682497?v=4"
        },
        "body" : "I agree. I've never heard of \"sideways compatibility\". I'd suggest that \"forward and backward compatibility guarantees\" is sufficient.",
        "createdAt" : "2020-09-22T11:34:49Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "derekhenninger",
          "name" : "Derek Henninger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/682497?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d8648250-c189-49a2-ba45-392954fe45e9",
        "parentId" : "253bc1cb-ae6b-4231-9970-c508bee5a541",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Removed.",
        "createdAt" : "2020-09-22T11:55:25Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward, backward, and sideways compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together."
  },
  {
    "id" : "0c5f09e8-f183-4e53-b2d5-033779382ec5",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "7c9aaa5b-e2c5-4a51-9ce5-3ffdab7faf27",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this true? vmbc, fabric, … all have versions that are different from the ledger API version. I think what you want to say is that the SDK including things built as part of the SDK build process (e.g. daml on sql) have the same version as the ledger API.",
        "createdAt" : "2020-09-22T10:44:35Z",
        "updatedAt" : "2020-09-24T12:12:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3ce76ea4-098a-4e09-820a-ede2c04375fc",
        "parentId" : "7c9aaa5b-e2c5-4a51-9ce5-3ffdab7faf27",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "No, not true. This originally read \"Integration Components\", not \"DAML Drivers\" and I didn't adjust carefully enough, thanks.",
        "createdAt" : "2020-09-22T11:44:27Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90f07a60-3e43-490d-80e1-a3e766959101",
        "parentId" : "7c9aaa5b-e2c5-4a51-9ce5-3ffdab7faf27",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Improved.",
        "createdAt" : "2020-09-22T11:55:33Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward, backward, and sideways compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\n+\n+Portability\n+\n+  A DAML application should not depend on the underlying Database or DLT.\n+\n+Stability\n+\n+  A DAML application should be able to operate without significant change over long periods of time.\n+\n+Upgradeability\n+\n+  Application Developers should be able to update their developer tools, and Ledger Operators should be able to upgrade DAML Network or Participant Nodes seamlessly to stay up to date with the latest features and fixes.\n+\n+Ledger API Compatibility\n+------------------------\n+\n+Portability and Stability of DAML Applications are achieved by intermediating through the Ledger API. As per :ref:`versioning`, and :ref:`ecosystem-architecture`, the Ledger API is independently semantically versioned, and the compatibility guarantees derived from that semantic versioning extend to the entire semantics of the API, including the behavior of DAML Packages on the Ledger. Since all interaction with a DAML Ledger happens through the DAML Ledger API, a DAML Application is guaranteed to work as long as the Participant Node exposes a compatible Ledger API version.\n+\n+Specifically, if a DAML Application is built against Ledger API version X.Y.Z and a Participant Node exposes Ledger API version X.Y2.Z2, the application is guaranteed to work as long as Y2.Z2 >= Y.Z.\n+\n+Currently, the Ledger API version is the same as the version of the DAML Drivers, as everything gets released together as per :doc:`releases`, and there has been no need for the versions to diverge yet. This will likely change at the latest when one part of the ecosystem moves to version 2.X."
  },
  {
    "id" : "79a86da6-0985-4762-87c0-8d8d7ff528d1",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "cfc2de27-2229-4501-bb2a-6ba746e64e47",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nAs long as a major Ledger API version is supported, there will be supported versions of SDK, Runtime Components, and Libraries able to target this version. This has the obvious caveat that new features may not be available with old Ledger API versions.\r\n```\r\nassuming this refers to “the major ledger API version”. My understanding so far was also that we only need to support targetting the _latest_ version in that major version series. Is that correct? If so, I think we should spell it out.",
        "createdAt" : "2020-09-22T10:51:12Z",
        "updatedAt" : "2020-09-24T12:12:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "31939263-dfe8-4950-b5f6-aa6e7ff2bbf9",
        "parentId" : "cfc2de27-2229-4501-bb2a-6ba746e64e47",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "No, that's not correct. Assume someone is on a Ledger exposing Ledger API Version 1.4, and they encounter a bug in the SDK forcing them to upgrade to SDK or Runtime Components 1.6. They still need to be able to maintain their app against Ledger API Version 1.4.",
        "createdAt" : "2020-09-22T11:46:25Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6055fb44-c4e4-47fc-9a64-c782a9a3989e",
        "parentId" : "cfc2de27-2229-4501-bb2a-6ba746e64e47",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "So SDK 1.6 needs to support Ledger API 1.4, 1.5 and 1.6? Is there such a thing as a bugfix release for an API? (there obviously is for an implementation of that API but that’s a separate topic). I’d like to avoid having to support old bugs in the API that we fixed in newer patch versions but maybe that’s just not a topic that is meaningful for an API and only make sense in the context of an implementation.",
        "createdAt" : "2020-09-22T18:23:30Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f19e1e6f-fbde-4b5b-a88e-c5307bff6cba",
        "parentId" : "cfc2de27-2229-4501-bb2a-6ba746e64e47",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "> SDK 1.6 needs to support Ledger API 1.4, 1.5 and 1.6\r\nYes, in the sense that you need to be able to test your application against those (ie something akin to `platform-version` called `ledger-api-version`. ",
        "createdAt" : "2020-09-23T07:38:53Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1053e72c-d266-40e8-9f55-bc140f755a5c",
        "parentId" : "cfc2de27-2229-4501-bb2a-6ba746e64e47",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "> I’d like to avoid having to support old bugs in the API that we fixed in newer patch versions but maybe that’s just not a topic that is meaningful for an API and only make sense in the context of an implementation\r\n\r\nFully agree as per your Fabric example, and I also can't see what an API patch release would be.",
        "createdAt" : "2020-09-23T07:40:23Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eff7151c-caad-496a-837d-6ac2f6025cb7",
        "parentId" : "cfc2de27-2229-4501-bb2a-6ba746e64e47",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Alright, then I would suggest to ignore my comments on bugfixes until we can come up with a meaningful example where this matters for an API.",
        "createdAt" : "2020-09-23T08:37:12Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward, backward, and sideways compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\n+\n+Portability\n+\n+  A DAML application should not depend on the underlying Database or DLT.\n+\n+Stability\n+\n+  A DAML application should be able to operate without significant change over long periods of time.\n+\n+Upgradeability\n+\n+  Application Developers should be able to update their developer tools, and Ledger Operators should be able to upgrade DAML Network or Participant Nodes seamlessly to stay up to date with the latest features and fixes.\n+\n+Ledger API Compatibility\n+------------------------\n+\n+Portability and Stability of DAML Applications are achieved by intermediating through the Ledger API. As per :ref:`versioning`, and :ref:`ecosystem-architecture`, the Ledger API is independently semantically versioned, and the compatibility guarantees derived from that semantic versioning extend to the entire semantics of the API, including the behavior of DAML Packages on the Ledger. Since all interaction with a DAML Ledger happens through the DAML Ledger API, a DAML Application is guaranteed to work as long as the Participant Node exposes a compatible Ledger API version.\n+\n+Specifically, if a DAML Application is built against Ledger API version X.Y.Z and a Participant Node exposes Ledger API version X.Y2.Z2, the application is guaranteed to work as long as Y2.Z2 >= Y.Z.\n+\n+Currently, the Ledger API version is the same as the version of the DAML Drivers, as everything gets released together as per :doc:`releases`, and there has been no need for the versions to diverge yet. This will likely change at the latest when one part of the ecosystem moves to version 2.X.\n+\n+As a concrete example, DAML for Postgres 1.4.0 exposes Ledger API version 1.4.0 and DAML for VMware Blockchain 1.0 exposes Ledger API version 1.6.0. So any application that runs on DAML for Postgres 1.4.0 will also run on DAML for VMware Blockchain 1.0, thus demonstrating both portability and stability.\n+\n+Ledger API Support\n+------------------\n+\n+Major Ledger API versions behave like stable features in :doc:`status-definitions`. They are supported from the time they are first released as \"stable\" to the point where they are removed from DAML Drivers and SDK following a 12 month deprecation cycle. The earliest point a major Ledger API version can be deprecated is with the release of the next major version. The earliest it can be removed, is 12 months later with a major version release of DAML Drivers and Participant Nodes.\n+\n+Other than for hotfix releases, new releases of the DAML Drivers and Participant Nodes will only support the latest minor/patch version of each major Ledger API version.\n+\n+Network Upgradeability\n+----------------------\n+\n+Upgrades from one minor version of a stable DAML Network or Participant nodes are data preserving and have Ledger API backward compatibility as major Ledger API versions may only be removed in major versions of DAML Drivers or Participant Nodes. As an example, from an application standpoint, the only effect of upgrading DAML for Postgres 1.4.0 to DAML for Postgres 1.6.0 is an uptick in the Ledger API version. There may be significant changes to components or database schemas, but these are not public APIs, and the migrations happen automatically. \n+\n+SDK, Runtime Component, and Library Compatibility\n+-------------------------------------------------\n+\n+As long as a major Ledger API version is supported, there will be supported versions of SDK, Runtime Components, and Libraries able to target those versions. This has the obvious caveat that new features may not be available with old Ledger API versions."
  },
  {
    "id" : "6461be51-6a78-4645-946e-63c664a25424",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "62e7c212-947b-4fe8-be32-0c3681e15ce6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Similar comment as above, this should spell out whether you have to upgrade your DAML network to the latest version that supports this major version or whether you can leave your network untouched. The latter means that we can not rely on bugfixes. We hit this issue before so I think this is quite important:\r\n\r\nWhen we split out stable types into separate LF packages in the compiler, we discovered a bug in package distribution in kvutils. We fixed that bug and went on. However, it now meant that fabric which was stuck on a version that did not include the fix (but was unchanged from a ledger API pov) no longer handled packages produced by newer compilers correctly even if you selected an older LF version.",
        "createdAt" : "2020-09-22T10:55:51Z",
        "updatedAt" : "2020-09-24T12:12:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5512be1b-41a5-42f8-8ba5-a164e54e2ec8",
        "parentId" : "62e7c212-947b-4fe8-be32-0c3681e15ce6",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "That Fabric had a buggy implementation of the Ledger API. You'd need to upgrade your network in that case.\r\n",
        "createdAt" : "2020-09-22T12:04:22Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward, backward, and sideways compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\n+\n+Portability\n+\n+  A DAML application should not depend on the underlying Database or DLT.\n+\n+Stability\n+\n+  A DAML application should be able to operate without significant change over long periods of time.\n+\n+Upgradeability\n+\n+  Application Developers should be able to update their developer tools, and Ledger Operators should be able to upgrade DAML Network or Participant Nodes seamlessly to stay up to date with the latest features and fixes.\n+\n+Ledger API Compatibility\n+------------------------\n+\n+Portability and Stability of DAML Applications are achieved by intermediating through the Ledger API. As per :ref:`versioning`, and :ref:`ecosystem-architecture`, the Ledger API is independently semantically versioned, and the compatibility guarantees derived from that semantic versioning extend to the entire semantics of the API, including the behavior of DAML Packages on the Ledger. Since all interaction with a DAML Ledger happens through the DAML Ledger API, a DAML Application is guaranteed to work as long as the Participant Node exposes a compatible Ledger API version.\n+\n+Specifically, if a DAML Application is built against Ledger API version X.Y.Z and a Participant Node exposes Ledger API version X.Y2.Z2, the application is guaranteed to work as long as Y2.Z2 >= Y.Z.\n+\n+Currently, the Ledger API version is the same as the version of the DAML Drivers, as everything gets released together as per :doc:`releases`, and there has been no need for the versions to diverge yet. This will likely change at the latest when one part of the ecosystem moves to version 2.X.\n+\n+As a concrete example, DAML for Postgres 1.4.0 exposes Ledger API version 1.4.0 and DAML for VMware Blockchain 1.0 exposes Ledger API version 1.6.0. So any application that runs on DAML for Postgres 1.4.0 will also run on DAML for VMware Blockchain 1.0, thus demonstrating both portability and stability.\n+\n+Ledger API Support\n+------------------\n+\n+Major Ledger API versions behave like stable features in :doc:`status-definitions`. They are supported from the time they are first released as \"stable\" to the point where they are removed from DAML Drivers and SDK following a 12 month deprecation cycle. The earliest point a major Ledger API version can be deprecated is with the release of the next major version. The earliest it can be removed, is 12 months later with a major version release of DAML Drivers and Participant Nodes.\n+\n+Other than for hotfix releases, new releases of the DAML Drivers and Participant Nodes will only support the latest minor/patch version of each major Ledger API version.\n+\n+Network Upgradeability\n+----------------------\n+\n+Upgrades from one minor version of a stable DAML Network or Participant nodes are data preserving and have Ledger API backward compatibility as major Ledger API versions may only be removed in major versions of DAML Drivers or Participant Nodes. As an example, from an application standpoint, the only effect of upgrading DAML for Postgres 1.4.0 to DAML for Postgres 1.6.0 is an uptick in the Ledger API version. There may be significant changes to components or database schemas, but these are not public APIs, and the migrations happen automatically. \n+\n+SDK, Runtime Component, and Library Compatibility\n+-------------------------------------------------\n+\n+As long as a major Ledger API version is supported, there will be supported versions of SDK, Runtime Components, and Libraries able to target those versions. This has the obvious caveat that new features may not be available with old Ledger API versions.\n+\n+For example, an application built and compiled with SDK, Libraries and Runtime Components 1.4.0 against Ledger API 1.4.0, it still be compiled using SDK 1.6.0 and be run against Ledger API 1.4.0 using 1.6.0 libraries and runtime components. \n+\n+As a result we can make this statement:\n+\n+**An application built using SDK, Libraries and Runtime Components U.V.W against Ledger API X.Y.Z can be maintained using any SDK, Library amd Runtime Components version U2.V2.W2 >= U.V.W as long as Ledger API major version X is still supported at the time of release of U2.V2.W2, and run against any DAML Network with Participant Nodes exposing Ledger API X.Y2.Z2 >= X.Y.Z.**"
  },
  {
    "id" : "b165e614-e60e-4015-9ccb-3101b9c08c0a",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "29bfb558-e12d-41de-9e52-b35105c96a66",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nThe DAML Ecosystem offers a number of forward and backward compatibility guarantees aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\r\n```",
        "createdAt" : "2020-09-22T14:32:17Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward and backward compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together."
  },
  {
    "id" : "25b82658-46a7-4119-888e-f0a09514167e",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "cc87136c-73a9-4923-b1de-8365fb90a397",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I would qualify where the _underlying Database or DLT_ is being used.\r\n```suggestion\r\n  A DAML application should not depend on the underlying Database or DLT used by a DAML Ledger.\r\n```",
        "createdAt" : "2020-09-22T14:33:34Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward and backward compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\n+\n+Portability\n+\n+  A DAML application should not depend on the underlying Database or DLT."
  },
  {
    "id" : "e5775576-345f-42da-b34e-2953c7aa52a6",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "66585e5a-b2ec-403e-b418-741e2ac6b88d",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This is too vague for me. The DAML application surely will operate just fine over long periods of time if the ledger isn't being upgraded, etc...",
        "createdAt" : "2020-09-22T14:35:17Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e3b9f1fd-49cb-4aee-b576-3bde4590c51c",
        "parentId" : "66585e5a-b2ec-403e-b418-741e2ac6b88d",
        "author" : {
          "login" : "cmblitz",
          "name" : "Craig Blitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/25983230?u=e6f630d7f23ad7acec28d2c16a1318a3b134048c&v=4"
        },
        "body" : "Agreed.  This should be removed, rewritten in terms of something being upgraded, or written in terms of support guarantees.",
        "createdAt" : "2020-09-22T16:47:28Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "cmblitz",
          "name" : "Craig Blitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/25983230?u=e6f630d7f23ad7acec28d2c16a1318a3b134048c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3ddf8bf6-064f-4a6a-a6a1-b63900df2f9b",
        "parentId" : "66585e5a-b2ec-403e-b418-741e2ac6b88d",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Thanks for the feedbacks on this page. I've reworked it in various ways. Could you rereview, please?",
        "createdAt" : "2020-09-23T08:04:07Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward and backward compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\n+\n+Portability\n+\n+  A DAML application should not depend on the underlying Database or DLT.\n+\n+Stability\n+\n+  A DAML application should be able to operate without significant change over long periods of time."
  },
  {
    "id" : "05e08dbc-1373-49da-8738-9f2e34d4a4ff",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "e9dd20c0-6edd-4e1a-8b1e-002fce935422",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "> Upgrades from one minor version of a stable DAML Network or Participant nodes are data preserving and have Ledger API backward compatibility as major Ledger API versions may only be removed in major versions of DAML Drivers or Participant Nodes.\r\n\r\nThis sentence reads a bit awkward to me.\r\n_Upgrades from one minor version_ ... to which version?\r\nWhat's a _stable_ DAML Network?\r\nShould it say _DAML Network o**f** Participant nodes_?\r\n\r\n---\r\n> There may be significant changes to components or database schemas, but these are not public APIs, and the migrations happen automatically. \r\n\r\nFrom an application standpoint, it is of no importance whether the migrations happen automatically or somebody massages every single database entry by hand. I would remove `, and the migrations happen automatically`.",
        "createdAt" : "2020-09-22T14:39:25Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5aceebd1-40ca-403c-9d74-90a3c61ef8d2",
        "parentId" : "e9dd20c0-6edd-4e1a-8b1e-002fce935422",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "See above. Reworked this page.",
        "createdAt" : "2020-09-23T08:04:19Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward and backward compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\n+\n+Portability\n+\n+  A DAML application should not depend on the underlying Database or DLT.\n+\n+Stability\n+\n+  A DAML application should be able to operate without significant change over long periods of time.\n+\n+Upgradeability\n+\n+  Application Developers should be able to update their developer tools, and Ledger Operators should be able to upgrade DAML Network or Participant Nodes seamlessly to stay up to date with the latest features and fixes.\n+\n+Ledger API Compatibility\n+------------------------\n+\n+Portability and Stability of DAML Applications are achieved by intermediating through the Ledger API. As per :ref:`versioning`, and :ref:`ecosystem-architecture`, the Ledger API is independently semantically versioned, and the compatibility guarantees derived from that semantic versioning extend to the entire semantics of the API, including the behavior of DAML Packages on the Ledger. Since all interaction with a DAML Ledger happens through the DAML Ledger API, a DAML Application is guaranteed to work as long as the Participant Node exposes a compatible Ledger API version.\n+\n+Specifically, if a DAML Application is built against Ledger API version X.Y.Z and a Participant Node exposes Ledger API version X.Y2.Z2, the application is guaranteed to work as long as Y2.Z2 >= Y.Z.\n+\n+Currently, the latest Ledger API version is the same as the latest SDK, as everything gets released together as per :doc:`releases`, and there has been no need for the versions to diverge yet. This will likely change at the latest when one part of the ecosystem moves to version 2.X. Every DAML Driver advertises which Ledger API version it exposes.\n+\n+As a concrete example, DAML for Postgres 1.4.0 exposes Ledger API version 1.4.0 and DAML for VMware Blockchain 1.0 exposes Ledger API version 1.6.0. So any application that runs on DAML for Postgres 1.4.0 will also run on DAML for VMware Blockchain 1.0, thus demonstrating both portability and stability.\n+\n+Ledger API Support\n+------------------\n+\n+Major Ledger API versions behave like stable features in :doc:`status-definitions`. They are supported from the time they are first released as \"stable\" to the point where they are removed from DAML Drivers and SDK following a 12 month deprecation cycle. The earliest point a major Ledger API version can be deprecated is with the release of the next major version. The earliest it can be removed, is 12 months later with a major version release of DAML Drivers and Participant Nodes.\n+\n+Other than for hotfix releases, new releases of the DAML Drivers and Participant Nodes will only support the latest minor/patch version of each major Ledger API version.\n+\n+Network Upgradeability\n+----------------------\n+\n+Upgrades from one minor version of a stable DAML Network or Participant nodes are data preserving and have Ledger API backward compatibility as major Ledger API versions may only be removed in major versions of DAML Drivers or Participant Nodes. As an example, from an application standpoint, the only effect of upgrading DAML for Postgres 1.4.0 to DAML for Postgres 1.6.0 is an uptick in the Ledger API version. There may be significant changes to components or database schemas, but these are not public APIs, and the migrations happen automatically. "
  },
  {
    "id" : "9835c60b-cff0-4fd2-b5e2-0a55e9cbdfe2",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "ca73337a-d4c0-4807-899c-c4ac4fc7fc9c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nFor example, an application built and compiled with SDK, Libraries and Runtime Components 1.4.0 against Ledger API 1.4.0, it still can be compiled using SDK 1.6.0 and can be run against Ledger API 1.4.0 using 1.6.0 libraries and runtime components. \r\n```",
        "createdAt" : "2020-09-22T15:26:39Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+Portability, Compatibility, and Support Durations\n+=================================================\n+\n+The DAML Ecosystem offers a number of forward and backward compatibility guarantee aiming to give the Ecosystem as a whole the following properties. See :ref:`ecosystem-architecture` for the terms used here and how they fit together.\n+\n+Portability\n+\n+  A DAML application should not depend on the underlying Database or DLT.\n+\n+Stability\n+\n+  A DAML application should be able to operate without significant change over long periods of time.\n+\n+Upgradeability\n+\n+  Application Developers should be able to update their developer tools, and Ledger Operators should be able to upgrade DAML Network or Participant Nodes seamlessly to stay up to date with the latest features and fixes.\n+\n+Ledger API Compatibility\n+------------------------\n+\n+Portability and Stability of DAML Applications are achieved by intermediating through the Ledger API. As per :ref:`versioning`, and :ref:`ecosystem-architecture`, the Ledger API is independently semantically versioned, and the compatibility guarantees derived from that semantic versioning extend to the entire semantics of the API, including the behavior of DAML Packages on the Ledger. Since all interaction with a DAML Ledger happens through the DAML Ledger API, a DAML Application is guaranteed to work as long as the Participant Node exposes a compatible Ledger API version.\n+\n+Specifically, if a DAML Application is built against Ledger API version X.Y.Z and a Participant Node exposes Ledger API version X.Y2.Z2, the application is guaranteed to work as long as Y2.Z2 >= Y.Z.\n+\n+Currently, the latest Ledger API version is the same as the latest SDK, as everything gets released together as per :doc:`releases`, and there has been no need for the versions to diverge yet. This will likely change at the latest when one part of the ecosystem moves to version 2.X. Every DAML Driver advertises which Ledger API version it exposes.\n+\n+As a concrete example, DAML for Postgres 1.4.0 exposes Ledger API version 1.4.0 and DAML for VMware Blockchain 1.0 exposes Ledger API version 1.6.0. So any application that runs on DAML for Postgres 1.4.0 will also run on DAML for VMware Blockchain 1.0, thus demonstrating both portability and stability.\n+\n+Ledger API Support\n+------------------\n+\n+Major Ledger API versions behave like stable features in :doc:`status-definitions`. They are supported from the time they are first released as \"stable\" to the point where they are removed from DAML Drivers and SDK following a 12 month deprecation cycle. The earliest point a major Ledger API version can be deprecated is with the release of the next major version. The earliest it can be removed, is 12 months later with a major version release of DAML Drivers and Participant Nodes.\n+\n+Other than for hotfix releases, new releases of the DAML Drivers and Participant Nodes will only support the latest minor/patch version of each major Ledger API version.\n+\n+Network Upgradeability\n+----------------------\n+\n+Upgrades from one minor version of a stable DAML Network or Participant nodes are data preserving and have Ledger API backward compatibility as major Ledger API versions may only be removed in major versions of DAML Drivers or Participant Nodes. As an example, from an application standpoint, the only effect of upgrading DAML for Postgres 1.4.0 to DAML for Postgres 1.6.0 is an uptick in the Ledger API version. There may be significant changes to components or database schemas, but these are not public APIs, and the migrations happen automatically. \n+\n+SDK, Runtime Component, and Library Compatibility\n+-------------------------------------------------\n+\n+As long as a major Ledger API version is supported, there will be supported versions of SDK, Runtime Components, and Libraries able to target all minor versions of that major version. This has the obvious caveat that new features may not be available with old Ledger API versions.\n+\n+For example, an application built and compiled with SDK, Libraries and Runtime Components 1.4.0 against Ledger API 1.4.0, it still be compiled using SDK 1.6.0 and be run against Ledger API 1.4.0 using 1.6.0 libraries and runtime components. "
  }
]