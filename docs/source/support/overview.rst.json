[
  {
    "id" : "25fee18d-5f00-46ff-84c1-ddadc9290416",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "0a8f5bd0-6793-421b-a38a-bcb250b811bb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You never introduced the Canton API before. I think this should at least link to something that provides more details.",
        "createdAt" : "2020-09-22T11:15:54Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3af8d6af-7df6-4657-90c7-e657412cc1d9",
        "parentId" : "0a8f5bd0-6793-421b-a38a-bcb250b811bb",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Added link.",
        "createdAt" : "2020-09-22T11:55:57Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Ecosystem Overview\n+=======================\n+\n+.. toctree::\n+   :hidden:\n+\n+   status-definitions\n+   component-statuses\n+\n+This page is intended to give you an overview of the components that constitute the DAML Ecosystem, what status they are in, and how they fit together. It lays out DAML's \"public API\" in the sense of :ref:`Semantic Versioning <versioning>`, and is a prerequisite to understanding DAML's :doc:`compatibility`.\n+\n+The pages :doc:`status-definitions` and :doc:`component-statuses` give a fine-grained view of what labels like \"Alpha\" and \"Beta\" mean, which components expose public APIs and what status they are in.\n+\n+.. _ecosystem-architecture:\n+\n+Architecture\n+------------\n+\n+A high level view of the architecture of a DAML application or solution is helpful to make sense of how individual components, APIs and features fit into the DAML Stack.\n+\n+.. figure:: architecture.png\n+\n+DAML Networks\n+.............\n+\n+At the bottom of every DAML Application is a DAML Network, a distributed, or possibly centralized persistence infrastructure together with DAML Drivers. DAML Drivers enable the persistence infrastructure to act as a consensus, messaging, and in some cases persistence layer for DAML Applications. Most DAML Drivers will have a public API, but there are no _uniform_ public APIs on DAML Drivers. A good example is the command line interface of `DAML for Postgres <https://github.com/digital-asset/daml/blob/master/ledger/daml-on-sql/README.rst>`_. It's a public interface, but specific to the Postgres driver.\n+\n+Participant Nodes\n+.................\n+\n+On top of, or integrated into the DAML Drivers sits a Participant Node, that has the primary purpose of exposing the DAML Ledger API. In the case of _integrated_ DAML Drivers, the Participant Node usually interacts with the DAML Drivers through solution-specific APIs. In this case, Participant Nodes can only communicate with DAML Drivers of one DAML Network. In the case of _interoperable_ DAML Drivers, the Participant Node communicates with the DAML Drivers through the uniform Canton API. The Canton API is versioned and has some cross-version compatibility guarantees, but is not a public API. Participant nodes may have public APIs like monitoring and logging, command line interfaces or similar, but the only _uniform_ public API exposed by all Participant Nodes is the Ledger API."
  },
  {
    "id" : "da02f90c-e4c3-46f3-b771-fd0aab8794a2",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "2308dcb0-933f-41a4-8b6e-0b55a42727be",
        "parentId" : null,
        "author" : {
          "login" : "cmblitz",
          "name" : "Craig Blitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/25983230?u=e6f630d7f23ad7acec28d2c16a1318a3b134048c&v=4"
        },
        "body" : "Is it confusing to newbies to say that most drivers have no standard public API?  Perhaps we want so say what that public API would be used for.  An uninformed implication of the above is that DAML apps are not portable - until you realize that you don't actually code against a driver.  Or is this all clear to a developer?",
        "createdAt" : "2020-09-22T17:00:20Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "cmblitz",
          "name" : "Craig Blitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/25983230?u=e6f630d7f23ad7acec28d2c16a1318a3b134048c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "25af038f-78b4-46df-a3ec-11652e1ae04a",
        "parentId" : "2308dcb0-933f-41a4-8b6e-0b55a42727be",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Added a clarifying sentence.",
        "createdAt" : "2020-09-23T08:04:47Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Ecosystem Overview\n+=======================\n+\n+.. toctree::\n+   :hidden:\n+\n+   status-definitions\n+   component-statuses\n+\n+This page is intended to give you an overview of the components that constitute the DAML Ecosystem, what status they are in, and how they fit together. It lays out DAML's \"public API\" in the sense of :ref:`Semantic Versioning <versioning>`, and is a prerequisite to understanding DAML's :doc:`compatibility`.\n+\n+The pages :doc:`status-definitions` and :doc:`component-statuses` give a fine-grained view of what labels like \"Alpha\" and \"Beta\" mean, which components expose public APIs and what status they are in.\n+\n+.. _ecosystem-architecture:\n+\n+Architecture\n+------------\n+\n+A high level view of the architecture of a DAML application or solution is helpful to make sense of how individual components, APIs and features fit into the DAML Stack.\n+\n+.. figure:: architecture.png\n+\n+DAML Networks\n+.............\n+\n+At the bottom of every DAML Application is a DAML Network, a distributed, or possibly centralized persistence infrastructure together with DAML Drivers. DAML Drivers enable the persistence infrastructure to act as a consensus, messaging, and in some cases persistence layer for DAML Applications. Most DAML Drivers will have a public API, but there are no _uniform_ public APIs on DAML Drivers. A good example is the command line interface of `DAML for Postgres <https://github.com/digital-asset/daml/blob/master/ledger/daml-on-sql/README.rst>`_. It's a public interface, but specific to the Postgres driver."
  },
  {
    "id" : "d9385ba1-a536-4462-b5d3-a7d35515789f",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "a40bf33b-6e4b-48be-a97e-e15bfbe762dc",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The last sentence starts with `See` but maybe it should be `So`?\r\n```suggestion\r\nOn top of, or integrated into the DAML Drivers sits a Participant Node, that has the primary purpose of exposing the DAML Ledger API. In the case of _integrated_ DAML Drivers, the Participant Node usually interacts with the DAML Drivers through solution-specific APIs. In this case, Participant Nodes can only communicate with DAML Drivers of one DAML Network. In the case of _interoperable_ DAML Drivers, the Participant Node communicates with the DAML Drivers through the uniform `Canton Protocol <https://www.canton.io/docs/stable/user-manual/index.html>`_. The Canton Protocol is versioned and has some cross-version compatibility guarantees, but is not a public API. So Participant nodes may have public APIs like monitoring and logging, command line interfaces or similar, but the only _uniform_ public API exposed by all Participant Nodes is the Ledger API.\r\n```",
        "createdAt" : "2020-09-24T06:50:23Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Ecosystem Overview\n+=======================\n+\n+.. toctree::\n+   :hidden:\n+\n+   status-definitions\n+   component-statuses\n+\n+This page is intended to give you an overview of the components that constitute the DAML Ecosystem, what status they are in, and how they fit together. It lays out DAML's \"public API\" in the sense of :ref:`Semantic Versioning <versioning>`, and is a prerequisite to understanding DAML's :doc:`compatibility`.\n+\n+The pages :doc:`status-definitions` and :doc:`component-statuses` give a fine-grained view of what labels like \"Alpha\" and \"Beta\" mean, which components expose public APIs and what status they are in.\n+\n+.. _ecosystem-architecture:\n+\n+Architecture\n+------------\n+\n+A high level view of the architecture of a DAML application or solution is helpful to make sense of how individual components, APIs and features fit into the DAML Stack.\n+\n+.. figure:: architecture.png\n+\n+DAML Networks\n+.............\n+\n+At the bottom of every DAML Application is a DAML Network, a distributed, or possibly centralized persistence infrastructure together with DAML Drivers. DAML Drivers enable the persistence infrastructure to act as a consensus, messaging, and in some cases persistence layer for DAML Applications. Most DAML Drivers will have a public API, but there are no _uniform_ public APIs on DAML Drivers. This does not harm application portability since applications only interact with DAML Networks through the Participant Node. A good example of a public API of a DAML Driver is the command line interface of `DAML for Postgres <https://github.com/digital-asset/daml/blob/master/ledger/daml-on-sql/README.rst>`_. It's a public interface, but specific to the Postgres driver.\n+\n+Participant Nodes\n+.................\n+\n+On top of, or integrated into the DAML Drivers sits a Participant Node, that has the primary purpose of exposing the DAML Ledger API. In the case of _integrated_ DAML Drivers, the Participant Node usually interacts with the DAML Drivers through solution-specific APIs. In this case, Participant Nodes can only communicate with DAML Drivers of one DAML Network. In the case of _interoperable_ DAML Drivers, the Participant Node communicates with the DAML Drivers through the uniform `Canton Protocol <https://www.canton.io/docs/stable/user-manual/index.html>`_. The Canton Protocol is versioned and has some cross-version compatibility guarantees, but is not a public API. See Participant nodes may have public APIs like monitoring and logging, command line interfaces or similar, but the only _uniform_ public API exposed by all Participant Nodes is the Ledger API."
  },
  {
    "id" : "05862608-951f-47e8-bfbd-10dbf674de76",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "9cb13eb0-d431-424f-a566-fa1616a84f2c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I find it hard to tell what this paragraph wants to say. It uses the word _infrastructure_ twice, but it seems each usage refers to a different concept? Maybe replace the second _underlying infrastructure_ with _underlying DLT or Database_?",
        "createdAt" : "2020-09-24T06:57:49Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Ecosystem Overview\n+=======================\n+\n+.. toctree::\n+   :hidden:\n+\n+   status-definitions\n+   component-statuses\n+\n+This page is intended to give you an overview of the components that constitute the DAML Ecosystem, what status they are in, and how they fit together. It lays out DAML's \"public API\" in the sense of :ref:`Semantic Versioning <versioning>`, and is a prerequisite to understanding DAML's :doc:`compatibility`.\n+\n+The pages :doc:`status-definitions` and :doc:`component-statuses` give a fine-grained view of what labels like \"Alpha\" and \"Beta\" mean, which components expose public APIs and what status they are in.\n+\n+.. _ecosystem-architecture:\n+\n+Architecture\n+------------\n+\n+A high level view of the architecture of a DAML application or solution is helpful to make sense of how individual components, APIs and features fit into the DAML Stack.\n+\n+.. figure:: architecture.png\n+\n+DAML Networks\n+.............\n+\n+At the bottom of every DAML Application is a DAML Network, a distributed, or possibly centralized persistence infrastructure together with DAML Drivers. DAML Drivers enable the persistence infrastructure to act as a consensus, messaging, and in some cases persistence layer for DAML Applications. Most DAML Drivers will have a public API, but there are no _uniform_ public APIs on DAML Drivers. This does not harm application portability since applications only interact with DAML Networks through the Participant Node. A good example of a public API of a DAML Driver is the command line interface of `DAML for Postgres <https://github.com/digital-asset/daml/blob/master/ledger/daml-on-sql/README.rst>`_. It's a public interface, but specific to the Postgres driver.\n+\n+Participant Nodes\n+.................\n+\n+On top of, or integrated into the DAML Drivers sits a Participant Node, that has the primary purpose of exposing the DAML Ledger API. In the case of _integrated_ DAML Drivers, the Participant Node usually interacts with the DAML Drivers through solution-specific APIs. In this case, Participant Nodes can only communicate with DAML Drivers of one DAML Network. In the case of _interoperable_ DAML Drivers, the Participant Node communicates with the DAML Drivers through the uniform `Canton Protocol <https://www.canton.io/docs/stable/user-manual/index.html>`_. The Canton Protocol is versioned and has some cross-version compatibility guarantees, but is not a public API. See Participant nodes may have public APIs like monitoring and logging, command line interfaces or similar, but the only _uniform_ public API exposed by all Participant Nodes is the Ledger API.\n+\n+Integration Components\n+......................\n+\n+DAML Drivers and Participant Nodes share a lot of components between infrastructures. These shared components, which are used to build a DAML integration with an underlying infrastructure, are called the Integration Components, or sometimes the :doc:`/daml-integration-kit/index`."
  },
  {
    "id" : "f4835095-6131-48b1-b0fd-200a0fb1a4ed",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "cd24e99d-9a99-4d2d-993e-49f5663043d7",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "> all interaction between components above the Participant Node\r\n\r\nDo we have a diagram that shows this _above_ relation? Otherwise maybe replace _components above the Participant Node_ with _Runtime Components and DAML Applications_?",
        "createdAt" : "2020-09-24T07:00:09Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "39a3297d-4539-49c3-a751-7fa41281206c",
        "parentId" : "cd24e99d-9a99-4d2d-993e-49f5663043d7",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "yes, this refers to the diagram above on the same page: https://github.com/digital-asset/daml/pull/7458/files#diff-711c0dc43331a107f2fe47df58414ed7",
        "createdAt" : "2020-09-24T07:51:02Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : 44,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Ecosystem Overview\n+=======================\n+\n+.. toctree::\n+   :hidden:\n+\n+   status-definitions\n+   component-statuses\n+\n+This page is intended to give you an overview of the components that constitute the DAML Ecosystem, what status they are in, and how they fit together. It lays out DAML's \"public API\" in the sense of :ref:`Semantic Versioning <versioning>`, and is a prerequisite to understanding DAML's :doc:`compatibility`.\n+\n+The pages :doc:`status-definitions` and :doc:`component-statuses` give a fine-grained view of what labels like \"Alpha\" and \"Beta\" mean, which components expose public APIs and what status they are in.\n+\n+.. _ecosystem-architecture:\n+\n+Architecture\n+------------\n+\n+A high level view of the architecture of a DAML application or solution is helpful to make sense of how individual components, APIs and features fit into the DAML Stack.\n+\n+.. figure:: architecture.png\n+\n+DAML Networks\n+.............\n+\n+At the bottom of every DAML Application is a DAML Network, a distributed, or possibly centralized persistence infrastructure together with DAML Drivers. DAML Drivers enable the persistence infrastructure to act as a consensus, messaging, and in some cases persistence layer for DAML Applications. Most DAML Drivers will have a public API, but there are no _uniform_ public APIs on DAML Drivers. This does not harm application portability since applications only interact with DAML Networks through the Participant Node. A good example of a public API of a DAML Driver is the command line interface of `DAML for Postgres <https://github.com/digital-asset/daml/blob/master/ledger/daml-on-sql/README.rst>`_. It's a public interface, but specific to the Postgres driver.\n+\n+Participant Nodes\n+.................\n+\n+On top of, or integrated into the DAML Drivers sits a Participant Node, that has the primary purpose of exposing the DAML Ledger API. In the case of _integrated_ DAML Drivers, the Participant Node usually interacts with the DAML Drivers through solution-specific APIs. In this case, Participant Nodes can only communicate with DAML Drivers of one DAML Network. In the case of _interoperable_ DAML Drivers, the Participant Node communicates with the DAML Drivers through the uniform `Canton Protocol <https://www.canton.io/docs/stable/user-manual/index.html>`_. The Canton Protocol is versioned and has some cross-version compatibility guarantees, but is not a public API. See Participant nodes may have public APIs like monitoring and logging, command line interfaces or similar, but the only _uniform_ public API exposed by all Participant Nodes is the Ledger API.\n+\n+Integration Components\n+......................\n+\n+DAML Drivers and Participant Nodes share a lot of components between infrastructures. These shared components, which are used to build a DAML integration with an underlying infrastructure, are called the Integration Components, or sometimes the :doc:`/daml-integration-kit/index`.\n+\n+Ledger API\n+..........\n+\n+The Ledger API is the primary interface that offers forward and backward compatibility between DAML Networks and Applications. As you can see in the diagram above, all interaction between components above the Participant Node and the Participant Node or DAML Network happen through the Ledger API. The Ledger API is a public API and offers the lowest level of access to DAML Ledgers supported for application use."
  },
  {
    "id" : "9c9c5142-44fc-486a-a8ae-20b592482119",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "2f2e7b8d-76f5-4691-9fb2-dd2a37b6c759",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nThe developer tools in the SDK allow the generation of code for some languages from a DAML Model. This generated code has public APIs, but is not independently versioned, but depends on the SDK version and source of the generated code, like a DAML package. In this case, the version of the SDK used covers changes to the public API of the generated code.\r\n```",
        "createdAt" : "2020-09-24T07:01:46Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Ecosystem Overview\n+=======================\n+\n+.. toctree::\n+   :hidden:\n+\n+   status-definitions\n+   component-statuses\n+\n+This page is intended to give you an overview of the components that constitute the DAML Ecosystem, what status they are in, and how they fit together. It lays out DAML's \"public API\" in the sense of :ref:`Semantic Versioning <versioning>`, and is a prerequisite to understanding DAML's :doc:`compatibility`.\n+\n+The pages :doc:`status-definitions` and :doc:`component-statuses` give a fine-grained view of what labels like \"Alpha\" and \"Beta\" mean, which components expose public APIs and what status they are in.\n+\n+.. _ecosystem-architecture:\n+\n+Architecture\n+------------\n+\n+A high level view of the architecture of a DAML application or solution is helpful to make sense of how individual components, APIs and features fit into the DAML Stack.\n+\n+.. figure:: architecture.png\n+\n+DAML Networks\n+.............\n+\n+At the bottom of every DAML Application is a DAML Network, a distributed, or possibly centralized persistence infrastructure together with DAML Drivers. DAML Drivers enable the persistence infrastructure to act as a consensus, messaging, and in some cases persistence layer for DAML Applications. Most DAML Drivers will have a public API, but there are no _uniform_ public APIs on DAML Drivers. This does not harm application portability since applications only interact with DAML Networks through the Participant Node. A good example of a public API of a DAML Driver is the command line interface of `DAML for Postgres <https://github.com/digital-asset/daml/blob/master/ledger/daml-on-sql/README.rst>`_. It's a public interface, but specific to the Postgres driver.\n+\n+Participant Nodes\n+.................\n+\n+On top of, or integrated into the DAML Drivers sits a Participant Node, that has the primary purpose of exposing the DAML Ledger API. In the case of _integrated_ DAML Drivers, the Participant Node usually interacts with the DAML Drivers through solution-specific APIs. In this case, Participant Nodes can only communicate with DAML Drivers of one DAML Network. In the case of _interoperable_ DAML Drivers, the Participant Node communicates with the DAML Drivers through the uniform `Canton Protocol <https://www.canton.io/docs/stable/user-manual/index.html>`_. The Canton Protocol is versioned and has some cross-version compatibility guarantees, but is not a public API. See Participant nodes may have public APIs like monitoring and logging, command line interfaces or similar, but the only _uniform_ public API exposed by all Participant Nodes is the Ledger API.\n+\n+Integration Components\n+......................\n+\n+DAML Drivers and Participant Nodes share a lot of components between infrastructures. These shared components, which are used to build a DAML integration with an underlying infrastructure, are called the Integration Components, or sometimes the :doc:`/daml-integration-kit/index`.\n+\n+Ledger API\n+..........\n+\n+The Ledger API is the primary interface that offers forward and backward compatibility between DAML Networks and Applications. As you can see in the diagram above, all interaction between components above the Participant Node and the Participant Node or DAML Network happen through the Ledger API. The Ledger API is a public API and offers the lowest level of access to DAML Ledgers supported for application use.\n+\n+Runtime Components\n+..................\n+\n+Runtime components are standalone components that run alongside Participant Nodes or Applications and expose additional services like query endpoints, automations, or integrations. Each Runtime Component has public APIs, which are covered in :doc:`component-statuses`. Typically there is a command line interface, and one or more \"Runtime APIs\" as indicated in the above diagram.\n+\n+\n+Libraries\n+.........\n+\n+Libraries naturally provide public APIs in their target language, be it DAML, or secondary languages like JavaScript or Java. For details on available libraries and their interfaces, see :doc:`component-statuses`.\n+\n+Generated Code\n+..............\n+\n+The developer tools in the SDK allow the generation of code for some languages. This generated code has public APIs, but is not independently versioned, but depends on the SDK version and source of the generated code, like a DAML package. In this case, the version of the SDK used covers changes to the public API of the generated code."
  },
  {
    "id" : "4448c2ac-b823-4ac2-ba3c-7716fab6a2b1",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "a9e07e9e-889b-4aba-95d0-ec200db4528c",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "```suggestion\r\nDAML Drivers and Participant Nodes share a lot of components between underlying DLTs or Databases. These shared components are called the Integration Components, or sometimes the :doc:`/daml-integration-kit/index`.\r\n```",
        "createdAt" : "2020-09-24T07:56:53Z",
        "updatedAt" : "2020-09-24T12:12:48Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Ecosystem Overview\n+=======================\n+\n+.. toctree::\n+   :hidden:\n+\n+   status-definitions\n+   component-statuses\n+\n+This page is intended to give you an overview of the components that constitute the DAML Ecosystem, what status they are in, and how they fit together. It lays out DAML's \"public API\" in the sense of :ref:`Semantic Versioning <versioning>`, and is a prerequisite to understanding DAML's :doc:`compatibility`.\n+\n+The pages :doc:`status-definitions` and :doc:`component-statuses` give a fine-grained view of what labels like \"Alpha\" and \"Beta\" mean, which components expose public APIs and what status they are in.\n+\n+.. _ecosystem-architecture:\n+\n+Architecture\n+------------\n+\n+A high level view of the architecture of a DAML application or solution is helpful to make sense of how individual components, APIs and features fit into the DAML Stack.\n+\n+.. figure:: architecture.png\n+\n+DAML Networks\n+.............\n+\n+At the bottom of every DAML Application is a DAML Network, a distributed, or possibly centralized persistence infrastructure together with DAML Drivers. DAML Drivers enable the persistence infrastructure to act as a consensus, messaging, and in some cases persistence layer for DAML Applications. Most DAML Drivers will have a public API, but there are no _uniform_ public APIs on DAML Drivers. This does not harm application portability since applications only interact with DAML Networks through the Participant Node. A good example of a public API of a DAML Driver is the command line interface of `DAML for Postgres <https://github.com/digital-asset/daml/blob/master/ledger/daml-on-sql/README.rst>`_. It's a public interface, but specific to the Postgres driver.\n+\n+Participant Nodes\n+.................\n+\n+On top of, or integrated into the DAML Drivers sits a Participant Node, that has the primary purpose of exposing the DAML Ledger API. In the case of _integrated_ DAML Drivers, the Participant Node usually interacts with the DAML Drivers through solution-specific APIs. In this case, Participant Nodes can only communicate with DAML Drivers of one DAML Network. In the case of _interoperable_ DAML Drivers, the Participant Node communicates with the DAML Drivers through the uniform `Canton Protocol <https://www.canton.io/docs/stable/user-manual/index.html>`_. The Canton Protocol is versioned and has some cross-version compatibility guarantees, but is not a public API. So Participant nodes may have public APIs like monitoring and logging, command line interfaces or similar, but the only _uniform_ public API exposed by all Participant Nodes is the Ledger API.\n+\n+Integration Components\n+......................\n+\n+DAML Drivers and Participant Nodes share a lot of components between infrastructures. These shared components, which are used to build a DAML integration with an underlying infrastructure, are called the Integration Components, or sometimes the :doc:`/daml-integration-kit/index`."
  }
]