[
  {
    "id" : "1c6be1f6-7e27-4088-88f1-b682f31edd4f",
    "prId" : 7458,
    "comments" : [
      {
        "id" : "dd6dbd50-5a07-46b7-b418-09245717a5ba",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nThe DAML Integration Kit is currently an :doc:`Early Access Feature in Labs status </support/status-definitions>`. It comprises the components needed to build your own :ref:`DAML Drivers <ecosystem-architecture>`.\r\n```",
        "createdAt" : "2020-09-22T10:37:21Z",
        "updatedAt" : "2020-09-24T12:12:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "78c7897a4ab9edbfbb402f0e91ed48d19c4dade6",
    "line" : null,
    "diffHunk" : "@@ -1,8 +1,10 @@\n .. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n .. SPDX-License-Identifier: Apache-2.0\n \n-DAML Integration Kit - ALPHA\n-############################\n+DAML Integration Kit\n+####################\n+\n+DAML Triggers are currently an :doc:`Early Access Feature in Labs status </support/status-definitions>`. It comprises the components needed to build your own :ref:`DAML Drivers <ecosystem-architecture>`."
  },
  {
    "id" : "890b55d1-c1fe-40ee-a1b6-638269145e77",
    "prId" : 3783,
    "comments" : [
      {
        "id" : "197eecca-3ea5-4467-8e97-49d299500098",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please correct the source code link as well.",
        "createdAt" : "2019-12-09T15:50:43Z",
        "updatedAt" : "2019-12-11T12:31:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "796a2f26-b763-4945-87b8-7a8ed283e398",
        "parentId" : "197eecca-3ea5-4467-8e97-49d299500098",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Sorry, missed that. Thank you!",
        "createdAt" : "2019-12-09T16:18:07Z",
        "updatedAt" : "2019-12-11T12:31:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "85572a07fd9cb2ccf9a2a6cdafdaf86b85861323",
    "line" : null,
    "diffHunk" : "@@ -348,7 +348,7 @@ do the following modifications to your code:\n - Instantiate a ``com.digitalasset.ledger.api.auth.interceptor.AuthorizationInterceptor`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/ledger-api-auth/src/main/scala/com/digitalasset/ledger/api/auth/interceptor/AuthorizationInterceptor.scala>`__),\n   and pass it an instance of your AuthService implementation.\n   This interceptor will be responsible for storing the decoded Claims in a place where ledger API services can access them.\n-- When starting the ``com.digitalasset.ledger.server.apiserver.LedgerApiServer`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/sandbox/src/main/scala/com/digitalasset/ledger/server/apiserver/LedgerApiServer.scala>`__),\n+- When starting the ``com.digitalasset.platform.apiserver.LedgerApiServer`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/sandbox/src/main/scala/com/digitalasset/ledger/server/apiserver/LedgerApiServer.scala>`__),"
  },
  {
    "id" : "944386a1-b49b-406e-b5ca-06d0a0b185f4",
    "prId" : 1817,
    "comments" : [
      {
        "id" : "d4fe2937-c2e5-41b6-b761-c8b9f687529f",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "@dasormeter : spelling `statuses` and `progress`",
        "createdAt" : "2019-06-25T05:38:56Z",
        "updatedAt" : "2019-06-25T18:15:53Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "72a50dc25de2d4bb731f5687525c0dfd11d66873",
    "line" : null,
    "diffHunk" : "@@ -97,24 +97,24 @@ DAML Integration Kit status and roadmap\n ***************************************\n \n The current status of the integration kit is ALPHA. We are working towards BETA,\n-and GA will come quite a bit later. The roadmap below explains what we mean by\n-these different statuses, and what's missing to progress.\n+and General Availability (GA) will come quite a bit later. The roadmap below explains what we mean by\n+these different statuse, and what's missing to progres."
  },
  {
    "id" : "f966146a-660f-4866-ade4-1b9b07ea7214",
    "prId" : 1813,
    "comments" : [
      {
        "id" : "91f3476f-567f-46e0-8c26-94f5a17dcbd8",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "My guess is that this should be\r\n```suggestion\r\n     - Integration Developer\r\n```",
        "createdAt" : "2019-06-21T20:57:11Z",
        "updatedAt" : "2019-06-21T20:59:43Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "523a8b253a71c582ad7d002add4df5acd66af7cc",
    "line" : 58,
    "diffHunk" : "@@ -96,35 +95,56 @@ support for running DAML.\n    number of columns!\n \n .. list-table::\n-   :widths: 25 25 25 25\n+   :widths: 20 20 20 20 20\n    :header-rows: 1\n \n    * - Ledger\n      - Status\n-     - Developer\n-     - More\n+     - Integration"
  },
  {
    "id" : "bd292caa-c851-4cb9-99c2-d0d60ab6e0ac",
    "prId" : 1813,
    "comments" : [
      {
        "id" : "5bb777e8-47cf-45bb-92f0-3441b813a50a",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "And my understanding is that this should be\r\n```suggestion\r\n     - Deployment Platform\r\n```",
        "createdAt" : "2019-06-21T20:57:28Z",
        "updatedAt" : "2019-06-21T20:59:43Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "523a8b253a71c582ad7d002add4df5acd66af7cc",
    "line" : 59,
    "diffHunk" : "@@ -96,35 +95,56 @@ support for running DAML.\n    number of columns!\n \n .. list-table::\n-   :widths: 25 25 25 25\n+   :widths: 20 20 20 20 20\n    :header-rows: 1\n \n    * - Ledger\n      - Status\n-     - Developer\n-     - More\n+     - Integration\n+     - Deployment"
  },
  {
    "id" : "c9de4b46-f4c8-4297-ba44-d7bb4b7a1196",
    "prId" : 1813,
    "comments" : [
      {
        "id" : "763e4add-19a7-48ce-96cd-14a77410a222",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This is actually done, right? We could link to https://docs.daml.com/tools/sandbox.html#running-with-persistence.",
        "createdAt" : "2019-06-21T20:58:50Z",
        "updatedAt" : "2019-06-21T20:59:43Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "523a8b253a71c582ad7d002add4df5acd66af7cc",
    "line" : 97,
    "diffHunk" : "@@ -96,35 +95,56 @@ support for running DAML.\n    number of columns!\n \n .. list-table::\n-   :widths: 25 25 25 25\n+   :widths: 20 20 20 20 20\n    :header-rows: 1\n \n    * - Ledger\n      - Status\n-     - Developer\n-     - More\n+     - Integration\n+     - Deployment\n+     - More Information\n    * - `VMware Blockchain <https://blogs.vmware.com/blockchain>`__\n      - In Development\n      - `VMware <https://www.vmware.com/>`__\n-     - `press release (April 11th 2019)\n+     - TBD\n+     - `press release :: April 2019\n        <http://hub.digitalasset.com/press-release/digital-asset-daml-smart-contract-language-now-extended-to-vmware-blockchain>`__\n    * - `Hyperledger Sawtooth <https://sawtooth.hyperledger.org/>`__\n      - In Development\n      - `Blockchain Technology Partners <https://blockchaintp.com/>`__\n-     - `press release (April 16th 2019)\n+     - `Sextant <https://blockchaintp.com/sextant/>`__\n+     - `press release :: April 2019\n        <https://www.hyperledger.org/blog/2019/04/16/daml-smart-contracts-coming-to-hyperledger-sawtooth>`__\n+   * - `Hyperledger Fabric <https://www.hyperledger.org/projects/fabric>`__\n+     - In Development\n+     - `Hacera <https://hacera.com>`__     \n+     - `Hacera Unbounded Network <https://unbounded.network/>`__\n+     - `press release :: June 2019\n+       <https://hub.digitalasset.com/press-release/digital-asset-announces-daml-partner-integrations-with-hyperledger-fabric-r3-corda-and-amazon-aurora>`__\n+   * - `R3 Corda <https://www.corda.net>`__\n+     - In Development\n+     - `Digital Asset <https://digitalasset.com/>`__\n+     - TBD\n+     - `press release :: June 2019\n+       <https://hub.digitalasset.com/press-release/digital-asset-announces-daml-partner-integrations-with-hyperledger-fabric-r3-corda-and-amazon-aurora>`__\n+   * - `Amazon Aurora <https://www.hyperledger.org/projects/fabric>`__\n+     - In Development\n+     - `Blockchain Technology Partners <https://blockchaintp.com/>`__\n+     - `Sextant <https://blockchaintp.com/sextant/>`__     \n+     - `press release :: June 2019\n+       <https://hub.digitalasset.com/press-release/digital-asset-announces-daml-partner-integrations-with-hyperledger-fabric-r3-corda-and-amazon-aurora>`__\n    * - :doc:`/tools/sandbox`\n      - Stable\n      - `Digital Asset <https://digitalasset.com/>`__\n+     - TBD\n      - `PostgreSQL <https://www.postgresql.org/>`__ backend coming soon"
  },
  {
    "id" : "0e303b4e-e49f-4e1e-8016-769df181e967",
    "prId" : 1434,
    "comments" : [
      {
        "id" : "440190cb-ef99-4ade-a263-6d3bfd7d08c4",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@gleber-da: I'm assuming `6864` was a typo?",
        "createdAt" : "2019-06-05T14:38:08Z",
        "updatedAt" : "2019-06-06T11:04:18Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9b571b05-c0d3-4929-8111-104877604e61",
        "parentId" : "440190cb-ef99-4ade-a263-6d3bfd7d08c4",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "Indeed!",
        "createdAt" : "2019-06-05T14:58:24Z",
        "updatedAt" : "2019-06-06T11:04:18Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cca8d0b7a85789e1d998980512199715f3dba9e7",
    "line" : 5,
    "diffHunk" : "@@ -398,17 +398,17 @@ implementation of the :doc:`Ledger API\n </app-dev/index>`. For example, it will show you if\n there are consistency or conformance problem with your implementation.\n \n-Assuming that your Ledger API endpoint is accessible at ``localhost:6864``, you can use the tool in the following manner:\n+Assuming that your Ledger API endpoint is accessible at ``localhost:6865``, you can use the tool in the following manner:"
  },
  {
    "id" : "df610859-83b1-4d52-b2c7-b800b1a391c3",
    "prId" : 729,
    "comments" : [
      {
        "id" : "42086f6a-8811-4d5a-9c40-2f6d4de43f07",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Looks fine, but I suggest using a list table instead https://sublime-and-sphinx-guide.readthedocs.io/en/latest/tables.html",
        "createdAt" : "2019-04-26T11:46:25Z",
        "updatedAt" : "2019-04-26T12:01:57Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68f709d8c9a55ca16f19947825440fa2a8de128a",
    "line" : null,
    "diffHunk" : "@@ -96,8 +96,25 @@ GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__\n DAML Ledgers built or in development\n ====================================\n \n-**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n-(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+The following table lists the ledgers that support DAML, or are implementing\n+support for running DAML.\n+\n++-----------------------------------------------+------------------+----------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+"
  },
  {
    "id" : "0476546c-883d-40c7-83a5-ffcc1a76ffbd",
    "prId" : 440,
    "comments" : [
      {
        "id" : "b1bd425b-d5af-4bb6-9c83-d1abc529f0b6",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "I would suggest slightly less self-debilitating tone:\r\n\"Once ALPHA status is reached, the DAML Integration Kit is ready to be used by\r\nthird-parties willing to accept following caveats:\"",
        "createdAt" : "2019-04-24T14:39:40Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dc4ecf19-404f-4173-9dba-e9da7a6deb88",
        "parentId" : "b1bd425b-d5af-4bb6-9c83-d1abc529f0b6",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I think the phrasing \"courageous\" is cute, but think this edit is reasonable :) ",
        "createdAt" : "2019-04-24T15:57:12Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : 43,
    "diffHunk" : "@@ -0,0 +1,329 @@\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and Roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by"
  },
  {
    "id" : "e9a74374-a70b-46ef-818b-40288384ddec",
    "prId" : 440,
    "comments" : [
      {
        "id" : "3b3ab877-0d16-40b9-86f2-98a617a86c99",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "This section is not so clear to me. Isn't the problem that several APIs are missing at the moment, thus the solutions to problems such as package upload, party on-boarding etc. are necessarily proprietary. The fact that they cannot be tested in a uniform manner is a consequence of that",
        "createdAt" : "2019-04-24T14:43:16Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2410bc43-cbf0-4a9f-9433-dcb7b72132bb",
        "parentId" : "3b3ab877-0d16-40b9-86f2-98a617a86c99",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Thx. reformulated to talk about introducing APIs",
        "createdAt" : "2019-04-25T06:52:45Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : 46,
    "diffHunk" : "@@ -0,0 +1,329 @@\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and Roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in"
  },
  {
    "id" : "ef605da8-c279-4e2a-abe1-66980829e948",
    "prId" : 440,
    "comments" : [
      {
        "id" : "92f007df-76fb-4c20-80b2-364709ce3d68",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Some readers might be looking for clues how daml engine fits into the overall architecture depicted on the diagram below. Maybe we should show how it fits into the LedgerApiServer.",
        "createdAt" : "2019-04-24T14:45:56Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "543e9e67-6851-44aa-ad61-b2d74b68673e",
        "parentId" : "92f007df-76fb-4c20-80b2-364709ce3d68",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Thx. Added a comment.",
        "createdAt" : "2019-04-25T06:58:18Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : 267,
    "diffHunk" : "@@ -0,0 +1,329 @@\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and Roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party onboarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *adminstrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+  - We do not yet provide\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`issue <https://github.com/digital-asset/daml/issues/139>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us BETA status, means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML integration kit.\n+\n+\n+What DAML Ledgers are there?\n+============================\n+\n+**TODO: explain what ledgers exist; and what state they are in.**\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural Overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labelled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labelled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message Flow\n+------------\n+\n+**TODO: explain how a transaction gets committed against an abstract ledger**\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\n+   which contains a complete example of a DAML Ledger backed by an in-memory\n+   key-value store. It builds on our Scala libraries and demonstrates how they\n+   can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+   For ledgers where data is shared between all participant nodes, we\n+   recommend using this example as a starting point for implementing your\n+   server and validator. For ledgers with stronger privacy models, this example\n+   can serve as an inspiration. You will need to dive deeper into how\n+   transactions are represented and how to communicate them to\n+   implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+   at the ledger level instead of just at the Ledger API level.\n+\n+\n+Getting Started\n+---------------\n+\n+Implementing your own server and validator requires three things: learning the\n+necessary context, deciding on an architecture, and writing their code.\n+\n+There is a lot of context required for this implementation task. We recommend\n+the following steps to gain this context.\n+\n+1. Complete the :doc:`/getting-started/quickstart`.\n+2. Get an in-depth understanding of the :doc:`/concepts/ledger-model/index`.\n+3. Build a mental model of how the :doc:`/app-dev/ledger-api-introduction/index`\n+   is used to build DAML Applications.\n+\n+.. _integration-kit_writing_code:\n+\n+Writing the Code\n+----------------\n+\n+Once you've completed the above steps, we recommend following these steps to\n+implement your own server and validator.\n+\n+1. Clone our example DAML Ledger backed by an in-memory key-value store from\n+   the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+   **TODO: create this example repository**\n+\n+2. Read the example code jointly with the :ref:`integration-kit_library_overview`\n+   given below.\n+3. Combine all the knowledge gained to decide on the architecture for your\n+   DAML on `X` ledger.\n+4. Implement your architecture; and let the world know about it.\n+\n+Use the feedback form on this documentation page or GitHub issues on the\n+`digital-asset/daml <https://github.com/digital-asset/daml>`__ repository to\n+get into contact with us. Questions and feedback welcome!\n+\n+\n+.. _integration-kit_library_overview:\n+\n+Library Infrastructure Overview\n+-------------------------------\n+\n+We provide the following four Scala libraries to help you implement your\n+server and validator. They are released as part of the DAML SDK. Changes\n+to them are explained as part of the :doc:`/support/release-notes`.\n+As explained in :ref:`integration-kit_writing_code`,\n+this section is best read jointly with the code in\n+`digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+``participant-state.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/participant-state/src/main/scala/com/daml/ledger/participant/state/v1/package.scala>`__)\n+  contains interfaces abstracting over the state of\n+  a participant node relevant for a DAML Ledger API server. These are the\n+  interfaces whose implemention is specific to a particular `X` ledger. These\n+  interfaces are optimized for ease of implementation.\n+``participant-state-index.jar`` (`source code <https://github.com/digital-asset/daml/tree/master/ledger/participant-state-index>`__)\n+  contains code for reading the abstract state\n+  of a participant node and indexing it to satisfy the read access\n+  patterns required for serving the Ledger API. The library provides both\n+  an interface enumerating all read access methods and an in-memory\n+  reference implementation of that interface.\n+  We expect to provide a persistent, SQL-backed index in the future\n+  (tracked in this `GitHub issue <https://github.com/digital-asset/daml/issues/581>`__).\n+``api-server-damlonx.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/api-server-damlonx/src/main/scala/com/daml/ledger/api/server/damlonx/Server.scala>`__)\n+  contains code that implements a DAML Ledger API\n+  server given implementations of the interfaces in ``participant-state.jar``.\n+``daml-engine.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/daml-lf/engine/src/main/scala/com/digitalasset/daml/lf/engine/Engine.scala>`__)"
  },
  {
    "id" : "d7d2f243-fc98-42cd-82c9-04e054cb4345",
    "prId" : 440,
    "comments" : [
      {
        "id" : "1259b6c1-2462-446b-8d44-b097be3a4ea2",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Do you need this? I think you can usually use a `:doc:` link to refer to the page instead.",
        "createdAt" : "2019-04-24T15:52:32Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4de40d8-28a1-4f0e-b491-76201848954d",
        "parentId" : "1259b6c1-2462-446b-8d44-b097be3a4ea2",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "removed",
        "createdAt" : "2019-04-25T06:58:38Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:"
  },
  {
    "id" : "cf705b02-f8c7-4207-ad34-ced6f9af7df1",
    "prId" : 440,
    "comments" : [
      {
        "id" : "fb5e704d-dc97-436a-82cd-c1d591889fc2",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Just slight language tweak\r\n```suggestion\r\nPractically, we strongly recommend using our integration kit and following\r\n```",
        "createdAt" : "2019-04-24T15:53:24Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow"
  },
  {
    "id" : "a9f68c59-723f-4caf-9964-cb03636e7070",
    "prId" : 440,
    "comments" : [
      {
        "id" : "87de8044-b7b9-4ddb-9e8f-25a49d77d33b",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "When you've got a list like this, it's usually easier to read if you can have it as a bulleted list. So something like `following the guides below:`, then the list",
        "createdAt" : "2019-04-24T15:54:55Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b94330d7-c3ac-40ca-a2cc-d740e8767109",
        "parentId" : "87de8044-b7b9-4ddb-9e8f-25a49d77d33b",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-25T07:02:49Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,"
  },
  {
    "id" : "cd4deb75-a7a9-461a-98d8-e524381b493a",
    "prId" : 440,
    "comments" : [
      {
        "id" : "8bb84b97-809c-49f2-b9ae-35d601b6c8e1",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nserver. \r\n\r\nThey'll help you focus on your distributed-ledger or database of\r\n```",
        "createdAt" : "2019-04-24T15:55:22Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3116c933-f3bb-4009-b046-de89f62d7c21",
        "parentId" : "8bb84b97-809c-49f2-b9ae-35d601b6c8e1",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Thx. Formulated a bit differently, but used the reference to the guides.",
        "createdAt" : "2019-04-25T07:05:08Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of"
  },
  {
    "id" : "f48f1aa2-f21f-45f9-8478-83a4b839254b",
    "prId" : 440,
    "comments" : [
      {
        "id" : "a1512b8b-0cc4-4248-9f77-a449c1256fb4",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I try to avoid these when possible - only putting in labels when you really need to refer to them. ",
        "createdAt" : "2019-04-24T15:56:12Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5f8669df-0056-413d-9f9c-9c911653e7b7",
        "parentId" : "a1512b8b-0cc4-4248-9f77-a449c1256fb4",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "OK. removed.",
        "createdAt" : "2019-04-25T07:06:43Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:"
  },
  {
    "id" : "eec1741e-579b-4bcc-ae6c-a82ad1d8a614",
    "prId" : 440,
    "comments" : [
      {
        "id" : "3ab931ad-8468-4622-9302-3d76deea4970",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n  to have you on-board, provided you're OK with the following caveats:\r\n```",
        "createdAt" : "2019-04-24T15:57:23Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:"
  },
  {
    "id" : "18f6edb9-0fe6-448a-b3f6-da7420db87ea",
    "prId" : 440,
    "comments" : [
      {
        "id" : "2f092057-8b9a-4709-b05d-02567ccc4325",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "How do they give feedback? GitHub issues? Some other way of contacting you?",
        "createdAt" : "2019-04-24T15:58:03Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "75255c3b-2bbe-4729-93b2-216305849c39",
        "parentId" : "2f092057-8b9a-4709-b05d-02567ccc4325",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-04-25T08:28:00Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : 64,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention"
  },
  {
    "id" : "e987660f-af6e-4265-8dd2-9a6345feb0a6",
    "prId" : 440,
    "comments" : [
      {
        "id" : "9fd5260c-bb0f-4007-bf66-a644f0fa9eab",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Would this be better as just a tagged set of GitHub issues? This list feels like a pain to maintain to me.",
        "createdAt" : "2019-04-24T15:58:34Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0ae9fd87-febf-41ad-97a0-914705310c7d",
        "parentId" : "9fd5260c-bb0f-4007-bf66-a644f0fa9eab",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Agreed. Fixed with reference to https://github.com/digital-asset/daml/milestone/4",
        "createdAt" : "2019-04-25T08:14:48Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can"
  },
  {
    "id" : "3a0f87a9-9145-4761-a592-c77483a5d925",
    "prId" : 440,
    "comments" : [
      {
        "id" : "b0bbdea2-6b5d-4d0e-8e65-338ab92fbf90",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n  Before reaching BETA status, we expect to have:\r\n```",
        "createdAt" : "2019-04-24T15:58:53Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have"
  },
  {
    "id" : "2256a34f-840d-4d0d-874d-492c85fbcc8d",
    "prId" : 440,
    "comments" : [
      {
        "id" : "cdd4a344-480f-41c6-9ed1-adf4c4bd96cd",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n  - hardened our test tooling\r\n```",
        "createdAt" : "2019-04-24T15:59:01Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "77eec9d3-3ed7-4ce1-b71b-6732efee70ea",
        "parentId" : "cdd4a344-480f-41c6-9ed1-adf4c4bd96cd",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "applying these changes manually",
        "createdAt" : "2019-04-25T07:12:07Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,"
  },
  {
    "id" : "7c4210f1-0292-460c-8b2c-de1911bf7369",
    "prId" : 440,
    "comments" : [
      {
        "id" : "9c06063b-6c26-4900-baee-3bd888671d1f",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Not quite sure what you mean by `hardened`? Improved?",
        "createdAt" : "2019-04-24T15:59:14Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e28b124e-ab27-4f31-af86-1adf6bf0a2e4",
        "parentId" : "9c06063b-6c26-4900-baee-3bd888671d1f",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Increased coverage, but I don't want to imply that it is weak at the moment. Leaving it intentionally vague.",
        "createdAt" : "2019-04-25T07:11:08Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,"
  },
  {
    "id" : "50b2724b-b1cb-4b81-941c-320ae1e844ee",
    "prId" : 440,
    "comments" : [
      {
        "id" : "9a1b0e09-abf7-477f-b187-e9ce5be5fc4e",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n  - built tooling for benchmarking DAML ledgers\r\n```",
        "createdAt" : "2019-04-24T15:59:19Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,"
  },
  {
    "id" : "dc00cbaf-f97a-4a37-9c26-aa7314e37218",
    "prId" : 440,
    "comments" : [
      {
        "id" : "89f21528-589d-46e5-b44e-591351a93756",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n  - completed several integrations of DAML for different ledgers\r\n```",
        "createdAt" : "2019-04-24T15:59:30Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and"
  },
  {
    "id" : "d02745c7-a6e7-4879-b313-a080a56bd90a",
    "prId" : 440,
    "comments" : [
      {
        "id" : "a1d21ec2-0248-4ae4-8e2e-7191260f8129",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n    portable way for testing DAML applications against different DAML ledgers\r\n```",
        "createdAt" : "2019-04-24T15:59:37Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers."
  },
  {
    "id" : "8dfe3a4e-6c17-48e8-9c17-acd91fdb23c8",
    "prId" : 440,
    "comments" : [
      {
        "id" : "a49dae91-7f89-4c6a-bd86-2dca26379ac9",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This looks like a definition list. They're easy to get wrong - just wanted to check you've run the [preview script](https://github.com/digital-asset/daml/blob/master/docs/README.md#previewing) to check it works correctly",
        "createdAt" : "2019-04-24T16:00:32Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fa0f616f-8a79-4367-84a2-77124f01aaba",
        "parentId" : "a49dae91-7f89-4c6a-bd86-2dca26379ac9",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Never mind, I just checked and it seems fine",
        "createdAt" : "2019-04-24T16:15:22Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cb25b1b8-cbed-44b4-a59f-46410819f8b2",
        "parentId" : "a49dae91-7f89-4c6a-bd86-2dca26379ac9",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Jup. Always running with the preview script.",
        "createdAt" : "2019-04-25T07:12:44Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : 35,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)"
  },
  {
    "id" : "50856568-d9d8-43f2-a5ca-3e26fcb08a0a",
    "prId" : 440,
    "comments" : [
      {
        "id" : "d53afd89-0a26-48bb-a975-e5d01e9312aa",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nledger `X`. The backing ledger can be a proper distributed ledger or also just a database.\r\n```",
        "createdAt" : "2019-04-24T16:01:44Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database."
  },
  {
    "id" : "3316e10f-889e-44c0-837b-b531052a7967",
    "prId" : 440,
    "comments" : [
      {
        "id" : "5823bbf5-e068-4586-9fc6-14f59007e74e",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Code in rst has double backticks. (Yes, so annoying.) I'll leave it to you to change throughout.\r\n\r\n```suggestion\r\nWe assume that the ``X`` ledger allows entities to participate in the\r\n```",
        "createdAt" : "2019-04-24T16:02:27Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7b741811-779b-4c44-8d6a-dadf35ed3b02",
        "parentId" : "5823bbf5-e068-4586-9fc6-14f59007e74e",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Or are you deliberately using this to get italics?",
        "createdAt" : "2019-04-24T16:15:42Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36cc2fb0-df93-4eea-8f75-2b1f8d1c7c1d",
        "parentId" : "5823bbf5-e068-4586-9fc6-14f59007e74e",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Yes. deliberate use. The styling was too jarring, and it worked OK with the flow.",
        "createdAt" : "2019-04-25T07:13:43Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the"
  },
  {
    "id" : "af8d25dc-5258-4914-9560-80b407752a97",
    "prId" : 440,
    "comments" : [
      {
        "id" : "08f4c5cc-2c40-41d0-9507-0e91ef6fff20",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Can you avoid using \"we\" here? \"The following diagram illustrates this architecture?\"",
        "createdAt" : "2019-04-24T16:04:51Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2aa80047-dba2-4a8d-9d7d-9c15251442ad",
        "parentId" : "08f4c5cc-2c40-41d0-9507-0e91ef6fff20",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "OK. Let me see what I can do. Just saw that our doc styleguide does not allow \"we\" the writers to speak, which is the style I've used in my papers.",
        "createdAt" : "2019-04-25T07:17:06Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram."
  },
  {
    "id" : "a10f2314-5e8d-4051-a64e-e40e6a454534",
    "prId" : 440,
    "comments" : [
      {
        "id" : "ba384bc1-9ee6-4004-946b-55e7e79a4b7d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "\"We assume that the `X` ledger allows entities to participate in the evolution of the ledger via particular nodes\". I don't understand this sentence at all - I think the problem is \"we assume\". Are you saying that ledger implementations are required to allow this? ",
        "createdAt" : "2019-04-24T16:07:10Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this"
  },
  {
    "id" : "af174246-7b08-4c5c-b1f1-8b3101bcbae8",
    "prId" : 440,
    "comments" : [
      {
        "id" : "d7cdee1c-32c9-4cb4-bf18-a8d1117af3a6",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I would rewrite this paragraph a little, with \"What's in it for me?\" in mind. What will a user learn from reading this section? Is it telling them what architecture they will need to implement? If so, tell them directly.",
        "createdAt" : "2019-04-24T16:14:25Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific"
  },
  {
    "id" : "7012bdc5-c05a-4b38-917d-5bb563d9c8ca",
    "prId" : 440,
    "comments" : [
      {
        "id" : "3f71fd0c-6a09-47b6-8ce3-588269d8e92a",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I'm really struggling to understand this whole section. What is this architecture? Is it the one we're telling you that you must implement? Is it the one that we recommend but you can do whatever you want? Don't just present the information in the abstract, tell me how it's relevant to me.",
        "createdAt" : "2019-04-24T16:17:09Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction"
  },
  {
    "id" : "00eea147-06c4-43b0-8cb0-c20b7e295c24",
    "prId" : 440,
    "comments" : [
      {
        "id" : "7af0eb7b-cc7f-4083-91b9-8c4dde91da78",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "That ref doesn't seem to work for me. \r\n\r\nIn general, better to say \"the library overview below\" rather than just \"below\" - making link text meaningful is generally helpful",
        "createdAt" : "2019-04-24T17:00:58Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "78b20f75-53e9-4368-ba1b-8e2de06ec486",
        "parentId" : "7af0eb7b-cc7f-4083-91b9-8c4dde91da78",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-25T08:14:24Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these"
  },
  {
    "id" : "79b670de-6bf1-4ee5-be93-7fd22c934482",
    "prId" : 440,
    "comments" : [
      {
        "id" : "6750fe00-e446-4415-b757-05a19ac3fa85",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This isn't an ordered list, it can just be bullet points",
        "createdAt" : "2019-04-24T17:01:08Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f53ff3d9-e30e-4644-9116-dfd8f40d7765",
        "parentId" : "6750fe00-e446-4415-b757-05a19ac3fa85",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "adapted.",
        "createdAt" : "2019-04-25T07:53:47Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the"
  },
  {
    "id" : "99c5d6b8-449b-4bc5-945f-08d35864a819",
    "prId" : 440,
    "comments" : [
      {
        "id" : "9cc8ca97-a8d0-47d8-a515-9a65ca4d4044",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n- Scala libraries for validating DAML transactions and serving the\r\n```",
        "createdAt" : "2019-04-24T17:01:42Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "18eeb4b0-e686-4356-80e7-772e97dd2e2e",
        "parentId" : "9cc8ca97-a8d0-47d8-a515-9a65ca4d4044",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-04-25T07:53:54Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the"
  },
  {
    "id" : "49978cc3-cd74-4f0a-8d2a-cc24d720c355",
    "prId" : 440,
    "comments" : [
      {
        "id" : "7fab28d8-802a-4328-854d-7ac7fd2c052e",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n- The `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\r\n```",
        "createdAt" : "2019-04-24T17:01:51Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5e6e1b71-23ba-4336-b08d-1c131dca6c2b",
        "parentId" : "7fab28d8-802a-4328-854d-7ac7fd2c052e",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-25T07:54:14Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,"
  },
  {
    "id" : "2e502d52-7ce8-4cfd-b65a-4701565e04f0",
    "prId" : 440,
    "comments" : [
      {
        "id" : "fec46581-4525-4081-b339-f973f439e3c3",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Even better, switch these two bits of the sentence around: A complete example of a DAML ledger backed by key-value stored, in the 'daml-on-x' GitHub repository. ",
        "createdAt" : "2019-04-24T17:02:40Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "318992f4-aeee-4492-84a2-95f5792dcc65",
        "parentId" : "fec46581-4525-4081-b339-f973f439e3c3",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "nice! :muscle: ",
        "createdAt" : "2019-04-25T07:57:23Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\n+   which contains a complete example of a DAML Ledger backed by an in-memory"
  },
  {
    "id" : "65e4b779-07e5-49af-89b4-97d5a2bd7818",
    "prId" : 440,
    "comments" : [
      {
        "id" : "599e6bfb-c527-404e-b6c9-dc68f354ba8b",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I would add a second paragraph break before \"For ledgers with stronger privacy models\"",
        "createdAt" : "2019-04-24T17:03:14Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "00d41857-2914-4e04-be06-dcef0dc0701a",
        "parentId" : "599e6bfb-c527-404e-b6c9-dc68f354ba8b",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2019-04-25T08:14:13Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\n+   which contains a complete example of a DAML Ledger backed by an in-memory\n+   key-value store. It builds on our Scala libraries and demonstrates how they\n+   can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+   For ledgers where data is shared between all participant nodes, we\n+   recommend using this example as a starting point for implementing your\n+   server and validator. For ledgers with stronger privacy models, this example"
  },
  {
    "id" : "cce979d4-7f4d-40be-a575-ad2b1a7f9099",
    "prId" : 440,
    "comments" : [
      {
        "id" : "e572abbf-0ad4-4cf0-bcfd-bb583a109c8f",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Should this paragraph be under the next heading?",
        "createdAt" : "2019-04-24T17:03:36Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ac32a394-cbb0-4297-b467-0d82f5e96828",
        "parentId" : "e572abbf-0ad4-4cf0-bcfd-bb583a109c8f",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "moved.",
        "createdAt" : "2019-04-25T08:03:37Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\n+   which contains a complete example of a DAML Ledger backed by an in-memory\n+   key-value store. It builds on our Scala libraries and demonstrates how they\n+   can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+   For ledgers where data is shared between all participant nodes, we\n+   recommend using this example as a starting point for implementing your\n+   server and validator. For ledgers with stronger privacy models, this example\n+   can serve as an inspiration. You will need to dive deeper into how\n+   transactions are represented and how to communicate them to\n+   implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+   at the ledger level instead of just at the Ledger API level.\n+\n+Implementing your own server and validator requires a significant amount"
  },
  {
    "id" : "629e3184-4619-4d5d-974f-3a1e21f3e389",
    "prId" : 440,
    "comments" : [
      {
        "id" : "c6f7b360-9ceb-47be-be47-28f194cfae72",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\nPrerequisite knowledge\r\n```",
        "createdAt" : "2019-04-24T17:03:46Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\n+   which contains a complete example of a DAML Ledger backed by an in-memory\n+   key-value store. It builds on our Scala libraries and demonstrates how they\n+   can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+   For ledgers where data is shared between all participant nodes, we\n+   recommend using this example as a starting point for implementing your\n+   server and validator. For ledgers with stronger privacy models, this example\n+   can serve as an inspiration. You will need to dive deeper into how\n+   transactions are represented and how to communicate them to\n+   implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+   at the ledger level instead of just at the Ledger API level.\n+\n+Implementing your own server and validator requires a significant amount\n+of context to be learned before you can decide on your architecture and\n+implement it.\n+\n+\n+Getting started"
  },
  {
    "id" : "6f5281ec-2314-4615-8b51-47b6d078611e",
    "prId" : 440,
    "comments" : [
      {
        "id" : "99fd94c1-5c76-4075-a5e3-e2c8f49a0ba1",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "You should definitely mention that this doesn't exist yet. Maybe in the introductory paragraph above say \"We _will_ provide\"",
        "createdAt" : "2019-04-24T17:04:53Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e8e20172-a139-4644-8006-5c5c5239ba5d",
        "parentId" : "99fd94c1-5c76-4075-a5e3-e2c8f49a0ba1",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "clarified.",
        "createdAt" : "2019-04-25T08:14:01Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,"
  },
  {
    "id" : "958147c3-6ef0-4606-98e5-8ebe3b4ed511",
    "prId" : 440,
    "comments" : [
      {
        "id" : "3f7a3e5f-ba49-4bcf-a0f4-06a165de5603",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Given this, I think it makes sense to have these instructions _first_, then the architectural overview _later_. It could even be its own page.",
        "createdAt" : "2019-04-24T17:05:33Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\n+   which contains a complete example of a DAML Ledger backed by an in-memory\n+   key-value store. It builds on our Scala libraries and demonstrates how they\n+   can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+   For ledgers where data is shared between all participant nodes, we\n+   recommend using this example as a starting point for implementing your\n+   server and validator. For ledgers with stronger privacy models, this example\n+   can serve as an inspiration. You will need to dive deeper into how\n+   transactions are represented and how to communicate them to\n+   implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+   at the ledger level instead of just at the Ledger API level.\n+\n+Implementing your own server and validator requires a significant amount\n+of context to be learned before you can decide on your architecture and\n+implement it.\n+\n+\n+Getting started\n+---------------\n+\n+We recommend the following three steps to gain the knowledge necessary to\n+implement your own server and validator.\n+\n+1. Complete the :doc:`/getting-started/quickstart`.\n+2. Get an in-depth understanding of the :doc:`/concepts/ledger-model/index`.\n+3. Build a mental model of how the :doc:`/app-dev/ledger-api-introduction/index`\n+   is used to build DAML Applications.\n+\n+\n+.. _integration-kit_writing_code:\n+\n+Deciding on the architecture and writing the code\n+-------------------------------------------------\n+\n+Once you've completed the above steps, we recommend following these four steps\n+to implement your own server and validator.\n+\n+1. Clone our example DAML Ledger backed by an in-memory key-value store from\n+   the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+   **TODO (ALPHA):** create this example repository\n+   (`issue <https://github.com/digital-asset/daml/issues/139>`__)\n+\n+2. Read the example code jointly with"
  },
  {
    "id" : "352d9918-ccf3-479c-92f5-bcc8635d1f85",
    "prId" : 440,
    "comments" : [
      {
        "id" : "842ddfbf-d9d3-4ff7-bf06-d0e27134a142",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I think this content could do with its own heading - something like `Resources to help with ledger development`- and it can go further down, after the 'getting started' and 'deciding on the architecture' instructions. The reason being, those two sections are effectively acting as an index.",
        "createdAt" : "2019-04-24T17:07:23Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific"
  },
  {
    "id" : "f38edd13-1159-44c3-9b0b-bf007864bc4a",
    "prId" : 440,
    "comments" : [
      {
        "id" : "e0254502-ed9b-4b0e-8d3f-58768f7f7d7d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This seems like a slightly odd place to ask for feedback - it's a bit randomly in the middle of the page. ",
        "createdAt" : "2019-04-24T17:08:22Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe335b83-9185-4425-96da-1d7aa5182668",
        "parentId" : "e0254502-ed9b-4b0e-8d3f-58768f7f7d7d",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "adjusted. wanted them to know how to reach out for help.",
        "createdAt" : "2019-04-25T08:28:31Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,371 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+.. _integration-kit:\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we though strongly recommend to use our integration kit and follow\n+the guides below for\n+:ref:`implementing <integration-kit_implementing>`,\n+:ref:`deploying <integration-kit_deploying>`,\n+:ref:`testing <integration-kit_testing>`, and\n+:ref:`benchmarking <integration-kit_benchmarking>` your own DAML Ledger\n+server. This way you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+.. _integration-kit_status-and_roadmap:\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later. The roadmap below\n+explains what we mean by these different statuses, and what's missing to\n+progress.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  courageous third-parties. If you are one of these pioneers, then we are glad\n+  to have you on-board, provided your are OK with the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to design uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+\n+  Below is the list of known missing work to reach ALPHA status. You can\n+  watch this GitHub issue to track our progress towards completing it.\n+\n+  - Complete the **TODO (ALPHA)** items in this documentation.\n+  - Release the artifacts referenced in this documentation jointly with the\n+    DAML SDK and create self-contained DAML integration example in the\n+    `digital-asset/daml-on-x-example\n+    <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository.\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)\n+  - Implement the support for ledger-effective-time checks in the\n+    ``participant-state`` interface\n+    (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/385>`__)\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have\n+\n+  - hardened our test tooling,\n+  - built tooling for benchmarking DAML ledgers,\n+  - completed several integrations of DAML for different ledgers, and\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. This can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation.\n+\n+1. We provide Scala libraries for validating DAML transactions and serving the\n+   Ledger API given implementations of two specific interfaces. See\n+   :ref:`below <integration-kit_library_overview>` for an overview of these\n+   libraries.\n+\n+2. We provide the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__ GitHub repository,\n+   which contains a complete example of a DAML Ledger backed by an in-memory\n+   key-value store. It builds on our Scala libraries and demonstrates how they\n+   can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+   For ledgers where data is shared between all participant nodes, we\n+   recommend using this example as a starting point for implementing your\n+   server and validator. For ledgers with stronger privacy models, this example\n+   can serve as an inspiration. You will need to dive deeper into how\n+   transactions are represented and how to communicate them to\n+   implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+   at the ledger level instead of just at the Ledger API level.\n+\n+Implementing your own server and validator requires a significant amount\n+of context to be learned before you can decide on your architecture and\n+implement it.\n+\n+\n+Getting started\n+---------------\n+\n+We recommend the following three steps to gain the knowledge necessary to\n+implement your own server and validator.\n+\n+1. Complete the :doc:`/getting-started/quickstart`.\n+2. Get an in-depth understanding of the :doc:`/concepts/ledger-model/index`.\n+3. Build a mental model of how the :doc:`/app-dev/ledger-api-introduction/index`\n+   is used to build DAML Applications.\n+\n+\n+.. _integration-kit_writing_code:\n+\n+Deciding on the architecture and writing the code\n+-------------------------------------------------\n+\n+Once you've completed the above steps, we recommend following these four steps\n+to implement your own server and validator.\n+\n+1. Clone our example DAML Ledger backed by an in-memory key-value store from\n+   the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+   **TODO (ALPHA):** create this example repository\n+   (`issue <https://github.com/digital-asset/daml/issues/139>`__)\n+\n+2. Read the example code jointly with\n+   the `Architectural overview`_ given above and\n+   the `Library infrastructure overview`_ given below.\n+\n+3. Combine all the knowledge gained to decide on the architecture for your\n+   DAML on `X` ledger.\n+\n+4. Implement your architecture; and let the world know about it by creating a\n+   PR against the\n+   `digital-asset/daml <https://github.com/digital-asset/daml>`__ repository\n+   to add your ledger to the `DAML Ledger overview`_.\n+\n+Use the feedback form on this documentation page or GitHub issues on the"
  },
  {
    "id" : "2d723c25-1b48-4cb3-a650-74760e946b6b",
    "prId" : 440,
    "comments" : [
      {
        "id" : "5ce2ced5-bd44-4407-b557-945bc20d1c5f",
        "parentId" : null,
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "`our underlying ledger` is confusing. My understanding is that all `X` things are provided by implementors. \r\n```suggestion\r\n  are the services which underlie your ledger,\r\n```",
        "createdAt" : "2019-04-25T08:47:08Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c0d7d4c6-be76-44e1-acde-fd28b37538ab",
        "parentId" : "5ce2ced5-bd44-4407-b557-945bc20d1c5f",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-26T10:11:52Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,375 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we strongly recommend to use our integration kit and following\n+the guides below to\n+\n+- :ref:`implement <integration-kit_implementing>`\n+- :ref:`deploy <integration-kit_deploying>`\n+- :ref:`test <integration-kit_testing>`\n+- :ref:`benchmark <integration-kit_benchmarking>`\n+\n+your own DAML Ledger server.\n+\n+Using these guides, you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later.\n+The roadmap below explains what we mean by these different statuses, and\n+what's missing to progress.\n+Changes to the DAML Integration Kit are described in the :doc:`/support/release-notes`.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  third-parties willing to accept the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to introduce APIs\n+    for uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+  You can get into contact with us using the feedback form on this\n+  documentation page or by creating issues or pull-requests against the `digital-asset/daml\n+  <https://github.com/digital-asset/daml>`__ GitHub repository.\n+\n+  Use this `GitHub milestone <https://github.com/digital-asset/daml/milestone/4>`__\n+  to see the work outstanding to reach ALPHA status.\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have:\n+\n+  - hardened our test tooling\n+  - built tooling for benchmarking DAML ledgers\n+  - completed several integrations of DAML for different ledgers\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers\n+\n+  Use this `GitHub milestone <https://github.com/digital-asset/daml/milestone/13>`__\n+  to see the work outstanding to reach BETA status.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. The backing ledger can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation:\n+\n+- Scala libraries for validating DAML transactions and serving the\n+  Ledger API given implementations of two specific interfaces. See\n+  the `Library infrastructure overview`_ for an overview of these\n+  libraries.\n+\n+- A complete example of a DAML Ledger backed by an in-memory key-value store,\n+  in the\n+  `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__\n+  GitHub repository.\n+  It builds on our Scala libraries and demonstrates how they\n+  can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+  **TODO (ALPHA):** actually create this repository\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)!\n+\n+  For ledgers where data is shared between all participant nodes, we\n+  recommend using this example as a starting point for implementing your\n+  server and validator.\n+\n+  For ledgers with stronger privacy models, this example\n+  can serve as an inspiration. You will need to dive deeper into how\n+  transactions are represented and how to communicate them to\n+  implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+  at the ledger level instead of just at the Ledger API level.\n+\n+\n+\n+Prerequisite knowledge\n+----------------------\n+\n+Implementing your own server and validator requires a significant amount\n+of context to be learned before you can decide on your architecture and\n+implement it. Follow these three steps to acquire this context.\n+\n+1. Complete the :doc:`/getting-started/quickstart`.\n+2. Get an in-depth understanding of the :doc:`/concepts/ledger-model/index`.\n+3. Build a mental model of how the :doc:`/app-dev/ledger-api-introduction/index`\n+   is used to build DAML Applications.\n+\n+\n+.. _integration-kit_writing_code:\n+\n+Deciding on the architecture and writing the code\n+-------------------------------------------------\n+\n+Once you've completed the above steps, we recommend following these four steps\n+to implement your own server and validator.\n+\n+1. Clone our example DAML Ledger backed by an in-memory key-value store from\n+   the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+   **TODO (ALPHA):** create this example repository\n+   (`issue <https://github.com/digital-asset/daml/issues/139>`__)\n+\n+2. Read the example code jointly with\n+   the `Architectural overview`_ given above and\n+   the `Library infrastructure overview`_ given below.\n+\n+3. Combine all the knowledge gained to decide on the architecture for your\n+   DAML on `X` ledger.\n+\n+4. Implement your architecture; and let the world know about it by creating a\n+   PR against the\n+   `digital-asset/daml <https://github.com/digital-asset/daml>`__ repository\n+   to add your ledger to the `DAML Ledger overview`_.\n+\n+If you need help, then feel free to use the feedback form on this documentation page or GitHub issues on the\n+`digital-asset/daml <https://github.com/digital-asset/daml>`__ repository to\n+get into contact with us.\n+\n+\n+Library infrastructure overview\n+-------------------------------\n+\n+We provide the following four Scala libraries to help you implement your\n+server and validator. They are released as part of the DAML SDK. Changes\n+to them are explained as part of the :doc:`/support/release-notes`.\n+As explained in :ref:`integration-kit_writing_code`,\n+this section is best read jointly with the code in\n+`digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+``participant-state.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/participant-state/src/main/scala/com/daml/ledger/participant/state/v1/package.scala>`__)\n+  contains interfaces abstracting over the state of\n+  a participant node relevant for a DAML Ledger API server. These are the\n+  interfaces whose implementation is specific to a particular `X` ledger. These\n+  interfaces are optimized for ease of implementation.\n+``participant-state-index.jar`` (`source code <https://github.com/digital-asset/daml/tree/master/ledger/participant-state-index>`__)\n+  contains code for reading the abstract state\n+  of a participant node and indexing it to satisfy the read access\n+  patterns required for serving the Ledger API. The library provides both\n+  an interface enumerating all read access methods and an in-memory\n+  reference implementation of that interface.\n+  We expect to provide a persistent, SQL-backed index in the future\n+  (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/581>`__).\n+``api-server-damlonx.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/api-server-damlonx/src/main/scala/com/daml/ledger/api/server/damlonx/Server.scala>`__)\n+  contains code that implements a DAML Ledger API\n+  server given implementations of the interfaces in ``participant-state.jar``.\n+``daml-engine.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/daml-lf/engine/src/main/scala/com/digitalasset/daml/lf/engine/Engine.scala>`__)\n+  contains code for serializing and deserializing DAML\n+  transactions and for validating them. An `<X>-daml-validator` is typically\n+  implemented by wrapping this code in the `X`-ledger's SDK for building\n+  transaction validators. ``daml-engine.jar`` also contains\n+  code for interpreting commands sent over the Ledger API. It is used\n+  by the `daml-on-<X>-server` to construct the transactions submitted\n+  to its participant node.\n+\n+The following diagram shows how the classes and interfaces provided by these\n+libraries are typically combined to instantiate a DAML Ledger API server\n+backed by an `X` ledger.\n+\n+.. image:: images/server-classes-and-interfaces.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/04239d8e-70ec-4734-b943-9780731fa704\n+\n+The diagram uses boxes labeled with fully qualified class names to denote class instances.\n+It uses solid arrows labeled with fully qualified interface names to denote that an instance\n+depends on another instance providing that interface. It uses dashed arrows to\n+denote that a class instance provides or depends on particular services. It\n+uses boxes embedded in other boxes to denote that the outer class instance\n+creates the contained instances.\n+\n+We explain the elements of the diagram in turn. For brevity, we drop prefixes\n+of their qualified names where unambiguous.\n+\n+:doc:`/app-dev/ledger-api-introduction/index`\n+  is the collection of gRPC\n+  services that you would like your `daml-on-<X>-server` to provide.\n+``<X> services``\n+  are the services provided by our underlying ledger,"
  },
  {
    "id" : "dbdaa960-c1e1-4fe1-945a-583ed0f2cefd",
    "prId" : 440,
    "comments" : [
      {
        "id" : "e0b56fbb-e58c-4d29-bcc1-23ad77e136dd",
        "parentId" : null,
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "```suggestion\r\n  is an interface abstracting over the mechanism to submit\r\n```\r\nThe interface abstracts away (or over) the mechanism which implements X, while provides an ability to do X at higher level.",
        "createdAt" : "2019-04-25T08:49:22Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ad8f64d1-827c-4ab0-9513-501c4ef35741",
        "parentId" : "e0b56fbb-e58c-4d29-bcc1-23ad77e136dd",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-26T10:12:20Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,375 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we strongly recommend to use our integration kit and following\n+the guides below to\n+\n+- :ref:`implement <integration-kit_implementing>`\n+- :ref:`deploy <integration-kit_deploying>`\n+- :ref:`test <integration-kit_testing>`\n+- :ref:`benchmark <integration-kit_benchmarking>`\n+\n+your own DAML Ledger server.\n+\n+Using these guides, you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later.\n+The roadmap below explains what we mean by these different statuses, and\n+what's missing to progress.\n+Changes to the DAML Integration Kit are described in the :doc:`/support/release-notes`.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  third-parties willing to accept the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to introduce APIs\n+    for uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+  You can get into contact with us using the feedback form on this\n+  documentation page or by creating issues or pull-requests against the `digital-asset/daml\n+  <https://github.com/digital-asset/daml>`__ GitHub repository.\n+\n+  Use this `GitHub milestone <https://github.com/digital-asset/daml/milestone/4>`__\n+  to see the work outstanding to reach ALPHA status.\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have:\n+\n+  - hardened our test tooling\n+  - built tooling for benchmarking DAML ledgers\n+  - completed several integrations of DAML for different ledgers\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers\n+\n+  Use this `GitHub milestone <https://github.com/digital-asset/daml/milestone/13>`__\n+  to see the work outstanding to reach BETA status.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. The backing ledger can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation:\n+\n+- Scala libraries for validating DAML transactions and serving the\n+  Ledger API given implementations of two specific interfaces. See\n+  the `Library infrastructure overview`_ for an overview of these\n+  libraries.\n+\n+- A complete example of a DAML Ledger backed by an in-memory key-value store,\n+  in the\n+  `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__\n+  GitHub repository.\n+  It builds on our Scala libraries and demonstrates how they\n+  can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+  **TODO (ALPHA):** actually create this repository\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)!\n+\n+  For ledgers where data is shared between all participant nodes, we\n+  recommend using this example as a starting point for implementing your\n+  server and validator.\n+\n+  For ledgers with stronger privacy models, this example\n+  can serve as an inspiration. You will need to dive deeper into how\n+  transactions are represented and how to communicate them to\n+  implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+  at the ledger level instead of just at the Ledger API level.\n+\n+\n+\n+Prerequisite knowledge\n+----------------------\n+\n+Implementing your own server and validator requires a significant amount\n+of context to be learned before you can decide on your architecture and\n+implement it. Follow these three steps to acquire this context.\n+\n+1. Complete the :doc:`/getting-started/quickstart`.\n+2. Get an in-depth understanding of the :doc:`/concepts/ledger-model/index`.\n+3. Build a mental model of how the :doc:`/app-dev/ledger-api-introduction/index`\n+   is used to build DAML Applications.\n+\n+\n+.. _integration-kit_writing_code:\n+\n+Deciding on the architecture and writing the code\n+-------------------------------------------------\n+\n+Once you've completed the above steps, we recommend following these four steps\n+to implement your own server and validator.\n+\n+1. Clone our example DAML Ledger backed by an in-memory key-value store from\n+   the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+   **TODO (ALPHA):** create this example repository\n+   (`issue <https://github.com/digital-asset/daml/issues/139>`__)\n+\n+2. Read the example code jointly with\n+   the `Architectural overview`_ given above and\n+   the `Library infrastructure overview`_ given below.\n+\n+3. Combine all the knowledge gained to decide on the architecture for your\n+   DAML on `X` ledger.\n+\n+4. Implement your architecture; and let the world know about it by creating a\n+   PR against the\n+   `digital-asset/daml <https://github.com/digital-asset/daml>`__ repository\n+   to add your ledger to the `DAML Ledger overview`_.\n+\n+If you need help, then feel free to use the feedback form on this documentation page or GitHub issues on the\n+`digital-asset/daml <https://github.com/digital-asset/daml>`__ repository to\n+get into contact with us.\n+\n+\n+Library infrastructure overview\n+-------------------------------\n+\n+We provide the following four Scala libraries to help you implement your\n+server and validator. They are released as part of the DAML SDK. Changes\n+to them are explained as part of the :doc:`/support/release-notes`.\n+As explained in :ref:`integration-kit_writing_code`,\n+this section is best read jointly with the code in\n+`digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+``participant-state.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/participant-state/src/main/scala/com/daml/ledger/participant/state/v1/package.scala>`__)\n+  contains interfaces abstracting over the state of\n+  a participant node relevant for a DAML Ledger API server. These are the\n+  interfaces whose implementation is specific to a particular `X` ledger. These\n+  interfaces are optimized for ease of implementation.\n+``participant-state-index.jar`` (`source code <https://github.com/digital-asset/daml/tree/master/ledger/participant-state-index>`__)\n+  contains code for reading the abstract state\n+  of a participant node and indexing it to satisfy the read access\n+  patterns required for serving the Ledger API. The library provides both\n+  an interface enumerating all read access methods and an in-memory\n+  reference implementation of that interface.\n+  We expect to provide a persistent, SQL-backed index in the future\n+  (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/581>`__).\n+``api-server-damlonx.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/api-server-damlonx/src/main/scala/com/daml/ledger/api/server/damlonx/Server.scala>`__)\n+  contains code that implements a DAML Ledger API\n+  server given implementations of the interfaces in ``participant-state.jar``.\n+``daml-engine.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/daml-lf/engine/src/main/scala/com/digitalasset/daml/lf/engine/Engine.scala>`__)\n+  contains code for serializing and deserializing DAML\n+  transactions and for validating them. An `<X>-daml-validator` is typically\n+  implemented by wrapping this code in the `X`-ledger's SDK for building\n+  transaction validators. ``daml-engine.jar`` also contains\n+  code for interpreting commands sent over the Ledger API. It is used\n+  by the `daml-on-<X>-server` to construct the transactions submitted\n+  to its participant node.\n+\n+The following diagram shows how the classes and interfaces provided by these\n+libraries are typically combined to instantiate a DAML Ledger API server\n+backed by an `X` ledger.\n+\n+.. image:: images/server-classes-and-interfaces.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/04239d8e-70ec-4734-b943-9780731fa704\n+\n+The diagram uses boxes labeled with fully qualified class names to denote class instances.\n+It uses solid arrows labeled with fully qualified interface names to denote that an instance\n+depends on another instance providing that interface. It uses dashed arrows to\n+denote that a class instance provides or depends on particular services. It\n+uses boxes embedded in other boxes to denote that the outer class instance\n+creates the contained instances.\n+\n+We explain the elements of the diagram in turn. For brevity, we drop prefixes\n+of their qualified names where unambiguous.\n+\n+:doc:`/app-dev/ledger-api-introduction/index`\n+  is the collection of gRPC\n+  services that you would like your `daml-on-<X>-server` to provide.\n+``<X> services``\n+  are the services provided by our underlying ledger,\n+  which you aim to leverage to build your `daml-on-<X>-server`.\n+``<x>.LedgerApiServer``\n+  is the class whose main method or constructor\n+  creates the contained instances and wires them up to provide the Ledger API\n+  backed by the ``<X> services``. You need to implement this for your DAML on\n+  `X` ledger.\n+``WriteService`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/participant-state/src/main/scala/com/daml/ledger/participant/state/v1/WriteService.scala>`_)\n+  is an interface abstracting over the ability to submit"
  },
  {
    "id" : "7fa3fb96-d0c1-458c-a904-530beae7abed",
    "prId" : 440,
    "comments" : [
      {
        "id" : "568f45ca-b9ca-4300-97f2-aa4347def97c",
        "parentId" : null,
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "```suggestion\r\n  is an interface abstracting over the mechanism to subscribe to\r\n```",
        "createdAt" : "2019-04-25T08:52:50Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed64d7f7-2ac9-46fc-b8e7-8514ff2c1e32",
        "parentId" : "568f45ca-b9ca-4300-97f2-aa4347def97c",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-26T10:12:12Z",
        "updatedAt" : "2019-04-26T10:50:54Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1639605b1899ab12b21e81aedbaefbb96585a05",
    "line" : 313,
    "diffHunk" : "@@ -0,0 +1,375 @@\n+.. Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+DAML Integration Kit - PRE-ALPHA\n+################################\n+\n+The DAML Integration Kit allows third-party ledger developers to\n+implement a DAML Ledger on top of their distributed-ledger or database of\n+choice. How does that work?\n+\n+A DAML Ledger implementation is a server serving the\n+:doc:`/app-dev/ledger-api-introduction/index` as per the semantics defined in\n+the :doc:`/concepts/ledger-model/index` and the\n+`DAML-LF specification <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>`_.\n+Theoretically, you could\n+implement such a server from scratch following the above documentation.\n+Practically, we strongly recommend to use our integration kit and following\n+the guides below to\n+\n+- :ref:`implement <integration-kit_implementing>`\n+- :ref:`deploy <integration-kit_deploying>`\n+- :ref:`test <integration-kit_testing>`\n+- :ref:`benchmark <integration-kit_benchmarking>`\n+\n+your own DAML Ledger server.\n+\n+Using these guides, you can focus on your distributed-ledger or database of\n+choice and reuse our DAML Ledger server and DAML interpreter code for\n+implementing the DAML Ledger API.\n+\n+\n+Status and roadmap\n+******************\n+\n+The current status of the integration kit is PRE-ALPHA. We expect it to evolve\n+to ALPHA soon, BETA later, and GA quite a bit later.\n+The roadmap below explains what we mean by these different statuses, and\n+what's missing to progress.\n+Changes to the DAML Integration Kit are described in the :doc:`/support/release-notes`.\n+\n+PRE-ALPHA (current status)\n+  We develop the DAML Integration Kit in an open-first model. The PRE-ALPHA\n+  status means that there is enough information for interested third-parties\n+  to follow the *development* of the DAML integration kit. **We do though not\n+  make any stability guarantees!** Moreover the documentation is expected to\n+  contain holes, which are usually linked to GitHub issues.\n+\n+ALPHA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/658>`__)\n+  Once we reach ALPHA status, the DAML Integration Kit is ready to be used by\n+  third-parties willing to accept the following caveats:\n+\n+  - The architecture includes everything required to run DAML Applications in\n+    production. However, it misses support for testing DAML Applications in a\n+    uniform way against different DAML Ledgers. Concretely this means that\n+    Ledger API authorization, package upload, party on-boarding, ledger reset,\n+    and time manipulation are specific to each DAML Ledger. The reason\n+    for this is that it requires us to introduce APIs\n+    for uniform *administrative DAML ledger access*,\n+    which is different from the uniform *per-party DAML ledger access* that the\n+    DAML Ledger API provides. We will address this before reaching BETA\n+    status.\n+  - The architecture is likely to change due to learnings from pioneers like\n+    you! Where possible we strive to make these changes backwards compatible.\n+    This might though not always be possible.\n+  - The documentation might be spotty in some places, and you might have to\n+    infer some of the documentation from the code.\n+  - Some of our code might be fresh off the press and might therefore have a\n+    higher rate of bugs.\n+\n+  That said: we highly value your feedback and input to direct our attention\n+  to where it provides the most value!\n+  You can get into contact with us using the feedback form on this\n+  documentation page or by creating issues or pull-requests against the `digital-asset/daml\n+  <https://github.com/digital-asset/daml>`__ GitHub repository.\n+\n+  Use this `GitHub milestone <https://github.com/digital-asset/daml/milestone/4>`__\n+  to see the work outstanding to reach ALPHA status.\n+\n+\n+BETA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/660>`__)\n+  For us, BETA status means that we have architectural stability and solid\n+  documentation in place. At this point, third-parties should have everything\n+  they need to integrate DAML with their ledger of choice completely on their\n+  own.\n+\n+  Before reaching BETA status, we expect to have:\n+\n+  - hardened our test tooling\n+  - built tooling for benchmarking DAML ledgers\n+  - completed several integrations of DAML for different ledgers\n+  - implemented uniform *administrative DAML ledger access* to provide a\n+    portable way for testing DAML applications against different DAML ledgers\n+\n+  Use this `GitHub milestone <https://github.com/digital-asset/daml/milestone/13>`__\n+  to see the work outstanding to reach BETA status.\n+\n+GA (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/661>`__)\n+  For us GA (General Availability) means that there are several\n+  production-ready DAML ledgers built using the DAML Integration Kit. We\n+  expect to reach GA in 2019.\n+\n+\n+DAML Ledger overview\n+====================\n+\n+**TODO (ALPHA):** explain what ledgers exist; and what state they are in.\n+(`GitHub issue <https://github.com/digital-asset/daml/issues/673>`__)\n+\n+\n+.. _integration-kit_implementing:\n+\n+Implementing your own DAML Ledger\n+*********************************\n+\n+\n+Architectural overview\n+======================\n+\n+We explain how to implement a DAML ledger backed by a specific\n+ledger `X`. The backing ledger can be a proper distributed ledger or also just a database.\n+The goal of this implementation is to allow multiple DAML applications, which are potentially run by\n+different entities, to execute multi-party workflows using the ledger `X`. We\n+illustrate this in the following diagram.\n+\n+.. image:: images/architecture-overview.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/69799877-4e80-444d-96a3-3e90814e94df\n+\n+We assume that the `X` ledger allows entities to participate in the\n+evolution of the ledger via particular nodes. In the remainder of this\n+documentation, we call these nodes `participant nodes`.\n+\n+The boxes labeled `daml-on-<X>-server` denote the DAML Ledger API\n+servers, which implement the DAML Ledger API on top of the services provided\n+by the `X` participant nodes.\n+\n+The boxes labeled `<X>-daml-validator` denote `X`-specific DAML transaction\n+validation services. In a distributed ledger they provide the ability for\n+nodes to :doc:`validate DAML transactions </concepts/ledger-model/ledger-integrity>`\n+at the appropriate stage in the `X` ledger's transaction commit process.\n+Whether they are needed, by what nodes they are used, and whether they are run\n+in-process or out-of-process depends on the `X` ledger's architecture. Above\n+we depict a common case where the participant nodes jointly maintain the\n+ledger's integrity and therefore need to validate DAML transactions.\n+\n+\n+Message flow\n+------------\n+\n+**TODO (BETA):**\n+\n+- explain to readers the life of a transaction at a high-level, so they have a\n+  mental framework in place when looking at the example code.\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/672>`__)\n+\n+\n+Implementing your server and validator\n+======================================\n+\n+Each `X` ledger requires at least the implementation of a specific\n+`daml-on-<X>-server`. It might also require the implementation of a\n+`<X>-daml-validator` as explained above. We provide two kinds of code to\n+simplify their implementation:\n+\n+- Scala libraries for validating DAML transactions and serving the\n+  Ledger API given implementations of two specific interfaces. See\n+  the `Library infrastructure overview`_ for an overview of these\n+  libraries.\n+\n+- A complete example of a DAML Ledger backed by an in-memory key-value store,\n+  in the\n+  `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__\n+  GitHub repository.\n+  It builds on our Scala libraries and demonstrates how they\n+  can be assembled to serve the Ledger API and validate DAML transactions.\n+\n+  **TODO (ALPHA):** actually create this repository\n+  (`GitHub issue <https://github.com/digital-asset/daml/issues/139>`__)!\n+\n+  For ledgers where data is shared between all participant nodes, we\n+  recommend using this example as a starting point for implementing your\n+  server and validator.\n+\n+  For ledgers with stronger privacy models, this example\n+  can serve as an inspiration. You will need to dive deeper into how\n+  transactions are represented and how to communicate them to\n+  implement :doc:`DAML's privacy model </concepts/ledger-model/ledger-privacy>`\n+  at the ledger level instead of just at the Ledger API level.\n+\n+\n+\n+Prerequisite knowledge\n+----------------------\n+\n+Implementing your own server and validator requires a significant amount\n+of context to be learned before you can decide on your architecture and\n+implement it. Follow these three steps to acquire this context.\n+\n+1. Complete the :doc:`/getting-started/quickstart`.\n+2. Get an in-depth understanding of the :doc:`/concepts/ledger-model/index`.\n+3. Build a mental model of how the :doc:`/app-dev/ledger-api-introduction/index`\n+   is used to build DAML Applications.\n+\n+\n+.. _integration-kit_writing_code:\n+\n+Deciding on the architecture and writing the code\n+-------------------------------------------------\n+\n+Once you've completed the above steps, we recommend following these four steps\n+to implement your own server and validator.\n+\n+1. Clone our example DAML Ledger backed by an in-memory key-value store from\n+   the `digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+   **TODO (ALPHA):** create this example repository\n+   (`issue <https://github.com/digital-asset/daml/issues/139>`__)\n+\n+2. Read the example code jointly with\n+   the `Architectural overview`_ given above and\n+   the `Library infrastructure overview`_ given below.\n+\n+3. Combine all the knowledge gained to decide on the architecture for your\n+   DAML on `X` ledger.\n+\n+4. Implement your architecture; and let the world know about it by creating a\n+   PR against the\n+   `digital-asset/daml <https://github.com/digital-asset/daml>`__ repository\n+   to add your ledger to the `DAML Ledger overview`_.\n+\n+If you need help, then feel free to use the feedback form on this documentation page or GitHub issues on the\n+`digital-asset/daml <https://github.com/digital-asset/daml>`__ repository to\n+get into contact with us.\n+\n+\n+Library infrastructure overview\n+-------------------------------\n+\n+We provide the following four Scala libraries to help you implement your\n+server and validator. They are released as part of the DAML SDK. Changes\n+to them are explained as part of the :doc:`/support/release-notes`.\n+As explained in :ref:`integration-kit_writing_code`,\n+this section is best read jointly with the code in\n+`digital-asset/daml-on-x-example <https://github.com/digital-asset/daml-on-x-example>`__.\n+\n+``participant-state.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/participant-state/src/main/scala/com/daml/ledger/participant/state/v1/package.scala>`__)\n+  contains interfaces abstracting over the state of\n+  a participant node relevant for a DAML Ledger API server. These are the\n+  interfaces whose implementation is specific to a particular `X` ledger. These\n+  interfaces are optimized for ease of implementation.\n+``participant-state-index.jar`` (`source code <https://github.com/digital-asset/daml/tree/master/ledger/participant-state-index>`__)\n+  contains code for reading the abstract state\n+  of a participant node and indexing it to satisfy the read access\n+  patterns required for serving the Ledger API. The library provides both\n+  an interface enumerating all read access methods and an in-memory\n+  reference implementation of that interface.\n+  We expect to provide a persistent, SQL-backed index in the future\n+  (`tracking GitHub issue <https://github.com/digital-asset/daml/issues/581>`__).\n+``api-server-damlonx.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/api-server-damlonx/src/main/scala/com/daml/ledger/api/server/damlonx/Server.scala>`__)\n+  contains code that implements a DAML Ledger API\n+  server given implementations of the interfaces in ``participant-state.jar``.\n+``daml-engine.jar`` (`source code <https://github.com/digital-asset/daml/blob/master/daml-lf/engine/src/main/scala/com/digitalasset/daml/lf/engine/Engine.scala>`__)\n+  contains code for serializing and deserializing DAML\n+  transactions and for validating them. An `<X>-daml-validator` is typically\n+  implemented by wrapping this code in the `X`-ledger's SDK for building\n+  transaction validators. ``daml-engine.jar`` also contains\n+  code for interpreting commands sent over the Ledger API. It is used\n+  by the `daml-on-<X>-server` to construct the transactions submitted\n+  to its participant node.\n+\n+The following diagram shows how the classes and interfaces provided by these\n+libraries are typically combined to instantiate a DAML Ledger API server\n+backed by an `X` ledger.\n+\n+.. image:: images/server-classes-and-interfaces.svg\n+\n+.. original: https://www.lucidchart.com/invitations/accept/04239d8e-70ec-4734-b943-9780731fa704\n+\n+The diagram uses boxes labeled with fully qualified class names to denote class instances.\n+It uses solid arrows labeled with fully qualified interface names to denote that an instance\n+depends on another instance providing that interface. It uses dashed arrows to\n+denote that a class instance provides or depends on particular services. It\n+uses boxes embedded in other boxes to denote that the outer class instance\n+creates the contained instances.\n+\n+We explain the elements of the diagram in turn. For brevity, we drop prefixes\n+of their qualified names where unambiguous.\n+\n+:doc:`/app-dev/ledger-api-introduction/index`\n+  is the collection of gRPC\n+  services that you would like your `daml-on-<X>-server` to provide.\n+``<X> services``\n+  are the services provided by our underlying ledger,\n+  which you aim to leverage to build your `daml-on-<X>-server`.\n+``<x>.LedgerApiServer``\n+  is the class whose main method or constructor\n+  creates the contained instances and wires them up to provide the Ledger API\n+  backed by the ``<X> services``. You need to implement this for your DAML on\n+  `X` ledger.\n+``WriteService`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/participant-state/src/main/scala/com/daml/ledger/participant/state/v1/WriteService.scala>`_)\n+  is an interface abstracting over the ability to submit\n+  DAML transactions to the underlying `X` ledger via a participant node.\n+``ReadService`` (`source code <https://github.com/digital-asset/daml/blob/master/ledger/participant-state/src/main/scala/com/daml/ledger/participant/state/v1/ReadService.scala>`__)\n+  is an interface abstracting over the ability to subscribe to"
  }
]