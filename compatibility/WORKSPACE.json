[
  {
    "id" : "252564cf-d64e-4cac-b62e-1759aa97241c",
    "prId" : 5665,
    "comments" : [
      {
        "id" : "59b839ed-1680-41ec-918e-d4699ae6f493",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Why not use `@daml` instead of a symlink like done below for the Nix files?\r\n```suggestion\r\nload(\"@daml//bazel_tools:os_info.bzl\", \"os_info\")\r\n```\r\n",
        "createdAt" : "2020-04-23T09:50:45Z",
        "updatedAt" : "2020-04-23T10:46:39Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ed00a776-b6f5-4a5d-874b-e3986bce0923",
        "parentId" : "59b839ed-1680-41ec-918e-d4699ae6f493",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good point, I’ve switched to that. Thanks!",
        "createdAt" : "2020-04-23T10:06:32Z",
        "updatedAt" : "2020-04-23T10:46:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fae715204e6fbce3b32c31c7d03f3ca3a5de8700",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+workspace(name = \"compatibility\")\n+\n+# We import the main workspace for nix stuff and some shared Bazel rules.\n+# This is mainly so we don’t have to symlink a bunch of files.\n+# Note that you should never depend on targets from @daml.\n+local_repository(\n+    name = \"daml\",\n+    path = \"..\",\n+)\n+load(\"//bazel_tools:os_info.bzl\", \"os_info\")"
  },
  {
    "id" : "56cb1732-5634-4dee-8213-e91f8806d600",
    "prId" : 5665,
    "comments" : [
      {
        "id" : "d3b9599c-ee24-4db7-82d0-f9b0d412d892",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "With `nixpkgs_python_configure` this would also become redundant.",
        "createdAt" : "2020-04-23T09:55:39Z",
        "updatedAt" : "2020-04-23T10:46:39Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fae715204e6fbce3b32c31c7d03f3ca3a5de8700",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,113 @@\n+workspace(name = \"compatibility\")\n+\n+# We import the main workspace for nix stuff and some shared Bazel rules.\n+# This is mainly so we don’t have to symlink a bunch of files.\n+# Note that you should never depend on targets from @daml.\n+local_repository(\n+    name = \"daml\",\n+    path = \"..\",\n+)\n+load(\"//bazel_tools:os_info.bzl\", \"os_info\")\n+os_info(name = \"os_info\")\n+load(\"@os_info//:os_info.bzl\", \"is_darwin\", \"is_linux\", \"is_windows\")\n+\n+load(\"//:deps.bzl\", \"daml_deps\")\n+daml_deps()\n+\n+load(\"@rules_haskell//haskell:repositories.bzl\", \"rules_haskell_dependencies\")\n+rules_haskell_dependencies()\n+load(\n+    \"@rules_haskell//haskell:nixpkgs.bzl\",\n+    \"haskell_register_ghc_nixpkgs\",\n+)\n+\n+load(\n+    \"@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl\",\n+    \"nixpkgs_cc_configure\",\n+    \"nixpkgs_local_repository\",\n+    \"nixpkgs_package\",\n+)\n+common_nix_file_deps = [\n+    \"@daml//nix:bazel.nix\",\n+    \"@daml//nix:nixpkgs.nix\",\n+    \"@daml//nix:nixpkgs/default.nix\",\n+    \"@daml//nix:nixpkgs/default.src.json\",\n+]\n+nix_ghc_deps = common_nix_file_deps + [\n+    \"@daml//nix:ghc.nix\",\n+    \"@daml//nix:with-packages-wrapper.nix\",\n+    \"@daml//nix:overrides/ghc-8.6.5.nix\",\n+    \"@daml//nix:overrides/ghc-8.6.3-binary.nix\",\n+]\n+dev_env_nix_repos = {\n+    \"nixpkgs\": \"@nixpkgs\",\n+}\n+nixpkgs_local_repository(\n+    name = \"nixpkgs\",\n+    nix_file = \"@daml//nix:nixpkgs.nix\",\n+    nix_file_deps = [\n+        \"@daml//nix:nixpkgs/default.nix\",\n+        \"@daml//nix:nixpkgs/default.src.json\",\n+    ],\n+)\n+nixpkgs_cc_configure(\n+    nix_file = \"@daml//nix:bazel-cc-toolchain.nix\",\n+    nix_file_deps = common_nix_file_deps + [\n+        \"@daml//nix:bazel-cc-toolchain.nix\",\n+        \"@daml//nix:tools/bazel-cc-toolchain/default.nix\",\n+    ],\n+    repositories = dev_env_nix_repos,\n+)\n+\n+nixpkgs_package(\n+    name = \"glibc_locales\",\n+    attribute_path = \"glibcLocales\",\n+    build_file_content = \"\"\"\n+package(default_visibility = [\"//visibility:public\"])\n+filegroup(\n+    name = \"locale-archive\",\n+    srcs = [\"lib/locale/locale-archive\"],\n+)\n+\"\"\",\n+    nix_file = \"@daml//nix:bazel.nix\",\n+    nix_file_deps = common_nix_file_deps,\n+    repositories = dev_env_nix_repos,\n+) if is_linux else None\n+\n+haskell_register_ghc_nixpkgs(\n+    attribute_path = \"ghcStatic\",\n+    build_file = \"@io_tweag_rules_nixpkgs//nixpkgs:BUILD.pkg\",\n+    is_static = True,\n+    locale_archive = \"@glibc_locales//:locale-archive\",\n+    nix_file = \"@daml//nix:bazel.nix\",\n+    nix_file_deps = nix_ghc_deps,\n+    repositories = dev_env_nix_repos,\n+    version = \"8.6.5\",\n+)\n+\n+nixpkgs_package(\n+    name = \"python3_nix\",\n+    attribute_path = \"python3\",\n+    nix_file = \"@daml//nix:bazel.nix\",\n+    nix_file_deps = common_nix_file_deps,\n+    repositories = dev_env_nix_repos,\n+)"
  }
]