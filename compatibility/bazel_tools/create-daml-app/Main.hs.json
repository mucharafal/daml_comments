[
  {
    "id" : "d27af236-2e22-450c-9432-67f78f8496bd",
    "prId" : 7222,
    "comments" : [
      {
        "id" : "e7d0d4c3-6e48-476d-9907-0bff02110073",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Which one does it use if you don’t do that?",
        "createdAt" : "2020-09-07T11:45:50Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a58bcd18-a41f-420e-9897-6998dbe61dd0",
        "parentId" : "e7d0d4c3-6e48-476d-9907-0bff02110073",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "can't quite remember whether it tried a different path or couldn't find it at all.",
        "createdAt" : "2020-09-07T12:57:36Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "05a1d035c2e74f50ac256733c38d9f9a607b65d5",
    "line" : 146,
    "diffHunk" : "@@ -167,83 +181,128 @@ main = withTempDir $ \\yarnCache -> do\n         [ test getTools\n         ]\n   where\n-    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir -> do\n+    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir' -> do\n+        -- npm gets confused when the temporary directory is not under 'private' on mac.\n+        let tmpDir\n+              | isMac = \"/private\" <> tmpDir'\n+              | otherwise = tmpDir'\n         Tools{..} <- getTools\n         setEnv \"CI\" \"yes\" True\n         step \"Create app from template\"\n         withCurrentDirectory tmpDir $ do\n           callProcess damlBinary [\"new\", \"create-daml-app\", \"create-daml-app\"]\n         let cdaDir = tmpDir </> \"create-daml-app\"\n+        let uiDir = cdaDir </> \"ui\"\n         step \"Patch the application code with messaging feature\"\n         withCurrentDirectory cdaDir $ do\n           callProcessSilent patchPath [\"-p2\", \"-i\", messagingPatch]\n           forM_ [\"MessageEdit\", \"MessageList\"] $ \\messageComponent ->\n             assertFileExists (\"ui\" </> \"src\" </> \"components\" </> messageComponent <.> \"tsx\")\n         step \"Extract codegen output\"\n-        runConduitRes\n-            $ Conduit.sourceFile codegenPath\n-            .| Zlib.ungzip\n-            .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) (cdaDir </> \"daml.js\"))\n-        withCurrentDirectory (cdaDir </> \"ui\") $ do\n+        extractTarGz codegenPath $ uiDir </> \"daml.js\"\n+        -- we patch all the 'package.json' files to point to the local versions of the TypeScript\n+        -- libraries.\n+        genFiles <- listFilesRecursive $ uiDir </> \"daml.js\"\n+        forM_ [file | file <- genFiles, takeFileName file == \"package.json\"] (patchTsDependencies uiDir)\n+        withCurrentDirectory uiDir $ do\n           step \"Set up libraries and workspaces\"\n-          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/ui\"])\n-            [(DamlLedger, damlLedgerPath), (DamlReact, damlReactPath), (DamlTypes, damlTypesPath)]\n+          setupNpmEnv uiDir [(DamlTypes, damlTypesPath)\n+                            , (DamlLedger, damlLedgerPath)\n+                            , (DamlReact, damlReactPath)\n+                            ]\n           step \"Install Jest, Puppeteer and other dependencies\"\n           addTestDependencies \"package.json\" testDepsPath\n-          retry 3 (callProcessSilent yarnPath [\"install\"])\n+          patchTsDependencies uiDir \"package.json\"\n+          -- use '--scripts-prepend-node-path' to make sure we are using the correct 'node' binary"
  },
  {
    "id" : "d4374d3b-4b58-4e74-9549-3ad85f1df79f",
    "prId" : 7222,
    "comments" : [
      {
        "id" : "b99d3499-8477-49f7-9241-0780fc368c3d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we need this in this test but I don’t need seem to have it in PATH on my machine where I’ve installed NPM?",
        "createdAt" : "2020-09-07T11:46:46Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cfca1a10-5371-4309-ae11-c2780c97ee3a",
        "parentId" : "b99d3499-8477-49f7-9241-0780fc368c3d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "you won't have 'npm-cli.js' in your PATH because it's a wrapper from bazel for `npm`.",
        "createdAt" : "2020-09-07T12:58:38Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "05a1d035c2e74f50ac256733c38d9f9a607b65d5",
    "line" : 152,
    "diffHunk" : "@@ -167,83 +181,128 @@ main = withTempDir $ \\yarnCache -> do\n         [ test getTools\n         ]\n   where\n-    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir -> do\n+    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir' -> do\n+        -- npm gets confused when the temporary directory is not under 'private' on mac.\n+        let tmpDir\n+              | isMac = \"/private\" <> tmpDir'\n+              | otherwise = tmpDir'\n         Tools{..} <- getTools\n         setEnv \"CI\" \"yes\" True\n         step \"Create app from template\"\n         withCurrentDirectory tmpDir $ do\n           callProcess damlBinary [\"new\", \"create-daml-app\", \"create-daml-app\"]\n         let cdaDir = tmpDir </> \"create-daml-app\"\n+        let uiDir = cdaDir </> \"ui\"\n         step \"Patch the application code with messaging feature\"\n         withCurrentDirectory cdaDir $ do\n           callProcessSilent patchPath [\"-p2\", \"-i\", messagingPatch]\n           forM_ [\"MessageEdit\", \"MessageList\"] $ \\messageComponent ->\n             assertFileExists (\"ui\" </> \"src\" </> \"components\" </> messageComponent <.> \"tsx\")\n         step \"Extract codegen output\"\n-        runConduitRes\n-            $ Conduit.sourceFile codegenPath\n-            .| Zlib.ungzip\n-            .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) (cdaDir </> \"daml.js\"))\n-        withCurrentDirectory (cdaDir </> \"ui\") $ do\n+        extractTarGz codegenPath $ uiDir </> \"daml.js\"\n+        -- we patch all the 'package.json' files to point to the local versions of the TypeScript\n+        -- libraries.\n+        genFiles <- listFilesRecursive $ uiDir </> \"daml.js\"\n+        forM_ [file | file <- genFiles, takeFileName file == \"package.json\"] (patchTsDependencies uiDir)\n+        withCurrentDirectory uiDir $ do\n           step \"Set up libraries and workspaces\"\n-          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/ui\"])\n-            [(DamlLedger, damlLedgerPath), (DamlReact, damlReactPath), (DamlTypes, damlTypesPath)]\n+          setupNpmEnv uiDir [(DamlTypes, damlTypesPath)\n+                            , (DamlLedger, damlLedgerPath)\n+                            , (DamlReact, damlReactPath)\n+                            ]\n           step \"Install Jest, Puppeteer and other dependencies\"\n           addTestDependencies \"package.json\" testDepsPath\n-          retry 3 (callProcessSilent yarnPath [\"install\"])\n+          patchTsDependencies uiDir \"package.json\"\n+          -- use '--scripts-prepend-node-path' to make sure we are using the correct 'node' binary\n+          retry 3 (callProcessSilent npmPath [\"install\", \"--scripts-prepend-node-path\"])\n           step \"Run Puppeteer end-to-end tests\"\n-          copyFile testTsPath (cdaDir </> \"ui\" </> \"src\" </> \"index.test.ts\")\n-          callProcess yarnPath [\"run\", \"test\", \"--ci\", \"--all\"]\n+          copyFile testTsPath (uiDir </> \"src\" </> \"index.test.ts\")\n+          -- we need 'npm-cli.js' in the path for the following test"
  },
  {
    "id" : "c73a775e-70bc-4295-b13e-0f8988f08179",
    "prId" : 7222,
    "comments" : [
      {
        "id" : "d953a63e-da18-4553-9901-bf7a050190a3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I like `lens-aeson` for this kind of ad-hoc JSON manipulation but I’ll leave it up to you if you want to use it.",
        "createdAt" : "2020-09-07T11:50:51Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9f131a38-5db5-4cd5-8130-2518d37d6406",
        "parentId" : "d953a63e-da18-4553-9901-bf7a050190a3",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I didn't want to pull in the lens machinery for this pretty specific case.",
        "createdAt" : "2020-09-07T12:55:25Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "05a1d035c2e74f50ac256733c38d9f9a607b65d5",
    "line" : 201,
    "diffHunk" : "@@ -167,83 +181,128 @@ main = withTempDir $ \\yarnCache -> do\n         [ test getTools\n         ]\n   where\n-    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir -> do\n+    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir' -> do\n+        -- npm gets confused when the temporary directory is not under 'private' on mac.\n+        let tmpDir\n+              | isMac = \"/private\" <> tmpDir'\n+              | otherwise = tmpDir'\n         Tools{..} <- getTools\n         setEnv \"CI\" \"yes\" True\n         step \"Create app from template\"\n         withCurrentDirectory tmpDir $ do\n           callProcess damlBinary [\"new\", \"create-daml-app\", \"create-daml-app\"]\n         let cdaDir = tmpDir </> \"create-daml-app\"\n+        let uiDir = cdaDir </> \"ui\"\n         step \"Patch the application code with messaging feature\"\n         withCurrentDirectory cdaDir $ do\n           callProcessSilent patchPath [\"-p2\", \"-i\", messagingPatch]\n           forM_ [\"MessageEdit\", \"MessageList\"] $ \\messageComponent ->\n             assertFileExists (\"ui\" </> \"src\" </> \"components\" </> messageComponent <.> \"tsx\")\n         step \"Extract codegen output\"\n-        runConduitRes\n-            $ Conduit.sourceFile codegenPath\n-            .| Zlib.ungzip\n-            .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) (cdaDir </> \"daml.js\"))\n-        withCurrentDirectory (cdaDir </> \"ui\") $ do\n+        extractTarGz codegenPath $ uiDir </> \"daml.js\"\n+        -- we patch all the 'package.json' files to point to the local versions of the TypeScript\n+        -- libraries.\n+        genFiles <- listFilesRecursive $ uiDir </> \"daml.js\"\n+        forM_ [file | file <- genFiles, takeFileName file == \"package.json\"] (patchTsDependencies uiDir)\n+        withCurrentDirectory uiDir $ do\n           step \"Set up libraries and workspaces\"\n-          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/ui\"])\n-            [(DamlLedger, damlLedgerPath), (DamlReact, damlReactPath), (DamlTypes, damlTypesPath)]\n+          setupNpmEnv uiDir [(DamlTypes, damlTypesPath)\n+                            , (DamlLedger, damlLedgerPath)\n+                            , (DamlReact, damlReactPath)\n+                            ]\n           step \"Install Jest, Puppeteer and other dependencies\"\n           addTestDependencies \"package.json\" testDepsPath\n-          retry 3 (callProcessSilent yarnPath [\"install\"])\n+          patchTsDependencies uiDir \"package.json\"\n+          -- use '--scripts-prepend-node-path' to make sure we are using the correct 'node' binary\n+          retry 3 (callProcessSilent npmPath [\"install\", \"--scripts-prepend-node-path\"])\n           step \"Run Puppeteer end-to-end tests\"\n-          copyFile testTsPath (cdaDir </> \"ui\" </> \"src\" </> \"index.test.ts\")\n-          callProcess yarnPath [\"run\", \"test\", \"--ci\", \"--all\"]\n+          copyFile testTsPath (uiDir </> \"src\" </> \"index.test.ts\")\n+          -- we need 'npm-cli.js' in the path for the following test\n+          mbOldPath <- getEnv \"PATH\"\n+          setEnv \"PATH\" (takeDirectory npmPath <> (searchPathSeparator : fromMaybe \"\" mbOldPath)) True\n+          callProcess npmPath [\"run\", \"test\", \"--ci\", \"--all\", \"--scripts-prepend-node-path\"]\n \n addTestDependencies :: FilePath -> FilePath -> IO ()\n addTestDependencies packageJsonFile extraDepsFile = do\n     packageJson <- readJsonFile packageJsonFile\n     extraDeps <- readJsonFile extraDepsFile\n     let newPackageJson = Aeson.lodashMerge packageJson extraDeps\n-    Aeson.encodeFile packageJsonFile newPackageJson\n-  where\n-    readJsonFile :: FilePath -> IO Aeson.Value\n-    readJsonFile path = do\n-        -- Read file strictly to avoid lock being held when we subsequently write to it.\n-        mbContent <- Aeson.decodeFileStrict' path\n-        case mbContent of\n-            Nothing -> fail (\"Could not decode JSON object from \" <> path)\n-            Just val -> return val\n+    BSL.writeFile packageJsonFile (Aeson.encode newPackageJson)\n+\n+readJsonFile :: FilePath -> IO Aeson.Value\n+readJsonFile path = do\n+    -- Read file strictly to avoid lock being held when we subsequently write to it.\n+    content <- BSL.fromStrict <$> BS.readFile path\n+    case Aeson.decode content of\n+        Nothing -> error (\"Could not decode JSON object from \" <> path)\n+        Just val -> return val\n+\n+extractTarGz :: FilePath -> FilePath -> IO ()\n+extractTarGz targz outDir = do\n+    runConduitRes\n+        $ Conduit.sourceFile targz\n+        .| Zlib.ungzip\n+        .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) outDir)\n+\n+setupNpmEnv :: FilePath -> [(TsLibrary, FilePath)] -> IO ()\n+setupNpmEnv uiDir libs = do\n+  forM_ libs $ \\(tsLib, path) -> do\n+    let name = tsLibraryName tsLib\n+    let uiLibPath = uiDir </> name\n+    extractTarGz path uiLibPath\n+    patchTsDependencies uiDir $ uiLibPath </> \"package.json\"\n+\n+-- | Overwrite dependencies to our TypeScript libraries to point to local file dependencies in the\n+-- 'ui' directory in the specified package.json file.\n+patchTsDependencies :: FilePath -> FilePath -> IO ()\n+patchTsDependencies uiDir packageJsonFile = do\n+  packageJson0 <- readJsonFile packageJsonFile\n+  case packageJson0 of"
  },
  {
    "id" : "262da88b-19f8-4dae-b218-fa7c7351d754",
    "prId" : 7222,
    "comments" : [
      {
        "id" : "1ac1d9b7-eef3-458d-b7d2-27bb740b16ab",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "technically relative file urls are invalid. I guess npm handles them given that this test passes but perhaps worth keeping in mind.",
        "createdAt" : "2020-09-07T11:54:52Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a042d186-ce93-4c9d-bce7-6b596f4d9bc8",
        "parentId" : "1ac1d9b7-eef3-458d-b7d2-27bb740b16ab",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I didn't know that! We did have absolute file path in there first and changed it to relative ones.",
        "createdAt" : "2020-09-07T12:54:47Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4aece48d-47fa-4727-9b96-1cd5ac677680",
        "parentId" : "1ac1d9b7-eef3-458d-b7d2-27bb740b16ab",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "\"Technically\" as in the RFC for URLs? NPM seems to be fine with them [per their documentation of package.json](https://docs.npmjs.com/files/package.json#local-paths).",
        "createdAt" : "2020-09-08T09:50:34Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bb596995-a22b-4f3e-b469-ee695684958e",
        "parentId" : "1ac1d9b7-eef3-458d-b7d2-27bb740b16ab",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "yep, according to the rfc you need a leading slash.",
        "createdAt" : "2020-09-08T10:01:19Z",
        "updatedAt" : "2020-09-08T10:01:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "05a1d035c2e74f50ac256733c38d9f9a607b65d5",
    "line" : 215,
    "diffHunk" : "@@ -167,83 +181,128 @@ main = withTempDir $ \\yarnCache -> do\n         [ test getTools\n         ]\n   where\n-    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir -> do\n+    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir' -> do\n+        -- npm gets confused when the temporary directory is not under 'private' on mac.\n+        let tmpDir\n+              | isMac = \"/private\" <> tmpDir'\n+              | otherwise = tmpDir'\n         Tools{..} <- getTools\n         setEnv \"CI\" \"yes\" True\n         step \"Create app from template\"\n         withCurrentDirectory tmpDir $ do\n           callProcess damlBinary [\"new\", \"create-daml-app\", \"create-daml-app\"]\n         let cdaDir = tmpDir </> \"create-daml-app\"\n+        let uiDir = cdaDir </> \"ui\"\n         step \"Patch the application code with messaging feature\"\n         withCurrentDirectory cdaDir $ do\n           callProcessSilent patchPath [\"-p2\", \"-i\", messagingPatch]\n           forM_ [\"MessageEdit\", \"MessageList\"] $ \\messageComponent ->\n             assertFileExists (\"ui\" </> \"src\" </> \"components\" </> messageComponent <.> \"tsx\")\n         step \"Extract codegen output\"\n-        runConduitRes\n-            $ Conduit.sourceFile codegenPath\n-            .| Zlib.ungzip\n-            .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) (cdaDir </> \"daml.js\"))\n-        withCurrentDirectory (cdaDir </> \"ui\") $ do\n+        extractTarGz codegenPath $ uiDir </> \"daml.js\"\n+        -- we patch all the 'package.json' files to point to the local versions of the TypeScript\n+        -- libraries.\n+        genFiles <- listFilesRecursive $ uiDir </> \"daml.js\"\n+        forM_ [file | file <- genFiles, takeFileName file == \"package.json\"] (patchTsDependencies uiDir)\n+        withCurrentDirectory uiDir $ do\n           step \"Set up libraries and workspaces\"\n-          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/ui\"])\n-            [(DamlLedger, damlLedgerPath), (DamlReact, damlReactPath), (DamlTypes, damlTypesPath)]\n+          setupNpmEnv uiDir [(DamlTypes, damlTypesPath)\n+                            , (DamlLedger, damlLedgerPath)\n+                            , (DamlReact, damlReactPath)\n+                            ]\n           step \"Install Jest, Puppeteer and other dependencies\"\n           addTestDependencies \"package.json\" testDepsPath\n-          retry 3 (callProcessSilent yarnPath [\"install\"])\n+          patchTsDependencies uiDir \"package.json\"\n+          -- use '--scripts-prepend-node-path' to make sure we are using the correct 'node' binary\n+          retry 3 (callProcessSilent npmPath [\"install\", \"--scripts-prepend-node-path\"])\n           step \"Run Puppeteer end-to-end tests\"\n-          copyFile testTsPath (cdaDir </> \"ui\" </> \"src\" </> \"index.test.ts\")\n-          callProcess yarnPath [\"run\", \"test\", \"--ci\", \"--all\"]\n+          copyFile testTsPath (uiDir </> \"src\" </> \"index.test.ts\")\n+          -- we need 'npm-cli.js' in the path for the following test\n+          mbOldPath <- getEnv \"PATH\"\n+          setEnv \"PATH\" (takeDirectory npmPath <> (searchPathSeparator : fromMaybe \"\" mbOldPath)) True\n+          callProcess npmPath [\"run\", \"test\", \"--ci\", \"--all\", \"--scripts-prepend-node-path\"]\n \n addTestDependencies :: FilePath -> FilePath -> IO ()\n addTestDependencies packageJsonFile extraDepsFile = do\n     packageJson <- readJsonFile packageJsonFile\n     extraDeps <- readJsonFile extraDepsFile\n     let newPackageJson = Aeson.lodashMerge packageJson extraDeps\n-    Aeson.encodeFile packageJsonFile newPackageJson\n-  where\n-    readJsonFile :: FilePath -> IO Aeson.Value\n-    readJsonFile path = do\n-        -- Read file strictly to avoid lock being held when we subsequently write to it.\n-        mbContent <- Aeson.decodeFileStrict' path\n-        case mbContent of\n-            Nothing -> fail (\"Could not decode JSON object from \" <> path)\n-            Just val -> return val\n+    BSL.writeFile packageJsonFile (Aeson.encode newPackageJson)\n+\n+readJsonFile :: FilePath -> IO Aeson.Value\n+readJsonFile path = do\n+    -- Read file strictly to avoid lock being held when we subsequently write to it.\n+    content <- BSL.fromStrict <$> BS.readFile path\n+    case Aeson.decode content of\n+        Nothing -> error (\"Could not decode JSON object from \" <> path)\n+        Just val -> return val\n+\n+extractTarGz :: FilePath -> FilePath -> IO ()\n+extractTarGz targz outDir = do\n+    runConduitRes\n+        $ Conduit.sourceFile targz\n+        .| Zlib.ungzip\n+        .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) outDir)\n+\n+setupNpmEnv :: FilePath -> [(TsLibrary, FilePath)] -> IO ()\n+setupNpmEnv uiDir libs = do\n+  forM_ libs $ \\(tsLib, path) -> do\n+    let name = tsLibraryName tsLib\n+    let uiLibPath = uiDir </> name\n+    extractTarGz path uiLibPath\n+    patchTsDependencies uiDir $ uiLibPath </> \"package.json\"\n+\n+-- | Overwrite dependencies to our TypeScript libraries to point to local file dependencies in the\n+-- 'ui' directory in the specified package.json file.\n+patchTsDependencies :: FilePath -> FilePath -> IO ()\n+patchTsDependencies uiDir packageJsonFile = do\n+  packageJson0 <- readJsonFile packageJsonFile\n+  case packageJson0 of\n+    Aeson.Object packageJson ->\n+      case HMS.lookup \"dependencies\" packageJson of\n+        Just (Aeson.Object dependencies) -> do\n+          let depNames = HMS.keys dependencies\n+          -- patch dependencies to point to local files if they are present in the package.json\n+          let patchedDeps =\n+                HMS.fromList\n+                  ([ ( \"@daml.js/create-daml-app\"\n+                     , Aeson.String $\n+                       T.pack $\n+                       \"file:\" <> \"./daml.js/create-daml-app-0.1.0\")\n+                   | \"@daml.js/create-daml-app\" `elem` depNames\n+                   ] ++\n+                   [ (depName, Aeson.String $ T.pack $ \"file:\" <> libRelPath)"
  },
  {
    "id" : "403ba81a-9b74-49a3-bb29-89a03fd27878",
    "prId" : 7222,
    "comments" : [
      {
        "id" : "90c70b90-6b84-4560-9780-e8ba8b7c4499",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we ever expect to hit this case?",
        "createdAt" : "2020-09-07T11:55:43Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "68203914-9103-4bce-a433-f512a4a9dc2e",
        "parentId" : "90c70b90-6b84-4560-9780-e8ba8b7c4499",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "That would be the rare case when there are actually no dependencies. Not sure what kind of `package.json` files we generate.",
        "createdAt" : "2020-09-07T12:54:00Z",
        "updatedAt" : "2020-09-08T09:50:39Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "05a1d035c2e74f50ac256733c38d9f9a607b65d5",
    "line" : 232,
    "diffHunk" : "@@ -167,83 +181,128 @@ main = withTempDir $ \\yarnCache -> do\n         [ test getTools\n         ]\n   where\n-    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir -> do\n+    test getTools = testCaseSteps \"Getting Started Guide\" $ \\step -> withTempDir $ \\tmpDir' -> do\n+        -- npm gets confused when the temporary directory is not under 'private' on mac.\n+        let tmpDir\n+              | isMac = \"/private\" <> tmpDir'\n+              | otherwise = tmpDir'\n         Tools{..} <- getTools\n         setEnv \"CI\" \"yes\" True\n         step \"Create app from template\"\n         withCurrentDirectory tmpDir $ do\n           callProcess damlBinary [\"new\", \"create-daml-app\", \"create-daml-app\"]\n         let cdaDir = tmpDir </> \"create-daml-app\"\n+        let uiDir = cdaDir </> \"ui\"\n         step \"Patch the application code with messaging feature\"\n         withCurrentDirectory cdaDir $ do\n           callProcessSilent patchPath [\"-p2\", \"-i\", messagingPatch]\n           forM_ [\"MessageEdit\", \"MessageList\"] $ \\messageComponent ->\n             assertFileExists (\"ui\" </> \"src\" </> \"components\" </> messageComponent <.> \"tsx\")\n         step \"Extract codegen output\"\n-        runConduitRes\n-            $ Conduit.sourceFile codegenPath\n-            .| Zlib.ungzip\n-            .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) (cdaDir </> \"daml.js\"))\n-        withCurrentDirectory (cdaDir </> \"ui\") $ do\n+        extractTarGz codegenPath $ uiDir </> \"daml.js\"\n+        -- we patch all the 'package.json' files to point to the local versions of the TypeScript\n+        -- libraries.\n+        genFiles <- listFilesRecursive $ uiDir </> \"daml.js\"\n+        forM_ [file | file <- genFiles, takeFileName file == \"package.json\"] (patchTsDependencies uiDir)\n+        withCurrentDirectory uiDir $ do\n           step \"Set up libraries and workspaces\"\n-          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/ui\"])\n-            [(DamlLedger, damlLedgerPath), (DamlReact, damlReactPath), (DamlTypes, damlTypesPath)]\n+          setupNpmEnv uiDir [(DamlTypes, damlTypesPath)\n+                            , (DamlLedger, damlLedgerPath)\n+                            , (DamlReact, damlReactPath)\n+                            ]\n           step \"Install Jest, Puppeteer and other dependencies\"\n           addTestDependencies \"package.json\" testDepsPath\n-          retry 3 (callProcessSilent yarnPath [\"install\"])\n+          patchTsDependencies uiDir \"package.json\"\n+          -- use '--scripts-prepend-node-path' to make sure we are using the correct 'node' binary\n+          retry 3 (callProcessSilent npmPath [\"install\", \"--scripts-prepend-node-path\"])\n           step \"Run Puppeteer end-to-end tests\"\n-          copyFile testTsPath (cdaDir </> \"ui\" </> \"src\" </> \"index.test.ts\")\n-          callProcess yarnPath [\"run\", \"test\", \"--ci\", \"--all\"]\n+          copyFile testTsPath (uiDir </> \"src\" </> \"index.test.ts\")\n+          -- we need 'npm-cli.js' in the path for the following test\n+          mbOldPath <- getEnv \"PATH\"\n+          setEnv \"PATH\" (takeDirectory npmPath <> (searchPathSeparator : fromMaybe \"\" mbOldPath)) True\n+          callProcess npmPath [\"run\", \"test\", \"--ci\", \"--all\", \"--scripts-prepend-node-path\"]\n \n addTestDependencies :: FilePath -> FilePath -> IO ()\n addTestDependencies packageJsonFile extraDepsFile = do\n     packageJson <- readJsonFile packageJsonFile\n     extraDeps <- readJsonFile extraDepsFile\n     let newPackageJson = Aeson.lodashMerge packageJson extraDeps\n-    Aeson.encodeFile packageJsonFile newPackageJson\n-  where\n-    readJsonFile :: FilePath -> IO Aeson.Value\n-    readJsonFile path = do\n-        -- Read file strictly to avoid lock being held when we subsequently write to it.\n-        mbContent <- Aeson.decodeFileStrict' path\n-        case mbContent of\n-            Nothing -> fail (\"Could not decode JSON object from \" <> path)\n-            Just val -> return val\n+    BSL.writeFile packageJsonFile (Aeson.encode newPackageJson)\n+\n+readJsonFile :: FilePath -> IO Aeson.Value\n+readJsonFile path = do\n+    -- Read file strictly to avoid lock being held when we subsequently write to it.\n+    content <- BSL.fromStrict <$> BS.readFile path\n+    case Aeson.decode content of\n+        Nothing -> error (\"Could not decode JSON object from \" <> path)\n+        Just val -> return val\n+\n+extractTarGz :: FilePath -> FilePath -> IO ()\n+extractTarGz targz outDir = do\n+    runConduitRes\n+        $ Conduit.sourceFile targz\n+        .| Zlib.ungzip\n+        .| Tar.untar (restoreFile (\\a b -> fail (T.unpack $ a <> b)) outDir)\n+\n+setupNpmEnv :: FilePath -> [(TsLibrary, FilePath)] -> IO ()\n+setupNpmEnv uiDir libs = do\n+  forM_ libs $ \\(tsLib, path) -> do\n+    let name = tsLibraryName tsLib\n+    let uiLibPath = uiDir </> name\n+    extractTarGz path uiLibPath\n+    patchTsDependencies uiDir $ uiLibPath </> \"package.json\"\n+\n+-- | Overwrite dependencies to our TypeScript libraries to point to local file dependencies in the\n+-- 'ui' directory in the specified package.json file.\n+patchTsDependencies :: FilePath -> FilePath -> IO ()\n+patchTsDependencies uiDir packageJsonFile = do\n+  packageJson0 <- readJsonFile packageJsonFile\n+  case packageJson0 of\n+    Aeson.Object packageJson ->\n+      case HMS.lookup \"dependencies\" packageJson of\n+        Just (Aeson.Object dependencies) -> do\n+          let depNames = HMS.keys dependencies\n+          -- patch dependencies to point to local files if they are present in the package.json\n+          let patchedDeps =\n+                HMS.fromList\n+                  ([ ( \"@daml.js/create-daml-app\"\n+                     , Aeson.String $\n+                       T.pack $\n+                       \"file:\" <> \"./daml.js/create-daml-app-0.1.0\")\n+                   | \"@daml.js/create-daml-app\" `elem` depNames\n+                   ] ++\n+                   [ (depName, Aeson.String $ T.pack $ \"file:\" <> libRelPath)\n+                   | tsLib <- allTsLibraries\n+                   , let libName = tsLibraryName tsLib\n+                   , let libPath = uiDir </> libName\n+                   , let libRelPath =\n+                           makeRelative (takeDirectory packageJsonFile) libPath\n+                   , let depName = T.replace \"-\" \"/\" $ T.pack $ \"@\" <> libName\n+                   , depName `elem` depNames\n+                   ]) `HMS.union`\n+                dependencies\n+          let newPackageJson =\n+                Aeson.Object $\n+                HMS.insert \"dependencies\" (Aeson.Object patchedDeps) packageJson\n+          -- Make sure we have write permissions before writing\n+          p <- getPermissions packageJsonFile\n+          setPermissions packageJsonFile (setOwnerWritable True p)\n+          BSL.writeFile packageJsonFile (Aeson.encode newPackageJson)\n+        Nothing -> pure () -- Nothing to patch"
  }
]