[
  {
    "id" : "7fe9ea7e-ab75-4e61-876f-b516793e4b2f",
    "prId" : 6018,
    "comments" : [
      {
        "id" : "35d8384a-72c1-42c9-a169-747dd7ae5bde",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "We're setting `build --test_env=JAVA_HOME` in `.bazelrc` which makes `JAVA_HOME` exported in tests. For `genrule`s you could probably also use the [java make variables](https://docs.bazel.build/versions/master/be/make-variables.html#custom_variables) that Bazel offers.",
        "createdAt" : "2020-05-22T11:48:40Z",
        "updatedAt" : "2020-05-22T11:52:33Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "256ddc87-f572-4907-94c2-6568e4bf6209",
        "parentId" : "35d8384a-72c1-42c9-a169-747dd7ae5bde",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah thanks for the explanation! I don’t actually need it in genrules, I mostly noticed that it wasn’t set there when my C++ code segfaulted when I didn’t handle the case where `JAVA_HOME` wasn’t set :slightly_smiling_face: ",
        "createdAt" : "2020-05-22T12:02:48Z",
        "updatedAt" : "2020-05-22T12:02:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a20cec2c94a272e9c17ae26f77408dd64d40189a",
    "line" : 37,
    "diffHunk" : "@@ -0,0 +1,87 @@\n+#include \"tools/cpp/runfiles/runfiles.h\"\n+#include <codecvt>\n+#include <iostream>\n+#include <locale>\n+#include <memory>\n+#include <unistd.h>\n+#if defined(_WIN32)\n+#include <windows.h>\n+#endif\n+\n+using bazel::tools::cpp::runfiles::Runfiles;\n+\n+/*\n+NOTE (MK): Why is this not just an sh_binary?\n+Good question! It turns out that on Windows, an\n+sh_binary creates a custom executable that then launches\n+bash. Somehow this seems to result in a double fork\n+(or the Windows-equivalent) thereof which results in\n+child processes not being childs of the original process.\n+This makes it really hard to kill a process including\n+all child processes which is really important since\n+otherwise you are left with a running JVM process\n+if you kill `daml sandbox`.\n+*/\n+\n+int main(int argc, char **argv) {\n+    std::string error;\n+    std::unique_ptr<Runfiles> runfiles(Runfiles::Create(argv[0], &error));\n+    if (runfiles == nullptr) {\n+        std::cerr << \"Failed to initialize runfiles: \" << error << \"\\n\";\n+        exit(1);\n+    }\n+    const char *java_home = getenv(\"JAVA_HOME\");\n+    std::string path_prefix = \"\";\n+    // NOTE (MK) I don’t entirely understand when Bazel defines\n+    // JAVA_HOME and when it doesn’t but it looks like it defines\n+    // it in tests but not in genrules which is good enough for us."
  },
  {
    "id" : "abd015ef-dbd9-452e-a426-fca9069b179a",
    "prId" : 6018,
    "comments" : [
      {
        "id" : "89bc97dc-cd94-4a22-b67a-bf0c256ea5ee",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Why not a `haskell_binary`?",
        "createdAt" : "2020-05-22T11:51:22Z",
        "updatedAt" : "2020-05-22T11:52:33Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d1a2346-6fe0-46bf-8446-9a8f15f92d40",
        "parentId" : "89bc97dc-cd94-4a22-b67a-bf0c256ea5ee",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I got sufficiently scared of cross-platform process management that I wanted to know exactly what is going on here so this seemed like the easiest option. Now that it does work, a Haskell binary would probably do the trick but having a several megabyte binary for this makes me a bit sad.",
        "createdAt" : "2020-05-22T12:02:01Z",
        "updatedAt" : "2020-05-22T12:02:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a20cec2c94a272e9c17ae26f77408dd64d40189a",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,87 @@\n+#include \"tools/cpp/runfiles/runfiles.h\"\n+#include <codecvt>\n+#include <iostream>\n+#include <locale>\n+#include <memory>\n+#include <unistd.h>\n+#if defined(_WIN32)\n+#include <windows.h>\n+#endif\n+\n+using bazel::tools::cpp::runfiles::Runfiles;\n+\n+/*\n+NOTE (MK): Why is this not just an sh_binary?"
  }
]