[
  {
    "id" : "e13d9b5e-e7a1-4376-823b-13bc1957ffa5",
    "prId" : 5705,
    "comments" : [
      {
        "id" : "4c4756a4-32fb-467d-ab02-662c74c18738",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think the `-o \"-F -p PORT\"` is handled by the configuration file above and can be removed (though I might be wrong). Not sure why this is still in `PostgresAround`; thought I deleted it.",
        "createdAt" : "2020-04-23T15:05:26Z",
        "updatedAt" : "2020-04-24T10:01:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "98841f5b-79cb-4b8a-809e-40c344f56c4a",
        "parentId" : "4c4756a4-32fb-467d-ab02-662c74c18738",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "removed",
        "createdAt" : "2020-04-23T15:28:22Z",
        "updatedAt" : "2020-04-24T10:01:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "60552fde-683e-4ae1-be15-1c20c71b6d99",
        "parentId" : "4c4756a4-32fb-467d-ab02-662c74c18738",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "removed from `PostgresAround` in https://github.com/digital-asset/daml/pull/5707",
        "createdAt" : "2020-04-23T15:30:10Z",
        "updatedAt" : "2020-04-24T10:01:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ded6b68b4154f8f0a95eedd02f7655b0ea279eb3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,82 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE OverloadedStrings #-}\n+module Main (main) where\n+\n+import qualified Bazel.Runfiles as Runfiles\n+import Control.Exception\n+import Data.Text (Text)\n+import qualified Data.Text as T\n+import System.Directory.Extra\n+import System.Environment\n+import System.FilePath\n+import System.IO.Extra\n+import System.Process\n+\n+-- This is modelled after com.daml.testing.postgresql.PostgresAround.\n+-- We make this a separate executable since it should only\n+-- depend on released artifacts so we cannot easily use sandbox as a library.\n+\n+postgresConfig :: Int -> Text\n+postgresConfig port = T.unlines\n+    [ \"unix_socket_directories = '/tmp'\"\n+    , \"shared_buffers = 12MB\"\n+    , \"fsync = off\"\n+    , \"synchronous_commit = off\"\n+    , \"full_page_writes = off\"\n+    , \"log_min_duration_statement = 0\"\n+    , \"log_connections = on\"\n+    , \"listen_addresses = 'localhost'\"\n+    , \"port = \" <> T.pack (show port)\n+    ]\n+\n+dbUser :: Text\n+dbUser = \"test\"\n+\n+dbName :: Text\n+dbName = \"test\"\n+\n+-- | Hardcoded for now since those tests are exclusive anyway.\n+dbPort :: Int\n+dbPort = 4321\n+\n+jdbcUrl :: Text\n+jdbcUrl = \"jdbc:postgresql://localhost:\" <> T.pack (show dbPort) <> \"/\" <> dbName <> \"?user=\" <> dbName\n+\n+-- Launch a temporary postgres instance and provide a jdbc url to access that database.\n+withPostgres :: (Text -> IO a) -> IO a\n+withPostgres f =\n+    withTempDir $ \\tmpDir -> do\n+    let dataDir = tmpDir </> \"data\"\n+    let logFile = tmpDir </> \"postgresql.log\"\n+    createDirectory dataDir\n+    runfiles <- Runfiles.create\n+    -- For reasons I donâ€™t entirely understand, `locateRunfiles` does not\n+    -- work here. Hardcoding the paths to external/... matches what we do in\n+    -- com.daml.testing.postgresql.Tool.\n+    callProcess\n+        \"external/postgresql_nix/bin/initdb\"\n+        [\"--username=\" <> T.unpack dbUser, dataDir]\n+    writeFileUTF8 (dataDir </> \"postgresql.conf\") (T.unpack $ postgresConfig dbPort)\n+    bracket_ (startPostgres dataDir logFile) (stopPostgres dataDir) $ do\n+      createDatabase\n+      f jdbcUrl\n+  where startPostgres dataDir logFile =\n+            callProcess\n+                \"external/postgresql_nix/bin/pg_ctl\"\n+                [\"-o\", \"-F -p \" <> show dbPort, \"-w\", \"-D\", dataDir, \"-l\", logFile, \"start\"]"
  },
  {
    "id" : "dfb91e29-dc14-421f-af26-92f901b52ace",
    "prId" : 5705,
    "comments" : [
      {
        "id" : "142b5b6e-0cf1-42f9-b70e-e9549e3aec6c",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "We could, in theory, release this with a `main` function, but this version seems nicer so I'm inclined to say we should not do that.",
        "createdAt" : "2020-04-23T15:16:47Z",
        "updatedAt" : "2020-04-24T10:01:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4493a01e-aba5-4360-b079-e86ed10d71fb",
        "parentId" : "142b5b6e-0cf1-42f9-b70e-e9549e3aec6c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "right there are ways to make this work but I think having it be a separate process is actually a good idea.",
        "createdAt" : "2020-04-23T15:19:44Z",
        "updatedAt" : "2020-04-24T10:01:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ded6b68b4154f8f0a95eedd02f7655b0ea279eb3",
    "line" : 19,
    "diffHunk" : "@@ -0,0 +1,82 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE OverloadedStrings #-}\n+module Main (main) where\n+\n+import qualified Bazel.Runfiles as Runfiles\n+import Control.Exception\n+import Data.Text (Text)\n+import qualified Data.Text as T\n+import System.Directory.Extra\n+import System.Environment\n+import System.FilePath\n+import System.IO.Extra\n+import System.Process\n+\n+-- This is modelled after com.daml.testing.postgresql.PostgresAround.\n+-- We make this a separate executable since it should only\n+-- depend on released artifacts so we cannot easily use sandbox as a library."
  },
  {
    "id" : "9b09a3ce-dffe-4443-9b4e-c7f47fa8cdc9",
    "prId" : 5705,
    "comments" : [
      {
        "id" : "8e196f98-3d43-47d9-b308-f2ecae140e54",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "You can take a look at the `bazel-bin/<my-binary>.runfiles_manifest` file to see which runfiles Bazel has registered under what name.",
        "createdAt" : "2020-04-24T09:51:32Z",
        "updatedAt" : "2020-04-24T10:01:19Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ded6b68b4154f8f0a95eedd02f7655b0ea279eb3",
    "line" : 60,
    "diffHunk" : "@@ -0,0 +1,81 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE OverloadedStrings #-}\n+module Main (main) where\n+\n+import qualified Bazel.Runfiles as Runfiles\n+import Control.Exception\n+import Data.Text (Text)\n+import qualified Data.Text as T\n+import System.Directory.Extra\n+import System.Environment\n+import System.FilePath\n+import System.IO.Extra\n+import System.Process\n+\n+-- This is modelled after com.daml.testing.postgresql.PostgresAround.\n+-- We make this a separate executable since it should only\n+-- depend on released artifacts so we cannot easily use sandbox as a library.\n+\n+postgresConfig :: Int -> Text\n+postgresConfig port = T.unlines\n+    [ \"unix_socket_directories = '/tmp'\"\n+    , \"shared_buffers = 12MB\"\n+    , \"fsync = off\"\n+    , \"synchronous_commit = off\"\n+    , \"full_page_writes = off\"\n+    , \"log_min_duration_statement = 0\"\n+    , \"log_connections = on\"\n+    , \"listen_addresses = 'localhost'\"\n+    , \"port = \" <> T.pack (show port)\n+    ]\n+\n+dbUser :: Text\n+dbUser = \"test\"\n+\n+dbName :: Text\n+dbName = \"test\"\n+\n+-- | Hardcoded for now since those tests are exclusive anyway.\n+dbPort :: Int\n+dbPort = 4321\n+\n+jdbcUrl :: Text\n+jdbcUrl = \"jdbc:postgresql://localhost:\" <> T.pack (show dbPort) <> \"/\" <> dbName <> \"?user=\" <> dbName\n+\n+-- Launch a temporary postgres instance and provide a jdbc url to access that database.\n+withPostgres :: (Text -> IO a) -> IO a\n+withPostgres f =\n+    withTempDir $ \\tmpDir -> do\n+    let dataDir = tmpDir </> \"data\"\n+    let logFile = tmpDir </> \"postgresql.log\"\n+    createDirectory dataDir\n+    runfiles <- Runfiles.create\n+    -- For reasons I donâ€™t entirely understand, `locateRunfiles` does not\n+    -- work here. Hardcoding the paths to external/... matches what we do in\n+    -- com.daml.testing.postgresql.Tool.\n+    callProcess\n+        \"external/postgresql_nix/bin/initdb\"\n+        [\"--username=\" <> T.unpack dbUser, dataDir]"
  }
]