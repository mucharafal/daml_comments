[
  {
    "id" : "97b13485-b552-4297-a266-236be46db2f9",
    "prId" : 6736,
    "comments" : [
      {
        "id" : "15dc669f-3c6a-4307-8c37-640b958daa71",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Should this be `latestStableVersion` instead of `1.2.0`?",
        "createdAt" : "2020-07-15T10:47:24Z",
        "updatedAt" : "2020-07-15T13:28:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c767f618-24cb-496a-acf6-78806130db27",
        "parentId" : "15dc669f-3c6a-4307-8c37-640b958daa71",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, removed!",
        "createdAt" : "2020-07-15T11:27:09Z",
        "updatedAt" : "2020-07-15T13:28:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2f53428025130f41ac072e3ffe5471a3febc1495",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,145 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Test.PlatformVersion (main) where\n+\n+import qualified Bazel.Runfiles\n+import Control.Concurrent.STM\n+import Control.Exception.Safe\n+import Control.Monad\n+import Data.ByteString.Lazy.UTF8 (ByteString, toString)\n+import Data.Conduit ((.|), runConduitRes)\n+import qualified Data.Conduit.Combinators as Conduit\n+import qualified Data.Conduit.Tar as Tar\n+import qualified Data.Conduit.Zlib as Zlib\n+import Data.List\n+import qualified Data.Text as T\n+import DA.Test.Tar\n+import System.Directory\n+import System.Environment.Blank\n+import System.FilePath\n+import System.Info (os)\n+import System.IO.Extra\n+import qualified System.Process.Typed as Proc\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+import Data.Maybe\n+import Sandbox (readPortFile, maxRetries)\n+import Versions (latestStableVersion)\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    javaHome <- fromJust <$> getEnv \"JAVA_HOME\"\n+    oldPath <- getSearchPath\n+    setEnv \"PATH\" (intercalate [searchPathSeparator] ((javaHome </> \"bin\") : oldPath)) True\n+    defaultMain $ withSdkResource $ \\_getSdkPath ->\n+        testGroup \"platform-version\"\n+            [ testCase \"no project, no DAML_PLATFORM_VERSION\" $ do\n+                  env <- extendEnv [(\"DAML_SDK_VERSION\", \"0.0.0\")]\n+                  out <- Proc.readProcessStdout_ (Proc.setEnv env $ Proc.shell \"daml sandbox --help\")\n+                  assertInfixOf \"Sandbox version 0.0.0\" out\n+                  out <- Proc.readProcessStdout_ (Proc.setEnv env $ Proc.shell \"daml sandbox-classic --help\")\n+                  assertInfixOf \"Sandbox version 0.0.0\" out\n+            , testCase \"no project, DAML_PLATFORM_VERSION\" $ do\n+                  env <- extendEnv [(\"DAML_SDK_VERSION\", \"0.0.0\"), (\"DAML_PLATFORM_VERSION\", latestStableVersion)]\n+                  out <- Proc.readProcessStdout_\n+                      (Proc.setEnv env $ Proc.shell \"daml sandbox --help\")\n+                  assertInfixOf (\"Sandbox version \" <> latestStableVersion) out\n+                  out <- Proc.readProcessStdout_\n+                      (Proc.setEnv env $ Proc.shell \"daml sandbox-classic --help\")\n+                  assertInfixOf (\"Sandbox version \" <> latestStableVersion) out\n+            , testCase \"no project, platform-version\" $ withTempDir $ \\tempDir -> do\n+                  writeFileUTF8 (tempDir </> \"daml.yaml\") $ unlines\n+                    [ \"sdk-version: 0.0.0\"\n+                    , \"platform-version: 1.2.0\""
  },
  {
    "id" : "9f613f4e-fec4-4b5e-b393-04f6dfdbbb70",
    "prId" : 6736,
    "comments" : [
      {
        "id" : "b196ee03-a706-4664-b7ab-7bbe5f4d9db1",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I wonder if there is a way to query the JSON API version from the API itself. ðŸ¤” \r\n\r\nIf not, maybe we should open an issue.",
        "createdAt" : "2020-07-15T10:49:13Z",
        "updatedAt" : "2020-07-15T13:28:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "80b124f5-c128-447f-833a-56b2191a4478",
        "parentId" : "b196ee03-a706-4664-b7ab-7bbe5f4d9db1",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "At the moment no (at least none that I can find, Iâ€™ll open an issue.",
        "createdAt" : "2020-07-15T11:26:01Z",
        "updatedAt" : "2020-07-15T13:28:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "092fab9b-d548-4abb-b137-13339405ff80",
        "parentId" : "b196ee03-a706-4664-b7ab-7bbe5f4d9db1",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Thank you :-)",
        "createdAt" : "2020-07-15T11:39:48Z",
        "updatedAt" : "2020-07-15T13:28:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2f53428025130f41ac072e3ffe5471a3febc1495",
    "line" : 98,
    "diffHunk" : "@@ -0,0 +1,145 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Test.PlatformVersion (main) where\n+\n+import qualified Bazel.Runfiles\n+import Control.Concurrent.STM\n+import Control.Exception.Safe\n+import Control.Monad\n+import Data.ByteString.Lazy.UTF8 (ByteString, toString)\n+import Data.Conduit ((.|), runConduitRes)\n+import qualified Data.Conduit.Combinators as Conduit\n+import qualified Data.Conduit.Tar as Tar\n+import qualified Data.Conduit.Zlib as Zlib\n+import Data.List\n+import qualified Data.Text as T\n+import DA.Test.Tar\n+import System.Directory\n+import System.Environment.Blank\n+import System.FilePath\n+import System.Info (os)\n+import System.IO.Extra\n+import qualified System.Process.Typed as Proc\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+import Data.Maybe\n+import Sandbox (readPortFile, maxRetries)\n+import Versions (latestStableVersion)\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    javaHome <- fromJust <$> getEnv \"JAVA_HOME\"\n+    oldPath <- getSearchPath\n+    setEnv \"PATH\" (intercalate [searchPathSeparator] ((javaHome </> \"bin\") : oldPath)) True\n+    defaultMain $ withSdkResource $ \\_getSdkPath ->\n+        testGroup \"platform-version\"\n+            [ testCase \"no project, no DAML_PLATFORM_VERSION\" $ do\n+                  env <- extendEnv [(\"DAML_SDK_VERSION\", \"0.0.0\")]\n+                  out <- Proc.readProcessStdout_ (Proc.setEnv env $ Proc.shell \"daml sandbox --help\")\n+                  assertInfixOf \"Sandbox version 0.0.0\" out\n+                  out <- Proc.readProcessStdout_ (Proc.setEnv env $ Proc.shell \"daml sandbox-classic --help\")\n+                  assertInfixOf \"Sandbox version 0.0.0\" out\n+            , testCase \"no project, DAML_PLATFORM_VERSION\" $ do\n+                  env <- extendEnv [(\"DAML_SDK_VERSION\", \"0.0.0\"), (\"DAML_PLATFORM_VERSION\", latestStableVersion)]\n+                  out <- Proc.readProcessStdout_\n+                      (Proc.setEnv env $ Proc.shell \"daml sandbox --help\")\n+                  assertInfixOf (\"Sandbox version \" <> latestStableVersion) out\n+                  out <- Proc.readProcessStdout_\n+                      (Proc.setEnv env $ Proc.shell \"daml sandbox-classic --help\")\n+                  assertInfixOf (\"Sandbox version \" <> latestStableVersion) out\n+            , testCase \"no project, platform-version\" $ withTempDir $ \\tempDir -> do\n+                  writeFileUTF8 (tempDir </> \"daml.yaml\") $ unlines\n+                    [ \"sdk-version: 0.0.0\"\n+                    , \"platform-version: 1.2.0\"\n+                    ]\n+                  out <- Proc.readProcessStdout_ (Proc.setWorkingDir tempDir (Proc.shell \"daml sandbox --help\"))\n+                  assertInfixOf (\"Sandbox version \" <> latestStableVersion) out\n+                  -- Env var takes precedence\n+                  env <- extendEnv [(\"DAML_PLATFORM_VERSION\", \"0.0.0\")]\n+                  out <- Proc.readProcessStdout_\n+                      (Proc.setWorkingDir tempDir $ Proc.setEnv env $ Proc.shell \"daml sandbox --help\")\n+                  assertInfixOf \"Sandbox version 0.0.0\" out\n+            , testCase \"daml start\" $ withTempDir $ \\tempDir -> do\n+                  writeFileUTF8 (tempDir </> \"daml.yaml\") $ unlines\n+                    [ \"sdk-version: 0.0.0\"\n+                    , \"platform-version: 1.2.0\"\n+                    , \"name: foobar\"\n+                    , \"version: 0.0.1\"\n+                    , \"dependencies: [daml-prim, daml-stdlib]\"\n+                    , \"source: .\"\n+                    , \"parties: []\"\n+                    ]\n+                  let conf =\n+                          Proc.setStdin Proc.createPipe $\n+                          Proc.setStdout Proc.byteStringOutput $\n+                          Proc.setWorkingDir tempDir $\n+                          Proc.shell $\n+                            \"daml start --shutdown-stdin-close --open-browser=no --json-api-option --port-file --json-api-option \" <> show (tempDir </> \"portfile\")\n+                  getOut <- Proc.withProcessWait conf $ \\ph -> do\n+                      -- Wait for the port file as a sign that the JSON API has started.\n+                      _ <- readPortFile maxRetries (tempDir </> \"portfile\")\n+                      hClose (Proc.getStdin ph)\n+                      pure $ Proc.getStdout ph\n+                  out <- atomically getOut\n+                  assertInfixOf \"sandbox version 1.2.0\" out\n+                  -- Navigator, sadly not prefixed with Navigator\n+                  assertInfixOf \"Version 0.0.0\" out\n+                  -- JSON API, doesnâ€™t even print a version but letâ€™s at least check\n+                  -- that something started.\n+                  assertInfixOf \"httpPort=7575\" out"
  }
]