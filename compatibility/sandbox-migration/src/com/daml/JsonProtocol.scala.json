[
  {
    "id" : "82665dfc-f18c-4108-86ee-4c25b8f2e26a",
    "prId" : 6244,
    "comments" : [
      {
        "id" : "7cfd671f-00ca-4725-bda1-b8b9c51ceeec",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Nice! Somehow I got lost in implicits when trying to use this and just gave up at some point.",
        "createdAt" : "2020-06-05T18:59:32Z",
        "updatedAt" : "2020-06-08T06:33:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "45a7bfc0-d58e-4ff2-ae91-327db51f8bc3",
        "parentId" : "7cfd671f-00ca-4725-bda1-b8b9c51ceeec",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, I used the dirty trick of throwing exceptions to make library primitives cover this. :cry: \r\n\r\nI'm not very familiar with `spray-json`, it seems a bit limited in this regard (but probably I'm not simply able to use it properly).",
        "createdAt" : "2020-06-08T06:26:24Z",
        "updatedAt" : "2020-06-08T06:33:11Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8845557ef5ed5b9a5a9f48108ed16ca00f178d35",
    "line" : 28,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml\n+\n+import com.daml.ledger.api.v1.value.Record\n+import com.daml.ledger.api.validation.ValueValidator\n+import com.daml.lf.value.json.ApiCodecCompressed\n+import spray.json._\n+\n+object JsonProtocol extends DefaultJsonProtocol {\n+\n+  implicit object RecordJsonFormat extends JsonFormat[Record] {\n+    override def read(json: JsValue): Record =\n+      throw new UnsupportedOperationException(\"Reading JSON-encoded DAML-LF value is not supported\")\n+    override def write(record: Record): JsValue =\n+      ApiCodecCompressed.apiValueToJsValue(\n+        ValueValidator.validateRecord(record).right.get.mapContractId(_.coid))\n+  }\n+\n+  private implicit class JsObjectWith(val jsObject: JsObject) extends AnyVal {\n+    def +(pair: (String, JsValue)): JsObject =\n+      jsObject.copy(fields = jsObject.fields + pair)\n+  }\n+\n+  import ProposeAccept._\n+  implicit val ProposeAcceptCreatedResult: RootJsonFormat[CreatedResult] =\n+    jsonFormat4(CreatedResult.apply)"
  }
]