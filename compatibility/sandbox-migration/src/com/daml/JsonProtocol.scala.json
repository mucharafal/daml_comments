[
  {
    "id" : "f3b061fe-db88-4467-8944-e37c098b4d4c",
    "prId" : 6244,
    "comments" : [
      {
        "id" : "28a09e72-d8b1-436f-9df9-1123d775d460",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Nice! Somehow I got lost in implicits when trying to use this and just gave up at some point.",
        "createdAt" : "2020-06-05T18:59:32Z",
        "updatedAt" : "2020-06-08T06:33:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a507a027-c353-4640-b462-e71afdefac05",
        "parentId" : "28a09e72-d8b1-436f-9df9-1123d775d460",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, I used the dirty trick of throwing exceptions to make library primitives cover this. :cry: \r\n\r\nI'm not very familiar with `spray-json`, it seems a bit limited in this regard (but probably I'm not simply able to use it properly).",
        "createdAt" : "2020-06-08T06:26:24Z",
        "updatedAt" : "2020-06-08T06:33:11Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8845557ef5ed5b9a5a9f48108ed16ca00f178d35",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@  import ProposeAccept._\n  implicit val ProposeAcceptCreatedResult: RootJsonFormat[CreatedResult] =\n    jsonFormat4(CreatedResult.apply)\n  implicit val ProposeAcceptArchivedResult: RootJsonFormat[ArchivedResult] =\n    jsonFormat3(ArchivedResult.apply)"
  }
]