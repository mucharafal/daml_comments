[
  {
    "id" : "d7a6892e-7e61-4198-b25f-50ccefbfe42f",
    "prId" : 6298,
    "comments" : [
      {
        "id" : "c2253bf9-5fb6-4c9e-a5d3-ddff842c7f65",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "There are a couple of duplicates types with the other test (at least `ContractId`, `Party` and `Tuple2`). Maybe worth moving them to a separate module?",
        "createdAt" : "2020-06-11T13:27:11Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0f40912f-a4a0-4e36-ad23-f75e667f6226",
        "parentId" : "c2253bf9-5fb6-4c9e-a5d3-ddff842c7f65",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, I was hoping to make it all generic, including the `Event`, but as you confirmed, it's not that easy.",
        "createdAt" : "2020-06-11T14:32:23Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "49f14406-6f48-4f3e-a034-724c8dc42170",
        "parentId" : "c2253bf9-5fb6-4c9e-a5d3-ddff842c7f65",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6298/commits/3e3105e643882338319360bb03a2242bf768a0d9",
        "createdAt" : "2020-06-12T10:57:07Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "386f92db7169d27dc45764e60f30d42b1c7b3ea6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,99 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+module Migration.KeyTransfer (test) where\n+\n+import qualified Data.Aeson as A\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+\n+test :: FilePath -> FilePath -> Test ([Tuple2 (ContractId Asset) Asset], [Transaction]) Result\n+test step modelDar = Test {..}\n+  where\n+    initialState = ([], [])\n+    executeStep sdkVersion host port _state = withTempFile $ \\outputFile -> do\n+        let suffix = getSdkVersion sdkVersion\n+        callProcess step\n+            [ \"--host=\" <> host\n+            , \"--port=\" <> show port\n+            , \"--output\", outputFile\n+            , \"--dar=\" <> modelDar\n+            , \"--test=key-transfer,\" <> T.unpack (getParty testOwner) <> \",\" <> T.unpack (getParty testReceiver) <> \",\" <> suffix\n+            ]\n+        either fail pure =<< A.eitherDecodeFileStrict' outputFile\n+    validateStep _sdkVersion prev Result{..} =\n+        Right prev\n+\n+    testOwner :: Party\n+    testOwner = Party \"owner\"\n+    testReceiver :: Party\n+    testReceiver = Party \"receiver\"\n+\n+-- The datatypes are defined such that the autoderived Aeson instances\n+-- match the DAML-LF JSON encoding.\n+\n+newtype ContractId t = ContractId T.Text"
  },
  {
    "id" : "63e22be4-1964-4183-89fb-e1a1cb338c04",
    "prId" : 6298,
    "comments" : [
      {
        "id" : "f3a5bf35-1516-474a-aa85-3f489ffaf384",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you make the template a type parameter you might be able to share this with the other test. Although given that the JSON instance is a bit annoying to make generic, Iâ€™m happy to leave that out for now.",
        "createdAt" : "2020-06-11T13:30:27Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed4729c6-922a-43b3-9d97-a430ee769330",
        "parentId" : "f3a5bf35-1516-474a-aa85-3f489ffaf384",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, I got that from an attempt I did, thanks for confirming it's not completely trivial.",
        "createdAt" : "2020-06-11T14:32:50Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "386f92db7169d27dc45764e60f30d42b1c7b3ea6",
    "line" : 91,
    "diffHunk" : "@@ -0,0 +1,99 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+module Migration.KeyTransfer (test) where\n+\n+import qualified Data.Aeson as A\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+\n+test :: FilePath -> FilePath -> Test ([Tuple2 (ContractId Asset) Asset], [Transaction]) Result\n+test step modelDar = Test {..}\n+  where\n+    initialState = ([], [])\n+    executeStep sdkVersion host port _state = withTempFile $ \\outputFile -> do\n+        let suffix = getSdkVersion sdkVersion\n+        callProcess step\n+            [ \"--host=\" <> host\n+            , \"--port=\" <> show port\n+            , \"--output\", outputFile\n+            , \"--dar=\" <> modelDar\n+            , \"--test=key-transfer,\" <> T.unpack (getParty testOwner) <> \",\" <> T.unpack (getParty testReceiver) <> \",\" <> suffix\n+            ]\n+        either fail pure =<< A.eitherDecodeFileStrict' outputFile\n+    validateStep _sdkVersion prev Result{..} =\n+        Right prev\n+\n+    testOwner :: Party\n+    testOwner = Party \"owner\"\n+    testReceiver :: Party\n+    testReceiver = Party \"receiver\"\n+\n+-- The datatypes are defined such that the autoderived Aeson instances\n+-- match the DAML-LF JSON encoding.\n+\n+newtype ContractId t = ContractId T.Text\n+  deriving newtype A.FromJSON\n+  deriving stock (Eq, Show)\n+newtype Party = Party { getParty :: T.Text }\n+  deriving newtype (A.FromJSON, A.ToJSON)\n+  deriving stock (Eq, Show)\n+\n+data Asset = Asset\n+  { owner :: Party\n+  , name :: String\n+  } deriving (Eq, Generic, Show)\n+\n+instance A.FromJSON Asset\n+\n+data Tuple2 a b = Tuple2\n+  { _1 :: a\n+  , _2 :: b\n+  } deriving (Eq, Generic, Show)\n+\n+instance (A.FromJSON a, A.FromJSON b) => A.FromJSON (Tuple2 a b)\n+\n+data Event"
  },
  {
    "id" : "1eb7de35-dbf7-477e-bb9b-980971106df2",
    "prId" : 6298,
    "comments" : [
      {
        "id" : "f3fe5d4c-7715-4bf6-b518-b05d806fa684",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here and for `Result`. We could probably share them but fine to not do so for now.",
        "createdAt" : "2020-06-11T13:31:31Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "386f92db7169d27dc45764e60f30d42b1c7b3ea6",
    "line" : 112,
    "diffHunk" : "@@ -0,0 +1,99 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+module Migration.KeyTransfer (test) where\n+\n+import qualified Data.Aeson as A\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+\n+test :: FilePath -> FilePath -> Test ([Tuple2 (ContractId Asset) Asset], [Transaction]) Result\n+test step modelDar = Test {..}\n+  where\n+    initialState = ([], [])\n+    executeStep sdkVersion host port _state = withTempFile $ \\outputFile -> do\n+        let suffix = getSdkVersion sdkVersion\n+        callProcess step\n+            [ \"--host=\" <> host\n+            , \"--port=\" <> show port\n+            , \"--output\", outputFile\n+            , \"--dar=\" <> modelDar\n+            , \"--test=key-transfer,\" <> T.unpack (getParty testOwner) <> \",\" <> T.unpack (getParty testReceiver) <> \",\" <> suffix\n+            ]\n+        either fail pure =<< A.eitherDecodeFileStrict' outputFile\n+    validateStep _sdkVersion prev Result{..} =\n+        Right prev\n+\n+    testOwner :: Party\n+    testOwner = Party \"owner\"\n+    testReceiver :: Party\n+    testReceiver = Party \"receiver\"\n+\n+-- The datatypes are defined such that the autoderived Aeson instances\n+-- match the DAML-LF JSON encoding.\n+\n+newtype ContractId t = ContractId T.Text\n+  deriving newtype A.FromJSON\n+  deriving stock (Eq, Show)\n+newtype Party = Party { getParty :: T.Text }\n+  deriving newtype (A.FromJSON, A.ToJSON)\n+  deriving stock (Eq, Show)\n+\n+data Asset = Asset\n+  { owner :: Party\n+  , name :: String\n+  } deriving (Eq, Generic, Show)\n+\n+instance A.FromJSON Asset\n+\n+data Tuple2 a b = Tuple2\n+  { _1 :: a\n+  , _2 :: b\n+  } deriving (Eq, Generic, Show)\n+\n+instance (A.FromJSON a, A.FromJSON b) => A.FromJSON (Tuple2 a b)\n+\n+data Event\n+  = CreatedAsset (ContractId Asset) Asset\n+  | ArchivedAsset (ContractId Asset)\n+  deriving (Eq, Show)\n+\n+instance A.FromJSON Event where\n+    parseJSON = A.withObject \"Event\" $ \\o -> do\n+        ty <- o A..: \"type\"\n+        moduleName <- o A..: \"moduleName\"\n+        entityName <- o A..: \"entityName\"\n+        case moduleName of\n+            \"KeyTransfer\" -> case ty of\n+                \"created\" -> case entityName of\n+                    \"Asset\" -> CreatedAsset <$> o A..: \"contractId\" <*> o A..: \"argument\"\n+                    _ -> fail (\"Invalid entity: \" <> entityName)\n+                \"archived\" -> case entityName of\n+                    \"Asset\" -> ArchivedAsset <$> o A..: \"contractId\"\n+                    _ -> fail (\"Invalid entity: \" <> entityName)\n+                _ -> fail (\"Invalid event type: \" <> ty)\n+            _ -> fail (\"Invalid module: \" <> moduleName)\n+\n+data Transaction = Transaction"
  },
  {
    "id" : "8656adb3-d132-419f-8126-5bd5789ebca5",
    "prId" : 6298,
    "comments" : [
      {
        "id" : "ccf23011-319f-4d71-9a84-e624e44f7524",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we kill this?",
        "createdAt" : "2020-06-12T06:57:25Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "49c02de1-75d8-4429-ac3c-84d3b534c943",
        "parentId" : "ccf23011-319f-4d71-9a84-e624e44f7524",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6298/commits/986a95a676913fc8af10ed3783ef161c31d742ee",
        "createdAt" : "2020-06-12T07:46:28Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "386f92db7169d27dc45764e60f30d42b1c7b3ea6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+module Migration.KeyTransfer (test) where\n+\n+import Control.Monad\n+import Control.Monad.Except\n+import qualified Data.Aeson as A\n+import Data.List\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+\n+diff :: Eq a => [a] -> [a] -> [a]\n+diff left right = (left \\\\ right) ++ (right \\\\ left)\n+\n+equivalent :: Eq a => [a] -> [a] -> Bool\n+equivalent xs = null . (diff xs)\n+\n+--data Result = Result"
  },
  {
    "id" : "0ed0a7d7-1a19-4595-b6c9-8d497696acd2",
    "prId" : 6298,
    "comments" : [
      {
        "id" : "7979dd90-f312-4713-a959-35a62e0b493f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would suggest to rename this to `symDiff` to make it clear that this is the symmetric difference as opposed to just `\\\\` which is what people usually call difference.",
        "createdAt" : "2020-06-12T07:01:32Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b4be8036-79ff-4eed-b812-ba7c64953697",
        "parentId" : "7979dd90-f312-4713-a959-35a62e0b493f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6298/commits/eb7e7a67bb6a1d84e4119388f3ed957722b1e3cd",
        "createdAt" : "2020-06-12T10:57:50Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "386f92db7169d27dc45764e60f30d42b1c7b3ea6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+module Migration.KeyTransfer (test) where\n+\n+import Control.Monad\n+import Control.Monad.Except\n+import qualified Data.Aeson as A\n+import Data.List\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+\n+diff :: Eq a => [a] -> [a] -> [a]"
  },
  {
    "id" : "d031761f-d31e-4ee7-b8e2-a937a78c28f2",
    "prId" : 6298,
    "comments" : [
      {
        "id" : "458b64d0-8fa6-4521-96f2-168a2b58566d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Are you deliberately ignoring the order here? For the ACS that seems reasonable but I thought the transaction stream was ordered.",
        "createdAt" : "2020-06-12T07:06:36Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "db8b9242-28ae-4b3e-b384-3d7cec91b152",
        "parentId" : "458b64d0-8fa6-4521-96f2-168a2b58566d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6298/commits/e0e6f87047d1ec630cc646660420be4eacaafe40",
        "createdAt" : "2020-06-12T10:57:33Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "386f92db7169d27dc45764e60f30d42b1c7b3ea6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+module Migration.KeyTransfer (test) where\n+\n+import Control.Monad\n+import Control.Monad.Except\n+import qualified Data.Aeson as A\n+import Data.List\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+\n+diff :: Eq a => [a] -> [a] -> [a]\n+diff left right = (left \\\\ right) ++ (right \\\\ left)\n+\n+equivalent :: Eq a => [a] -> [a] -> Bool\n+equivalent xs = null . (diff xs)\n+\n+--data Result = Result\n+--  { oldKeptAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , newKeptAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , oldTransferredAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , newTransferredAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , oldTransactions :: [Transaction]\n+--  , newTransactions :: [Transaction]\n+--  } deriving Generic\n+test :: FilePath -> FilePath -> Test ([Tuple2 (ContractId Asset) Asset], [Transaction]) Result\n+test step modelDar = Test {..}\n+  where\n+    initialState = ([], [])\n+    executeStep sdkVersion host port _state = withTempFile $ \\outputFile -> do\n+        let suffix = getSdkVersion sdkVersion\n+        callProcess step\n+            [ \"--host=\" <> host\n+            , \"--port=\" <> show port\n+            , \"--output\", outputFile\n+            , \"--dar=\" <> modelDar\n+            , \"--test=key-transfer,\" <> T.unpack (getParty testOwner) <> \",\" <> T.unpack (getParty testReceiver) <> \",\" <> suffix\n+            ]\n+        either fail pure =<< A.eitherDecodeFileStrict' outputFile\n+    validateStep sdkVersion (prevAssets, prevTransactions) Result {..} = do\n+        let suffix = getSdkVersion sdkVersion\n+        unless (equivalent oldAssets prevAssets) $\n+            throwError (\"The old assets do not match those returned by the previous run: \" <> show oldAssets)\n+        unless (equivalent oldTransactions prevTransactions) $"
  },
  {
    "id" : "628ddc38-6a47-44b0-8758-a452d22231d0",
    "prId" : 6298,
    "comments" : [
      {
        "id" : "676781b8-9cf3-4ddd-8bc0-c0d9e51ccc6f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Similar questions around ordering of the transaction stream here.",
        "createdAt" : "2020-06-12T07:11:24Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1f8ed938-1283-4442-bef8-8dc12affd229",
        "parentId" : "676781b8-9cf3-4ddd-8bc0-c0d9e51ccc6f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6298/commits/f43a973c67275498822c199c090c2ce9e35b173e",
        "createdAt" : "2020-06-12T10:57:20Z",
        "updatedAt" : "2020-06-12T11:38:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "386f92db7169d27dc45764e60f30d42b1c7b3ea6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+module Migration.KeyTransfer (test) where\n+\n+import Control.Monad\n+import Control.Monad.Except\n+import qualified Data.Aeson as A\n+import Data.List\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+\n+diff :: Eq a => [a] -> [a] -> [a]\n+diff left right = (left \\\\ right) ++ (right \\\\ left)\n+\n+equivalent :: Eq a => [a] -> [a] -> Bool\n+equivalent xs = null . (diff xs)\n+\n+--data Result = Result\n+--  { oldKeptAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , newKeptAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , oldTransferredAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , newTransferredAssets :: [Tuple2 (ContractId Asset) Asset]\n+--  , oldTransactions :: [Transaction]\n+--  , newTransactions :: [Transaction]\n+--  } deriving Generic\n+test :: FilePath -> FilePath -> Test ([Tuple2 (ContractId Asset) Asset], [Transaction]) Result\n+test step modelDar = Test {..}\n+  where\n+    initialState = ([], [])\n+    executeStep sdkVersion host port _state = withTempFile $ \\outputFile -> do\n+        let suffix = getSdkVersion sdkVersion\n+        callProcess step\n+            [ \"--host=\" <> host\n+            , \"--port=\" <> show port\n+            , \"--output\", outputFile\n+            , \"--dar=\" <> modelDar\n+            , \"--test=key-transfer,\" <> T.unpack (getParty testOwner) <> \",\" <> T.unpack (getParty testReceiver) <> \",\" <> suffix\n+            ]\n+        either fail pure =<< A.eitherDecodeFileStrict' outputFile\n+    validateStep sdkVersion (prevAssets, prevTransactions) Result {..} = do\n+        let suffix = getSdkVersion sdkVersion\n+        unless (equivalent oldAssets prevAssets) $\n+            throwError (\"The old assets do not match those returned by the previous run: \" <> show oldAssets)\n+        unless (equivalent oldTransactions prevTransactions) $\n+            throwError (\"The old transactions do not match those returned by the previous run: \" <> show oldTransactions)\n+        let assetDiff = diff (map _2 oldAssets) (map _2 newAssets)\n+        unless (equivalent assetDiff [Asset testOwner (\"keep-\" <> suffix), Asset testReceiver (\"transfer-\" <> suffix)]) $\n+            throwError (\"Expected one kept and one transferred contract, got \" <> show assetDiff)\n+        let transactionDiff = concat $ diff (map events oldTransactions) (map events newTransactions)"
  }
]