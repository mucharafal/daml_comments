[
  {
    "id" : "4bef0d8d-c738-430d-82ec-87873f3a2486",
    "prId" : 6376,
    "comments" : [
      {
        "id" : "ed824aa2-f35c-49e5-ba0f-53b577c317a6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        let privateAssetDiff = map _2 newPrivateAssets \\\\ map _2 oldPrivateAssets\r\n```\r\nhlint hates parentheses for some reason.",
        "createdAt" : "2020-06-17T09:50:29Z",
        "updatedAt" : "2020-06-17T10:41:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1943c42a-5543-4af3-8f3b-75048c24704c",
        "parentId" : "ed824aa2-f35c-49e5-ba0f-53b577c317a6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I thought `hlint` was run as part of `./fmt.sh --test`. How do I make sure to catch these before I push?",
        "createdAt" : "2020-06-17T10:39:18Z",
        "updatedAt" : "2020-06-17T10:41:23Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d7f7773f-fc45-4625-a8e4-efdc2c77474b",
        "parentId" : "ed824aa2-f35c-49e5-ba0f-53b577c317a6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "For some reason I can't batch these two suggestions in GitHub, so I just made a new commit for those. Thanks for the suggestion.",
        "createdAt" : "2020-06-17T10:41:45Z",
        "updatedAt" : "2020-06-17T10:41:45Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b8234228-2c42-4f53-887d-9508a1cd84a0",
        "parentId" : "ed824aa2-f35c-49e5-ba0f-53b577c317a6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6376/commits/c67b4e5b47eac37c4b401577706141f2217862e2",
        "createdAt" : "2020-06-17T10:42:58Z",
        "updatedAt" : "2020-06-17T10:42:59Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0260598c-f088-47cd-a0d4-09a8b88a9ca8",
        "parentId" : "ed824aa2-f35c-49e5-ba0f-53b577c317a6",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I thought so too and Iâ€™m almost certain I did run that on files in the migration tests in the last couple of days and it did, did you maybe run it before committing? I think it only runs on files that are committed.",
        "createdAt" : "2020-06-17T10:44:53Z",
        "updatedAt" : "2020-06-17T10:44:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c67b4e5b47eac37c4b401577706141f2217862e2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+{-# LANGUAGE PatternSynonyms #-}\n+module Migration.Divulgence (test) where\n+\n+import Control.Monad\n+import Control.Monad.Except\n+import qualified Data.Aeson as A\n+import Data.List\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+import Migration.Util\n+\n+test :: FilePath -> FilePath -> Test ([Tuple2 ContractId Asset], [Tuple2 ContractId Asset]) Result\n+test step modelDar = Test {..}\n+  where\n+    initialState = ([], [])\n+    executeStep sdkVersion host port _state = withTempFile $ \\outputFile -> do\n+        let suffix = getSdkVersion sdkVersion\n+        callProcess step\n+            [ \"--host=\" <> host\n+            , \"--port=\" <> show port\n+            , \"--output\", outputFile\n+            , \"--dar=\" <> modelDar\n+            , \"--test=divulgence,\" <> T.unpack (getParty testOwner) <> \",\" <> T.unpack (getParty testDivulgee) <> \",\" <> suffix\n+            ]\n+        either fail pure =<< A.eitherDecodeFileStrict' outputFile\n+    validateStep sdkVersion (prevPrivateAssets, prevDivulgedAssets) Result {..} = do\n+        let suffix = getSdkVersion sdkVersion\n+        unless (equivalent oldPrivateAssets prevPrivateAssets) $\n+            throwError (\"The old private assets do not match those returned by the previous run: \" <> show oldPrivateAssets)\n+        unless (equivalent oldDivulgedAssets prevDivulgedAssets) $\n+            throwError (\"The old divulged assets do not match those returned by the previous run: \" <> show oldDivulgedAssets)\n+        let privateAssetDiff = (map _2 newPrivateAssets) \\\\ (map _2 oldPrivateAssets)"
  },
  {
    "id" : "73bf06c9-4675-45d8-9703-1c5535b7a191",
    "prId" : 6376,
    "comments" : [
      {
        "id" : "bfe20eb5-684e-480d-9e79-0f9cf8a2bffb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        let divulgedAssetDiff = map _2 newDivulgedAssets \\\\ map _2 oldDivulgedAssets\r\n```",
        "createdAt" : "2020-06-17T09:50:44Z",
        "updatedAt" : "2020-06-17T10:41:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7de53a7-ad22-442f-aea1-6b2e56bce1d2",
        "parentId" : "bfe20eb5-684e-480d-9e79-0f9cf8a2bffb",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6376/commits/c67b4e5b47eac37c4b401577706141f2217862e2",
        "createdAt" : "2020-06-17T10:43:04Z",
        "updatedAt" : "2020-06-17T10:43:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c67b4e5b47eac37c4b401577706141f2217862e2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+{-# LANGUAGE PatternSynonyms #-}\n+module Migration.Divulgence (test) where\n+\n+import Control.Monad\n+import Control.Monad.Except\n+import qualified Data.Aeson as A\n+import Data.List\n+import qualified Data.Text as T\n+import GHC.Generics (Generic)\n+import System.IO.Extra\n+import System.Process\n+\n+import Migration.Types\n+import Migration.Util\n+\n+test :: FilePath -> FilePath -> Test ([Tuple2 ContractId Asset], [Tuple2 ContractId Asset]) Result\n+test step modelDar = Test {..}\n+  where\n+    initialState = ([], [])\n+    executeStep sdkVersion host port _state = withTempFile $ \\outputFile -> do\n+        let suffix = getSdkVersion sdkVersion\n+        callProcess step\n+            [ \"--host=\" <> host\n+            , \"--port=\" <> show port\n+            , \"--output\", outputFile\n+            , \"--dar=\" <> modelDar\n+            , \"--test=divulgence,\" <> T.unpack (getParty testOwner) <> \",\" <> T.unpack (getParty testDivulgee) <> \",\" <> suffix\n+            ]\n+        either fail pure =<< A.eitherDecodeFileStrict' outputFile\n+    validateStep sdkVersion (prevPrivateAssets, prevDivulgedAssets) Result {..} = do\n+        let suffix = getSdkVersion sdkVersion\n+        unless (equivalent oldPrivateAssets prevPrivateAssets) $\n+            throwError (\"The old private assets do not match those returned by the previous run: \" <> show oldPrivateAssets)\n+        unless (equivalent oldDivulgedAssets prevDivulgedAssets) $\n+            throwError (\"The old divulged assets do not match those returned by the previous run: \" <> show oldDivulgedAssets)\n+        let privateAssetDiff = (map _2 newPrivateAssets) \\\\ (map _2 oldPrivateAssets)\n+        unless (equivalent privateAssetDiff [Asset testOwner (\"private-\" <> suffix), Asset testOwner (\"divulging-\" <> suffix)]) $\n+            throwError (\"Expected one private and one divulged contract, got \" <> show privateAssetDiff)\n+        let divulgedAssetDiff = (map _2 newDivulgedAssets) \\\\ (map _2 oldDivulgedAssets)"
  }
]