[
  {
    "id" : "66b9d1a2-83b1-49bd-ba33-012d54cab064",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "db106932-3f5d-4582-a06b-655e3679c5db",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n* write as many changelog entries as necessary\r\n```",
        "createdAt" : "2020-07-09T09:38:31Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips\n+\n+* the first term to appear should be the affected component -- [here's a list](#list-of-components-for-changelog-entries)\n+* write as many as necessary changelog entries as necessary"
  },
  {
    "id" : "de8b20c0-856a-4173-a06c-8d7f88898ae5",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "5d291aed-bfcb-471d-b78a-7349f7f6cde8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe add a note that this is not necessarily an exhaustive list. It’s totally fine to use something else or spell it slightly differently (e.g. DAML Assistant or SDK Assistant or somtehing like that)  it just needs to be obvious which component it belongs to but there is no need to check with this list.",
        "createdAt" : "2020-07-09T09:39:12Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cf702485-1263-40c4-89d8-cecd19aad5df",
        "parentId" : "5d291aed-bfcb-471d-b78a-7349f7f6cde8",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Totally agree the list is not exhaustive, but if your change does happen to fit in one of the listed component, I don't see a reason to spell it differently.",
        "createdAt" : "2020-07-09T09:48:58Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "84a2e218-99d8-460c-93f3-b1b53d8a610b",
        "parentId" : "5d291aed-bfcb-471d-b78a-7349f7f6cde8",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would like this to be one. If it's not, someone should raise this so that we can keep this list up-to-date for as much as possible.",
        "createdAt" : "2020-07-09T09:49:08Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b4e565e7-943d-4d1f-b591-2273f5b6779d",
        "parentId" : "5d291aed-bfcb-471d-b78a-7349f7f6cde8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "See my comment and suggestion below.",
        "createdAt" : "2020-07-09T10:13:48Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : 50,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips\n+\n+* the first term to appear should be the affected component -- [here's a list](#list-of-components-for-changelog-entries)\n+* write as many as necessary changelog entries as necessary\n+* don't be _too_ succinct: a single entry does **not have to** fit on a single line\n+* on the other end, if the size grows beyond 5-6 lines, rather add a link to a relevant documentation or issue with more details\n+* the ultimate target are end users: focus on the impact on them, tell them what's new or how to deal with a change\n+\n+### List of components for changelog entries"
  },
  {
    "id" : "770287a9-b76f-41ac-b0a9-b8c6adaf6879",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "95c56c59-d47d-4052-bc83-91ddd44f46bb",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\nWriting good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what's changed, and how to deal with them, making the product more accessible and your work more meaningful.\r\n```",
        "createdAt" : "2020-07-09T09:39:42Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful."
  },
  {
    "id" : "51b1d871-d02c-4e7b-a29a-4d1e09ce1633",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "2871d08a-46c7-444d-93cb-ffad461d161d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\nThe raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsibility of summarizing new user-facing features must be in the position to easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\r\n```",
        "createdAt" : "2020-07-09T09:39:55Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes."
  },
  {
    "id" : "aa956d39-0e5c-457d-a4ab-fe9d5b43199e",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "3e545470-ca6a-463c-80bb-4f93785c83a6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\nHere are a few practical tips:\r\n```",
        "createdAt" : "2020-07-09T09:40:05Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips"
  },
  {
    "id" : "988dcc58-5be5-447f-a81b-6093796d9b74",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "bad5663e-3688-447d-9b30-85d847b88cb7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I notice that the Ledger API Server and kvutils don'tt seem to fall into any of these. I've been using \"Ledger Integration Kit\" for the latter for a while. Should they be in the list, do they go somewhere else that I'm not seeing, or should they not be included at all?",
        "createdAt" : "2020-07-09T09:41:29Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fc878dee-3422-4692-9a45-7de4039d1eca",
        "parentId" : "bad5663e-3688-447d-9b30-85d847b88cb7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We bundle up all the changes that are only relevant for integrations but not for DAML users under “integration kit” atm.",
        "createdAt" : "2020-07-09T09:45:58Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed3da70e-8492-477b-980a-262ccd82e374",
        "parentId" : "bad5663e-3688-447d-9b30-85d847b88cb7",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "The list should be understood more as a suggestion than a strict rule: try to fit in one of these if possible, but if it doesn't fit, you should feel free to make one up. Better yet: add to the list.",
        "createdAt" : "2020-07-09T09:47:12Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "61b88e6b-1fe9-40f5-99e4-53eeeb220781",
        "parentId" : "bad5663e-3688-447d-9b30-85d847b88cb7",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "@bame-da Your take?",
        "createdAt" : "2020-07-09T09:49:20Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "02d4eb11-0d92-4443-9750-efb7aac2b7bc",
        "parentId" : "bad5663e-3688-447d-9b30-85d847b88cb7",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "@bame-da More precise question: do you think we should add items here? If yes, what should those be?",
        "createdAt" : "2020-07-09T09:50:02Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "25c59d25-0166-46e8-ba4d-d1fc8d2d7ff9",
        "parentId" : "bad5663e-3688-447d-9b30-85d847b88cb7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Fair enough, I’ve made a suggestion with the components that we use so far (including bundling stuff that we currently bundle and removing stuff that is not an SDK component (maven plugin, test library)) and changed the spellings that we used so far.",
        "createdAt" : "2020-07-09T10:13:08Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : 50,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips\n+\n+* the first term to appear should be the affected component -- [here's a list](#list-of-components-for-changelog-entries)\n+* write as many as necessary changelog entries as necessary\n+* don't be _too_ succinct: a single entry does **not have to** fit on a single line\n+* on the other end, if the size grows beyond 5-6 lines, rather add a link to a relevant documentation or issue with more details\n+* the ultimate target are end users: focus on the impact on them, tell them what's new or how to deal with a change\n+\n+### List of components for changelog entries"
  },
  {
    "id" : "df0f8245-bf05-4f17-be2c-11ca324e93b2",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "9154ae82-8e75-4fae-9669-062110c6c848",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\nWriting good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and how to deal with it, making the product more accessible and your work more meaningful.\r\n```",
        "createdAt" : "2020-07-09T09:41:49Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful."
  },
  {
    "id" : "bd1577b3-20ca-47e6-89cf-8c8ec7bad7de",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "70402d72-13e1-4b7a-9c22-08ff4b573b8f",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Seems unnecessary.",
        "createdAt" : "2020-07-09T09:42:08Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aae2d2db-ef30-4767-9e10-70d5649404c5",
        "parentId" : "70402d72-13e1-4b7a-9c22-08ff4b573b8f",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Yeah, thanking people is always a waste of time.\r\n\r\n...\r\n\r\nOh, you meant the extra blank line? 🤔",
        "createdAt" : "2020-07-09T09:46:33Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -112,3 +151,4 @@ You can also join a `#daml-contributors` channel on our Slack: [damldriven.slack\n # Thank you!\n \n Thank you for taking the time to contribute!\n+"
  },
  {
    "id" : "57593d8c-0d09-4ad6-8e56-3f76a2f5cad8",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "f366cb08-c5a2-4d63-90b1-d13bffe7e67d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n* the ultimate target are end users: focus on the impact on them, tell them what's new or how to deal with a change. This also means that purely internal changes should not have a release note entry since they are not relevant to users.\r\n```",
        "createdAt" : "2020-07-09T09:42:10Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4563dde9-3c4c-4e46-8861-6676797fee55",
        "parentId" : "f366cb08-c5a2-4d63-90b1-d13bffe7e67d",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "@cocreature: These are not sentences; adding periods makes it unbalanced.\r\n\r\n```suggestion\r\n* the ultimate target are end users: focus on the impact on them, tell them what's new or how to deal with a change\r\n* avoid writing entries for purely internal changes, since they are not relevant to users\r\n```",
        "createdAt" : "2020-07-09T09:45:44Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "92778566-7aba-46fa-80f2-3bec2779a3f6",
        "parentId" : "f366cb08-c5a2-4d63-90b1-d13bffe7e67d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'd rather keep points short, I'll make this a separate one. It's a re-iteration of what stated above, but re-iteration makes sense here. :slightly_smiling_face: ",
        "createdAt" : "2020-07-09T09:46:49Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e9efe62b-4c92-4782-8d0c-8639d85286ae",
        "parentId" : "f366cb08-c5a2-4d63-90b1-d13bffe7e67d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6666/commits/2184613e2d05957ee352ed806c94a0a5899b5de8",
        "createdAt" : "2020-07-09T10:02:55Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : 48,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips\n+\n+* the first term to appear should be the affected component -- [here's a list](#list-of-components-for-changelog-entries)\n+* write as many as necessary changelog entries as necessary\n+* don't be _too_ succinct: a single entry does **not have to** fit on a single line\n+* on the other end, if the size grows beyond 5-6 lines, rather add a link to a relevant documentation or issue with more details\n+* the ultimate target are end users: focus on the impact on them, tell them what's new or how to deal with a change"
  },
  {
    "id" : "cd73ef79-cb92-4740-92fa-997ed73304f9",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "2ac3914e-134f-4417-a537-ca914e844414",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\nThe raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsibility of summarizing new user-facing features must be able to easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\r\n```",
        "createdAt" : "2020-07-09T09:42:33Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes."
  },
  {
    "id" : "8ba5ad69-d3ea-4cb4-ba6a-395ab88836ce",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "186624ee-6014-4d8f-9225-a09cf179c771",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n* write as many changelog entries as necessary\r\n```",
        "createdAt" : "2020-07-09T09:43:12Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips\n+\n+* the first term to appear should be the affected component -- [here's a list](#list-of-components-for-changelog-entries)\n+* write as many as necessary changelog entries as necessary"
  },
  {
    "id" : "aafedaa1-89c8-42ab-8557-ce6d23692c24",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "37d9fc2a-6241-4322-ad8a-fc8ddf835c7c",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n* it's OK for a PR to have no changelog entry if there is no impact on end users (though you still need to be explicit about it, by specifying an empty CHANGELOG_{BEGIN,END} block)\r\n\r\n```",
        "createdAt" : "2020-07-09T09:44:40Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fd1e5cd2-6294-487c-8a31-afd6f835513c",
        "parentId" : "37d9fc2a-6241-4322-ad8a-fc8ddf835c7c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6666/commits/2184613e2d05957ee352ed806c94a0a5899b5de8",
        "createdAt" : "2020-07-09T10:02:32Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : 49,
    "diffHunk" : "@@ -61,9 +61,48 @@ If you want to verify the changelog entries as described by a range of Git revis\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what changes and two deal with those, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsability of summarizing new user-facing features must be in the position of easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips\n+\n+* the first term to appear should be the affected component -- [here's a list](#list-of-components-for-changelog-entries)\n+* write as many as necessary changelog entries as necessary\n+* don't be _too_ succinct: a single entry does **not have to** fit on a single line\n+* on the other end, if the size grows beyond 5-6 lines, rather add a link to a relevant documentation or issue with more details\n+* the ultimate target are end users: focus on the impact on them, tell them what's new or how to deal with a change\n+"
  },
  {
    "id" : "b9217f8b-77e0-40e3-b8db-a37d229a1161",
    "prId" : 6666,
    "comments" : [
      {
        "id" : "b9a69f84-5b0a-4518-9987-4d62594d75eb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  * DAML Compiler\r\n  * DAML on SQL\r\n  * DAML Studio\r\n  * Extractor\r\n  * Java Bindings\r\n  * Java Codegen\r\n  * JavaScript Client Libraries\r\n  * JavaScript Codegen\r\n  * JSON API\r\n  * Ledger API Specification\r\n  * Integration Kit (Ledger API Test Tool and changes only relevant for ledger integrations, e.g, kvutils changes, metrics, …)\r\n  * Navigator\r\n  * DAML REPL\r\n  * Sandbox\r\n  * Scala Bindings\r\n  * Scala Codegen\r\n  * DAML Script\r\n  * DAML Assistant\r\n  * DAML Standard Library\r\n  * DAML Triggers\r\n```",
        "createdAt" : "2020-07-09T10:11:58Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c53ebdd0-fce2-4c6b-9b39-975c175895ea",
        "parentId" : "b9a69f84-5b0a-4518-9987-4d62594d75eb",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "Looks pretty comprehensive. I wouldn't treat this as an exhaustive list but rather as guidance of the kind of thing that goes in there. This should cover 95%+ of all changelog entries. One suggestion:\r\n\r\nMaybe \"Distribution/Releases\" would be something to include for changes like releasing the JSON API to GH Releases.",
        "createdAt" : "2020-07-09T10:44:16Z",
        "updatedAt" : "2020-07-09T13:15:14Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a7f695e47fbc33392b2c765eed3b4425a1152112",
    "line" : null,
    "diffHunk" : "@@ -57,13 +56,62 @@ If you want to amend an existing changelog entry part of a PR already merged on\n \n       CHANGELOG_END\n \n+If the PR contains no _user-facing_ change, the section **MUST** be there but can be left empty, as in the following example:\n+\n+      Fixes #6666\n+\n+      Improve contribution guidelines\n+\n+      CHANGELOG_BEGIN\n+      CHANGELOG_END\n+\n If you want to verify the changelog entries as described by a range of Git revisions, you can use the `unreleased.sh` script. In most cases, to see the entries added as part of commits added since branching off of `master`, you can run:\n \n     ./unreleased.sh master..\n \n+## Writing a good changelog entry\n+\n+Writing good changelog entries is **important**: as a developer, it gives visibility on your contribution; as a user, it makes clear what is new, what's changed, and how to deal with them, making the product more accessible and your work more meaningful.\n+\n+The raw changelog is used to compile a meaningful summary of changes across releases. This happens some time after the PR has been merged and the person taking the responsibility of summarizing new user-facing features must be in the position to easily understand the nature of the change and report it. The ideal changelog entry can be more or less incorporated verbatim in the release notes.\n+\n+Here are a few practical tips:\n+\n+* if there are no user-facing changes, keep the changelog entry list empty\n+* the first term to appear should be the affected component -- [here's a list](#list-of-components-for-changelog-entries)\n+* write as many changelog entries as necessary\n+* don't be _too_ succinct: a single entry does **not have to** fit on a single line\n+* on the other end, if the size grows beyond 5-6 lines, rather add a link to a relevant documentation or issue with more details\n+* the ultimate target are end users: focus on the impact on them, tell them what's new or how to deal with a change\n+\n+### List of components for changelog entries\n+\n+  * Compiler\n+  * DAML Maven Plugin\n+  * DAML on SQL\n+  * DAML Studio\n+  * Examples & Docs\n+  * Extractor\n+  * Java Bindings\n+  * Java Codegen\n+  * JavaScript Client Libraries\n+  * JSON API\n+  * Ledger API Specification\n+  * Ledger API Test Tool\n+  * Navigator\n+  * REPL\n+  * Sandbox\n+  * Scala Bindings\n+  * Scala Codegen\n+  * Script\n+  * SDK Assistant\n+  * Standard Library\n+  * Test Library\n+  * Triggers"
  },
  {
    "id" : "e90ff7c2-b6a5-484c-a5a0-9463a04ddb76",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "17a9d5ca-4c64-42d2-996a-5465255f05d1",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n* Commit descriptions can include a `Fixes #XX` line indicating what GitHub issue number the commit fixes.\r\n```",
        "createdAt" : "2020-05-26T12:51:36Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22c5e75f-f8b7-4643-a558-f5e6687bb2e3",
        "parentId" : "17a9d5ca-4c64-42d2-996a-5465255f05d1",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "As discussed with Samir this was a revert of CONTRIBUTING.md.",
        "createdAt" : "2020-05-26T16:35:36Z",
        "updatedAt" : "2020-05-26T16:35:37Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 5,
    "diffHunk" : "@@ -21,7 +21,7 @@ For Git commit messages, our principle is that `git log --pretty=oneline` should\n   * *Improve explanation of …*\n   * *Remove module X because it is not used.*\n * Commits should have a description that concisely explains the rationale and context for the change if that is not obvious.\n-* The first line of the description should include a reference to the fixed issue `(#XXX)`.\n+* Commit descriptions should include a `Fixes #XX` line indicating what GitHub issue number the commit fixes."
  },
  {
    "id" : "5e8d4da5-4066-4033-ac01-96394d164b0a",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "75ed1fbe-bca8-4680-ab06-a36a0e19a7fa",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "That's not a useful first line. The previous one was better.\r\n\r\nWe tend to use the present tense in commit messages, so I'd suggest \"Introduces\" or \"Introduce\" over \"Introduced\".\r\n\r\n```suggestion\r\n      Introduces a new API for package management\r\n\r\n      Fixes #1311.\r\n```",
        "createdAt" : "2020-05-26T12:54:12Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d9a220c-7058-4401-9497-6729dca34ea3",
        "parentId" : "75ed1fbe-bca8-4680-ab06-a36a0e19a7fa",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "as above",
        "createdAt" : "2020-05-26T16:35:42Z",
        "updatedAt" : "2020-05-26T16:35:43Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 14,
    "diffHunk" : "@@ -35,14 +35,14 @@ For Git commit messages, our principle is that `git log --pretty=oneline` should\n \n The following is an example of a well-formed commit, including the description (first line) and a body that includes changelog additions:\n \n-      Introduced a new API for package management (#1311)\n+      Fixes #1311"
  },
  {
    "id" : "d9b24933-5c69-4c72-8ecc-3b94dc7c3805",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "6c27bfca-08ac-4a93-b54a-6cd5df47bc8c",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I have no idea why this document uses 6 spaces for indenting code, but it really confuses GitHub. I suggest changing it to use 4 spaces.",
        "createdAt" : "2020-05-26T12:55:39Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2800a22-eecf-4910-bf86-3f420873c37b",
        "parentId" : "6c27bfca-08ac-4a93-b54a-6cd5df47bc8c",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "as above",
        "createdAt" : "2020-05-26T16:35:49Z",
        "updatedAt" : "2020-05-26T16:35:49Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 25,
    "diffHunk" : "@@ -35,14 +35,14 @@ For Git commit messages, our principle is that `git log --pretty=oneline` should\n \n The following is an example of a well-formed commit, including the description (first line) and a body that includes changelog additions:\n \n-      Introduced a new API for package management (#1311)\n+      Fixes #1311\n \n-      Also fixes a typo in the Scala bindings documentation\n+      Also fixes a typo in the Scala bindings documentation.\n \n       CHANGELOG_BEGIN\n \n       - [Sandbox] Introduced a new API for package management.\n-      See `#1311 <https://github.com/digital-asset/daml/issues/1311>`__.\n+        See `#1311 <https://github.com/digital-asset/daml/issues/1311>`__.\n \n       CHANGELOG_END"
  },
  {
    "id" : "96f58096-dfc6-4425-bff9-cc724088c4e2",
    "prId" : 3547,
    "comments" : [
      {
        "id" : "7f0381df-1a5e-4a84-81ba-7c96eb970693",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n- In the unlikely event, you need to modify or remove a changelog entry made in a previously merged PRs before the relase, one or more commits in the PR must include in their body with a section between the ``CHANGELOG_BEGIN`` and ``CHANGELOG_END`` tags that includes a line of the form ``** Delete/Replace Changelog from #xxxx about [Component] **``.\r\n\r\nFor instance in case of reverting a previous PR you could add a message like: \r\n\r\n      Revert #1322\r\n\r\n      CHANGELOG_BEGIN\r\n       \r\n      ** Delete Changelog from #1322 about [Sanbox] **\r\n\r\n      CHANGELOG_END\r\n\r\nOr if you want to correct a changelog attached to a previously merged PR, you may use a message like:\r\n\r\n      Fixes Changelog of #1322\r\n\r\n      CHANGELOG_BEGIN\r\n\r\n        ** Replace Changelog from #1322 about [Sanbox] **\r\n\r\n      - [Sandbox] Introduced a new API for package management.\r\n        See `#1312 <https://github.com/digital-asset/daml/issues/1312>`__.\r\n\r\n      CHANGELOG_END\r\n\r\n## Working with issues\r\n```",
        "createdAt" : "2019-11-20T13:10:39Z",
        "updatedAt" : "2019-11-20T14:43:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9f039249-ff29-4638-b4d5-014498236842",
        "parentId" : "7f0381df-1a5e-4a84-81ba-7c96eb970693",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3547/commits/5b06f4be6e791d550d0aaad0016e0dde661903c7",
        "createdAt" : "2019-11-20T13:17:06Z",
        "updatedAt" : "2019-11-20T14:43:49Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6c9d795419b38e7c96f1084003ac6b3151d10d8b",
    "line" : 31,
    "diffHunk" : "@@ -30,11 +30,21 @@ For Git commit messages, our principle is that `git log --pretty=oneline` should\n - Does your PR include appropriate tests?\n - Make sure your PR title and description makes it easy for other developers to understand what the contained commits do. The title should say what the changes do. The description should expand on what it does (if not obvious from the title alone), and say why it is being done.\n - If your PR corresponds to an issue, add “Fixes #XX” to your pull request description. This will auto-close the corresponding issue when the commit is merged into master and tie the PR to the issue.\n-- If your PR includes user-facing changes, you must add a line describing the change to [unreleased.rst](unreleased.rst) as part of your PR. Each entry in this document must start with the component to which is belongs, as in the following example:\n+- If your PR includes user-facing changes, one or more commits in the PR must include in their body with a section between the ``CHANGELOG_BEGIN`` and ``CHANGELOG_END`` tags that includes relevant changelog entries, where each entry starts with the component to which is belongs in square brackets. Use RST to format links as this text will be added to the changelog upon release.\n+\n+The following is an example of a well-formed commit, including the description (first line) and a body that includes changelog additions:\n+\n+      Fixes #1311\n+\n+      Also fixes a typo in the Scala bindings documentation.\n+\n+      CHANGELOG_BEGIN\n \n       - [Sandbox] Introduced a new API for package management.\n         See `#1311 <https://github.com/digital-asset/daml/issues/1311>`__.\n \n+      CHANGELOG_END\n+\n ## Working with issues"
  },
  {
    "id" : "29a65154-c7f5-4953-8baa-397936272cd8",
    "prId" : 3547,
    "comments" : [
      {
        "id" : "3d4f9433-147d-4ec5-bc30-0af8de8a02b0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not sure how useful the PR number is. Release notes usually either mention issues or neither PRs or issues so how do I figure out which line I need to change? tbf, this is not super important given that I hope this will be very rare.",
        "createdAt" : "2019-11-20T13:33:03Z",
        "updatedAt" : "2019-11-20T14:43:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f547d6ee-35a7-4371-a0b0-fe532311187e",
        "parentId" : "3d4f9433-147d-4ec5-bc30-0af8de8a02b0",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I agree, let's see how this evolves, we can change it over time. Ironically. :wink: ",
        "createdAt" : "2019-11-20T13:36:54Z",
        "updatedAt" : "2019-11-20T14:43:49Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6c9d795419b38e7c96f1084003ac6b3151d10d8b",
    "line" : null,
    "diffHunk" : "@@ -30,11 +30,32 @@ For Git commit messages, our principle is that `git log --pretty=oneline` should\n - Does your PR include appropriate tests?\n - Make sure your PR title and description makes it easy for other developers to understand what the contained commits do. The title should say what the changes do. The description should expand on what it does (if not obvious from the title alone), and say why it is being done.\n - If your PR corresponds to an issue, add “Fixes #XX” to your pull request description. This will auto-close the corresponding issue when the commit is merged into master and tie the PR to the issue.\n-- If your PR includes user-facing changes, you must add a line describing the change to [unreleased.rst](unreleased.rst) as part of your PR. Each entry in this document must start with the component to which is belongs, as in the following example:\n+- If your PR includes user-facing changes, one or more commits in the PR must include in their body with a section between the ``CHANGELOG_BEGIN`` and ``CHANGELOG_END`` tags that includes relevant changelog entries, where each entry starts with the component to which is belongs in square brackets. Use RST to format links as this text will be added to the changelog upon release.\n+\n+The following is an example of a well-formed commit, including the description (first line) and a body that includes changelog additions:\n+\n+      Fixes #1311\n+\n+      Also fixes a typo in the Scala bindings documentation.\n+\n+      CHANGELOG_BEGIN\n \n       - [Sandbox] Introduced a new API for package management.\n         See `#1311 <https://github.com/digital-asset/daml/issues/1311>`__.\n \n+      CHANGELOG_END\n+\n+If you want to amend an existing changelog entry part of a PR already merged on master, do so with the following format:\n+\n+      CHANGELOG_BEGIN\n+\n+      ** Replace changelog for PR #42 **"
  },
  {
    "id" : "3ce7fbd4-dd5c-47b8-b5b1-c90de3fbf0f9",
    "prId" : 3547,
    "comments" : [
      {
        "id" : "513efd84-b394-4ab2-80fb-a06e0f08c5de",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n- If your PR includes user-facing changes, one or more commits in the PR must include in their body with a section between the ``CHANGELOG_BEGIN`` and ``CHANGELOG_END`` tags that includes relevant changelog entries, where each entry starts with the component to which it belongs in square brackets. Use RST to format links as this text will be added to the changelog upon release.\r\n```",
        "createdAt" : "2019-11-20T13:35:03Z",
        "updatedAt" : "2019-11-20T14:43:49Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6c9d795419b38e7c96f1084003ac6b3151d10d8b",
    "line" : null,
    "diffHunk" : "@@ -30,11 +30,32 @@ For Git commit messages, our principle is that `git log --pretty=oneline` should\n - Does your PR include appropriate tests?\n - Make sure your PR title and description makes it easy for other developers to understand what the contained commits do. The title should say what the changes do. The description should expand on what it does (if not obvious from the title alone), and say why it is being done.\n - If your PR corresponds to an issue, add “Fixes #XX” to your pull request description. This will auto-close the corresponding issue when the commit is merged into master and tie the PR to the issue.\n-- If your PR includes user-facing changes, you must add a line describing the change to [unreleased.rst](unreleased.rst) as part of your PR. Each entry in this document must start with the component to which is belongs, as in the following example:\n+- If your PR includes user-facing changes, one or more commits in the PR must include in their body with a section between the ``CHANGELOG_BEGIN`` and ``CHANGELOG_END`` tags that includes relevant changelog entries, where each entry starts with the component to which is belongs in square brackets. Use RST to format links as this text will be added to the changelog upon release."
  },
  {
    "id" : "0c616b1e-443f-47cc-a2ed-3568a2014268",
    "prId" : 196,
    "comments" : [
      {
        "id" : "be97cde7-0c22-419e-bfe1-2bd463318a11",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What's the difference between \"reporting problems\" and \"reporting issues\"?",
        "createdAt" : "2019-04-04T11:38:53Z",
        "updatedAt" : "2019-04-04T12:58:50Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aaf90942-28ba-4065-8ef1-2f6ddaf82a69",
        "parentId" : "be97cde7-0c22-419e-bfe1-2bd463318a11",
        "author" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "body" : "from the original - I thought issues were specifically GH issues, and problems more general, but I agree it's not clear",
        "createdAt" : "2019-04-04T11:59:29Z",
        "updatedAt" : "2019-04-04T12:58:50Z",
        "lastEditedBy" : {
          "login" : "bethaitman-da",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/42940582?u=89cc5505d9086a7a0f27b1bd24b4ff45be679e07&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "940e5b216f3d1f13139153fce1c46b633cc4fd23",
    "line" : null,
    "diffHunk" : "@@ -1,10 +1,12 @@\n # Contributing to DAML\n \n-Welcome! This document provides a high-level overview of how to contribute to the development of DAML.\n+Welcome! This page gives a high-level overview of how to contribute to the development of DAML.\n \n-(For information on how to build, test, and work on the codebase, see the [README](./README.md).)\n+There are many ways you can contribute beyond coding. For example, you can report problems, report and clarify issues, and write documentation. If you're completely new to open source development, the [Open Source Guides](https://opensource.guide) is a great place to start."
  }
]