[
  {
    "id" : "7c42f44f-f47b-44be-b480-f055e2f447f4",
    "prId" : 7059,
    "comments" : [
      {
        "id" : "73b9456b-e358-4d86-b084-758768be8a6a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nhash, set it to 64 zeroes and Bazel will correct you.\r\n```\r\nYou need a valid sha256, otherwise you risk hitting some validation logic instead of the hash mismatch. I forgot if this is an issue for Bazel but it is an issue for Nix and itâ€™s easier to just stick to this everywhere.",
        "createdAt" : "2020-08-07T09:47:45Z",
        "updatedAt" : "2020-08-07T10:02:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f59a26b45fc4389034cb8f87130f35508f044ecf",
    "line" : null,
    "diffHunk" : "@@ -77,25 +77,26 @@ compiler and core libraries to use:\n \n ```\n load('@io_bazel_rules_scala//scala:scala.bzl', 'scala_repositories')\n-scala_repositories((\"2.12.6\", {\n-    \"scala_compiler\": \"3023b07cc02f2b0217b2c04f8e636b396130b3a8544a8dfad498a19c3e57a863\",\n-    \"scala_library\": \"f81d7144f0ce1b8123335b72ba39003c4be2870767aca15dd0888ba3dab65e98\",\n-    \"scala_reflect\": \"ffa70d522fc9f9deec14358aa674e6dd75c9dfa39d4668ef15bb52f002ce99fa\"\n-}))\n+scala_repositories((\n+    \"2.12.11\",\n+    {\n+        \"scala_compiler\": \"e901937dbeeae1715b231a7cfcd547a10d5bbf0dfb9d52d2886eae18b4d62ab6\",\n+        \"scala_library\": \"dbfe77a3fc7a16c0c7cb6cb2b91fecec5438f2803112a744cb1b187926a138be\",\n+        \"scala_reflect\": \"5f9e156aeba45ef2c4d24b303405db259082739015190b3b334811843bd90d6a\",\n+    },\n+))\n load('@io_bazel_rules_scala//scala:toolchains.bzl', 'scala_register_toolchains')\n scala_register_toolchains()\n ```\n \n If you need to update the Scala version, make sure to also update the\n-corresponding SHA-256 hashes in hexadecimal encoding. The hashes can be looked\n-up in the [Artifactory repository browser][artifactory_browser_hash] in the\n-very bottom of the \"General\" pane.\n+corresponding SHA-256 hashes in hexadecimal encoding. If you don't know the\n+hash, set it to all zeroes and Bazel will correct you."
  },
  {
    "id" : "3f06c761-44aa-4a99-9ca8-780ff7678e96",
    "prId" : 5350,
    "comments" : [
      {
        "id" : "5bae83f6-1a80-4265-a6b1-229e7cb02303",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I don't think that's true. [`unused_dependency_checker_mode` is set to `False` within `rules_scala` itself](https://github.com/bazelbuild/rules_scala/blob/6c16cff213b76a4126bdc850956046da5db1daaa/scala/private/rules/scala_library.bzl#L118).\r\n```suggestion\r\nattributes as `da_scala_library` with the exception of\r\n`unused_dependency_checker_mode` which will always be disabled.\r\n```",
        "createdAt" : "2020-04-01T16:15:56Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3338e6fc-a61a-4e63-aa3b-ba337d2cdf83",
        "parentId" : "5bae83f6-1a80-4265-a6b1-229e7cb02303",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Aha, sorry, I misread it and thought it was about `da_scala_library`. I'll revert the text.",
        "createdAt" : "2020-04-01T18:28:24Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b840b1d3-6a67-4378-93c7-634106c92fa0",
        "parentId" : "5bae83f6-1a80-4265-a6b1-229e7cb02303",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Somehow I missed your suggestion and just did it manually. Not sure why. Anyway, done. ðŸ™‚ ",
        "createdAt" : "2020-04-01T18:31:42Z",
        "updatedAt" : "2020-04-01T18:31:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0b1e39a3-93f6-4a01-83eb-94a77c0d9390",
        "parentId" : "5bae83f6-1a80-4265-a6b1-229e7cb02303",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Thank you!",
        "createdAt" : "2020-04-02T08:36:37Z",
        "updatedAt" : "2020-04-02T08:36:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8016ee647a873afe69c33eb471b3298b1d3b812b",
    "line" : null,
    "diffHunk" : "@@ -495,19 +495,8 @@ Strive to make library targets as small as possible. In a situation where\n multiple Scala sources have no interdependencies you can use the\n `da_scala_library_suite` macro to automatically generate one library target per\n Scala source file, and bundle them in one target. This rule takes the same\n-attributes as `da_scala_library` with the exception of\n-`unused_dependency_checker_mode` which will always be disabled.\n-\n-If a Scala library defines macros then you must use the\n-`da_scala_macro_library` rule instead of the above. Otherwise, you will encounter \n-compiler errors of the following form (formatted for readability):\n-\n-```\n-error: macro annotation could not be expanded (the most common reason\n-for that is that you need to enable the macro paradise plugin; another\n-possibility is that you try to use macro annotation in the same\n-compilation run that defines it)\n-```\n+attributes as `da_scala_library`, but enables `unused_dependency_checker_mode`\n+by default."
  },
  {
    "id" : "213f2543-c807-4a48-ab39-004b68351393",
    "prId" : 3253,
    "comments" : [
      {
        "id" : "833eca67-fb52-4a64-99f5-baa93f8fa05f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    ],)\r\n```",
        "createdAt" : "2019-10-25T19:28:18Z",
        "updatedAt" : "2019-10-28T09:30:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cdc14951-b01c-4bce-b8ba-d5fc3f5f4ed2",
        "parentId" : "833eca67-fb52-4a64-99f5-baa93f8fa05f",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Good catch, `maven_install` takes further attributes, so I've changed it to\r\n```\r\nmaven_install(\r\n    artifacts = [\r\n        \"com.google.guava:guava:24.0-jre\",\r\n        \"org.scalaz:scalaz-core_2.12:7.2.24\",\r\n        ...\r\n    ],\r\n    ...\r\n)",
        "createdAt" : "2019-10-28T08:46:35Z",
        "updatedAt" : "2019-10-28T09:30:00Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1eae954bb7e621fe37eef6d536d9adc7f73b76ff",
    "line" : 55,
    "diffHunk" : "@@ -106,212 +106,68 @@ Transitive dependencies are introduced implicitly as dependencies of direct\n dependencies. It is preferable to only have to define direct dependencies and\n let a dependency resolver determine all transitive dependencies.\n \n-The tool [`bazel-deps`][bazel-deps] can read a list of direct Java and Scala\n-JAR dependencies and then use [Coursier][coursier] to perform dependency\n-resolution and generate the whole transitive closure of dependencies. The\n-`dev-env` provides a modified version of `bazel-deps` that supports Artifactory\n-authentication as required at Digital Asset.\n-\n-Please do not execute `bazel-deps` directly. Instead, use the\n-`update-bazel-deps` tool provided in the dev-env. Make sure to check-in the\n-resulting files into revision control.  \n-\n-Direct dependencies are manually defined in the file `dependencies.yaml` at the\n-repository root. The generated Bazel definitions are written to the `3rdparty`\n-directory in the repository root. The file `3rdparty/workspace.bzl` lists the\n-individual JAR dependencies and the directory tree under `3rdparty/jvm` defines\n-Bazel targets for them. Only Bazel targets for direct dependencies are publicly\n-visible. The Bazel targets include `exports` attributes to capture indirect\n-dependencies.\n+The [`rules_jvm_external`][rules_jvm_external] rules set can read a list of\n+direct JAR dependencies and then use [Coursier][coursier] to perform dependency\n+resolution and generate the whole transitive closure of dependencies.\n \n-The file `3rdparty/workspace.bzl` defines Bazel macros that must be called in\n+Direct dependencies are manually defined in the file `bazel-java-deps.bzl` at\n+the repository root. This file also defines Bazel macros that must be called in\n the `WORKSPACE` file in order to import the external JAR dependencies.\n \n ```\n-load(\"//3rdparty:workspace.bzl\", \"maven_servers\", \"maven_dependencies\")\n-maven_servers()\n-maven_dependencies()\n+load(\"//:bazel-java-deps.bzl\", \"install_java_deps\")\n+install_java_deps()\n+load(\"@maven//:defs.bzl\", \"pinned_maven_install\")\n+pinned_maven_install()\n ```\n \n-First, we call `maven_servers` which will define the list of repositories from\n-which to fetch JARs. These are listed in the definition of `list_servers` in\n-`3rdparty/workspace.bzl`. For example:\n+The macro `install_java_deps` defines the direct dependencies and the tools to\n+load and update pinned versions. The macro `pinned_maven_install` loads the\n+pinned artifacts into Bazel. Within `bazel-java-deps.bzl` we call\n+`maven_install` where we define all direct Maven dependencies.\n \n ```\n-{\"name\": \"central\", \"url\": \"https://digitalasset.jfrog.io/digitalasset/libs-release\"},\n+maven_install(\n+    artifacts = [\n+        \"com.google.guava:guava:24.0-jre\",\n+        \"org.scalaz:scalaz-core_2.12:7.2.24\",\n+        ...\n+    ],"
  }
]