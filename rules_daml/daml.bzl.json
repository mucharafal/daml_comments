[
  {
    "id" : "8ee62827-cf2b-466b-ac18-33f8d549523d",
    "prId" : 7183,
    "comments" : [
      {
        "id" : "b4abd2ca-900c-4fb5-88da-22ad15d5496d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m not quite clear why you need the `-gt 0` stuff. Shouldn’t this do the right thing for zero deps as well?",
        "createdAt" : "2020-08-28T16:09:39Z",
        "updatedAt" : "2020-08-28T16:09:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d3227810-64a6-4edf-937c-c526747936c2",
        "parentId" : "b4abd2ca-900c-4fb5-88da-22ad15d5496d",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "For zero deps it prints `,\"\"` which then fails with\r\n```\r\ndamlc: user error (Cannot resolve SDK dependency ''. Use daml assistant.)\r\n```",
        "createdAt" : "2020-08-28T16:11:52Z",
        "updatedAt" : "2020-08-28T16:11:53Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b224c872d43d188f86f321d9f3060fc84506ea6b",
    "line" : 25,
    "diffHunk" : "@@ -314,19 +314,41 @@ def daml_build_test(\n def daml_test(\n         name,\n         srcs = [],\n+        deps = [],\n         damlc = \"//compiler/damlc\",\n         **kwargs):\n     sh_inline_test(\n         name = name,\n-        data = [damlc] + srcs,\n+        data = [damlc] + srcs + deps,\n         cmd = \"\"\"\\\n+set -eou pipefail\n+tmpdir=$$(mktemp -d)\n+trap \"rm -rf $$tmpdir\" EXIT\n DAMLC=$$(canonicalize_rlocation $(rootpath {damlc}))\n rlocations () {{ for i in $$@; do echo $$(canonicalize_rlocation $$i); done; }}\n-\n-$$DAMLC test --files $$(rlocations {files})\n+DEPS=($$(rlocations {deps}))\n+cat << EOF > $$tmpdir/daml.yaml\n+sdk-version: {sdk_version}\n+name: test\n+version: 0.0.1\n+source: .\n+dependencies: [daml-stdlib, daml-prim $$([ $${{#DEPS[@]}} -gt 0 ] && printf ',\"%s\"' $${{DEPS[@]}})]"
  },
  {
    "id" : "cd4e2c06-7771-4efe-8d4d-9d03ed2c1904",
    "prId" : 5070,
    "comments" : [
      {
        "id" : "140cf241-87d2-4bf3-bbc5-6c3415b0399f",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Can we call this attribute `srcs` to be more in line with conventions in other rules?",
        "createdAt" : "2020-03-18T14:33:40Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94683a8f-ca8e-453a-95f5-9bd24febaa8e",
        "parentId" : "140cf241-87d2-4bf3-bbc5-6c3415b0399f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-03-18T18:48:22Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e9ca8e00-5529-4801-be81-cda346dd5b53",
        "parentId" : "140cf241-87d2-4bf3-bbc5-6c3415b0399f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-18T20:56:40Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1124c3bce4e6881fde26f5bd070e74b01ce38a50",
    "line" : null,
    "diffHunk" : "@@ -1,94 +1,283 @@\n # Copyright (c) 2020 The DAML Authors. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n-load(\"@bazel_skylib//lib:paths.bzl\", \"paths\")\n load(\"@build_environment//:configuration.bzl\", \"ghc_version\")\n \n-daml_provider = provider(doc = \"DAML provider\", fields = {\n-    \"dalf\": \"The DAML-LF file.\",\n-    \"dar\": \"The packaged archive.\",\n-})\n-\n-def _daml_impl_compile_dalf(ctx):\n-    # Call damlc compile\n-    compile_args = ctx.actions.args()\n-    compile_args.add(\"compile\")\n-    compile_args.add(ctx.file.main_src)\n-    compile_args.add(\"--output\", ctx.outputs.dalf.path)\n-    if ctx.attr.target:\n-        compile_args.add(\"--target\", ctx.attr.target)\n-    ctx.actions.run(\n-        inputs = depset([ctx.file.main_src] + ctx.files.srcs),\n-        outputs = [ctx.outputs.dalf],\n-        arguments = [compile_args],\n-        progress_message = \"Compiling DAML into DAML-LF archive %s\" % ctx.outputs.dalf.short_path,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_impl_package_dar(ctx):\n-    # Call damlc package\n-    package_args = ctx.actions.args()\n-    package_args.add(\"package\")\n-    package_args.add(ctx.file.main_src)\n-    package_args.add(ctx.attr.name)\n-    if ctx.attr.target:\n-        package_args.add(\"--target\", ctx.attr.target)\n-    package_args.add(\"--output\")\n-    package_args.add(ctx.outputs.dar.path)\n-    ctx.actions.run(\n-        inputs = [ctx.file.main_src] + ctx.files.srcs,\n-        outputs = [ctx.outputs.dar],\n-        arguments = [package_args],\n-        progress_message = \"Creating DAR package %s\" % ctx.outputs.dar.basename,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_compile_impl(ctx):\n-    _daml_impl_compile_dalf(ctx)\n-    _daml_impl_package_dar(ctx)\n-\n-    # DAML provider\n-    daml = daml_provider(\n-        dalf = ctx.outputs.dalf,\n-        dar = ctx.outputs.dar,\n-    )\n-    return [daml]\n-\n-def _daml_compile_outputs_impl(name):\n-    patterns = {\n-        \"dalf\": \"{name}.dalf\",\n-        \"dar\": \"{name}.dar\",\n-    }\n-    return {\n-        k: v.format(name = name)\n-        for (k, v) in patterns.items()\n-    }\n-\n-daml_compile = rule(\n-    implementation = _daml_compile_impl,\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+    doc = \"The DAML compiler.\",\n+)\n+\n+def _daml_configure_impl(ctx):\n+    project_name = ctx.attr.project_name\n+    project_version = ctx.attr.project_version\n+    daml_yaml = ctx.outputs.daml_yaml\n+    target = ctx.attr.target\n+    ctx.actions.write(\n+        output = daml_yaml,\n+        content = \"\"\"\n+            sdk-version: 0.0.0\n+            name: {name}\n+            version: {version}\n+            source: .\n+            dependencies: []\n+            build-options: [{target}]\n+        \"\"\".format(\n+            name = project_name,\n+            version = project_version,\n+            target = \"--target=\" + target if (target) else \"\",\n+        ),\n+    )\n+\n+_daml_configure = rule(\n+    implementation = _daml_configure_impl,\n     attrs = {\n-        \"main_src\": attr.label(\n-            allow_single_file = [\".daml\"],\n+        \"project_name\": attr.string(\n             mandatory = True,\n-            doc = \"The main DAML file that will be passed to the compiler.\",\n+            doc = \"Name of the DAML project.\",\n         ),\n-        \"srcs\": attr.label_list(\n+        \"project_version\": attr.string(\n+            mandatory = True,\n+            doc = \"Version of the DAML project.\",\n+        ),\n+        \"daml_yaml\": attr.output(\n+            mandatory = True,\n+            doc = \"The generated daml.yaml config file.\",\n+        ),\n+        \"target\": attr.string(\n+            doc = \"DAML-LF version to output.\",\n+        ),\n+    },\n+)\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+def make_cp_command(src, dest):\n+    return \"mkdir -p $(dirname {dest}); cp -f {src} {dest}\".format(\n+        src = src,\n+        dest = dest,\n+    )\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    daml_yaml = ctx.file.daml_yaml\n+    damls = ctx.files.damls\n+    dar_dict = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    input_dars = [file_of_target(k) for k in dar_dict.keys()]\n+    output_dar = ctx.outputs.dar\n+    ctx.actions.run_shell(\n+        tools = [damlc],\n+        inputs = [daml_yaml] + damls + input_dars,\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            tmpdir=$(mktemp -d)\n+            trap \"rm -rf $tmpdir\" EXIT\n+            cp -f {config} $tmpdir/daml.yaml\n+            {cp_damls}\n+            {cp_dars}\n+            {damlc} build --project-root $tmpdir -o $PWD/{output_dar}\n+        \"\"\".format(\n+            config = daml_yaml.path,\n+            cp_damls = \"\\n\".join([\n+                make_cp_command(\n+                    src = daml.path,\n+                    dest = \"$tmpdir/\" + daml.path,\n+                )\n+                for daml in damls\n+            ]),\n+            cp_dars = \"\\n\".join([\n+                make_cp_command(\n+                    src = file_of_target(k).path,\n+                    dest = \"$tmpdir/\" + v,\n+                )\n+                for k, v in dar_dict.items()\n+            ]),\n+            damlc = damlc.path,\n+            output_dar = output_dar.path,\n+        ),\n+    )\n+\n+_daml_build = rule(\n+    implementation = _daml_build_impl,\n+    attrs = {\n+        \"daml_yaml\": attr.label(\n+            allow_single_file = True,\n+            mandatory = True,\n+            doc = \"The daml.yaml config file.\",\n+        ),\n+        \"damls\": attr.label_list("
  },
  {
    "id" : "e293ec1a-81ba-469d-bd57-7c24f2a53bd4",
    "prId" : 5070,
    "comments" : [
      {
        "id" : "96b04408-950a-4128-85e8-0867249c4f45",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Bazel offers `@bazel_tools//tools/zip:zipper` which you can use instead of `unzip`. See [here](https://github.com/bazelbuild/bazel/blob/18bd1056b00e1fd58638d4db81e02cfb7df8ce69/third_party/ijar/zip_main.cc#L361).",
        "createdAt" : "2020-03-18T15:08:22Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a8ad8c82-3e16-4c00-a532-b58499dfb291",
        "parentId" : "96b04408-950a-4128-85e8-0867249c4f45",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "@aherrmann-da  Thanks for this suggestion.\r\nI changed from using `unzip` to `zipper x`. works great!\r\nUnfortunately I think I may still have a problem because I am using `find`... is that available on windows?\r\n\r\n(And a related question. Is `ln -s` possible on windows?)\r\n",
        "createdAt" : "2020-03-18T20:58:39Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8c95f5dc-23d5-4222-9ea4-062e342f45f6",
        "parentId" : "96b04408-950a-4128-85e8-0867249c4f45",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> (And a related question. Is `ln -s` possible on windows?)\r\n\r\nNo, symlinks on windows are pretty much unusable.\r\n\r\nI believe you can get `find` from `msys2`. The other `dev_env_tool` rules in `WORKSPACE` are probably a useful reference.",
        "createdAt" : "2020-03-18T21:01:10Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f562914-c0b6-4fee-a8cf-1ed85196fa04",
        "parentId" : "96b04408-950a-4128-85e8-0867249c4f45",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I'm changed to getting `find` from the posix toolchain, as `scala.bzl` does\r\nLets see if it works...",
        "createdAt" : "2020-03-18T21:55:07Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6414c443-cc50-4491-afae-548a9dcc66eb",
        "parentId" : "96b04408-950a-4128-85e8-0867249c4f45",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "it did",
        "createdAt" : "2020-03-18T23:07:20Z",
        "updatedAt" : "2020-03-18T23:07:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "088b98f7-9abf-4b28-947b-c00ba663bfd3",
        "parentId" : "96b04408-950a-4128-85e8-0867249c4f45",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah right the posix toolchain is much nicer.",
        "createdAt" : "2020-03-19T07:19:23Z",
        "updatedAt" : "2020-03-19T07:19:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1124c3bce4e6881fde26f5bd070e74b01ce38a50",
    "line" : null,
    "diffHunk" : "@@ -1,94 +1,283 @@\n # Copyright (c) 2020 The DAML Authors. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n-load(\"@bazel_skylib//lib:paths.bzl\", \"paths\")\n load(\"@build_environment//:configuration.bzl\", \"ghc_version\")\n \n-daml_provider = provider(doc = \"DAML provider\", fields = {\n-    \"dalf\": \"The DAML-LF file.\",\n-    \"dar\": \"The packaged archive.\",\n-})\n-\n-def _daml_impl_compile_dalf(ctx):\n-    # Call damlc compile\n-    compile_args = ctx.actions.args()\n-    compile_args.add(\"compile\")\n-    compile_args.add(ctx.file.main_src)\n-    compile_args.add(\"--output\", ctx.outputs.dalf.path)\n-    if ctx.attr.target:\n-        compile_args.add(\"--target\", ctx.attr.target)\n-    ctx.actions.run(\n-        inputs = depset([ctx.file.main_src] + ctx.files.srcs),\n-        outputs = [ctx.outputs.dalf],\n-        arguments = [compile_args],\n-        progress_message = \"Compiling DAML into DAML-LF archive %s\" % ctx.outputs.dalf.short_path,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_impl_package_dar(ctx):\n-    # Call damlc package\n-    package_args = ctx.actions.args()\n-    package_args.add(\"package\")\n-    package_args.add(ctx.file.main_src)\n-    package_args.add(ctx.attr.name)\n-    if ctx.attr.target:\n-        package_args.add(\"--target\", ctx.attr.target)\n-    package_args.add(\"--output\")\n-    package_args.add(ctx.outputs.dar.path)\n-    ctx.actions.run(\n-        inputs = [ctx.file.main_src] + ctx.files.srcs,\n-        outputs = [ctx.outputs.dar],\n-        arguments = [package_args],\n-        progress_message = \"Creating DAR package %s\" % ctx.outputs.dar.basename,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_compile_impl(ctx):\n-    _daml_impl_compile_dalf(ctx)\n-    _daml_impl_package_dar(ctx)\n-\n-    # DAML provider\n-    daml = daml_provider(\n-        dalf = ctx.outputs.dalf,\n-        dar = ctx.outputs.dar,\n-    )\n-    return [daml]\n-\n-def _daml_compile_outputs_impl(name):\n-    patterns = {\n-        \"dalf\": \"{name}.dalf\",\n-        \"dar\": \"{name}.dar\",\n-    }\n-    return {\n-        k: v.format(name = name)\n-        for (k, v) in patterns.items()\n-    }\n-\n-daml_compile = rule(\n-    implementation = _daml_compile_impl,\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+    doc = \"The DAML compiler.\",\n+)\n+\n+def _daml_configure_impl(ctx):\n+    project_name = ctx.attr.project_name\n+    project_version = ctx.attr.project_version\n+    daml_yaml = ctx.outputs.daml_yaml\n+    target = ctx.attr.target\n+    ctx.actions.write(\n+        output = daml_yaml,\n+        content = \"\"\"\n+            sdk-version: 0.0.0\n+            name: {name}\n+            version: {version}\n+            source: .\n+            dependencies: []\n+            build-options: [{target}]\n+        \"\"\".format(\n+            name = project_name,\n+            version = project_version,\n+            target = \"--target=\" + target if (target) else \"\",\n+        ),\n+    )\n+\n+_daml_configure = rule(\n+    implementation = _daml_configure_impl,\n     attrs = {\n-        \"main_src\": attr.label(\n-            allow_single_file = [\".daml\"],\n+        \"project_name\": attr.string(\n             mandatory = True,\n-            doc = \"The main DAML file that will be passed to the compiler.\",\n+            doc = \"Name of the DAML project.\",\n         ),\n-        \"srcs\": attr.label_list(\n+        \"project_version\": attr.string(\n+            mandatory = True,\n+            doc = \"Version of the DAML project.\",\n+        ),\n+        \"daml_yaml\": attr.output(\n+            mandatory = True,\n+            doc = \"The generated daml.yaml config file.\",\n+        ),\n+        \"target\": attr.string(\n+            doc = \"DAML-LF version to output.\",\n+        ),\n+    },\n+)\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+def make_cp_command(src, dest):\n+    return \"mkdir -p $(dirname {dest}); cp -f {src} {dest}\".format(\n+        src = src,\n+        dest = dest,\n+    )\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    daml_yaml = ctx.file.daml_yaml\n+    damls = ctx.files.damls\n+    dar_dict = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    input_dars = [file_of_target(k) for k in dar_dict.keys()]\n+    output_dar = ctx.outputs.dar\n+    ctx.actions.run_shell(\n+        tools = [damlc],\n+        inputs = [daml_yaml] + damls + input_dars,\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            tmpdir=$(mktemp -d)\n+            trap \"rm -rf $tmpdir\" EXIT\n+            cp -f {config} $tmpdir/daml.yaml\n+            {cp_damls}\n+            {cp_dars}\n+            {damlc} build --project-root $tmpdir -o $PWD/{output_dar}\n+        \"\"\".format(\n+            config = daml_yaml.path,\n+            cp_damls = \"\\n\".join([\n+                make_cp_command(\n+                    src = daml.path,\n+                    dest = \"$tmpdir/\" + daml.path,\n+                )\n+                for daml in damls\n+            ]),\n+            cp_dars = \"\\n\".join([\n+                make_cp_command(\n+                    src = file_of_target(k).path,\n+                    dest = \"$tmpdir/\" + v,\n+                )\n+                for k, v in dar_dict.items()\n+            ]),\n+            damlc = damlc.path,\n+            output_dar = output_dar.path,\n+        ),\n+    )\n+\n+_daml_build = rule(\n+    implementation = _daml_build_impl,\n+    attrs = {\n+        \"daml_yaml\": attr.label(\n+            allow_single_file = True,\n+            mandatory = True,\n+            doc = \"The daml.yaml config file.\",\n+        ),\n+        \"damls\": attr.label_list(\n             allow_files = [\".daml\"],\n-            default = [],\n-            doc = \"Other DAML files that compilation depends on.\",\n+            mandatory = True,\n+            doc = \"DAML files in this DAML project.\",\n         ),\n-        \"target\": attr.string(doc = \"DAML-LF version to output\"),\n-        \"damlc\": attr.label(\n-            executable = True,\n-            cfg = \"host\",\n-            allow_files = True,\n-            default = Label(\"//compiler/damlc\"),\n+        \"dar_dict\": attr.label_keyed_string_dict(\n+            mandatory = True,\n+            doc = \"Other DAML projects referenced by this DAML project.\",\n         ),\n+        \"dar\": attr.output(\n+            mandatory = True,\n+            doc = \"The generated DAR file.\",\n+        ),\n+        \"_damlc\": _damlc,\n     },\n-    executable = False,\n-    outputs = _daml_compile_outputs_impl,\n )\n \n+def _extract_main_dalf_impl(ctx):\n+    project_name = ctx.attr.project_name\n+    project_version = ctx.attr.project_version\n+    input_dar = ctx.file.dar\n+    output_dalf = ctx.outputs.dalf\n+    ctx.actions.run_shell(\n+        inputs = [input_dar],\n+        outputs = [output_dalf],\n+        progress_message = \"Extract DALF from DAR (%s)\" % project_name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            unzip -q {input_dar}"
  },
  {
    "id" : "dc87b307-119b-407c-af81-2eb12a10dbe2",
    "prId" : 5070,
    "comments" : [
      {
        "id" : "e80eeb45-006e-4faf-b78e-6bca0fad1a4e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Please use the actual SDK version here instead of `0.0.0`. This doesn’t matter too much for DARs used for tests but it does matter for DARs like the trigger library since `daml build` refuses to use `dependencies` with a different `sdk-version` field (for good reasons).\r\n\r\nGiven that we did actually just fix this for `damlc package` and therefore `daml_compile` rules in #4999, this would be a regression so let’s please fix this in this PR.",
        "createdAt" : "2020-03-18T18:46:11Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "38c53d81-bd96-4fe1-bb51-507ff3607eb0",
        "parentId" : "e80eeb45-006e-4faf-b78e-6bca0fad1a4e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "How does it make any different what it is set to?\r\nWe are using `damlc` directly, and not going via the SDK/assistant.",
        "createdAt" : "2020-03-18T21:04:25Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "124c11e6-6307-4fc8-8824-71deef48b8e4",
        "parentId" : "e80eeb45-006e-4faf-b78e-6bca0fad1a4e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The `sdk-version` that you set here is what ends up in the `MANIFEST.MF` in the DAR.",
        "createdAt" : "2020-03-18T21:07:45Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c9da1939-44c1-433e-a6d3-a0cbc128c578",
        "parentId" : "e80eeb45-006e-4faf-b78e-6bca0fad1a4e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I fixed this now",
        "createdAt" : "2020-03-18T21:53:26Z",
        "updatedAt" : "2020-03-18T22:00:03Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1124c3bce4e6881fde26f5bd070e74b01ce38a50",
    "line" : null,
    "diffHunk" : "@@ -1,94 +1,283 @@\n # Copyright (c) 2020 The DAML Authors. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n-load(\"@bazel_skylib//lib:paths.bzl\", \"paths\")\n load(\"@build_environment//:configuration.bzl\", \"ghc_version\")\n \n-daml_provider = provider(doc = \"DAML provider\", fields = {\n-    \"dalf\": \"The DAML-LF file.\",\n-    \"dar\": \"The packaged archive.\",\n-})\n-\n-def _daml_impl_compile_dalf(ctx):\n-    # Call damlc compile\n-    compile_args = ctx.actions.args()\n-    compile_args.add(\"compile\")\n-    compile_args.add(ctx.file.main_src)\n-    compile_args.add(\"--output\", ctx.outputs.dalf.path)\n-    if ctx.attr.target:\n-        compile_args.add(\"--target\", ctx.attr.target)\n-    ctx.actions.run(\n-        inputs = depset([ctx.file.main_src] + ctx.files.srcs),\n-        outputs = [ctx.outputs.dalf],\n-        arguments = [compile_args],\n-        progress_message = \"Compiling DAML into DAML-LF archive %s\" % ctx.outputs.dalf.short_path,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_impl_package_dar(ctx):\n-    # Call damlc package\n-    package_args = ctx.actions.args()\n-    package_args.add(\"package\")\n-    package_args.add(ctx.file.main_src)\n-    package_args.add(ctx.attr.name)\n-    if ctx.attr.target:\n-        package_args.add(\"--target\", ctx.attr.target)\n-    package_args.add(\"--output\")\n-    package_args.add(ctx.outputs.dar.path)\n-    ctx.actions.run(\n-        inputs = [ctx.file.main_src] + ctx.files.srcs,\n-        outputs = [ctx.outputs.dar],\n-        arguments = [package_args],\n-        progress_message = \"Creating DAR package %s\" % ctx.outputs.dar.basename,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_compile_impl(ctx):\n-    _daml_impl_compile_dalf(ctx)\n-    _daml_impl_package_dar(ctx)\n-\n-    # DAML provider\n-    daml = daml_provider(\n-        dalf = ctx.outputs.dalf,\n-        dar = ctx.outputs.dar,\n-    )\n-    return [daml]\n-\n-def _daml_compile_outputs_impl(name):\n-    patterns = {\n-        \"dalf\": \"{name}.dalf\",\n-        \"dar\": \"{name}.dar\",\n-    }\n-    return {\n-        k: v.format(name = name)\n-        for (k, v) in patterns.items()\n-    }\n-\n-daml_compile = rule(\n-    implementation = _daml_compile_impl,\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+    doc = \"The DAML compiler.\",\n+)\n+\n+def _daml_configure_impl(ctx):\n+    project_name = ctx.attr.project_name\n+    project_version = ctx.attr.project_version\n+    daml_yaml = ctx.outputs.daml_yaml\n+    target = ctx.attr.target\n+    ctx.actions.write(\n+        output = daml_yaml,\n+        content = \"\"\"\n+            sdk-version: 0.0.0"
  },
  {
    "id" : "358dd05a-c901-4cf2-9fa2-4da1745d269a",
    "prId" : 5070,
    "comments" : [
      {
        "id" : "c28bff2d-6e2c-4576-bba0-027a412a63db",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This needs to be `ghc_version` not SDK version. `sdk_version` will break when you are on a snapshot release commit.",
        "createdAt" : "2020-03-19T07:23:49Z",
        "updatedAt" : "2020-03-19T07:23:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d9dae3a8-bcb0-498d-90ca-ec63672e5ec5",
        "parentId" : "c28bff2d-6e2c-4576-bba0-027a412a63db",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Actually no sorry, I got confused. The `version` field needs to be in the format `ghc_version` gives you. `sdk_version` is fine :+1:",
        "createdAt" : "2020-03-19T07:32:49Z",
        "updatedAt" : "2020-03-19T16:36:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ad48245-565f-473a-9e14-da590b4cfdf2",
        "parentId" : "c28bff2d-6e2c-4576-bba0-027a412a63db",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Thanks. @garyverhaegen-da Is there doc to explain what versions shoul dbe used where?\r\nI made the fix in PR #5094",
        "createdAt" : "2020-03-19T16:34:58Z",
        "updatedAt" : "2020-03-19T16:34:58Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "688496f0-3823-4be2-974e-1ac7ba079f77",
        "parentId" : "c28bff2d-6e2c-4576-bba0-027a412a63db",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`ghc_version` needs to be used for anything that ends up as the version of a GHC (DAML) package, e.g. for the version of `daml-stdlib`. `sdk-version` is the “official” way to refer to an SDK version e.g. in the assistant. In this case `sdk_version` is completely correct. Sorry for forgetting to send the comment. I keep getting confused by githubs UX.",
        "createdAt" : "2020-03-19T16:45:44Z",
        "updatedAt" : "2020-03-19T16:45:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1124c3bce4e6881fde26f5bd070e74b01ce38a50",
    "line" : 94,
    "diffHunk" : "@@ -1,94 +1,299 @@\n # Copyright (c) 2020 The DAML Authors. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n-load(\"@bazel_skylib//lib:paths.bzl\", \"paths\")\n-load(\"@build_environment//:configuration.bzl\", \"ghc_version\")\n-\n-daml_provider = provider(doc = \"DAML provider\", fields = {\n-    \"dalf\": \"The DAML-LF file.\",\n-    \"dar\": \"The packaged archive.\",\n-})\n-\n-def _daml_impl_compile_dalf(ctx):\n-    # Call damlc compile\n-    compile_args = ctx.actions.args()\n-    compile_args.add(\"compile\")\n-    compile_args.add(ctx.file.main_src)\n-    compile_args.add(\"--output\", ctx.outputs.dalf.path)\n-    if ctx.attr.target:\n-        compile_args.add(\"--target\", ctx.attr.target)\n-    ctx.actions.run(\n-        inputs = depset([ctx.file.main_src] + ctx.files.srcs),\n-        outputs = [ctx.outputs.dalf],\n-        arguments = [compile_args],\n-        progress_message = \"Compiling DAML into DAML-LF archive %s\" % ctx.outputs.dalf.short_path,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_impl_package_dar(ctx):\n-    # Call damlc package\n-    package_args = ctx.actions.args()\n-    package_args.add(\"package\")\n-    package_args.add(ctx.file.main_src)\n-    package_args.add(ctx.attr.name)\n-    if ctx.attr.target:\n-        package_args.add(\"--target\", ctx.attr.target)\n-    package_args.add(\"--output\")\n-    package_args.add(ctx.outputs.dar.path)\n-    ctx.actions.run(\n-        inputs = [ctx.file.main_src] + ctx.files.srcs,\n-        outputs = [ctx.outputs.dar],\n-        arguments = [package_args],\n-        progress_message = \"Creating DAR package %s\" % ctx.outputs.dar.basename,\n-        executable = ctx.executable.damlc,\n-    )\n-\n-def _daml_compile_impl(ctx):\n-    _daml_impl_compile_dalf(ctx)\n-    _daml_impl_package_dar(ctx)\n-\n-    # DAML provider\n-    daml = daml_provider(\n-        dalf = ctx.outputs.dalf,\n-        dar = ctx.outputs.dar,\n-    )\n-    return [daml]\n-\n-def _daml_compile_outputs_impl(name):\n-    patterns = {\n-        \"dalf\": \"{name}.dalf\",\n-        \"dar\": \"{name}.dar\",\n-    }\n-    return {\n-        k: v.format(name = name)\n-        for (k, v) in patterns.items()\n-    }\n-\n-daml_compile = rule(\n-    implementation = _daml_compile_impl,\n+load(\"@build_environment//:configuration.bzl\", \"ghc_version\", \"sdk_version\")\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+    doc = \"The DAML compiler.\",\n+)\n+\n+_zipper = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"@bazel_tools//tools/zip:zipper\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_configure_impl(ctx):\n+    project_name = ctx.attr.project_name\n+    project_version = ctx.attr.project_version\n+    daml_yaml = ctx.outputs.daml_yaml\n+    target = ctx.attr.target\n+    ctx.actions.write(\n+        output = daml_yaml,\n+        content = \"\"\"\n+            sdk-version: {sdk}"
  },
  {
    "id" : "4f8824db-801c-4b0c-a94f-12acb600d1b5",
    "prId" : 4513,
    "comments" : [
      {
        "id" : "817b452e-879a-4388-b437-94bf1194eb57",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m slightly confused, shouldn’t this be `ghc-version`?",
        "createdAt" : "2020-02-19T10:17:57Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46006f2a-424d-443a-8a19-58e5e425e582",
        "parentId" : "817b452e-879a-4388-b437-94bf1194eb57",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I'm not sure, to be honest. I've tried to limit `ghc_version` to the minimum number of places where it is required, and things seem to build with the sdk version here. As far as I'm aware `ghc_version` is only needed for the one call to `ghc-pkg` inside the compiler; everything else should see the sdk version if possible.",
        "createdAt" : "2020-02-19T12:41:09Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "288a1aba-dc28-472c-93ba-cd2f94ece1e4",
        "parentId" : "817b452e-879a-4388-b437-94bf1194eb57",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Turns out: yes, it should.",
        "createdAt" : "2020-02-24T19:01:30Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81246bd2733ace93653cb663dca5a0cdaf7c11e9",
    "line" : null,
    "diffHunk" : "@@ -136,15 +137,15 @@ def _daml_doctest_impl(ctx):\n       DAMLC=$(rlocation $TEST_WORKSPACE/{damlc})\n       CPP=$(rlocation $TEST_WORKSPACE/{cpp})\n       rlocations () {{ for i in $@; do echo $(rlocation $TEST_WORKSPACE/$i); done; }}\n-      $DAMLC doctest {flags} --cpp $CPP --package-name {package_name}-`cat $(rlocation $TEST_WORKSPACE/{version_file})` $(rlocations \"{files}\")\n+      $DAMLC doctest {flags} --cpp $CPP --package-name {package_name}-{version} $(rlocations \"{files}\")\n     \"\"\".format(\n         damlc = ctx.executable.damlc.short_path,\n         # we end up with \"../hpp/hpp\" while we want \"external/hpp/hpp\"\n         # so we just do the replacement ourselves.\n         cpp = ctx.executable.cpp.short_path.replace(\"..\", \"external\"),\n         package_name = ctx.attr.package_name,\n         flags = \" \".join(ctx.attr.flags),\n-        version_file = ctx.file.version.path,\n+        version = sdk_version,"
  },
  {
    "id" : "cf84814f-0568-4ef4-ac48-05c8e716fd5a",
    "prId" : 1894,
    "comments" : [
      {
        "id" : "29ec900b-00ed-43fa-9cf3-d0ba1e8610fb",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "How come this doesn't require the usual [bash `rlocation` boilerplate](https://github.com/bazelbuild/bazel/blob/168ee7c589955372843115f67d9df2b4cc42e6ba/examples/shell/test.sh#L18)?",
        "createdAt" : "2019-06-27T15:23:54Z",
        "updatedAt" : "2019-06-28T10:23:02Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "81b01aa0-89f1-4c60-86e8-9b22f8ff48ee",
        "parentId" : "29ec900b-00ed-43fa-9cf3-d0ba1e8610fb",
        "author" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "body" : "I was also a bit surprised, but it's injected automatically - the difference here is that it's a Bazel's rule, not plain bash script used in `sh_test`. Generated test exec files does not contain any defintion of the `rlocation`, so execution of these tests outside of Bazel runtime will fail, but not sure if we care about such case (running tests generated by Bazel outside of Bazel).",
        "createdAt" : "2019-06-28T09:06:42Z",
        "updatedAt" : "2019-06-28T10:23:02Z",
        "lastEditedBy" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "20dc0529-9e8f-4710-98dc-5883a2f2039a",
        "parentId" : "29ec900b-00ed-43fa-9cf3-d0ba1e8610fb",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Interesting, that's good to know.\r\n\r\n> not sure if we care about such case (running tests generated by Bazel outside of Bazel).\r\n\r\nThe environment between `bazel run` and `bazel test` is typically different, so I guess it's fine if these tests require `bazel test`. It's still possible to pass arguments using `--test_args` if that's necessary at some point.",
        "createdAt" : "2019-06-28T09:26:27Z",
        "updatedAt" : "2019-06-28T10:23:02Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "04c42d8fd5873e96f3f2e104af65a66436bf3ea1",
    "line" : 8,
    "diffHunk" : "@@ -104,8 +104,16 @@ daml_compile = rule(\n \n def _daml_test_impl(ctx):\n     script = \"\"\"\n-      {damlc} test --files {files}\n-    \"\"\".format(damlc = ctx.executable.damlc.short_path, files = \" \".join([f.short_path for f in ctx.files.srcs]))\n+      set -eou pipefail\n+\n+      DAMLC=$(rlocation $TEST_WORKSPACE/{damlc})"
  }
]