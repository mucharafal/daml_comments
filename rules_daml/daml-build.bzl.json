[
  {
    "id" : "d7d89869-b8dd-46bf-be97-03671e621b2e",
    "prId" : 4891,
    "comments" : [
      {
        "id" : "5c5cbceb-3881-4cfc-82cb-6c8a371a083d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why are you calling `file` on the result?",
        "createdAt" : "2020-03-09T11:00:47Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "63728f99-23e0-4537-8bd4-6b9cfe3f37ea",
        "parentId" : "5c5cbceb-3881-4cfc-82cb-6c8a371a083d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I already remove this. It was a hangover from development",
        "createdAt" : "2020-03-09T12:27:53Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    config = ctx.file.config\n+    srcs = ctx.files.srcs\n+    dd = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    project_root = config.dirname\n+    input_dars = [file_of_target(k) for k in dd.keys()]\n+    output_dar = ctx.actions.declare_file(name + \".dar\")\n+    ctx.actions.run_shell(\n+        tools = depset([damlc]),\n+        inputs = depset([config] + srcs + input_dars),\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            {moves}\n+            {damlc} build --project-root {project_root} -o {dot_dot}/{output_dar}\n+            file {output_dar}"
  },
  {
    "id" : "948c59ca-508f-4c64-8d37-1fa5612ff42e",
    "prId" : 4891,
    "comments" : [
      {
        "id" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "This moves away the input file. In a sandbox that's fine. Though, this may break on Windows where we don't have sandboxing.",
        "createdAt" : "2020-03-09T11:23:28Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "668f65bd-0543-4221-9049-141c10e39af5",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "So `cp` should be ok?",
        "createdAt" : "2020-03-09T13:44:14Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "79ac789e-d99b-4104-bceb-3e617c7349fb",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, that's safe",
        "createdAt" : "2020-03-09T13:49:03Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da42f0b5-e138-4ed5-86ad-1e4f283febe0",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I changed the `mv` to `cp` and the windows build failed with \r\n```cp: cannot create regular file 'docs/source/upgrade/example/coinV2/coin-1.0.0.dar': Permission denied``` !!\r\nWhat happened here?\r\n",
        "createdAt" : "2020-03-09T14:17:36Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "acbfa221-b286-4aa3-970a-bb8443ac26a2",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I didn't find the old Azure logs to confirm, but if this is running on the same node, then this could be a collision with the moved file from the previous run. Looking at the command\r\n```\r\ncp bazel-out/x64_windows-opt/bin/docs/daml-upgrade-example-v1.dar docs/sour...\r\n```\r\nthis is copying a generated file into the source tree. I don't have a Windows machine in front of me right now to confirm, but Bazel usually makes generated files read-only. So, this is probably trying to overwrite a write protected file. We've had similar issues with the Cabal rules in the past, and had to call `cabal clean` in the end to work around it. See https://github.com/tweag/rules_haskell/pull/1156.\r\n\r\nTo avoid this issue this command should probably also set a `trap` to remove the copied files.",
        "createdAt" : "2020-03-09T14:51:04Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0927a30d-9e4e-496f-bea0-943a9a851a79",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I changed to use `cp -f`, but I wonder if to be properly resilient requires doing the daml build in a temporary directory. There was another build failure complaining about files in the package database under .daml - and the failure just went away on re-run.\r\n",
        "createdAt" : "2020-03-09T18:50:14Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5ac56d39-333d-421c-8312-fbf89b75a377",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It’s been a while so I don’t remember the exact errors but looking at the git history we did something very similar for the genrules around triggers, see https://github.com/digital-asset/daml/pull/2816",
        "createdAt" : "2020-03-09T19:01:12Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f492c4d5-86b5-46fe-9ad6-f2dd043ba6c2",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Thanks, I'll take a look at this tomorrow...",
        "createdAt" : "2020-03-09T19:43:42Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7d6a93b6-12c6-4faf-a909-2ffc2e95d3c5",
        "parentId" : "b852956f-bc6c-4433-aaca-819ec02bcb53",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "> I changed to use `cp -f`, but I wonder if to be properly resilient requires doing the daml build in a temporary directory. There was another build failure complaining about files in the package database under .daml - and the failure just went away on re-run.\r\n\r\n`cp -f` will avoid the permission denied issue, but it will still leave files behind in the source tree. That's an issue, because they might be picked up by a `glob` on the next run. If nothing else, it'll mess with the cache. Yeah, a temporary directory would make certain that we don't leave files behind.",
        "createdAt" : "2020-03-10T08:11:12Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    config = ctx.file.config\n+    srcs = ctx.files.srcs\n+    dd = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    project_root = config.dirname\n+    input_dars = [file_of_target(k) for k in dd.keys()]\n+    output_dar = ctx.actions.declare_file(name + \".dar\")\n+    ctx.actions.run_shell(\n+        tools = depset([damlc]),\n+        inputs = depset([config] + srcs + input_dars),\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            {moves}\n+            {damlc} build --project-root {project_root} -o {dot_dot}/{output_dar}\n+            file {output_dar}\n+        \"\"\".format(\n+            moves = \"\\n\".join([\n+                \"mv {a} {b}\".format(\n+                    a = file_of_target(k).path,\n+                    b = project_root + \"/\" + v,\n+                )"
  },
  {
    "id" : "c48e3aea-6f92-41ca-99ce-395131353216",
    "prId" : 4891,
    "comments" : [
      {
        "id" : "73fb3ae0-0572-4f14-b62d-1bb6da4153f5",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Is this for debugging or meant to stay?",
        "createdAt" : "2020-03-09T11:25:59Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0dbfbe27-22e0-4d67-aec0-b7f32f19ed6d",
        "parentId" : "73fb3ae0-0572-4f14-b62d-1bb6da4153f5",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "yeah. it was debugging. already gone!",
        "createdAt" : "2020-03-09T13:44:37Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    config = ctx.file.config\n+    srcs = ctx.files.srcs\n+    dd = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    project_root = config.dirname\n+    input_dars = [file_of_target(k) for k in dd.keys()]\n+    output_dar = ctx.actions.declare_file(name + \".dar\")\n+    ctx.actions.run_shell(\n+        tools = depset([damlc]),\n+        inputs = depset([config] + srcs + input_dars),\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            {moves}\n+            {damlc} build --project-root {project_root} -o {dot_dot}/{output_dar}\n+            file {output_dar}"
  },
  {
    "id" : "cbc963e1-1f2a-4d0a-bb39-d3485ca7d823",
    "prId" : 4891,
    "comments" : [
      {
        "id" : "bc56a832-12aa-4427-925c-6d1f6346e68b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n            {damlc} build --project-root {project_root} -o $PWD/{output_dar}\r\n```",
        "createdAt" : "2020-03-09T11:56:47Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "817d1520-0a20-4796-a9ed-c5494de6b797",
        "parentId" : "bc56a832-12aa-4427-925c-6d1f6346e68b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yeah.. I had this at once point.. and saw that it worked... but it kind of worried me.. seems to smell, but I'm not sure why :man_shrugging: ",
        "createdAt" : "2020-03-09T12:31:20Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "58728c43-a713-4599-a060-1233c2fa4fff",
        "parentId" : "bc56a832-12aa-4427-925c-6d1f6346e68b",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "As long as that path doesn't enter the output artifact `$PWD` seems perfectly fine.",
        "createdAt" : "2020-03-09T13:06:37Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0108261c-3b12-4868-802b-90f77c338b9a",
        "parentId" : "bc56a832-12aa-4427-925c-6d1f6346e68b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I'll fix it to use $PWD then.",
        "createdAt" : "2020-03-09T13:43:13Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    config = ctx.file.config\n+    srcs = ctx.files.srcs\n+    dd = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    project_root = config.dirname\n+    input_dars = [file_of_target(k) for k in dd.keys()]\n+    output_dar = ctx.actions.declare_file(name + \".dar\")\n+    ctx.actions.run_shell(\n+        tools = depset([damlc]),\n+        inputs = depset([config] + srcs + input_dars),\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            {moves}\n+            {damlc} build --project-root {project_root} -o {dot_dot}/{output_dar}"
  },
  {
    "id" : "d905cb5f-7f62-4953-82da-8a522acf7c2e",
    "prId" : 4891,
    "comments" : [
      {
        "id" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think there are two usecases for a `daml_build` rule:\r\n\r\n1. Documentation for upgrading, packaging, …. In this case the `daml.yaml` is something displayed in the documentation and we want to test against that exact `daml.yaml` (see my comment above on the change to the `daml.yaml`). I think in that case we might be able to get away with something simpler: We can not shuffle sources around and instead just go to the directory of the `daml.yaml` and call `daml build`. If the files are arranged in the right locations I believe this should work out. The one thing that won’t work is finding the `dar` files. I don’t really have a great solution for that. idea. I don’t expect this usecase to ever become particularly common. ATM the upgrading docs are the only thing that would make use of this and I wonder if we might just be better off keeping the `sh_test` there to make sure we reproduce exactly what our documentation says. Curious what @aherrmann-da thinks about this.\r\n\r\n2. The other usecase is basically every single call to `daml_compile` in our codebase atm and things like the genrule for triggers or DAML script which cannot use `daml_compile`. I think in this case, we don’t want to specify a `daml.yaml` at all. Instead if probably makes sense for the Bazel rule to accept a list of DAR files as dependencies, a list of source files, a name, and maybe a `strip_prefix` field and then the rule will generate the `daml.yaml` automagically.\r\n\r\nI think the current rule is in a bit of an awkward middle ground where it doesn’t quite work for documentation since it requires modifying the `daml.yaml` but it’s also rather awkward to use outside of documentation since there it would be much more convenient to specify the `daml.yaml` directly in the rule. Given that 2 is much more common, I think it would make more sense to at least initially focus the rule on that and leave documentation like it is for now.",
        "createdAt" : "2020-03-09T12:15:58Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a1ef3cd3-286f-45ab-85e1-28f213f84901",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I think part of what is missing is a principled way of locating one DAML project from another within a `daml.yaml` file.",
        "createdAt" : "2020-03-09T12:34:15Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8067b92d-6f72-405b-8370-578959390c24",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I'm not going to suggest this rule is perfect, but I think it's a definite step forward from the use of `sh_test`.",
        "createdAt" : "2020-03-09T12:36:14Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a2ee368-94be-483a-a4c4-975c27384e82",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> I think part of what is missing is a principled way of locating one DAML project from another within a `daml.yaml` file.\r\n\r\nThe problem with that is that in general you might only have the DAR and nothing else. Pointing to the sources doesn’t really make sense. It is crucial that you use the DAR as the input and don’t recompile the sources for `data-dependencies`.\r\n\r\n> I'm not going to suggest this rule is perfect, but I think it's a definite step forward from the use of `sh_test`.\r\n\r\nThe `sh_test` tests exactly what we want users to run. With the change to the `daml.yaml` this won’t run as all unless you explicitly copy the DAR around which isn’t explained in the documentation and I don’t think we want to explain it since it’s just another step with no benefit. So while I do agree that it’s nicer in terms of the code in the `BUILD.bazel` file, it’s worse in terms of the UX for someone reading the docs which is the important part here. That’s why I think focusing on 2 where we can completely ignore those concerns might be more sensible.",
        "createdAt" : "2020-03-09T12:42:49Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "25db8a8a-2ec1-4e20-9c3c-b4f52428c460",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "> 1. The one thing that won’t work is finding the `dar` files. I don’t really have a great solution for that.\r\n\r\nCould this be done with `--package-db` flags? `daml_compile` (or a dedicated `daml_package`) could generate one, and we could pass `--package-db` flags to `damlc` for dependencies.",
        "createdAt" : "2020-03-09T13:12:41Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "825f56ce-c32e-4d26-a857-6be9c74d0add",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "> I think there are two usecases for a `daml_build` rule\r\n> [...]\r\n> 2\\. The other usecase is basically every single call to `daml_compile` in our codebase atm and things like the genrule for triggers or DAML script which cannot use `daml_compile`. I think in this case, we don’t want to specify a `daml.yaml` at all. Instead if probably makes sense for the Bazel rule to accept a list of DAR files as dependencies, a list of source files, a name, and maybe a `strip_prefix` field and then the rule will generate the `daml.yaml` automagically.\r\n\r\nI've been wondering about that. What's unfortunate about this approach is that we'd have to keep the available metadata fields in `daml.yaml` in sync with the corresponding Bazel rule's available attributes. If we could figure out how to make `daml.yaml` work within Bazel, that would seem preferable.\r\n\r\nIf it's only the DAR paths, maybe we could have a search paths flag to `damlc`? Something akin to `-I`/`-L`.",
        "createdAt" : "2020-03-09T13:17:53Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d30791c-b21d-4c75-989c-79d008cd19f9",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> I've been wondering about that. What's unfortunate about this approach is that we'd have to keep the available metadata fields in `daml.yaml` in sync with the corresponding Bazel rule's available attributes.\r\n\r\nI would just remove the `daml.yaml` file completely for those cases so there’s nothing to keep in sync.",
        "createdAt" : "2020-03-09T13:42:59Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dfd687b4-41e5-4b83-b18f-4ed210f4208e",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "> The problem with that is that in general you might only have the DAR and nothing else. Pointing to the sources doesn’t really make sense. It is crucial that you use the DAR as the input and don’t recompile the sources for data-dependencies.\r\n\r\nThis of course is true for real uses of old, mustn't-be-changed dar files.\r\n\r\nBut the rule under discussion is intended to check the DAML of our documentation example is correct. So we do want to have a proper dependency on v1 form v2. So if someone edits the DAML in v1 to break v2, the test will discover this.\r\n",
        "createdAt" : "2020-03-09T13:54:40Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34330b39-6d6a-43ca-8cf2-b8f38f3c16f3",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "> > I've been wondering about that. What's unfortunate about this approach is that we'd have to keep the available metadata fields in `daml.yaml` in sync with the corresponding Bazel rule's available attributes.\r\n> \r\n> I would just remove the `daml.yaml` file completely for those cases so there’s nothing to keep in sync.\r\n\r\nI don't mean the values, I mean the fields themselves. E.g. the `daml_compile` rule may need a `exposed-modules` attribute, or a `build-options` attribute. It's not too bad, but it's repetition. For the cases we have so far, it's probably fine.",
        "createdAt" : "2020-03-09T14:35:15Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e21df8a5-e664-402b-9373-361b58427934",
        "parentId" : "0a3f6c67-a40f-4db5-bbd6-0be87f2cb381",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah I see. Yeah that’s slightly annoying. Anyway that’s a discussion for a separate PR.",
        "createdAt" : "2020-03-10T11:39:54Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : 28,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    config = ctx.file.config\n+    srcs = ctx.files.srcs\n+    dd = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    project_root = config.dirname\n+    input_dars = [file_of_target(k) for k in dd.keys()]\n+    output_dar = ctx.actions.declare_file(name + \".dar\")\n+    ctx.actions.run_shell(\n+        tools = depset([damlc]),\n+        inputs = depset([config] + srcs + input_dars),\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\""
  },
  {
    "id" : "72525ef5-ee7b-44bd-a3e2-65c78bbad4b5",
    "prId" : 4891,
    "comments" : [
      {
        "id" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "@aherrmann-da Should this be using `declare_directory` or does this run into the same problems since the name is fixed and we need to use `mktmp` in the command itself?",
        "createdAt" : "2020-03-10T10:34:49Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d1be54c8-51ee-4b6a-b61c-d87bd717c5fc",
        "parentId" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "The `tmpdir` doesn't require a `declare_directory`. @nickchapman-da you can just `mktmp` it in the `run_shell` command (and also setup a cleanup trap). `declare_file|directory` are used to tell Bazel about outputs to pass them to other actions. IIUC this `tmpdir` is only used within this action.\r\n\r\nAlso, if possible I'd refrain from using `declare_directory` specifically. With rules_haskell it's causing mysterious \"module not found\" errors on Windows.",
        "createdAt" : "2020-03-10T10:40:37Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "89807e63-f3c3-4c78-a991-2d34024b1831",
        "parentId" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "My understanding of the previous problem, was that we were building in the source directory, and this caused problems with the way bazel handle globs. Building in a tmpdir should avoid this problem.\r\n\r\nAnother issue may be that without sandboxing, the results of one build will persist and be unintentionally available to the next. I've added a rm of the tmpdir before the build to avoid these issues.\r\n\r\nI did have a remove of the tmpdir after the build action had run, but that broke on windows,  so I removed the remove!",
        "createdAt" : "2020-03-10T12:08:51Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "66c70de5-a567-45e8-abfe-64f1addf7069",
        "parentId" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The point is that this is not actually a temp dir, its just another directory created by `declare_directory` which has caused problems in the past.  Using `mktemp` is both simpler and avoids any potential issues in `declare_directory`.",
        "createdAt" : "2020-03-10T12:11:05Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fad1a898-47db-4f21-94fa-35dd09d2fd08",
        "parentId" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "@aherrmann I can recode to remove the use of `declare_directory` if you think I should. Or we could just see if the way it's used in this rule is ok...",
        "createdAt" : "2020-03-10T12:11:33Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fcd21d6f-548d-4874-b41d-2fa05c9d2e52",
        "parentId" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Let’s please just switch to `mktemp` for now.",
        "createdAt" : "2020-03-10T12:25:07Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6e5f3408-0259-421f-91a2-6db31958e900",
        "parentId" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Our comments overlapped",
        "createdAt" : "2020-03-10T12:25:30Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8b5a7c1b-b359-4b05-90d5-78726728dcca",
        "parentId" : "b4137b8b-7133-4f7b-8b95-f99ea654618b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok!",
        "createdAt" : "2020-03-10T12:28:36Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,132 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    config = ctx.file.config\n+    damls = ctx.files.damls\n+    dd = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    input_dars = [file_of_target(k) for k in dd.keys()]\n+    output_dar = ctx.actions.declare_file(name + \".dar\")\n+    tmpdir = ctx.actions.declare_directory(name + \".tmp\")"
  },
  {
    "id" : "73cb6963-b2ae-4c24-a13c-07c6ec1f4d3f",
    "prId" : 4891,
    "comments" : [
      {
        "id" : "3e15d78e-ad89-42b0-8a6e-1357c5067086",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n            trap \"rm -rf $tmpdir\" EXIT\r\n            mkdir -p $tmpdir/daml\r\n```\r\nLeaving stale directories around is a bit uggly and might result in issues in the long term (although somewhat unlikely at least on CI given that we recycle nodes but it’s easy enough to clean it up).",
        "createdAt" : "2020-03-10T12:59:01Z",
        "updatedAt" : "2020-03-10T13:58:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02bcb56d82f4f1d774e4aa52e2458cacc2dc704b",
    "line" : 32,
    "diffHunk" : "@@ -0,0 +1,130 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def file_of_target(k):\n+    [file] = k.files.to_list()\n+    return file\n+\n+_damlc = attr.label(\n+    allow_single_file = True,\n+    default = Label(\"//compiler/damlc\"),\n+    executable = True,\n+    cfg = \"host\",\n+)\n+\n+def _daml_build_impl(ctx):\n+    name = ctx.label.name\n+    config = ctx.file.config\n+    damls = ctx.files.damls\n+    dd = ctx.attr.dar_dict\n+    damlc = ctx.file._damlc\n+    input_dars = [file_of_target(k) for k in dd.keys()]\n+    output_dar = ctx.actions.declare_file(name + \".dar\")\n+    ctx.actions.run_shell(\n+        tools = depset([damlc]),\n+        inputs = depset([config] + damls + input_dars),\n+        outputs = [output_dar],\n+        progress_message = \"Building DAML project %s\" % name,\n+        command = \"\"\"\n+            set -eou pipefail\n+            tmpdir=$(mktemp -d)\n+            mkdir -p $tmpdir/daml"
  }
]