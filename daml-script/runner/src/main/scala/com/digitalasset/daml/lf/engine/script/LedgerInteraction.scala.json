[
  {
    "id" : "3a3476f9-59fc-4d88-8591-0fcc085c8db2",
    "prId" : 7682,
    "comments" : [
      {
        "id" : "47af91dc-681c-4fd6-914e-2050261a6211",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    } else if (tokenParties == parties.toSet.toSet[String]) {\r\n```",
        "createdAt" : "2020-10-14T14:05:39Z",
        "updatedAt" : "2020-10-14T14:06:43Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3cf4dafa-4a07-4c4b-9b04-5335e58e5218",
        "parentId" : "47af91dc-681c-4fd6-914e-2050261a6211",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do you really mean `toSet` twice or `toList` followed by `toSet`?",
        "createdAt" : "2020-10-14T14:10:02Z",
        "updatedAt" : "2020-10-14T14:10:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "083383c9-66a4-4feb-b79d-2f46c622d1bd",
        "parentId" : "47af91dc-681c-4fd6-914e-2050261a6211",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Or maybe just `toSet` once?",
        "createdAt" : "2020-10-14T14:10:22Z",
        "updatedAt" : "2020-10-14T14:10:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "303b3202-ef84-4804-b844-5769413dc577",
        "parentId" : "47af91dc-681c-4fd6-914e-2050261a6211",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I really mean `toSet` twice.",
        "createdAt" : "2020-10-14T14:17:17Z",
        "updatedAt" : "2020-10-14T14:17:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b4fdda26-ddd3-4c7a-8684-2c9137c28a49",
        "parentId" : "47af91dc-681c-4fd6-914e-2050261a6211",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The first `toSet` doesn't take a type parameter; the second one does, which is where you can do the widen that you're doing with natural transformation to `List` and then using covariance in the merged code. The second `toSet` will return the receiver with its type changed.",
        "createdAt" : "2020-10-14T14:19:18Z",
        "updatedAt" : "2020-10-14T14:19:18Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d165b82f6311b3a5837d25035bd9c78b1f3b5e0c",
    "line" : 297,
    "diffHunk" : "@@ -1,1 +882,886 @@        new RuntimeException(\n          s\"Tried to $what as ${parties.toList.mkString(\" \")} but token contains no parties.\"))\n    } else if (tokenParties == Set[String](parties.toList: _*)) {\n      Future.unit\n    } else {"
  },
  {
    "id" : "c1fab759-2c6e-4349-940b-12b332c2b0f5",
    "prId" : 7378,
    "comments" : [
      {
        "id" : "e4911812-206a-49a3-aa91-252303b284df",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems strictly slower than what we did before: We get an `SValue` for all commands from speedy. Then you convert it to a `Value` only to then convert it back to `SValue`s here. While you can argue that this is not a noticeable performance loss, I’m at least somewhat cautious in doing this without having measured it.",
        "createdAt" : "2020-09-14T07:24:25Z",
        "updatedAt" : "2020-09-14T11:23:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ce737f7c67beb87c4261e01e86fd50436368ede",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +453,457 @@    machine.localContracts = Map.empty\n    machine.globalDiscriminators = Set.empty\n    val speedyCommands = preprocessor.unsafePreprocessCommands(commands.to[ImmArray])._1\n    val translated = compiledPackages.compiler.unsafeCompile(speedyCommands)\n    machine.setExpressionToEvaluate(SEApp(translated, Array(SEValue.Token)))"
  },
  {
    "id" : "d8b2d0ca-2185-47d8-bc5d-3f044699176f",
    "prId" : 7354,
    "comments" : [
      {
        "id" : "4530bc1d-efd6-41c5-b336-721d9cbe14f1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The implementation over the JSON API is a huge mess (for all methods). I’ll open an issue to clean this up separately.",
        "createdAt" : "2020-09-09T09:40:26Z",
        "updatedAt" : "2020-09-10T15:45:07Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c78f22bbc802132f3022ab3407596ba027a98cd0",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +774,778 @@    }\n  }\n  override def queryContractKey(party: SParty, templateId: Identifier, key: SValue)(\n      implicit ec: ExecutionContext,\n      mat: Materializer) = {"
  },
  {
    "id" : "66878d17-8b78-4572-adea-04f9baf87281",
    "prId" : 7189,
    "comments" : [
      {
        "id" : "25c3632e-ec94-4513-b1b0-ee728c8cd92c",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Any chance we can do better than a `RuntimeException`?",
        "createdAt" : "2020-08-19T18:51:30Z",
        "updatedAt" : "2020-08-19T18:51:54Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "31929dd7-204b-4b72-93c7-3e7ffb068016",
        "parentId" : "25c3632e-ec94-4513-b1b0-ee728c8cd92c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I will let that for `daml-application-runtime` team.",
        "createdAt" : "2020-08-20T07:15:51Z",
        "updatedAt" : "2020-08-20T07:15:51Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8cac88e-a741-4177-a86a-8506c49c8347",
        "parentId" : "25c3632e-ec94-4513-b1b0-ee728c8cd92c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Fair point, I need to brush up my knowledge of sensible exception types in Scala.",
        "createdAt" : "2020-08-20T07:23:32Z",
        "updatedAt" : "2020-08-20T07:27:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4bea54adfba4d217c92a95e3c59673890277c712",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +435,439 @@                }\n              case Right(Left(x)) =>\n                result = Failure(new RuntimeException(s\"Unexpected abort: $x\"))\n              case Left(msg) =>\n                result = Failure(new RuntimeException(msg))"
  },
  {
    "id" : "788bae56-f4cf-43f3-ab3c-cce62ba482b2",
    "prId" : 7154,
    "comments" : [
      {
        "id" : "f5de5f1c-d24b-4768-9b93-8e7dfb8f89cc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It you want to be consistent the errors from here on could all start with `Encountered scenario instruction`.",
        "createdAt" : "2020-08-17T12:21:42Z",
        "updatedAt" : "2020-08-17T13:18:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9914b498-4a8d-4684-9599-01255bec7a8a",
        "parentId" : "f5de5f1c-d24b-4768-9b93-8e7dfb8f89cc",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Good point, I've made the messages more consistent.",
        "createdAt" : "2020-08-17T13:12:27Z",
        "updatedAt" : "2020-08-17T13:18:58Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bf2b913218c5de31a221d04ff253bd69be6ff762",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +457,461 @@            new RuntimeException(\n              s\"FATAL: Missing package $pkg should have been reported at Script compilation\"))\n        case SResultScenarioInsertMustFail(committers @ _, optLocation @ _) =>\n          result = Failure(\n            new RuntimeException("
  },
  {
    "id" : "4f6b30f2-3bfb-4635-8c4c-fd8d0c801c73",
    "prId" : 7141,
    "comments" : [
      {
        "id" : "2486e33b-77ee-4635-9bab-cbc2a2421c6c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does `disclosures` include signatories?",
        "createdAt" : "2020-08-17T07:38:52Z",
        "updatedAt" : "2020-08-17T07:52:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "243ccbfb-0469-4702-84f4-9ff036725405",
        "parentId" : "2486e33b-77ee-4635-9bab-cbc2a2421c6c",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, printing out `ledgerParties` at [this `listKnownParties`](https://github.com/digital-asset/daml/pull/7141/files/f6638674e0b44cb4312366bd2c85ea1b076f1dd9#diff-cccb5410aed907fe161d04a35b70330cR451) shows that it includes `alice`, `alice1`, and `bob`. `alice` is only a signatory, not an observer at this point. As I understand it `disclosures` contains [`informeesOfNode`](https://github.com/digital-asset/daml/blob/19f002bb23ac4c48b408432dfaf1ee42f87a219a/daml-lf/transaction/src/main/scala/com/digitalasset/daml/lf/transaction/NodeInfo.scala#L22) which includes signatories.",
        "createdAt" : "2020-08-17T08:35:53Z",
        "updatedAt" : "2020-08-17T08:35:53Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f6638674e0b44cb4312366bd2c85ea1b076f1dd9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +474,478 @@  // allocated explicitly, e.g. parties created by `partyFromText`.\n  private def getLedgerParties(): Iterable[Ref.Party] = {\n    scenarioRunner.ledger.ledgerData.nodeInfos.values.flatMap(_.disclosures.keys)\n  }\n"
  },
  {
    "id" : "f5c2cb32-acbb-46c6-9901-b1ab44423d59",
    "prId" : 7076,
    "comments" : [
      {
        "id" : "c75b2b6c-31aa-405b-8ad2-0def701cfac2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I am slightly worried that we are effectively replicating a significant part of the logic of `submit`. What happens if we replace the whole implementation here by something that catches `SError` and flips it?",
        "createdAt" : "2020-08-11T14:47:31Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eebeaae6-ea29-431a-9881-088d7efbe46d",
        "parentId" : "c75b2b6c-31aa-405b-8ad2-0def701cfac2",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "By catching `SError` you mean the `SResultError` branch? AFAIU that's not enough as we also want to flip in other cases, e.g. on `commitTransaction` error in `SResultScenarioCommit`. Conversely we don't always want to recover from `Failure`, e.g. AFAIU we don't want to recover from `Failure(new RuntimeException(s\"Unexpected abort: $x\"))`. The other `submit` implementations use `Left` for errors that should be caught by `submitMustFail` but the `Left` parameter is restricted to `StatusRuntimeException` which doesn't really work in this case.\r\n\r\nAn alternative might be to use a more general or a trait associated type instead of `StatusRuntimeException` and then use `Success(Left(_))` in `IdeClient.submit` for errors that `submitMustFail` should catch.",
        "createdAt" : "2020-08-11T15:44:28Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "db4e2829-0897-44fa-a9b1-5bb188590799",
        "parentId" : "c75b2b6c-31aa-405b-8ad2-0def701cfac2",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Side note: SResultScenarioCommit was a bug, fixed in https://github.com/digital-asset/daml/pull/7089. Doesn’t change anything here.\r\n\r\nThere are a few cases to consider here:\r\n1. The future completes successfully. In that case, we want to turn it into a failure.\r\n2. The future fails with `SError`. This includes calls to `error` as well as `ScenarioErrorCommitError` which we will get back from a failed commit for things like authorization errors.\r\n3. Other stuff, e.g., the wildcard match at the end which we hope not to hit.\r\n\r\nMy idea would be to call `submit` and then handle the three cases.\r\n1. This is an actual failure. We expected things to fail and they didn’t.\r\n2. This is the successful case. We expected a failure during submission and we got one.\r\n3. This is a crash, something went wrong.",
        "createdAt" : "2020-08-11T16:12:55Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a670e466-1529-4f30-9f19-d50b053f8bda",
        "parentId" : "c75b2b6c-31aa-405b-8ad2-0def701cfac2",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Ah, I see. That seems to be possible. I've pushed a commit implementing this.",
        "createdAt" : "2020-08-11T16:39:12Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b4069aeb0cabd660fe58e5ec6b9b3c3164957f2",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +477,481 @@  }\n\n  override def submitMustFail(party: SParty, commands: List[ScriptLedgerClient.Command])(\n      implicit ec: ExecutionContext,\n      mat: Materializer): Future[Either[Unit, Unit]] = {"
  },
  {
    "id" : "43e3274e-7ef9-4427-bf62-131d2d0955b9",
    "prId" : 7076,
    "comments" : [
      {
        "id" : "404fe9c6-ef28-4dc7-9ee9-0349718967db",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We expect to never hit this right? Because in the script service you will always run against the current script library. If so, it might be useful to add a comment.",
        "createdAt" : "2020-08-11T16:47:29Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c456204b-f36b-4eca-a70a-5b4e2351bb42",
        "parentId" : "404fe9c6-ef28-4dc7-9ee9-0349718967db",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, it's only listed for completeness. I've added a comment.",
        "createdAt" : "2020-08-12T08:10:25Z",
        "updatedAt" : "2020-08-12T08:10:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b4069aeb0cabd660fe58e5ec6b9b3c3164957f2",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +484,488 @@        case Right(_) => Left(())\n        // We don't expect to hit this case but list it for completeness.\n        case Left(_) => Right(())\n      })\n      .recoverWith({"
  },
  {
    "id" : "64368222-21f8-47dc-97d7-45c23716fe39",
    "prId" : 5211,
    "comments" : [
      {
        "id" : "6a60cac3-c5b9-407c-b0e6-17dabd7d22e4",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Agreed, validation is probably the best answer for now.",
        "createdAt" : "2020-03-27T09:27:42Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +235,239 @@//    with a production ledger, this is probably not super important since you usually act as\n//    only one party there. So at least initially, we’re probably best off by just adding validation\n//    that ensures that the party you pass to `submit` and `query` matches.\n// 4. `submitMustFail` is not yet supported. No fundamental reason for this but it’s also not\n//    very useful in a production ledger. Currently, we just fail during unmarshalling for"
  },
  {
    "id" : "21959c1f-137f-40ba-bd26-ac59bc6f1046",
    "prId" : 5211,
    "comments" : [
      {
        "id" : "d743f339-e63e-4eff-b993-f54b6612f027",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "How does this handle errors returned by the JSON API? Does akka turn this into a failing future automatically?",
        "createdAt" : "2020-03-27T09:36:26Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "24d25af4-4e0d-4970-b728-bcf0c276e8e1",
        "parentId" : "d743f339-e63e-4eff-b993-f54b6612f027",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No, it will fail during unmarshalling atm. Fixing that is part of making `submitMustFail` work. I’ve extended the comment for that.",
        "createdAt" : "2020-03-27T10:11:40Z",
        "updatedAt" : "2020-03-27T10:23:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +334,338 @@    Http()\n      .singleRequest(req)\n      .flatMap { resp =>\n        Unmarshal(resp.entity).to[JsonLedgerClient.CreateResponse]\n      }"
  }
]