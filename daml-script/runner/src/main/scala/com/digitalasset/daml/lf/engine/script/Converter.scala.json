[
  {
    "id" : "0d917fed-859c-4941-8999-ff1087333c62",
    "prId" : 7682,
    "comments" : [
      {
        "id" : "3546fe26-21b9-45c5-a76d-509917617178",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`OneAnd` is way more flexible for this kind of thing.\r\n\r\n```suggestion\r\n        OneAnd(x, xs).traverse(toParty(_)).map(oafp => /*oafp: OneAnd[FrontStack, Party]; some conversion here*/)\r\n```",
        "createdAt" : "2020-10-14T14:03:54Z",
        "updatedAt" : "2020-10-14T14:06:43Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "103f2587-8419-4ab3-adf3-22201c57645f",
        "parentId" : "3546fe26-21b9-45c5-a76d-509917617178",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "ah good point, somehow it didn’t occur to me to use `OneAnd` for something other than `Set` here.",
        "createdAt" : "2020-10-14T14:08:15Z",
        "updatedAt" : "2020-10-14T14:08:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d165b82f6311b3a5837d25035bd9c78b1f3b5e0c",
    "line" : 35,
    "diffHunk" : "@@ -370,6 +378,15 @@ object Converter {\n       case _ => Left(s\"Expected SParty but got $v\")\n     }\n \n+  def toParties(v: SValue): Either[String, OneAnd[Set, Ref.Party]] =\n+    v match {\n+      case SList(FrontStackCons(x, xs)) =>\n+        NonEmptyList(x, xs.toList: _*).traverse(toParty(_)).map(toNonEmptySet(_))"
  },
  {
    "id" : "1f37d4e5-403b-4424-86a4-1d00723e5cc2",
    "prId" : 7287,
    "comments" : [
      {
        "id" : "bd5a296b-e5cc-49b8-9360-1c2b7f66dd0b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is the idea that this is supposed to be sorted? If so, we should document this in a comment.",
        "createdAt" : "2020-09-01T08:06:32Z",
        "updatedAt" : "2020-09-01T09:15:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5a184dfd-b2c2-4ba3-8656-307bae366eeb",
        "parentId" : "bd5a296b-e5cc-49b8-9360-1c2b7f66dd0b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It is still not sorted. \r\nI just want the names and the indexes of the field factored out, so it simplify changes when I make the fields sorted. \r\nI will change the type of `SStruct#fiedls` in an upcoming PR. ",
        "createdAt" : "2020-09-01T08:22:08Z",
        "updatedAt" : "2020-09-01T09:15:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d5e9824c-b215-4e28-afbe-ff48775e9561",
        "parentId" : "bd5a296b-e5cc-49b8-9360-1c2b7f66dd0b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "But the indices will be wrong if `tupleFieldNames` is not sorted right?",
        "createdAt" : "2020-09-01T08:23:19Z",
        "updatedAt" : "2020-09-01T09:15:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "06481750-4b8f-4fff-90e3-d02e81cdd87e",
        "parentId" : "bd5a296b-e5cc-49b8-9360-1c2b7f66dd0b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Currently, the indices should be in the same order as you build the arguments of the `SBStructCon` builtin.\r\nLatter `SBStructCon` will reorder the field, only then the order will be relevant.\r\n\r\nI replace the line \r\n```\r\n private[this] val Seq(fstIdx, sndIdx) = tupleFieldNames.indices\r\n```\r\nby \r\n```\r\n  private[this] val fstIdx = 0\r\n  private[this] val sndIdx = 1\r\n``` \r\nSo now, the change really just extract some expressions as values (+ renaming `\"a\"` to `\"fst\"` and `\"b\"` to `\"second\"`)\r\n",
        "createdAt" : "2020-09-01T09:15:24Z",
        "updatedAt" : "2020-09-01T09:15:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d34e2d3a-a549-407a-b31b-cba263cfc1fb",
        "parentId" : "bd5a296b-e5cc-49b8-9360-1c2b7f66dd0b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks for the explanation!",
        "createdAt" : "2020-09-01T09:17:28Z",
        "updatedAt" : "2020-09-01T09:17:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e6415cad06ebb1042a067cefc30fe1269dcbfc5",
    "line" : 4,
    "diffHunk" : "@@ -209,29 +210,31 @@ object Converter {\n       case _ => Left(s\"Expected CreateAndExercise but got $v\")\n     }\n \n+  private[this] val tupleFieldNames ="
  },
  {
    "id" : "20c04fe5-09dc-49fc-8f78-1b47f3b44af7",
    "prId" : 7252,
    "comments" : [
      {
        "id" : "30714e11-63f4-48a5-b5b6-abca5aeadfbf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "From a quick look at how we pretty print this, it doesn’t seem to be used so while this is annoying, it isn’t a change. Is that correct? If so possibly worth pointing out in a comment.",
        "createdAt" : "2020-08-27T15:51:21Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "92a1fe37-0c21-4694-a6d0-958bfa77ec39",
        "parentId" : "30714e11-63f4-48a5-b5b6-abca5aeadfbf",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "That's correct. I've added a comment.",
        "createdAt" : "2020-08-28T10:13:25Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : null,
    "diffHunk" : "@@ -383,6 +383,58 @@ object Converter {\n       case _ => Left(s\"Expected STimestamp but got $v\")\n     }\n \n+  def toText(v: SValue): Either[String, String] = v match {\n+    case SText(s) => Right(s)\n+    case v => Left(s\"Expected SText but got $v\")\n+  }\n+\n+  def toInt(v: SValue): Either[String, Int] = v match {\n+    case SInt64(n) => Right(n.toInt)\n+    case v => Left(s\"Expected SInt64 but got $v\")\n+  }\n+\n+  def toOptionLocation(\n+      knownPackages: Map[String, PackageId],\n+      v: SValue): Either[String, Option[Location]] =\n+    v match {\n+      case SOptional(None) => Right(None)\n+      case SOptional(Some(pair)) =>\n+        pair match {\n+          case SRecord(_, _, vals) if vals.size == 2 =>\n+            for {\n+              // TODO[AH] This should be the outer definition. E.g. `main` in `main = do submit ...`."
  },
  {
    "id" : "8e2f2ad8-7c86-46b3-9e86-91d999ee890f",
    "prId" : 7252,
    "comments" : [
      {
        "id" : "16e23810-c34b-4083-a5c1-156ee01697aa",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "hm, I wonder if we should make them zero-based in our custom `SrcLoc`. Probably better to follow the LSP convention than GHC and do the conversion at the beginning.",
        "createdAt" : "2020-08-27T16:00:30Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e1459770-5356-4992-8e4b-a6c082f14984",
        "parentId" : "16e23810-c34b-4083-a5c1-156ee01697aa",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Fair enough, I've made the user facing `SrcLoc` zero based. ",
        "createdAt" : "2020-08-28T11:36:39Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : null,
    "diffHunk" : "@@ -383,6 +383,58 @@ object Converter {\n       case _ => Left(s\"Expected STimestamp but got $v\")\n     }\n \n+  def toText(v: SValue): Either[String, String] = v match {\n+    case SText(s) => Right(s)\n+    case v => Left(s\"Expected SText but got $v\")\n+  }\n+\n+  def toInt(v: SValue): Either[String, Int] = v match {\n+    case SInt64(n) => Right(n.toInt)\n+    case v => Left(s\"Expected SInt64 but got $v\")\n+  }\n+\n+  def toOptionLocation(\n+      knownPackages: Map[String, PackageId],\n+      v: SValue): Either[String, Option[Location]] =\n+    v match {\n+      case SOptional(None) => Right(None)\n+      case SOptional(Some(pair)) =>\n+        pair match {\n+          case SRecord(_, _, vals) if vals.size == 2 =>\n+            for {\n+              // TODO[AH] This should be the outer definition. E.g. `main` in `main = do submit ...`.\n+              //   However, the call-stack only gives us access to the inner definition, `submit` in this case.\n+              definition <- toText(vals.get(0))\n+              loc <- vals.get(1) match {\n+                case SRecord(_, _, vals) if vals.size == 7 =>\n+                  for {\n+                    packageId <- toText(vals.get(0)).flatMap {\n+                      // GHC uses unit-id \"main\" for the current package,\n+                      // but the scenario context expects \"-homePackageId-\".\n+                      case \"main\" => PackageId.fromString(\"-homePackageId-\")\n+                      case id => knownPackages.get(id).toRight(s\"Unknown package $id\")\n+                    }\n+                    module <- toText(vals.get(1)).flatMap(ModuleName.fromString(_))\n+                    // Lines and columns are 1-based in the call stack.\n+                    startLine <- toInt(vals.get(3))"
  },
  {
    "id" : "fc4606ab-eca2-4432-a172-8870411ab0e3",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "6297faca-d4c9-443f-902d-cd8250f526e3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why do we unconditionally run the machine now?",
        "createdAt" : "2020-05-04T07:05:42Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "47c17e9a-0e56-4a04-9bbd-c32e6887d5e7",
        "parentId" : "6297faca-d4c9-443f-902d-cd8250f526e3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I don't believe anything has changed.\r\nIt was being unconditionally run before. `step`ing until `isFinal`",
        "createdAt" : "2020-05-04T10:03:41Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "922f9070-ccf7-4daa-a8c4-2870b715015e",
        "parentId" : "6297faca-d4c9-443f-902d-cd8250f526e3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That makes sense. Thanks.",
        "createdAt" : "2020-05-04T12:40:11Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 6,
    "diffHunk" : "@@ -219,24 +219,17 @@ object Converter {\n         seeding = InitialSeeding.NoSeed,\n         Set.empty,\n       )\n-    @tailrec\n-    def iter(): Either[String, (SValue, SValue)] = {\n-      if (machine.isFinal) {"
  }
]