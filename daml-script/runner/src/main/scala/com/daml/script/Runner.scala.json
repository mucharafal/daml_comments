[
  {
    "id" : "33c547c0-2732-4184-9acd-000a189e3a04",
    "prId" : 3455,
    "comments" : [
      {
        "id" : "eb52e3b5-d5ee-4443-add1-1851c5490715",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should the exception we might throw below contain that we expected 2 fields in the record too? Same above.",
        "createdAt" : "2019-11-13T18:49:00Z",
        "updatedAt" : "2019-11-13T19:04:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2fc976db-97c3-4941-9609-3d75985a1dce",
        "parentId" : "eb52e3b5-d5ee-4443-add1-1851c5490715",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good idea, fixed.",
        "createdAt" : "2019-11-13T19:17:49Z",
        "updatedAt" : "2019-11-13T19:17:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8190a156393f3a2e2fbc3d25ea4a2cdfc7dd2ab0",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +189,193 @@            case SVariant(_, \"AllocParty\", v) => {\n              v match {\n                case SRecord(_, _, vals) if vals.size == 2 => {\n                  val displayName = vals.get(0).asInstanceOf[SText].value\n                  val continue = vals.get(1)"
  },
  {
    "id" : "2e43adcb-d3d5-46c7-bb7a-27848b3dab80",
    "prId" : 3428,
    "comments" : [
      {
        "id" : "21ff8da1-24ac-47ac-a727-c192f2f19dc6",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`DottedName.assertFromString(\"DA.Internal.LF\")` can be a constant.",
        "createdAt" : "2019-11-12T16:00:09Z",
        "updatedAt" : "2019-11-12T16:30:05Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e607d4d5daa377415ce47b2303aec1cef06e892e",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +61,65 @@      .find {\n        case (pkgId, pkg) =>\n          pkg.modules.contains(DottedName.assertFromString(\"DA.Internal.LF\"))\n      }\n      .get"
  },
  {
    "id" : "a766c121-1dc9-4e2e-aaee-2a137330b012",
    "prId" : 3428,
    "comments" : [
      {
        "id" : "6cb0bc60-5756-4a2d-b496-d3cd5eb99076",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "you should use match here, something like this:\r\n```\r\nmachine.toSValue match {\r\n  case STuple(_, (a0: SVariant) :: (a1: SVariant) :: _) => (a0, a1)\r\n  case => sys.error(\"something unexpected\")\r\n}\r\n```\r\nor  if you know that it is a tuple 2\r\n```\r\nmachine.toSValue match {\r\n  case STuple(_, (a0: SVariant) :: (a1: SVariant) :: Nil) => (a0, a1)\r\n  case => sys.error(\"something unexpected\")\r\n}\r\n```\r\nin any case using `match` is more idiomatic Scala, you should never use `asInstanceOf`.\r\n",
        "createdAt" : "2019-11-12T16:29:40Z",
        "updatedAt" : "2019-11-12T16:33:50Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9f864b80-c435-451f-b28e-967b9484aff3",
        "parentId" : "6cb0bc60-5756-4a2d-b496-d3cd5eb99076",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "oops it is `java.util.ArrayList` you cannot match it like this, so you might want to convert it to Scala first. But in any case using `asInstanceOf` is discouraged unless you are hardcore Java programmer :)",
        "createdAt" : "2019-11-12T16:32:47Z",
        "updatedAt" : "2019-11-12T16:32:48Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e0a9a0d6-5a38-4222-944f-2f54c8457476",
        "parentId" : "6cb0bc60-5756-4a2d-b496-d3cd5eb99076",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yeah I’ll kill all the `asInstanceOf` stuff in a follow-up PR. That was just for prototyping.",
        "createdAt" : "2019-11-12T16:48:52Z",
        "updatedAt" : "2019-11-12T16:48:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e607d4d5daa377415ce47b2303aec1cef06e892e",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +117,121 @@      }\n    }\n    val tuple = machine.toSValue.asInstanceOf[STuple]\n    (tuple.values.get(0).asInstanceOf[SVariant], tuple.values.get(1).asInstanceOf[SVariant])\n  }"
  },
  {
    "id" : "b6b776b4-406d-4bd4-8bfa-8f75abca89ce",
    "prId" : 3428,
    "comments" : [
      {
        "id" : "3c2fe7ab-c5aa-46e3-9da2-7b804210f0db",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Could some of this be shared between triggers and daml-script?",
        "createdAt" : "2019-11-13T08:26:06Z",
        "updatedAt" : "2019-11-13T08:28:28Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e3ffa00e-cbde-4128-a2db-0cd9af382da0",
        "parentId" : "3c2fe7ab-c5aa-46e3-9da2-7b804210f0db",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We could probably share a bit, e.g., the logic for converting `AnyTemplate` but most of the conversion are specific to the types used in the trigger/script library so the shared code isn’t as large as one might hope. I’ll first cleanup the conversion logic here and then see what we can factor out.",
        "createdAt" : "2019-11-13T08:31:11Z",
        "updatedAt" : "2019-11-13T08:31:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e607d4d5daa377415ce47b2303aec1cef06e892e",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@  val compiledPackages = PureCompiledPackages(darMap, definitionMap).right.get\n\n  def toLedgerRecord(v: SValue) = {\n    lfValueToApiRecord(\n      true,"
  }
]