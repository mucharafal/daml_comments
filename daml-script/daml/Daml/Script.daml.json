[
  {
    "id" : "4ad9690a-33cc-40cc-9fd8-66c7a2fb1eb9",
    "prId" : 7367,
    "comments" : [
      {
        "id" : "b90ba0ca-3920-4191-a872-ee0c879b7161",
        "parentId" : null,
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "```suggestion\r\nqueryFilter : Template c => Party -> (c -> Bool) -> Script [(ContractId c, c)]\r\nqueryFilter p f = filter (\\(_, c) -> f c) <$> query p\r\n```",
        "createdAt" : "2020-09-15T09:10:43Z",
        "updatedAt" : "2020-09-15T09:11:07Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8016f0d0efd0a65748f98d50666a911e1feb195d",
    "line" : null,
    "diffHunk" : "@@ -108,6 +108,11 @@ data QueryACS a = QueryACS\n query : forall t. Template t => Party -> Script [(ContractId t, t)]\n query p = lift $ Free $ Query (QueryACS p (templateTypeRep @t) (pure . map (\\(cid, tpl) -> (coerceContractId cid, fromSome $ fromAnyTemplate tpl))))\n \n+-- | Query the set of active contracts of the template\n+-- that are visible to the given party and match the given predicate.\n+queryFor : Template c => Party -> (c -> Bool) -> Script [(ContractId c, c)]\n+queryFor p f = filter (\\(_, c) -> f c) <$> query p"
  },
  {
    "id" : "40be6b4c-73f4-4ecb-a268-391a91a78d00",
    "prId" : 7252,
    "comments" : [
      {
        "id" : "ed4a5383-e14d-43a7-89e6-b193e9d100fc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Would it be better to store the call stack here to make it forwards compatible if we do want to use it at some point (e.g. for error reporting?",
        "createdAt" : "2020-08-27T15:48:04Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a05e4ba1-06ac-4977-9388-0848ce030f06",
        "parentId" : "ed4a5383-e14d-43a7-89e6-b193e9d100fc",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Good idea, done.",
        "createdAt" : "2020-08-28T10:07:48Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : null,
    "diffHunk" : "@@ -234,22 +236,22 @@ data SubmitFailure = SubmitFailure\n -- The @handleFailure@ field is kept on @submit@ for backwards compatibility.\n -- Older versions of the DAML SDK didn't distinguish @Submit@ and\n -- @SubmitMustFail@ in the script runner.\n-data SubmitCmd a = SubmitCmd { party : Party, commands : Commands a, handleFailure : SubmitFailure -> a }\n+data SubmitCmd a = SubmitCmd { party : Party, commands : Commands a, handleFailure : SubmitFailure -> a, optLocation : Optional (Text, SrcLoc) }"
  },
  {
    "id" : "04c1fd94-7b1f-44eb-b1f1-97eb68787f1e",
    "prId" : 7252,
    "comments" : [
      {
        "id" : "998fa213-e386-4ac5-978c-477a9c7de632",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth using a qualified import for `head`. I got very confused why this typechecks for a minute :)",
        "createdAt" : "2020-08-27T15:48:55Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "971b7619-05ff-4dcd-a6f8-5367404799ec",
        "parentId" : "998fa213-e386-4ac5-978c-477a9c7de632",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "`head` is gone since we're storing the full call stack now.",
        "createdAt" : "2020-08-28T10:08:16Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : null,
    "diffHunk" : "@@ -234,22 +236,22 @@ data SubmitFailure = SubmitFailure\n -- The @handleFailure@ field is kept on @submit@ for backwards compatibility.\n -- Older versions of the DAML SDK didn't distinguish @Submit@ and\n -- @SubmitMustFail@ in the script runner.\n-data SubmitCmd a = SubmitCmd { party : Party, commands : Commands a, handleFailure : SubmitFailure -> a }\n+data SubmitCmd a = SubmitCmd { party : Party, commands : Commands a, handleFailure : SubmitFailure -> a, optLocation : Optional (Text, SrcLoc) }\n   deriving Functor\n \n -- | Details of the @submitMustFail@ command.\n-data SubmitMustFailCmd a = SubmitMustFailCmd { party : Party, commands : Commands a, continue : () -> a }\n+data SubmitMustFailCmd a = SubmitMustFailCmd { party : Party, commands : Commands a, continue : () -> a, optLocation : Optional (Text, SrcLoc) }\n   deriving Functor\n \n -- | Submit the commands as a single transaction.\n \n -- This will error if the submission fails.\n \n instance HasSubmit Script Commands where\n-  submit p cmds = lift $ Free (fmap pure $ Submit $ SubmitCmd p cmds fail)\n+  submit p cmds = lift $ Free (fmap pure $ Submit $ SubmitCmd p cmds fail (head $ getCallStack callStack))"
  },
  {
    "id" : "fba0e70f-9e02-4b6e-9fc9-de2908c4965d",
    "prId" : 6417,
    "comments" : [
      {
        "id" : "d65cd127-c437-450e-a249-3f421cf86384",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "When running in wallclock mode over the JSON API, do you get UTC time or Unix epoch? To me, that's not really clear from the comment.",
        "createdAt" : "2020-06-18T20:15:59Z",
        "updatedAt" : "2020-06-18T20:18:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f69f115-50d1-4dbf-83f0-39a405fdde00",
        "parentId" : "d65cd127-c437-450e-a249-3f421cf86384",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "#6425 ",
        "createdAt" : "2020-06-19T06:53:42Z",
        "updatedAt" : "2020-06-19T06:53:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e88d3d4fc2a2a6981f2976b76d4de5752bae8b1b",
    "line" : 47,
    "diffHunk" : "@@ -184,7 +202,10 @@ data PartyDetails = PartyDetails\n     isLocal : Bool -- ^ True if party is hosted by the backing participant.\n   deriving (Eq, Ord, Show)\n \n--- | In wallclock mode, this is UTC time. In static time mode, this is the UNIX epoch.\n+-- | In wallclock mode, this is UTC time. In static time mode, this will\n+-- query the ledger time service for the current time when running over\n+-- gRPC. When running over the JSON API, it will always\n+-- return the Unix epoch."
  },
  {
    "id" : "87e7e599-5c0a-4b8e-971e-5783f2adc960",
    "prId" : 4489,
    "comments" : [
      {
        "id" : "37678cc7-3639-4336-a221-3aafd31bc09e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Protobuf and therefore the ledger API doesnâ€™t differentiate between an empty string and a string not being present. You can therefore just remove the `Optional` here.",
        "createdAt" : "2020-02-12T13:23:12Z",
        "updatedAt" : "2020-02-12T13:52:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9917a0fd-4ed8-4675-8f80-19da7f4ffa6e",
        "parentId" : "37678cc7-3639-4336-a221-3aafd31bc09e",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Indeed, done.",
        "createdAt" : "2020-02-12T13:52:28Z",
        "updatedAt" : "2020-02-12T13:52:28Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5df5e845fa6b127a41c0c84f370a99f9a46d634e",
    "line" : null,
    "diffHunk" : "@@ -92,6 +96,7 @@ query p = Script $ Free $ Query (QueryACS p (templateTypeRep @t) (pure . map (\\(\n \n data AllocateParty a = AllocateParty\n   { displayName : Text\n+  , idHint : Optional Text"
  },
  {
    "id" : "95b13e38-ab03-48e9-9d14-32a209b02784",
    "prId" : 4489,
    "comments" : [
      {
        "id" : "dbdbddde-4cbe-4370-91b6-c3ad1c3e3aec",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nallocateParty displayName = Script $ Free $ AllocParty AllocateParty\r\n```",
        "createdAt" : "2020-02-12T13:23:56Z",
        "updatedAt" : "2020-02-12T13:52:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1dc4f2bb-7899-4b86-a889-786001b8f009",
        "parentId" : "dbdbddde-4cbe-4370-91b6-c3ad1c3e3aec",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-02-12T13:52:48Z",
        "updatedAt" : "2020-02-12T13:52:48Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5df5e845fa6b127a41c0c84f370a99f9a46d634e",
    "line" : null,
    "diffHunk" : "@@ -101,15 +106,51 @@ data SleepRec a = SleepRec\n   , continue : () -> a\n   } deriving Functor\n \n+-- | A hint to the backing participant what party id to allocate.\n+-- Must be a valid PartyIdString (as described in @value.proto@).\n+newtype PartyIdHint = PartyIdHint { partyIdHint : Text }\n+\n+newtype ParticipantName = ParticipantName { participantName : Text }\n+\n -- | Allocate a party with the given display name\n -- using the party management service.\n allocateParty : Text -> Script Party\n-allocateParty displayName = Script $ Free (AllocParty $ AllocateParty displayName None pure)\n+allocateParty displayName = Script $ Free (AllocParty $ AllocateParty"
  },
  {
    "id" : "84cc188f-0008-4a32-bae9-ad473d0e99b4",
    "prId" : 4489,
    "comments" : [
      {
        "id" : "d583d07c-d25b-471f-872a-0d2ab254e335",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  }\r\n```",
        "createdAt" : "2020-02-12T13:24:05Z",
        "updatedAt" : "2020-02-12T13:52:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4051a785-1670-410d-8131-ccad4a7ba161",
        "parentId" : "d583d07c-d25b-471f-872a-0d2ab254e335",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-02-12T13:52:55Z",
        "updatedAt" : "2020-02-12T13:52:55Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5df5e845fa6b127a41c0c84f370a99f9a46d634e",
    "line" : null,
    "diffHunk" : "@@ -101,15 +106,51 @@ data SleepRec a = SleepRec\n   , continue : () -> a\n   } deriving Functor\n \n+-- | A hint to the backing participant what party id to allocate.\n+-- Must be a valid PartyIdString (as described in @value.proto@).\n+newtype PartyIdHint = PartyIdHint { partyIdHint : Text }\n+\n+newtype ParticipantName = ParticipantName { participantName : Text }\n+\n -- | Allocate a party with the given display name\n -- using the party management service.\n allocateParty : Text -> Script Party\n-allocateParty displayName = Script $ Free (AllocParty $ AllocateParty displayName None pure)\n+allocateParty displayName = Script $ Free (AllocParty $ AllocateParty\n+  { displayName\n+  , idHint = None\n+  , participant = None\n+  , continue = pure\n+  })"
  },
  {
    "id" : "317d2bf3-9ccb-41ba-8b61-62c536b3cf92",
    "prId" : 3568,
    "comments" : [
      {
        "id" : "a54f711b-e32a-4bf0-ac10-f32bd0ac0d1e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- useful for testing.\r\n```",
        "createdAt" : "2019-11-21T10:40:27Z",
        "updatedAt" : "2019-11-21T10:42:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1cd7a877709125f1023ac08345f38b765894edd4",
    "line" : null,
    "diffHunk" : "@@ -79,14 +98,22 @@ data SubmitFailure = SubmitFailure\n data SubmitCmd a = SubmitCmd { party : Party, commands : Commands a, handleFailure : SubmitFailure -> a }\n   deriving Functor\n \n+-- | Submit the commands as a single transaction.\n+\n+-- This will error if the submission fails.\n submit : Party -> Commands a -> Script a\n submit p cmds = Script $ Free (fmap pure $ Submit $ SubmitCmd p cmds fail)\n   where fail (SubmitFailure status msg) = error $ \"Submit failed with code \" <> show status <> \": \" <> msg\n \n+-- | Submit the commands as a single transaction\n+-- but error if it succeeds. This is only\n+-- useful for testing"
  },
  {
    "id" : "cd0cd0a7-0498-4eb5-8ca3-a67c2c67c127",
    "prId" : 3428,
    "comments" : [
      {
        "id" : "1cf859e6-10e6-4703-8911-83584a9c80f1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- forall b. Ap (f b) (Ap f (b -> a))\r\n```",
        "createdAt" : "2019-11-12T17:46:12Z",
        "updatedAt" : "2019-11-12T17:56:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "73dad332-3162-4f9e-90a7-b3077e86f443",
        "parentId" : "1cf859e6-10e6-4703-8911-83584a9c80f1",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, thanks! fixed in https://github.com/digital-asset/daml/pull/3438",
        "createdAt" : "2019-11-12T17:59:02Z",
        "updatedAt" : "2019-11-12T17:59:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e607d4d5daa377415ce47b2303aec1cef06e892e",
    "line" : 29,
    "diffHunk" : "@@ -0,0 +1,91 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+daml 1.2\n+module Daml.Script where\n+\n+import DA.Optional\n+\n+-- | A free monad\n+data Free f a\n+  = Pure a\n+  | Free (f (Free f a))\n+\n+instance Functor f => Functor (Free f) where\n+  fmap f (Pure a) = Pure (f a)\n+  fmap f (Free x) = Free (fmap f <$> x)\n+\n+instance Functor f => Applicative (Free f) where\n+  pure = Pure\n+  Pure f <*> Pure a = Pure (f a)\n+  Pure f <*> Free x = Free (fmap f <$> x)\n+  Free x <*> my     = Free ((<*> my) <$> x)\n+\n+instance Functor f => Action (Free f) where\n+  Pure a >>= f = f a\n+  Free x >>= f = Free ((>>= f) <$> x)\n+\n+-- | A free applicative, since we donâ€™t have existentials we have to use the weird RankNTypes encoding, this is isomorphic to\n+-- forall b. Ap f b (Ap f (b -> a))"
  }
]