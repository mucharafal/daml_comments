[
  {
    "id" : "13e7bbae-e960-43a0-99a5-ca16d50ad12e",
    "prId" : 5211,
    "comments" : [
      {
        "id" : "6e58fd26-181b-43be-9e30-6e87cdde2e69",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Please rebase for the COPY change (and you'll need to update this).",
        "createdAt" : "2020-03-27T00:30:09Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7c2d12b9-f800-4bb7-adba-194417ffa757",
        "parentId" : "6e58fd26-181b-43be-9e30-6e87cdde2e69",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks! Rebased and updated.",
        "createdAt" : "2020-03-27T06:54:29Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved."
  },
  {
    "id" : "eefec36e-5478-4352-a969-14281347b904",
    "prId" : 5211,
    "comments" : [
      {
        "id" : "33d50021-e57a-42e8-9d8a-b359300b746c",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Nit: Indentation is a bit off.",
        "createdAt" : "2020-03-27T09:59:07Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4260e73-4e46-4a18-8fe3-7f81453b8e50",
        "parentId" : "33d50021-e57a-42e8-9d8a-b359300b746c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "A side effect of the `withCreateProcess` line being way too long, I’ve split it up into multiple lines and fixed the indendation :slightly_smiling_face: ",
        "createdAt" : "2020-03-27T10:22:19Z",
        "updatedAt" : "2020-03-27T10:23:37Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module JsonTestRunner (main) where\n+\n+import Control.Concurrent\n+import DA.Bazel.Runfiles\n+import DA.Daml.Helper.Run\n+import DA.PortFile\n+import Data.Aeson\n+import qualified Data.HashMap.Strict as HashMap\n+import qualified Data.Map.Strict as Map\n+import qualified Data.Text as T\n+import qualified Data.Text.Extended as T\n+import System.FilePath\n+import System.IO.Extra\n+import System.Process\n+import qualified Web.JWT as JWT\n+\n+main :: IO ()\n+main = do\n+    sandbox <- locateRunfiles (mainWorkspace </> \"ledger\" </> \"sandbox\" </> exe \"sandbox-binary\")\n+    jsonApi <- locateRunfiles (mainWorkspace </> \"ledger-service\" </> \"http-json\" </> exe \"http-json-binary\")\n+    logback <- locateRunfiles (mainWorkspace </> \"ledger-service\" </> \"http-json\" </> \"release\" </> \"json-api-logback.xml\")\n+    testClient <- locateRunfiles (mainWorkspace </> \"daml-script\" </> \"test\" </> exe \"test_client_json\")\n+    dar <- locateRunfiles (mainWorkspace </> \"daml-script\" </> \"test\" </> \"script-test.dar\")\n+    withTempFile $ \\tempFile -> do\n+        withCreateProcess (proc sandbox [dar, \"--port-file\", tempFile, \"--wall-clock-time\", \"--ledgerid=myledger\"]) $ \\_ _ _ _ -> do\n+        _ <- readPortFile maxRetries tempFile\n+        withCreateProcess (proc jsonApi [\"--ledger-host=localhost\", \"--ledger-port=6865\", \"--http-port=7500\", \"--wrapper_script_flag=--jvm_flag=-Dlogback.configurationFile=\" <> logback]) $ \\_ _ _ _ -> do\n+              waitForConnectionOnPort (threadDelay 500000) 7500\n+              withTempFile $ \\tokenFile -> do\n+                  T.writeFileUtf8 tokenFile token\n+                  callProcess testClient [dar, \"--access-token-file=\" <> tokenFile]"
  },
  {
    "id" : "4b6cda84-2ccb-47da-b369-fe4948b29fca",
    "prId" : 5211,
    "comments" : [
      {
        "id" : "c449a677-729d-497f-be18-6a2c2f6011bb",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Shouldn't this read the port from the port file?",
        "createdAt" : "2020-03-27T10:00:08Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c8d8b4e8-cc02-40a8-8a3f-276943ef7ac6",
        "parentId" : "c449a677-729d-497f-be18-6a2c2f6011bb",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ve changed it to use a random port for sandbox for now and use the one from the port file.",
        "createdAt" : "2020-03-27T10:16:56Z",
        "updatedAt" : "2020-03-27T10:23:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module JsonTestRunner (main) where\n+\n+import Control.Concurrent\n+import DA.Bazel.Runfiles\n+import DA.Daml.Helper.Run\n+import DA.PortFile\n+import Data.Aeson\n+import qualified Data.HashMap.Strict as HashMap\n+import qualified Data.Map.Strict as Map\n+import qualified Data.Text as T\n+import qualified Data.Text.Extended as T\n+import System.FilePath\n+import System.IO.Extra\n+import System.Process\n+import qualified Web.JWT as JWT\n+\n+main :: IO ()\n+main = do\n+    sandbox <- locateRunfiles (mainWorkspace </> \"ledger\" </> \"sandbox\" </> exe \"sandbox-binary\")\n+    jsonApi <- locateRunfiles (mainWorkspace </> \"ledger-service\" </> \"http-json\" </> exe \"http-json-binary\")\n+    logback <- locateRunfiles (mainWorkspace </> \"ledger-service\" </> \"http-json\" </> \"release\" </> \"json-api-logback.xml\")\n+    testClient <- locateRunfiles (mainWorkspace </> \"daml-script\" </> \"test\" </> exe \"test_client_json\")\n+    dar <- locateRunfiles (mainWorkspace </> \"daml-script\" </> \"test\" </> \"script-test.dar\")\n+    withTempFile $ \\tempFile -> do\n+        withCreateProcess (proc sandbox [dar, \"--port-file\", tempFile, \"--wall-clock-time\", \"--ledgerid=myledger\"]) $ \\_ _ _ _ -> do\n+        _ <- readPortFile maxRetries tempFile\n+        withCreateProcess (proc jsonApi [\"--ledger-host=localhost\", \"--ledger-port=6865\", \"--http-port=7500\", \"--wrapper_script_flag=--jvm_flag=-Dlogback.configurationFile=\" <> logback]) $ \\_ _ _ _ -> do"
  },
  {
    "id" : "902e11e6-5d54-465c-80c6-888772ec446d",
    "prId" : 5211,
    "comments" : [
      {
        "id" : "8eb51d36-b71e-4db2-8b60-9b13d26c9314",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Also, is there a way to use a port file for the `--http-port` to avoid issues with other tests running in parallel.",
        "createdAt" : "2020-03-27T10:00:44Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "29ddb6bf-d907-4841-9dd4-efabbf8df9f5",
        "parentId" : "8eb51d36-b71e-4db2-8b60-9b13d26c9314",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The tests are marked exclusive for that reason. The json API does not have a port file option and even if it does have one, we start 4 processes, 3 of which are JVM processes so this is fairly resource intensive and I’m not sure we really want to run this in parallel. I added a comment on the `exclusive` tag (had one at some point but it got lost somewhere along the way).\r\n\r\nAs a side note, I think we should just kill all that client server stuff and try to use scala test similarly for how we do it for the trigger service tests. It seems compelling to factor out starting the processes but in practice it only seems to turn into a mess.",
        "createdAt" : "2020-03-27T10:17:57Z",
        "updatedAt" : "2020-03-27T10:23:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module JsonTestRunner (main) where\n+\n+import Control.Concurrent\n+import DA.Bazel.Runfiles\n+import DA.Daml.Helper.Run\n+import DA.PortFile\n+import Data.Aeson\n+import qualified Data.HashMap.Strict as HashMap\n+import qualified Data.Map.Strict as Map\n+import qualified Data.Text as T\n+import qualified Data.Text.Extended as T\n+import System.FilePath\n+import System.IO.Extra\n+import System.Process\n+import qualified Web.JWT as JWT\n+\n+main :: IO ()\n+main = do\n+    sandbox <- locateRunfiles (mainWorkspace </> \"ledger\" </> \"sandbox\" </> exe \"sandbox-binary\")\n+    jsonApi <- locateRunfiles (mainWorkspace </> \"ledger-service\" </> \"http-json\" </> exe \"http-json-binary\")\n+    logback <- locateRunfiles (mainWorkspace </> \"ledger-service\" </> \"http-json\" </> \"release\" </> \"json-api-logback.xml\")\n+    testClient <- locateRunfiles (mainWorkspace </> \"daml-script\" </> \"test\" </> exe \"test_client_json\")\n+    dar <- locateRunfiles (mainWorkspace </> \"daml-script\" </> \"test\" </> \"script-test.dar\")\n+    withTempFile $ \\tempFile -> do\n+        withCreateProcess (proc sandbox [dar, \"--port-file\", tempFile, \"--wall-clock-time\", \"--ledgerid=myledger\"]) $ \\_ _ _ _ -> do\n+        _ <- readPortFile maxRetries tempFile\n+        withCreateProcess (proc jsonApi [\"--ledger-host=localhost\", \"--ledger-port=6865\", \"--http-port=7500\", \"--wrapper_script_flag=--jvm_flag=-Dlogback.configurationFile=\" <> logback]) $ \\_ _ _ _ -> do"
  }
]