[
  {
    "id" : "56772be7-e0f7-4d94-97c3-d147f874c37a",
    "prId" : 3882,
    "comments" : [
      {
        "id" : "cf485b71-d845-4907-8c24-30eed4eb06f8",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n        case JsonVariant(tag, nestedValue) =>\r\n          // remaining stuff\r\n          \r\n        // elsewhere\r\n        private[this] object JsonVariant {\r\n          def unapply(o: JsObject): Option[(String, JsValue)] =\r\n            (o.fields.size, o.fields get \"tag\", o.fields get \"value\") match {\r\n              case (2, Some(JsString(tag)), Some(nv)) => Some((tag, nv))\r\n              case _ => None\r\n            }\r\n            // maybe a matching apply method\r\n        }\r\n```",
        "createdAt" : "2019-12-19T22:59:12Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "41030735c34f5ee15171e782aa55742d40e5f99b",
    "line" : null,
    "diffHunk" : "@@ -221,21 +222,24 @@ abstract class ApiCodecCompressed[Cid](\n       }\n       case Model.DamlLfVariant(cons) => {\n         case JsObject(v) =>"
  },
  {
    "id" : "dafd2a96-cc20-4cde-be18-2623b76be651",
    "prId" : 3882,
    "comments" : [
      {
        "id" : "6e47fa5b-bd07-473a-8d08-a90ba7c97a51",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    JsonVariant(value.variant, apiValueToJsValue(value.value))\r\n```",
        "createdAt" : "2019-12-24T18:31:44Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "41030735c34f5ee15171e782aa55742d40e5f99b",
    "line" : null,
    "diffHunk" : "@@ -77,7 +77,8 @@ abstract class ApiCodecCompressed[Cid](\n     JsArray(value.values.map(apiValueToJsValue(_)).toImmArray.toSeq: _*)\n \n   private[this] def apiVariantToJsValue(value: V.ValueVariant[Cid]): JsValue =\n-    JsObject(Map((value.variant: String) -> apiValueToJsValue(value.value)))\n+    JsObject("
  },
  {
    "id" : "5bd7e157-f959-467e-a289-8af5b3b9c000",
    "prId" : 2666,
    "comments" : [
      {
        "id" : "5808ed2b-77b9-4f73-80c4-f20baf9fdd7e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n        V.ValueNumeric(assertDE(LfNumeric.checkWithinBoundsAndRound(scale, value match {\r\n```",
        "createdAt" : "2019-08-27T19:51:55Z",
        "updatedAt" : "2019-09-02T07:14:23Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d62b26852e6615fe747f0ba481e7618f14b9eb5",
    "line" : null,
    "diffHunk" : "@@ -275,7 +241,16 @@ abstract class ApiCodecCompressed[Cid](\n           typeCon,\n           defs(id).getOrElse(deserializationError(s\"Type $id not found\")))\n         jsValueToApiDataType(value, id, dt, defs)\n-      case v: Model.DamlLfTypeVar =>\n+      case Model.DamlLfTypeNumeric(scale) =>\n+        value match {"
  },
  {
    "id" : "ddb9526c-bddf-48dc-9dfb-105f6b8bfa7f",
    "prId" : 2463,
    "comments" : [
      {
        "id" : "acd089a9-e24a-4336-b37f-ecffbfc305a8",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Using `match2` is to preserve exhaustiveness checking? Or is there any other advantage?",
        "createdAt" : "2019-08-13T10:02:01Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "476fb07f-b405-4007-a6c7-5f1a77093d14",
        "parentId" : "acd089a9-e24a-4336-b37f-ecffbfc305a8",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Yes; additionally, we might decide to resolve the first match layer in advance of having the `value` in the future, notwithstanding DAML recursive cases.",
        "createdAt" : "2019-08-13T14:32:48Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3e2803854a2ac76e3e34383a7bd0a16219dfc",
    "line" : 89,
    "diffHunk" : "@@ -97,96 +108,130 @@ abstract class ApiCodecCompressed[Cid](\n       value: JsValue,\n       prim: Model.DamlLfTypePrim,\n       defs: Model.DamlLfTypeLookup): V[Cid] = {\n-    (value, prim.typ) match {\n-      case (JsString(v), Model.DamlLfPrimType.Decimal) =>\n-        V.ValueDecimal(assertDE(LfDecimal fromString v))\n-      case (JsString(v), Model.DamlLfPrimType.Int64) => V.ValueInt64(v.toLong)\n-      case (JsString(v), Model.DamlLfPrimType.Text) => V.ValueText(v)\n-      case (JsString(v), Model.DamlLfPrimType.Party) =>\n-        V.ValueParty(assertDE(Ref.Party fromString v))\n-      case (v, Model.DamlLfPrimType.ContractId) => V.ValueContractId(jsValueToApiContractId(v))\n-      case (JsObject(_), Model.DamlLfPrimType.Unit) => V.ValueUnit\n-      case (JsString(v), Model.DamlLfPrimType.Timestamp) => V.ValueTimestamp.fromIso8601(v)\n-      case (JsString(v), Model.DamlLfPrimType.Date) => V.ValueDate.fromIso8601(v)\n-      case (JsBoolean(v), Model.DamlLfPrimType.Bool) => V.ValueBool(v)\n-      case (JsArray(v), Model.DamlLfPrimType.List) =>\n-        V.ValueList(v.map(e => jsValueToApiValue(e, prim.typArgs.head, defs)).to[FrontStack])\n-      case (JsObject(f), Model.DamlLfPrimType.Optional) =>\n-        f.headOption match {\n-          case Some((`fieldNone`, _)) => V.ValueOptional(None)\n-          case Some((`fieldSome`, v)) =>\n-            V.ValueOptional(Some(jsValueToApiValue(v, prim.typArgs.head, defs)))\n-          case Some(_) => deserializationError(s\"Can't read ${value.prettyPrint} as Optional\")\n-          case None => deserializationError(s\"Can't read ${value.prettyPrint} as Optional\")\n+    (prim.typ, value).match2 {"
  },
  {
    "id" : "a9edbdc3-1efa-4601-9358-4c9f822a511b",
    "prId" : 2463,
    "comments" : [
      {
        "id" : "7a676bba-4cd6-48da-8b3c-8a790f361ad8",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Unrelated to this commit: AFAIR `Model.damlLfInstantiate` is a copy of `typeCon.instantiate`, introduced when the daml.lf version had bug and Navigator could not upgrade to the latest daml.lf library version.\r\n\r\nNew issue for fixing this: https://github.com/digital-asset/daml/issues/2506",
        "createdAt" : "2019-08-13T10:19:45Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3e2803854a2ac76e3e34383a7bd0a16219dfc",
    "line" : 284,
    "diffHunk" : "@@ -198,9 +243,7 @@ abstract class ApiCodecCompressed[Cid](\n       case prim: Model.DamlLfTypePrim =>\n         jsValueToApiPrimitive(value, prim, defs)\n       case typeCon: Model.DamlLfTypeCon =>\n-        val id = Model.DamlLfIdentifier(\n-          typeCon.name.identifier.packageId,\n-          typeCon.name.identifier.qualifiedName)\n+        val id = typeCon.name.identifier\n         // val dt = typeCon.instantiate(defs(id).getOrElse(deserializationError(s\"Type $id not found\")))\n         val dt = Model.damlLfInstantiate("
  },
  {
    "id" : "438ac456-427a-476a-b4a3-6a8ab71ea39b",
    "prId" : 2345,
    "comments" : [
      {
        "id" : "608fab28-d583-4ae5-bf6a-dd239fe96522",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I like that you got rid of the `Model.X` aliases. But I think you missed a few cases, like this one above.",
        "createdAt" : "2019-07-31T15:23:19Z",
        "updatedAt" : "2019-07-31T15:25:35Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c465bcf3-6dc9-4aac-a392-ddffbea12fef",
        "parentId" : "608fab28-d583-4ae5-bf6a-dd239fe96522",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The cases I skipped were deliberate, as replacing them requires actual thinking.",
        "createdAt" : "2019-08-01T15:27:47Z",
        "updatedAt" : "2019-08-01T15:27:47Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3faa03b03ec0c0acd3c44e1d2b59a88956ccbd77",
    "line" : 10,
    "diffHunk" : "@@ -33,21 +34,21 @@ object ApiCodecCompressed {\n   def apiValueToJsValue(value: Model.ApiValue): JsValue = value match {\n     case v: Model.ApiRecord => apiRecordToJsValue(v)"
  }
]