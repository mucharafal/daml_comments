[
  {
    "id" : "78816863-daae-405c-b033-7cb82fd29050",
    "prId" : 2463,
    "comments" : [
      {
        "id" : "8261a1a0-e7d5-4dd9-a8f0-2f4dcab3458c",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Using `match2` is to preserve exhaustiveness checking? Or is there any other advantage?",
        "createdAt" : "2019-08-13T10:02:01Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9979dc9f-8b6d-409b-a4fa-79a565994d94",
        "parentId" : "8261a1a0-e7d5-4dd9-a8f0-2f4dcab3458c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Yes; additionally, we might decide to resolve the first match layer in advance of having the `value` in the future, notwithstanding DAML recursive cases.",
        "createdAt" : "2019-08-13T14:32:48Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3e2803854a2ac76e3e34383a7bd0a16219dfc",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +109,113 @@      prim: Model.DamlLfTypePrim,\n      defs: Model.DamlLfTypeLookup): V[Cid] = {\n    (prim.typ, value).match2 {\n      case Model.DamlLfPrimType.Decimal => {\n        case JsString(v) =>"
  },
  {
    "id" : "99d5d2d2-cc91-4537-abe9-9939a0d9ba7e",
    "prId" : 2463,
    "comments" : [
      {
        "id" : "8564f61c-d676-42f1-8b27-d67005d51517",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Unrelated to this commit: AFAIR `Model.damlLfInstantiate` is a copy of `typeCon.instantiate`, introduced when the daml.lf version had bug and Navigator could not upgrade to the latest daml.lf library version.\r\n\r\nNew issue for fixing this: https://github.com/digital-asset/daml/issues/2506",
        "createdAt" : "2019-08-13T10:19:45Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3e2803854a2ac76e3e34383a7bd0a16219dfc",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +251,255 @@        val id = typeCon.name.identifier\n        // val dt = typeCon.instantiate(defs(id).getOrElse(deserializationError(s\"Type $id not found\")))\n        val dt = Model.damlLfInstantiate(\n          typeCon,\n          defs(id).getOrElse(deserializationError(s\"Type $id not found\")))"
  },
  {
    "id" : "4a022a46-2306-4ba0-9967-b2872cda5b19",
    "prId" : 2345,
    "comments" : [
      {
        "id" : "74d4c78d-b6b9-4298-bee7-5d9c9826769c",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I like that you got rid of the `Model.X` aliases. But I think you missed a few cases, like this one above.",
        "createdAt" : "2019-07-31T15:23:19Z",
        "updatedAt" : "2019-07-31T15:25:35Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aa5494a0-9d16-462a-981f-6ee77f1a0c35",
        "parentId" : "74d4c78d-b6b9-4298-bee7-5d9c9826769c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The cases I skipped were deliberate, as replacing them requires actual thinking.",
        "createdAt" : "2019-08-01T15:27:47Z",
        "updatedAt" : "2019-08-01T15:27:47Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3faa03b03ec0c0acd3c44e1d2b59a88956ccbd77",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +33,37 @@  // ------------------------------------------------------------------------------------------------------------------\n  def apiValueToJsValue(value: Model.ApiValue): JsValue = value match {\n    case v: Model.ApiRecord => apiRecordToJsValue(v)\n    case v: Model.ApiVariant => apiVariantToJsValue(v)\n    case v: V.ValueEnum => apiEnumToJsValue(v)"
  }
]