[
  {
    "id" : "62a1f768-e1f0-4855-b561-1469c521905e",
    "prId" : 5855,
    "comments" : [
      {
        "id" : "2b2bc29c-11b9-4455-ad3f-521ed6723738",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "You might consider just representing this case as `\"\"`. Whatever you think.",
        "createdAt" : "2020-05-05T21:15:26Z",
        "updatedAt" : "2020-05-05T23:18:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4fe248085f1dc8b8e4d1de526aadd59646fce074",
    "line" : null,
    "diffHunk" : "@@ -320,17 +320,19 @@ class ApiCodecCompressedSpec\n     )\n \n     val failures = Table(\n-      (\"JSON\", \"type\"),\n-      (\"42.3\", VA.int64),\n-      (\"\\\"42.3\\\"\", VA.int64),\n-      (\"9223372036854775808\", VA.int64),\n-      (\"-9223372036854775809\", VA.int64),\n-      (\"\\\"garbage\\\"\", VA.int64),\n-      (\"\\\"   42 \\\"\", VA.int64),\n-      (\"\\\"1970-01-01T00:00:00\\\"\", VA.timestamp),\n-      (\"\\\"1970-01-01T00:00:00+01:00\\\"\", VA.timestamp),\n-      (\"\\\"1970-01-01T00:00:00+01:00[Europe/Paris]\\\"\", VA.timestamp),\n-      (\"\"\"{\"a\": \"b\", \"c\": \"d\"}\"\"\", VA.genMap(VA.text, VA.text)),\n+      (\"JSON\", \"type\", \"optionalErrorSubstring\"),\n+      (\"42.3\", VA.int64, None),"
  },
  {
    "id" : "14ce6737-cce3-44d4-a3f1-ec848d0056ba",
    "prId" : 3838,
    "comments" : [
      {
        "id" : "ed58eaf4-690c-427c-ad6e-ccdee7059ea8",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What does `->>` do?",
        "createdAt" : "2019-12-17T12:47:12Z",
        "updatedAt" : "2019-12-19T14:12:52Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9f8247d3-7e85-4f8f-8435-0380497f1ca3",
        "parentId" : "ed58eaf4-690c-427c-ad6e-ccdee7059ea8",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It tags the right argument with the singleton type of the [literal] left argument; similarly to `@@` tags, its runtime value is just the right argument, though the compiler can naturally reify the tag back to a runtime value anywhere the literal is still apparent.  The `Record(k = v, ...)` is a macro doing something similar.",
        "createdAt" : "2019-12-17T17:10:27Z",
        "updatedAt" : "2019-12-19T14:12:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d7ffa1caa126d239006cae51e19d703664b9b4f8",
    "line" : 43,
    "diffHunk" : "@@ -43,6 +43,79 @@ class ApiCodecCompressedSpec\n   private def roundtrip(va: VA)(v: va.Inj[Cid]): Option[va.Inj[Cid]] =\n     va.prj(jsValueToApiValue(apiValueToJsValue(va.inj(v)), va.t, typeLookup))\n \n+  private object C /* based on navigator DamlConstants */ {\n+    import shapeless.syntax.singleton._\n+    val packageId0 = Ref.PackageId assertFromString \"hash\"\n+    val moduleName0 = Ref.ModuleName assertFromString \"Module\"\n+    def defRef(name: String) =\n+      Ref.Identifier(\n+        packageId0,\n+        Ref.QualifiedName(moduleName0, Ref.DottedName assertFromString name))\n+    val emptyRecordId = defRef(\"EmptyRecord\")\n+    val (emptyRecordDDT, emptyRecordT) = VA.record(emptyRecordId, RNil)\n+    val simpleRecordId = defRef(\"SimpleRecord\")\n+    val simpleRecordVariantSpec = 'fA ->> VA.text :: 'fB ->> VA.int64 :: RNil"
  },
  {
    "id" : "0e383c1e-2be7-4311-89b3-436353fcf922",
    "prId" : 2136,
    "comments" : [
      {
        "id" : "a84c834a-1f27-40c9-93c5-f3dd251d8b58",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Is that going to work? It is always `None`.",
        "createdAt" : "2019-07-16T19:58:29Z",
        "updatedAt" : "2019-07-16T20:05:27Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "36688b3a-c901-4ec7-a6d4-3c3a3b262efa",
        "parentId" : "a84c834a-1f27-40c9-93c5-f3dd251d8b58",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Not when we have records/variants/enums being produced by TypedValueGenerators, but for now it's fine.",
        "createdAt" : "2019-07-16T20:10:55Z",
        "updatedAt" : "2019-07-16T20:10:55Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "efb2080e2b5a2a0b5eb73e3493af263b896954ca",
    "line" : 19,
    "diffHunk" : "@@ -0,0 +1,80 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf\n+package value.json\n+\n+import value.json.{NavigatorModelAliases => model}\n+import value.TypedValueGenerators.{genTypeAndValue, genAddend}\n+\n+import org.scalatest.{Matchers, WordSpec}\n+import org.scalatest.prop.GeneratorDrivenPropertyChecks\n+import org.scalacheck.{Arbitrary, Gen}\n+\n+import scala.util.{Success, Try}\n+\n+class ApiCodecCompressedSpec extends WordSpec with Matchers with GeneratorDrivenPropertyChecks {\n+\n+  /** XXX SC replace when TypedValueGenerators supports TypeCons */\n+  private val typeLookup: NavigatorModelAliases.DamlLfTypeLookup = _ => None"
  }
]