[
  {
    "id" : "cde479aa-f9e3-49ca-9209-5213f42c64d6",
    "prId" : 3838,
    "comments" : [
      {
        "id" : "1fc12f17-349a-4be8-b516-80be0ac00ac6",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What does `->>` do?",
        "createdAt" : "2019-12-17T12:47:12Z",
        "updatedAt" : "2019-12-19T14:12:52Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5dac59d7-06cd-4c23-b087-f96a14d4a846",
        "parentId" : "1fc12f17-349a-4be8-b516-80be0ac00ac6",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It tags the right argument with the singleton type of the [literal] left argument; similarly to `@@` tags, its runtime value is just the right argument, though the compiler can naturally reify the tag back to a runtime value anywhere the literal is still apparent.  The `Record(k = v, ...)` is a macro doing something similar.",
        "createdAt" : "2019-12-17T17:10:27Z",
        "updatedAt" : "2019-12-19T14:12:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d7ffa1caa126d239006cae51e19d703664b9b4f8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +55,59 @@    val (emptyRecordDDT, emptyRecordT) = VA.record(emptyRecordId, RNil)\n    val simpleRecordId = defRef(\"SimpleRecord\")\n    val simpleRecordVariantSpec = 'fA ->> VA.text :: 'fB ->> VA.int64 :: RNil\n    val (simpleRecordDDT, simpleRecordT) =\n      VA.record(simpleRecordId, simpleRecordVariantSpec)"
  },
  {
    "id" : "b71262ec-9084-4e68-a400-83122d49c7cf",
    "prId" : 2136,
    "comments" : [
      {
        "id" : "ad5158c4-89cd-4e6d-927e-81165c4f772f",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Is that going to work? It is always `None`.",
        "createdAt" : "2019-07-16T19:58:29Z",
        "updatedAt" : "2019-07-16T20:05:27Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6120421-0046-4180-80ca-ac3ad90e6829",
        "parentId" : "ad5158c4-89cd-4e6d-927e-81165c4f772f",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Not when we have records/variants/enums being produced by TypedValueGenerators, but for now it's fine.",
        "createdAt" : "2019-07-16T20:10:55Z",
        "updatedAt" : "2019-07-16T20:10:55Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "efb2080e2b5a2a0b5eb73e3493af263b896954ca",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@\n  /** XXX SC replace when TypedValueGenerators supports TypeCons */\n  private val typeLookup: NavigatorModelAliases.DamlLfTypeLookup = _ => None\n\n  /** Serializes the API value to JSON, then parses it back to an API value */"
  }
]