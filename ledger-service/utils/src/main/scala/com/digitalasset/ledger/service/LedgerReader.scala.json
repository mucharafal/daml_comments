[
  {
    "id" : "dba38192-7231-447d-88f2-f4ec30d3d1c5",
    "prId" : 3090,
    "comments" : [
      {
        "id" : "c1755b13-17ba-40e9-bbf2-f47bce58189d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This looks like you are fetching all packages if the ids changed instead of only the ones that are new.",
        "createdAt" : "2019-10-03T06:58:21Z",
        "updatedAt" : "2019-10-11T20:41:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "760dc2d6-5478-4c77-a9cd-0015068db85a",
        "parentId" : "c1755b13-17ba-40e9-bbf2-f47bce58189d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good point. I think @leo-da, it is fine to assume packages are never unloaded from the ledger.",
        "createdAt" : "2019-10-03T07:12:15Z",
        "updatedAt" : "2019-10-11T20:41:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81b4f626-7bbd-4845-80c5-9483a0a0a4a1",
        "parentId" : "c1755b13-17ba-40e9-bbf2-f47bce58189d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yeah, if it never gets removed from the ledger, loading a diff should work",
        "createdAt" : "2019-10-03T12:59:29Z",
        "updatedAt" : "2019-10-11T20:41:11Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94eddd56-fe6b-46df-b0c4-ae867be2e89d",
        "parentId" : "c1755b13-17ba-40e9-bbf2-f47bce58189d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "chatted with @remyhaemmerle-da we agreed that it is fine to reload the entire thing. We currently don't have `InterfaceReader` logic that allows loading diffs.",
        "createdAt" : "2019-10-03T13:38:47Z",
        "updatedAt" : "2019-10-11T20:41:11Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ec983db2-465f-4d1d-a37a-2351b41919b9",
        "parentId" : "c1755b13-17ba-40e9-bbf2-f47bce58189d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Let’s say I have a ledger that has several 50 megabytes DARs (not unlikely given our current DAR sizes and upgrades). You definitely don’t want to fetch this every time someone uploads a new dar.",
        "createdAt" : "2019-10-03T14:47:15Z",
        "updatedAt" : "2019-10-11T20:41:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "368e17c7-83bb-4fad-9c5a-5e6f3624802f",
        "parentId" : "c1755b13-17ba-40e9-bbf2-f47bce58189d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "sure... but this can and will be done in a separate PR. More refactoring needed.",
        "createdAt" : "2019-10-03T16:45:47Z",
        "updatedAt" : "2019-10-11T20:41:11Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d856658-d208-4558-a034-4f20a0e4a359",
        "parentId" : "c1755b13-17ba-40e9-bbf2-f47bce58189d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "happened to be easier that it looked initially, so loading only new package IDs.",
        "createdAt" : "2019-10-11T20:46:02Z",
        "updatedAt" : "2019-10-11T20:46:03Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6754c9f062e1fec355a25d8e73395b8d7f153acb",
    "line" : null,
    "diffHunk" : "@@ -22,23 +22,44 @@ import Scalaz._\n \n object LedgerReader {\n \n+  // TODO(Leo): need something stronger\n+  type Error = String\n+\n+  // PackageId -> Interface\n   type PackageStore = Map[String, Interface]\n \n+  val UpToDate: Future[Error \\/ Option[PackageStore]] =\n+    Future.successful(\\/-(None))\n+\n   import scala.concurrent.ExecutionContext.Implicits.global\n \n-  def createPackageStore(packageClient: PackageClient): Future[String \\/ PackageStore] = {\n+  def createPackageStore(packageClient: PackageClient): Future[Error \\/ PackageStore] =\n+    reloadPackageStore(packageClient)(Set.empty).map(x => x.map(_.getOrElse(Map.empty)))\n+\n+  /**\n+    * @return [[UpToDate]] if packages did not change\n+    */\n+  def reloadPackageStore(client: PackageClient)(\n+      prevPackageIds: Set[String]): Future[Error \\/ Option[PackageStore]] = {\n     for {\n-      packageIds <- packageClient.listPackages().map(_.packageIds)\n-      packageResponses <- Future\n-        .sequence(packageIds.map(packageClient.getPackage))\n-        .map(_.toList)\n-    } yield {\n-      createPackageStoreFromArchives(packageResponses)\n-    }\n+      newPackageIds <- client.listPackages().map(_.packageIds.toList)\n+      result <- loadIfChanged(client)(prevPackageIds, newPackageIds)\n+    } yield result\n+  }\n+\n+  private def loadIfChanged(client: PackageClient)(\n+      prevIds: Set[String],\n+      newIds: List[String]): Future[Error \\/ Option[PackageStore]] = {\n+    if (prevIds =/= newIds.toSet)\n+      newIds\n+        .traverse(id => client.getPackage(id))"
  },
  {
    "id" : "39a4402b-c67f-4dc6-a675-b350bab371e6",
    "prId" : 3090,
    "comments" : [
      {
        "id" : "8aa0898e-a527-4beb-b32c-786976c386c4",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am not sure this is needed. Using `String` in the left side of either as error message is a general pattern in our code base. We have more than 500 `Either[String, X]` or `String \\/ X` ",
        "createdAt" : "2019-10-03T07:15:40Z",
        "updatedAt" : "2019-10-11T20:41:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6754c9f062e1fec355a25d8e73395b8d7f153acb",
    "line" : 4,
    "diffHunk" : "@@ -22,23 +22,44 @@ import Scalaz._\n \n object LedgerReader {\n \n+  // TODO(Leo): need something stronger\n+  type Error = String"
  }
]