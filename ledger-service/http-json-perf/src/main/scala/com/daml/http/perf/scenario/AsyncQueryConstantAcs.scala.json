[
  {
    "id" : "98f4bb30-0433-482f-a9b9-b566307165e1",
    "prId" : 7054,
    "comments" : [
      {
        "id" : "46f7ff65-1be7-49cb-b69e-d89f807d617f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just to make sure I’m reading this correctly: This means we’re benchmarking, establishing a connection and receiving five messages?",
        "createdAt" : "2020-08-07T12:54:32Z",
        "updatedAt" : "2020-08-07T12:56:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "358b435a-f2ce-47a9-83bf-a96e43825950",
        "parentId" : "46f7ff65-1be7-49cb-b69e-d89f807d617f",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yes",
        "createdAt" : "2020-08-07T13:02:24Z",
        "updatedAt" : "2020-08-07T13:02:25Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "559b7e09609525cc9d5d8a43637c012b3eea6ea6",
    "line" : 42,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.http.perf.scenario\n+\n+import io.gatling.core.Predef._\n+import io.gatling.http.Predef._\n+import io.gatling.http.check.ws.WsTextFrameCheck\n+\n+import scala.concurrent.duration._\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.NonUnitStatements\"))\n+class AsyncQueryConstantAcs\n+    extends Simulation\n+    with SimulationConfig\n+    with HasRandomAmount\n+    with HasCreateRequest {\n+\n+  private val wantedAcsSize = 5000\n+\n+  private val waitForResponse: FiniteDuration = 5.seconds\n+\n+  private val numberOfRuns = 100\n+\n+  private val queryRequest =\n+    \"\"\"{\"templateIds\": [\"Iou:Iou\"], \"query\": {\"amount\": {\"%gt\": 1.0}}}\"\"\"\n+\n+  val messageCheck: WsTextFrameCheck = ws\n+    .checkTextMessage(\"messageCheck\")\n+    .check(jsonPath(\"$.offset\").find.notExists)\n+    .check(jsonPath(\"$.events[*].created\").findAll)\n+\n+  private def query(runId: Int) = {\n+    val wsName = s\"websocket$runId\"\n+    ws(\"Connect websocket\", wsName)\n+      .connect(\"/v1/stream/query\")\n+      .subprotocol(s\"jwt.token.$aliceJwt, daml.ws.auth\")\n+      .onConnected(\n+        exec(\n+          ws(s\"Send Query Request and wait for response: $waitForResponse\", wsName)\n+            .sendText(queryRequest)\n+            .await(waitForResponse)(Vector.fill(5)(messageCheck): _*)"
  }
]