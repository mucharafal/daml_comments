[
  {
    "id" : "17e87f16-482e-4b03-a8d8-202aa858db24",
    "prId" : 5879,
    "comments" : [
      {
        "id" : "13170441-1eba-4a30-86f5-8831a2cda971",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "As @leo-da [has noted in the past](https://github.com/digital-asset/daml/pull/5318#discussion_r401121113), `GeneratorDrivenPropertyChecks` and `Async*Spec` do not play well together. I would like to do something better than \"just take one sample and test it\", though.",
        "createdAt" : "2020-05-12T22:02:00Z",
        "updatedAt" : "2020-05-13T17:47:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a6d756e4e1c4e1ad2c49edf0b9b35b7203a4f",
    "line" : 251,
    "diffHunk" : "@@ -526,6 +522,86 @@ class WebsocketServiceIntegrationTest\n         }: Future[Assertion]\n   }\n \n+  \"query on a bunch of random splits should yield consistent results\" in withHttpService {\n+    (uri, _, _) =>\n+      val splitSample = SplitSeq.gen.map(_ map (BigDecimal(_))).sample.get"
  },
  {
    "id" : "8834c4f5-d994-496c-99e6-84859b9c719c",
    "prId" : 5879,
    "comments" : [
      {
        "id" : "52164501-6922-4351-98f9-e19ce98df206",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "#5969 ",
        "createdAt" : "2020-05-13T18:14:24Z",
        "updatedAt" : "2020-05-13T18:14:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a6d756e4e1c4e1ad2c49edf0b9b35b7203a4f",
    "line" : 248,
    "diffHunk" : "@@ -526,6 +522,87 @@ class WebsocketServiceIntegrationTest\n         }: Future[Assertion]\n   }\n \n+  // TODO SC enable after tracking down dupes"
  },
  {
    "id" : "feca2e08-0411-40d7-b001-3342dadc6b8a",
    "prId" : 5318,
    "comments" : [
      {
        "id" : "ce91d9aa-29fe-4f56-b6db-3ccb1f60e03d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Use `TableDrivenPropertyChecks` and `forEvery` for this kind of testing setup. That will still discriminate successful and failing cases without having to interpolate test names.",
        "createdAt" : "2020-03-31T17:34:24Z",
        "updatedAt" : "2020-03-31T17:58:45Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac9b3983-da44-4af6-adbf-3568b847fa1c",
        "parentId" : "ce91d9aa-29fe-4f56-b6db-3ccb1f60e03d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`TableDrivenPropertyChecks` and `GeneratorDrivenPropertyChecks` do not work with `AsyncFreeSpec`\r\n```\r\n found   : Unit\r\n required: scala.concurrent.Future[org.scalatest.compatible.Assertion]\r\n```",
        "createdAt" : "2020-03-31T18:22:21Z",
        "updatedAt" : "2020-03-31T18:22:21Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dc954bd6-a26e-4bf6-908f-938302e49e47",
        "parentId" : "ce91d9aa-29fe-4f56-b6db-3ccb1f60e03d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Oh well.",
        "createdAt" : "2020-03-31T18:23:32Z",
        "updatedAt" : "2020-03-31T18:23:32Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e3e6e8d4-2b04-451f-8741-96a3d1d639a4",
        "parentId" : "ce91d9aa-29fe-4f56-b6db-3ccb1f60e03d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yeah, it is either `AsyncFreeSpec` or `org.scalatest.concurrent.Futures#whenReady` at the end of every test scenario.",
        "createdAt" : "2020-03-31T18:28:42Z",
        "updatedAt" : "2020-03-31T18:28:42Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f0bd1e6c6633281ac328abbfbfb725b280a3b63",
    "line" : 13,
    "diffHunk" : "@@ -106,6 +106,44 @@ class WebsocketServiceIntegrationTest\n     }\n   }\n \n+  List(\n+    SimpleScenario(\n+      \"query\",\n+      Uri.Path(\"/v1/stream/query\"),\n+      Source.single(TextMessage.Strict(\"\"\"{\"templateIds\": [\"AA:BB\"]}\"\"\"))),\n+    SimpleScenario(\n+      \"fetch\",\n+      Uri.Path(\"/v1/stream/fetch\"),\n+      Source.single(TextMessage.Strict(\"\"\"[{\"templateId\": \"AA:BB\", \"key\": [\"k\", \"v\"]}]\"\"\")))\n+  ).foreach { scenario =>"
  }
]