[
  {
    "id" : "65325d7f-1f62-469a-8853-8af0e2c6e999",
    "prId" : 5879,
    "comments" : [
      {
        "id" : "df0a91a0-75bb-41bc-afb3-dff6b85fc695",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "As @leo-da [has noted in the past](https://github.com/digital-asset/daml/pull/5318#discussion_r401121113), `GeneratorDrivenPropertyChecks` and `Async*Spec` do not play well together. I would like to do something better than \"just take one sample and test it\", though.",
        "createdAt" : "2020-05-12T22:02:00Z",
        "updatedAt" : "2020-05-13T17:47:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a6d756e4e1c4e1ad2c49edf0b9b35b7203a4f",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +526,530 @@  \"query on a bunch of random splits should yield consistent results\" ignore withHttpService {\n    (uri, _, _) =>\n      val splitSample = SplitSeq.gen.map(_ map (BigDecimal(_))).sample.get\n      val query =\n        \"\"\"["
  },
  {
    "id" : "62238b1e-ddd1-4cf9-ab83-d31099523780",
    "prId" : 5879,
    "comments" : [
      {
        "id" : "f3fe8142-19b5-4d93-ac66-7079667fe8f0",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "#5969 ",
        "createdAt" : "2020-05-13T18:14:24Z",
        "updatedAt" : "2020-05-13T18:14:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a6d756e4e1c4e1ad2c49edf0b9b35b7203a4f",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +523,527 @@  }\n\n  // TODO SC enable after tracking down dupes\n  \"query on a bunch of random splits should yield consistent results\" ignore withHttpService {\n    (uri, _, _) =>"
  },
  {
    "id" : "b9df468a-82cc-4098-b0e9-ed1054975f61",
    "prId" : 5318,
    "comments" : [
      {
        "id" : "c1090364-6a42-4acb-8eeb-437f4d2f81db",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Use `TableDrivenPropertyChecks` and `forEvery` for this kind of testing setup. That will still discriminate successful and failing cases without having to interpolate test names.",
        "createdAt" : "2020-03-31T17:34:24Z",
        "updatedAt" : "2020-03-31T17:58:45Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cb3b725d-5d18-4aff-89cd-acd76493faf6",
        "parentId" : "c1090364-6a42-4acb-8eeb-437f4d2f81db",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`TableDrivenPropertyChecks` and `GeneratorDrivenPropertyChecks` do not work with `AsyncFreeSpec`\r\n```\r\n found   : Unit\r\n required: scala.concurrent.Future[org.scalatest.compatible.Assertion]\r\n```",
        "createdAt" : "2020-03-31T18:22:21Z",
        "updatedAt" : "2020-03-31T18:22:21Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3645f41f-0a66-4c38-8fa1-f3d4e2f544d1",
        "parentId" : "c1090364-6a42-4acb-8eeb-437f4d2f81db",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Oh well.",
        "createdAt" : "2020-03-31T18:23:32Z",
        "updatedAt" : "2020-03-31T18:23:32Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5f0230eb-281d-414c-a1b0-8fa0c97c3681",
        "parentId" : "c1090364-6a42-4acb-8eeb-437f4d2f81db",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yeah, it is either `AsyncFreeSpec` or `org.scalatest.concurrent.Futures#whenReady` at the end of every test scenario.",
        "createdAt" : "2020-03-31T18:28:42Z",
        "updatedAt" : "2020-03-31T18:28:42Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f0bd1e6c6633281ac328abbfbfb725b280a3b63",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +116,120 @@      Uri.Path(\"/v1/stream/fetch\"),\n      Source.single(TextMessage.Strict(\"\"\"[{\"templateId\": \"AA:BB\", \"key\": [\"k\", \"v\"]}]\"\"\")))\n  ).foreach { scenario =>\n    s\"${scenario.id} report UnknownTemplateIds and error when cannot resolve any template ID\" in withHttpService {\n      (uri, _, _) =>"
  }
]