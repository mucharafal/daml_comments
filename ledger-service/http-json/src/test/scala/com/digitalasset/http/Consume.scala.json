[
  {
    "id" : "adf878bc-b31d-4cb2-bcaa-15d1719eeade",
    "prId" : 5879,
    "comments" : [
      {
        "id" : "d32f91f3-1fab-4355-b5e9-7292c26037f9",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I considered whether `Free` was really appropriate here, and it ultimately came down to things like this. Interpreting these scripts must pause when reaching a `readOne` (`Listen` here). However, a naive interpretation will interpret a `flatMap`\r\n\r\n```scala\r\n  [e] (first: Consume[T, e], next: e => Consume[T, V]) => ...\r\n```\r\n\r\nby recursive descent into `first`. However, should it encounter `Listen` on this recursive descent, what then? Assuming it's the second listen encountered, it must immediately stop, returning it _and all the remaining actions_, including the ones unpacked as we recur.\r\n\r\nBy contrast, in this code, `f: T => Free[Consume[T, ?], V]`, where the function result represents the complete remainder of the sequence, _regardless of how arbitrarily nested within `first`s this `Listen` was_. That is the result of `resume`; in other words, the key feature we needed was turning every left-associated bind `(fx >>= k) >>= t` into a right-associated bind `fx >>= (\\x -> k x >>= t)`, exactly what `Free` and `resume` are designed for, thus permitting scripts to be factored in a natural way.",
        "createdAt" : "2020-05-13T12:05:20Z",
        "updatedAt" : "2020-05-13T17:47:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a6d756e4e1c4e1ad2c49edf0b9b35b7203a4f",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@          steps.resume fold ({\n            case listen @ Listen(f, _) =>\n              if (listened) Future successful (Free roll listen) else go(f(t), true)\n            case drain: Drain[s, T, FCC[T, V]] =>\n              Future successful Free.roll {"
  }
]