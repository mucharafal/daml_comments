[
  {
    "id" : "960ecd6a-a74a-483a-ba54-937f99a57d09",
    "prId" : 7232,
    "comments" : [
      {
        "id" : "ab2fbe0e-d051-4a80-9c5d-399526c85fd7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth adding a comment here that this is only used by the asynchronous command service?",
        "createdAt" : "2020-08-26T12:43:28Z",
        "updatedAt" : "2020-08-26T19:48:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bfac2985-2a99-456f-992e-3601ab384d99",
        "parentId" : "ab2fbe0e-d051-4a80-9c5d-399526c85fd7",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I don't like comments like this for one reason... there is no way to enforce the correctness of such comments, they tend to become wrong over time :) the name with the dummy prefix assumes that it is Noop, I can rename it to NoopApplicationId. Unless you insist on adding the comment.",
        "createdAt" : "2020-08-26T12:55:02Z",
        "updatedAt" : "2020-08-26T19:48:49Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6f3edaa8-ae8a-4c7a-9392-f9e9f711631e",
        "parentId" : "ab2fbe0e-d051-4a80-9c5d-399526c85fd7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "your choice, personally I’ve gained far more from having useful comments than I’ve wasted due to out of date comments so I tend to prefer adding a comment (useful comments of course, I’m not a fan of the “document every parameter and variable everywhere” approach) but I don’t feel strongly in this particular case.",
        "createdAt" : "2020-08-26T13:05:05Z",
        "updatedAt" : "2020-08-26T19:48:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1309eb9c6cbf3d974b5bf50839aff1733905e95d",
    "line" : 23,
    "diffHunk" : "@@ -100,7 +101,7 @@ object HttpService extends StrictLogging {\n     val tokenHolder = accessTokenFile.map(new TokenHolder(_))\n \n     val clientConfig = LedgerClientConfiguration(\n-      applicationId = ApplicationId.unwrap(applicationId),\n+      applicationId = ApplicationId.unwrap(DummyApplicationId),"
  },
  {
    "id" : "3301b6be-92cd-4e43-a086-8cfa8ef6b5bb",
    "prId" : 5660,
    "comments" : [
      {
        "id" : "e5705ae9-bf5b-41a1-8a34-49d898a81e1c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@leo-da This signature was starting to bug me so I made it all type-overlappy with `Config`, with the \"argument\" part still being publicly accessible.",
        "createdAt" : "2020-04-22T21:19:51Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2dcd124a-fae0-4d41-8daa-0401fdd3644e",
        "parentId" : "e5705ae9-bf5b-41a1-8a34-49d898a81e1c",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-04-22T21:43:53Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "185ea518a2b61c43eb373b611650bcf599b2e5ee",
    "line" : 43,
    "diffHunk" : "@@ -57,27 +57,42 @@ object HttpService extends StrictLogging {\n \n   final case class Error(message: String)\n \n+  // defined separately from Config so\n+  //  1. it is absolutely lexically apparent what `import startSettings._` means\n+  //  2. avoid incorporating other Config'd things into \"the shared args to start\"\n+  trait StartSettings {\n+    val ledgerHost: String\n+    val ledgerPort: Int\n+    val applicationId: ApplicationId\n+    val address: String\n+    val httpPort: Int\n+    val portFile: Option[Path]\n+    val tlsConfig: TlsConfiguration\n+    val wsConfig: Option[WebsocketConfig]\n+    val accessTokenFile: Option[Path]\n+    val allowNonHttps: Boolean\n+    val staticContentConfig: Option[StaticContentConfig]\n+    val packageReloadInterval: FiniteDuration\n+    val maxInboundMessageSize: Int\n+  }\n+\n+  trait DefaultStartSettings extends StartSettings {\n+    override val staticContentConfig: Option[StaticContentConfig] = None\n+    override val packageReloadInterval: FiniteDuration = DefaultPackageReloadInterval\n+    override val maxInboundMessageSize: Int = DefaultMaxInboundMessageSize\n+  }\n+\n   def start(\n-      ledgerHost: String,\n-      ledgerPort: Int,\n-      applicationId: ApplicationId,\n-      address: String,\n-      httpPort: Int,\n-      portFile: Option[Path],\n-      tlsConfig: TlsConfiguration,\n-      wsConfig: Option[WebsocketConfig],\n-      accessTokenFile: Option[Path],\n+      startSettings: StartSettings,\n       contractDao: Option[ContractDao] = None,\n-      staticContentConfig: Option[StaticContentConfig] = None,\n-      packageReloadInterval: FiniteDuration = DefaultPackageReloadInterval,\n-      maxInboundMessageSize: Int = DefaultMaxInboundMessageSize,"
  },
  {
    "id" : "d5fa9e09-0206-4a10-9a3e-f53b0b9edad1",
    "prId" : 5454,
    "comments" : [
      {
        "id" : "e6eca632-08c9-458c-8927-3c423bf8f016",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "We should fail if the file exists:\r\n\r\n```suggestion\r\n    // import StandardOpenOption.CREATE_NEW\r\n    \\/.fromTryCatchNonFatal(Files.write(file, lines, CREATE_NEW))\r\n```\r\n\r\nAdditionally, we should arrange to delete the file, then, on exit.",
        "createdAt" : "2020-04-07T15:16:00Z",
        "updatedAt" : "2020-04-08T16:28:33Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eda6bf3d-dff7-49dc-8cd2-0670ef1076cd",
        "parentId" : "e6eca632-08c9-458c-8927-3c423bf8f016",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I actually wanted to do this initially, but sandbox does not check for existing files and does not remove the port file on exit. So just copied what sandbox does for consistency's sake. ",
        "createdAt" : "2020-04-07T15:46:12Z",
        "updatedAt" : "2020-04-08T16:28:33Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d9cec789b9965322dc5e0bca30fec585e45ff851",
    "line" : null,
    "diffHunk" : "@@ -284,4 +287,14 @@ object HttpService extends StrictLogging {\n         case NonFatal(e) =>\n           \\/.left(Error(s\"Cannot connect to the ledger server, error: ${e.description}\"))\n       }\n+\n+  private def updatePortFile(\n+      file: Path,\n+      binding: akka.http.scaladsl.Http.ServerBinding): Error \\/ Unit = {\n+    import scala.collection.JavaConverters._\n+    val lines: java.lang.Iterable[String] = List(binding.localAddress.getPort.toString).asJava\n+    \\/.fromTryCatchNonFatal(Files.write(file, lines))"
  },
  {
    "id" : "9fe2b4d3-fd1f-4b92-ae0e-db8f2201d725",
    "prId" : 5454,
    "comments" : [
      {
        "id" : "cb9d6b4e-5a19-4b72-afd2-644b2d46c7eb",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      .bimap(e => Error(s\"Cannot update port file: ${file: Path}, error: ${e.getMessage}\"),\r\n             _ => ())\r\n```",
        "createdAt" : "2020-04-07T15:16:29Z",
        "updatedAt" : "2020-04-08T16:28:33Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d9cec789b9965322dc5e0bca30fec585e45ff851",
    "line" : null,
    "diffHunk" : "@@ -284,4 +287,14 @@ object HttpService extends StrictLogging {\n         case NonFatal(e) =>\n           \\/.left(Error(s\"Cannot connect to the ledger server, error: ${e.description}\"))\n       }\n+\n+  private def updatePortFile(\n+      file: Path,\n+      binding: akka.http.scaladsl.Http.ServerBinding): Error \\/ Unit = {\n+    import scala.collection.JavaConverters._\n+    val lines: java.lang.Iterable[String] = List(binding.localAddress.getPort.toString).asJava\n+    \\/.fromTryCatchNonFatal(Files.write(file, lines))\n+      .leftMap(e => Error(s\"Cannot update port file: ${file: Path}, error: ${e.getMessage}\"))\n+      .map(_ => ())"
  },
  {
    "id" : "1cf7e7a9-48fc-4a4f-819b-a523d4eca900",
    "prId" : 3649,
    "comments" : [
      {
        "id" : "ebb43f17-2888-4f61-aa5a-cb9a164d646f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "what does `M` stand for?",
        "createdAt" : "2019-11-27T14:44:11Z",
        "updatedAt" : "2019-11-27T14:47:13Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b44a451d-d006-4361-ae9e-1c0139f15c56",
        "parentId" : "ebb43f17-2888-4f61-aa5a-cb9a164d646f",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`Monad`? :)",
        "createdAt" : "2019-11-27T15:45:21Z",
        "updatedAt" : "2019-11-27T15:45:21Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "06ddd9ed9c32b53b7e96edd2994959c44d96baca",
    "line" : 35,
    "diffHunk" : "@@ -140,20 +141,31 @@ object HttpService extends StrictLogging {\n     bindingEt.run: Future[Error \\/ ServerBinding]\n   }\n \n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+  private[http] def refreshToken(holderM: Option[TokenHolder])(\n+      implicit ec: ExecutionContext): Future[PackageService.ServerError \\/ Option[String]] =\n+    Future(\n+      holderM\n+        .traverseU { holder =>\n+          holder.refresh()\n+          holder.token\n+            .map(\\/-(_))\n+            .getOrElse(-\\/(PackageService.ServerError(\"Unable to load token\")))\n+        })\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+  private[http] def doLoad(packageClient: PackageClient, ids: Set[String], tokenM: Option[String])(\n+      implicit ec: ExecutionContext): Future[PackageService.ServerError \\/ Option[PackageStore]] =\n+    LedgerReader\n+      .loadPackageStoreUpdates(packageClient, tokenM)(ids)\n+      .map(_.leftMap(e => PackageService.ServerError(e)))\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n   private[http] def loadPackageStoreUpdates(\n       packageClient: PackageClient,\n-      tokenHolder: Option[TokenHolder])(\n+      holderM: Option[TokenHolder])("
  },
  {
    "id" : "8515d1c6-892d-43f9-89a4-de60cfe3d71e",
    "prId" : 3639,
    "comments" : [
      {
        "id" : "8345ccbc-1ef3-41b6-ae2c-c3afff46a548",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@stefanobaghino-da you are not checking for the return value here. `None` means failure as I understand. This should be returned as `PackageService.Error`",
        "createdAt" : "2019-11-26T18:55:02Z",
        "updatedAt" : "2019-11-26T18:55:08Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "194dbb3398d182eb223c41de7d71651b7a9c736e",
    "line" : 66,
    "diffHunk" : "@@ -134,12 +140,20 @@ object HttpService extends StrictLogging {\n     bindingEt.run: Future[Error \\/ ServerBinding]\n   }\n \n-  private[http] def loadPackageStoreUpdates(packageClient: PackageClient, token: Option[String])(\n+  private[http] def loadPackageStoreUpdates(\n+      packageClient: PackageClient,\n+      tokenHolder: Option[TokenHolder])(\n       implicit ec: ExecutionContext): PackageService.ReloadPackageStore =\n-    (ids: Set[String]) =>\n+    (ids: Set[String]) => {\n+      val token =\n+        tokenHolder.flatMap { holder =>\n+          holder.refresh()"
  },
  {
    "id" : "d8fae272-6d00-4e76-b350-8227c42b8a1c",
    "prId" : 3419,
    "comments" : [
      {
        "id" : "046b8239-81f2-482c-badd-fe0f70041aee",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "why `not letfMap(e => Error(....))`",
        "createdAt" : "2019-11-11T18:51:53Z",
        "updatedAt" : "2019-11-11T18:52:02Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f93c82f4-70ab-4744-a54d-d91af785c34a",
        "parentId" : "046b8239-81f2-482c-badd-fe0f70041aee",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "scratch it, `fromBuilder` returns `Future[A]`, not `Future[E\\/A]` as I thought",
        "createdAt" : "2019-11-11T18:57:40Z",
        "updatedAt" : "2019-11-11T18:57:40Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1682d08b679895c5b38409fddc9a2410bb4081a6",
    "line" : 100,
    "diffHunk" : "@@ -193,22 +188,24 @@ object HttpService extends StrictLogging {\n       }\n     }\n \n-  private def clientChannel(\n+  private def client(\n       ledgerHost: String,\n       ledgerPort: Int,\n       clientConfig: LedgerClientConfiguration,\n       maxInboundMessageSize: Int)(\n       implicit ec: ExecutionContext,\n-      aesf: ExecutionSequencerFactory): Error \\/ io.grpc.Channel =\n-    LedgerClientJwt\n-      .singleHostChannel(ledgerHost, ledgerPort, clientConfig, maxInboundMessageSize)(ec, aesf)\n-      .leftMap(e => Error(s\"Cannot connect to the ledger server, error: ${e.getMessage}\"))\n-\n-  private def partyManagementClient(channel: io.grpc.Channel)(\n-      implicit ec: ExecutionContext): Error \\/ PartyManagementClient =\n-    \\/.fromTryCatchNonFatal(new PartyManagementClient(PartyManagementServiceGrpc.stub(channel)))\n-      .leftMap(e =>\n-        Error(s\"Cannot create an instance of PartyManagementClient, error: ${e.getMessage}\"))\n+      aesf: ExecutionSequencerFactory): Future[Error \\/ LedgerClient] =\n+    LedgerClient\n+      .fromBuilder(\n+        NettyChannelBuilder\n+          .forAddress(ledgerHost, ledgerPort)\n+          .maxInboundMessageSize(maxInboundMessageSize),\n+        clientConfig)\n+      .map(_.right)"
  }
]