[
  {
    "id" : "c3e5a92a-e5fd-4926-9a44-6cea3f64fd96",
    "prId" : 7232,
    "comments" : [
      {
        "id" : "ed19036b-5cd7-47c0-943a-fec437b0a2ea",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth adding a comment here that this is only used by the asynchronous command service?",
        "createdAt" : "2020-08-26T12:43:28Z",
        "updatedAt" : "2020-08-26T19:48:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c76e3bbb-0fa6-4dbd-bb8f-a56c8150f7dd",
        "parentId" : "ed19036b-5cd7-47c0-943a-fec437b0a2ea",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I don't like comments like this for one reason... there is no way to enforce the correctness of such comments, they tend to become wrong over time :) the name with the dummy prefix assumes that it is Noop, I can rename it to NoopApplicationId. Unless you insist on adding the comment.",
        "createdAt" : "2020-08-26T12:55:02Z",
        "updatedAt" : "2020-08-26T19:48:49Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "550a2fa0-20c9-4e94-9dd6-787eb9823628",
        "parentId" : "ed19036b-5cd7-47c0-943a-fec437b0a2ea",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "your choice, personally I’ve gained far more from having useful comments than I’ve wasted due to out of date comments so I tend to prefer adding a comment (useful comments of course, I’m not a fan of the “document every parameter and variable everywhere” approach) but I don’t feel strongly in this particular case.",
        "createdAt" : "2020-08-26T13:05:05Z",
        "updatedAt" : "2020-08-26T19:48:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1309eb9c6cbf3d974b5bf50839aff1733905e95d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +103,107 @@\n    val clientConfig = LedgerClientConfiguration(\n      applicationId = ApplicationId.unwrap(DummyApplicationId),\n      ledgerIdRequirement = LedgerIdRequirement.none,\n      commandClient = CommandClientConfiguration.default,"
  },
  {
    "id" : "f7b566d0-e689-47f2-a3a0-0c3adf043b7e",
    "prId" : 3649,
    "comments" : [
      {
        "id" : "f505abde-0c78-40dc-8485-4c924dd9b698",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "what does `M` stand for?",
        "createdAt" : "2019-11-27T14:44:11Z",
        "updatedAt" : "2019-11-27T14:47:13Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff15cecb-d20f-462f-a2d8-344f88fdcbf4",
        "parentId" : "f505abde-0c78-40dc-8485-4c924dd9b698",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`Monad`? :)",
        "createdAt" : "2019-11-27T15:45:21Z",
        "updatedAt" : "2019-11-27T15:45:21Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "06ddd9ed9c32b53b7e96edd2994959c44d96baca",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +164,168 @@  private[http] def loadPackageStoreUpdates(\n      packageClient: PackageClient,\n      holderM: Option[TokenHolder])(\n      implicit ec: ExecutionContext): PackageService.ReloadPackageStore =\n    (ids: Set[String]) => refreshToken(holderM).flatMap(_.traverseM(doLoad(packageClient, ids, _)))"
  },
  {
    "id" : "35bdef6f-d1c5-460f-92a9-517fd2ce09ca",
    "prId" : 3639,
    "comments" : [
      {
        "id" : "38b93763-1d63-41bd-be8e-5186bf9191df",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@stefanobaghino-da you are not checking for the return value here. `None` means failure as I understand. This should be returned as `PackageService.Error`",
        "createdAt" : "2019-11-26T18:55:02Z",
        "updatedAt" : "2019-11-26T18:55:08Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "194dbb3398d182eb223c41de7d71651b7a9c736e",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +148,152 @@      val token =\n        tokenHolder.flatMap { holder =>\n          holder.refresh()\n          holder.token\n        }"
  },
  {
    "id" : "2cfe0c91-6849-48e4-a6cb-53702466c927",
    "prId" : 3419,
    "comments" : [
      {
        "id" : "bf911f85-33b2-4c75-b2a1-24e88d14b944",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "why `not letfMap(e => Error(....))`",
        "createdAt" : "2019-11-11T18:51:53Z",
        "updatedAt" : "2019-11-11T18:52:02Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c319cbef-3afa-4cb7-964e-23cbbff81101",
        "parentId" : "bf911f85-33b2-4c75-b2a1-24e88d14b944",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "scratch it, `fromBuilder` returns `Future[A]`, not `Future[E\\/A]` as I thought",
        "createdAt" : "2019-11-11T18:57:40Z",
        "updatedAt" : "2019-11-11T18:57:40Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1682d08b679895c5b38409fddc9a2410bb4081a6",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +202,206 @@          .maxInboundMessageSize(maxInboundMessageSize),\n        clientConfig)\n      .map(_.right)\n      .recover {\n        case NonFatal(e) =>"
  }
]