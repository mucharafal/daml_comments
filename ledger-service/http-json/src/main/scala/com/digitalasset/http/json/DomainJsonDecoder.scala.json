[
  {
    "id" : "3491b728-8729-4bee-a792-1bb83a62b4b1",
    "prId" : 4730,
    "comments" : [
      {
        "id" : "c0fbf414-b5ed-414a-8dc8-c2a34288a4e5",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Can't figure out why in this case I need to specify `.apply` for `JsonError` but works fine for `ServerError` without it",
        "createdAt" : "2020-02-26T17:21:12Z",
        "updatedAt" : "2020-02-26T19:34:26Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5608a4bd-3b58-4a3c-9353-0b7657002041",
        "parentId" : "c0fbf414-b5ed-414a-8dc8-c2a34288a4e5",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Because of scala/bug#3664; you have a handwritten companion for `JsonError` but not `ServerError`. You can use the workaround mentioned in https://github.com/scala/bug/issues/3664#issuecomment-320528047; indeed we use this workaround in several places in the daml codebase.",
        "createdAt" : "2020-02-26T17:33:37Z",
        "updatedAt" : "2020-02-26T19:34:26Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7b581be2-5626-4dcd-9cd2-4ebe3ab2a80e",
        "parentId" : "c0fbf414-b5ed-414a-8dc8-c2a34288a4e5",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "We even include the workaround in codegen output:\r\n\r\nhttps://github.com/digital-asset/daml/blob/6685becccc5f04aa6c7833aa1f664dae95ca081f/language-support/scala/codegen/src/main/scala/com/digitalasset/codegen/lf/DamlDataTypeGen.scala#L347-L348",
        "createdAt" : "2020-02-26T18:11:04Z",
        "updatedAt" : "2020-02-26T19:34:26Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "085c73511cb3083449542b25922c15fdd1a0cbe3",
    "line" : null,
    "diffHunk" : "@@ -25,12 +24,14 @@ class DomainJsonDecoder(\n     jsValueToApiValue: (domain.LfType, JsValue) => JsonError \\/ lav1.value.Value,\n     jsValueToLfValue: (domain.LfType, JsValue) => JsonError \\/ domain.LfValue) {\n \n+  import com.digitalasset.http.util.ErrorOps._\n+\n   def decodeR[F[_]](a: String)(\n       implicit ev1: JsonReader[F[JsObject]],\n       ev2: Traverse[F],\n       ev3: domain.HasTemplateId[F]): JsonError \\/ F[lav1.value.Record] =\n     for {\n-      b <- SprayJson.parse(a).leftMap(e => JsonError(e.shows))\n+      b <- SprayJson.parse(a).liftErr(JsonError.apply)"
  }
]