[
  {
    "id" : "83355379-580a-4ed9-9ace-9107c92979cd",
    "prId" : 4754,
    "comments" : [
      {
        "id" : "fa000501-9ecd-4083-ab72-7dbdf6e53513",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    tx.rootEventIds.collectFirst(Function unlift { h =>\r\n      ...\r\n```\r\n\r\nAlso, `case Nil` is unsafe; using `collectFirst` avoids this problem, too.",
        "createdAt" : "2020-03-02T15:22:41Z",
        "updatedAt" : "2020-03-02T17:35:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d4c8199-5ef1-4754-97a2-a0f9a134bd92",
        "parentId" : "fa000501-9ecd-4083-ab72-7dbdf6e53513",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "ummmm. What is unsafe about `case Nil` and why `scalac` does not tell me about this :)",
        "createdAt" : "2020-03-02T17:36:58Z",
        "updatedAt" : "2020-03-02T17:36:59Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb8b3952-0cc4-4a27-8cba-2cc8ae8bebb7",
        "parentId" : "fa000501-9ecd-4083-ab72-7dbdf6e53513",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "is that because it is `case object Nil extends List[Nothing]`?",
        "createdAt" : "2020-03-02T17:42:20Z",
        "updatedAt" : "2020-03-02T17:42:20Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "37358a488d97c38be7a565409fb1d175d37a70b3",
    "line" : null,
    "diffHunk" : "@@ -172,22 +202,29 @@ class CommandService(\n     : Error \\/ lav1.value.Value = {\n     val result: Option[lav1.value.Value] = for {\n       transaction <- a.transaction: Option[lav1.transaction.TransactionTree]\n-      treeEvent <- rootTreeEvent(transaction): Option[lav1.transaction.TreeEvent]\n-      exercised <- treeEvent.kind.exercised: Option[lav1.event.ExercisedEvent]\n+      exercised <- firstExercisedEvent(transaction): Option[lav1.event.ExercisedEvent]\n       exResult <- exercised.exerciseResult: Option[lav1.value.Value]\n     } yield exResult\n \n     result.toRightDisjunction(\n       Error(\n         'choiceArgument,\n-        s\"Cannot get exerciseResult from the first root event of gRPC response: ${a.toString}\"))\n+        s\"Cannot get exerciseResult from the first ExercisedEvent of gRPC response: ${a.toString}\"))\n   }\n \n-  private def rootTreeEvent(\n-      a: lav1.transaction.TransactionTree): Option[lav1.transaction.TreeEvent] =\n-    a.rootEventIds.headOption.flatMap { id =>\n-      a.eventsById.get(id)\n+  private def firstExercisedEvent(\n+      tx: lav1.transaction.TransactionTree\n+  ): Option[lav1.event.ExercisedEvent] = {\n+    @tailrec\n+    def loop(ids: Seq[String]): Option[lav1.event.ExercisedEvent] = ids match {\n+      case h +: t =>\n+        val result = tx.eventsById.get(h).flatMap(_.kind.exercised)\n+        if (result.isDefined) result\n+        else loop(t)\n+      case Nil => None\n     }\n+    loop(tx.rootEventIds)"
  }
]