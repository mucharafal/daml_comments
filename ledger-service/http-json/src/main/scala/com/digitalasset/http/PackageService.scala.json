[
  {
    "id" : "3ea83af0-e4bb-47bf-b318-918579b7d91a",
    "prId" : 3882,
    "comments" : [
      {
        "id" : "9e4ed433-b5dd-4aa2-921e-213c64b82aba",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n        val templateId = TemplateId(interface.packageId, qn.module.dottedName, qn.name.dottedName)\r\n```",
        "createdAt" : "2019-12-24T17:25:04Z",
        "updatedAt" : "2019-12-24T20:19:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "41030735c34f5ee15171e782aa55742d40e5f99b",
    "line" : null,
    "diffHunk" : "@@ -191,11 +219,25 @@ object PackageService {\n     }\n \n   private def getChoices(\n-      choices: Map[Ref.Name, iface.TemplateChoice[iface.Type]]): Seq[(Choice, Identifier)] = {\n+      choices: Map[Ref.Name, iface.TemplateChoice[iface.Type]]): Seq[(Choice, iface.Type)] = {\n     import iface._\n     choices.toSeq.collect {\n-      case (name, TemplateChoice(TypeCon(typeConName, _), _, _)) =>\n-        (Choice(name.toString), IdentifierConverters.apiIdentifier(typeConName.identifier))\n+      case (name, TemplateChoice(choiceType, _, _)) =>\n+        (Choice(name.toString), choiceType)\n     }\n   }\n+\n+  // TODO (Leo): merge getChoiceTypeMap and getKeyTypeMap, so we build them in one iteration over all templates\n+  private def getKeyTypeMap(packageStore: PackageStore): KeyTypeMap =\n+    packageStore.flatMap { case (_, interface) => getKeys(interface) }(collection.breakOut)\n+\n+  private def getKeys(interface: iface.Interface): Map[TemplateId.RequiredPkg, iface.Type] =\n+    interface.typeDecls.collect {\n+      case (\n+          qn,\n+          iface.InterfaceType\n+            .Template(_, iface.DefTemplate(_, Some(keyType)))) =>\n+        val templateId = TemplateId(interface.packageId, qn.module.toString, qn.name.toString)"
  }
]