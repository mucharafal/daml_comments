[
  {
    "id" : "6688b8b4-52e0-4f71-92c2-751e22d08ddd",
    "prId" : 7712,
    "comments" : [
      {
        "id" : "c002acc7-fae2-4809-9df3-54fb9c8712ac",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n                    case Seq(p) => \\/-(p)\r\n```\r\n\r\nMatching on `::` is quite dangerous in Scala.",
        "createdAt" : "2020-10-20T16:38:05Z",
        "updatedAt" : "2020-10-20T17:14:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ade3924-822f-4102-842b-3b268fc265fd",
        "parentId" : "c002acc7-fae2-4809-9df3-54fb9c8712ac",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why? We are working with `List` here, shouldn’t `::` be fine? Happy to make the change, I’d just like to understand why this is better.",
        "createdAt" : "2020-10-20T16:40:43Z",
        "updatedAt" : "2020-10-20T17:14:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c368c3c0-a49c-46fc-8ccc-2dda510c2bf1",
        "parentId" : "c002acc7-fae2-4809-9df3-54fb9c8712ac",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "As long as the selector is `List` then it is fine. But it is very easy to change the selector's type to `Seq`, and `::` will continue to compile without warning, so the change will almost certainly go unnoticed, especially if it is separate from the type declaration as here. `::` will work for any case where the `Seq` happens to be a `List`, but if any code path uses `Vector` or anything else the `::` will simply not match.",
        "createdAt" : "2020-10-20T16:44:50Z",
        "updatedAt" : "2020-10-20T17:14:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "00e46b54-f1d7-48c0-bb18-5a701d88fd1d",
        "parentId" : "c002acc7-fae2-4809-9df3-54fb9c8712ac",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense, thanks for the explanation!",
        "createdAt" : "2020-10-20T16:48:25Z",
        "updatedAt" : "2020-10-20T17:14:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7d2ca14c99d6e31b8100599083c77955e372e1a",
    "line" : 23,
    "diffHunk" : "@@ -61,13 +61,16 @@ object EndpointsCompanion {\n                     Unauthorized(\"ledgerId missing in access token\"))\n                   applicationId <- payload.applicationId.toRightDisjunction(\n                     Unauthorized(\"applicationId missing in access token\"))\n-                  party <- payload.party.toRightDisjunction(\n-                    Unauthorized(\"party missing or not unique in access token\"))\n+                  actAs <- payload.actAs match {\n+                    case p :: Nil => \\/-(p)"
  },
  {
    "id" : "4b685fb1-b9af-46a8-929a-091791a805e3",
    "prId" : 7712,
    "comments" : [
      {
        "id" : "c7ab97ba-0435-4f65-9f99-ab8af051efbb",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n                    lar.Party.subst(payload.readAs),\r\n```",
        "createdAt" : "2020-10-20T16:38:38Z",
        "updatedAt" : "2020-10-20T17:14:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7d2ca14c99d6e31b8100599083c77955e372e1a",
    "line" : 32,
    "diffHunk" : "@@ -61,13 +61,16 @@ object EndpointsCompanion {\n                     Unauthorized(\"ledgerId missing in access token\"))\n                   applicationId <- payload.applicationId.toRightDisjunction(\n                     Unauthorized(\"applicationId missing in access token\"))\n-                  party <- payload.party.toRightDisjunction(\n-                    Unauthorized(\"party missing or not unique in access token\"))\n+                  actAs <- payload.actAs match {\n+                    case p :: Nil => \\/-(p)\n+                    case ps => -\\/(Unauthorized(s\"Expected exactly one party in actAs but got $ps\"))\n+                  }\n                 } yield\n                   JwtWritePayload(\n                     lar.LedgerId(ledgerId),\n                     lar.ApplicationId(applicationId),\n-                    lar.Party(party)\n+                    lar.Party(actAs),\n+                    payload.readAs.map(lar.Party(_))"
  },
  {
    "id" : "9a265a84-925c-4309-94c4-02e40aee6a6d",
    "prId" : 7571,
    "comments" : [
      {
        "id" : "083209b3-19d1-48b6-9637-016c5b7b2755",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Open to suggestions for a better name for this, this was just the first thing that I came up with.",
        "createdAt" : "2020-10-06T08:06:30Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6489aaa0d5262d62016575dbcf3ca97582f3a81b",
    "line" : 13,
    "diffHunk" : "@@ -39,6 +39,14 @@ object EndpointsCompanion {\n     }\n   }\n \n+  trait ParsePayload[A] {"
  },
  {
    "id" : "e00cec7c-f112-4856-9ba5-5dd9738343a2",
    "prId" : 7571,
    "comments" : [
      {
        "id" : "69e8a899-9f19-4f36-b664-a9cf0eabb625",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Instances of a coherent typeclass should be placed directly within a relevant companion, if possible, and then never explicitly imported for use.",
        "createdAt" : "2020-10-07T18:00:00Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ddcb84c2-e6dc-4ff6-8a26-7058c2861ecd",
        "parentId" : "69e8a899-9f19-4f36-b664-a9cf0eabb625",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "So a `ParsePayload` companion? Does that remove the need for the import? (sorry I really should learn implicit resolution at some point)",
        "createdAt" : "2020-10-07T18:10:03Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "09f4753e-ea32-47e5-a4b6-347683928fa5",
        "parentId" : "69e8a899-9f19-4f36-b664-a9cf0eabb625",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Yes and yes. What's more, you have already defined the `ParsePayload` companion, so that is the best place to put them.\r\n\r\nIn this case, other places you could put the instances with the same effect would be `JwtPayload` and `JwtWritePayload`, each with its \"own\" instance, but that's more for when you want the instances and the typeclass itself separately defined.",
        "createdAt" : "2020-10-07T18:21:59Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "443e34bf-04c7-4ac9-a7df-a1606d8c6bd0",
        "parentId" : "69e8a899-9f19-4f36-b664-a9cf0eabb625",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "5de002e9502e9a2d03693690f7404089f23c2ad4 Thanks for the explanation!",
        "createdAt" : "2020-10-07T18:34:19Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6489aaa0d5262d62016575dbcf3ca97582f3a81b",
    "line" : null,
    "diffHunk" : "@@ -68,35 +76,69 @@ object EndpointsCompanion {\n \n   private[http] def format(a: JsValue): ByteString = ByteString(a.compactPrint)\n \n-  private[http] def decodeAndParsePayload(\n-      jwt: Jwt,\n-      decodeJwt: ValidateJwt): Unauthorized \\/ (jwt.type, JwtPayload) =\n+  private[http] def decodeAndParsePayload[A](jwt: Jwt, decodeJwt: ValidateJwt)(\n+      implicit parse: ParsePayload[A]): Unauthorized \\/ (jwt.type, A) = {\n     for {\n       a <- decodeJwt(jwt): Unauthorized \\/ DecodedJwt[String]\n-      p <- parsePayload(a)\n+      p <- parse.parsePayload(a)\n     } yield (jwt, p)\n+  }\n+\n+  object JwtPayloadInstances {"
  }
]