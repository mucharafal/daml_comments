[
  {
    "id" : "fcda986f-2fdb-4e98-aaaa-7f703f9f62e9",
    "prId" : 4800,
    "comments" : [
      {
        "id" : "6d230d57-4e40-45f7-a6e3-772a172892ce",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n          funPredicates.get(ac.templateId).exists(_(ac.payload))\r\n```",
        "createdAt" : "2020-03-03T22:13:58Z",
        "updatedAt" : "2020-03-03T22:13:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "75c53b22a7d154693d1cae438f10e0920ce2e8e1",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +251,255 @@        }\n        val convertedInserts = converted.inserts filter { ac =>\n          funPredicates.get(ac.templateId).cata(f => f(ac.payload), false)\n        }\n        (errors, converted.copy(inserts = convertedInserts))"
  },
  {
    "id" : "4eb19f90-f8ab-481d-98ff-15c783d4d6f9",
    "prId" : 4312,
    "comments" : [
      {
        "id" : "e3d7cb12-4642-4b86-a332-031c9307be8f",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "just curious why polymorphic type here? There is only one type that satisfies the upper bound of: \r\n```\r\nTid <: domain.TemplateId.OptionalPkg\r\n```",
        "createdAt" : "2020-01-30T21:05:10Z",
        "updatedAt" : "2020-01-30T21:11:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "884b5877-f946-451a-a3ea-4aa4571995e2",
        "parentId" : "e3d7cb12-4642-4b86-a332-031c9307be8f",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Just making the type a little more self-documenting; every element in the right set must be an element from the argument set, arbitrary constructed `TemplateId.OptionalPkg`s won't type-check.",
        "createdAt" : "2020-01-30T21:06:26Z",
        "updatedAt" : "2020-01-30T21:06:26Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "78599c17af9a135b4807e32f1657f935a368ec00",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +323,327 @@      Error('lfValueToJsValue, e.description))\n\n  private[http] def resolveTemplateIds[Tid <: domain.TemplateId.OptionalPkg](\n      xs: Set[Tid],\n  ): (Set[domain.TemplateId.RequiredPkg], Set[Tid]) = {"
  }
]