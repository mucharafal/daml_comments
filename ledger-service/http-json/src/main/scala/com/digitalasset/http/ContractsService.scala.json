[
  {
    "id" : "99a2fae6-2e31-4b07-95f4-2f2f99e17a72",
    "prId" : 4819,
    "comments" : [
      {
        "id" : "87735e36-bd48-494c-8ffc-4d4392f5ae70",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "why TODO? you are already sourcing the `startOffset` into `transactionsFollowingBoundary` flow.",
        "createdAt" : "2020-03-12T18:20:34Z",
        "updatedAt" : "2020-03-12T21:56:01Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3557bf34-476d-4547-a996-1c96701febc6",
        "parentId" : "87735e36-bd48-494c-8ffc-4d4392f5ae70",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Just forgot to delete it :)",
        "createdAt" : "2020-03-12T20:04:46Z",
        "updatedAt" : "2020-03-12T21:56:01Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7292b064dc3328ac908ca2a8760915e6a17e30c7",
    "line" : null,
    "diffHunk" : "@@ -272,27 +272,36 @@ class ContractsService(\n   ): Source[Error \\/ domain.ActiveContract[LfValue], NotUsed] =\n     searchInMemory(jwt, party, Set(templateId), queryParams)\n \n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n   private[http] def insertDeleteStepSource(\n       jwt: Jwt,\n       party: lar.Party,\n       templateIds: List[domain.TemplateId.RequiredPkg],\n+      startOffset: Option[domain.StartingOffset] = None,\n       terminates: Terminates = Terminates.AtLedgerEnd,\n   ): Source[ContractStreamStep.LAV1, NotUsed] = {\n \n     val txnFilter = util.Transactions.transactionFilterFor(party, templateIds)\n-    val source = getActiveContracts(jwt, txnFilter, true)\n+    def source = getActiveContracts(jwt, txnFilter, true)\n \n     val transactionsSince\n       : api.ledger_offset.LedgerOffset => Source[api.transaction.Transaction, NotUsed] =\n       getCreatesAndArchivesSince(jwt, txnFilter, _: api.ledger_offset.LedgerOffset, terminates)\n \n-    import ContractsFetch.acsFollowingAndBoundary, ContractsFetch.GraphExtensions._\n-    val contractsAndBoundary = acsFollowingAndBoundary(transactionsSince).divertToHead\n-    source\n-      .viaMat(contractsAndBoundary) { (nu, fob) =>\n-        fob.foreach(a => logger.debug(s\"contracts fetch completed at: ${a.toString}\"))\n-        nu\n-      }\n+    // TODO SC use startOffset"
  },
  {
    "id" : "f1bc944b-755a-44ce-b05b-90b9d1bfab85",
    "prId" : 4800,
    "comments" : [
      {
        "id" : "3d16fcfd-23f2-47d9-af3e-4236d9a5651a",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n          funPredicates.get(ac.templateId).exists(_(ac.payload))\r\n```",
        "createdAt" : "2020-03-03T22:13:58Z",
        "updatedAt" : "2020-03-03T22:13:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "75c53b22a7d154693d1cae438f10e0920ce2e8e1",
    "line" : 10,
    "diffHunk" : "@@ -249,11 +249,10 @@ class ContractsService(\n             .leftMap(e => Error('searchInMemory, e.shows))\n             .flatMap(apiAcToLfAc): Error \\/ Ac\n         }\n-        (\n-          errors,\n-          converted copy (inserts = converted.inserts filter (ac =>\n-            funPredicates(ac.templateId)(ac.payload))),\n-        )\n+        val convertedInserts = converted.inserts filter { ac =>\n+          funPredicates.get(ac.templateId).cata(f => f(ac.payload), false)"
  },
  {
    "id" : "87dc9114-9fc3-43ac-8d3f-cf176a116692",
    "prId" : 4312,
    "comments" : [
      {
        "id" : "dacf5c58-e1c7-4cd2-967e-642de7bfb8e4",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "just curious why polymorphic type here? There is only one type that satisfies the upper bound of: \r\n```\r\nTid <: domain.TemplateId.OptionalPkg\r\n```",
        "createdAt" : "2020-01-30T21:05:10Z",
        "updatedAt" : "2020-01-30T21:11:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a1a57c85-8a4e-4de9-9568-e40c57ae3a76",
        "parentId" : "dacf5c58-e1c7-4cd2-967e-642de7bfb8e4",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Just making the type a little more self-documenting; every element in the right set must be an element from the argument set, arbitrary constructed `TemplateId.OptionalPkg`s won't type-check.",
        "createdAt" : "2020-01-30T21:06:26Z",
        "updatedAt" : "2020-01-30T21:06:26Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "78599c17af9a135b4807e32f1657f935a368ec00",
    "line" : 7,
    "diffHunk" : "@@ -322,9 +322,9 @@ class ContractsService(\n     \\/.fromTryCatchNonFatal(LfValueCodec.apiValueToJsValue(a)).leftMap(e =>\n       Error('lfValueToJsValue, e.description))\n \n-  private def resolveTemplateIds(\n-      xs: Set[domain.TemplateId.OptionalPkg],\n-  ): (Set[domain.TemplateId.RequiredPkg], Set[domain.TemplateId.OptionalPkg]) = {\n+  private[http] def resolveTemplateIds[Tid <: domain.TemplateId.OptionalPkg]("
  },
  {
    "id" : "6e6e50df-74a4-45d1-9edf-05114a70cca5",
    "prId" : 4014,
    "comments" : [
      {
        "id" : "b2ce196b-8350-47eb-8208-45259c86a448",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    xs partitionMap {\r\n      resolveTemplateId(_) toLeftDisjunction a\r\n    }\r\n```\r\n\r\nputting this in an appropriate place in utils\r\n\r\nhttps://github.com/digital-asset/daml/blob/a32e1056397c8ce157c81d9a61746261f3c22d75/ledger-service/http-json/src/main/scala/com/digitalasset/http/WebSocketService.scala#L44-L57",
        "createdAt" : "2020-01-13T21:40:18Z",
        "updatedAt" : "2020-01-14T15:28:57Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d361ccf4-9f7f-47c2-9856-72cdfcf0c00c",
        "parentId" : "b2ce196b-8350-47eb-8208-45259c86a448",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I don't think `WebSocketService` is an appropriate place for this util. My change has nothing to do with the WebSocket.",
        "createdAt" : "2020-01-13T22:16:07Z",
        "updatedAt" : "2020-01-14T15:28:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aceb5920-2ad4-4c09-93aa-daa6dedbc197",
        "parentId" : "b2ce196b-8350-47eb-8208-45259c86a448",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It's not an appropriate place; put it wherever you think is good.",
        "createdAt" : "2020-01-13T22:21:16Z",
        "updatedAt" : "2020-01-14T15:28:57Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "53cb6f82-2854-4dcf-a3cd-2fb22329363c",
        "parentId" : "b2ce196b-8350-47eb-8208-45259c86a448",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "too much magic....\r\n```\r\nledger-service/http-json/src/main/scala/com/digitalasset/http/ContractsService.scala:315: error: value partitionMap is not a member of Set[com.digitalasset.http.domain.TemplateId.OptionalPkg]\r\n    xs.partitionMap {\r\n       ^\r\nledger-service/http-json/src/main/scala/com/digitalasset/http/ContractsService.scala:313: warning: Unused import\r\n    import ContractsService._\r\n```",
        "createdAt" : "2020-01-13T22:27:31Z",
        "updatedAt" : "2020-01-14T15:28:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8fafedf3-2b77-4d5f-9da0-b283b1ac2fc3",
        "parentId" : "b2ce196b-8350-47eb-8208-45259c86a448",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`toSeq` helped",
        "createdAt" : "2020-01-13T22:50:30Z",
        "updatedAt" : "2020-01-14T15:28:57Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "973030e8153a72b19233f41d416a8e0a2b2fb760",
    "line" : null,
    "diffHunk" : "@@ -304,6 +305,19 @@ class ContractsService(\n   private def lfValueToJsValue(a: LfValue): Error \\/ JsValue =\n     \\/.fromTryCatchNonFatal(LfValueCodec.apiValueToJsValue(a)).leftMap(e =>\n       Error('lfValueToJsValue, e.description))\n+\n+  private def resolveTemplateIds(xs: Set[domain.TemplateId.OptionalPkg])\n+    : (Set[domain.TemplateId.RequiredPkg], Set[domain.TemplateId.OptionalPkg]) = {\n+\n+    val z = (Set.empty[domain.TemplateId.RequiredPkg], Set.empty[domain.TemplateId.OptionalPkg])\n+\n+    xs.toList.foldLeft(z) { (b, a) =>"
  }
]