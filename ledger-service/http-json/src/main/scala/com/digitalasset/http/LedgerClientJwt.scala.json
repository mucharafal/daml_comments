[
  {
    "id" : "66bfc522-0406-4bc2-b543-30e024e5c49d",
    "prId" : 4991,
    "comments" : [
      {
        "id" : "e29d39da-6113-4f72-b24a-2c94816357a2",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    (jwt, identifierHint, displayName) =>\r\n      client.partyManagementClient.allocateParty(\r\n        hint = identifierHint,\r\n```",
        "createdAt" : "2020-03-13T17:00:48Z",
        "updatedAt" : "2020-03-13T17:03:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a04fc130583f8c6bf932d32e21f138380ae0ddb6",
    "line" : null,
    "diffHunk" : "@@ -104,4 +108,11 @@ object LedgerClientJwt {\n \n   def listKnownParties(client: LedgerClient): ListKnownParties =\n     jwt => client.partyManagementClient.listKnownParties(bearer(jwt))\n+\n+  def allocateParty(client: LedgerClient): AllocateParty =\n+    (jwt, identifierHing, displayName) =>\n+      client.partyManagementClient.allocateParty(\n+        hint = identifierHing,"
  },
  {
    "id" : "74fd4baf-34ad-4b73-a668-57c1d1d1adc6",
    "prId" : 4283,
    "comments" : [
      {
        "id" : "5fc614ce-e02b-4277-adad-398ab22c3472",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This comparison is appropriate for the server but not for the client; see\r\n\r\nhttps://github.com/digital-asset/daml/blob/cb465837efd2ff351a771c90b5b6bfa22956d1e2/ledger-api/grpc-definitions/com/digitalasset/ledger/api/v1/ledger_offset.proto#L17-L22\r\n\r\nIf one offset is in one format and the other in another format, make an arbitrary (but consistent) choice as to whether integer offsets are less than or greater than string-num-num triple offsets.",
        "createdAt" : "2020-01-30T15:50:27Z",
        "updatedAt" : "2020-01-30T20:09:04Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "487ee804-8424-462d-acd8-e489ef58494a",
        "parentId" : "5fc614ce-e02b-4277-adad-398ab22c3472",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "If you like, we can then Gen offsets of both varieties and test the Order laws, since no sandbox integration test will properly cover the triple case.",
        "createdAt" : "2020-01-30T15:59:53Z",
        "updatedAt" : "2020-01-30T20:09:04Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c9806323-2dc8-4d72-805c-ce9bf88eba87",
        "parentId" : "5fc614ce-e02b-4277-adad-398ab22c3472",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`Absolute` offset has `number` method:\r\n```\r\n  final case class Absolute(val value : scala.Predef.String) extends scala.AnyRef with com.digitalasset.ledger.api.v1.ledger_offset.LedgerOffset.Value with scala.Product with scala.Serializable {\r\n...\r\n      override def absolute : scala.Option[scala.Predef.String] = { /* compiled code */ }\r\n      override def number : scala.Int = { /* compiled code */ }\r\n    }\r\n```\r\nIs that guaranteed to provide proper conversion? @gerolf-da \r\n",
        "createdAt" : "2020-01-30T16:00:32Z",
        "updatedAt" : "2020-01-30T20:09:04Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ae563c4-9332-414d-bb66-f89a35275072",
        "parentId" : "5fc614ce-e02b-4277-adad-398ab22c3472",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "    // It is either a string representing an ever-increasing integer, or\r\n    // a composite string containing ``<block-hash>-<block-height>-<event-id>``; ordering\r\n    // requires comparing numerical values of the second, then the third element.\r\n\r\ndo we have a utility that can compare two offset according to the spec?",
        "createdAt" : "2020-01-30T16:30:00Z",
        "updatedAt" : "2020-01-30T20:09:04Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "753d0b58-fb61-4336-b396-e4afd14ce0e7",
        "parentId" : "5fc614ce-e02b-4277-adad-398ab22c3472",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> Is that guaranteed to provide proper conversion?\r\n\r\nNo, `number` is the index in the `oneof`.",
        "createdAt" : "2020-01-30T16:32:31Z",
        "updatedAt" : "2020-01-30T20:09:04Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f0514dfb-ca77-4966-8e1c-9631876d0945",
        "parentId" : "5fc614ce-e02b-4277-adad-398ab22c3472",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "> If you like, we can then Gen offsets of both varieties and test the Order laws, since no sandbox integration test will properly cover the triple case.\r\n\r\nyep, that is what I was planning todo, sandbox tests rely on `offset.value.toInt` `Ordering`. I am writing the implementation that would handle both `Int` and `<block-hash>-<block-height>-<event-id>`.\r\n\r\nSandbox knows that its offset is always `Int`, we don't, so yeah you are right, we need to be able to handle both formats.\r\n",
        "createdAt" : "2020-01-30T16:40:34Z",
        "updatedAt" : "2020-01-30T20:09:04Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a3156ef6-d7ed-4aea-a7ab-30d428eccc50",
        "parentId" : "5fc614ce-e02b-4277-adad-398ab22c3472",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I don't think we need to handle comparison between `Int offset` and `composite offset`. The offset format must be consistent within one ledger implementation.",
        "createdAt" : "2020-01-30T17:19:18Z",
        "updatedAt" : "2020-01-30T20:09:04Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b94141eec4dcfe9e2f4dbaf31b18c8e8c82e409b",
    "line" : null,
    "diffHunk" : "@@ -80,7 +80,21 @@ object LedgerClientJwt {\n     LedgerOffset(LedgerOffset.Value.Boundary(LedgerOffset.LedgerBoundary.LEDGER_END))\n \n   def getCreatesAndArchivesSince(client: LedgerClient): GetCreatesAndArchivesSince =\n-    (jwt, filter, offset, terminates) =>\n-      client.transactionClient\n-        .getTransactions(offset, terminates.toOffset, filter, verbose = true, token = bearer(jwt))\n+    (jwt, filter, offset, terminates) => {\n+      val end = terminates.toOffset\n+      if (skipRequest(offset, end))\n+        Source.empty[Transaction]\n+      else\n+        client.transactionClient\n+          .getTransactions(offset, terminates.toOffset, filter, verbose = true, token = bearer(jwt))\n+    }\n+\n+  private def skipRequest(start: LedgerOffset, end: Option[LedgerOffset]): Boolean =\n+    (start.value, end.map(_.value)) match {\n+      case (LedgerOffset.Value.Absolute(s), Some(LedgerOffset.Value.Absolute(e))) =>\n+        // the same comparision as in here\n+        // https://github.com/digital-asset/daml/blob/e2a5b264750dd9d96a50c8fd180a08d6f2eb0860/ledger/sandbox/src/main/scala/com/digitalasset/platform/sandbox/stores/SandboxIndexAndWriteService.scala#L275\n+        s.toLong >= e.toLong"
  }
]