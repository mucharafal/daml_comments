[
  {
    "id" : "5fc1abd3-6069-4bd5-ba4d-eb31f2a9120e",
    "prId" : 7244,
    "comments" : [
      {
        "id" : "f5887a42-5540-476d-8598-bf9c5cfc62b6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "As far as I can tell, the only difference between just using `==` (at least last I checked it was a bunch of case classes so equals does the right thing) is that you ignore additional keys in `actual` for objects. Is that intentional? If so why? If not, why don’t we use `==`?",
        "createdAt" : "2020-08-26T17:20:43Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "badb75f2-a8bd-46eb-b3a1-01e502e7370c",
        "parentId" : "f5887a42-5540-476d-8598-bf9c5cfc62b6",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "This is intentional. The goal is that the \"expected\" value is readable; there's a lot of noise otherwise.",
        "createdAt" : "2020-08-26T17:30:43Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b18a787d-507c-4ee9-a1d2-a26e20292e52",
        "parentId" : "f5887a42-5540-476d-8598-bf9c5cfc62b6",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "makes sense but probably worth adding a comment for this to make it clear that this is intentional.",
        "createdAt" : "2020-08-26T17:43:41Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d0ea0cc2-607e-4f72-9ac1-6d266389d98b",
        "parentId" : "f5887a42-5540-476d-8598-bf9c5cfc62b6",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Comment added.",
        "createdAt" : "2020-08-26T18:15:53Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ffdc23647326944307ebd81ee45f6acbaf83a0be",
    "line" : null,
    "diffHunk" : "@@ -450,7 +450,75 @@ class WebsocketServiceIntegrationTest\n       } yield resumes.foldLeft(1 shouldBe 1)((_, a) => a)\n   }\n \n-  \"fetch should should return an error if empty list of (templateId, key) pairs is passed\" in withHttpService {\n+  \"fetch multiple keys should work\" in withHttpService {\n+    (uri, encoder, _) =>\n+      def matches(expected: Seq[JsValue], actual: Seq[JsValue]): Boolean ="
  },
  {
    "id" : "8ea06ffc-0e91-4064-a219-02b4000c860b",
    "prId" : 7244,
    "comments" : [
      {
        "id" : "d8be770e-1381-45f1-b2fe-90a7e31f7894",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why are we using `Await.result` everywhere instead of chaining futures making use of the async test support in scalatest?",
        "createdAt" : "2020-08-26T17:26:52Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "414a9bd3-c807-4243-9db3-205f05762a3a",
        "parentId" : "d8be770e-1381-45f1-b2fe-90a7e31f7894",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "My brain can't handle asyncness.",
        "createdAt" : "2020-08-26T17:31:02Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2b60408c-897e-4311-8125-756eeb8d7452",
        "parentId" : "d8be770e-1381-45f1-b2fe-90a7e31f7894",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It can definitely take some getting used to but for the most part, it turns out to be fairly nice in the end and I’d like to do this properly here. Here’s the diff to remove all the `Await.result`: https://gist.github.com/cocreature/d35367153a7331dc15cca4e5ea9098f0",
        "createdAt" : "2020-08-26T18:18:25Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4ff3156c-4b2a-4bcc-84a9-ea132cc6cc4e",
        "parentId" : "d8be770e-1381-45f1-b2fe-90a7e31f7894",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Strongly disagree there's anything proper (or better) about it, but you're the boss.",
        "createdAt" : "2020-08-26T18:26:33Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dd0525a3-84d0-44d7-8283-9e01b9ea48cf",
        "parentId" : "d8be770e-1381-45f1-b2fe-90a7e31f7894",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The documentation for `Await.result` explains some of the reasons why it’s usually a bad idea https://www.scala-lang.org/api/current/scala/concurrent/Await$.html. I did run into exactly those issues in the past. Admittedly this isn’t as crucial in tests but avoiding it consistently is much less trouble than trying to make sure that it’s safe in a particular instance. So especially if the async version is hardly any longer or more complex like in this case, I’d like to choose that one.",
        "createdAt" : "2020-08-26T18:30:10Z",
        "updatedAt" : "2020-08-26T18:39:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ffdc23647326944307ebd81ee45f6acbaf83a0be",
    "line" : null,
    "diffHunk" : "@@ -450,6 +450,80 @@ class WebsocketServiceIntegrationTest\n       } yield resumes.foldLeft(1 shouldBe 1)((_, a) => a)\n   }\n \n+  \"fetch multiple keys should work\" in withHttpService { (uri, encoder, _) =>\n+    def matches(expected: Seq[JsValue], actual: Seq[JsValue]): Boolean =\n+      expected.length == actual.length && (expected, actual).zipped.forall {\n+        case (exp, act) => matchesJs(exp, act)\n+      }\n+    def matchesJs(expected: spray.json.JsValue, actual: spray.json.JsValue): Boolean = {\n+      import spray.json._\n+      (expected, actual) match {\n+        case (JsArray(expected), JsArray(actual)) =>\n+          expected.length == actual.length && matches(expected, actual)\n+        case (JsObject(expected), JsObject(actual)) =>\n+          expected.keys.forall(k => matchesJs(expected(k), actual(k)))\n+        case (JsString(expected), JsString(actual)) => expected == actual\n+        case (JsNumber(expected), JsNumber(actual)) => expected == actual\n+        case (JsBoolean(expected), JsBoolean(actual)) => expected == actual\n+        case (JsNull, JsNull) => true\n+        case _ => false\n+      }\n+    }\n+    def waitFor[A](f: Future[A]): A = {\n+      import scala.language.postfixOps\n+      Await.result(f, 10 seconds)\n+    }\n+    def create(account: String): domain.ContractId = {\n+      val r = waitFor(\n+        postCreateCommand(accountCreateCommand(domain.Party(\"Alice\"), account), encoder, uri))\n+      assert(r._1.isSuccess)\n+      getContractId(getResult(r._2))\n+    }\n+    def archive(id: domain.ContractId): Unit = {\n+      val r =\n+        waitFor(postArchiveCommand(domain.TemplateId(None, \"Account\", \"Account\"), id, encoder, uri))\n+      val _ = assert(r._1.isSuccess)\n+    }\n+    val req =\n+      \"\"\"\n+          |[{\"templateId\": \"Account:Account\", \"key\": [\"Alice\", \"abc123\"]},\n+          | {\"templateId\": \"Account:Account\", \"key\": [\"Alice\", \"def456\"]}]\n+          |\"\"\".stripMargin\n+    val futureResults =\n+      singleClientFetchStream(jwt, uri, req).via(parseResp).runWith(Sink.seq[JsValue])\n+\n+    val cid1 = create(\"abc123\")"
  },
  {
    "id" : "82080e9f-f77c-49de-afce-5f57f0a2bb04",
    "prId" : 7244,
    "comments" : [
      {
        "id" : "557bf606-87e9-47c3-b4d5-2735b7be9ca2",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "~~@garyverhaegen-da are you sure this test works? I see a space before `[]` which should NOT be there... In any case I don't like tests relying on formatted JSON strings.~~\r\n\r\nscratch it, I missed the fact that you are calling `parseJson` on the strings. All good! Thanks!\r\n\r\n",
        "createdAt" : "2020-09-01T16:54:18Z",
        "updatedAt" : "2020-09-01T16:58:22Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ffdc23647326944307ebd81ee45f6acbaf83a0be",
    "line" : 60,
    "diffHunk" : "@@ -450,6 +450,83 @@ class WebsocketServiceIntegrationTest\n       } yield resumes.foldLeft(1 shouldBe 1)((_, a) => a)\n   }\n \n+  \"fetch multiple keys should work\" in withHttpService { (uri, encoder, _) =>\n+    def matches(expected: Seq[JsValue], actual: Seq[JsValue]): Boolean =\n+      expected.length == actual.length && (expected, actual).zipped.forall {\n+        case (exp, act) => matchesJs(exp, act)\n+      }\n+    // matches if all the values specified in expected appear with the same\n+    // value in actual; actual is allowed to have extra fields. Arrays must\n+    // have the same length.\n+    def matchesJs(expected: spray.json.JsValue, actual: spray.json.JsValue): Boolean = {\n+      import spray.json._\n+      (expected, actual) match {\n+        case (JsArray(expected), JsArray(actual)) =>\n+          expected.length == actual.length && matches(expected, actual)\n+        case (JsObject(expected), JsObject(actual)) =>\n+          expected.keys.forall(k => matchesJs(expected(k), actual(k)))\n+        case (JsString(expected), JsString(actual)) => expected == actual\n+        case (JsNumber(expected), JsNumber(actual)) => expected == actual\n+        case (JsBoolean(expected), JsBoolean(actual)) => expected == actual\n+        case (JsNull, JsNull) => true\n+        case _ => false\n+      }\n+    }\n+    def create(account: String): Future[domain.ContractId] =\n+      for {\n+        r <- postCreateCommand(accountCreateCommand(domain.Party(\"Alice\"), account), encoder, uri)\n+      } yield {\n+        assert(r._1.isSuccess)\n+        getContractId(getResult(r._2))\n+      }\n+    def archive(id: domain.ContractId): Future[Assertion] =\n+      for {\n+        r <- postArchiveCommand(domain.TemplateId(None, \"Account\", \"Account\"), id, encoder, uri)\n+      } yield {\n+        assert(r._1.isSuccess)\n+      }\n+    val req =\n+      \"\"\"\n+          |[{\"templateId\": \"Account:Account\", \"key\": [\"Alice\", \"abc123\"]},\n+          | {\"templateId\": \"Account:Account\", \"key\": [\"Alice\", \"def456\"]}]\n+          |\"\"\".stripMargin\n+    val futureResults =\n+      singleClientFetchStream(jwt, uri, req).via(parseResp).runWith(Sink.seq[JsValue])\n+\n+    for {\n+      cid1 <- create(\"abc123\")\n+      _ <- create(\"abc124\")\n+      _ <- create(\"abc125\")\n+      cid2 <- create(\"def456\")\n+      _ <- archive(cid2)\n+      _ <- archive(cid1)\n+      results <- futureResults\n+    } yield {\n+      val expected: Seq[JsValue] = {\n+        import spray.json._\n+        Seq(\n+          \"\"\"\n+            |{\"events\": []}"
  },
  {
    "id" : "8907105d-0ec9-44eb-8381-25a47ff1b9f4",
    "prId" : 6569,
    "comments" : [
      {
        "id" : "997822b7-4566-485b-88b4-5ad6ab7067b4",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "what is the differnces `fst @ _` vs `fst`. I don't see `fst` used in the scope of this pattern match, can it be:\r\n```\r\ncase (Vector((fstId, _), (sndId, _)), Vector(observeConsumed), Some(_))\r\n```",
        "createdAt" : "2020-07-02T13:40:59Z",
        "updatedAt" : "2020-07-02T13:41:18Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "04a7c57999f34bb73958b71a0030ed1b70eddf7b",
    "line" : 13,
    "diffHunk" : "@@ -408,7 +409,7 @@ class WebsocketServiceIntegrationTest\n           via parseResp runWith remainingDeltas)\n       } yield\n         inside(rescan) {\n-          case (Vector((fstId, fst), (sndId, snd)), Vector(observeConsumed), Some(_)) =>\n+          case (Vector((fstId, fst @ _), (sndId, snd @ _)), Vector(observeConsumed), Some(_)) =>"
  }
]