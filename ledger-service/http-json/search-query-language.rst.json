[
  {
    "id" : "4da21283-5ce2-4db7-a04b-23711a14647c",
    "prId" : 2826,
    "comments" : [
      {
        "id" : "4ccc7b02-2f04-4898-805b-646b77f3c82f",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Just thinking about this... Maybe `%templates` should NOT be an `Array`? In this case if typecheck fails, it will be clear what `Template` it failed for. I bet we can improve the error reporting and maybe it already provides all required information, but it just looks strange to me that we may return totally unrelated types in one result set.",
        "createdAt" : "2019-09-20T13:31:48Z",
        "updatedAt" : "2019-09-23T19:38:21Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "773c1047-42e5-4ab2-a7a6-7d836329975a",
        "parentId" : "4ccc7b02-2f04-4898-805b-646b77f3c82f",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "If it helps, you can think of the result type as a list of values of variant type, where the variant data constructor is a template ID rather than a string or int. If it does not help, well, we can reconsider elsewhere.",
        "createdAt" : "2019-09-20T18:06:24Z",
        "updatedAt" : "2019-09-23T19:38:21Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "078ec69a5240afdc0f2e7a5ee0646566cc902378",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@(e.g. template IDs). As #2777 implies, for example::\n\n  {\"%templates\": [{\"moduleName\": \"Foo\", \"entityName\": \"A\"},\n                  {\"moduleName\": \"Foo\", \"entityName\": \"B\"},\n                  {\"moduleName\": \"Foo\", \"entityName\": \"C\"}],"
  },
  {
    "id" : "9c2bd21d-9a97-4f3a-8b49-e904859ae33f",
    "prId" : 2826,
    "comments" : [
      {
        "id" : "95f6781a-d2d6-4945-a263-8293ae379f91",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Can you add an example here?",
        "createdAt" : "2019-09-20T13:35:19Z",
        "updatedAt" : "2019-09-23T19:38:21Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6388ded-5983-4937-b2e5-414624cc06fc",
        "parentId" : "95f6781a-d2d6-4945-a263-8293ae379f91",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "No, because\r\n\r\n1. this is a statement that _no example of x exists_, and\r\n2. to exemplify indirectly (e.g. by saying \"this is always left, and this is always right\", though I am skeptical of the value of such an inclusion) would require the full definition of comparison queries as meaningful context, which does not belong in this document until #2780.",
        "createdAt" : "2019-09-20T18:08:37Z",
        "updatedAt" : "2019-09-23T19:38:21Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "078ec69a5240afdc0f2e7a5ee0646566cc902378",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@A JSON object, when considered with a record type, is always interpreted\nas a field equality query. Its type context is thus mutually exclusive\nwith `the forthcoming comparison queries\n<https://github.com/digital-asset/daml/issues/2780>`_.\n"
  }
]