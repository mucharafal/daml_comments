[
  {
    "id" : "2b7a4cb9-fc8c-4fde-876e-251ed06cee56",
    "prId" : 3526,
    "comments" : [
      {
        "id" : "753dc4ba-bf4d-4e7d-8e44-f5902bdb6b71",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This could already use the `JwksVerifier`, right?",
        "createdAt" : "2019-11-19T14:16:12Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "954b5743-ad1c-4d11-8032-1d3960ac4bf4",
        "parentId" : "753dc4ba-bf4d-4e7d-8e44-f5902bdb6b71",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Method removed, users can use `JwksVerifier.apply`",
        "createdAt" : "2019-11-20T07:41:29Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "05954a0b4045904a799d2c604ce9a266692d6a07",
    "line" : null,
    "diffHunk" : "@@ -44,12 +52,47 @@ object HMAC256Verifier extends StrictLogging {\n   def apply(secret: String): Error \\/ JwtVerifier =\n     \\/.fromTryCatchNonFatal {\n       logger.warn(\n-        \"HMAC256 JWT Validator is NOT recommended for production env, please use RSA256 (WIP)!!!\")\n+        \"HMAC256 JWT Validator is NOT recommended for production environments, please use RSA256!!!\")\n \n       val algorithm = Algorithm.HMAC256(secret)\n       val verifier = JWT.require(algorithm).build()\n       new JwtVerifier(verifier)\n     }.leftMap(e => Error('HMAC256, e.getMessage))\n }\n \n-// TODO(Leo) RSA256 validator\n+// RSA256 validator factory\n+object RSA256Verifier extends StrictLogging {\n+  def apply(publicKey: RSAPublicKey): Error \\/ JwtVerifier =\n+    \\/.fromTryCatchNonFatal {\n+\n+      val algorithm = Algorithm.RSA256(publicKey, null)\n+      val verifier = JWT.require(algorithm).build()\n+      new JwtVerifier(verifier)\n+    }.leftMap(e => Error('RSA256, e.getMessage))\n+\n+  def apply(keyProvider: RSAKeyProvider): Error \\/ JwtVerifier =\n+    \\/.fromTryCatchNonFatal {\n+\n+      val algorithm = Algorithm.RSA256(keyProvider)\n+      val verifier = JWT.require(algorithm).build()\n+      new JwtVerifier(verifier)\n+    }.leftMap(e => Error('RSA256, e.getMessage))\n+\n+  /**\n+    * Create a RSA256 validator with the key loaded from the given file.\n+    * The file is assumed to be a X509 encoded RSA public key in a PEM container.\n+    */\n+  def fromX509PemFile(path: String): Error \\/ JwtVerifier = {\n+    for {\n+      rsaKey <- \\/.fromEither(\n+        KeyUtils\n+          .readRSAPublicKeyFromCrt(new File(path))\n+          .toEither)\n+        .leftMap(e => Error('fromX509PemFile, e.getMessage))\n+      verfier <- RSA256Verifier.apply(rsaKey)\n+    } yield verfier\n+  }\n+\n+  /** Create a RSA256 validator with the key loaded from the given JWK server */\n+  def fromJwk(url: String): Error \\/ JwtVerifier = ???"
  },
  {
    "id" : "d1a647fa-58ff-4328-b3d5-681ad1812086",
    "prId" : 3526,
    "comments" : [
      {
        "id" : "a4cc0476-0b1d-4824-8f9a-9c5668097dbb",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "right here before calling `build`, I thought you need to ask it to check for expiration with `acceptExpiresAt` or something else... might be wrong. Looked at the docs more than 4 months ago.",
        "createdAt" : "2019-11-20T15:44:25Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "10824903-e592-4574-912f-8c85e71ce411",
        "parentId" : "a4cc0476-0b1d-4824-8f9a-9c5668097dbb",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "As per our conversation on slack, we explicitly check expiration ourselves in gRPC requests and their streaming responses.",
        "createdAt" : "2019-11-21T09:50:52Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "05954a0b4045904a799d2c604ce9a266692d6a07",
    "line" : 53,
    "diffHunk" : "@@ -44,12 +52,45 @@ object HMAC256Verifier extends StrictLogging {\n   def apply(secret: String): Error \\/ JwtVerifier =\n     \\/.fromTryCatchNonFatal {\n       logger.warn(\n-        \"HMAC256 JWT Validator is NOT recommended for production env, please use RSA256 (WIP)!!!\")\n+        \"HMAC256 JWT Validator is NOT recommended for production environments, please use RSA256!!!\")\n \n       val algorithm = Algorithm.HMAC256(secret)\n       val verifier = JWT.require(algorithm).build()\n       new JwtVerifier(verifier)\n     }.leftMap(e => Error('HMAC256, e.getMessage))\n }\n \n-// TODO(Leo) RSA256 validator\n+// RSA256 validator factory\n+object RSA256Verifier extends StrictLogging {\n+  def apply(publicKey: RSAPublicKey): Error \\/ JwtVerifier =\n+    \\/.fromTryCatchNonFatal {\n+\n+      val algorithm = Algorithm.RSA256(publicKey, null)\n+      val verifier = JWT.require(algorithm).build()\n+      new JwtVerifier(verifier)\n+    }.leftMap(e => Error('RSA256, e.getMessage))\n+\n+  def apply(keyProvider: RSAKeyProvider): Error \\/ JwtVerifier =\n+    \\/.fromTryCatchNonFatal {\n+\n+      val algorithm = Algorithm.RSA256(keyProvider)\n+      val verifier = JWT.require(algorithm).build()"
  }
]