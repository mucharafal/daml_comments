[
  {
    "id" : "09494fff-a024-4ef8-9655-f370b97a5a40",
    "prId" : 3953,
    "comments" : [
      {
        "id" : "27105197-6ddb-432d-bcb2-dfb6f68dbe11",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This function is identical to the above `readRSAPublicKeyFromCrt`, except for the final type cast. Could the common implementation be factored out?",
        "createdAt" : "2020-01-07T11:10:16Z",
        "updatedAt" : "2020-01-08T17:32:49Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f0d5c425-88d3-4f47-96d7-e402b9285939",
        "parentId" : "27105197-6ddb-432d-bcb2-dfb6f68dbe11",
        "author" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "body" : "Yes i tried to do this but got stuck in handling the Try wrapped in \\/ from the calling code.  I will do a removal of some duplication as a follow-up PR, if that sounds okay?",
        "createdAt" : "2020-01-08T02:35:35Z",
        "updatedAt" : "2020-01-08T17:32:49Z",
        "lastEditedBy" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92dae860832d93cc5bd64273b897a7c169a46095",
    "line" : 17,
    "diffHunk" : "@@ -42,6 +42,21 @@ object KeyUtils {\n     }\n   }\n \n+  /**\n+    * Reads an EC public key from a X509 encoded file.\n+    * These usually have the .crt file extension.\n+    */\n+  def readECPublicKeyFromCrt(file: File): Try[ECPublicKey] = {"
  },
  {
    "id" : "e5af5366-0d6b-4a36-b584-d6065939d9d9",
    "prId" : 3526,
    "comments" : [
      {
        "id" : "049f5a32-09c0-45dd-a651-b1654499e3ed",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Not sure how often this method is called. If often, we should cache the `KeyFactory` instance? `getInstnace` creates a new object every time it is called.\r\n",
        "createdAt" : "2019-11-19T21:32:47Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4edb4937-5bd1-4b5c-b25c-848b208dca85",
        "parentId" : "049f5a32-09c0-45dd-a651-b1654499e3ed",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "It's called whenever an RSA key needs to be loaded from a file, which is usually once per application life time.",
        "createdAt" : "2019-11-20T14:57:27Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "05954a0b4045904a799d2c604ce9a266692d6a07",
    "line" : 72,
    "diffHunk" : "@@ -0,0 +1,124 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.jwt\n+\n+import java.io.{File, FileInputStream}\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.Files\n+import java.security.cert.CertificateFactory\n+import java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\n+import java.security.spec.PKCS8EncodedKeySpec\n+import java.security.KeyFactory\n+\n+import com.digitalasset.daml.lf.data.TryOps.Bracket.bracket\n+import scalaz.Show\n+import scalaz.syntax.show._\n+\n+import scala.util.Try\n+\n+object KeyUtils {\n+  final case class Error(what: Symbol, message: String)\n+\n+  object Error {\n+    implicit val showInstance: Show[Error] =\n+      Show.shows(e => s\"PemUtils.Error: ${e.what}, ${e.message}\")\n+  }\n+\n+  private val mimeCharSet = StandardCharsets.ISO_8859_1\n+\n+  /**\n+    * Reads an RSA public key from a X509 encoded file.\n+    * These usually have the .crt file extension.\n+    */\n+  def readRSAPublicKeyFromCrt(file: File): Try[RSAPublicKey] = {\n+    bracket(Try(new FileInputStream(file)))(is => Try(is.close())).flatMap { istream =>\n+      Try(\n+        CertificateFactory\n+          .getInstance(\"X.509\")\n+          .generateCertificate(istream)\n+          .getPublicKey\n+          .asInstanceOf[RSAPublicKey])\n+    }\n+  }\n+\n+  /**\n+    * Reads a RSA private key from a PEM/PKCS#8 file.\n+    * These usually have the .pem file extension.\n+    */\n+  def readRSAPrivateKeyFromPem(file: File): Try[RSAPrivateKey] = {\n+    bracket(Try(new FileInputStream(file)))(is => Try(is.close())).flatMap { istream =>\n+      for {\n+        fileContent <- Try(Files.readAllBytes(file.toPath))\n+\n+        // Remove PEM container header and footer\n+        pemContent <- Try(\n+          new String(fileContent, mimeCharSet)\n+            .replaceFirst(\"-----BEGIN ([A-Z ])*-----\\n\", \"\")\n+            .replaceFirst(\"\\n-----END ([A-Z ])*-----\\n\", \"\")\n+            .replace(\"\\r\", \"\")\n+            .replace(\"\\n\", \"\")\n+        )\n+\n+        // Base64-decode the PEM container content\n+        decoded <- Base64\n+          .decode(pemContent)\n+          .leftMap(e => new RuntimeException(e.shows))\n+          .toEither\n+          .toTry\n+\n+        // Interpret the container content as PKCS#8\n+        key <- Try {\n+          val kf = KeyFactory.getInstance(\"RSA\")"
  }
]