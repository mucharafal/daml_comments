[
  {
    "id" : "7db55966-7785-4ee5-8de4-fc48cdd52f23",
    "prId" : 7571,
    "comments" : [
      {
        "id" : "196a51a4-12e8-4c41-8123-95db5e5a412c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "We are also relying on the compare-and-swap properties of the original implementation using `lastOffset0`; hence the last_offset check in the update branch and the update count check in the caller (which no longer performs this function). It may be sufficient to ensure that the conflict update sets the new offset only if it is greater than the offset in the table, but that is only true if the update count does not increment in such a case.",
        "createdAt" : "2020-10-05T17:52:50Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7101e3d0-c978-4190-9d1e-e16c046c4724",
        "parentId" : "196a51a4-12e8-4c41-8123-95db5e5a412c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That’s a very good point! I made a brief attempt to fix it by only updating if the new offset is larger but that breaks things since it is valid for not all offsets to be updated but the check in this case will fail since only some rows get updated.\r\n\r\nThe only way to fix this properly that is something like the following:\r\n\r\n1. At the beginning read all offsets rather than just the minimum.\r\n2. Stream from the minimum like we do here. (Alternatively, we could use multiple streams which can be benefitial if one party is lagging behind a lot while the others are almost at the end, but I wouldn’t bother with this for now).\r\n3. Update all offsets compare-and-swap style. If the old value (including non-existent old values) for any of the parties is different error out.",
        "createdAt" : "2020-10-06T11:05:57Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bde80a9a-5944-4b71-8356-2ea89a95f13f",
        "parentId" : "196a51a4-12e8-4c41-8123-95db5e5a412c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I believe https://github.com/digital-asset/daml/pull/7571/commits/606f12e814e00d53c59344cd97ae30eb2544552a fixes this properly.",
        "createdAt" : "2020-10-07T10:17:50Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e66fea1a-ff03-4476-9a88-14817557edf5",
        "parentId" : "196a51a4-12e8-4c41-8123-95db5e5a412c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Looks good to me.",
        "createdAt" : "2020-10-07T16:45:12Z",
        "updatedAt" : "2020-10-08T11:09:12Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6489aaa0d5262d62016575dbcf3ca97582f3a81b",
    "line" : null,
    "diffHunk" : "@@ -144,16 +149,15 @@ object Queries {\n     * If A inserts but B updates, the transactions are sufficiently serialized that\n     * there are no logical conflicts.\n     */\n-  private[http] def updateOffset(\n-      party: String,\n+  private[http] def updateOffset[F[_]: cats.Foldable: Functor](\n+      parties: F[String],\n       tpid: SurrogateTpId,\n-      newOffset: String,\n-      lastOffsetO: Option[String])(implicit log: LogHandler): ConnectionIO[Int] =\n-    lastOffsetO.cata(\n-      lastOffset =>\n-        sql\"\"\"UPDATE ledger_offset SET last_offset = $newOffset where party = $party AND tpid = $tpid AND last_offset = $lastOffset\"\"\".update.run,\n-      sql\"\"\"INSERT INTO ledger_offset VALUES ($party, $tpid, $newOffset)\"\"\".update.run\n-    )\n+      newOffset: String)(implicit log: LogHandler): ConnectionIO[Int] = {\n+    val upd = Update[(String, SurrogateTpId, String)](\n+      \"\"\"INSERT INTO ledger_offset VALUES(?, ?, ?) ON CONFLICT (party, tpid) DO UPDATE SET last_offset = EXCLUDED.last_offset\"\"\",\n+      logHandler0 = log)\n+    upd.updateMany(parties.map(p => (p, tpid, newOffset)))\n+  }"
  },
  {
    "id" : "a428ff37-321f-42b9-81d3-ced3fe2b9554",
    "prId" : 3461,
    "comments" : [
      {
        "id" : "6ab211e7-ab6a-4683-b848-ab425f3246ff",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Not really sure what warning we are trying to silence.",
        "createdAt" : "2019-11-18T20:29:54Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0912f6fb-a920-4190-ae15-4d455bcefffe",
        "parentId" : "6ab211e7-ab6a-4683-b848-ab425f3246ff",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Unused parameter `pas`.",
        "createdAt" : "2019-11-19T17:29:35Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "12c85def934039b766819823a7e2cf75c123b044",
    "line" : 59,
    "diffHunk" : "@@ -121,20 +141,18 @@ object Queries {\n       sql\"\"\"INSERT INTO ledger_offset VALUES ($party, $tpid, $newOffset)\"\"\".update.run\n     )\n \n-  def insertContracts[F[_]: cats.Foldable: Functor, CA: JsonWriter, WP: JsonWriter](\n-      dbcs: F[DBContract[SurrogateTpId, CA, WP]])(implicit log: LogHandler): ConnectionIO[Int] =\n-    Update[DBContract[SurrogateTpId, JsValue, JsValue]](\n+  @silent // pas is demonstrably used; try taking it out"
  },
  {
    "id" : "29945dfe-a44a-4a33-bc31-6663dc1c7238",
    "prId" : 3461,
    "comments" : [
      {
        "id" : "e0ce56df-bbee-467d-a0f3-36f28c506242",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "is that something WIP?\r\nwhat do you plan to do with a contract that does not contain `templateId` value? It's type arg is `Unit`.",
        "createdAt" : "2019-11-18T20:35:17Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f80a10bf-9a28-4dc7-b9d0-7e91fdd32cc8",
        "parentId" : "e0ce56df-bbee-467d-a0f3-36f28c506242",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "actually thinking about it... we can look up `templateId` by `contractId`, but why bother if we can fetch it from DB. Just trying to understand what is the use case for this function, don't think it is being used anywhere.",
        "createdAt" : "2019-11-18T20:38:29Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c2cf8c8f-8f31-46dd-bb35-a13c77c7bcb1",
        "parentId" : "e0ce56df-bbee-467d-a0f3-36f28c506242",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> don't think it is being used anywhere\r\n\r\nIt's not and won't in this PR; it will be used for #3388.\r\n\r\n> what do you plan to do with a contract that does not contain templateId value?\r\n\r\nThe use of `Unit` here represents the fact that nothing useful can be put in that slot. Logically, the template ID is always the template ID that was passed as the `tpid` argument, but `tpid.type` will stop compiling at some point in the future, so I don't want to give the false impression that any template IDs are being \"looked up\". The caller can insert the `tpid` afterwards if they want by `copy`, but I suspect that will never be useful in practice.",
        "createdAt" : "2019-11-19T17:35:59Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "12c85def934039b766819823a7e2cf75c123b044",
    "line" : 89,
    "diffHunk" : "@@ -163,13 +181,15 @@ object Queries {\n   }\n \n   private[http] def selectContracts(\n+      party: String,\n       tpid: SurrogateTpId,\n-      predicate: Fragment): Query0[DBContract[SurrogateTpId, JsValue, JsValue]] = {\n-    val q = sql\"\"\"SELECT (contract_id, create_arguments, witness_parties)\n+      predicate: Fragment): Query0[DBContract[Unit, JsValue, Unit]] = {"
  }
]