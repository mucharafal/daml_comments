[
  {
    "id" : "6532a79e-f6b7-436d-84cd-cb38774d2ae9",
    "prId" : 6111,
    "comments" : [
      {
        "id" : "51312e59-c193-4f04-8fbe-91e02e3d1929",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Why is it needed?",
        "createdAt" : "2020-05-27T10:24:32Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94f74651-e8d0-4f7c-8cb6-0dd4255bf69f",
        "parentId" : "51312e59-c193-4f04-8fbe-91e02e3d1929",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I have been trying to fix the tests, this change is not required.",
        "createdAt" : "2020-05-27T14:22:37Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4eaa7219a57e7cae32f14958b2c32423ade3c9d3",
    "line" : null,
    "diffHunk" : "@@ -26,7 +24,7 @@ class InMemoryBatchedLedgerReaderWriterIntegrationSpec(enableBatching: Boolean =\n   private val batchingLedgerWriterConfig =\n     BatchingLedgerWriterConfig(\n       enableBatching = enableBatching,\n-      maxBatchQueueSize = 100,\n+      maxBatchQueueSize = 1000,"
  },
  {
    "id" : "06a741db-6fe0-4dda-97cc-38100d2c980a",
    "prId" : 6004,
    "comments" : [
      {
        "id" : "da87e9a2-c457-4e5f-bb36-333243839515",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Was `enableBatching` meant to be overridable? Else it doesn't make much sense to have it.",
        "createdAt" : "2020-05-22T15:07:11Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f54a4bf0-604e-4f5d-8166-088e64eefecb",
        "parentId" : "da87e9a2-c457-4e5f-bb36-333243839515",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Added it's counterpart so now it's overridable.",
        "createdAt" : "2020-05-25T09:24:45Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.on.memory\n+\n+import com.daml.ledger.participant.state.kvutils.ParticipantStateIntegrationSpecBase\n+import com.daml.ledger.participant.state.kvutils.ParticipantStateIntegrationSpecBase.ParticipantState\n+import com.daml.ledger.participant.state.kvutils.api.{\n+  BatchingLedgerWriter,\n+  BatchingLedgerWriterConfig,\n+  BatchingQueueFactory,\n+  KeyValueParticipantState\n+}\n+import com.daml.ledger.participant.state.v1.{LedgerId, ParticipantId}\n+import com.daml.lf.engine.Engine\n+import com.daml.logging.LoggingContext\n+import com.daml.metrics.Metrics\n+import com.daml.resources.ResourceOwner\n+\n+import scala.concurrent.duration._\n+\n+class InMemoryBatchedLedgerReaderWriterIntegrationSpec\n+    extends ParticipantStateIntegrationSpecBase(\n+      \"In-memory ledger/participant with parallel validation\") {\n+  private val enableBatching = true\n+  private val batchingLedgerWriterConfig =\n+    BatchingLedgerWriterConfig(\n+      enableBatching = enableBatching,\n+      // In case of serial validation, we need a queue length of 1000 because the\n+      // \"process many party allocations\" test case will be sending in that many requests at once\n+      // (otherwise some of those would be rejected).\n+      // See [[ParticipantStateIntegrationSpecBase]].\n+      maxBatchQueueSize = if (enableBatching) 100 else 1000,"
  }
]