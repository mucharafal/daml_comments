[
  {
    "id" : "6ce37ac3-4347-4cbb-bf50-54cd5d353267",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "66553515-088c-4df4-a238-6b4cee5a9d9f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "How is this configuration read? If it's somehow parsed from a configuration file and/or CLI, could this check be moved to the parser?",
        "createdAt" : "2020-01-22T12:38:31Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "479fa916-7791-43a7-b39d-ee6621b3491f",
        "parentId" : "66553515-088c-4df4-a238-6b4cee5a9d9f",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "It is in the parser, 10 lines up.",
        "createdAt" : "2020-01-22T13:41:25Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ebbb61c5-1ab6-41e6-8443-502698bb47bf",
        "parentId" : "66553515-088c-4df4-a238-6b4cee5a9d9f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "My bad, it didn't appear in the diff.",
        "createdAt" : "2020-01-22T14:18:50Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : 18,
    "diffHunk" : "@@ -34,17 +34,20 @@ object Main extends App {\n       ()\n     }\n \n-    override def apply(participantId: ParticipantId, config: ExtraConfig)(\n+    override def apply(ledgerId: LedgerId, participantId: ParticipantId, config: ExtraConfig)(\n         implicit materializer: Materializer,\n-    ): KeyValueLedger =\n+    ): KeyValueLedger = {\n+      val root = config.root.getOrElse {"
  },
  {
    "id" : "7c33f345-c067-47dd-8527-af43d0448234",
    "prId" : 3933,
    "comments" : [
      {
        "id" : "6992947c-cfc8-4abe-942e-7c3d2dbb4c7d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "\"... to store data on the ledger.\" may be a more appropriate description.",
        "createdAt" : "2020-01-08T10:55:48Z",
        "updatedAt" : "2020-01-15T13:38:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5a57a173-d5e6-4eb7-91fa-e997c0f2d121",
        "parentId" : "6992947c-cfc8-4abe-942e-7c3d2dbb4c7d",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Not sure that's better; we're not storing on any ledger, the file system _is_ the ledger.",
        "createdAt" : "2020-01-14T15:45:41Z",
        "updatedAt" : "2020-01-15T13:38:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a2e881199f655c2e74b34179de146b04e16081e2",
    "line" : 44,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.on.filesystem.posix\n+\n+import java.io.File\n+import java.nio.file.Path\n+\n+import com.daml.ledger.participant.state.kvutils.app.{Config, Runner}\n+import scopt.OptionParser\n+\n+import scala.concurrent.Await\n+import scala.concurrent.ExecutionContext.Implicits.global\n+import scala.concurrent.duration.DurationInt\n+\n+object Main extends App {\n+  Runner(\n+    \"File System Ledger\",\n+    ExtraConfig.augmentParser,\n+    ExtraConfig.default,\n+    (participantId, config: ExtraConfig) =>\n+      Await.result(\n+        FileSystemLedgerReaderWriter(\n+          participantId = participantId,\n+          root = config.root.getOrElse {\n+            throw new IllegalStateException(\"No root directory provided.\")\n+          },\n+        ),\n+        10.seconds\n+    )\n+  ).run(args)\n+\n+  case class ExtraConfig(root: Option[Path])\n+\n+  object ExtraConfig {\n+    val default: ExtraConfig = ExtraConfig(\n+      root = None,\n+    )\n+\n+    def augmentParser(parser: OptionParser[Config[ExtraConfig]]): Unit = {\n+      parser\n+        .opt[File](\"directory\")\n+        .required()\n+        .text(\"The root directory in which to store the ledger.\")"
  }
]