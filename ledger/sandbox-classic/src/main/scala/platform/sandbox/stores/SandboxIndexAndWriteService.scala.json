[
  {
    "id" : "83e21734-b100-401f-a820-b85c36e2e6a8",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "43f219ea-d33d-474f-a282-5700385d1753",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'd also appreciate it if `Option[A]` was valid, and serialized to `null` in the case of a `None`.",
        "createdAt" : "2020-07-31T09:50:14Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "50e7541e-0ba6-4074-8587-c65bb1004b04",
        "parentId" : "43f219ea-d33d-474f-a282-5700385d1753",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'll do what I have done in other places and encapsulate this into into a method. The longer-term proper solution is design and implement a way to introduce more sophisticated types in how we use structured logging.",
        "createdAt" : "2020-07-31T11:05:24Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : 78,
    "diffHunk" : "@@ -168,22 +179,42 @@ object SandboxIndexAndWriteService {\n   }\n }\n \n-class LedgerBackedWriteService(ledger: Ledger, timeProvider: TimeProvider) extends WriteService {\n+final class LedgerBackedWriteService(ledger: Ledger, timeProvider: TimeProvider)(\n+    implicit loggingContext: LoggingContext,\n+) extends WriteService {\n \n   override def currentHealth(): HealthStatus = ledger.currentHealth()\n \n   override def submitTransaction(\n       submitterInfo: ParticipantState.SubmitterInfo,\n       transactionMeta: ParticipantState.TransactionMeta,\n-      transaction: SubmittedTransaction): CompletionStage[ParticipantState.SubmissionResult] =\n-    FutureConverters.toJava(ledger.publishTransaction(submitterInfo, transactionMeta, transaction))\n+      transaction: SubmittedTransaction,\n+  ): CompletionStage[ParticipantState.SubmissionResult] =\n+    withEnrichedLoggingContext(\n+      \"submitter\" -> submitterInfo.submitter,\n+      \"applicationId\" -> submitterInfo.applicationId,\n+      \"commandId\" -> submitterInfo.commandId,\n+      \"deduplicateUntil\" -> submitterInfo.deduplicateUntil.toString,\n+      \"submissionTime\" -> transactionMeta.submissionTime.toInstant.toString,\n+      \"workflowId\" -> transactionMeta.workflowId.getOrElse(\"\"),"
  },
  {
    "id" : "e66931f2-3468-4f79-9119-5c5ef6cb2b39",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "d651f257-c757-402b-a68d-91bd0bb727c0",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "And for that matter, `Instant`.",
        "createdAt" : "2020-07-31T09:50:34Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3e12ffca-02a0-4f26-886c-f243bf13af48",
        "parentId" : "d651f257-c757-402b-a68d-91bd0bb727c0",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I agree.",
        "createdAt" : "2020-07-31T11:05:43Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d24047d8-51af-45bf-a3fd-2b4fffb07d44",
        "parentId" : "d651f257-c757-402b-a68d-91bd0bb727c0",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Created https://github.com/digital-asset/daml/issues/6945",
        "createdAt" : "2020-07-31T12:24:33Z",
        "updatedAt" : "2020-07-31T12:24:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : 77,
    "diffHunk" : "@@ -168,22 +179,42 @@ object SandboxIndexAndWriteService {\n   }\n }\n \n-class LedgerBackedWriteService(ledger: Ledger, timeProvider: TimeProvider) extends WriteService {\n+final class LedgerBackedWriteService(ledger: Ledger, timeProvider: TimeProvider)(\n+    implicit loggingContext: LoggingContext,\n+) extends WriteService {\n \n   override def currentHealth(): HealthStatus = ledger.currentHealth()\n \n   override def submitTransaction(\n       submitterInfo: ParticipantState.SubmitterInfo,\n       transactionMeta: ParticipantState.TransactionMeta,\n-      transaction: SubmittedTransaction): CompletionStage[ParticipantState.SubmissionResult] =\n-    FutureConverters.toJava(ledger.publishTransaction(submitterInfo, transactionMeta, transaction))\n+      transaction: SubmittedTransaction,\n+  ): CompletionStage[ParticipantState.SubmissionResult] =\n+    withEnrichedLoggingContext(\n+      \"submitter\" -> submitterInfo.submitter,\n+      \"applicationId\" -> submitterInfo.applicationId,\n+      \"commandId\" -> submitterInfo.commandId,\n+      \"deduplicateUntil\" -> submitterInfo.deduplicateUntil.toString,\n+      \"submissionTime\" -> transactionMeta.submissionTime.toInstant.toString,"
  }
]