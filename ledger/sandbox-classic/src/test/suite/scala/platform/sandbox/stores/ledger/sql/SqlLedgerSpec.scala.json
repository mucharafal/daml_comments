[
  {
    "id" : "fe46c9f8-5028-4125-b483-5f6c2f57d820",
    "prId" : 7224,
    "comments" : [
      {
        "id" : "1fa8fa8a-bfac-45c7-9671-97919ae00723",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "These tests seem to be essentially the same as `JdbcIndexerSpec`. Is there a way to share them?",
        "createdAt" : "2020-08-25T14:38:07Z",
        "updatedAt" : "2020-08-25T14:38:23Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9e7468cf-8e72-4000-bf1e-74c1a66244f8",
        "parentId" : "1fa8fa8a-bfac-45c7-9671-97919ae00723",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "They test the same behavior but for two different integrations that have a significantly different interface. If it makes sense for you, I can come up with a way to factor the behavior out of the integrations and add a unit test for that, but I would prefer keeping both integration tests in.",
        "createdAt" : "2020-08-25T14:44:35Z",
        "updatedAt" : "2020-08-25T14:44:35Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e7cec3e0-1dc9-4175-a549-02c576e9204c",
        "parentId" : "1fa8fa8a-bfac-45c7-9671-97919ae00723",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Not if it's too much work, thanks for considering it.",
        "createdAt" : "2020-08-25T14:55:39Z",
        "updatedAt" : "2020-08-25T14:55:39Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "29b289de696f9165d3b4733f6fb8fc502435ddd0",
    "line" : 75,
    "diffHunk" : "@@ -104,6 +105,44 @@ class SqlLedgerSpec\n       }\n     }\n \n+    \"correctly initialized the participant ID\" in {\n+      val participantId = makeParticipantId(\"TheOnlyParticipant\")\n+      for {\n+        _ <- createSqlLedgerWithParticipantId(participantId)\n+        metadata <- IndexMetadata.read(postgresDatabase.url)\n+      } yield {\n+        metadata.participantId shouldEqual participantId\n+      }\n+    }\n+\n+    \"allow to resume on an existing participant ID\" in {\n+      val participantId = makeParticipantId(\"TheParticipant\")\n+      for {\n+        _ <- createSqlLedgerWithParticipantId(participantId)\n+        _ <- createSqlLedgerWithParticipantId(participantId)\n+        metadata <- IndexMetadata.read(postgresDatabase.url)\n+      } yield {\n+        metadata.participantId shouldEqual participantId\n+      }\n+    }\n+\n+    \"refuse to create a new ledger when there is already one with a different participant ID\" in {\n+      val expectedExisting = makeParticipantId(\"TheParticipant\")\n+      val expectedProvided = makeParticipantId(\"AnotherParticipant\")\n+      for {\n+        _ <- createSqlLedgerWithParticipantId(expectedExisting)\n+        throwable <- createSqlLedgerWithParticipantId(expectedProvided).failed\n+      } yield {\n+        throwable match {\n+          case mismatch: MismatchException.ParticipantId =>\n+            mismatch.existing shouldEqual expectedExisting\n+            mismatch.provided shouldEqual expectedProvided\n+          case _ =>\n+            fail(\"Did not get the expected exception type\", throwable)\n+        }\n+      }\n+    }\n+"
  },
  {
    "id" : "68f4bddd-921e-45e6-a1ae-093da4e19918",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "9326f1dc-a8ae-47b6-9e55-1dd0f89d9f1b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "There's already `LoggingContext.ForTesting` up there, no need to create one here.",
        "createdAt" : "2020-07-31T10:52:20Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "711a65d8-af7c-4f16-8395-5a9c611b99eb",
        "parentId" : "9326f1dc-a8ae-47b6-9e55-1dd0f89d9f1b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6924/commits/58b9029f6d8a79b1c47b96a0027e0f15bd7ef992",
        "createdAt" : "2020-07-31T12:00:07Z",
        "updatedAt" : "2020-07-31T12:00:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -175,7 +178,7 @@ class SqlLedgerSpec\n       packages: List[DamlLf.Archive],\n   ): Future[Ledger] = {\n     metrics.getNames.forEach(name => { val _ = metrics.remove(name) })\n-    val ledger = newLoggingContext { implicit logCtx =>\n+    val ledger = newLoggingContext { implicit loggingContext =>"
  }
]