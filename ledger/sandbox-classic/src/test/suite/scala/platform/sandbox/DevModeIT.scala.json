[
  {
    "id" : "f4523789-02e8-4020-8f0d-ce99e30f74a5",
    "prId" : 7176,
    "comments" : [
      {
        "id" : "d151f7e7-7f21-432c-a969-0337d16d5815",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think you mean `sandboxServer`.",
        "createdAt" : "2020-08-19T09:38:57Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb3af380d5ae146d32f45117e0e8e464da557ec6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+package com.daml.platform.sandbox\n+\n+import java.nio.file.{Files, Path, Paths}\n+\n+import com.daml.bazeltools.BazelRunfiles.rlocation\n+import com.daml.grpc.adapter.{ExecutionSequencerFactory, SingleThreadExecutionSequencerPool}\n+import com.daml.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.daml.ledger.client.LedgerClient\n+import com.daml.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement\n+}\n+import com.daml.platform.apiserver.services.GrpcClientResource\n+import com.daml.platform.sandbox.config.SandboxConfig\n+import com.daml.resources.ResourceOwner\n+import com.google.protobuf.ByteString\n+import org.scalatest.{Matchers, WordSpec}\n+\n+import scala.concurrent.Await\n+import scala.concurrent.ExecutionContext.Implicits._\n+import scala.concurrent.duration._\n+\n+class DevModeIT extends WordSpec with Matchers {\n+\n+  private[this] implicit val esf: ExecutionSequencerFactory =\n+    new SingleThreadExecutionSequencerPool(\"testSequencerPool\")\n+\n+  val List(stableDarPath, devDarPath) =\n+    List(\"1.8\", \"1.dev\").map(s => Paths.get(rlocation(s\"daml-lf/encoder/test-$s.dar\")))\n+\n+  private[this] val applicationId = ApplicationId(\"DevModeIT\")\n+\n+  private[this] def ledgerClientConfiguration =\n+    LedgerClientConfiguration(\n+      applicationId = ApplicationId.unwrap(applicationId),\n+      ledgerIdRequirement = LedgerIdRequirement.none,\n+      commandClient = CommandClientConfiguration.default,\n+      sslContext = None,\n+      token = None\n+    )\n+\n+  private[this] def sandboxSever(devMode: Boolean) ="
  },
  {
    "id" : "2022fb6a-4a24-4dc4-a442-2e4d8656c7e9",
    "prId" : 7176,
    "comments" : [
      {
        "id" : "5b65d563-e976-4338-b6ed-456fc22cee1c",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    \"accept stable DAML LF when devMode is disabled\" in {\r\n```",
        "createdAt" : "2020-08-19T09:39:18Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb3af380d5ae146d32f45117e0e8e464da557ec6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+package com.daml.platform.sandbox\n+\n+import java.nio.file.{Files, Path, Paths}\n+\n+import com.daml.bazeltools.BazelRunfiles.rlocation\n+import com.daml.grpc.adapter.{ExecutionSequencerFactory, SingleThreadExecutionSequencerPool}\n+import com.daml.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.daml.ledger.client.LedgerClient\n+import com.daml.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement\n+}\n+import com.daml.platform.apiserver.services.GrpcClientResource\n+import com.daml.platform.sandbox.config.SandboxConfig\n+import com.daml.resources.ResourceOwner\n+import com.google.protobuf.ByteString\n+import org.scalatest.{Matchers, WordSpec}\n+\n+import scala.concurrent.Await\n+import scala.concurrent.ExecutionContext.Implicits._\n+import scala.concurrent.duration._\n+\n+class DevModeIT extends WordSpec with Matchers {\n+\n+  private[this] implicit val esf: ExecutionSequencerFactory =\n+    new SingleThreadExecutionSequencerPool(\"testSequencerPool\")\n+\n+  val List(stableDarPath, devDarPath) =\n+    List(\"1.8\", \"1.dev\").map(s => Paths.get(rlocation(s\"daml-lf/encoder/test-$s.dar\")))\n+\n+  private[this] val applicationId = ApplicationId(\"DevModeIT\")\n+\n+  private[this] def ledgerClientConfiguration =\n+    LedgerClientConfiguration(\n+      applicationId = ApplicationId.unwrap(applicationId),\n+      ledgerIdRequirement = LedgerIdRequirement.none,\n+      commandClient = CommandClientConfiguration.default,\n+      sslContext = None,\n+      token = None\n+    )\n+\n+  private[this] def sandboxSever(devMode: Boolean) =\n+    SandboxServer.owner(SandboxConfig.defaultConfig.copy(devMode = devMode))\n+\n+  private[this] def loadDar(path: Path, sandboxServer: ResourceOwner[SandboxServer]) =\n+    for {\n+      server <- sandboxServer.acquire().asFuture\n+      channel <- GrpcClientResource.owner(server.port).acquire().asFuture\n+      client <- LedgerClient.apply(channel, ledgerClientConfiguration)\n+      darContent = ByteString.copyFrom(Files.readAllBytes(path))\n+      _ <- client.packageManagementClient.uploadDarFile(darContent)\n+    } yield ()\n+\n+  \"SandboxServer\" should {\n+\n+    \"accept stable DAML LF when devMode is disavle\" in {"
  },
  {
    "id" : "fb3efb31-38d8-43c5-b82c-7a177a052e6f",
    "prId" : 7176,
    "comments" : [
      {
        "id" : "ba1c550c-7811-4c3c-a23c-200ad320c643",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You can use a random port:\r\n\r\n```suggestion\r\n    SandboxServer.owner(SandboxConfig.defaultConfig.copy(\r\n      devMode = devMode,\r\n      port = Port.Dynamic,\r\n    ))\r\n```",
        "createdAt" : "2020-08-19T09:40:25Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f9fb720f-f7c9-4f86-a1a2-f94ab7bdf99a",
        "parentId" : "ba1c550c-7811-4c3c-a23c-200ad320c643",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Cool.",
        "createdAt" : "2020-08-19T09:52:11Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb3af380d5ae146d32f45117e0e8e464da557ec6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+package com.daml.platform.sandbox\n+\n+import java.nio.file.{Files, Path, Paths}\n+\n+import com.daml.bazeltools.BazelRunfiles.rlocation\n+import com.daml.grpc.adapter.{ExecutionSequencerFactory, SingleThreadExecutionSequencerPool}\n+import com.daml.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.daml.ledger.client.LedgerClient\n+import com.daml.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement\n+}\n+import com.daml.platform.apiserver.services.GrpcClientResource\n+import com.daml.platform.sandbox.config.SandboxConfig\n+import com.daml.resources.ResourceOwner\n+import com.google.protobuf.ByteString\n+import org.scalatest.{Matchers, WordSpec}\n+\n+import scala.concurrent.Await\n+import scala.concurrent.ExecutionContext.Implicits._\n+import scala.concurrent.duration._\n+\n+class DevModeIT extends WordSpec with Matchers {\n+\n+  private[this] implicit val esf: ExecutionSequencerFactory =\n+    new SingleThreadExecutionSequencerPool(\"testSequencerPool\")\n+\n+  val List(stableDarPath, devDarPath) =\n+    List(\"1.8\", \"1.dev\").map(s => Paths.get(rlocation(s\"daml-lf/encoder/test-$s.dar\")))\n+\n+  private[this] val applicationId = ApplicationId(\"DevModeIT\")\n+\n+  private[this] def ledgerClientConfiguration =\n+    LedgerClientConfiguration(\n+      applicationId = ApplicationId.unwrap(applicationId),\n+      ledgerIdRequirement = LedgerIdRequirement.none,\n+      commandClient = CommandClientConfiguration.default,\n+      sslContext = None,\n+      token = None\n+    )\n+\n+  private[this] def sandboxSever(devMode: Boolean) =\n+    SandboxServer.owner(SandboxConfig.defaultConfig.copy(devMode = devMode))"
  },
  {
    "id" : "8fc5c7ac-97e7-4633-bbfc-4ddb369118aa",
    "prId" : 7176,
    "comments" : [
      {
        "id" : "8018cf95-a72c-4b62-9f3e-13fde369ca18",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Don't acquire without releasing. Try something like:\r\n\r\n```scala\r\n    \"accept stable DAML LF when devMode is enable\" in sandboxSever(devMode = true).use { sandbox =>\r\n      loadDar(stableDarPath, sandbox) …\r\n    }\r\n```",
        "createdAt" : "2020-08-19T09:40:55Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88c88759-decc-4386-bee3-9fda0cac88d7",
        "parentId" : "8018cf95-a72c-4b62-9f3e-13fde369ca18",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thanks.",
        "createdAt" : "2020-08-20T07:35:44Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb3af380d5ae146d32f45117e0e8e464da557ec6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+package com.daml.platform.sandbox\n+\n+import java.nio.file.{Files, Path, Paths}\n+\n+import com.daml.bazeltools.BazelRunfiles.rlocation\n+import com.daml.grpc.adapter.{ExecutionSequencerFactory, SingleThreadExecutionSequencerPool}\n+import com.daml.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.daml.ledger.client.LedgerClient\n+import com.daml.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement\n+}\n+import com.daml.platform.apiserver.services.GrpcClientResource\n+import com.daml.platform.sandbox.config.SandboxConfig\n+import com.daml.resources.ResourceOwner\n+import com.google.protobuf.ByteString\n+import org.scalatest.{Matchers, WordSpec}\n+\n+import scala.concurrent.Await\n+import scala.concurrent.ExecutionContext.Implicits._\n+import scala.concurrent.duration._\n+\n+class DevModeIT extends WordSpec with Matchers {\n+\n+  private[this] implicit val esf: ExecutionSequencerFactory =\n+    new SingleThreadExecutionSequencerPool(\"testSequencerPool\")\n+\n+  val List(stableDarPath, devDarPath) =\n+    List(\"1.8\", \"1.dev\").map(s => Paths.get(rlocation(s\"daml-lf/encoder/test-$s.dar\")))\n+\n+  private[this] val applicationId = ApplicationId(\"DevModeIT\")\n+\n+  private[this] def ledgerClientConfiguration =\n+    LedgerClientConfiguration(\n+      applicationId = ApplicationId.unwrap(applicationId),\n+      ledgerIdRequirement = LedgerIdRequirement.none,\n+      commandClient = CommandClientConfiguration.default,\n+      sslContext = None,\n+      token = None\n+    )\n+\n+  private[this] def sandboxSever(devMode: Boolean) =\n+    SandboxServer.owner(SandboxConfig.defaultConfig.copy(devMode = devMode))\n+\n+  private[this] def loadDar(path: Path, sandboxServer: ResourceOwner[SandboxServer]) =\n+    for {\n+      server <- sandboxServer.acquire().asFuture"
  },
  {
    "id" : "e370bb28-f5db-4d6e-b209-7f63ebf69ef1",
    "prId" : 7176,
    "comments" : [
      {
        "id" : "88ecfe09-0f7a-4be1-a91a-fbbf70228478",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Instead of using `Await`, try extending `AsyncWordSpec`, which will let you do this:\r\n\r\n```scala\r\n  \"a test\" in {\r\n    for {\r\n      result <- someFuture()\r\n    } yield {\r\n      result should be(7)\r\n    }\r\n  }\r\n```",
        "createdAt" : "2020-08-19T09:42:14Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bcec0897-ce18-4b93-a1e8-804aa2e1d44b",
        "parentId" : "88ecfe09-0f7a-4be1-a91a-fbbf70228478",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n",
        "createdAt" : "2020-08-20T07:35:57Z",
        "updatedAt" : "2020-08-20T09:16:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb3af380d5ae146d32f45117e0e8e464da557ec6",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+package com.daml.platform.sandbox\n+\n+import java.nio.file.{Files, Path, Paths}\n+\n+import com.daml.bazeltools.BazelRunfiles.rlocation\n+import com.daml.grpc.adapter.{ExecutionSequencerFactory, SingleThreadExecutionSequencerPool}\n+import com.daml.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.daml.ledger.client.LedgerClient\n+import com.daml.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement\n+}\n+import com.daml.platform.apiserver.services.GrpcClientResource\n+import com.daml.platform.sandbox.config.SandboxConfig\n+import com.daml.resources.ResourceOwner\n+import com.google.protobuf.ByteString\n+import org.scalatest.{Matchers, WordSpec}\n+\n+import scala.concurrent.Await\n+import scala.concurrent.ExecutionContext.Implicits._\n+import scala.concurrent.duration._\n+\n+class DevModeIT extends WordSpec with Matchers {\n+\n+  private[this] implicit val esf: ExecutionSequencerFactory =\n+    new SingleThreadExecutionSequencerPool(\"testSequencerPool\")\n+\n+  val List(stableDarPath, devDarPath) =\n+    List(\"1.8\", \"1.dev\").map(s => Paths.get(rlocation(s\"daml-lf/encoder/test-$s.dar\")))\n+\n+  private[this] val applicationId = ApplicationId(\"DevModeIT\")\n+\n+  private[this] def ledgerClientConfiguration =\n+    LedgerClientConfiguration(\n+      applicationId = ApplicationId.unwrap(applicationId),\n+      ledgerIdRequirement = LedgerIdRequirement.none,\n+      commandClient = CommandClientConfiguration.default,\n+      sslContext = None,\n+      token = None\n+    )\n+\n+  private[this] def sandboxSever(devMode: Boolean) =\n+    SandboxServer.owner(SandboxConfig.defaultConfig.copy(devMode = devMode))\n+\n+  private[this] def loadDar(path: Path, sandboxServer: ResourceOwner[SandboxServer]) =\n+    for {\n+      server <- sandboxServer.acquire().asFuture\n+      channel <- GrpcClientResource.owner(server.port).acquire().asFuture\n+      client <- LedgerClient.apply(channel, ledgerClientConfiguration)\n+      darContent = ByteString.copyFrom(Files.readAllBytes(path))\n+      _ <- client.packageManagementClient.uploadDarFile(darContent)\n+    } yield ()\n+\n+  \"SandboxServer\" should {\n+\n+    \"accept stable DAML LF when devMode is disavle\" in {\n+      Await.result(loadDar(stableDarPath, sandboxSever(devMode = false)), Duration(1, MINUTES)) shouldBe (()) git"
  }
]