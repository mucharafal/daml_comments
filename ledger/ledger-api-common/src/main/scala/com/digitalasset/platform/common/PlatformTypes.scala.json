[
  {
    "id" : "940f7fcb-16bd-4f6d-bd54-263f8fd148fc",
    "prId" : 4364,
    "comments" : [
      {
        "id" : "e249d562-1f68-42bd-9d64-c1e2c7828df5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Make sure the deprecation messages are the same.",
        "createdAt" : "2020-02-04T15:56:34Z",
        "updatedAt" : "2020-02-05T15:43:03Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed7aa085e66c23d39da73f99079c0647ab202aa2",
    "line" : null,
    "diffHunk" : "@@ -40,6 +40,9 @@ object PlatformTypes {\n   type ExerciseEvent[Nid, Cid] = E.ExerciseEvent[Nid, Cid, T.Transaction.Value[Cid]]\n   val ExerciseEvent: E.ExerciseEvent.type = E.ExerciseEvent\n \n+  @deprecated(\n+    \"use resolveRelCid/ensureNoCid/ensureNoRelCid from value.CidContainer\","
  },
  {
    "id" : "6cb34bf3-f3e3-4c54-a25e-75044506a871",
    "prId" : 643,
    "comments" : [
      {
        "id" : "e63fffe6-6632-4bbd-83f1-2219df0fdedb",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I think these aliases are more likely to deal with \"transaction value-ness\" than \"versioned value-ness\", though perhaps `Event` _et al_ deserve associated aliases for this, too.",
        "createdAt" : "2019-04-23T20:55:41Z",
        "updatedAt" : "2019-04-24T12:56:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3fb04e2966f071e3c9ce810232c205fa8bc35f0e",
    "line" : 27,
    "diffHunk" : "@@ -12,32 +12,32 @@ import scala.collection.breakOut\n \n object PlatformTypes {\n \n-  type GenTransaction[Nid, Cid] = T.GenTransaction[Nid, Cid, V.VersionedValue[Cid]]\n+  type GenTransaction[Nid, Cid] = T.GenTransaction.WithTxValue[Nid, Cid]\n   val GenTransaction: T.GenTransaction.type = T.GenTransaction\n \n-  type GenNode[Nid, Cid] = N.GenNode[Nid, Cid, V.VersionedValue[Cid]]\n+  type GenNode[Nid, Cid] = N.GenNode.WithTxValue[Nid, Cid]\n \n-  type NodeCreate[Cid] = N.NodeCreate[Cid, V.VersionedValue[Cid]]\n+  type NodeCreate[Cid] = N.NodeCreate.WithTxValue[Cid]\n   val NodeCreate: N.NodeCreate.type = N.NodeCreate\n \n-  type NodeLookupByKey[Cid] = N.NodeLookupByKey[Cid, V.VersionedValue[Cid]]\n+  type NodeLookupByKey[Cid] = N.NodeLookupByKey.WithTxValue[Cid]\n   val NodeLookupByKey: N.NodeLookupByKey.type = N.NodeLookupByKey\n \n   type NodeFetch[Cid] = N.NodeFetch[Cid]\n   val NodeFetch: N.NodeFetch.type = N.NodeFetch\n \n-  type NodeExercises[Nid, Cid] = N.NodeExercises[Nid, Cid, V.VersionedValue[Cid]]\n+  type NodeExercises[Nid, Cid] = N.NodeExercises.WithTxValue[Nid, Cid]\n   val NodeExercises: N.NodeExercises.type = N.NodeExercises\n \n-  type Event[Nid, Cid] = E.Event[Nid, Cid, V.VersionedValue[Cid]]\n+  type Event[Nid, Cid] = E.Event[Nid, Cid, T.Transaction.Value[Cid]]"
  }
]