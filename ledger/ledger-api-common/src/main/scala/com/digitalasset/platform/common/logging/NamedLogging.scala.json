[
  {
    "id" : "32872f08-2ea5-4511-8a37-cff2bd3b734a",
    "prId" : 3080,
    "comments" : [
      {
        "id" : "13fcf477-9fb9-4349-b0b3-fe5a5bdb0c5c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What's the reason for having `theLogger` and `logger`?",
        "createdAt" : "2019-10-02T06:49:46Z",
        "updatedAt" : "2019-10-03T15:26:22Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c415ddf1-fa8f-4d62-a402-150027c17c57",
        "parentId" : "13fcf477-9fb9-4349-b0b3-fe5a5bdb0c5c",
        "author" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "body" : "fwiw, initially I simply copied our code as is, but still intended to add comments and adapt to what we need in the daml repo. It looks like this was meant to build the logger lazily - which may be a premature optimization. I guess I will get rid of theLogger.",
        "createdAt" : "2019-10-02T11:51:31Z",
        "updatedAt" : "2019-10-03T15:26:22Z",
        "lastEditedBy" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "48169fe0-853a-47c5-881f-6c64d23c58cf",
        "parentId" : "13fcf477-9fb9-4349-b0b3-fe5a5bdb0c5c",
        "author" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "body" : "Removed",
        "createdAt" : "2019-10-02T14:31:49Z",
        "updatedAt" : "2019-10-03T15:26:22Z",
        "lastEditedBy" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d95f1ee782ebcf961b9c14dc7408e26e2e9e470e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,78 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.common.logging\n+\n+import java.util.concurrent.TimeUnit\n+\n+import com.typesafe.scalalogging.Logger\n+import org.slf4j\n+import org.slf4j.LoggerFactory\n+\n+trait NamedLogger {\n+\n+  /** Name for the logger. Can be empty. */\n+  val name: String\n+\n+  def append(subName: String): NamedLogger\n+\n+  def forParticipant(id: String): NamedLogger = append(s\"participant/$id\")\n+  def forDomain(id: String): NamedLogger = append(s\"domain/$id\")\n+\n+  private[logging] def createLogger(fullName: String): slf4j.Logger\n+\n+  /** create loggers in factory methods\n+    *\n+    * Sometimes, the NamedLogging trait can not be used, e.g. in a factory method. In these\n+    * cases, a logger can be created using this function.\n+    */\n+  def createLogger(klass: Class[_]): com.typesafe.scalalogging.Logger = {\n+    val fullName = Array(klass.getName, name)\n+      .filterNot(_.isEmpty)\n+      .mkString(\":\")\n+    Logger(createLogger(fullName))\n+  }\n+\n+}\n+\n+private[logging] case class SimpleNamedLogger(name: String) extends NamedLogger {\n+  override def append(subName: String): NamedLogger =\n+    if (name.isEmpty) SimpleNamedLogger(subName) else SimpleNamedLogger(s\"$name/$subName\")\n+\n+  override private[logging] def createLogger(fullName: String) = LoggerFactory.getLogger(fullName)\n+}\n+\n+object NamedLogger {\n+  def apply(name: String): NamedLogger = SimpleNamedLogger(name)\n+  def apply(cls: Class[_]): NamedLogger = apply(cls.getSimpleName)\n+\n+  def forParticipant(name: String): NamedLogger = root.forParticipant(name)\n+  def forDomain(name: String): NamedLogger = root.forDomain(name)\n+  def root: NamedLogger = NamedLogger(\"\")\n+\n+  def timedLog[T](hint: String, log: String => Unit)(exp: => T): T = {\n+    log(s\"TimedLog started [$hint]\")\n+    val started = System.nanoTime()\n+    val ret = exp\n+    val elapsed = System.nanoTime()\n+    log(s\"TimeLog finished [$hint] after ${TimeUnit.NANOSECONDS.toMillis(elapsed - started)} ms\")\n+    ret\n+  }\n+\n+  def stackTrace(): String = {\n+    Thread.currentThread().getStackTrace.take(2).map(_.toString).mkString(\"\\n  \")\n+  }\n+\n+}\n+\n+trait NamedLogging {\n+  protected def namedLogger: NamedLogger\n+\n+  private[this] lazy val theLogger: Logger = namedLogger.createLogger(getClass)"
  }
]