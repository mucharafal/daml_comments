[
  {
    "id" : "cb3efe30-5f08-484c-aec8-9755dcd7892b",
    "prId" : 4781,
    "comments" : [
      {
        "id" : "afa65ba3-32a0-4374-8943-fb14d6d791a2",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Considering that this is only used for testing, I'd prefer that this helper method and the similar one below is moved to the test class.",
        "createdAt" : "2020-03-05T09:23:03Z",
        "updatedAt" : "2020-03-05T15:27:24Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "28ff1acc-170b-4665-9cfb-f177ad2e607f",
        "parentId" : "afa65ba3-32a0-4374-8943-fb14d6d791a2",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4781/commits/d3e2d32195c2aa697e66260faa86735a0cdb375b",
        "createdAt" : "2020-03-05T11:42:02Z",
        "updatedAt" : "2020-03-05T15:27:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e33db127e5022f4c0f8a6e54bbba73ab88b40753",
    "line" : null,
    "diffHunk" : "@@ -25,9 +25,14 @@ object EventOps {\n       event.copy(event = event.event.modifyWitnessParties(f))\n \n     def contractId: String = event.event.contractId\n+    def updateContractId(set: String): Event ="
  },
  {
    "id" : "a7952e99-72c0-4c81-bc80-9bf5e53aa556",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "25646e96-7a2d-4624-a3ae-8a0858304ba7",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please rename to something like `modifyWitnessParties`. Took me a while to recognize this on the [use site](https://github.com/digital-asset/daml/pull/4763/files?file-filters%5B%5D=.bazel&file-filters%5B%5D=.scala&hide-deleted-files=true&w=1#diff-326e88d1e9364ea89273440923b54adaR33).",
        "createdAt" : "2020-03-02T08:21:31Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ddb0d277-57d2-4086-8e9d-2780fbe0cf79",
        "parentId" : "25646e96-7a2d-4624-a3ae-8a0858304ba7",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4763/commits/084f83f6a7e9794c09cd508e4c4c0898039e0bea",
        "createdAt" : "2020-03-02T12:40:44Z",
        "updatedAt" : "2020-03-02T12:40:44Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : null,
    "diffHunk" : "@@ -3,90 +3,89 @@\n \n package com.digitalasset.platform.api.v1.event\n \n-import com.digitalasset.daml.lf.data.Ref\n-import com.digitalasset.ledger.api.domain.{ContractId, EventId}\n import com.digitalasset.ledger.api.v1.event.Event.Event.{Archived, Created, Empty}\n import com.digitalasset.ledger.api.v1.event.{CreatedEvent, Event, ExercisedEvent}\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent.Kind.{\n   Created => TreeCreated,\n   Exercised => TreeExercised\n }\n-import scalaz.Tag\n+import com.digitalasset.ledger.api.v1.value.Identifier\n \n object EventOps {\n \n   implicit class EventOps(val event: Event) extends AnyVal {\n \n-    def eventId: EventId = event.event.eventId\n+    def eventId: String = event.event.eventId\n \n-    def witnesses: Seq[String] = event.event.witnesses\n+    def witnessParties: Seq[String] = event.event.witnessParties\n+    def witnessParties(set: Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(set)))\n+    def witnessParties(f: Seq[String] => Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(f)))\n \n-    def contractId: ContractId = event.event.contractId\n+    def contractId: String = event.event.contractId\n \n-    def templateId: String = event.event.templateId\n-\n-    def withWitnesses(witnesses: Seq[String]): Event = Event(event.event.withWitnesses(witnesses))\n+    def templateId: Identifier = event.event.templateId\n \n   }\n \n   implicit class EventEventOps(val event: Event.Event) extends AnyVal {\n \n-    def eventId: EventId = event match {\n-      case Archived(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n-      case Created(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n+    def eventId: String = event match {\n+      case Archived(value) => value.eventId\n+      case Created(value) => value.eventId\n       case Empty => throw new IllegalArgumentException(\"Cannot extract Event ID from Empty event.\")\n     }\n \n-    def witnesses: Seq[String] = event match {\n-      case c: Created => c.value.witnessParties\n-      case a: Archived => a.value.witnessParties\n+    def witnessParties: Seq[String] = event match {\n+      case Archived(value) => value.witnessParties\n+      case Created(value) => value.witnessParties\n       case Empty => Seq.empty\n     }\n \n-    def templateId: String = event match {\n-      case c: Created => c.templateId\n-      case a: Archived => a.templateId\n-      case Empty =>\n-        throw new IllegalArgumentException(\"Cannot extract Template ID from Empty event.\")\n+    def witnessParties(set: Seq[String]): Event.Event = event match {\n+      case a @ Archived(value) => a.copy(value.update(_.witnessParties := set))\n+      case c @ Created(value) => c.copy(value.update(_.witnessParties := set))\n+      case Empty => Empty\n     }\n \n-    def contractId: ContractId = {\n-      val rawId = event match {\n-        case Archived(value) => value.contractId\n-        case Created(value) => value.contractId\n-        case Empty =>\n-          throw new IllegalArgumentException(\"Cannot extract contractId from Empty event.\")\n-      }\n-      ContractId(Ref.LedgerString.assertFromString(rawId))\n+    def witnessParties(f: Seq[String] => Seq[String]): Event.Event = event match {"
  },
  {
    "id" : "c211427a-2aa4-4c91-bf28-9a6c07533316",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "915440d3-dd0a-45ac-b511-169dcfc1fc90",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please update to `updateWitnessParties` or `withWitnesses`, to express that this is changing the event.",
        "createdAt" : "2020-03-02T08:21:50Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "00bf5e65-66df-49bc-98fc-2e4ced8f6262",
        "parentId" : "915440d3-dd0a-45ac-b511-169dcfc1fc90",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4763/commits/084f83f6a7e9794c09cd508e4c4c0898039e0bea",
        "createdAt" : "2020-03-02T12:40:50Z",
        "updatedAt" : "2020-03-02T12:40:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : null,
    "diffHunk" : "@@ -3,90 +3,89 @@\n \n package com.digitalasset.platform.api.v1.event\n \n-import com.digitalasset.daml.lf.data.Ref\n-import com.digitalasset.ledger.api.domain.{ContractId, EventId}\n import com.digitalasset.ledger.api.v1.event.Event.Event.{Archived, Created, Empty}\n import com.digitalasset.ledger.api.v1.event.{CreatedEvent, Event, ExercisedEvent}\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent.Kind.{\n   Created => TreeCreated,\n   Exercised => TreeExercised\n }\n-import scalaz.Tag\n+import com.digitalasset.ledger.api.v1.value.Identifier\n \n object EventOps {\n \n   implicit class EventOps(val event: Event) extends AnyVal {\n \n-    def eventId: EventId = event.event.eventId\n+    def eventId: String = event.event.eventId\n \n-    def witnesses: Seq[String] = event.event.witnesses\n+    def witnessParties: Seq[String] = event.event.witnessParties\n+    def witnessParties(set: Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(set)))\n+    def witnessParties(f: Seq[String] => Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(f)))\n \n-    def contractId: ContractId = event.event.contractId\n+    def contractId: String = event.event.contractId\n \n-    def templateId: String = event.event.templateId\n-\n-    def withWitnesses(witnesses: Seq[String]): Event = Event(event.event.withWitnesses(witnesses))\n+    def templateId: Identifier = event.event.templateId\n \n   }\n \n   implicit class EventEventOps(val event: Event.Event) extends AnyVal {\n \n-    def eventId: EventId = event match {\n-      case Archived(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n-      case Created(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n+    def eventId: String = event match {\n+      case Archived(value) => value.eventId\n+      case Created(value) => value.eventId\n       case Empty => throw new IllegalArgumentException(\"Cannot extract Event ID from Empty event.\")\n     }\n \n-    def witnesses: Seq[String] = event match {\n-      case c: Created => c.value.witnessParties\n-      case a: Archived => a.value.witnessParties\n+    def witnessParties: Seq[String] = event match {\n+      case Archived(value) => value.witnessParties\n+      case Created(value) => value.witnessParties\n       case Empty => Seq.empty\n     }\n \n-    def templateId: String = event match {\n-      case c: Created => c.templateId\n-      case a: Archived => a.templateId\n-      case Empty =>\n-        throw new IllegalArgumentException(\"Cannot extract Template ID from Empty event.\")\n+    def witnessParties(set: Seq[String]): Event.Event = event match {"
  },
  {
    "id" : "d50350b5-c672-4c93-b4a3-479aed368066",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "87a6888f-c197-4d6a-85fb-6cf48fbcabac",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "For the methods that change `witnessParties`, see comments below for `EventEventOps`.",
        "createdAt" : "2020-03-02T08:58:15Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a9f1a22-9612-4ce2-abb7-c76824a3cd4f",
        "parentId" : "87a6888f-c197-4d6a-85fb-6cf48fbcabac",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4763/commits/084f83f6a7e9794c09cd508e4c4c0898039e0bea",
        "createdAt" : "2020-03-02T12:41:10Z",
        "updatedAt" : "2020-03-02T12:41:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : null,
    "diffHunk" : "@@ -3,90 +3,89 @@\n \n package com.digitalasset.platform.api.v1.event\n \n-import com.digitalasset.daml.lf.data.Ref\n-import com.digitalasset.ledger.api.domain.{ContractId, EventId}\n import com.digitalasset.ledger.api.v1.event.Event.Event.{Archived, Created, Empty}\n import com.digitalasset.ledger.api.v1.event.{CreatedEvent, Event, ExercisedEvent}\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent.Kind.{\n   Created => TreeCreated,\n   Exercised => TreeExercised\n }\n-import scalaz.Tag\n+import com.digitalasset.ledger.api.v1.value.Identifier\n \n object EventOps {\n \n   implicit class EventOps(val event: Event) extends AnyVal {\n \n-    def eventId: EventId = event.event.eventId\n+    def eventId: String = event.event.eventId\n \n-    def witnesses: Seq[String] = event.event.witnesses\n+    def witnessParties: Seq[String] = event.event.witnessParties\n+    def witnessParties(set: Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(set)))\n+    def witnessParties(f: Seq[String] => Seq[String]): Event ="
  },
  {
    "id" : "fb45f8ea-dc93-46d1-ac98-a949a5dab171",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "38da9355-73c0-48d2-be60-04c231d051b5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Consider using \r\n```scala\r\nArchived(value.copy(witnessParties = set))\r\n```",
        "createdAt" : "2020-03-02T10:34:58Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : null,
    "diffHunk" : "@@ -3,90 +3,89 @@\n \n package com.digitalasset.platform.api.v1.event\n \n-import com.digitalasset.daml.lf.data.Ref\n-import com.digitalasset.ledger.api.domain.{ContractId, EventId}\n import com.digitalasset.ledger.api.v1.event.Event.Event.{Archived, Created, Empty}\n import com.digitalasset.ledger.api.v1.event.{CreatedEvent, Event, ExercisedEvent}\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent.Kind.{\n   Created => TreeCreated,\n   Exercised => TreeExercised\n }\n-import scalaz.Tag\n+import com.digitalasset.ledger.api.v1.value.Identifier\n \n object EventOps {\n \n   implicit class EventOps(val event: Event) extends AnyVal {\n \n-    def eventId: EventId = event.event.eventId\n+    def eventId: String = event.event.eventId\n \n-    def witnesses: Seq[String] = event.event.witnesses\n+    def witnessParties: Seq[String] = event.event.witnessParties\n+    def witnessParties(set: Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(set)))\n+    def witnessParties(f: Seq[String] => Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(f)))\n \n-    def contractId: ContractId = event.event.contractId\n+    def contractId: String = event.event.contractId\n \n-    def templateId: String = event.event.templateId\n-\n-    def withWitnesses(witnesses: Seq[String]): Event = Event(event.event.withWitnesses(witnesses))\n+    def templateId: Identifier = event.event.templateId\n \n   }\n \n   implicit class EventEventOps(val event: Event.Event) extends AnyVal {\n \n-    def eventId: EventId = event match {\n-      case Archived(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n-      case Created(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n+    def eventId: String = event match {\n+      case Archived(value) => value.eventId\n+      case Created(value) => value.eventId\n       case Empty => throw new IllegalArgumentException(\"Cannot extract Event ID from Empty event.\")\n     }\n \n-    def witnesses: Seq[String] = event match {\n-      case c: Created => c.value.witnessParties\n-      case a: Archived => a.value.witnessParties\n+    def witnessParties: Seq[String] = event match {\n+      case Archived(value) => value.witnessParties\n+      case Created(value) => value.witnessParties\n       case Empty => Seq.empty\n     }\n \n-    def templateId: String = event match {\n-      case c: Created => c.templateId\n-      case a: Archived => a.templateId\n-      case Empty =>\n-        throw new IllegalArgumentException(\"Cannot extract Template ID from Empty event.\")\n+    def witnessParties(set: Seq[String]): Event.Event = event match {\n+      case a @ Archived(value) => a.copy(value.update(_.witnessParties := set))"
  },
  {
    "id" : "d9a18b10-fd86-436f-99b4-e33843de3e39",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "990643e5-0233-4195-a88c-1838e38eed50",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Consider using\r\n```scala\r\nArchived(value.copy(witnessParties = f(value.witnessParties)))\r\n```",
        "createdAt" : "2020-03-02T10:35:30Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aefc2fe6-8c06-4c6b-ad98-5a95fffd6073",
        "parentId" : "990643e5-0233-4195-a88c-1838e38eed50",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4763/commits/084f83f6a7e9794c09cd508e4c4c0898039e0bea",
        "createdAt" : "2020-03-02T12:41:27Z",
        "updatedAt" : "2020-03-02T12:41:27Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : null,
    "diffHunk" : "@@ -3,90 +3,89 @@\n \n package com.digitalasset.platform.api.v1.event\n \n-import com.digitalasset.daml.lf.data.Ref\n-import com.digitalasset.ledger.api.domain.{ContractId, EventId}\n import com.digitalasset.ledger.api.v1.event.Event.Event.{Archived, Created, Empty}\n import com.digitalasset.ledger.api.v1.event.{CreatedEvent, Event, ExercisedEvent}\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent\n import com.digitalasset.ledger.api.v1.transaction.TreeEvent.Kind.{\n   Created => TreeCreated,\n   Exercised => TreeExercised\n }\n-import scalaz.Tag\n+import com.digitalasset.ledger.api.v1.value.Identifier\n \n object EventOps {\n \n   implicit class EventOps(val event: Event) extends AnyVal {\n \n-    def eventId: EventId = event.event.eventId\n+    def eventId: String = event.event.eventId\n \n-    def witnesses: Seq[String] = event.event.witnesses\n+    def witnessParties: Seq[String] = event.event.witnessParties\n+    def witnessParties(set: Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(set)))\n+    def witnessParties(f: Seq[String] => Seq[String]): Event =\n+      event.update(_.event.modify(_.witnessParties(f)))\n \n-    def contractId: ContractId = event.event.contractId\n+    def contractId: String = event.event.contractId\n \n-    def templateId: String = event.event.templateId\n-\n-    def withWitnesses(witnesses: Seq[String]): Event = Event(event.event.withWitnesses(witnesses))\n+    def templateId: Identifier = event.event.templateId\n \n   }\n \n   implicit class EventEventOps(val event: Event.Event) extends AnyVal {\n \n-    def eventId: EventId = event match {\n-      case Archived(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n-      case Created(value) => EventId(Ref.LedgerString.assertFromString(value.eventId))\n+    def eventId: String = event match {\n+      case Archived(value) => value.eventId\n+      case Created(value) => value.eventId\n       case Empty => throw new IllegalArgumentException(\"Cannot extract Event ID from Empty event.\")\n     }\n \n-    def witnesses: Seq[String] = event match {\n-      case c: Created => c.value.witnessParties\n-      case a: Archived => a.value.witnessParties\n+    def witnessParties: Seq[String] = event match {\n+      case Archived(value) => value.witnessParties\n+      case Created(value) => value.witnessParties\n       case Empty => Seq.empty\n     }\n \n-    def templateId: String = event match {\n-      case c: Created => c.templateId\n-      case a: Archived => a.templateId\n-      case Empty =>\n-        throw new IllegalArgumentException(\"Cannot extract Template ID from Empty event.\")\n+    def witnessParties(set: Seq[String]): Event.Event = event match {\n+      case a @ Archived(value) => a.copy(value.update(_.witnessParties := set))\n+      case c @ Created(value) => c.copy(value.update(_.witnessParties := set))\n+      case Empty => Empty\n     }\n \n-    def contractId: ContractId = {\n-      val rawId = event match {\n-        case Archived(value) => value.contractId\n-        case Created(value) => value.contractId\n-        case Empty =>\n-          throw new IllegalArgumentException(\"Cannot extract contractId from Empty event.\")\n-      }\n-      ContractId(Ref.LedgerString.assertFromString(rawId))\n+    def witnessParties(f: Seq[String] => Seq[String]): Event.Event = event match {\n+      case a @ Archived(value) => a.copy(value.update(_.witnessParties.modify(f)))"
  }
]