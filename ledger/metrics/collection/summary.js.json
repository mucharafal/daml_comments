[
  {
    "id" : "ee7c9e29-9111-496e-8fa5-1e7c74ad2551",
    "prId" : 5828,
    "comments" : [
      {
        "id" : "644ac9ee-e63f-41ca-9672-09025463a1bd",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Not a big fan of re-using variables if not necessary.\r\n\r\n```suggestion\r\n              const parsed = JSON.parse(body);\r\n              resolve(parsed);\r\n```",
        "createdAt" : "2020-05-05T07:59:07Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "da5675a92fb85ab716857967ddf5cdfa5d784da4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+const http = require(\"http\");\n+\n+const window = \"6hours\"\n+\n+const url = (target) => `http://localhost:2000/render?target=summarize(${target},%20%27${window}%27,%20%27last%27)&from=-${window}&format=json`\n+\n+function fetch(url) {\n+    return new Promise((resolve, reject) => {\n+        http.get(url, res => {\n+            res.setEncoding(\"utf8\");\n+            let body = \"\";\n+            res.on(\"data\", data => {\n+              body += data;\n+            });\n+            res.on(\"end\", () => {\n+              body = JSON.parse(body);\n+              resolve(body);"
  },
  {
    "id" : "6da29cf6-7e75-42cf-b26f-8529d4baf724",
    "prId" : 5828,
    "comments" : [
      {
        "id" : "91558a61-4544-4065-9842-6fe76ef7fc8d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n            res.on(\"error\", reject);\r\n```",
        "createdAt" : "2020-05-05T07:59:20Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "da5675a92fb85ab716857967ddf5cdfa5d784da4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+const http = require(\"http\");\n+\n+const window = \"6hours\"\n+\n+const url = (target) => `http://localhost:2000/render?target=summarize(${target},%20%27${window}%27,%20%27last%27)&from=-${window}&format=json`\n+\n+function fetch(url) {\n+    return new Promise((resolve, reject) => {\n+        http.get(url, res => {\n+            res.setEncoding(\"utf8\");\n+            let body = \"\";\n+            res.on(\"data\", data => {\n+              body += data;\n+            });\n+            res.on(\"end\", () => {\n+              body = JSON.parse(body);\n+              resolve(body);\n+            });\n+            res.on(\"error\", (e) => {\n+                reject(e);\n+            });"
  },
  {
    "id" : "c35c643e-c6a1-41b2-bd69-cd9f1e775cb5",
    "prId" : 5828,
    "comments" : [
      {
        "id" : "72f42255-18c9-42c7-a27d-1288984c43b1",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    const result = {};\r\n```\r\n\r\nYou may want to run `prettier` over all of this:\r\n\r\n```\r\nnix-shell -p nodePackages.prettier --run 'prettier --write ledger/metrics/collection/summary.js'\r\n```\r\n",
        "createdAt" : "2020-05-05T08:02:01Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "da5675a92fb85ab716857967ddf5cdfa5d784da4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+const http = require(\"http\");\n+\n+const window = \"6hours\"\n+\n+const url = (target) => `http://localhost:2000/render?target=summarize(${target},%20%27${window}%27,%20%27last%27)&from=-${window}&format=json`\n+\n+function fetch(url) {\n+    return new Promise((resolve, reject) => {\n+        http.get(url, res => {\n+            res.setEncoding(\"utf8\");\n+            let body = \"\";\n+            res.on(\"data\", data => {\n+              body += data;\n+            });\n+            res.on(\"end\", () => {\n+              body = JSON.parse(body);\n+              resolve(body);\n+            });\n+            res.on(\"error\", (e) => {\n+                reject(e);\n+            });\n+          });\n+    })\n+}\n+\n+function toDict(rawData) {\n+    const result = {}"
  },
  {
    "id" : "87ba1ab6-e575-45d4-8065-f33ee1a30da2",
    "prId" : 5828,
    "comments" : [
      {
        "id" : "6dddf4c6-b53a-4a88-93eb-2ec4ef310e7d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I personally prefer `for (row of rawData)`, but I'm good either way.",
        "createdAt" : "2020-05-05T08:02:42Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "da5675a92fb85ab716857967ddf5cdfa5d784da4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+const http = require(\"http\");\n+\n+const window = \"6hours\"\n+\n+const url = (target) => `http://localhost:2000/render?target=summarize(${target},%20%27${window}%27,%20%27last%27)&from=-${window}&format=json`\n+\n+function fetch(url) {\n+    return new Promise((resolve, reject) => {\n+        http.get(url, res => {\n+            res.setEncoding(\"utf8\");\n+            let body = \"\";\n+            res.on(\"data\", data => {\n+              body += data;\n+            });\n+            res.on(\"end\", () => {\n+              body = JSON.parse(body);\n+              resolve(body);\n+            });\n+            res.on(\"error\", (e) => {\n+                reject(e);\n+            });\n+          });\n+    })\n+}\n+\n+function toDict(rawData) {\n+    const result = {}\n+    rawData.forEach(row => {"
  },
  {
    "id" : "63b2d358-6e63-42d9-a43f-f4fb7ab1fbc6",
    "prId" : 5828,
    "comments" : [
      {
        "id" : "cd143e88-5b3e-41e5-b90d-300b0a7c2aba",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I don't know how much you care, but if you wanted to generalize this (and run stuff in parallel), you could do something like:\r\n\r\n```suggestion\r\n    const maxDepth = 6;\r\n    const depths = Array.from(Array(maxDepth), (_, i) => i + 1);\r\n    const urls = depths\r\n      .map(depth => Array.from(Array(depth), () => \"*\").join(\".\"))\r\n      .map(stars => `daml.${stars}.{mean,count,min,max}`);\r\n    const nestedData = await Promise.all(urls.map(fetch));\r\n    return Array.prototype.concat(...nestedData);\r\n```\r\n\r\n(I haven't tested this code.)",
        "createdAt" : "2020-05-05T08:09:31Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "470a4ba2-2206-4ea1-ad28-a6b20cce3c5a",
        "parentId" : "cd143e88-5b3e-41e5-b90d-300b0a7c2aba",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "At the very least, I'd recommend using `Promise.all` to speed things up.",
        "createdAt" : "2020-05-05T08:11:39Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "da5675a92fb85ab716857967ddf5cdfa5d784da4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+const http = require(\"http\");\n+\n+const window = \"6hours\"\n+\n+const url = (target) => `http://localhost:2000/render?target=summarize(${target},%20%27${window}%27,%20%27last%27)&from=-${window}&format=json`\n+\n+function fetch(url) {\n+    return new Promise((resolve, reject) => {\n+        http.get(url, res => {\n+            res.setEncoding(\"utf8\");\n+            let body = \"\";\n+            res.on(\"data\", data => {\n+              body += data;\n+            });\n+            res.on(\"end\", () => {\n+              body = JSON.parse(body);\n+              resolve(body);\n+            });\n+            res.on(\"error\", (e) => {\n+                reject(e);\n+            });\n+          });\n+    })\n+}\n+\n+function toDict(rawData) {\n+    const result = {}\n+    rawData.forEach(row => {\n+        const words = row.tags.name.split(\".\");\n+        const target = words.slice(undefined,-1).join(\".\");\n+        const stat = words[words.length - 1];\n+        const data = row.datapoints[0][0];\n+        result[target] = result[target] || {};\n+        result[target][stat] = data;\n+    })\n+    return result;\n+}\n+\n+const formatNumber = (num) => (num === undefined || isNaN(num)) ? \"\" : Math.round( num * 100 + Number.EPSILON ) / 100;\n+\n+function toCsv(dictData) {\n+    const result = [];\n+    for(const key in dictData) {\n+        const rowData = dictData[key];\n+        const count = formatNumber(rowData.count);\n+        const mean = formatNumber(rowData.mean);\n+        const total = formatNumber(rowData.mean * rowData.count);\n+        const min = formatNumber(rowData.min);\n+        const max = formatNumber(rowData.max);\n+        result.push(`${key}, ${count}, ${mean}, ${total}, ${min}, ${max}`);\n+    }\n+    return \"Metric, Count, Mean, Total, Min, Max\\n\" + result.sort().join(\"\\n\");\n+}\n+\n+async function fetchData() {\n+    const data1 = await fetch(url(\"daml.*.{mean,count,min,max}\"));\n+    const data2 = await fetch(url(\"daml.*.*.{mean,count,min,max}\"));\n+    const data3 = await fetch(url(\"daml.*.*.*.{mean,count,min,max}\"));\n+    const data4 = await fetch(url(\"daml.*.*.*.*.{mean,count,min,max}\"));\n+    const data5 = await fetch(url(\"daml.*.*.*.*.*.{mean,count,min,max}\"));\n+    const data6 = await fetch(url(\"daml.*.*.*.*.*.*.{mean,count,min,max}\"));\n+    return [...data1, ...data2, ...data3, ...data4, ...data5, ...data6];"
  },
  {
    "id" : "0ee2f2bc-f9e1-4c3d-b7a7-5b7808e5b087",
    "prId" : 5828,
    "comments" : [
      {
        "id" : "d9e39b4f-37ac-4d7b-bd76-8290afed5706",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Perhaps add a `#!/usr/bin/env node` above this and make it executable?",
        "createdAt" : "2020-05-05T08:10:06Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "da5675a92fb85ab716857967ddf5cdfa5d784da4",
    "line" : 3,
    "diffHunk" : "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved."
  },
  {
    "id" : "fbe92b6c-0c56-4356-a19a-f7d9c22b36b7",
    "prId" : 5828,
    "comments" : [
      {
        "id" : "ba833d76-60e8-40f2-820d-a93a917e0adc",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "It'd be nice to have a `flatMap`, right? It's in node.js v12 (as is `flat`), but unfortunately we can't use it here unless we upgrade.",
        "createdAt" : "2020-05-06T13:03:02Z",
        "updatedAt" : "2020-05-06T14:43:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "20119523-7e74-4c1c-ac9f-a128762257ca",
        "parentId" : "ba833d76-60e8-40f2-820d-a93a917e0adc",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Yes, this block is copy pasted from the alternative implementation of `flatMap` from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) 😄 \r\n\r\nSame for the local method `fetch` - it would be nice to use `node-fetch`, but I did not want to add npm dependencies.",
        "createdAt" : "2020-05-06T14:46:19Z",
        "updatedAt" : "2020-05-06T14:46:19Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "da5675a92fb85ab716857967ddf5cdfa5d784da4",
    "line" : 74,
    "diffHunk" : "@@ -0,0 +1,93 @@\n+#!/usr/bin/env node\n+\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+const http = require(\"http\");\n+\n+const window = \"6hours\";\n+\n+const url = target =>\n+  `http://localhost:2000/render?target=summarize(${target},%20%27${window}%27,%20%27last%27)&from=-${window}&format=json`;\n+\n+function fetch(url) {\n+  return new Promise((resolve, reject) => {\n+    http.get(url, res => {\n+      res.setEncoding(\"utf8\");\n+      let body = \"\";\n+      res.on(\"data\", data => {\n+        body += data;\n+      });\n+      res.on(\"end\", () => {\n+        resolve(JSON.parse(body));\n+      });\n+      res.on(\"error\", reject);\n+    });\n+  });\n+}\n+\n+function toDict(rawData) {\n+  const result = {};\n+  rawData.forEach(row => {\n+    const words = row.tags.name.split(\".\");\n+    const target = words.slice(undefined, -1).join(\".\");\n+    const stat = words[words.length - 1];\n+    const data = row.datapoints[0][0];\n+    result[target] = result[target] || {};\n+    result[target][stat] = data;\n+  });\n+  return result;\n+}\n+\n+const formatNumber = num =>\n+  num === undefined || isNaN(num)\n+    ? \"\"\n+    : Math.round(num * 100 + Number.EPSILON) / 100;\n+\n+function toCsv(dictData) {\n+  const result = [];\n+  for (const key in dictData) {\n+    const rowData = dictData[key];\n+    const count = formatNumber(rowData.count);\n+    const mean = formatNumber(rowData.mean);\n+    const total = formatNumber(rowData.mean * rowData.count);\n+    const min = formatNumber(rowData.min);\n+    const max = formatNumber(rowData.max);\n+    result.push(`${key}, ${count}, ${mean}, ${total}, ${min}, ${max}`);\n+  }\n+  return \"Metric, Count, Mean, Total, Min, Max\\n\" + result.sort().join(\"\\n\");\n+}\n+\n+async function fetchData() {\n+  const maxDepth = 7;\n+  const roots = [\"daml\", \"jvm\"];\n+\n+   // [1, 2, 3, ...]\n+  const depths = Array.from(Array(maxDepth), (_, i) => i + 1);\n+\n+  // [\"*\", \"*.*\", \"*.*.*\", ...]\n+  const stars = depths.map(depth =>\n+    Array.from(Array(depth), () => \"*\").join(\".\")\n+  );\n+\n+  // Array of all URLs to fetch\n+  const urls = roots.reduce("
  }
]