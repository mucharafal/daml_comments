[
  {
    "id" : "448b834f-a528-456b-885c-8562f121b42a",
    "prId" : 7576,
    "comments" : [
      {
        "id" : "481fab65-a8f7-42ec-bb07-01727a19d298",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Does it make sense to have these per-party?",
        "createdAt" : "2020-10-06T13:07:43Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a200cf0e-f8be-4904-b483-4d29212566a5",
        "parentId" : "481fab65-a8f7-42ec-bb07-01727a19d298",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I think for now this is reasonable, though I'd appreciate more opinions on this. Do we run into problems with 10k unique parties?",
        "createdAt" : "2020-10-06T15:51:47Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "76f067753b482633f0992ac86992896c2f75fcda",
    "line" : null,
    "diffHunk" : "@@ -36,6 +36,15 @@ final class Metrics(val registry: MetricRegistry) {\n         registry.meter(Prefix :+ \"delayed_submissions\")\n       val validSubmissions: Meter =\n         registry.meter(Prefix :+ \"valid_submissions\")\n+\n+      def inputBufferSaturation(party: String): Counter ="
  },
  {
    "id" : "ceb3d618-d552-43fd-adaf-f89db70b65a1",
    "prId" : 7460,
    "comments" : [
      {
        "id" : "50f76f04-c19e-4e74-a2a6-a55a283ecc42",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This requires a changelog entry.",
        "createdAt" : "2020-09-23T12:18:55Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "71e3cd33-8ea7-467c-a475-a5d08129a4e4",
        "parentId" : "50f76f04-c19e-4e74-a2a6-a55a283ecc42",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done.",
        "createdAt" : "2020-09-29T13:50:36Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0a4599bcbf38cacac4088b9b73021b01c997c440",
    "line" : 4,
    "diffHunk" : "@@ -101,7 +101,7 @@ final class Metrics(val registry: MetricRegistry) {\n         object packageUpload {\n           private val Prefix: MetricName = committer.Prefix :+ \"package_upload\"\n \n-          val preloadTimer: Timer = registry.timer(Prefix :+ \"preload_timer\")\n+          val validateTimer: Timer = registry.timer(Prefix :+ \"validate_timer\")"
  },
  {
    "id" : "ccbd3252-dc6b-4884-8e0b-8eadd750452e",
    "prId" : 7116,
    "comments" : [
      {
        "id" : "4c9f535c-a3eb-4cae-944e-129e6aaeb4d5",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n  private[metrics] def gauge[T](name: MetricName, metricSupplier: MetricSupplier[Gauge[_]]): Gauge[T] =\r\n    registry.synchronized {\r\n      registry.remove(name)\r\n      registry.gauge(name, metricSupplier).asInstanceOf[Gauge[T]]\r\n    }\r\n```",
        "createdAt" : "2020-08-13T13:39:10Z",
        "updatedAt" : "2020-08-13T16:17:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d114ecad265c9589177fd324883b4a82cafaa3b9",
    "line" : null,
    "diffHunk" : "@@ -8,7 +8,9 @@ import com.codahale.metrics._\n \n final class Metrics(val registry: MetricRegistry) {\n \n-  private def gauge[T](name: MetricName, metricSupplier: MetricSupplier[Gauge[_]]): Gauge[T] = {\n+  private[metrics] def gauge[T](\n+      name: MetricName,\n+      metricSupplier: MetricSupplier[Gauge[_]]): Gauge[T] = registry.synchronized {\n     registry.remove(name)\n     registry.gauge(name, metricSupplier).asInstanceOf[Gauge[T]]\n   }"
  },
  {
    "id" : "741bcf3e-4051-4ab7-89ca-35928abf5d84",
    "prId" : 6343,
    "comments" : [
      {
        "id" : "3bbe7fbb-cf14-4fc8-b29c-67875fa686c8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "We use lowercase `prefix` everywhere else in this file, as far as I can see. Can you please make it consistent?\r\n\r\nOtherwise you're just going to cause bugs like this one. For example, `openEnvelope`, directly above, which you missed.",
        "createdAt" : "2020-06-15T09:03:00Z",
        "updatedAt" : "2020-06-15T09:55:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "63b6be18-6b4f-4ac6-896f-ff7c8e669af1",
        "parentId" : "3bbe7fbb-cf14-4fc8-b29c-67875fa686c8",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Good catch. According to the [Scala style guide](https://docs.scala-lang.org/style/naming-conventions.html#constants-values-variable-and-methods) constants should be in upper camel case. Shouldn't we rather switch everywhere to `Prefix`?\r\nThis code has been moved from a repo where we follow the Scala style guide hence the inconsistencies.",
        "createdAt" : "2020-06-15T09:23:31Z",
        "updatedAt" : "2020-06-15T09:55:14Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a34a764e-d371-483a-8910-abcbd8366f10",
        "parentId" : "3bbe7fbb-cf14-4fc8-b29c-67875fa686c8",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "No opinion. I suggest making it internally consistent in this PR and then, if you're so inclined, opening another one when it's merged to make it externally consistent.",
        "createdAt" : "2020-06-15T09:25:01Z",
        "updatedAt" : "2020-06-15T09:55:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c89c789e-8391-4db8-acfb-e429b2f7179a",
        "parentId" : "3bbe7fbb-cf14-4fc8-b29c-67875fa686c8",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "OK, will make a separate PR for addressing the naming convention issue.",
        "createdAt" : "2020-06-15T09:55:29Z",
        "updatedAt" : "2020-06-15T09:55:45Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1544cd1a7b73820c442d1ea10b7d0e2827cd45aa",
    "line" : null,
    "diffHunk" : "@@ -162,14 +162,14 @@ class Metrics(val registry: MetricRegistry) {\n           val fetchInputs: Timer = registry.timer(Prefix :+ \"fetch_inputs\")\n           val validate: Timer = registry.timer(Prefix :+ \"validate\")\n           val commit: Timer = registry.timer(Prefix :+ \"commit\")\n-          val transformSubmission: Timer = registry.timer(prefix :+ \"transform_submission\")\n+          val transformSubmission: Timer = registry.timer(Prefix :+ \"transform_submission\")\n \n-          val acquireTransactionLock: Timer = registry.timer(prefix :+ \"acquire_transaction_lock\")\n+          val acquireTransactionLock: Timer = registry.timer(Prefix :+ \"acquire_transaction_lock\")\n           val failedToAcquireTransaction: Timer =\n-            registry.timer(prefix :+ \"failed_to_acquire_transaction\")\n-          val releaseTransactionLock: Timer = registry.timer(prefix :+ \"release_transaction_lock\")\n+            registry.timer(Prefix :+ \"failed_to_acquire_transaction\")\n+          val releaseTransactionLock: Timer = registry.timer(Prefix :+ \"release_transaction_lock\")\n \n-          val stateValueCache = new CacheMetrics(registry, prefix :+ \"state_value_cache\")\n+          val stateValueCache = new CacheMetrics(registry, Prefix :+ \"state_value_cache\")"
  },
  {
    "id" : "f046d882-faa0-4b52-8914-b3adfcefe47a",
    "prId" : 6145,
    "comments" : [
      {
        "id" : "27612fdb-bbf0-4e13-8022-d2e4aef32517",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "@mziolekda Shall we keep these metrics separate for parallel vs. serial validation or merge them? In case of merging them I would suggest to rename `validate_submission` to `fetch_inputs`.",
        "createdAt" : "2020-05-28T13:06:54Z",
        "updatedAt" : "2020-05-29T09:35:24Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b9e5a3cf-9f14-479a-9aac-1b99d4197704",
        "parentId" : "27612fdb-bbf0-4e13-8022-d2e4aef32517",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "I would suggest merging. I have checked and we have never made a splash about those particular metrics to anyone.",
        "createdAt" : "2020-05-28T13:26:14Z",
        "updatedAt" : "2020-05-29T09:35:24Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "62cd3446-8ac2-461f-8f9e-b090f930a215",
        "parentId" : "27612fdb-bbf0-4e13-8022-d2e4aef32517",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "OK, will make sure to get rid of duplicates then.",
        "createdAt" : "2020-05-28T13:36:50Z",
        "updatedAt" : "2020-05-29T09:35:24Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe8713d4-736b-4e23-ac91-f26d83f36f7d",
        "parentId" : "27612fdb-bbf0-4e13-8022-d2e4aef32517",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Removed the duplicates -- @mziolekda @SamirTalwar-DA can you check if you are fine with the naming of the metrics, please?",
        "createdAt" : "2020-05-28T13:59:19Z",
        "updatedAt" : "2020-05-29T09:35:24Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0447e8536ddc4746873fdfac379b8c59fcf24fc7",
    "line" : null,
    "diffHunk" : "@@ -142,19 +142,48 @@ class Metrics(val registry: MetricRegistry) {\n         }\n \n         object validator {\n-          val prefix: MetricName = submission.prefix :+ \"validator\"\n+          private val Prefix: MetricName = submission.prefix :+ \"validator\"\n \n           val openEnvelope: Timer = registry.timer(prefix :+ \"open_envelope\")\n           val acquireTransactionLock: Timer = registry.timer(prefix :+ \"acquire_transaction_lock\")\n           val failedToAcquireTransaction: Timer =\n             registry.timer(prefix :+ \"failed_to_acquire_transaction\")\n           val releaseTransactionLock: Timer = registry.timer(prefix :+ \"release_transaction_lock\")\n-          val validateSubmission: Timer = registry.timer(prefix :+ \"validate_submission\")\n-          val processSubmission: Timer = registry.timer(prefix :+ \"process_submission\")\n-          val commitSubmission: Timer = registry.timer(prefix :+ \"commit_submission\")\n+          val validateSubmission\n+            : Timer = registry.timer(prefix :+ \"validate_submission\") // TODO(miklos-da): Misnomer -- same as 'fetch_inputs'."
  },
  {
    "id" : "3e522414-2d79-41e4-9552-e8582447c240",
    "prId" : 6043,
    "comments" : [
      {
        "id" : "e489e749-9876-4e41-812f-9a99621324cd",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "No new lines, please.",
        "createdAt" : "2020-05-20T10:23:37Z",
        "updatedAt" : "2020-05-20T12:50:18Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9cf6ca57-2766-45ae-bbc6-c5db3b1490b6",
        "parentId" : "e489e749-9876-4e41-812f-9a99621324cd",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6043/commits/658e4c90a7fdb0a9fcf7cce069084954262e4015",
        "createdAt" : "2020-05-20T10:58:48Z",
        "updatedAt" : "2020-05-20T12:50:19Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2936235bdbd9010386da40a1297477eb856f678a",
    "line" : null,
    "diffHunk" : "@@ -328,6 +322,14 @@ class Metrics(val registry: MetricRegistry) {\n           \"lookup_transaction_tree_by_id\")\n         val getActiveContracts: DatabaseMetrics = createDatabaseMetrics(\"get_active_contracts\")\n \n+        object translation {\n+"
  },
  {
    "id" : "bfb3a05f-ef5a-4205-aaa9-bfb6b0727d0f",
    "prId" : 5927,
    "comments" : [
      {
        "id" : "5c417cff-5ac8-4847-8848-9045c6ace150",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "The issue is great; I see no need for the comment.",
        "createdAt" : "2020-05-11T11:03:57Z",
        "updatedAt" : "2020-05-11T11:06:38Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "daea3691-b800-40ac-aacf-28f2ceaaa7b7",
        "parentId" : "5c417cff-5ac8-4847-8848-9045c6ace150",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "To make sure that people addressing the `FIXME` in this file are aware that there already is a ticket.",
        "createdAt" : "2020-05-11T11:08:57Z",
        "updatedAt" : "2020-05-11T11:08:57Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e23a0f7488d9ec6a8a0771473cb62cecccc568fd",
    "line" : 4,
    "diffHunk" : "@@ -244,6 +244,7 @@ class Metrics(val registry: MetricRegistry) {\n       val uploadPackages: Timer = registry.timer(prefix :+ \"upload_packages\")\n       val publishConfiguration: Timer = registry.timer(prefix :+ \"publish_configuration\")\n \n+      // FIXME Name mushing and inconsistencies here, tracked by https://github.com/digital-asset/daml/issues/5926"
  },
  {
    "id" : "6b416fc2-8ec8-46b9-9c36-0b97474b262b",
    "prId" : 5927,
    "comments" : [
      {
        "id" : "73010c61-3c86-45dc-a337-f0286858d944",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "It'd be great if we could come up with an API that allows for overall tracking of deserialization too. For example, passing the deserializer to the `DbDispatcher` as an optional second parameter.",
        "createdAt" : "2020-05-11T11:05:54Z",
        "updatedAt" : "2020-05-11T11:06:38Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "56b38d3a-b73a-4154-9ccc-6ebcb65e14dd",
        "parentId" : "73010c61-3c86-45dc-a337-f0286858d944",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I understand the point and I see the advantage, but this would require the `DbDispatcher` to be aware of the output and use deserialization in some non-dumb way. I'm afraid this would make `DbDispatcher` cover too many concerns. It sounds like probably we could do a better job at pulling apart `executeSql` in two parts (one that handles wait and the other that handles execution) and than we have a single place where we compose the two, possibly with the addition of deserization. I'll take this as an improvement for the future, thanks for raising this. :slightly_smiling_face: ",
        "createdAt" : "2020-05-11T11:12:28Z",
        "updatedAt" : "2020-05-11T11:12:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e23a0f7488d9ec6a8a0771473cb62cecccc568fd",
    "line" : 21,
    "diffHunk" : "@@ -273,12 +274,59 @@ class Metrics(val registry: MetricRegistry) {\n         val stopDeduplicatingCommand: Timer =\n           registry.timer(prefix :+ \"stop_deduplicating_command\")\n \n-        def deserialization(description: String): Timer =\n-          registry.timer(prefix :+ description :+ \"deserialization\")\n-        def wait(description: String): Timer = registry.timer(prefix :+ description :+ \"wait\")\n-        def exec(description: String): Timer = registry.timer(prefix :+ description :+ \"exec\")\n-        val waitAll: Timer = wait(\"all\")\n-        val execAll: Timer = exec(\"all\")\n+        private val createDatabaseMetrics: String => DatabaseMetrics =\n+          DatabaseMetrics(registry, prefix)(_)\n+\n+        private val overall = createDatabaseMetrics(\"all\")"
  },
  {
    "id" : "67d05b6b-4f8b-4c1d-b38f-d617634485cb",
    "prId" : 5790,
    "comments" : [
      {
        "id" : "fc6e1b51-2c42-45b2-a8c7-c83527da9cf5",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please add an `apply` method to create a new instance for a `MetricRegistry`.",
        "createdAt" : "2020-05-05T08:28:18Z",
        "updatedAt" : "2020-05-06T10:18:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 9,
    "diffHunk" : "@@ -0,0 +1,344 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.metrics\n+\n+import com.codahale.metrics.MetricRegistry.MetricSupplier\n+import com.codahale.metrics._\n+\n+class Metrics(val registry: MetricRegistry) {"
  },
  {
    "id" : "e834d3ab-3b41-4c09-9f77-2bb21cf35d1e",
    "prId" : 5790,
    "comments" : [
      {
        "id" : "b3d02273-0de7-4cab-91d6-10dc4447c7c8",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Wouldn't it make sense to use `MetricNaming` directly here to generate a method name? I.e., you wouldn't use this without a standardized metric name, right?",
        "createdAt" : "2020-05-05T08:35:10Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 177,
    "diffHunk" : "@@ -0,0 +1,344 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.metrics\n+\n+import com.codahale.metrics.MetricRegistry.MetricSupplier\n+import com.codahale.metrics._\n+\n+class Metrics(val registry: MetricRegistry) {\n+\n+  private def gauge[T](name: MetricName, metricSupplier: MetricSupplier[Gauge[_]]): Gauge[T] = {\n+    registry.remove(name)\n+    registry.gauge(name, metricSupplier).asInstanceOf[Gauge[T]]\n+  }\n+\n+  object daml {\n+    val prefix: MetricName = MetricName.DAML\n+\n+    object commands {\n+      val prefix: MetricName = daml.prefix :+ \"commands\"\n+\n+      val submissions: Timer = registry.timer(prefix :+ \"submissions\")\n+      val validation: Timer = registry.timer(prefix :+ \"validation\")\n+\n+      val failedInterpretations: Meter =\n+        registry.meter(prefix :+ \"failed_command_interpretations\")\n+      val deduplicatedCommands: Meter =\n+        registry.meter(prefix :+ \"deduplicated_commands\")\n+      val delayedSubmissions: Meter =\n+        registry.meter(prefix :+ \"delayed_submissions\")\n+      val validSubmissions: Meter =\n+        registry.meter(prefix :+ \"valid_submissions\")\n+    }\n+\n+    object execution {\n+      val prefix: MetricName = daml.prefix :+ \"execution\"\n+\n+      val lookupActiveContract: Timer = registry.timer(prefix :+ \"lookup_active_contract\")\n+      val lookupContractKey: Timer = registry.timer(prefix :+ \"lookup_contract_key\")\n+      val getLfPackage: Timer = registry.timer(prefix :+ \"get_lf_package\")\n+      val retry: Meter = registry.meter(prefix :+ \"retry\")\n+      val total: Timer = registry.timer(prefix :+ \"total\")\n+\n+    }\n+\n+    object kvutils {\n+      val prefix: MetricName = daml.prefix :+ \"kvutils\"\n+\n+      val openEnvelope: Timer = registry.timer(prefix :+ \"open_envelope\")\n+      val parseUpdates: Timer = registry.timer(prefix :+ \"parse_updates\")\n+\n+      object committer {\n+        val prefix: MetricName = kvutils.prefix :+ \"committer\"\n+\n+        // Timer (and count) of how fast submissions have been processed.\n+        val runTimer: Timer = registry.timer(prefix :+ \"run_timer\")\n+\n+        // Number of exceptions seen.\n+        val exceptions: Counter = registry.counter(prefix :+ \"exceptions\")\n+\n+        // Counter to monitor how many at a time and when kvutils is processing a submission.\n+        val processing: Counter = registry.counter(prefix :+ \"processing\")\n+\n+        def runTimer(committerName: String): Timer =\n+          registry.timer(prefix :+ committerName :+ \"run_timer\")\n+        def stepTimer(committerName: String, stepName: String): Timer =\n+          registry.timer(prefix :+ committerName :+ \"step_timers\" :+ stepName)\n+\n+        object last {\n+          val prefix: MetricName = committer.prefix :+ \"last\"\n+\n+          val lastRecordTimeGauge = new VarGauge[String](\"<none>\")\n+          registry.register(prefix :+ \"record_time\", lastRecordTimeGauge)\n+\n+          val lastEntryIdGauge = new VarGauge[String](\"<none>\")\n+          registry.register(prefix :+ \"entry_id\", lastEntryIdGauge)\n+\n+          val lastParticipantIdGauge = new VarGauge[String](\"<none>\")\n+          registry.register(prefix :+ \"participant_id\", lastParticipantIdGauge)\n+\n+          val lastExceptionGauge = new VarGauge[String](\"<none>\")\n+          registry.register(prefix :+ \"exception\", lastExceptionGauge)\n+        }\n+\n+        object config {\n+          val prefix: MetricName = committer.prefix :+ \"config\"\n+\n+          val accepts: Counter = registry.counter(prefix :+ \"accepts\")\n+          val rejections: Counter = registry.counter(prefix :+ \"rejections\")\n+        }\n+\n+        object packageUpload {\n+          val prefix: MetricName = committer.prefix :+ \"package_upload\"\n+\n+          val preloadTimer: Timer = registry.timer(prefix :+ \"preload_timer\")\n+          val decodeTimer: Timer = registry.timer(prefix :+ \"decode_timer\")\n+          val accepts: Counter = registry.counter(prefix :+ \"accepts\")\n+          val rejections: Counter = registry.counter(prefix :+ \"rejections\")\n+          def loadedPackages(value: () => Int): Gauge[Nothing] = {\n+            gauge(prefix :+ \"loaded_packages\", () => () => value())\n+          }\n+        }\n+\n+        object partyAllocation {\n+          val prefix: MetricName = committer.prefix :+ \"party_allocation\"\n+\n+          val accepts: Counter = registry.counter(prefix :+ \"accepts\")\n+          val rejections: Counter = registry.counter(prefix :+ \"rejections\")\n+        }\n+\n+        object transaction {\n+          val prefix: MetricName = committer.prefix :+ \"transaction\"\n+\n+          val runTimer: Timer = registry.timer(prefix :+ \"run_timer\")\n+          val interpretTimer: Timer = registry.timer(prefix :+ \"interpret_timer\")\n+          val accepts: Counter = registry.counter(prefix :+ \"accepts\")\n+\n+          def rejection(name: String): Counter =\n+            registry.counter(prefix :+ s\"rejections_$name\")\n+        }\n+      }\n+\n+      object submission {\n+        val prefix: MetricName = kvutils.prefix :+ \"submission\"\n+\n+        object conversion {\n+          val prefix: MetricName = submission.prefix :+ \"conversion\"\n+\n+          val transactionOutputs: Timer =\n+            registry.timer(prefix :+ \"transaction_outputs\")\n+          val transactionToSubmission: Timer =\n+            registry.timer(prefix :+ \"transaction_to_submission\")\n+          val archivesToSubmission: Timer =\n+            registry.timer(prefix :+ \"archives_to_submission\")\n+          val partyToSubmission: Timer =\n+            registry.timer(prefix :+ \"party_to_submission\")\n+          val configurationToSubmission: Timer =\n+            registry.timer(prefix :+ \"configuration_to_submission\")\n+        }\n+\n+        object validator {\n+          val prefix: MetricName = submission.prefix :+ \"validator\"\n+\n+          val openEnvelope: Timer = registry.timer(prefix :+ \"open_envelope\")\n+          val acquireTransactionLock: Timer = registry.timer(prefix :+ \"acquire_transaction_lock\")\n+          val failedToAcquireTransaction: Timer =\n+            registry.timer(prefix :+ \"failed_to_acquire_transaction\")\n+          val releaseTransactionLock: Timer = registry.timer(prefix :+ \"release_transaction_lock\")\n+          val validateSubmission: Timer = registry.timer(prefix :+ \"validate_submission\")\n+          val processSubmission: Timer = registry.timer(prefix :+ \"process_submission\")\n+          val commitSubmission: Timer = registry.timer(prefix :+ \"commit_submission\")\n+          val transformSubmission: Timer = registry.timer(prefix :+ \"transform_submission\")\n+\n+          object stateValueCache {\n+            val prefix: MetricName = validator.prefix :+ \"state_value_cache\"\n+            def size(value: () => Long): Gauge[Nothing] =\n+              gauge(prefix :+ \"size\", () => () => value())\n+            def weight(value: () => Long): Gauge[Nothing] =\n+              gauge(prefix :+ \"weight\", () => () => value())\n+          }\n+        }\n+      }\n+\n+      object writer {\n+        val prefix: MetricName = kvutils.prefix :+ \"writer\"\n+\n+        val commit: Timer = registry.timer(prefix :+ \"commit\")\n+      }\n+    }\n+\n+    object lapi {\n+      val prefix: MetricName = daml.prefix :+ \"lapi\"\n+\n+      def forMethod(name: String): Timer = registry.timer(prefix :+ name)"
  },
  {
    "id" : "371ab04d-128a-439e-9fcd-b56b3f0d4e56",
    "prId" : 5790,
    "comments" : [
      {
        "id" : "71fb747e-8679-4f50-b5a0-ff8dacc2d489",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      }\r\n\r\n```",
        "createdAt" : "2020-05-05T09:52:39Z",
        "updatedAt" : "2020-05-05T10:04:58Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 125,
    "diffHunk" : "@@ -120,6 +117,12 @@ class Metrics(val registry: MetricRegistry) {\n         }\n       }\n \n+      object reader {\n+        val prefix: MetricName = kvutils.prefix :+ \"reader\"\n+\n+        val openEnvelope: Timer = registry.timer(prefix :+ \"open_envelope\")\n+        val parseUpdates: Timer = registry.timer(prefix :+ \"parse_updates\")\n+      }"
  },
  {
    "id" : "c65d9b9c-4377-4ac8-aca5-e211254e5a12",
    "prId" : 5790,
    "comments" : [
      {
        "id" : "426f8b9e-09f1-45c2-96fe-16d222b06eb0",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "These variables are constants hence should be named as `Prefix` according to the Scala style guide:\r\nhttps://docs.scala-lang.org/style/naming-conventions.html#constants-values-variable-and-methods",
        "createdAt" : "2020-05-05T15:27:24Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 17,
    "diffHunk" : "@@ -0,0 +1,344 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.metrics\n+\n+import com.codahale.metrics.MetricRegistry.MetricSupplier\n+import com.codahale.metrics._\n+\n+class Metrics(val registry: MetricRegistry) {\n+\n+  private def gauge[T](name: MetricName, metricSupplier: MetricSupplier[Gauge[_]]): Gauge[T] = {\n+    registry.remove(name)\n+    registry.gauge(name, metricSupplier).asInstanceOf[Gauge[T]]\n+  }\n+\n+  object daml {\n+    val prefix: MetricName = MetricName.DAML"
  },
  {
    "id" : "c19b1d8f-4b9e-4144-9d8b-ce0a8d75de63",
    "prId" : 5790,
    "comments" : [
      {
        "id" : "db868855-0e09-4b6e-8ba3-601e6a738cb0",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "The first time this object gets loaded all the metrics will be registered. Is this overhead acceptable?",
        "createdAt" : "2020-05-05T15:28:11Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 1,
    "diffHunk" : "@@ -0,0 +1,344 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved."
  },
  {
    "id" : "da1fde1a-843d-437d-9867-a167488a239b",
    "prId" : 5790,
    "comments" : [
      {
        "id" : "a881f780-e261-481e-89e1-68559a185d02",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please use consistent formatting for these hierarchical companion objects (i.e., not leave a new line at the end of the object definition).",
        "createdAt" : "2020-05-05T15:28:48Z",
        "updatedAt" : "2020-05-06T10:18:01Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7234f1f69f87d95d1420a0faa8a6f2a70e0433f0",
    "line" : 43,
    "diffHunk" : "@@ -0,0 +1,344 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.metrics\n+\n+import com.codahale.metrics.MetricRegistry.MetricSupplier\n+import com.codahale.metrics._\n+\n+class Metrics(val registry: MetricRegistry) {\n+\n+  private def gauge[T](name: MetricName, metricSupplier: MetricSupplier[Gauge[_]]): Gauge[T] = {\n+    registry.remove(name)\n+    registry.gauge(name, metricSupplier).asInstanceOf[Gauge[T]]\n+  }\n+\n+  object daml {\n+    val prefix: MetricName = MetricName.DAML\n+\n+    object commands {\n+      val prefix: MetricName = daml.prefix :+ \"commands\"\n+\n+      val submissions: Timer = registry.timer(prefix :+ \"submissions\")\n+      val validation: Timer = registry.timer(prefix :+ \"validation\")\n+\n+      val failedInterpretations: Meter =\n+        registry.meter(prefix :+ \"failed_command_interpretations\")\n+      val deduplicatedCommands: Meter =\n+        registry.meter(prefix :+ \"deduplicated_commands\")\n+      val delayedSubmissions: Meter =\n+        registry.meter(prefix :+ \"delayed_submissions\")\n+      val validSubmissions: Meter =\n+        registry.meter(prefix :+ \"valid_submissions\")\n+    }\n+\n+    object execution {\n+      val prefix: MetricName = daml.prefix :+ \"execution\"\n+\n+      val lookupActiveContract: Timer = registry.timer(prefix :+ \"lookup_active_contract\")\n+      val lookupContractKey: Timer = registry.timer(prefix :+ \"lookup_contract_key\")\n+      val getLfPackage: Timer = registry.timer(prefix :+ \"get_lf_package\")\n+      val retry: Meter = registry.meter(prefix :+ \"retry\")\n+      val total: Timer = registry.timer(prefix :+ \"total\")\n+"
  }
]