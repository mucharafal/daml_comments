[
  {
    "id" : "764468a2-a657-46ed-a7b4-37991163d5c2",
    "prId" : 3344,
    "comments" : [
      {
        "id" : "82ad6c0b-38ca-47b9-b74a-0d0de092c4a4",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Nice catch.",
        "createdAt" : "2019-11-06T08:55:45Z",
        "updatedAt" : "2019-11-06T13:58:32Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dd528c9396bbfa0726510d93ad1c5197fc6af7fe",
    "line" : null,
    "diffHunk" : "@@ -40,9 +41,9 @@ object CommandSubmissionFlow {\n   def getStatus(tryResponse: Try[Empty]): Try[Status] = {\n     tryResponse.fold[Try[Status]](\n       {\n-        case GrpcStatusError(status) =>\n-          Success(Status(status.getCode.value(), status.getDescription))\n-        case other => Failure(other)\n+        case GrpcException(GrpcStatus(code, description), _) =>\n+          Success(Status(code.value(), description.getOrElse(\"\")))\n+        case NonFatal(other) => Failure(other)"
  },
  {
    "id" : "dcfe2e30-0a7a-4e2f-83e7-4dbaed534abb",
    "prId" : 3344,
    "comments" : [
      {
        "id" : "5e2d89fe-2115-4b73-9526-22c140610def",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "This pattern is everywhere. Perhaps extract it to the library with a helper?\r\n\r\nI don't think it's possible to overload the `unapply` to emit either an `io.grpc.Status` or a `com.google.rpc.status.Status` without some funky implicits, but that could also be an option if you know a nice way of doing it.",
        "createdAt" : "2019-11-06T09:05:06Z",
        "updatedAt" : "2019-11-06T13:58:32Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cc15df5a-e3bf-4bd7-a762-fc014030a218",
        "parentId" : "5e2d89fe-2115-4b73-9526-22c140610def",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Unfortunately it's not possible to overload based on the result type. I thought about adding an helper, I guess it could make sense adding it to the new library.",
        "createdAt" : "2019-11-06T09:56:29Z",
        "updatedAt" : "2019-11-06T13:58:32Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e2f23cd2-64a3-4b8b-9008-2c60f7cec0bd",
        "parentId" : "5e2d89fe-2115-4b73-9526-22c140610def",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Cool stuff: this method was actually not used anywhere. I deleted it. The helper is already done, so I'll check if it's actually used somewhere, otherwise I'll just revert. :wink: ",
        "createdAt" : "2019-11-06T10:32:34Z",
        "updatedAt" : "2019-11-06T13:58:32Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a3cac362-b531-4758-80de-4b77419670fe",
        "parentId" : "5e2d89fe-2115-4b73-9526-22c140610def",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's used in a couple of places. I'm a proponent of the YCRYOOT principle (_You Can Repeat Yourself Once Or Twice_) but I guess the helpers makes sense, so I'll leave it there.",
        "createdAt" : "2019-11-06T10:47:40Z",
        "updatedAt" : "2019-11-06T13:58:32Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90b6fdda-1cf2-4dc0-8fcd-855360b81723",
        "parentId" : "5e2d89fe-2115-4b73-9526-22c140610def",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : ":thinking: I should find a better name for YCRYOOT.",
        "createdAt" : "2019-11-06T10:48:44Z",
        "updatedAt" : "2019-11-06T13:58:32Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2113cb9-80b8-49f1-b76a-7742ad909808",
        "parentId" : "5e2d89fe-2115-4b73-9526-22c140610def",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3344/commits/4d55e0bfcaeee0308df54cc495c690e88693f275",
        "createdAt" : "2019-11-06T10:49:12Z",
        "updatedAt" : "2019-11-06T13:58:32Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dd528c9396bbfa0726510d93ad1c5197fc6af7fe",
    "line" : null,
    "diffHunk" : "@@ -40,9 +41,9 @@ object CommandSubmissionFlow {\n   def getStatus(tryResponse: Try[Empty]): Try[Status] = {\n     tryResponse.fold[Try[Status]](\n       {\n-        case GrpcStatusError(status) =>\n-          Success(Status(status.getCode.value(), status.getDescription))\n-        case other => Failure(other)\n+        case GrpcException(GrpcStatus(code, description), _) =>\n+          Success(Status(code.value(), description.getOrElse(\"\")))"
  }
]