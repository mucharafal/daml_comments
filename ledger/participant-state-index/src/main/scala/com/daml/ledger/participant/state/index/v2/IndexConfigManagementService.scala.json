[
  {
    "id" : "b2f7187a-5e0c-4d83-a9b9-615ad0566a69",
    "prId" : 3756,
    "comments" : [
      {
        "id" : "2706493b-19bd-4049-820a-f2eb75c4599d",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "start offsets normally are always inclusive. That's why we have to do the `+ 1` shenanigans:\r\nhttps://github.com/digital-asset/daml/blob/71205e1f78c810ed478d2b8e1afad9cc631d7c1e/ledger/sandbox/src/main/scala/com/digitalasset/platform/sandbox/stores/SandboxIndexAndWriteService.scala#L280",
        "createdAt" : "2019-12-06T09:49:26Z",
        "updatedAt" : "2019-12-13T17:13:57Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5ce989ef-01f3-4c63-978d-6fd599f60957",
        "parentId" : "2706493b-19bd-4049-820a-f2eb75c4599d",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I had the option of either making it inclusive and making lookupConfiguration return \"the next offset\" or making this exclusive. Since we're planning on going towards external offsets which we cannot \"+1\" it makes more sense to make it exclusive.",
        "createdAt" : "2019-12-06T11:12:32Z",
        "updatedAt" : "2019-12-13T17:13:57Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6e626a81c096637c202b8d3ca5d09dfa4e41393",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.index.v2\n+\n+import akka.NotUsed\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.v1.Configuration\n+import com.digitalasset.ledger.api.domain.ConfigurationEntry\n+\n+import scala.concurrent.Future\n+\n+/**\n+  * Serves as a backend to implement\n+  * [[com.digitalasset.ledger.api.v1.admin.config_management_service.ConfigManagementServiceGrpc]]\n+  *\n+  */\n+trait IndexConfigManagementService {\n+\n+  /** Looks up the current configuration, if set, and the offset at which\n+    * it is current. Offset can be used to subscribe to further configuration changes\n+    * using [[configurationEntries]]. */\n+  def lookupConfiguration(): Future[Option[(Long, Configuration)]]\n+\n+  /** Retrieve configuration entries. */\n+  def configurationEntries(startExclusive: Option[Long]): Source[ConfigurationEntry, NotUsed]"
  }
]