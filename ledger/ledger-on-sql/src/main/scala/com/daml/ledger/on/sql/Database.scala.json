[
  {
    "id" : "5c8af484-99a2-4eec-9122-adef8994737b",
    "prId" : 7525,
    "comments" : [
      {
        "id" : "5d945ea0-1d21-4309-a6c9-c0ef0ece33ef",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n```\r\n\r\nAdd `-Xsource:2.13` to the scalacopts for ledger-on-sql instead.",
        "createdAt" : "2020-10-01T15:01:55Z",
        "updatedAt" : "2020-10-01T15:56:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "248b1719-287b-4139-865c-a8db61b095d7",
        "parentId" : "5d945ea0-1d21-4309-a6c9-c0ef0ece33ef",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Is there a reason we don't do this everywhere?",
        "createdAt" : "2020-10-01T15:32:24Z",
        "updatedAt" : "2020-10-01T15:56:24Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d755745f-cdff-497e-a165-3bdf2aab0156",
        "parentId" : "5d945ea0-1d21-4309-a6c9-c0ef0ece33ef",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Only historical reasons, probably. The flag changes what will compile and what will not compile, so you are not 100% guaranteed to not run into trouble.",
        "createdAt" : "2020-10-01T15:34:46Z",
        "updatedAt" : "2020-10-01T15:56:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dca26c29-d21f-4afb-b0e2-36e566259168",
        "parentId" : "5d945ea0-1d21-4309-a6c9-c0ef0ece33ef",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Looks like we do. I'll just delete it.",
        "createdAt" : "2020-10-01T15:50:47Z",
        "updatedAt" : "2020-10-01T15:56:24Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f8c6b839ae9e9f6ab5b9641b851ed9bc7c99abb",
    "line" : null,
    "diffHunk" : "@@ -6,6 +6,9 @@ package com.daml.ledger.on.sql\n import java.sql.{Connection, SQLException}\n import java.util.concurrent.Executors\n \n+import com.daml.concurrent.FutureOf._"
  },
  {
    "id" : "325dc09a-3d22-4c33-9aa3-6dce510a8128",
    "prId" : 5869,
    "comments" : [
      {
        "id" : "40eb9c11-6f9a-43a3-b787-c8463d641d3f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: since you have a couple of parameters with the same type it could probably make sense to use named parameters.",
        "createdAt" : "2020-05-07T08:46:47Z",
        "updatedAt" : "2020-05-07T09:21:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43354121-ebe0-4c98-8e1c-bd8430e90aa9",
        "parentId" : "40eb9c11-6f9a-43a3-b787-c8463d641d3f",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good idea. Done.",
        "createdAt" : "2020-05-07T09:22:45Z",
        "updatedAt" : "2020-05-07T09:22:45Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1df655f9772e14639f3ad019652454e1549ffd00",
    "line" : 120,
    "diffHunk" : "@@ -200,7 +219,14 @@ object Database {\n \n     def migrate(): Database = {\n       flyway.migrate()\n-      new Database(system.queries, readerConnectionPool, writerConnectionPool, metrics)\n+      new Database("
  },
  {
    "id" : "dd3d9ff8-dd91-41fb-a9a4-aecf9d00d650",
    "prId" : 4607,
    "comments" : [
      {
        "id" : "ad281c11-4678-4bc3-ab0e-d0915310fce7",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Sharing migrations across sql dialects means we now share the maximum migration number as well, right?",
        "createdAt" : "2020-02-19T14:10:51Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9cbf074e-19e9-4005-9b55-97ededd98a94",
        "parentId" : "ad281c11-4678-4bc3-ab0e-d0915310fce7",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yup, absolutely. I think this is probably a good thing.",
        "createdAt" : "2020-02-19T15:02:14Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2631a6f3d08f69f84454f5b30c7ebcb7581b0e28",
    "line" : 15,
    "diffHunk" : "@@ -211,7 +211,10 @@ object Database {\n         .placeholders(Map(\"table.prefix\" -> TablePrefix).asJava)\n         .table(TablePrefix + Flyway.configure().getTable)\n         .dataSource(adminConnectionPool)\n-        .locations(s\"classpath:/com/daml/ledger/on/sql/migrations/${system.name}\")\n+        .locations(\n+          \"classpath:/com/daml/ledger/on/sql/migrations/common\","
  },
  {
    "id" : "d301db3e-b816-43bf-b2fe-7233e1fbb479",
    "prId" : 4607,
    "comments" : [
      {
        "id" : "68188288-ac8d-4a89-900e-7a96556c5b96",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Makes a lot of sense, thank you!",
        "createdAt" : "2020-02-19T16:05:55Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2631a6f3d08f69f84454f5b30c7ebcb7581b0e28",
    "line" : 5,
    "diffHunk" : "@@ -18,7 +18,7 @@ import scala.concurrent.duration.Duration\n import scala.concurrent.{ExecutionContext, Future}\n import scala.util.{Failure, Success}\n \n-class Database(\n+final class Database("
  },
  {
    "id" : "b86de545-5a9d-4c36-9d10-7c3a09398291",
    "prId" : 4232,
    "comments" : [
      {
        "id" : "c9b88eda-e743-4a65-aaf4-dcee48746032",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Conceptually an `RDBMS` could/should also provide the respective `Queries` value, to avoid mixing those up.",
        "createdAt" : "2020-01-28T12:14:01Z",
        "updatedAt" : "2020-01-28T15:32:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e2c9f20e-41c8-42d0-863a-ee08f2a9f026",
        "parentId" : "c9b88eda-e743-4a65-aaf4-dcee48746032",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Point taken. Inlined.",
        "createdAt" : "2020-01-28T15:36:43Z",
        "updatedAt" : "2020-01-28T15:36:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "baa516fe9b1c2465820d5555d6976ea4a43f9f58",
    "line" : null,
    "diffHunk" : "@@ -27,50 +28,103 @@ object Database {\n   // entries missing.\n   private val MaximumWriterConnectionPoolSize: Int = 1\n \n-  def owner(jdbcUrl: String)(implicit logCtx: LoggingContext): ResourceOwner[Database] =\n+  def owner(jdbcUrl: String)(\n+      implicit logCtx: LoggingContext\n+  ): ResourceOwner[UninitializedDatabase] =\n     (jdbcUrl match {\n       case url if url.startsWith(\"jdbc:h2:\") =>\n-        MultipleReaderSingleWriterDatabase.owner(jdbcUrl, new H2Queries)\n+        MultipleConnectionDatabase.owner(RDBMS.H2, new H2Queries, jdbcUrl)"
  },
  {
    "id" : "5f7943da-6b6e-4f91-b67e-3d381ab83534",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "ce14b73f-1dd2-484d-8138-876061118b13",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "👍 ",
        "createdAt" : "2020-01-22T12:31:26Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : 35,
    "diffHunk" : "@@ -3,33 +3,86 @@\n \n package com.daml.ledger.on.sql\n \n+import java.io.Closeable\n+\n import com.daml.ledger.on.sql.queries.Queries.InvalidDatabaseException\n import com.daml.ledger.on.sql.queries.{H2Queries, Queries, SqliteQueries}\n+import com.digitalasset.logging.{ContextualizedLogger, LoggingContext}\n+import com.zaxxer.hikari.HikariDataSource\n+import javax.sql.DataSource\n \n-sealed trait Database {\n+sealed trait Database extends Closeable {\n   val queries: Queries\n \n-  val maximumPoolSize: Option[Int]\n+  val readerConnectionPool: DataSource\n+\n+  val writerConnectionPool: DataSource\n }\n \n object Database {\n-  def apply(jdbcUrl: String): Database = {\n+\n+  // This *must* be 1 right now. We need to insert entries into the log in order; otherwise, we\n+  // might end up dispatching (head + 2) before (head + 1), which will result in missing out an\n+  // event when reading the log.\n+  //\n+  // To be able to process commits in parallel, we will need to fail reads and retry if there are\n+  // entries missing.\n+  private val MaximumWriterConnectionPoolSize: Int = 1"
  },
  {
    "id" : "0476b885-69a1-4e74-aa08-f22531a27cc0",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "2c96954c-705a-4fcb-a411-69e82aaf9444",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I don't quite understand why `SqliteDatabase` shares the same connection pool with just 1 connection between reading and writing. We could still use a separate connection for reading the data for the `ReadService`, or is there a problem with that?",
        "createdAt" : "2020-01-22T12:35:32Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "db56d2fc-e9e7-4106-afc9-1d6bd29af5b4",
        "parentId" : "2c96954c-705a-4fcb-a411-69e82aaf9444",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Nope, the file gets \"locked\" when we're in the middle of a transaction and trying to access it concurrently results in an exception.",
        "createdAt" : "2020-01-22T12:49:30Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eef546e5-af7f-48de-8cee-a158845970d6",
        "parentId" : "2c96954c-705a-4fcb-a411-69e82aaf9444",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Oh wow, that's ... unexpected. I thought it would \"queue\" up the write after the reads are done. Oh well.",
        "createdAt" : "2020-01-22T13:01:44Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c244626a-1e76-4fe7-b7ca-d4253cd39c6c",
        "parentId" : "2c96954c-705a-4fcb-a411-69e82aaf9444",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I think the JDBC driver is supposed to handle file system locks by retrying, but it doesn't right now.",
        "createdAt" : "2020-01-22T13:40:46Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : 66,
    "diffHunk" : "@@ -3,33 +3,86 @@\n \n package com.daml.ledger.on.sql\n \n+import java.io.Closeable\n+\n import com.daml.ledger.on.sql.queries.Queries.InvalidDatabaseException\n import com.daml.ledger.on.sql.queries.{H2Queries, Queries, SqliteQueries}\n+import com.digitalasset.logging.{ContextualizedLogger, LoggingContext}\n+import com.zaxxer.hikari.HikariDataSource\n+import javax.sql.DataSource\n \n-sealed trait Database {\n+sealed trait Database extends Closeable {\n   val queries: Queries\n \n-  val maximumPoolSize: Option[Int]\n+  val readerConnectionPool: DataSource\n+\n+  val writerConnectionPool: DataSource\n }\n \n object Database {\n-  def apply(jdbcUrl: String): Database = {\n+\n+  // This *must* be 1 right now. We need to insert entries into the log in order; otherwise, we\n+  // might end up dispatching (head + 2) before (head + 1), which will result in missing out an\n+  // event when reading the log.\n+  //\n+  // To be able to process commits in parallel, we will need to fail reads and retry if there are\n+  // entries missing.\n+  private val MaximumWriterConnectionPoolSize: Int = 1\n+\n+  def apply(jdbcUrl: String)(implicit loggingContext: LoggingContext): Database = {\n     jdbcUrl match {\n-      case url if url.startsWith(\"jdbc:h2:\") => new H2Database\n-      case url if url.startsWith(\"jdbc:sqlite:\") => new SqliteDatabase\n+      case url if url.startsWith(\"jdbc:h2:\") => new H2Database(jdbcUrl)\n+      case url if url.startsWith(\"jdbc:sqlite:\") => new SqliteDatabase(jdbcUrl)\n       case _ => throw new InvalidDatabaseException(jdbcUrl)\n     }\n   }\n \n-  final class H2Database extends Database {\n+  final class H2Database(jdbcUrl: String)(implicit loggingContext: LoggingContext)\n+      extends Database {\n     override val queries: Queries = new H2Queries\n \n-    override val maximumPoolSize: Option[Int] = None\n+    override val readerConnectionPool: DataSource with Closeable =\n+      newHikariDataSource(jdbcUrl, maximumPoolSize = None)\n+\n+    override val writerConnectionPool: DataSource with Closeable =\n+      newHikariDataSource(jdbcUrl, maximumPoolSize = Some(MaximumWriterConnectionPoolSize))\n+\n+    ContextualizedLogger.get(this.getClass).info(s\"Connected the ledger to $jdbcUrl.\")\n+\n+    override def close(): Unit = {\n+      readerConnectionPool.close()\n+      writerConnectionPool.close()\n+    }\n   }\n \n-  final class SqliteDatabase extends Database {\n+  final class SqliteDatabase(jdbcUrl: String)(implicit loggingContext: LoggingContext)\n+      extends Database {\n+    private val connectionPool: DataSource with Closeable ="
  },
  {
    "id" : "10b0d0b0-aa88-4f9e-aa3d-d905f1c1b7c5",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "c3a890e4-2333-4fec-a22c-19aedc24ba61",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to use `Resource`/`ResourceOwner`?",
        "createdAt" : "2020-01-22T12:40:10Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "da1aac1e-81a7-442f-bc56-2f4112354597",
        "parentId" : "c3a890e4-2333-4fec-a22c-19aedc24ba61",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Yes, but I'll need to make changes throughout kvutils to make it effective, so I want to do this as a separate task.",
        "createdAt" : "2020-01-22T13:42:09Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cfbd4856-9bfc-4c06-9eb4-c6dc570a4e3b",
        "parentId" : "c3a890e4-2333-4fec-a22c-19aedc24ba61",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Cool, consider hitting the three dots icon to create an issue for that if you want. :slightly_smiling_face: ",
        "createdAt" : "2020-01-22T14:19:53Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ae832fc-e979-43a4-a688-146b6bdfa002",
        "parentId" : "c3a890e4-2333-4fec-a22c-19aedc24ba61",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Changes made in #4177.",
        "createdAt" : "2020-01-23T11:24:00Z",
        "updatedAt" : "2020-01-23T11:24:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : 13,
    "diffHunk" : "@@ -3,33 +3,86 @@\n \n package com.daml.ledger.on.sql\n \n+import java.io.Closeable\n+\n import com.daml.ledger.on.sql.queries.Queries.InvalidDatabaseException\n import com.daml.ledger.on.sql.queries.{H2Queries, Queries, SqliteQueries}\n+import com.digitalasset.logging.{ContextualizedLogger, LoggingContext}\n+import com.zaxxer.hikari.HikariDataSource\n+import javax.sql.DataSource\n \n-sealed trait Database {\n+sealed trait Database extends Closeable {"
  },
  {
    "id" : "a5c909cd-8b68-46ea-8969-7bd39aec2c49",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "11c177d2-5896-46d1-8150-6c91976351a5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to make a field of this?",
        "createdAt" : "2020-01-22T12:41:25Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "db10452c-f806-4fbe-977c-8507fff6efc2",
        "parentId" : "11c177d2-5896-46d1-8150-6c91976351a5",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-01-22T14:08:45Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : null,
    "diffHunk" : "@@ -3,33 +3,86 @@\n \n package com.daml.ledger.on.sql\n \n+import java.io.Closeable\n+\n import com.daml.ledger.on.sql.queries.Queries.InvalidDatabaseException\n import com.daml.ledger.on.sql.queries.{H2Queries, Queries, SqliteQueries}\n+import com.digitalasset.logging.{ContextualizedLogger, LoggingContext}\n+import com.zaxxer.hikari.HikariDataSource\n+import javax.sql.DataSource\n \n-sealed trait Database {\n+sealed trait Database extends Closeable {\n   val queries: Queries\n \n-  val maximumPoolSize: Option[Int]\n+  val readerConnectionPool: DataSource\n+\n+  val writerConnectionPool: DataSource\n }\n \n object Database {\n-  def apply(jdbcUrl: String): Database = {\n+\n+  // This *must* be 1 right now. We need to insert entries into the log in order; otherwise, we\n+  // might end up dispatching (head + 2) before (head + 1), which will result in missing out an\n+  // event when reading the log.\n+  //\n+  // To be able to process commits in parallel, we will need to fail reads and retry if there are\n+  // entries missing.\n+  private val MaximumWriterConnectionPoolSize: Int = 1\n+\n+  def apply(jdbcUrl: String)(implicit loggingContext: LoggingContext): Database = {\n     jdbcUrl match {\n-      case url if url.startsWith(\"jdbc:h2:\") => new H2Database\n-      case url if url.startsWith(\"jdbc:sqlite:\") => new SqliteDatabase\n+      case url if url.startsWith(\"jdbc:h2:\") => new H2Database(jdbcUrl)\n+      case url if url.startsWith(\"jdbc:sqlite:\") => new SqliteDatabase(jdbcUrl)\n       case _ => throw new InvalidDatabaseException(jdbcUrl)\n     }\n   }\n \n-  final class H2Database extends Database {\n+  final class H2Database(jdbcUrl: String)(implicit loggingContext: LoggingContext)\n+      extends Database {\n     override val queries: Queries = new H2Queries\n \n-    override val maximumPoolSize: Option[Int] = None\n+    override val readerConnectionPool: DataSource with Closeable =\n+      newHikariDataSource(jdbcUrl, maximumPoolSize = None)\n+\n+    override val writerConnectionPool: DataSource with Closeable =\n+      newHikariDataSource(jdbcUrl, maximumPoolSize = Some(MaximumWriterConnectionPoolSize))\n+\n+    ContextualizedLogger.get(this.getClass).info(s\"Connected the ledger to $jdbcUrl.\")"
  },
  {
    "id" : "47ea4b2d-c8ff-4071-a3cd-7feabbe18242",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "7e7f228c-c253-4921-97ad-9d85bb8eea5e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Probably still worth making a field out of this.",
        "createdAt" : "2020-01-22T12:41:55Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : null,
    "diffHunk" : "@@ -3,33 +3,86 @@\n \n package com.daml.ledger.on.sql\n \n+import java.io.Closeable\n+\n import com.daml.ledger.on.sql.queries.Queries.InvalidDatabaseException\n import com.daml.ledger.on.sql.queries.{H2Queries, Queries, SqliteQueries}\n+import com.digitalasset.logging.{ContextualizedLogger, LoggingContext}\n+import com.zaxxer.hikari.HikariDataSource\n+import javax.sql.DataSource\n \n-sealed trait Database {\n+sealed trait Database extends Closeable {\n   val queries: Queries\n \n-  val maximumPoolSize: Option[Int]\n+  val readerConnectionPool: DataSource\n+\n+  val writerConnectionPool: DataSource\n }\n \n object Database {\n-  def apply(jdbcUrl: String): Database = {\n+\n+  // This *must* be 1 right now. We need to insert entries into the log in order; otherwise, we\n+  // might end up dispatching (head + 2) before (head + 1), which will result in missing out an\n+  // event when reading the log.\n+  //\n+  // To be able to process commits in parallel, we will need to fail reads and retry if there are\n+  // entries missing.\n+  private val MaximumWriterConnectionPoolSize: Int = 1\n+\n+  def apply(jdbcUrl: String)(implicit loggingContext: LoggingContext): Database = {\n     jdbcUrl match {\n-      case url if url.startsWith(\"jdbc:h2:\") => new H2Database\n-      case url if url.startsWith(\"jdbc:sqlite:\") => new SqliteDatabase\n+      case url if url.startsWith(\"jdbc:h2:\") => new H2Database(jdbcUrl)\n+      case url if url.startsWith(\"jdbc:sqlite:\") => new SqliteDatabase(jdbcUrl)\n       case _ => throw new InvalidDatabaseException(jdbcUrl)\n     }\n   }\n \n-  final class H2Database extends Database {\n+  final class H2Database(jdbcUrl: String)(implicit loggingContext: LoggingContext)\n+      extends Database {\n     override val queries: Queries = new H2Queries\n \n-    override val maximumPoolSize: Option[Int] = None\n+    override val readerConnectionPool: DataSource with Closeable =\n+      newHikariDataSource(jdbcUrl, maximumPoolSize = None)\n+\n+    override val writerConnectionPool: DataSource with Closeable =\n+      newHikariDataSource(jdbcUrl, maximumPoolSize = Some(MaximumWriterConnectionPoolSize))\n+\n+    ContextualizedLogger.get(this.getClass).info(s\"Connected the ledger to $jdbcUrl.\")\n+\n+    override def close(): Unit = {\n+      readerConnectionPool.close()\n+      writerConnectionPool.close()\n+    }\n   }\n \n-  final class SqliteDatabase extends Database {\n+  final class SqliteDatabase(jdbcUrl: String)(implicit loggingContext: LoggingContext)\n+      extends Database {\n+    private val connectionPool: DataSource with Closeable =\n+      newHikariDataSource(jdbcUrl, maximumPoolSize = Some(MaximumWriterConnectionPoolSize))\n+\n     override val queries: Queries = new SqliteQueries\n \n-    override val maximumPoolSize: Option[Int] = Some(1)\n+    override val readerConnectionPool: DataSource = connectionPool\n+\n+    override val writerConnectionPool: DataSource = connectionPool\n+\n+    ContextualizedLogger.get(this.getClass).info(s\"Connected the ledger to $jdbcUrl.\")"
  }
]