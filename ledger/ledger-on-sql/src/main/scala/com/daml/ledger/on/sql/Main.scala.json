[
  {
    "id" : "d9202221-0d99-4061-b20e-07350956fa71",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "7db5f33d-c03a-4f3a-9797-70231e78ff6c",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Looks like this concern is already covered by `extraConfigParser`.",
        "createdAt" : "2020-01-22T12:44:10Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dd9cbd04-41dd-4a0f-97e8-d1764335259a",
        "parentId" : "7db5f33d-c03a-4f3a-9797-70231e78ff6c",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "It is; would you rather I just use `get` here?",
        "createdAt" : "2020-01-22T13:44:32Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2681e23-8496-42e0-8138-90fe74a18a31",
        "parentId" : "7db5f33d-c03a-4f3a-9797-70231e78ff6c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's fine as is, the message is more telling, I'm just a bit disappointed that the constraint can't be handled in the type. Nothing necessarily in the scope of this PR of course.",
        "createdAt" : "2020-01-22T14:21:52Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : 19,
    "diffHunk" : "@@ -32,14 +33,22 @@ object Main extends App {\n       ()\n     }\n \n-    override def apply(participantId: ParticipantId, config: ExtraConfig)(\n+    override def apply(ledgerId: LedgerId, participantId: ParticipantId, config: ExtraConfig)(\n         implicit materializer: Materializer,\n-    ): KeyValueLedger =\n+    ): KeyValueLedger = {\n+      val jdbcUrl = config.jdbcUrl.getOrElse {"
  },
  {
    "id" : "934d4f0f-d22d-4ec6-badc-ae995dc63f0c",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "17a7ba10-cf77-425d-a30b-b6bcbdb219c2",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n        newLoggingContext { implicit logCtx =>\r\n```\r\nI would suggest sticking to a consistent naming for this. The worst thing that can happen by having two implicit `LoggingContext`s with different names is a compile-time implicit divergence, so not that bad, but why not making this part of our habits? :slightly_smiling_face: ",
        "createdAt" : "2020-01-22T12:46:03Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d1d622f-ccff-4276-8a6b-6e34deba7277",
        "parentId" : "17a7ba10-cf77-425d-a30b-b6bcbdb219c2",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Agreed. I prefer spelling it out but consistency is more important.",
        "createdAt" : "2020-01-22T13:44:13Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : null,
    "diffHunk" : "@@ -32,14 +33,22 @@ object Main extends App {\n       ()\n     }\n \n-    override def apply(participantId: ParticipantId, config: ExtraConfig)(\n+    override def apply(ledgerId: LedgerId, participantId: ParticipantId, config: ExtraConfig)(\n         implicit materializer: Materializer,\n-    ): KeyValueLedger =\n+    ): KeyValueLedger = {\n+      val jdbcUrl = config.jdbcUrl.getOrElse {\n+        throw new IllegalStateException(\"No JDBC URL provided.\")\n+      }\n       Await.result(\n-        SqlLedgerReaderWriter(participantId = participantId, jdbcUrl = config.jdbcUrl.getOrElse {\n-          throw new IllegalStateException(\"No JDBC URL provided.\")\n-        }),\n+        newLoggingContext { implicit loggingContext =>"
  },
  {
    "id" : "893b7bd8-4dfb-479c-81fe-e4db5e2108f6",
    "prId" : 3940,
    "comments" : [
      {
        "id" : "c8f6cd60-499f-4318-bb36-7966e38415bb",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n          throw new IllegalStateException(\"No JDBC URL provided.\")\r\n```",
        "createdAt" : "2020-01-13T15:47:54Z",
        "updatedAt" : "2020-01-15T14:19:40Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "54297f1691f54ac9cff06e5a3d56297e6e32b48b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,50 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.on.sql\n+\n+import akka.stream.Materializer\n+import com.daml.ledger.participant.state.kvutils.app.{\n+  Config,\n+  KeyValueLedger,\n+  LedgerConstructor,\n+  Runner\n+}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import scopt.OptionParser\n+\n+import scala.concurrent.Await\n+import scala.concurrent.ExecutionContext.Implicits.global\n+import scala.concurrent.duration.DurationInt\n+\n+object Main extends App {\n+  Runner(\"SQL Ledger\", SqlLedgerConstructor).run(args)\n+\n+  case class ExtraConfig(jdbcUrl: Option[String])\n+\n+  object SqlLedgerConstructor extends LedgerConstructor[ExtraConfig] {\n+    override val defaultExtraConfig: ExtraConfig = ExtraConfig(\n+      jdbcUrl = None,\n+    )\n+\n+    override def extraConfigParser(parser: OptionParser[Config[ExtraConfig]]): Unit = {\n+      parser\n+        .opt[String](\"jdbc-url\")\n+        .required()\n+        .text(\"The URL used to connect to the database.\")\n+        .action(\n+          (jdbcUrl, config) => config.copy(extra = config.extra.copy(jdbcUrl = Some(jdbcUrl))))\n+      ()\n+    }\n+\n+    override def apply(participantId: ParticipantId, config: ExtraConfig)(\n+        implicit materializer: Materializer,\n+    ): KeyValueLedger =\n+      Await.result(\n+        SqlLedgerReaderWriter(participantId = participantId, jdbcUrl = config.jdbcUrl.getOrElse {\n+          throw new IllegalStateException(\"No root directory provided.\")"
  }
]