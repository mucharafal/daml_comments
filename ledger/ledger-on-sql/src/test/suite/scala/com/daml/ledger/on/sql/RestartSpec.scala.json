[
  {
    "id" : "47b385ab-7a2b-4ca3-bdc2-04a7676801ee",
    "prId" : 4266,
    "comments" : [
      {
        "id" : "f5e08c29-e571-46fb-b561-89b21db518e3",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "if you want you can also use `newLoggingContext` after the `in` method when defining tests. Whatever you feel makes more sense.",
        "createdAt" : "2020-01-29T16:39:27Z",
        "updatedAt" : "2020-01-30T08:46:16Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a10b4170-4458-4a33-86fa-54de1835083a",
        "parentId" : "f5e08c29-e571-46fb-b561-89b21db518e3",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I'll leave it here for now but I'll consider it when this gets refactored into `ParticipantStateIntegrationSpecBase`.",
        "createdAt" : "2020-01-30T09:27:31Z",
        "updatedAt" : "2020-01-30T09:27:31Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cd26d997fecd90132911e15c629bf2f5534b4465",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@\n  private def start(id: String): Resource[KeyValueParticipantState] = {\n    newLoggingContext { implicit logCtx =>\n      val ledgerId: LedgerString = LedgerString.assertFromString(s\"ledger-${UUID.randomUUID()}\")\n      val participantId: ParticipantId = LedgerString.assertFromString(\"participant\")"
  }
]