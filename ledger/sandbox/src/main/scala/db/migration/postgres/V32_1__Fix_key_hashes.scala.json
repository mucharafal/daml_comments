[
  {
    "id" : "0160e2bc-eedd-4c23-8217-fbf2fdb2db75",
    "prId" : 6107,
    "comments" : [
      {
        "id" : "6567505d-e4ed-40a9-8b48-fed4b15dc8d6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think this should be at the top of the `finally` block.",
        "createdAt" : "2020-05-26T14:47:05Z",
        "updatedAt" : "2020-05-26T15:27:30Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2071588e-0209-4e52-aecc-cdd37d5b0ae8",
        "parentId" : "6567505d-e4ed-40a9-8b48-fed4b15dc8d6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6107/commits/9d2970c75ef67b8505c66f345dba70f38d09eca1",
        "createdAt" : "2020-05-26T15:29:15Z",
        "updatedAt" : "2020-05-26T15:29:15Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d2970c75ef67b8505c66f345dba70f38d09eca1",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package db.migration.postgres\n+\n+import com.daml.lf.data.Ref\n+import com.daml.lf.transaction.Node.GlobalKey\n+import com.daml.platform.store.serialization.ValueSerializer\n+import org.flywaydb.core.api.migration.{BaseJavaMigration, Context}\n+\n+final class V32_1__Fix_key_hashes extends BaseJavaMigration {\n+\n+  private val SELECT_KEYS =\n+    \"select participant_events.contract_id, participant_events.template_id, create_key_value from participant_events inner join participant_contracts on participant_events.contract_id = participant_contracts.contract_id where create_key_value is not null\"\n+\n+  private val FIX_HASH =\n+    \"update participant_contracts set create_key_hash = ? where contract_id = ?\"\n+\n+  override def migrate(context: Context): Unit = {\n+    val conn = context.getConnection\n+    var selectKeys: java.sql.Statement = null\n+    var fixHash: java.sql.PreparedStatement = null\n+    var keysRows: java.sql.ResultSet = null\n+    try {\n+      fixHash = conn.prepareStatement(FIX_HASH)\n+\n+      selectKeys = conn.createStatement()\n+      keysRows = selectKeys.executeQuery(SELECT_KEYS)\n+\n+      while (keysRows.next()) {\n+        val contractId = keysRows.getString(\"contract_id\")\n+        val rawTemplateId = keysRows.getString(\"template_id\")\n+        val templateId = Ref.Identifier.assertFromString(rawTemplateId)\n+        val rawKeyValue = keysRows.getBinaryStream(\"create_key_value\")\n+        val keyValue = ValueSerializer.deserializeValue(rawKeyValue)\n+        val key = GlobalKey.assertBuild(templateId, keyValue.value)\n+        val hashBytes = key.hash.bytes.toInputStream\n+\n+        fixHash.setBinaryStream(1, hashBytes)\n+        fixHash.setString(2, contractId)\n+        fixHash.addBatch()\n+      }\n+      val _ = fixHash.executeBatch()\n+\n+    } finally {\n+      if (selectKeys != null) {\n+        selectKeys.close()\n+      }\n+      if (fixHash != null) {\n+        fixHash.close()\n+      }\n+      if (keysRows != null) {\n+        keysRows.close()\n+      }"
  }
]