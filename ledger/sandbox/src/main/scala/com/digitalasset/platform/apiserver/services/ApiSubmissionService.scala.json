[
  {
    "id" : "2e169597-64eb-4a32-94bd-cb164e16a788",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "5b57e2fd-d771-4120-8757-d2926f04e9a4",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n        result.interpretationTimeNanos,\r\n      )\r\n```",
        "createdAt" : "2020-06-29T07:42:44Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : null,
    "diffHunk" : "@@ -256,7 +256,11 @@ final class ApiSubmissionService private (\n   ): Future[SubmissionResult] = {\n     metrics.daml.commands.validSubmissions.mark()\n     writeService\n-      .submitTransaction(result.submitterInfo, result.transactionMeta, result.transaction)\n+      .submitTransaction(\n+        result.submitterInfo,\n+        result.transactionMeta,\n+        result.transaction,\n+        result.interpretationTimeNanos)"
  },
  {
    "id" : "1a56d1b2-d026-4d49-8db2-77c702c066e1",
    "prId" : 5556,
    "comments" : [
      {
        "id" : "ecea3d32-824d-4770-b6cc-cc9bfb2a32c0",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Is this performant enough? `Delayed.Future` uses a singleton daemon `java.util.Timer`.",
        "createdAt" : "2020-04-14T20:42:06Z",
        "updatedAt" : "2020-04-15T20:21:39Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "995d828d-cff4-4276-aa9e-d48a46cf9d2e",
        "parentId" : "ecea3d32-824d-4770-b6cc-cc9bfb2a32c0",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`java.util.Timer` should be able to scale to thousands of timers without any issue.",
        "createdAt" : "2020-04-16T06:16:15Z",
        "updatedAt" : "2020-04-16T06:16:16Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "caf9d1f2bbb0cc73b08e6dd55b7517095e943e0c",
    "line" : null,
    "diffHunk" : "@@ -243,15 +246,32 @@ final class ApiSubmissionService private (\n       case Some(result) =>\n         Future.successful(result)\n       case None =>\n-        transactionInfo match {\n-          case CommandExecutionResult(submitterInfo, transactionMeta, transaction, _) =>\n-            Timed.future(\n-              Metrics.submittedTransactionsTimer,\n-              FutureConverters.toScala(\n-                writeService.submitTransaction(submitterInfo, transactionMeta, transaction)))\n+        // Submit transactions such that they arrive at the ledger sequencer exactly when record time equals ledger time.\n+        // If the ledger time of the transaction is far in the future (farther than the expected latency),\n+        // the submission to the WriteService is delayed.\n+        val submitAt = transactionInfo.transactionMeta.ledgerEffectiveTime.toInstant\n+          .minus(timeModel.avgTransactionLatency)\n+        val submissionDelay = Duration.between(Instant.now, submitAt)\n+        if (submissionDelay.isNegative)\n+          submitTransaction(transactionInfo)\n+        else {\n+          Metrics.delayedSubmissionsMeter.mark()\n+          val scalaDelay = scala.concurrent.duration.Duration.fromNanos(submissionDelay.toNanos)\n+          Delayed.Future.by(scalaDelay)(submitTransaction(transactionInfo))"
  },
  {
    "id" : "4c777dcc-7d12-4506-8fa0-5f029a0ca80e",
    "prId" : 5521,
    "comments" : [
      {
        "id" : "ad95e278-6e81-4624-8712-5c4e8d613cf3",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Why not keeping it in the more restricted scope?",
        "createdAt" : "2020-04-09T14:25:21Z",
        "updatedAt" : "2020-04-09T15:49:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94ab13de-6c16-4231-a8be-d3760ea5b3fa",
        "parentId" : "ad95e278-6e81-4624-8712-5c4e8d613cf3",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Gonna move it back. I wanted to use it for execution stuff but I changed my mind.",
        "createdAt" : "2020-04-09T15:03:53Z",
        "updatedAt" : "2020-04-09T15:49:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "072e099b67551ea1874d977f133523d48512c445",
    "line" : null,
    "diffHunk" : "@@ -55,6 +57,9 @@ object ApiSubmissionService {\n \n   type RecordUpdate = Either[LfError, (Transaction, BlindingInfo)]\n \n+  val MetricPrefix: MetricName ="
  },
  {
    "id" : "534e3ce4-9967-4f3b-b32c-25a9d481ca64",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "e28d34bd-eef5-442d-9172-807df8dc7aac",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Thanks for keeping this `private`.",
        "createdAt" : "2020-03-09T12:37:22Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : 47,
    "diffHunk" : "@@ -48,65 +53,77 @@ import com.digitalasset.platform.store.ErrorCause\n import io.grpc.Status\n import scalaz.syntax.tag._\n \n+import scala.collection.breakOut\n import scala.compat.java8.FutureConverters\n+import scala.compat.java8.FutureConverters.CompletionStageOps\n import scala.concurrent.{ExecutionContext, Future}\n import scala.util.{Failure, Success, Try}\n \n object ApiSubmissionService {\n \n+  private type TransactionInfo = (SubmitterInfo, TransactionMeta, Transaction.Transaction)"
  },
  {
    "id" : "4362af75-4862-4cf9-a6a4-d9a3f9516279",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "55beb1fb-8ec0-4aaf-a7ff-2af94506cf41",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If I'm reading this correctly, we're waiting for the party allocation to be submitted, but not to be completed. It's probably outside of the scope of this, but could this introduce a racy behavior?",
        "createdAt" : "2020-03-09T13:55:59Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "35fe404a-74a4-49bc-8196-4b1f6e3dc975",
        "parentId" : "55beb1fb-8ec0-4aaf-a7ff-2af94506cf41",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yeah, I'm sure it can; pointed this out in the PR description. Think we should wait until the party has finished allocating?",
        "createdAt" : "2020-03-09T14:13:36Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4447fbea-a58e-4167-bde3-793ac27517e5",
        "parentId" : "55beb1fb-8ec0-4aaf-a7ff-2af94506cf41",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Apologies, I should have read the description with more attention. It's probably enough to know this for now, the problem is that we don't have an equivalent \"synchronous\" version of party allocation (something like the command service for command submission/completion). We should explore this at some point.",
        "createdAt" : "2020-03-09T14:16:30Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -211,25 +228,50 @@ final class ApiSubmissionService private (\n           contractStore.lookupContractKey(commands.submitter, _),\n           commands.commands\n         )\n-      submissionResult <- handleResult(res)\n+      transactionInfo <- res.fold(error => {\n+        Metrics.failedInterpretationsMeter.mark()\n+        Future.failed(grpcError(toStatus(error)))\n+      }, Future.successful)\n+      partyAllocationResults <- if (configuration.implicitPartyAllocation) {\n+        allocateParties(transactionInfo)\n+      } else {\n+        Future.successful(Seq.empty)\n+      }\n+      submissionResult <- partyAllocationResults.find(_ != SubmissionResult.Acknowledged) match {\n+        case None => handleResult(transactionInfo)\n+        case Some(result) => Future.successful(result)\n+      }"
  },
  {
    "id" : "ab58db21-6f09-4f1f-903a-60084eef866d",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "878e680f-0f01-4233-86ee-8003138fefa5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Since `CanBuildFrom` goes away in Scala 2.13, I would start favoring views or iterators over `breakOut`.",
        "createdAt" : "2020-03-09T13:57:34Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "09052f39-8354-44a8-b98c-f8c03e9c4010",
        "parentId" : "878e680f-0f01-4233-86ee-8003138fefa5",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Me too, but WartRemover keeps complaining that I'm using `Any`.",
        "createdAt" : "2020-03-09T14:12:30Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -211,25 +228,50 @@ final class ApiSubmissionService private (\n           contractStore.lookupContractKey(commands.submitter, _),\n           commands.commands\n         )\n-      submissionResult <- handleResult(res)\n+      transactionInfo <- res.fold(error => {\n+        Metrics.failedInterpretationsMeter.mark()\n+        Future.failed(grpcError(toStatus(error)))\n+      }, Future.successful)\n+      partyAllocationResults <- if (configuration.implicitPartyAllocation) {\n+        allocateParties(transactionInfo)\n+      } else {\n+        Future.successful(Seq.empty)\n+      }\n+      submissionResult <- partyAllocationResults.find(_ != SubmissionResult.Acknowledged) match {\n+        case None => handleResult(transactionInfo)\n+        case Some(result) => Future.successful(result)\n+      }\n     } yield submissionResult\n \n-  private def handleResult(\n-      res: scala.Either[ErrorCause, (SubmitterInfo, TransactionMeta, Transaction.Transaction)],\n-  ) =\n-    res match {\n-      case Right((submitterInfo, transactionMeta, transaction)) =>\n+  private def allocateParties(transactionInfo: TransactionInfo): Future[Seq[SubmissionResult]] = {\n+    val parties: Set[Party] = transactionInfo._3.nodes.values.flatMap(_.informeesOfNode)(breakOut)"
  },
  {
    "id" : "5281b2dc-c98f-4ac0-a66c-b93b6e4280a5",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "22d5f166-f2bd-4524-b692-020d6bd0f8e0",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This can now probably be renamed to `submitTransaction`.",
        "createdAt" : "2020-03-09T13:58:32Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -211,25 +228,50 @@ final class ApiSubmissionService private (\n           contractStore.lookupContractKey(commands.submitter, _),\n           commands.commands\n         )\n-      submissionResult <- handleResult(res)\n+      transactionInfo <- res.fold(error => {\n+        Metrics.failedInterpretationsMeter.mark()\n+        Future.failed(grpcError(toStatus(error)))\n+      }, Future.successful)\n+      partyAllocationResults <- if (configuration.implicitPartyAllocation) {\n+        allocateParties(transactionInfo)\n+      } else {\n+        Future.successful(Seq.empty)\n+      }\n+      submissionResult <- partyAllocationResults.find(_ != SubmissionResult.Acknowledged) match {\n+        case None => handleResult(transactionInfo)\n+        case Some(result) => Future.successful(result)\n+      }\n     } yield submissionResult\n \n-  private def handleResult(\n-      res: scala.Either[ErrorCause, (SubmitterInfo, TransactionMeta, Transaction.Transaction)],\n-  ) =\n-    res match {\n-      case Right((submitterInfo, transactionMeta, transaction)) =>\n+  private def allocateParties(transactionInfo: TransactionInfo): Future[Seq[SubmissionResult]] = {\n+    val parties: Set[Party] = transactionInfo._3.nodes.values.flatMap(_.informeesOfNode)(breakOut)\n+    partyManagementService.getParties(parties.toSeq).flatMap { partyDetails =>\n+      val missingParties = parties -- partyDetails.map(_.party)\n+      if (missingParties.nonEmpty) {\n+        logger.info(s\"Implicitly allocating the parties: ${missingParties.mkString(\", \")}\")\n+        Future.sequence(\n+          missingParties.toSeq\n+            .map(name =>\n+              writeService.allocateParty(\n+                hint = Some(name),\n+                displayName = Some(name),\n+                // TODO: Just like the ApiPartyManagementService, this should do proper validation.\n+                submissionId = v1.SubmissionId.assertFromString(UUID.randomUUID().toString),\n+            ))\n+            .map(_.toScala))\n+      } else {\n+        Future.successful(Seq.empty)\n+      }\n+    }\n+  }\n+\n+  private def handleResult(transactionInfo: TransactionInfo): Future[SubmissionResult] ="
  },
  {
    "id" : "5ac9910e-27db-4a28-8c38-0e503a10d42c",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "98dca408-72dc-4402-af44-443fcba75dd2",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would suggest changing this to `allocateMissingInformees` or something similar, which is more specific.",
        "createdAt" : "2020-03-09T14:02:44Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e32b088c-7b5d-4347-880c-26ec8968d258",
        "parentId" : "98dca408-72dc-4402-af44-443fcba75dd2",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-09T14:57:49Z",
        "updatedAt" : "2020-03-09T14:59:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -211,25 +228,50 @@ final class ApiSubmissionService private (\n           contractStore.lookupContractKey(commands.submitter, _),\n           commands.commands\n         )\n-      submissionResult <- handleResult(res)\n+      transactionInfo <- res.fold(error => {\n+        Metrics.failedInterpretationsMeter.mark()\n+        Future.failed(grpcError(toStatus(error)))\n+      }, Future.successful)\n+      partyAllocationResults <- if (configuration.implicitPartyAllocation) {\n+        allocateParties(transactionInfo)\n+      } else {\n+        Future.successful(Seq.empty)\n+      }\n+      submissionResult <- partyAllocationResults.find(_ != SubmissionResult.Acknowledged) match {\n+        case None => handleResult(transactionInfo)\n+        case Some(result) => Future.successful(result)\n+      }\n     } yield submissionResult\n \n-  private def handleResult(\n-      res: scala.Either[ErrorCause, (SubmitterInfo, TransactionMeta, Transaction.Transaction)],\n-  ) =\n-    res match {\n-      case Right((submitterInfo, transactionMeta, transaction)) =>\n+  private def allocateParties(transactionInfo: TransactionInfo): Future[Seq[SubmissionResult]] = {"
  },
  {
    "id" : "be27dec1-00ef-4b99-b004-32e90862d6d6",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "a7fbc83d-5629-4ccd-b405-c51544c1ea72",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If you could move nested logic into their own method I believe the readability would benefit.",
        "createdAt" : "2020-03-09T14:03:37Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "093d94d9-9112-4c02-9064-80247fbefa88",
        "parentId" : "a7fbc83d-5629-4ccd-b405-c51544c1ea72",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-09T14:57:54Z",
        "updatedAt" : "2020-03-09T14:59:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -211,25 +228,50 @@ final class ApiSubmissionService private (\n           contractStore.lookupContractKey(commands.submitter, _),\n           commands.commands\n         )\n-      submissionResult <- handleResult(res)\n+      transactionInfo <- res.fold(error => {\n+        Metrics.failedInterpretationsMeter.mark()\n+        Future.failed(grpcError(toStatus(error)))\n+      }, Future.successful)\n+      partyAllocationResults <- if (configuration.implicitPartyAllocation) {"
  },
  {
    "id" : "4538c58d-4aae-4d8c-ad63-05d1b5105daa",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "5f5cf53a-356f-4f56-be30-bf48dd7afe5e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "With the usual recommendation of moving nested logic in a for-comprehension to its own method, I would favor something like\r\n```\r\nif (!partyAllocationResults.contains(SubmissionResult.Acknowledged))\r\n  submitTransaction(transactionInfo)\r\nelse\r\n  Future.successful(result)\r\n```",
        "createdAt" : "2020-03-09T14:07:29Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82b83841-bef5-4c1c-8d87-ff7e29df8424",
        "parentId" : "5f5cf53a-356f-4f56-be30-bf48dd7afe5e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "My approach of course has the downside of necessarily traversing the whole collection, so use your judgement.",
        "createdAt" : "2020-03-09T14:10:13Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3806edc6-d54a-43b8-b376-3e99e6d5bbf4",
        "parentId" : "5f5cf53a-356f-4f56-be30-bf48dd7afe5e",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Problem is that `result` comes from the return value of `find`, so this doesn't help.",
        "createdAt" : "2020-03-09T14:42:06Z",
        "updatedAt" : "2020-03-09T14:59:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -211,25 +228,50 @@ final class ApiSubmissionService private (\n           contractStore.lookupContractKey(commands.submitter, _),\n           commands.commands\n         )\n-      submissionResult <- handleResult(res)\n+      transactionInfo <- res.fold(error => {\n+        Metrics.failedInterpretationsMeter.mark()\n+        Future.failed(grpcError(toStatus(error)))\n+      }, Future.successful)\n+      partyAllocationResults <- if (configuration.implicitPartyAllocation) {\n+        allocateParties(transactionInfo)\n+      } else {\n+        Future.successful(Seq.empty)\n+      }\n+      submissionResult <- partyAllocationResults.find(_ != SubmissionResult.Acknowledged) match {"
  },
  {
    "id" : "e4f80299-b04e-4336-86cc-f9a82649bdea",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "dc6d1d46-b694-411a-a21b-5354a80e4b36",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "You don't need the full `TransactionInfo` inside the method. The transaction alone seems to be sufficient.",
        "createdAt" : "2020-03-09T14:20:15Z",
        "updatedAt" : "2020-03-09T14:59:53Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b464f6ef-74ff-41eb-89a1-e418882c2bea",
        "parentId" : "dc6d1d46-b694-411a-a21b-5354a80e4b36",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-09T14:58:29Z",
        "updatedAt" : "2020-03-09T14:59:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -211,25 +228,50 @@ final class ApiSubmissionService private (\n           contractStore.lookupContractKey(commands.submitter, _),\n           commands.commands\n         )\n-      submissionResult <- handleResult(res)\n+      transactionInfo <- res.fold(error => {\n+        Metrics.failedInterpretationsMeter.mark()\n+        Future.failed(grpcError(toStatus(error)))\n+      }, Future.successful)\n+      partyAllocationResults <- if (configuration.implicitPartyAllocation) {\n+        allocateParties(transactionInfo)\n+      } else {\n+        Future.successful(Seq.empty)\n+      }\n+      submissionResult <- partyAllocationResults.find(_ != SubmissionResult.Acknowledged) match {\n+        case None => handleResult(transactionInfo)\n+        case Some(result) => Future.successful(result)\n+      }\n     } yield submissionResult\n \n-  private def handleResult(\n-      res: scala.Either[ErrorCause, (SubmitterInfo, TransactionMeta, Transaction.Transaction)],\n-  ) =\n-    res match {\n-      case Right((submitterInfo, transactionMeta, transaction)) =>\n+  private def allocateParties(transactionInfo: TransactionInfo): Future[Seq[SubmissionResult]] = {"
  },
  {
    "id" : "8dd3a12b-cf39-4805-ab5b-041c96044da3",
    "prId" : 4532,
    "comments" : [
      {
        "id" : "3f51cc77-6554-4cfe-8172-dc3b6120b6f7",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Unnecessary string interpolation.",
        "createdAt" : "2020-02-14T16:43:21Z",
        "updatedAt" : "2020-02-15T15:45:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dbd49503-e324-45c2-a395-b5cb9060dcee",
        "parentId" : "3f51cc77-6554-4cfe-8172-dc3b6120b6f7",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Took care of this, and others around it. Thanks!",
        "createdAt" : "2020-02-15T15:44:08Z",
        "updatedAt" : "2020-02-15T15:45:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68d515d40507c5874ecc55d80ce5abcafc53a013",
    "line" : null,
    "diffHunk" : "@@ -131,20 +131,20 @@ final class ApiSubmissionService private (\n                 Success(())\n \n               case Success(Overloaded) =>\n-                logger.debug(s\"Submission has failed due to back pressure\")\n+                logger.info(s\"Submission has failed due to back pressure\")"
  },
  {
    "id" : "9d4d0ae5-75e9-458d-8f6d-f7bd0fe971a2",
    "prId" : 4532,
    "comments" : [
      {
        "id" : "eaa35182-f673-4b66-9812-85d806608d85",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Unnecessary space at the end of the string.",
        "createdAt" : "2020-02-14T16:43:39Z",
        "updatedAt" : "2020-02-15T15:45:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "68d515d40507c5874ecc55d80ce5abcafc53a013",
    "line" : null,
    "diffHunk" : "@@ -131,20 +131,20 @@ final class ApiSubmissionService private (\n                 Success(())\n \n               case Success(Overloaded) =>\n-                logger.debug(s\"Submission has failed due to back pressure\")\n+                logger.info(s\"Submission has failed due to back pressure\")\n                 Failure(Status.RESOURCE_EXHAUSTED.asRuntimeException)\n \n               case Success(NotSupported) =>\n-                logger.debug(s\"Submission of command was not supported\")\n+                logger.warn(s\"Submission of command was not supported\")\n                 Failure(Status.INVALID_ARGUMENT.asRuntimeException)\n \n               case Success(InternalError(reason)) =>\n-                logger.debug(\n+                logger.error(\n                   s\"Submission of command failed due to an internal error, reason=$reason \")"
  },
  {
    "id" : "3b622857-506a-4e2c-8e07-0033908f8753",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "32e005d1-8fe5-49d2-8e4e-a43e3826f4f7",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to pass in a clock in the constructor to more easily drive tests?",
        "createdAt" : "2020-02-20T09:36:28Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6a859d68-50da-4176-a25d-3a8927df1d88",
        "parentId" : "32e005d1-8fe5-49d2-8e4e-a43e3826f4f7",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The command deduplication window should be driven by UTC time. If we were to change that to a custom clock, we would need to make sure the ledger (which can do additional command deduplication) uses the same clock.",
        "createdAt" : "2020-02-25T08:49:26Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : 95,
    "diffHunk" : "@@ -99,10 +114,49 @@ final class ApiSubmissionService private (\n     val failedInterpretationsMeter: Meter =\n       metrics.meter(\"daml.lapi.command_submission_service.failed_command_interpretations\")\n \n+    val deduplicatedCommandsMeter: Meter =\n+      metrics.meter(\"daml.lapi.command_submission_service.deduplicated_commands\")\n+\n     val submittedTransactionsTimer: Timer =\n       metrics.timer(\"daml.lapi.command_submission_service.submitted_transactions\")\n   }\n \n+  private def deduplicateAndRecordOnLedger(commands: ApiCommands)(\n+      implicit logCtx: LoggingContext): Future[Unit] = {\n+    val deduplicationKey = commands.submitter + \"%\" + commands.commandId.unwrap\n+    val submittedAt = Instant.now"
  },
  {
    "id" : "fc1b1515-a7af-42b8-a46c-2fbd0ad28800",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "14b594ec-a471-45c6-bdda-d818122b77f7",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If you only want to catch both `StatusRuntimeException`s and `StatusException`s you can use the extractors in `//libs-scala/grpc-utils`.",
        "createdAt" : "2020-02-20T09:39:01Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : null,
    "diffHunk" : "@@ -99,10 +114,49 @@ final class ApiSubmissionService private (\n     val failedInterpretationsMeter: Meter =\n       metrics.meter(\"daml.lapi.command_submission_service.failed_command_interpretations\")\n \n+    val deduplicatedCommandsMeter: Meter =\n+      metrics.meter(\"daml.lapi.command_submission_service.deduplicated_commands\")\n+\n     val submittedTransactionsTimer: Timer =\n       metrics.timer(\"daml.lapi.command_submission_service.submitted_transactions\")\n   }\n \n+  private def deduplicateAndRecordOnLedger(commands: ApiCommands)(\n+      implicit logCtx: LoggingContext): Future[Unit] = {\n+    val deduplicationKey = commands.submitter + \"%\" + commands.commandId.unwrap\n+    val submittedAt = Instant.now\n+    val ttl = submittedAt.plusNanos(commands.ttl.getOrElse(configuration.maxTtl).toNanos)\n+\n+    submissionService.deduplicateCommand(deduplicationKey, submittedAt, ttl).flatMap {\n+      case CommandDeduplicationNew =>\n+        recordOnLedger(commands)\n+          .andThen {\n+            case Success(_) =>\n+              submissionService.updateCommandResult(deduplicationKey, submittedAt, Right(()))\n+            case Failure(error: StatusRuntimeException) =>"
  },
  {
    "id" : "b043795c-d6c0-4f6d-a130-959cd5584133",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "abc91993-1fbf-4d35-90bd-ce27b60cd877",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Do you think it would make sense to put the function passed to transform as a private method and combine the two with `transform` in a separate place?",
        "createdAt" : "2020-02-20T09:41:42Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : null,
    "diffHunk" : "@@ -164,10 +196,32 @@ final class ApiSubmissionService private (\n           commands.commands\n         )\n       submissionResult <- handleResult(res)\n-    } yield submissionResult\n+    } yield submissionResult).transform {"
  }
]