[
  {
    "id" : "aea70cf4-34c1-47c5-81de-346bce40062d",
    "prId" : 2739,
    "comments" : [
      {
        "id" : "51634f3d-7f86-43d3-9ff5-f76a0f75b69d",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "this `match` is really just a `map`.",
        "createdAt" : "2019-09-04T07:10:39Z",
        "updatedAt" : "2019-09-11T10:46:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ac3bcd307e2d601598569750bf6c67817e64928e",
    "line" : null,
    "diffHunk" : "@@ -145,10 +157,13 @@ class ActiveContractsManager[ACS](initialState: => ACS)(implicit ACS: ACS => Act\n                 ats.copy(\n                   errs = contractCheck(absCoid, Exercise).fold(errs)(errs + _),\n                   acc = Some(if (ne.consuming) {\n-                    acc.removeContract(absCoid, (acc lookupContract absCoid).flatMap(_.key) match {\n+                    val keyO = (acc lookupContract absCoid)\n+                      .collect({ case c: ActiveContract => c })\n+                      .flatMap(_.key) match {"
  }
]