[
  {
    "id" : "016a738e-173c-438b-a6d6-07ec8f8e3325",
    "prId" : 6170,
    "comments" : [
      {
        "id" : "2a32866c-84b7-4599-9ae7-7e841cbbf4f3",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think you could keep the logic around `lastOption` within this class and make `nextPageOffset: T => Option[Off]`. I expect we always will want to use the last element anyway.",
        "createdAt" : "2020-05-29T16:57:29Z",
        "updatedAt" : "2020-05-29T18:42:36Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "63c0d590-8677-4327-9c63-091ecc69259c",
        "parentId" : "2a32866c-84b7-4599-9ae7-7e841cbbf4f3",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I think it should be `T => Off` but I would not call it `nextPageOffset` in this case... it would be `extractOffset`, or just `f` -- the type should be enough",
        "createdAt" : "2020-05-29T18:16:44Z",
        "updatedAt" : "2020-05-29T18:42:36Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8ad8cd76-bfa3-4e44-abde-43de0ca54840",
        "parentId" : "2a32866c-84b7-4599-9ae7-7e841cbbf4f3",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "in any case, I agree with you @gerolf-da. It will always be the last element from the vector. I like the new signature better... Thanks!. I would also consider removing the scaladoc for this function :)... I think it is clear from the function signature what this function does.",
        "createdAt" : "2020-05-29T18:50:47Z",
        "updatedAt" : "2020-05-29T18:52:45Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "caca135acbe7339424a6d365c11b9b5a925c5d49",
    "line" : null,
    "diffHunk" : "@@ -51,33 +50,30 @@ object PaginatingAsyncStream {\n     * a single [[Source]], passing the last seen event's ledger [[Offset]] and node index to the\n     * next iteration query, so it can continue reading events from this point.\n     *\n-    * This is to implement pagination based on ledger offset and event node index.\n+    * This is to implement pagination based on generic offset.\n     * The main purpose of the pagination is to break down large queries\n     * into smaller batches. The reason for this is that we are currently using\n     * simple blocking JDBC APIs and a long-running stream would end up\n     * occupying a thread in the DB pool, severely limiting the ability\n     * of keeping multiple, concurrent, long-running streams while serving\n     * lookup calls.\n     *\n-    * @param initialOffset initial ledger [[Offset]]\n-    * @param extractOffsetAndNodeIndex function that extracts [[Offset]] and node index from the result entry of type [[T]]\n-    * @param query a function that takes [[Offset]] and optional node index to start pagination from\n+    * @param startFromOffset initial offset\n+    * @param nextPageOffset function that returns next page offset or [[None]] when no more pagination is required\n+    * @param query a function that fetches results starting from provided offset\n+    * @tparam Off the type of the offset\n     * @tparam T the type of the items returned in each call\n     */\n-  def streamFrom[T](initialOffset: Offset, extractOffsetAndNodeIndex: T => (Offset, Int))(\n-      query: (Offset, Option[Int]) => Future[Vector[T]]\n+  def streamFrom[Off, T](startFromOffset: Off, nextPageOffset: Vector[T] => Option[Off])("
  },
  {
    "id" : "bac09ecc-6fa5-4e18-bd9d-c16abf4f7ee3",
    "prId" : 6083,
    "comments" : [
      {
        "id" : "a8bfa1f2-0fb4-4dec-a5bc-70efadfe9abb",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  def paginatingFrom[T](firstPageOffset: Offset, getFollowingPageOffset: T => (Offset, Int))(\r\n```\r\nI would suggest to couple this with some generous use of named parameters to make it clear from the function call of what is going on. Don't settle necessarily with the names I suggested, feel free to improve them.",
        "createdAt" : "2020-05-29T07:40:57Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f0cbfc57-5d93-4a1b-9343-f9b6813d8ce3",
        "parentId" : "a8bfa1f2-0fb4-4dec-a5bc-70efadfe9abb",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Adding a descriptive docstring here seems like a good choice too.",
        "createdAt" : "2020-05-29T07:41:58Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fc616a4c4006e700ebe1e9c0a9d52519af9130a",
    "line" : null,
    "diffHunk" : "@@ -44,4 +45,23 @@ object PaginatingAsyncStream {\n       }\n       .flatMapConcat(Source(_))\n   }\n+\n+  def apply[T](start: Offset, f: T => (Offset, Int))("
  },
  {
    "id" : "8b73139d-0b51-49f5-b19c-1c0ee06599bc",
    "prId" : 6083,
    "comments" : [
      {
        "id" : "49d0827a-8c90-4035-b172-1ebf1127b49d",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n          }(DirectExecutionContext) // should run on the same thread pool as the query, avoids context switch for a cheap operation\r\n```\r\nWe've never commented our uses for the direct execution context but we should probably start doing this.",
        "createdAt" : "2020-05-29T07:43:42Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "83ab9d7e-f15c-468f-8301-23e85c724ba3",
        "parentId" : "49d0827a-8c90-4035-b172-1ebf1127b49d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "> We've never commented our uses for the direct execution context but we should probably start doing this.\r\n\r\nI am not sure about the value of this comment, it should be clear from the context why we are using the `DirectExecutionContext` plus the goal of this PR is not documenting the existing functionality ;)",
        "createdAt" : "2020-05-29T12:46:31Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "32f2e4b8-078c-41df-8891-a59bdf3937dc",
        "parentId" : "49d0827a-8c90-4035-b172-1ebf1127b49d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I don't think execution context are ever clear from the context.\r\n\r\n> the goal of this PR is not documenting the existing functionality ;)\r\n\r\nI see you copied and pasted this from above. Apologies for that, I couldn't see it in the diff.\r\n\r\nFeel free to address this comment or not.",
        "createdAt" : "2020-05-29T13:16:10Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "812abdbc-b3b9-4286-a565-180f261ad8d4",
        "parentId" : "49d0827a-8c90-4035-b172-1ebf1127b49d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-05-29T14:51:04Z",
        "updatedAt" : "2020-05-29T14:51:04Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fc616a4c4006e700ebe1e9c0a9d52519af9130a",
    "line" : null,
    "diffHunk" : "@@ -44,4 +45,23 @@ object PaginatingAsyncStream {\n       }\n       .flatMapConcat(Source(_))\n   }\n+\n+  def apply[T](start: Offset, f: T => (Offset, Int))(\n+      query: (Offset, Option[Int]) => Future[Vector[T]]\n+  ): Source[T, NotUsed] = {\n+    Source\n+      .unfoldAsync(Option((start, Option.empty[Int]))) {\n+        case None =>\n+          Future.successful(None) // finished reading the whole thing\n+        case Some((prevOffset, prevNodeIndex)) =>\n+          query(prevOffset, prevNodeIndex).map { result =>\n+            val newState = result.lastOption.map { t =>\n+              val event: (Offset, Int) = f(t)\n+              (event._1, Some(event._2))\n+            }\n+            Some((newState, result))\n+          }(DirectExecutionContext)"
  },
  {
    "id" : "f4be3bbf-c759-4356-a947-55a10cbe2356",
    "prId" : 6083,
    "comments" : [
      {
        "id" : "9142a77c-6773-40ec-bef4-b90f1020d5d6",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  def streamFrom[Off, T, Ix](initialOffset: Off, extractOffsetAndNodeIndex: T => (Off, Ix))(\r\n      query: (Off, Option[Ix]) => Future[Vector[T]]\r\n```",
        "createdAt" : "2020-05-29T15:25:13Z",
        "updatedAt" : "2020-05-29T15:25:14Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "627e8037-5985-4a6d-ac3e-c8dec06821e2",
        "parentId" : "9142a77c-6773-40ec-bef4-b90f1020d5d6",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yeah, that makes sense, I will do this refactoring in a follow-up PR, don't want to wait for another build.",
        "createdAt" : "2020-05-29T15:28:54Z",
        "updatedAt" : "2020-05-29T15:28:54Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ec511801-ac71-4159-8f21-02522a5873a9",
        "parentId" : "9142a77c-6773-40ec-bef4-b90f1020d5d6",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@S11001001 is there any specific reason why you listed the type parameters in this order:\r\n`[Off, T, Ix]`?\r\n\r\nI would do `[Off, Ix, T]`. You get `T` from `Off` and `Ix`.",
        "createdAt" : "2020-05-29T15:37:52Z",
        "updatedAt" : "2020-05-29T15:39:32Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ffcc2714-e4a2-449a-ba79-7d057f43938c",
        "parentId" : "9142a77c-6773-40ec-bef4-b90f1020d5d6",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "When in doubt I do first occurrence, left to right, just as an automatic generalization algorithm would likely choose. `Off, T, Ix` is the order of first occurrence. I don't care super hard as long as they're abstract.",
        "createdAt" : "2020-05-29T15:39:36Z",
        "updatedAt" : "2020-05-29T15:39:36Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1e575a03-bd75-4088-aad0-18473da5f07b",
        "parentId" : "9142a77c-6773-40ec-bef4-b90f1020d5d6",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I was thinking about this as well, but initially thought that we might as well be very specific here. \r\nBut of course, I have just noticed that we would need to do something similar for `CommandCompletionsReader`, which doesn't use any pagination at all at the moment, where we don't have a \"node index\" and would set the `Ix` type parameter to `Unit`.",
        "createdAt" : "2020-05-29T15:40:30Z",
        "updatedAt" : "2020-05-29T15:40:30Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "51bd2d6e-2437-4095-bf90-79412ad699b2",
        "parentId" : "9142a77c-6773-40ec-bef4-b90f1020d5d6",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I would say that [a concrete type opposes the goal of specificity](https://typelevel.org/blog/2017/09/05/three-types-of-strings.html). It permits data mangling and conjuration from thin air, whereas the abstraction makes clear that the function is agnostic with respect to the data represented by the three tparams, and won't conjure any Offsets or Ints itself, never mind compare them or perform other operations.",
        "createdAt" : "2020-05-29T15:46:42Z",
        "updatedAt" : "2020-05-29T15:46:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6fc616a4c4006e700ebe1e9c0a9d52519af9130a",
    "line" : 32,
    "diffHunk" : "@@ -44,4 +45,41 @@ object PaginatingAsyncStream {\n       }\n       .flatMapConcat(Source(_))\n   }\n+\n+  /**\n+    * Concatenates the results of multiple asynchronous calls into\n+    * a single [[Source]], passing the last seen event's ledger [[Offset]] and node index to the\n+    * next iteration query, so it can continue reading events from this point.\n+    *\n+    * This is to implement pagination based on ledger offset and event node index.\n+    * The main purpose of the pagination is to break down large queries\n+    * into smaller batches. The reason for this is that we are currently using\n+    * simple blocking JDBC APIs and a long-running stream would end up\n+    * occupying a thread in the DB pool, severely limiting the ability\n+    * of keeping multiple, concurrent, long-running streams while serving\n+    * lookup calls.\n+    *\n+    * @param initialOffset initial ledger [[Offset]]\n+    * @param extractOffsetAndNodeIndex function that extracts [[Offset]] and node index from the result entry of type [[T]]\n+    * @param query a function that takes [[Offset]] and optional node index to start pagination from\n+    * @tparam T the type of the items returned in each call\n+    */\n+  def streamFrom[T](initialOffset: Offset, extractOffsetAndNodeIndex: T => (Offset, Int))(\n+      query: (Offset, Option[Int]) => Future[Vector[T]]"
  },
  {
    "id" : "69747393-66fa-4c2a-91e1-efcfc3546169",
    "prId" : 5181,
    "comments" : [
      {
        "id" : "b5470ff6-6d48-4819-a502-c132a952f19b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "@gerolf-da This, and...",
        "createdAt" : "2020-03-25T12:37:47Z",
        "updatedAt" : "2020-03-25T14:43:37Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "de51a118c24adc46da99a09073bee4661f4203ba",
    "line" : 26,
    "diffHunk" : "@@ -41,7 +40,7 @@ object PaginatingAsyncStream {\n             val resultSize = result.size.toLong"
  },
  {
    "id" : "f07d5655-f2f0-48c7-b353-eb914f9e4b9f",
    "prId" : 5181,
    "comments" : [
      {
        "id" : "dca0201e-67e3-4038-8903-60cf205a980f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "@gerolf-da ...this, and...",
        "createdAt" : "2020-03-25T12:38:02Z",
        "updatedAt" : "2020-03-25T14:43:37Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "de51a118c24adc46da99a09073bee4661f4203ba",
    "line" : 30,
    "diffHunk" : "@@ -41,7 +40,7 @@ object PaginatingAsyncStream {\n             val resultSize = result.size.toLong\n             val newQueryOffset = if (resultSize < pageSize) None else Some(queryOffset + pageSize)\n             Some(newQueryOffset -> result)\n-          }(executionContext)\n+          }(DirectExecutionContext)"
  },
  {
    "id" : "d4791af5-d4d8-44c0-bd48-6ba3965e6e02",
    "prId" : 5091,
    "comments" : [
      {
        "id" : "6c843861-1dad-47a4-9eca-c4a618109d77",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Similar to @stefanobaghino-da's comment in `JdbcLedgerDao`, please change back to use the execution context explicitly.",
        "createdAt" : "2020-03-19T20:03:50Z",
        "updatedAt" : "2020-03-20T14:39:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c7532ff-55ce-425d-a939-15dc4dd2216e",
        "parentId" : "6c843861-1dad-47a4-9eca-c4a618109d77",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-20T14:38:05Z",
        "updatedAt" : "2020-03-20T14:39:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3cf8839b6f6b186f8bec7348f27339747eb6a4e",
    "line" : null,
    "diffHunk" : "@@ -9,8 +9,9 @@ import akka.stream.scaladsl.Source\n import scala.concurrent.{ExecutionContext, Future}\n \n object PaginatingAsyncStream {\n-  def apply[T](pageSize: Int, executionContext: ExecutionContext)(\n-      queryPage: Long => Future[List[T]]): Source[T, NotUsed] = {\n+  def apply[T](pageSize: Int)(queryPage: Long => Future[List[T]])("
  }
]