[
  {
    "id" : "44525d64-f971-4080-ad48-a806d7b80e27",
    "prId" : 3744,
    "comments" : [
      {
        "id" : "6f3c257b-768a-4013-b3f2-ce5d26a824ea",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "This isn't used anymore so we can drop it for now. ",
        "createdAt" : "2019-12-05T10:53:29Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "23b2d6c1-b86d-41f4-b5e2-65604a7320f9",
        "parentId" : "6f3c257b-768a-4013-b3f2-ce5d26a824ea",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed in 9ac958eb4.",
        "createdAt" : "2019-12-05T11:01:14Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d8204b7c377ce994002fb11ce1227c245747b3d0",
    "line" : null,
    "diffHunk" : "@@ -64,4 +64,34 @@ object PollingUtils {\n     go(1, minWait.min(maxWait).max(50.milliseconds))\n   }\n \n+  def pollSingleUntilPersisted[T](poll: () => Future[Option[T]])("
  },
  {
    "id" : "e7b24256-8b5d-4be2-9f82-31b947ed3164",
    "prId" : 2194,
    "comments" : [
      {
        "id" : "35474431-d8c1-4690-b878-66c49fd99413",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\nobject PollingUtils {\r\n```\r\nNot sure it's worth making this a `case object`.",
        "createdAt" : "2019-07-17T12:57:37Z",
        "updatedAt" : "2019-07-18T04:20:59Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "848717af9c07474e7fae355da54c904ec52b1295",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.services.admin\n+\n+import akka.actor.Scheduler\n+import akka.pattern.after\n+import com.digitalasset.platform.common.util.{DirectExecutionContext => DE}\n+import org.slf4j.{Logger, LoggerFactory}\n+\n+import scala.concurrent.Future\n+import scala.concurrent.duration.{DurationInt, FiniteDuration}\n+\n+case object PollingUtils {"
  },
  {
    "id" : "d145f350-b15d-4de3-a1e6-50745899cbc4",
    "prId" : 2194,
    "comments" : [
      {
        "id" : "38104068-4fd4-467f-8cd1-57d28500f036",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n              s\"'$description' not yet persisted, backing off for $waitTime...\")\r\n```\r\nIt probably looks better but it's still probably better to not do this, especially if case is meaningful (I guess it may be the case for parties).",
        "createdAt" : "2019-07-17T13:31:19Z",
        "updatedAt" : "2019-07-18T04:20:59Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "848717af9c07474e7fae355da54c904ec52b1295",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.services.admin\n+\n+import akka.actor.Scheduler\n+import akka.pattern.after\n+import com.digitalasset.platform.common.util.{DirectExecutionContext => DE}\n+import org.slf4j.{Logger, LoggerFactory}\n+\n+import scala.concurrent.Future\n+import scala.concurrent.duration.{DurationInt, FiniteDuration}\n+\n+case object PollingUtils {\n+\n+  private val logger: Logger = LoggerFactory.getLogger(PollingUtils.getClass)\n+\n+  /**\n+    * Continuously polls the given service to check if the given item has been persisted.\n+    *\n+    * Despite the `go` inner function not being stack-safe per se, only one stack frame will be on\n+    * the stack at any given time since the \"recursive\" invocation happens on a different thread.\n+    *\n+    * The backoff waiting time are applied after the first poll returns without a result (i.e. the first call is not delayed).\n+    *\n+    * @param poll               The service, returning a collection of items\n+    * @param check              Returns true iff the service returned all items that are being waited for\n+    * @param description        A human readable description of the item that is being waited for, for logging purposes\n+    * @param minWait            The minimum waiting time - will not be enforced if less than `maxWait`\n+    *                           Does not make sense to set this lower than the OS scheduler threshold\n+    *                           Anyway always padded to 50 milliseconds\n+    * @param maxWait            The maximum waiting time - takes precedence over `minWait` and `backoffProgression`\n+    *                           Does not make sense to set this lower than the OS scheduler threshold\n+    *                           Anyway always padded to 50 milliseconds\n+    * @param backoffProgression How the following backoff time is computed as a function of the current one - `maxWait` takes precedence though\n+    * @return The number of attempts before the item was found wrapped in a [[Future]]\n+    */\n+  def pollUntilPersisted[T](poll: () => Future[T])(\n+      check: T => Boolean,\n+      description: String,\n+      minWait: FiniteDuration,\n+      maxWait: FiniteDuration,\n+      backoffProgression: FiniteDuration => FiniteDuration,\n+      scheduler: Scheduler): Future[Int] = {\n+    def go(attempt: Int, waitTime: FiniteDuration): Future[Int] = {\n+      logger.debug(s\"Polling for '$description' being persisted (attempt #$attempt)...\")\n+      poll()\n+        .flatMap {\n+          case persisted if check(persisted) => Future.successful(attempt)\n+          case _ =>\n+            logger.debug(\n+              s\"'${description.capitalize}' not yet persisted, backing off for $waitTime...\")"
  }
]