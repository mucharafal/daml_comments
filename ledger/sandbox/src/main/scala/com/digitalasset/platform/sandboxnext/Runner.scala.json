[
  {
    "id" : "35b97956-f84f-44e2-acc6-efd76d08d0ce",
    "prId" : 6052,
    "comments" : [
      {
        "id" : "4d40617e-9a3f-43d8-86c5-0735d7bede7c",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Why not come up with a decent default? For the state value cache, we cap it at 128 MB in Sandbox.",
        "createdAt" : "2020-05-20T14:45:10Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46d08d8b-0ffa-4066-ab04-bba7e5659b6a",
        "parentId" : "4d40617e-9a3f-43d8-86c5-0735d7bede7c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I think 0 is a decent default, considering that it's the default with the other set of options and that its effect is really minor for the average sandbox user. I'll add this to the options in a way that is consistent across sandbox-classic and sandbox.",
        "createdAt" : "2020-05-20T17:14:58Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aed38ccc-7d12-4a8e-9cc1-64b9f6f547b4",
        "parentId" : "4d40617e-9a3f-43d8-86c5-0735d7bede7c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6052/commits/84e260534bcdf942034701834c03f59440b2b134",
        "createdAt" : "2020-05-20T17:31:33Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : null,
    "diffHunk" : "@@ -121,6 +123,7 @@ class Runner(config: SandboxConfig) extends ResourceOwner[Port] {\n                   config.metricsReporter,\n                   config.metricsReportingInterval,\n                 )\n+                lfValueTranslationCache: LfValueTranslation.Cache = Cache.none"
  },
  {
    "id" : "23ce2483-3971-4f00-a035-0c6b9b7de7a8",
    "prId" : 6052,
    "comments" : [
      {
        "id" : "e03a08cc-7673-4990-9f7b-aaff5b8997bc",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n                  lfValueTranslationCache = lfValueTranslationCache,\r\n```",
        "createdAt" : "2020-05-20T14:45:25Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : null,
    "diffHunk" : "@@ -167,6 +170,7 @@ class Runner(config: SandboxConfig) extends ResourceOwner[Port] {\n                     allowExistingSchema = true,\n                   ),\n                   metrics = metrics,\n+                  lfValueTranslationCache = lfValueTranslationCache"
  },
  {
    "id" : "bf3f729a-f8f7-45f7-bd7c-074c69ace5f0",
    "prId" : 5728,
    "comments" : [
      {
        "id" : "2e53b36d-2ce5-409a-a0f4-1c28bebb72b8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think it'd be useful to add a test case to ensure that the packages are available and can be both listed and used after a reset.",
        "createdAt" : "2020-04-27T08:27:22Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d297dbc5-cb7d-415d-b6f0-62414be93cae",
        "parentId" : "2e53b36d-2ce5-409a-a0f4-1c28bebb72b8",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Added a test case in b4d5a7f.",
        "createdAt" : "2020-04-29T11:26:26Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : 87,
    "diffHunk" : "@@ -120,43 +121,46 @@ class Runner(config: SandboxConfig) extends ResourceOwner[Port] {\n                   config.metricsReporter,\n                   config.metricsReportingInterval,\n                 )\n-                _ <- startupMode match {\n-                  case StartupMode.MigrateAndStart =>\n-                    ResourceOwner.successful(())\n-                  case StartupMode.ResetAndStart =>\n-                    // Resetting through Flyway removes all tables in the database schema.\n-                    // Therefore we don't need to \"reset\" the KV Ledger and Index separately.\n-                    ResourceOwner.forFuture(() => new FlywayMigrations(indexJdbcUrl).reset())\n-                }\n                 timeServiceBackend = timeProviderType match {\n                   case TimeProviderType.Static =>\n                     Some(TimeServiceBackend.simple(Instant.EPOCH))\n                   case TimeProviderType.WallClock =>\n                     None\n                 }\n+                isReset = startupMode == StartupMode.ResetAndStart\n                 readerWriter <- new SqlLedgerReaderWriter.Owner(\n                   initialLedgerId = specifiedLedgerId,\n                   participantId = ParticipantId,\n                   metricRegistry = metrics,\n                   jdbcUrl = ledgerJdbcUrl,\n+                  resetOnStartup = isReset,\n                   timeProvider = timeServiceBackend.getOrElse(TimeProvider.UTC),\n                   seedService = SeedService(seeding),\n                   stateValueCache = caching.Cache.from(\n                     caching.Configuration(maximumWeight = MaximumStateValueCacheSize)),\n+                  engine = engine\n                 )\n                 ledger = new KeyValueParticipantState(readerWriter, readerWriter, metrics)\n                 readService = new TimedReadService(ledger, metrics, ReadServicePrefix)\n                 writeService = new TimedWriteService(ledger, metrics, WriteServicePrefix)\n                 ledgerId <- ResourceOwner.forFuture(() =>\n                   readService.getLedgerInitialConditions().runWith(Sink.head).map(_.ledgerId))\n-                _ <- ResourceOwner.forFuture(() =>\n-                  Future.sequence(config.damlPackages.map(uploadDar(_, writeService))))\n+                _ <- if (isReset) {\n+                  ResourceOwner.unit\n+                } else {\n+                  ResourceOwner\n+                    .forFuture(() =>\n+                      Future.sequence(config.damlPackages.map(uploadDar(_, writeService))))\n+                    .map(_ => ())\n+                }"
  },
  {
    "id" : "2df838b4-6bf1-4967-b698-085be8d5cf4c",
    "prId" : 5728,
    "comments" : [
      {
        "id" : "22e9db6f-46aa-4d48-acf5-2317b77c47a6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'm surprised we don't need to reset the index. Does something else do this?",
        "createdAt" : "2020-04-27T08:28:28Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f8d07f2e-4b06-4d7e-9487-b7e3ce4b01af",
        "parentId" : "22e9db6f-46aa-4d48-acf5-2317b77c47a6",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The reset is not integrated into the startup procedure, i.e. `MigrateAndStart` vs. `ResetAndStart`.",
        "createdAt" : "2020-04-29T08:28:10Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : 52,
    "diffHunk" : "@@ -120,43 +121,46 @@ class Runner(config: SandboxConfig) extends ResourceOwner[Port] {\n                   config.metricsReporter,\n                   config.metricsReportingInterval,\n                 )\n-                _ <- startupMode match {\n-                  case StartupMode.MigrateAndStart =>\n-                    ResourceOwner.successful(())\n-                  case StartupMode.ResetAndStart =>\n-                    // Resetting through Flyway removes all tables in the database schema.\n-                    // Therefore we don't need to \"reset\" the KV Ledger and Index separately.\n-                    ResourceOwner.forFuture(() => new FlywayMigrations(indexJdbcUrl).reset())"
  },
  {
    "id" : "deb1af70-2a8f-4f1d-b9ee-1f10f3e40b2a",
    "prId" : 5315,
    "comments" : [
      {
        "id" : "f07b6c27-1534-4c0b-bc3c-a39617d70b64",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You can inline `backend`.",
        "createdAt" : "2020-03-31T15:49:01Z",
        "updatedAt" : "2020-03-31T17:43:59Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c7deee32-c4ca-4d38-a2f4-baf90cd2e99b",
        "parentId" : "f07b6c27-1534-4c0b-bc3c-a39617d70b64",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-31T16:48:33Z",
        "updatedAt" : "2020-03-31T17:43:59Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2beee020cac3ccd86a87358e05512687af93e7d4",
    "line" : null,
    "diffHunk" : "@@ -118,13 +111,12 @@ class Runner(config: SandboxConfig) extends ResourceOwner[Port] {\n       implicit val actorSystem: ActorSystem = ActorSystem(\"sandbox\")\n       implicit val materializer: Materializer = Materializer(actorSystem)\n \n-      val (timeServiceBackend, heartbeatMechanism) = timeProviderType match {\n+      val timeServiceBackend = timeProviderType match {\n         case TimeProviderType.Static =>\n           val backend = TimeServiceBackend.observing(TimeServiceBackend.simple(Instant.EPOCH))\n-          (Some(backend), backend.changes)\n+          Some(backend)"
  },
  {
    "id" : "665ef3a8-2d59-45dc-9945-5a34f0fbf826",
    "prId" : 5315,
    "comments" : [
      {
        "id" : "6c12e7dd-36cb-445a-b960-8ca7da7e83bd",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This doesn't need to be wrapped in `TimeServiceBackend.observing` any more.",
        "createdAt" : "2020-03-31T15:50:24Z",
        "updatedAt" : "2020-03-31T17:43:59Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2beee020cac3ccd86a87358e05512687af93e7d4",
    "line" : null,
    "diffHunk" : "@@ -118,13 +111,12 @@ class Runner(config: SandboxConfig) extends ResourceOwner[Port] {\n       implicit val actorSystem: ActorSystem = ActorSystem(\"sandbox\")\n       implicit val materializer: Materializer = Materializer(actorSystem)\n \n-      val (timeServiceBackend, heartbeatMechanism) = timeProviderType match {\n+      val timeServiceBackend = timeProviderType match {\n         case TimeProviderType.Static =>\n           val backend = TimeServiceBackend.observing(TimeServiceBackend.simple(Instant.EPOCH))"
  },
  {
    "id" : "583db8ee-ea10-4901-ae4f-e58e48761d80",
    "prId" : 4755,
    "comments" : [
      {
        "id" : "8d7be678-37d9-4ea7-95ee-6d777f9d29ec",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Shouldn't this be configurable or at least specified by a constant?",
        "createdAt" : "2020-03-02T12:36:28Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "20ebf440-0dab-4d5f-bf01-05e007450b72",
        "parentId" : "8d7be678-37d9-4ea7-95ee-6d777f9d29ec",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good call. I'll pull out a constant.",
        "createdAt" : "2020-03-02T13:44:39Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d36fdaa30a004657bd518f427ba4d9695681aa0",
    "line" : null,
    "diffHunk" : "@@ -81,11 +81,13 @@ class Runner {\n     }\n \n     val timeProviderType = config.timeProviderType.getOrElse(TimeProviderType.Static)\n-    val timeServiceBackend = timeProviderType match {\n+    val (timeServiceBackend, heartbeatMechanism) = timeProviderType match {\n       case TimeProviderType.Static =>\n-        Some(TimeServiceBackend.simple(Instant.EPOCH))\n+        val backend = TimeServiceBackend.observing(TimeServiceBackend.simple(Instant.EPOCH))\n+        (Some(backend), backend.changes)\n       case TimeProviderType.WallClock =>\n-        None\n+        val clock = Clock.systemUTC()\n+        (None, new RegularHeartbeat(clock, 1.second))"
  },
  {
    "id" : "123670ac-7fc9-4542-ae52-b3b5a3a3bc6e",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "f958ef28-22b8-40ab-a351-719eb60d6971",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Same here, I don't think we need this warning.",
        "createdAt" : "2020-02-28T08:22:45Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -119,6 +127,8 @@ class Runner {\n           ledgerType,\n           authService.getClass.getSimpleName,\n         )\n+        if (config.seeding.contains(SeedService.Seeding.Weak))\n+          logger.warn(\"Contract id seeding uses a weak seed. DO NOT USE IN PRODUCTION.\")"
  },
  {
    "id" : "5b05c701-91e2-4b5a-86da-d8b423743920",
    "prId" : 4422,
    "comments" : [
      {
        "id" : "e18ce01f-8f18-494d-befe-361b33b55833",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'm not sure we need the logging context to wrap the whole thing. I would suggest you restrict the scope to where it's actually used. Can you check where this is needed? From a cursory look you can probably move it inside the `startParticipant` method (and avoid asking for an `implicit` one).",
        "createdAt" : "2020-02-06T12:39:00Z",
        "updatedAt" : "2020-02-06T14:21:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5be9172d-2156-4949-8959-5b1c3c96b61a",
        "parentId" : "e18ce01f-8f18-494d-befe-361b33b55833",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "That's where it was when I copied it from the KVUtils _Runner_, but it's also needed for the `SqlLedgerReaderWriter`.",
        "createdAt" : "2020-02-06T13:59:35Z",
        "updatedAt" : "2020-02-06T14:21:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a3e584e59ae39b77a6088641e3c5a3287071b5ff",
    "line" : 73,
    "diffHunk" : "@@ -0,0 +1,184 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandboxnext\n+\n+import java.io.File\n+import java.util.UUID\n+\n+import akka.actor.ActorSystem\n+import akka.stream.Materializer\n+import com.codahale.metrics.SharedMetricRegistries\n+import com.daml.ledger.on.sql.Database.InvalidDatabaseException\n+import com.daml.ledger.on.sql.SqlLedgerReaderWriter\n+import com.daml.ledger.participant.state.kvutils.api.KeyValueParticipantState\n+import com.daml.ledger.participant.state.v1\n+import com.daml.ledger.participant.state.v1.{ReadService, WriteService}\n+import com.digitalasset.api.util.TimeProvider\n+import com.digitalasset.daml.lf.archive.DarReader\n+import com.digitalasset.daml.lf.data.Ref\n+import com.digitalasset.daml_lf_dev.DamlLf.Archive\n+import com.digitalasset.ledger.api.auth.{AuthService, AuthServiceWildcard}\n+import com.digitalasset.logging.LoggingContext.newLoggingContext\n+import com.digitalasset.logging.{ContextualizedLogger, LoggingContext}\n+import com.digitalasset.platform.apiserver.{ApiServerConfig, StandaloneApiServer}\n+import com.digitalasset.platform.common.LedgerIdMode\n+import com.digitalasset.platform.configuration.BuildInfo\n+import com.digitalasset.platform.indexer.{\n+  IndexerConfig,\n+  IndexerStartupMode,\n+  StandaloneIndexerServer\n+}\n+import com.digitalasset.platform.sandbox.banner.Banner\n+import com.digitalasset.platform.sandbox.config.SandboxConfig\n+import com.digitalasset.platform.sandboxnext.Runner._\n+import com.digitalasset.resources.ResourceOwner\n+import com.digitalasset.resources.akka.AkkaResourceOwner\n+import scalaz.syntax.tag._\n+\n+import scala.compat.java8.FutureConverters.CompletionStageOps\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.util.Try\n+\n+/**\n+  * Runs Sandbox with a KV SQL ledger backend.\n+  *\n+  * Known issues:\n+  *   - does not support authorization\n+  *   - does not support static time\n+  *   - does not provide the reset service\n+  */\n+class Runner {\n+  def owner(config: SandboxConfig): ResourceOwner[Unit] = {\n+    implicit val system: ActorSystem = ActorSystem(\"sandbox\")\n+    implicit val materializer: Materializer = Materializer(system)\n+    implicit val executionContext: ExecutionContext = system.dispatcher\n+\n+    val ledgerId: v1.LedgerId = Ref.LedgerString.assertFromString(config.ledgerIdMode match {\n+      case LedgerIdMode.Static(ledgerId) => ledgerId.unwrap\n+      case LedgerIdMode.Dynamic() => UUID.randomUUID.toString\n+    })\n+\n+    val (ledgerType, ledgerJdbcUrl, indexJdbcUrl) = config.jdbcUrl match {\n+      case Some(url) if url.startsWith(\"jdbc:postgresql\") => (\"PostgreSQL\", url, url)\n+      case Some(url) if url.startsWith(\"jdbc:h2:mem:\") => (\"in-memory\", InMemoryLedgerJdbcUrl, url)\n+      case Some(url) if url.startsWith(\"jdbc:h2:\") =>\n+        throw new InvalidDatabaseException(\n+          \"This version of Sandbox does not support file-based H2 databases. Please use SQLite instead.\")\n+      case Some(url) if url.startsWith(\"jdbc:sqlite:\") => (\"SQLite\", url, InMemoryIndexJdbcUrl)\n+      case None => (\"in-memory\", InMemoryLedgerJdbcUrl, InMemoryIndexJdbcUrl)\n+    }\n+\n+    newLoggingContext { implicit logCtx =>"
  }
]