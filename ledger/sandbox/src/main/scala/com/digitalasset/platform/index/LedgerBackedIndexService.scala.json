[
  {
    "id" : "3e4ae90c-53aa-4ed4-a640-83dcce5ab59e",
    "prId" : 5159,
    "comments" : [
      {
        "id" : "a32607df-ee57-401a-91f7-115eaa045d6e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`:` doesn't start an ascription here, only a pattern.\r\n\r\n```suggestion\r\n          case endOpt =>\r\n```",
        "createdAt" : "2020-03-24T16:19:23Z",
        "updatedAt" : "2020-03-24T16:21:25Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fa9aee60-bb77-4d69-8870-660f1fc4880d",
        "parentId" : "a32607df-ee57-401a-91f7-115eaa045d6e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sorry, but I don't know what 'ascription' means. Can you explain?",
        "createdAt" : "2020-03-24T16:22:27Z",
        "updatedAt" : "2020-03-24T16:22:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d737382-04cf-4955-b668-d89c37ef1cd2",
        "parentId" : "a32607df-ee57-401a-91f7-115eaa045d6e",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Ascriptions (exp: t) are static; this syntax implies a dynamic, runtime check.",
        "createdAt" : "2020-03-24T16:25:34Z",
        "updatedAt" : "2020-03-24T16:25:34Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a29e2f26-d795-4d90-a327-6b252d5492b4",
        "parentId" : "a32607df-ee57-401a-91f7-115eaa045d6e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I see. I simply preserved the original, which was `None | Some(_)` and that was motivated [here](https://github.com/digital-asset/daml/pull/4949#discussion_r391514099). Thoughts?",
        "createdAt" : "2020-03-25T07:44:33Z",
        "updatedAt" : "2020-03-25T07:44:33Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0cc83aaa787197d4ff12e2f57234ff51d9a82d79",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +154,158 @@              ErrorFactories.invalidArgument(\n                s\"End offset ${end.toApiString} is before Begin offset ${begin.toApiString}.\"))\n          case endOpt: Option[Offset] =>\n            f(begin, endOpt)\n        }"
  },
  {
    "id" : "80f86bc4-4270-46bf-ad37-9b8416ee8f9c",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "73c5554d-7019-4637-9ee8-3730e181f54b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Just for my understanding, do you intend to change this to a `CreateEvent` directly as well?",
        "createdAt" : "2020-03-02T08:25:53Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "92ede17c-ee0c-4495-86a7-33fd0a7dd385",
        "parentId" : "73c5554d-7019-4637-9ee8-3730e181f54b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Not sure, for now I'm taking care of transactions, I'll deal with active contracts in a separate PR. For now I just wanted to make sure everything type-checked.",
        "createdAt" : "2020-03-02T10:48:57Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +87,91 @@  }\n\n  private def toUpdateEvent(ac: ActiveContract): AcsUpdateEvent.Create =\n    AcsUpdateEvent.Create(\n      // we use absolute contract ids as event ids throughout the sandbox"
  }
]