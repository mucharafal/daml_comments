[
  {
    "id" : "13255859-4566-4a32-a68d-9115a7688e12",
    "prId" : 6638,
    "comments" : [
      {
        "id" : "5e672728-1b82-4d43-94ce-89fffe1017a9",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Factoring\r\n\r\n```suggestion\r\n    Future.successful(toAbsolute(\r\n      if (ledger.ledgerEnd == Offset.beforeBegin) Offset.begin\r\n      else ledger.ledgerEnd\r\n    ))\r\n```",
        "createdAt" : "2020-07-07T12:36:56Z",
        "updatedAt" : "2020-07-07T14:00:57Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d8c89ec-b6a6-4b89-8671-8588bb464e00",
        "parentId" : "5e672728-1b82-4d43-94ce-89fffe1017a9",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I like @S11001001's suggestion but would prefer it with an intermediate variable.\r\n\r\n```suggestion\r\n    val offset =\r\n      if (ledger.ledgerEnd == Offset.beforeBegin) Offset.begin\r\n      else ledger.ledgerEnd\r\n    Future.successful(toAbsolute(offset))\r\n  }\r\n```",
        "createdAt" : "2020-07-07T12:44:07Z",
        "updatedAt" : "2020-07-07T14:00:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e73fc500-6a2d-4e01-aaed-b66af8747164",
        "parentId" : "5e672728-1b82-4d43-94ce-89fffe1017a9",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Hopefully Samir's suggestion works for both of you",
        "createdAt" : "2020-07-07T12:54:22Z",
        "updatedAt" : "2020-07-07T14:00:57Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e499dfbe66379ccb8b24c52d1eea8a9610c851ea",
    "line" : null,
    "diffHunk" : "@@ -143,8 +143,12 @@ abstract class LedgerBackedIndexService(\n         party -> filters.inclusive.fold(Set.empty[Identifier])(_.templateIds)\n     }\n \n-  override def currentLedgerEnd(): Future[LedgerOffset.Absolute] =\n-    Future.successful(toAbsolute(ledger.ledgerEnd))\n+  override def currentLedgerEnd(): Future[LedgerOffset.Absolute] = {\n+    if (ledger.ledgerEnd == Offset.beforeBegin) {\n+      Future.successful(toAbsolute(Offset.begin))\n+    } else\n+      Future.successful(toAbsolute(ledger.ledgerEnd))\n+  }"
  },
  {
    "id" : "8b607c7b-7bc9-4dbd-a3be-f58013f67fa1",
    "prId" : 5669,
    "comments" : [
      {
        "id" : "0000128e-c31c-400f-913e-e1841f15110e",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "To improve readability I'd suggest changing this to a `map { case (..., ...) =>` statement to make it obvious what `_1` or `_2` is.",
        "createdAt" : "2020-04-29T15:59:38Z",
        "updatedAt" : "2020-05-06T07:31:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d727159f8b35003f5e8fc75af2a53edb62b2b8fc",
    "line" : null,
    "diffHunk" : "@@ -235,14 +235,14 @@ abstract class LedgerBackedIndexService(\n       .map(_.map { case (offset, config) => (toAbsolute(offset), config) })(DEC)\n \n   /** Retrieve configuration entries. */\n-  override def configurationEntries(\n-      startExclusive: Option[LedgerOffset.Absolute]): Source[domain.ConfigurationEntry, NotUsed] =\n+  override def configurationEntries(startExclusive: Option[LedgerOffset.Absolute])\n+    : Source[(domain.LedgerOffset.Absolute, domain.ConfigurationEntry), NotUsed] =\n     Source\n       .future(\n         startExclusive\n           .map(off => Future.fromTry(ApiOffset.fromString(off.value).map(Some(_))))\n           .getOrElse(Future.successful(None)))\n-      .flatMapConcat(ledger.configurationEntries(_).map(_._2.toDomain))\n+      .flatMapConcat(ledger.configurationEntries(_).map(e => toAbsolute(e._1) -> e._2.toDomain))"
  },
  {
    "id" : "d2bf2bf3-1717-462c-93f5-a2d9ff56e6a9",
    "prId" : 5159,
    "comments" : [
      {
        "id" : "62f529e9-2671-4067-aea0-9a31e5cc613e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`:` doesn't start an ascription here, only a pattern.\r\n\r\n```suggestion\r\n          case endOpt =>\r\n```",
        "createdAt" : "2020-03-24T16:19:23Z",
        "updatedAt" : "2020-03-24T16:21:25Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "282c4d5d-3f8a-46bf-964d-47c2fafbeb54",
        "parentId" : "62f529e9-2671-4067-aea0-9a31e5cc613e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sorry, but I don't know what 'ascription' means. Can you explain?",
        "createdAt" : "2020-03-24T16:22:27Z",
        "updatedAt" : "2020-03-24T16:22:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "65cb6130-bf91-44f6-8cca-c2291283d3c0",
        "parentId" : "62f529e9-2671-4067-aea0-9a31e5cc613e",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Ascriptions (exp: t) are static; this syntax implies a dynamic, runtime check.",
        "createdAt" : "2020-03-24T16:25:34Z",
        "updatedAt" : "2020-03-24T16:25:34Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "349ca6a5-b0de-42a4-858d-54266b66ea85",
        "parentId" : "62f529e9-2671-4067-aea0-9a31e5cc613e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I see. I simply preserved the original, which was `None | Some(_)` and that was motivated [here](https://github.com/digital-asset/daml/pull/4949#discussion_r391514099). Thoughts?",
        "createdAt" : "2020-03-25T07:44:33Z",
        "updatedAt" : "2020-03-25T07:44:33Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0cc83aaa787197d4ff12e2f57234ff51d9a82d79",
    "line" : 78,
    "diffHunk" : "@@ -124,47 +124,52 @@ abstract class LedgerBackedIndexService(\n             .toList\n       }\n \n-  private class OffsetConverter {\n+  // Returns a function that memoizes the current end\n+  // Can be used directly or shared throughout a request processing\n+  private def convertOffset: LedgerOffset => Source[Offset, NotUsed] = {\n     lazy val currentEnd: Offset = ledger.ledgerEnd\n-\n-    def toAbsolute(offset: LedgerOffset): Source[Offset, NotUsed] = offset match {\n-      case LedgerOffset.LedgerBegin => Source.single(Offset.begin)\n-      case LedgerOffset.LedgerEnd => Source.single(currentEnd)\n-      case LedgerOffset.Absolute(offset) =>\n-        ApiOffset.fromString(offset).fold(Source.failed, off => Source.single(off))\n-    }\n+    domainOffset: LedgerOffset =>\n+      domainOffset match {\n+        case LedgerOffset.LedgerBegin => Source.single(Offset.begin)\n+        case LedgerOffset.LedgerEnd => Source.single(currentEnd)\n+        case LedgerOffset.Absolute(offset) =>\n+          ApiOffset.fromString(offset).fold(Source.failed, off => Source.single(off))\n+      }\n   }\n \n-  private def acceptedTransactions(\n+  private def between[A](\n       startExclusive: domain.LedgerOffset,\n-      endInclusive: Option[domain.LedgerOffset])\n-    : Source[(LedgerOffset.Absolute, LedgerEntry.Transaction), NotUsed] = {\n-\n-    val converter = new OffsetConverter()\n-\n-    converter.toAbsolute(startExclusive).flatMapConcat { begin =>\n+      endInclusive: Option[domain.LedgerOffset],\n+  )(f: (Offset, Option[Offset]) => Source[A, NotUsed]): Source[A, NotUsed] = {\n+    val convert = convertOffset\n+    convert(startExclusive).flatMapConcat { begin =>\n       endInclusive\n-        .map(converter.toAbsolute(_).map(Some(_)))\n+        .map(convert(_).map(Some(_)))\n         .getOrElse(Source.single(None))\n         .flatMapConcat {\n           case Some(`begin`) =>\n             Source.empty\n-\n           case Some(end) if begin > end =>\n-            Source.failed(ErrorFactories.invalidArgument(\n-              s\"End offset ${end.toApiString} is before Begin offset ${begin.toApiString}.\"))\n-\n-          case endOpt @ (None | Some(_)) =>\n-            ledger\n-              .ledgerEntries(Some(begin), endOpt)\n-              .collect {\n-                case (offset, t: LedgerEntry.Transaction) =>\n-                  (toAbsolute(offset), t)\n-              }\n+            Source.failed(\n+              ErrorFactories.invalidArgument(\n+                s\"End offset ${end.toApiString} is before Begin offset ${begin.toApiString}.\"))\n+          case endOpt: Option[Offset] =>"
  },
  {
    "id" : "31164073-8715-487e-ae3b-3427f48f5740",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "e67e94c4-18ed-43b9-9456-9a5637b48832",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Just for my understanding, do you intend to change this to a `CreateEvent` directly as well?",
        "createdAt" : "2020-03-02T08:25:53Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "56045f88-6748-4a45-b20f-4adff8b2d723",
        "parentId" : "e67e94c4-18ed-43b9-9456-9a5637b48832",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Not sure, for now I'm taking care of transactions, I'll deal with active contracts in a separate PR. For now I just wanted to make sure everything type-checked.",
        "createdAt" : "2020-03-02T10:48:57Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : 45,
    "diffHunk" : "@@ -73,25 +77,21 @@ abstract class LedgerBackedIndexService(\n             LedgerOffset.Absolute(LedgerString.fromLong(offset)),\n             acsStream\n               .mapConcat { ac =>\n-                val create = toUpdateEvent(ac.id, ac)\n-                EventFilter\n-                  .filterActiveContractWitnesses(filter, create)\n-                  .map(create => ac.workflowId.map(domain.WorkflowId(_)) -> create)\n+                EventFilter(ac)(filter)\n+                  .map(create =>\n+                    create.workflowId.map(domain.WorkflowId(_)) -> toUpdateEvent(create))\n                   .toList\n               }\n           )\n       }(mat.executionContext)\n   }\n \n-  private def toUpdateEvent(\n-      cId: Value.AbsoluteContractId,\n-      ac: ActiveContract\n-  ): AcsUpdateEvent.Create =\n+  private def toUpdateEvent(ac: ActiveContract): AcsUpdateEvent.Create ="
  }
]