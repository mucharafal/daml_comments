[
  {
    "id" : "cc7dc6fa-8577-4279-9ceb-db3f3b381aff",
    "prId" : 2582,
    "comments" : [
      {
        "id" : "722f3f7d-365d-4f15-ae08-6d939c06518c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "We don't need a separate actorsystem for this, but can rather pass in a scheduler as parameter.",
        "createdAt" : "2019-08-22T09:20:11Z",
        "updatedAt" : "2019-08-28T15:14:13Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4fcd279aba39c0001526d2afa503c85bd49a701e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,69 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.index\n+\n+import java.util.concurrent.atomic.{AtomicBoolean, AtomicReference}\n+\n+import akka.actor.ActorSystem\n+import akka.pattern.after\n+import com.digitalasset.platform.common.util.{DirectExecutionContext => DEC}\n+import org.slf4j.LoggerFactory\n+\n+import scala.concurrent.duration.FiniteDuration\n+import scala.concurrent.{Await, ExecutionContext, Future}\n+import scala.util.control.NonFatal\n+\n+object RecoveringIndexer {\n+  def apply(restartDelay: FiniteDuration, asyncTolerance: FiniteDuration): RecoveringIndexer =\n+    new RecoveringIndexer(restartDelay, asyncTolerance)\n+}\n+\n+/**\n+  * A helper that restarts an indexer whenever an error occurs.\n+  *\n+  * @param restartDelay Time to wait before restarting the indexer after a failure\n+  * @param asyncTolerance Time to wait for asynchronous operations to complete\n+  */\n+class RecoveringIndexer(restartDelay: FiniteDuration, asyncTolerance: FiniteDuration)\n+    extends AutoCloseable {\n+  private val logger = LoggerFactory.getLogger(this.getClass)\n+\n+  private[this] val actorSystem = ActorSystem(\"RecoveringIndexer\")"
  }
]