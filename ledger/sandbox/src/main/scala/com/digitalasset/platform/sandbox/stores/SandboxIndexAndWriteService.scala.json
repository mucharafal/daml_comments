[
  {
    "id" : "cd376050-b686-467d-ae70-d969eb152dc6",
    "prId" : 2425,
    "comments" : [
      {
        "id" : "b7034e99-51e3-4775-b985-b0ac514f45fc",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "How is this case handled if the guard doesn't hold?",
        "createdAt" : "2019-08-23T15:30:45Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "120f7845-1eee-4464-82da-510d56238a0a",
        "parentId" : "b7034e99-51e3-4775-b985-b0ac514f45fc",
        "author" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "body" : "With guard you mean the if-condition, right?\r\n\r\nCommandRejected events are dropped from the ledger if commandId is not specified (i.e. a non-submitter event) or if the applicationId does not match.",
        "createdAt" : "2019-08-23T16:01:10Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0f2ce382-1db8-41a2-865d-401f729a7dd8",
        "parentId" : "b7034e99-51e3-4775-b985-b0ac514f45fc",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ah, sure, thanks, it was quite hard to figure out the meaning of this line by itself, I had a better look at the context and it makes sense, thanks.",
        "createdAt" : "2019-08-25T08:18:14Z",
        "updatedAt" : "2019-08-28T11:21:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1fee0715b6e5ad68a7c644fcc1d5e65f71f5a8ed",
    "line" : 15,
    "diffHunk" : "@@ -353,7 +353,8 @@ abstract class LedgerBackedIndexService(\n               Checkpoint(\n                 domain.LedgerOffset.Absolute(Ref.LedgerString.assertFromString(offset.toString)),\n                 c.recordedAt)\n-            case (offset, r: LedgerEntry.Rejection) =>\n+            case (offset, r: LedgerEntry.Rejection)\n+                if r.commandId.nonEmpty && r.applicationId.contains(applicationId.unwrap) =>"
  },
  {
    "id" : "b3a8e559-98b2-4310-878a-24a1d48fabbe",
    "prId" : 1985,
    "comments" : [
      {
        "id" : "85c56fcc-be74-49fe-8d5a-c23284c9e3a8",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "We can return the participant ID here, no?",
        "createdAt" : "2019-07-05T13:19:54Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a7aff523-ce99-4bfb-b895-11fca70fad3e",
        "parentId" : "85c56fcc-be74-49fe-8d5a-c23284c9e3a8",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "indeed, thanks for spotting this; that was the very reason for this entire storm in the glass",
        "createdAt" : "2019-07-05T14:28:15Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a3ff1f01-d6ab-4472-9114-236caedc27a9",
        "parentId" : "85c56fcc-be74-49fe-8d5a-c23284c9e3a8",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-05T14:38:29Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a76d1f28b41fc02600441b5d40c9b25038667c33",
    "line" : null,
    "diffHunk" : "@@ -385,7 +396,7 @@ abstract class LedgerBackedIndexService(\n   override def getParticipantId(): Future[ParticipantId] =\n     // In the case of the sandbox, there is only one participant node\n     // TODO: Make the participant ID configurable\n-    Future.successful(ParticipantId(ledger.ledgerId.unwrap))\n+    Future.successful(Ref.LedgerString.assertFromString(ledger.ledgerId.unwrap))"
  },
  {
    "id" : "bd60b533-d43c-4e7a-bb6f-41e073e5969e",
    "prId" : 1818,
    "comments" : [
      {
        "id" : "d22a16ff-88cc-4010-868d-b4dad144c870",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Seems like this method doesn't need the `templateStore` parameter anymore and the parameter can be removed.",
        "createdAt" : "2019-06-28T08:27:54Z",
        "updatedAt" : "2019-07-02T12:24:58Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bae23a0a96200d0ece436a646cceb68a50511f37",
    "line" : null,
    "diffHunk" : "@@ -101,7 +103,7 @@ object SandboxIndexAndWriteService {\n       templateStore: InMemoryPackageStore)(implicit mat: Materializer) = {"
  },
  {
    "id" : "79e94a9a-1c93-4236-9c08-83f51e461672",
    "prId" : 1766,
    "comments" : [
      {
        "id" : "23af924e-bb30-4293-9d8f-e1a57426d035",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Why the check for existing command ID?",
        "createdAt" : "2019-06-19T13:20:47Z",
        "updatedAt" : "2019-06-19T13:50:38Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "09aa6b6a-4079-4c2a-b9cc-40c4f708947a",
        "parentId" : "23af924e-bb30-4293-9d8f-e1a57426d035",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Because previously it wasn't optional, and to be able to emit `CommandAccepted` we need the commandId.",
        "createdAt" : "2019-06-19T13:25:45Z",
        "updatedAt" : "2019-06-19T13:50:38Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a73b357-54c9-41c2-8a91-1d06a17e099a",
        "parentId" : "23af924e-bb30-4293-9d8f-e1a57426d035",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Ah, and I assume the index service should not emit completions for non-local transactions (i.e., those with missing command IDs)?",
        "createdAt" : "2019-06-19T13:46:42Z",
        "updatedAt" : "2019-06-19T13:50:38Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac072622-6ae4-454d-b0f6-539ed0e97238",
        "parentId" : "23af924e-bb30-4293-9d8f-e1a57426d035",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This change makes more sense in a future commit where this code is moved to a generic `LedgerBackedIndexService` which in turn will be used by the ApiIndexServer and the sandbox.\r\nIn the sandbox this doesn't make a difference, but for the ApiIndexServer, we should only emit `CommandAccepted` for transactions that have \"submitter\" information (appId, submitter, commandId), meaning the transaction originated from this api server and there is a client listening for these completions.\r\n\r\nThanks for asking the question. I added a comment in the code as well.",
        "createdAt" : "2019-06-19T13:51:47Z",
        "updatedAt" : "2019-06-19T13:51:47Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a3db269-bde2-4ae4-9a14-69fa73c8bf4a",
        "parentId" : "23af924e-bb30-4293-9d8f-e1a57426d035",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : ":+1:\r\n",
        "createdAt" : "2019-06-19T13:52:59Z",
        "updatedAt" : "2019-06-19T13:52:59Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3f345f4de8b1b2494f913e1b39d69b0017d6057d",
    "line" : 21,
    "diffHunk" : "@@ -326,11 +327,13 @@ private class SandboxIndexAndWriteService(\n       case LedgerOffset.Absolute(absBegin) =>\n         ledger.ledgerEntries(Some(absBegin.toLong)).collect {\n           case (offset, t: LedgerEntry.Transaction)\n-              if (t.applicationId == applicationId.unwrap && parties.contains(t.submittingParty)) =>\n+              if t.applicationId.contains(applicationId.unwrap) &&\n+                t.submittingParty.exists(parties.contains) &&\n+                t.commandId.nonEmpty =>"
  },
  {
    "id" : "e76931c3-34d4-4734-bb28-ce5b672fd898",
    "prId" : 1610,
    "comments" : [
      {
        "id" : "3d714bae-afb6-460d-a0ab-677f2f643d0f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Instead of adding the `getCurrentTime` method to `Ledger` which acts as a simple delegation to `TimeProvider`, we can also pass the `timeProvider`, which is already passed to the factory methods, also to `SandboxIndexAndWriteService`. What do you think?",
        "createdAt" : "2019-06-13T09:25:54Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e866b02c0df2f20dcee08439e1105fe577f0609",
    "line" : null,
    "diffHunk" : "@@ -345,11 +348,20 @@ private class SandboxIndexAndWriteService(\n   }\n \n   // IndexPackagesService\n-  override def listPackages(): Future[Set[PackageId]] =\n-    templateStore.listPackages()\n+  override def listLfPackages(): Future[Map[PackageId, PackageDetails]] =\n+    packageStore.listLfPackages()\n \n-  override def getPackage(packageId: PackageId): Future[Option[Archive]] =\n-    templateStore.getPackage(packageId)\n+  override def getLfArchive(packageId: PackageId): Future[Option[Archive]] =\n+    packageStore.getLfArchive(packageId)\n+\n+  override def getLfPackage(packageId: PackageId): Future[Option[Ast.Package]] =\n+    packageStore.getLfPackage(packageId)\n+\n+  // PackageWriteService\n+  override def uploadDar(\n+      sourceDescription: String,\n+      payload: Array[Byte]): CompletionStage[UploadDarResult] =\n+    packageStore.uploadDar(ledger.getCurrentTime(), sourceDescription, payload)"
  }
]