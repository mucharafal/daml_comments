[
  {
    "id" : "9a2f64da-3d87-4f89-82ac-f34a9b360515",
    "prId" : 6172,
    "comments" : [
      {
        "id" : "7fabe067-06b0-4da3-a9fa-e887ffb3bb53",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This formatting should already be applied by Anorm and should cache queries when possible, any reason to not use that?",
        "createdAt" : "2020-06-02T07:19:11Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5121781f-4d76-4628-929d-0fb1854c5e67",
        "parentId" : "7fabe067-06b0-4da3-a9fa-e887ffb3bb53",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I just saw that you use this to specify the array, marking as resolved.",
        "createdAt" : "2020-06-02T08:20:47Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a07d02c332d46c90c777addcbdff06f74cd74a61",
    "line" : 6,
    "diffHunk" : "@@ -22,4 +22,18 @@ object EventsTableQueries {\n     lastEventNodeIndexFromPreviousPage\n       .map(x => (lastOffsetFromPreviousPage, x))\n       .getOrElse(NonExistingOffsetNodeIndexPair)\n+\n+  def format(ps: Set[Party]): String =\n+    ps.view.map(p => s\"'$p'\").mkString(\",\")"
  },
  {
    "id" : "b09aa14b-1fb9-4367-a4e8-5f686e6a19a7",
    "prId" : 6083,
    "comments" : [
      {
        "id" : "b7b473d6-8589-4f0d-9b2f-5b6c82aaccd6",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What do you mean with `nonsense`?\r\n\r\nPlease rename`Offset.begin` to `Offset.beforeBegin` and set it to an offset from an empty byte array.",
        "createdAt" : "2020-05-29T06:39:25Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fc616a4c4006e700ebe1e9c0a9d52519af9130a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,22 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.platform.store.dao.events\n+\n+import com.daml.ledger.participant.state.v1.Offset\n+\n+object EventsTableQueries {\n+\n+  def previousOffsetWhereClauseValues(\n+      between: (Offset, Offset),\n+      lastEventNodeIndexFromPreviousPage: Option[Int]\n+  ): (Offset, Int) = previousOffsetWhereClauseValues(between._1, lastEventNodeIndexFromPreviousPage)\n+\n+  def previousOffsetWhereClauseValues(\n+      lastOffsetFromPreviousPage: Offset,\n+      lastEventNodeIndexFromPreviousPage: Option[Int]\n+  ): (Offset, Int) =\n+    lastEventNodeIndexFromPreviousPage\n+      .map(x => (lastOffsetFromPreviousPage, x))\n+      .getOrElse((Offset.begin, Integer.MAX_VALUE)) // nonsense"
  },
  {
    "id" : "9711f42b-2e9f-4e70-82d5-4072e4ad1f7f",
    "prId" : 6083,
    "comments" : [
      {
        "id" : "0aad3f61-3a09-4d1a-ae3a-7f1b3c67c937",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I appreciate the presence of this comment but probably a bit more detail won't hurt. :wink: ",
        "createdAt" : "2020-05-29T07:34:32Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "016286b3-c7c0-4f5f-922c-26b7e6394031",
        "parentId" : "0aad3f61-3a09-4d1a-ae3a-7f1b3c67c937",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I hate comments :), so I am going to introduce a constant with self-describing name:\r\n```\r\nprivate val NonExistingOffsetNodeIndexPair: (Offset, Int) =\r\n    (Offset.beforeBegin, Integer.MAX_VALUE)\r\n```",
        "createdAt" : "2020-05-29T14:23:12Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bfa87121-74df-46b4-b807-6b98488cd72b",
        "parentId" : "0aad3f61-3a09-4d1a-ae3a-7f1b3c67c937",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sounds fine.",
        "createdAt" : "2020-05-29T14:26:49Z",
        "updatedAt" : "2020-05-29T14:50:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fc616a4c4006e700ebe1e9c0a9d52519af9130a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,22 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.platform.store.dao.events\n+\n+import com.daml.ledger.participant.state.v1.Offset\n+\n+object EventsTableQueries {\n+\n+  def previousOffsetWhereClauseValues(\n+      between: (Offset, Offset),\n+      lastEventNodeIndexFromPreviousPage: Option[Int]\n+  ): (Offset, Int) = previousOffsetWhereClauseValues(between._1, lastEventNodeIndexFromPreviousPage)\n+\n+  def previousOffsetWhereClauseValues(\n+      lastOffsetFromPreviousPage: Offset,\n+      lastEventNodeIndexFromPreviousPage: Option[Int]\n+  ): (Offset, Int) =\n+    lastEventNodeIndexFromPreviousPage\n+      .map(x => (lastOffsetFromPreviousPage, x))\n+      .getOrElse((Offset.begin, Integer.MAX_VALUE)) // nonsense"
  }
]