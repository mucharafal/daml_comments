[
  {
    "id" : "83af47c7-b26f-445c-9df5-b2bd2b172ac0",
    "prId" : 5669,
    "comments" : [
      {
        "id" : "c78b172f-92a3-4e63-96b6-85d79144bcbb",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n  * Subscribes to ledger configuration updates coming from the index,\r\n```",
        "createdAt" : "2020-04-29T15:45:26Z",
        "updatedAt" : "2020-05-06T07:31:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d727159f8b35003f5e8fc75af2a53edb62b2b8fc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.platform.apiserver.services\n+\n+import java.util.UUID\n+import java.util.concurrent.atomic.AtomicReference\n+\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.{RestartSource, Sink}\n+import com.daml.api.util.TimeProvider\n+import com.daml.dec.{DirectExecutionContext => DE}\n+import com.daml.ledger.api.domain\n+import com.daml.ledger.api.domain.LedgerOffset\n+import com.daml.ledger.participant.state.index.v2.IndexConfigManagementService\n+import com.daml.ledger.participant.state.v1.{\n+  Configuration,\n+  SubmissionId,\n+  SubmissionResult,\n+  WriteService\n+}\n+import com.daml.lf.data.Time.Timestamp\n+import com.daml.logging.{ContextualizedLogger, LoggingContext}\n+import com.daml.platform.configuration.LedgerConfiguration\n+\n+import scala.compat.java8.FutureConverters\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n+import scala.concurrent.duration.{DurationInt, DurationLong}\n+\n+/**\n+  * This class subscribes to ledger configuration updates coming from the index,"
  },
  {
    "id" : "43cdae42-9db1-48a0-bad6-b02f77517bf0",
    "prId" : 5669,
    "comments" : [
      {
        "id" : "266a3a0d-bca0-4784-b9bb-bf9dad9002bd",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n  * This class helps avoiding code duplication and limiting the number of\r\n```",
        "createdAt" : "2020-04-29T15:48:41Z",
        "updatedAt" : "2020-05-06T07:31:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d727159f8b35003f5e8fc75af2a53edb62b2b8fc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.platform.apiserver.services\n+\n+import java.util.UUID\n+import java.util.concurrent.atomic.AtomicReference\n+\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.{RestartSource, Sink}\n+import com.daml.api.util.TimeProvider\n+import com.daml.dec.{DirectExecutionContext => DE}\n+import com.daml.ledger.api.domain\n+import com.daml.ledger.api.domain.LedgerOffset\n+import com.daml.ledger.participant.state.index.v2.IndexConfigManagementService\n+import com.daml.ledger.participant.state.v1.{\n+  Configuration,\n+  SubmissionId,\n+  SubmissionResult,\n+  WriteService\n+}\n+import com.daml.lf.data.Time.Timestamp\n+import com.daml.logging.{ContextualizedLogger, LoggingContext}\n+import com.daml.platform.configuration.LedgerConfiguration\n+\n+import scala.compat.java8.FutureConverters\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n+import scala.concurrent.duration.{DurationInt, DurationLong}\n+\n+/**\n+  * This class subscribes to ledger configuration updates coming from the index,\n+  * and makes the latest ledger configuration available to consumers.\n+  *\n+  * This class is useful to avoid code duplication and to limit the number of"
  },
  {
    "id" : "c95487ab-36a9-4933-83b2-e3e4ddc0f609",
    "prId" : 5669,
    "comments" : [
      {
        "id" : "84c3cf62-0a83-454c-9328-8ffed24a3149",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n  // Looks up the latest ledger configuration, then subscribes to a\r\n```",
        "createdAt" : "2020-04-29T15:52:34Z",
        "updatedAt" : "2020-05-06T07:31:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d727159f8b35003f5e8fc75af2a53edb62b2b8fc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.platform.apiserver.services\n+\n+import java.util.UUID\n+import java.util.concurrent.atomic.AtomicReference\n+\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.{RestartSource, Sink}\n+import com.daml.api.util.TimeProvider\n+import com.daml.dec.{DirectExecutionContext => DE}\n+import com.daml.ledger.api.domain\n+import com.daml.ledger.api.domain.LedgerOffset\n+import com.daml.ledger.participant.state.index.v2.IndexConfigManagementService\n+import com.daml.ledger.participant.state.v1.{\n+  Configuration,\n+  SubmissionId,\n+  SubmissionResult,\n+  WriteService\n+}\n+import com.daml.lf.data.Time.Timestamp\n+import com.daml.logging.{ContextualizedLogger, LoggingContext}\n+import com.daml.platform.configuration.LedgerConfiguration\n+\n+import scala.compat.java8.FutureConverters\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n+import scala.concurrent.duration.{DurationInt, DurationLong}\n+\n+/**\n+  * This class subscribes to ledger configuration updates coming from the index,\n+  * and makes the latest ledger configuration available to consumers.\n+  *\n+  * This class is useful to avoid code duplication and to limit the number of\n+  * database lookups, as multiple services and validators require the latest ledger config.\n+  */\n+final class LedgerConfigProvider private (\n+    index: IndexConfigManagementService,\n+    writeService: WriteService,\n+    timeProvider: TimeProvider,\n+    config: LedgerConfiguration,\n+    materializer: Materializer,\n+)(implicit logCtx: LoggingContext) {\n+\n+  private[this] val logger = ContextualizedLogger.get(this.getClass)\n+\n+  // The latest offset that was read (if any), and the latest ledger configuration found (if any)\n+  private[this] type StateType = (Option[LedgerOffset.Absolute], Option[Configuration])\n+  private[this] val state: AtomicReference[StateType] = new AtomicReference(None -> None)\n+  private[this] val readyPromise: Promise[Unit] = Promise()\n+\n+  // At startup, do the following:\n+  // - Start loading the ledger configuration\n+  // - Mark the provider as ready if no configuration was found after a timeout\n+  // - Submit the initial config if none is found after a delay\n+  startLoading()\n+  materializer.scheduleOnce(config.configurationLoadTimeout.toNanos.nanos, () => {\n+    readyPromise.trySuccess(())\n+    ()\n+  })\n+  materializer.scheduleOnce(config.initialConfigurationSubmitDelay.toNanos.nanos, () => {\n+    if (latestConfiguration.isEmpty) submitInitialConfig()\n+    ()\n+  })\n+\n+  // Look up the latest ledger configuration, then subscribe to a"
  }
]