[
  {
    "id" : "af267f58-898c-497c-be04-4eb4a324d6f2",
    "prId" : 6216,
    "comments" : [
      {
        "id" : "8059b824-a3c3-43d2-a4a5-5626d3f1c51b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "What is this dummy implicit for?",
        "createdAt" : "2020-06-04T06:39:51Z",
        "updatedAt" : "2020-06-04T06:42:53Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d397b4eb-88b4-4a90-9a7e-5afc874292d6",
        "parentId" : "8059b824-a3c3-43d2-a4a5-5626d3f1c51b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It makes the first two `add` overloads have different erasures in bytecode.",
        "createdAt" : "2020-06-04T13:55:07Z",
        "updatedAt" : "2020-06-04T13:55:07Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "23271c59-30e7-434f-89f5-0fe7f3164476",
        "parentId" : "8059b824-a3c3-43d2-a4a5-5626d3f1c51b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Mh, ok. Would a simple change of name have worked, though?",
        "createdAt" : "2020-06-04T18:13:49Z",
        "updatedAt" : "2020-06-04T18:13:49Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6993ddda-e848-4da7-9a69-16f8bde77852",
        "parentId" : "8059b824-a3c3-43d2-a4a5-5626d3f1c51b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Yes, it would.\r\n\r\nWe do something similar for the superclass of all Scala-codegenned record types, since we have methods share names with possible field names:\r\n\r\nhttps://github.com/digital-asset/daml/blob/e23a488596d412b804dc4fd7af821d2c5b8dd5df/language-support/scala/bindings/src/main/scala/com/digitalasset/ledger/client/binding/binding/Template.scala#L22-L25",
        "createdAt" : "2020-06-04T19:49:08Z",
        "updatedAt" : "2020-06-04T19:49:08Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "47a4eea06961bd477c6a3c7678ee238fe9c1556f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +121,125 @@\n    def add(exercise: RawBatch.Event[RawBatch.Event.Exercised])(\n        implicit dummy: DummyImplicit): AccumulatingBatches =\n      copy(exercises = exercises :+ exercise)\n"
  },
  {
    "id" : "aae14de5-01ac-4ace-ae6c-780bd6808561",
    "prId" : 6172,
    "comments" : [
      {
        "id" : "63e6ed08-0835-4973-a1b7-b10a3dcdea76",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`NodeId` is a `final case class`, this is probably unnecessarily generic.",
        "createdAt" : "2020-06-02T07:26:28Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d58f67d3-56f4-4c52-8e48-45e18da82475",
        "parentId" : "63e6ed08-0835-4973-a1b7-b10a3dcdea76",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Scala seems to think that `Nid` and `NodeId` are distinct, which is [exploitable in type-checking](https://typelevel.org/blog/2017/02/13/more-types-than-classes.html).",
        "createdAt" : "2020-06-02T16:14:00Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e0e6427b-8e40-4799-972e-02a98b2cc597",
        "parentId" : "63e6ed08-0835-4973-a1b7-b10a3dcdea76",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "To expand, there is no need for separate maps here at all, I would have rather mapped the party sets directly into the transaction structure. However, the transaction structure isn't sufficiently generic for that, so we have the nasty Perlish technique of \"pass a map that associates the extra data in\" instead.\r\n\r\nThen I ask myself, \"given that I don't want to hypergeneralize lf.Transaction, how can I make clear that these three arguments are related in a specific way, and they do not merely contain NodeIds, but NodeIds that are specifically related to each other?\" And this is the most obvious tool available.\r\n\r\n[I expand on a similar case for similarly final class String.](https://typelevel.org/blog/2017/09/05/three-types-of-strings.html)",
        "createdAt" : "2020-06-02T16:29:46Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a07d02c332d46c90c777addcbdff06f74cd74a61",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +159,163 @@    */\n  @throws[RuntimeException]\n  def prepareBatchInsert[Nid <: NodeId](\n      submitterInfo: Option[SubmitterInfo],\n      workflowId: Option[WorkflowId],"
  },
  {
    "id" : "3425f2c2-220f-498e-bda8-2f7acc2dc3bd",
    "prId" : 6143,
    "comments" : [
      {
        "id" : "f3f173e9-6a74-428f-aab5-ccad6c1eaab0",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I believe @S11001001 had a good idea why this was here, but I don't know what it was.",
        "createdAt" : "2020-06-08T13:13:50Z",
        "updatedAt" : "2020-06-08T14:24:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89af6d420800adee764159fb1c3073fae07859e9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +159,163 @@    */\n  @throws[RuntimeException]\n  def prepareBatchInsert(\n      submitterInfo: Option[SubmitterInfo],\n      workflowId: Option[WorkflowId],"
  },
  {
    "id" : "e2b28b6d-386a-4c92-8865-084a40dfb094",
    "prId" : 5522,
    "comments" : [
      {
        "id" : "4a8da894-7f16-4cd1-94fc-f3f23b148731",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "ðŸ¥³ ",
        "createdAt" : "2020-04-09T15:31:07Z",
        "updatedAt" : "2020-04-09T17:51:17Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "32605ff4e62f3d2a5d12fabe7d6ba254e4d24056",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@package com.daml.platform.store.dao.events\n\nimport java.time.Instant\n\nimport anorm.{BatchSql, NamedParameter}"
  },
  {
    "id" : "48c116a5-b372-443e-aaef-baab01d466e0",
    "prId" : 5089,
    "comments" : [
      {
        "id" : "81623992-5497-458c-a54e-a4182e5bd2f2",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I like it. Thanks!",
        "createdAt" : "2020-03-19T20:21:12Z",
        "updatedAt" : "2020-03-20T11:06:26Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b5d117bbf4b07fc2d8a6a4f8540241ce2ece5a56",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +71,75 @@      \"create_consumed_at\" -> \"null\",\n      \"create_key_value\" -> \"{create_key_value}\"\n    )\n\n  private def create("
  }
]