[
  {
    "id" : "fadefd83-871e-4d6b-8ce4-fded35524e39",
    "prId" : 3731,
    "comments" : [
      {
        "id" : "92e74f71-2484-4a18-a72d-51e7c7d348ae",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This should probably be a log statement.",
        "createdAt" : "2019-12-05T09:57:03Z",
        "updatedAt" : "2019-12-05T12:47:57Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2337d91a-44dd-4e84-92c8-7468c763ce54",
        "parentId" : "92e74f71-2484-4a18-a72d-51e7c7d348ae",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Whoops, debugging line left in. I will delete it unless you think it's useful.",
        "createdAt" : "2019-12-05T10:02:27Z",
        "updatedAt" : "2019-12-05T12:47:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "19175c9a-999f-4611-a712-53bbe95becf9",
        "parentId" : "92e74f71-2484-4a18-a72d-51e7c7d348ae",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2019-12-05T10:17:50Z",
        "updatedAt" : "2019-12-05T12:47:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42b7a3e90d6c17e2b7174fafd9eb77ab022ed059",
    "line" : null,
    "diffHunk" : "@@ -10,54 +10,65 @@ import com.digitalasset.platform.common.logging.NamedLoggerFactory\n import com.digitalasset.platform.common.util.{DirectExecutionContext => DEC}\n import com.digitalasset.platform.index.config.{Config, StartupMode}\n \n-import scala.concurrent.{Await, Future, Promise}\n import scala.concurrent.duration._\n+import scala.concurrent.{Await, ExecutionContext, Future, Promise}\n+import scala.util.control.NonFatal\n \n // Main entry point to start an indexer server.\n // See v2.ReferenceServer for the usage\n object StandaloneIndexerServer {\n+  private val asyncTolerance: FiniteDuration = 10.seconds\n+\n+  private implicit val executionContext: ExecutionContext = DEC\n \n   def apply(\n       readService: ReadService,\n       config: Config,\n       loggerFactory: NamedLoggerFactory,\n-      metrics: MetricRegistry): Future[AutoCloseable] = {\n-\n+      metrics: MetricRegistry,\n+  ): Future[AutoCloseable] = {\n     // ActorSystem name not allowed to contain daml-lf LedgerString characters \".:#/ \"\n     val actorSystem = ActorSystem(\n       \"StandaloneIndexerServer-\" + config.participantId.filterNot(\".:#/ \".toSet))\n-    val asyncTolerance: FiniteDuration = 10.seconds\n-    val indexerFactory = JdbcIndexerFactory(metrics, loggerFactory)\n-    val indexer =\n-      RecoveringIndexer(\n-        actorSystem.scheduler,\n-        asyncTolerance,\n-        indexerFactory.asyncTolerance,\n-        loggerFactory)\n \n-    val initializedIndexerFactory = config.startupMode match {\n-      case StartupMode.MigrateOnly | StartupMode.MigrateAndStart =>\n-        indexerFactory.migrateSchema(config.jdbcUrl)\n-      case StartupMode.ValidateAndStart => indexerFactory.validateSchema(config.jdbcUrl)\n-    }\n+    val indexerFactory = JdbcIndexerFactory(metrics, loggerFactory)\n+    val indexer = RecoveringIndexer(\n+      actorSystem.scheduler,\n+      asyncTolerance,\n+      indexerFactory.asyncTolerance,\n+      loggerFactory)\n \n     val promise = Promise[Unit]\n \n-    config.startupMode match {\n-      case StartupMode.MigrateOnly => promise.success(())\n-      case StartupMode.MigrateAndStart | StartupMode.ValidateAndStart =>\n-        indexer.start { () =>\n-          {\n-            val createF = initializedIndexerFactory\n+    def startIndexer(initializedIndexerFactory: JdbcIndexerFactory[Initialized]): Future[Unit] = {\n+      println(\"Starting the indexer.\")"
  },
  {
    "id" : "656a490b-4190-4098-839d-290730201928",
    "prId" : 3731,
    "comments" : [
      {
        "id" : "546f9ceb-bcc1-4fc6-9087-967ae37e39b4",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "As you are no longer referencing `DEC` multiple times it no longer makes sense to import `DirectExecutionContext` aliased.",
        "createdAt" : "2019-12-05T12:24:53Z",
        "updatedAt" : "2019-12-05T12:47:57Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b94d7080-ec04-4366-aca6-b55b595f904c",
        "parentId" : "546f9ceb-bcc1-4fc6-9087-967ae37e39b4",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Good point. I just imported `DirectExecutionContext.implicitEC`.",
        "createdAt" : "2019-12-05T12:49:25Z",
        "updatedAt" : "2019-12-05T12:49:25Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "42b7a3e90d6c17e2b7174fafd9eb77ab022ed059",
    "line" : null,
    "diffHunk" : "@@ -10,54 +10,63 @@ import com.digitalasset.platform.common.logging.NamedLoggerFactory\n import com.digitalasset.platform.common.util.{DirectExecutionContext => DEC}\n import com.digitalasset.platform.index.config.{Config, StartupMode}\n \n-import scala.concurrent.{Await, Future, Promise}\n import scala.concurrent.duration._\n+import scala.concurrent.{Await, ExecutionContext, Future, Promise}\n+import scala.util.control.NonFatal\n \n // Main entry point to start an indexer server.\n // See v2.ReferenceServer for the usage\n object StandaloneIndexerServer {\n+  private val asyncTolerance: FiniteDuration = 10.seconds\n+\n+  private implicit val executionContext: ExecutionContext = DEC"
  },
  {
    "id" : "8766c84a-8878-4a64-8317-f7412fafcf22",
    "prId" : 2582,
    "comments" : [
      {
        "id" : "506b70cc-cd93-40dc-89d2-cdb43d730b53",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Let's keep this `actorSystem` here and pass it on to the `PostgresIndexer` instead of creating another one there.",
        "createdAt" : "2019-08-28T07:37:43Z",
        "updatedAt" : "2019-08-29T12:06:30Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4fcd279aba39c0001526d2afa503c85bd49a701e",
    "line" : 18,
    "diffHunk" : "@@ -11,9 +12,12 @@ import scala.concurrent.duration._\n // Main entry point to start an indexer server.\n // See v2.ReferenceServer for the usage\n object StandaloneIndexerServer {\n+  private[this] val actorSystem = ActorSystem(\"StandaloneIndexerServer\")"
  },
  {
    "id" : "a432aa77-4fc3-4c87-8f7e-a0b3247fcd50",
    "prId" : 1978,
    "comments" : [
      {
        "id" : "a5e7a164-43c5-47aa-ac5f-a42c50bea1f4",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "do we really need these guards? They can hide possible mistakes in cycle management.",
        "createdAt" : "2019-07-03T07:55:33Z",
        "updatedAt" : "2019-07-03T12:30:17Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "abdeb6aa-7819-4c70-80b4-967991e5f606",
        "parentId" : "a5e7a164-43c5-47aa-ac5f-a42c50bea1f4",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This is guarding against \"repeatedly calling close\" on shutdown.",
        "createdAt" : "2019-07-03T12:31:21Z",
        "updatedAt" : "2019-07-03T12:31:21Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "95c68396-ce54-4dd1-a354-0fd447335391",
        "parentId" : "a5e7a164-43c5-47aa-ac5f-a42c50bea1f4",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "yeah, that's exactly what I meant. It would be interesting to find out why.",
        "createdAt" : "2019-07-03T13:20:36Z",
        "updatedAt" : "2019-07-03T13:20:37Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "489014fcd84217503412500523ac71e792b0c3aa",
    "line" : 30,
    "diffHunk" : "@@ -0,0 +1,38 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.index\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import com.daml.ledger.participant.state.v2.ReadService\n+import com.digitalasset.platform.common.util.{DirectExecutionContext => DEC}\n+import org.slf4j.LoggerFactory\n+\n+import scala.concurrent.Await\n+\n+object StandaloneIndexerServer {\n+  private val logger = LoggerFactory.getLogger(this.getClass)\n+\n+  def apply(readService: ReadService, jdbcUrl: String): AutoCloseable = {\n+    val server = PostgresIndexer.create(readService, jdbcUrl)\n+    val indexHandleF = server.flatMap(\n+      _.subscribe(\n+        readService,\n+        t => logger.error(\"error while processing state updates\", t),\n+        () => logger.info(\"successfully finished processing state updates\")))(DEC)\n+\n+    val indexFeedHandle = Await.result(indexHandleF, PostgresIndexer.asyncTolerance)\n+    logger.info(\"Started Indexer Server\")\n+\n+    val closed = new AtomicBoolean(false)"
  }
]