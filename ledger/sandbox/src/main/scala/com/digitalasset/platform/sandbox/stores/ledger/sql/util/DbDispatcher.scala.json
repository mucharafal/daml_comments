[
  {
    "id" : "f31e23bd-73ac-41db-81de-6d05e1d63dcb",
    "prId" : 3655,
    "comments" : [
      {
        "id" : "adc5ec53-f7a3-4171-9e44-a81dfb5e035a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\nfinal class DbDispatcher(\r\n```\r\nIf it's safe to close the hierarchy here, I'd suggest we do so.",
        "createdAt" : "2019-11-28T12:30:07Z",
        "updatedAt" : "2019-11-29T13:33:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6faa9af0e976c271138c3d4af75a805e9497ba39",
    "line" : null,
    "diffHunk" : "@@ -9,51 +9,36 @@ import java.util.concurrent.Executors\n import akka.stream.scaladsl.Source\n import akka.{Done, NotUsed}\n import com.codahale.metrics.MetricRegistry\n+import com.digitalasset.ledger.api.health.{HealthStatus, ReportsHealth}\n import com.digitalasset.platform.common.logging.NamedLoggerFactory\n import com.digitalasset.platform.common.util.DirectExecutionContext\n import com.digitalasset.platform.sandbox.stores.ledger.sql.dao.HikariJdbcConnectionProvider\n import com.google.common.util.concurrent.ThreadFactoryBuilder\n \n import scala.concurrent.{ExecutionContext, Future}\n \n-trait DbDispatcher extends AutoCloseable {\n-\n-  /** Runs an SQL statement in a dedicated Executor. The whole block will be run in a single database transaction.\n-    *\n-    * The isolation level by default is the one defined in the JDBC driver, it can be however overridden per query on\n-    * the Connection. See further details at: https://docs.oracle.com/cd/E19830-01/819-4721/beamv/index.html\n-    */\n-  def executeSql[T](description: String, extraLog: Option[String] = None)(\n-      sql: Connection => T): Future[T]\n-\n-  /**\n-    * Creates a lazy Source, which takes care of:\n-    * - getting a connection for the stream\n-    * - run the SQL query using the connection\n-    * - close the connection when the stream ends\n-    *\n-    * @param sql a streaming SQL query\n-    * @tparam T the type of streamed elements\n-    * @return a lazy source which will only access the database after it's materialized and run\n-    */\n-  def runStreamingSql[T](sql: Connection => Source[T, Future[Done]]): Source[T, NotUsed]\n-\n-  /** The number of pre-allocated connections for short lived queries */\n-  def noOfShortLivedConnections: Int\n-}\n-\n-private class DbDispatcherImpl(\n+/**\n+  * A helper class to dispatch blocking SQL queries onto a dedicated thread pool. The number of threads are being kept\n+  * * in sync with the number of JDBC connections in the pool.\n+  *\n+  * @param jdbcUrl                   the jdbc url containing the database name, user name and password\n+  * @param noOfShortLivedConnections the number of connections to be pre-allocated for regular SQL queries\n+  * @param noOfStreamingConnections  the max number of connections to be used for long, streaming queries\n+  */\n+class DbDispatcher("
  },
  {
    "id" : "f3c42547-6167-4a92-9c8b-1aa05786bd78",
    "prId" : 3655,
    "comments" : [
      {
        "id" : "1d8668c8-5866-4701-a825-02ff5c15332e",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`* *`",
        "createdAt" : "2019-11-29T10:03:11Z",
        "updatedAt" : "2019-11-29T13:33:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2ffde60-c339-41a9-affe-2130a7471b59",
        "parentId" : "1d8668c8-5866-4701-a825-02ff5c15332e",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Well spotted.",
        "createdAt" : "2019-11-29T10:19:11Z",
        "updatedAt" : "2019-11-29T13:33:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6faa9af0e976c271138c3d4af75a805e9497ba39",
    "line" : null,
    "diffHunk" : "@@ -9,51 +9,36 @@ import java.util.concurrent.Executors\n import akka.stream.scaladsl.Source\n import akka.{Done, NotUsed}\n import com.codahale.metrics.MetricRegistry\n+import com.digitalasset.ledger.api.health.{HealthStatus, ReportsHealth}\n import com.digitalasset.platform.common.logging.NamedLoggerFactory\n import com.digitalasset.platform.common.util.DirectExecutionContext\n import com.digitalasset.platform.sandbox.stores.ledger.sql.dao.HikariJdbcConnectionProvider\n import com.google.common.util.concurrent.ThreadFactoryBuilder\n \n import scala.concurrent.{ExecutionContext, Future}\n \n-trait DbDispatcher extends AutoCloseable {\n-\n-  /** Runs an SQL statement in a dedicated Executor. The whole block will be run in a single database transaction.\n-    *\n-    * The isolation level by default is the one defined in the JDBC driver, it can be however overridden per query on\n-    * the Connection. See further details at: https://docs.oracle.com/cd/E19830-01/819-4721/beamv/index.html\n-    */\n-  def executeSql[T](description: String, extraLog: Option[String] = None)(\n-      sql: Connection => T): Future[T]\n-\n-  /**\n-    * Creates a lazy Source, which takes care of:\n-    * - getting a connection for the stream\n-    * - run the SQL query using the connection\n-    * - close the connection when the stream ends\n-    *\n-    * @param sql a streaming SQL query\n-    * @tparam T the type of streamed elements\n-    * @return a lazy source which will only access the database after it's materialized and run\n-    */\n-  def runStreamingSql[T](sql: Connection => Source[T, Future[Done]]): Source[T, NotUsed]\n-\n-  /** The number of pre-allocated connections for short lived queries */\n-  def noOfShortLivedConnections: Int\n-}\n-\n-private class DbDispatcherImpl(\n+/**\n+  * A helper class to dispatch blocking SQL queries onto a dedicated thread pool. The number of threads are being kept\n+  * * in sync with the number of JDBC connections in the pool."
  },
  {
    "id" : "9932e732-26a4-443d-a18d-390e317b9d40",
    "prId" : 3310,
    "comments" : [
      {
        "id" : "2330759f-d85a-4457-b24b-fe8359143b32",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "`extraLog` needs to be passed to `runQuery`.",
        "createdAt" : "2019-11-01T16:07:54Z",
        "updatedAt" : "2019-11-01T16:59:59Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2b01cd8f-4f1d-4070-a978-4013653f254e",
        "parentId" : "2330759f-d85a-4457-b24b-fe8359143b32",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Gah. Thanks!",
        "createdAt" : "2019-11-01T16:56:30Z",
        "updatedAt" : "2019-11-01T16:59:59Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "26f1cd20-aa54-40ea-871a-e9b47e9b8ccc",
        "parentId" : "2330759f-d85a-4457-b24b-fe8359143b32",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3310/commits/da69019b20e9b758d06008c4b2a5ab303bd1e4b6",
        "createdAt" : "2019-11-01T17:00:14Z",
        "updatedAt" : "2019-11-01T17:00:22Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "da69019b20e9b758d06008c4b2a5ab303bd1e4b6",
    "line" : null,
    "diffHunk" : "@@ -65,8 +68,9 @@ private class DbDispatcherImpl(\n           logger.error(s\"got an uncaught exception on thread: ${thread.getName}\", t))\n         .build()))\n \n-  override def executeSql[T](description: => String)(sql: Connection => T): Future[T] =\n-    sqlExecutor.runQuery(description, () => connectionProvider.runSQL(conn => sql(conn)))\n+  override def executeSql[T](description: String, extraLog: Option[String] = None)(\n+      sql: Connection => T): Future[T] =\n+    sqlExecutor.runQuery(description)(connectionProvider.runSQL(conn => sql(conn)))"
  },
  {
    "id" : "214cb44b-1493-4f4e-939b-92fa0da0ed05",
    "prId" : 2662,
    "comments" : [
      {
        "id" : "00d997e9-226c-421b-8f39-14443860c19d",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If we are planning to access this only if trace logging is enabled, it could make sense to pass this by name.",
        "createdAt" : "2019-08-26T15:24:12Z",
        "updatedAt" : "2019-08-30T08:59:53Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "266a6ae8-27ce-427d-8783-51a6dd6c2622",
        "parentId" : "00d997e9-226c-421b-8f39-14443860c19d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yes 👍 ",
        "createdAt" : "2019-08-27T06:58:09Z",
        "updatedAt" : "2019-08-30T08:59:53Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da3917e1-c04f-40bd-b5b5-bb9f2a675603",
        "parentId" : "00d997e9-226c-421b-8f39-14443860c19d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed in 310fa9d95.",
        "createdAt" : "2019-08-27T07:08:27Z",
        "updatedAt" : "2019-08-30T08:59:53Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fe3fd2846c655373040f8b5281532a6483f923e8",
    "line" : null,
    "diffHunk" : "@@ -22,7 +22,7 @@ trait DbDispatcher extends AutoCloseable {\n     * The isolation level by default is the one defined in the JDBC driver, it can be however overriden per query on\n     * the Connection. See further details at: https://docs.oracle.com/cd/E19830-01/819-4721/beamv/index.html\n     * */\n-  def executeSql[T](sql: Connection => T): Future[T]\n+  def executeSql[T](description: String)(sql: Connection => T): Future[T]"
  },
  {
    "id" : "73988101-6626-43ba-a71e-cf23fd9cda5e",
    "prId" : 2662,
    "comments" : [
      {
        "id" : "ce9994a0-1a42-4f1a-9e4c-f15850a6ca9a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Same as above: if we are planning to access this only if trace logging is enabled, it could make sense to pass this by name.",
        "createdAt" : "2019-08-26T15:24:24Z",
        "updatedAt" : "2019-08-30T08:59:53Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7164ea8d-e828-414d-8245-756b6610ad88",
        "parentId" : "ce9994a0-1a42-4f1a-9e4c-f15850a6ca9a",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed in 310fa9d95.",
        "createdAt" : "2019-08-27T07:08:34Z",
        "updatedAt" : "2019-08-30T08:59:53Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fe3fd2846c655373040f8b5281532a6483f923e8",
    "line" : null,
    "diffHunk" : "@@ -60,8 +60,8 @@ private class DbDispatcherImpl(\n           logger.error(s\"got an uncaught exception on thread: ${thread.getName}\", t))\n         .build()))\n \n-  override def executeSql[T](sql: Connection => T): Future[T] =\n-    sqlExecutor.runQuery(() => connectionProvider.runSQL(conn => sql(conn)))\n+  override def executeSql[T](description: String)(sql: Connection => T): Future[T] ="
  }
]