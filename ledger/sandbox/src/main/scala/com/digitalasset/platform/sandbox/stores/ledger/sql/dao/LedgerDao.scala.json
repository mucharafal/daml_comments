[
  {
    "id" : "f61dc247-5b8f-4728-b84a-ae0cbcb9583f",
    "prId" : 959,
    "comments" : [
      {
        "id" : "88acfd4f-9424-45de-bfc2-506491bea161",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "@gaboraranyossy-da Persistence queue now stores PersistenceEntry instead of LedgerEntry, see comment.",
        "createdAt" : "2019-05-07T06:35:15Z",
        "updatedAt" : "2019-05-15T16:27:45Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e4dc5b75fb95575adb8e21bb2ae04bcccdc97acf",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +53,57 @@  * The SqlLedger persistence queue Transaction elements are therefore enriched with blinding info.\n  */\nsealed abstract class PersistenceEntry extends Product with Serializable\n\nobject PersistenceEntry {"
  },
  {
    "id" : "4a9728d0-b460-4325-8b78-75e7074ba992",
    "prId" : 444,
    "comments" : [
      {
        "id" : "ba1df058-4e3d-4da3-a368-c65e10c1aafd",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Is it ok that the contract key is read in its own SQL transaction? Doesn't it have to be read together with other `lookupKey` or `lookupContract` queries from some consistent snapshot?",
        "createdAt" : "2019-04-12T13:18:13Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87ae4755-b0b2-4b4d-b932-346f5cb66e86",
        "parentId" : "ba1df058-4e3d-4da3-a368-c65e10c1aafd",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "yes, it is, see comment in https://github.com/digital-asset/daml/blob/e83c21ae11e939abc0c12a08887381b888df376a/ledger/backend-api/src/main/scala/com/digitalasset/ledger/backend/api/v1/SubmissionHandle.scala#L56",
        "createdAt" : "2019-04-15T15:01:29Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2caa7f293aac7972574e45eb2989deaffe86da96",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +84,88 @@    * @return the optional AbsoluteContractId\n    */\n  def lookupKey(key: Node.GlobalKey): Future[Option[AbsoluteContractId]]\n\n  /**"
  }
]