[
  {
    "id" : "b1f1644e-ad90-46d9-a0bb-9d7d95129da1",
    "prId" : 5669,
    "comments" : [
      {
        "id" : "c43375da-89d7-4ea0-bf1c-6954d01f67f6",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "You may want to remove these examples as the audience may not know these.",
        "createdAt" : "2020-04-29T15:57:48Z",
        "updatedAt" : "2020-05-06T07:31:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d727159f8b35003f5e8fc75af2a53edb62b2b8fc",
    "line" : null,
    "diffHunk" : "@@ -19,15 +19,58 @@ case class LedgerConfiguration(\n       * The delay until the ledger API server tries to submit an initial configuration at startup if none exists.\n       */\n     initialConfigurationSubmitDelay: Duration,\n+    /**\n+      * The amount of time the ledger API server will wait to load a ledger configuration.\n+      *\n+      * The ledger API server waits at startup until it reads at least one configuration changed update from the ledger.\n+      * If none is found within this timeout, the ledger API server will start anyway, but services that depend\n+      * on the ledger configuration (e.g., SubmissionService or CommandService) will reject all requests with the\n+      * UNAVAILABLE error.\n+      */\n+    configurationLoadTimeout: Duration,\n )\n \n object LedgerConfiguration {\n-  val default: LedgerConfiguration = LedgerConfiguration(\n+\n+  /** Default configuration for a ledger-backed index,\n+    * i.e., if there is zero delay between the ledger and the index.\n+    * Example: Sandbox classic.\n+    */\n+  val defaultLedgerBackedIndex: LedgerConfiguration = LedgerConfiguration(\n+    initialConfiguration = Configuration(\n+      generation = 1,\n+      timeModel = TimeModel.reasonableDefault,\n+      maxDeduplicationTime = Duration.ofDays(1)\n+    ),\n+    initialConfigurationSubmitDelay = Duration.ZERO,\n+    configurationLoadTimeout = Duration.ofSeconds(1),\n+  )\n+\n+  /** Default configuration for a local single-participant ledger,\n+    * i.e., if there is minimal delay between the ledger and the index.\n+    * Example: Sandbox next.\n+    */\n+  val defaultLocalLedger: LedgerConfiguration = LedgerConfiguration(\n+    initialConfiguration = Configuration(\n+      generation = 1,\n+      timeModel = TimeModel.reasonableDefault,\n+      maxDeduplicationTime = Duration.ofDays(1)\n+    ),\n+    initialConfigurationSubmitDelay = Duration.ofMillis(500),\n+    configurationLoadTimeout = Duration.ofSeconds(5),\n+  )\n+\n+  /** Default configuration for a participant connecting to a remote ledger,\n+    * i.e., if there may be significant delay between the ledger and the index.\n+    * Example: vDAML, Canton."
  },
  {
    "id" : "730834e7-4917-4454-9f1c-8c4043d40a20",
    "prId" : 5591,
    "comments" : [
      {
        "id" : "aacd3f2e-89a9-47c3-8c8c-1d2dc08e9a09",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      * The delay until the ledger API server tries to submit an initial configuration at startup if none exists.\r\n```",
        "createdAt" : "2020-04-21T12:39:19Z",
        "updatedAt" : "2020-04-21T13:49:25Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c88cb69f1442ab96bd253fb3a6720778c58fb8f0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.platform.configuration\n+\n+import java.time.Duration\n+\n+import com.daml.ledger.participant.state.v1.{Configuration, TimeModel}\n+\n+/**\n+  * Configuration surrounding ledger parameters.\n+  */\n+case class LedgerConfiguration(\n+    /**\n+      * The initial ledger configuration to submit if the ledger does not contain one yet.\n+      */\n+    initialConfiguration: Configuration,\n+    /**\n+      * The delay until the ledger API server tries to submit an initial configuration if none exists."
  }
]