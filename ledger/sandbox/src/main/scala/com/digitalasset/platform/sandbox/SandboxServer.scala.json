[
  {
    "id" : "391a627a-3e0b-497e-ba26-12adf65a231c",
    "prId" : 6512,
    "comments" : [
      {
        "id" : "8a7f9b80-eba8-414e-9a1c-7f3ca859507e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@SamirTalwar-DA Is that enough to make it work in `sandbox-next`? Or does it only affect `sandbox-classic`?",
        "createdAt" : "2020-06-29T11:44:34Z",
        "updatedAt" : "2020-06-29T12:47:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "11f122bf-6104-477e-98f0-60a73e3e7683",
        "parentId" : "8a7f9b80-eba8-414e-9a1c-7f3ca859507e",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Oh, good catch. This will only affect Sandbox Classic. You'll need to add it to `com.daml.platform.sandboxnext.Runner` too.",
        "createdAt" : "2020-06-29T11:48:08Z",
        "updatedAt" : "2020-06-29T12:47:24Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8dc5d373-8b11-4e8e-a3d1-30e9c285eddd",
        "parentId" : "8a7f9b80-eba8-414e-9a1c-7f3ca859507e",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thanks for letting me know. I'll do that in a followup PR together with the profiler as well.",
        "createdAt" : "2020-06-29T12:45:56Z",
        "updatedAt" : "2020-06-29T12:47:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ec8a59682399aa5dbac069527e4e9a52cdeb4e7",
    "line" : 4,
    "diffHunk" : "@@ -138,6 +138,7 @@ final class SandboxServer(\n       Files.createDirectories(profileDir)\n       engine.startProfiling(profileDir)\n   }\n+  engine.enableStackTraces(config.stackTraces)"
  },
  {
    "id" : "82f9ba24-a736-492c-8eaf-fe42437f37d3",
    "prId" : 6151,
    "comments" : [
      {
        "id" : "e348d35b-e440-4acc-8722-30eadd22c261",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "`fold` might be cleaner here.\r\n\r\n```suggestion\r\n        config.profileDir.fold(\"\").fold(dir => s\", profile directory = ${dir}\")\r\n```",
        "createdAt" : "2020-05-29T12:00:58Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ae912963-d0e3-45fd-8953-a9c4a9aee59b",
        "parentId" : "e348d35b-e440-4acc-8722-30eadd22c261",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not a big fan of `fold` and `foreach` on `Option`. At least for me, it makes reading code significantly harder since I need to run a type inference in my head, particularly during code review. And I don't mind writing a few more lines if it makes my intent easy to understand. It would have been cool if Scala had something like Rust's [`map_or`](https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or).",
        "createdAt" : "2020-05-29T13:05:53Z",
        "updatedAt" : "2020-05-29T13:05:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8d958422-b9a4-48f9-9415-12dc0005d67b",
        "parentId" : "e348d35b-e440-4acc-8722-30eadd22c261",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Fair. 🙂 ",
        "createdAt" : "2020-05-29T13:13:50Z",
        "updatedAt" : "2020-05-29T13:13:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 31,
    "diffHunk" : "@@ -330,6 +338,10 @@ final class SandboxServer(\n         ledgerType,\n         authService.getClass.getSimpleName,\n         config.seeding.fold(\"no\")(_.toString.toLowerCase),\n+        config.profileDir match {\n+          case None => \"\"\n+          case Some(profileDir) => s\", profile directory = ${profileDir}\"\n+        },"
  },
  {
    "id" : "a5196491-30d1-4951-a774-d35903f0c335",
    "prId" : 6151,
    "comments" : [
      {
        "id" : "6b1eb8c0-3eb8-4320-8290-1e67c1bb02c7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "What happens if we reset the server with the ResetService?",
        "createdAt" : "2020-05-29T12:03:05Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4bdbdc31-8c3a-47ba-87b2-5cfe1b521d2a",
        "parentId" : "6b1eb8c0-3eb8-4320-8290-1e67c1bb02c7",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "To my best understanding, the engine is not touched when the reset service is used. That is at least how I understand the comment\r\nhttps://github.com/digital-asset/daml/blob/9d955d7039651e670bf58d908f460a96f17456ee/ledger/sandbox/src/main/scala/com/digitalasset/platform/sandbox/SandboxServer.scala#L60",
        "createdAt" : "2020-05-29T13:07:55Z",
        "updatedAt" : "2020-05-29T13:07:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "370e1b3e-d926-4c6e-b9ac-830edc56979d",
        "parentId" : "6b1eb8c0-3eb8-4320-8290-1e67c1bb02c7",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Sounds good. I don't particularly understand how resetting affects things; I just know it's easy to get bitten by it.",
        "createdAt" : "2020-05-29T13:14:23Z",
        "updatedAt" : "2020-05-29T13:14:23Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 4,
    "diffHunk" : "@@ -126,6 +126,14 @@ final class SandboxServer(\n   def this(config: SandboxConfig, materializer: Materializer) =\n     this(config, materializer, new Metrics(new MetricRegistry))\n \n+  // NOTE(MH): We must do this _before_ we load the first package."
  },
  {
    "id" : "a765a3d9-161e-4c7f-b0c5-2ecfdcd76a1d",
    "prId" : 6151,
    "comments" : [
      {
        "id" : "f34924a5-96e5-4ffb-9d1e-b017323a7525",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You can use `foreach` here.\r\n\r\n```suggestion\r\n  config.profileDir.foreach { profileDir =>\r\n    Files.createDirectories(profileDir)\r\n    engine.startProfiling(profileDir)\r\n  }\r\n```",
        "createdAt" : "2020-05-29T12:03:41Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f646da8a-d5ed-4823-bece-0d8d43475642",
        "parentId" : "f34924a5-96e5-4ffb-9d1e-b017323a7525",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "See above.",
        "createdAt" : "2020-05-29T13:08:37Z",
        "updatedAt" : "2020-05-29T13:08:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 10,
    "diffHunk" : "@@ -126,6 +126,14 @@ final class SandboxServer(\n   def this(config: SandboxConfig, materializer: Materializer) =\n     this(config, materializer, new Metrics(new MetricRegistry))\n \n+  // NOTE(MH): We must do this _before_ we load the first package.\n+  config.profileDir match {\n+    case None => ()\n+    case Some(profileDir) =>\n+      Files.createDirectories(profileDir)\n+      engine.startProfiling(profileDir)\n+  }"
  },
  {
    "id" : "8cb15cf0-042a-4fe6-b236-f04cd0e61c7b",
    "prId" : 5929,
    "comments" : [
      {
        "id" : "6512df9f-cd33-4432-b0d8-36b7ff77935b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-05-11T13:56:54Z",
        "updatedAt" : "2020-05-13T10:04:55Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dba967f9f02fe374fa8a168129d2d6976b15b151",
    "line" : 34,
    "diffHunk" : "@@ -182,11 +182,11 @@ final class SandboxServer(\n       _.reset(\n         (materializer, metrics, packageStore, port) =>\n           buildAndStartApiServer(\n-            materializer,\n-            metrics,\n-            packageStore,\n-            SqlStartMode.AlwaysReset,\n-            Some(port),\n+            materializer = materializer,\n+            metrics = metrics,\n+            packageStore = packageStore,\n+            startMode = SqlStartMode.AlwaysReset,\n+            currentPort = Some(port),"
  },
  {
    "id" : "2109c50a-bae6-4f44-9632-b85c13bfe0c4",
    "prId" : 5929,
    "comments" : [
      {
        "id" : "5728f450-12ef-44c1-920d-97ecb1c37078",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Does this need to be optional any more? I think this might be the only place that ever set it to `None`.",
        "createdAt" : "2020-05-11T16:27:30Z",
        "updatedAt" : "2020-05-13T10:04:55Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f2177984-adfd-49e8-ab49-d6579af47061",
        "parentId" : "5728f450-12ef-44c1-920d-97ecb1c37078",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Canton needs it for some days (hopfully). ",
        "createdAt" : "2020-05-11T16:30:52Z",
        "updatedAt" : "2020-05-13T10:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dba967f9f02fe374fa8a168129d2d6976b15b151",
    "line" : null,
    "diffHunk" : "@@ -284,7 +288,7 @@ final class SandboxServer(\n         optTimeServiceBackend = timeServiceBackendO,\n         metrics = metrics,\n         healthChecks = healthChecks,\n-        seedService = config.seeding.map(SeedService(_)),\n+        seedService = Some(SeedService(config.seeding.getOrElse(SeedService.Seeding.Weak))),"
  },
  {
    "id" : "3e59e1d2-9f11-4266-932a-c179a69a6470",
    "prId" : 5781,
    "comments" : [
      {
        "id" : "7a9b9475-a3d4-47d4-9609-7259a3f0f948",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Previously `ActiveLedgerStateManager` did the implicit party allocation. But now that it's gone, we resort to the same mechanism as sadbonx (i.e. explicit implicit party allocation), right?",
        "createdAt" : "2020-05-04T14:10:40Z",
        "updatedAt" : "2020-05-04T14:46:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "843d0332-2d33-4fe8-8aa4-c33a6f1c5f9c",
        "parentId" : "7a9b9475-a3d4-47d4-9609-7259a3f0f948",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Precisely, if this flag is on the command submission service walks the transaction tree and does the party allocation.",
        "createdAt" : "2020-05-04T14:52:39Z",
        "updatedAt" : "2020-05-04T14:52:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2cef248cc3f3c465650baeffbee12935ac37bb2e",
    "line" : 9,
    "diffHunk" : "@@ -288,10 +288,8 @@ final class SandboxServer(\n         ledgerConfiguration = ledgerConfiguration,\n         commandConfig = config.commandConfig,\n         partyConfig = PartyConfiguration.default.copy(\n-          // In this version of Sandbox, parties are always allocated implicitly. Enabling\n-          // this would result in an extra `writeService.allocateParty` call, which is\n-          // unnecessary and bad for performance.\n-          implicitPartyAllocation = false,\n+          // sandbox-classic always allocates party implicitly\n+          implicitPartyAllocation = true,"
  },
  {
    "id" : "bd22fd00-19fc-472f-914b-51596f6932b5",
    "prId" : 5315,
    "comments" : [
      {
        "id" : "72c19e1a-5ea7-48e3-8a88-cd6a39ec7ec5",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think this is unused now.",
        "createdAt" : "2020-03-31T15:49:34Z",
        "updatedAt" : "2020-03-31T17:43:59Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "164ffea7-27b0-46e9-ae37-4a43ea5c89d7",
        "parentId" : "72c19e1a-5ea7-48e3-8a88-cd6a39ec7ec5",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Also, you can probably delete `TimeServiceBackend.observing` and any related code.",
        "createdAt" : "2020-03-31T15:49:45Z",
        "updatedAt" : "2020-03-31T17:43:59Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b842cea4-7b41-4282-a5d6-89fd49238911",
        "parentId" : "72c19e1a-5ea7-48e3-8a88-cd6a39ec7ec5",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Ooohhh, very good catch. Thank you!",
        "createdAt" : "2020-03-31T16:36:05Z",
        "updatedAt" : "2020-03-31T17:43:59Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2beee020cac3ccd86a87358e05512687af93e7d4",
    "line" : null,
    "diffHunk" : "@@ -273,14 +266,6 @@ final class SandboxServer(\n         \"write\" -> indexAndWriteService.writeService,\n       )\n       observingTimeServiceBackend = timeServiceBackendO.map(TimeServiceBackend.observing)"
  },
  {
    "id" : "6e83f354-3bef-4e44-a2dc-2cc020a74de7",
    "prId" : 4864,
    "comments" : [
      {
        "id" : "4c416276-10f0-48b3-8458-1717cd0c79c7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You can remove the \"index.html\".\r\n\r\n```suggestion\r\n              |A migration guide for converting your scenarios to DAML Script is available at https://docs.daml.com/daml-script/#using-daml-script-for-ledger-initialization\"\"\".stripMargin)\r\n```",
        "createdAt" : "2020-03-06T10:01:33Z",
        "updatedAt" : "2020-03-06T17:01:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bad289d7-d61d-4170-90ae-718ac082948b",
        "parentId" : "4c416276-10f0-48b3-8458-1717cd0c79c7",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thanks. Fixed in 6cb255c.",
        "createdAt" : "2020-03-06T12:58:41Z",
        "updatedAt" : "2020-03-06T17:01:27Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c55589427ad3d3ec81d819d1df58ad8d5bd67d75",
    "line" : null,
    "diffHunk" : "@@ -323,6 +323,11 @@ final class SandboxServer(\n           authService.getClass.getSimpleName,\n           config.seeding.fold(\"no\")(_.toString.toLowerCase),\n         )\n+        if (config.scenario.nonEmpty) {\n+          logger.withoutContext.warn(\n+            \"\"\"Initializing a ledger with scenarios is deprecated and will be removed in the future. You are advised to use DAML Script instead.\n+              |A migration guide for converting your scenarios to DAML Script is available at https://docs.daml.com/daml-script/index.html#using-daml-script-for-ledger-initialization\"\"\".stripMargin)"
  },
  {
    "id" : "4a9af265-91be-46c3-84f6-149d46871eb9",
    "prId" : 4864,
    "comments" : [
      {
        "id" : "2f057107-7ed9-4c74-8d0b-86cbb7a71218",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Do you want to add a sentence along the lines of, \"Test scenarios in DAML Studio will continue to work as expected.\"?",
        "createdAt" : "2020-03-06T10:02:35Z",
        "updatedAt" : "2020-03-06T17:01:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8a197077-2123-4ce5-9ba5-7c4c5c2bbb64",
        "parentId" : "2f057107-7ed9-4c74-8d0b-86cbb7a71218",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thanks. Fixed in 6cb255c.",
        "createdAt" : "2020-03-06T12:58:48Z",
        "updatedAt" : "2020-03-06T17:01:27Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c55589427ad3d3ec81d819d1df58ad8d5bd67d75",
    "line" : null,
    "diffHunk" : "@@ -323,6 +323,11 @@ final class SandboxServer(\n           authService.getClass.getSimpleName,\n           config.seeding.fold(\"no\")(_.toString.toLowerCase),\n         )\n+        if (config.scenario.nonEmpty) {\n+          logger.withoutContext.warn(\n+            \"\"\"Initializing a ledger with scenarios is deprecated and will be removed in the future. You are advised to use DAML Script instead."
  },
  {
    "id" : "c10653ce-0ff2-4415-b087-f0c6658e64aa",
    "prId" : 4755,
    "comments" : [
      {
        "id" : "561ca73b-7355-4952-9680-a95cbaaadd09",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "What do you mean by this comment? The code says if you already have a port set then don't care about the port specified in the config. If you would like to imply that `currentPort` is the port saved before reset then please rename the parameter accordingly.",
        "createdAt" : "2020-03-02T12:31:43Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "60fac657-5d44-4830-b17d-467f5a95d4de",
        "parentId" : "561ca73b-7355-4952-9680-a95cbaaadd09",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This comment was just moved from the code above because it no longer fit; I didn't change it, and I'd rather not change it in this PR.",
        "createdAt" : "2020-03-02T13:44:26Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "31290e7a-6e7f-4e30-8043-bbc6621e9c3f",
        "parentId" : "561ca73b-7355-4952-9680-a95cbaaadd09",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "OK -- I'm just pointing out this comment is rather confusing than helping.",
        "createdAt" : "2020-03-02T15:02:46Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d36fdaa30a004657bd518f427ba4d9695681aa0",
    "line" : 36,
    "diffHunk" : "@@ -298,13 +307,13 @@ final class SandboxServer(\n                 defaultLedgerConfiguration = defaultConfiguration,\n                 commandConfig = config.commandConfig,\n                 submissionConfig = config.submissionConfig,\n-                optTimeServiceBackend = timeServiceBackendO\n-                  .map(TimeServiceBackend.withObserver(_, indexAndWriteService.publishHeartbeat)),\n+                optTimeServiceBackend = observingTimeServiceBackend,\n                 metrics = metrics,\n                 healthChecks = healthChecks,\n                 seedService = seedService,\n               )(mat, esf, logCtx)\n               .map(_.withServices(List(resetService(ledgerId, authorizer, executionContext)))),\n+          // NOTE: Re-use the same port after reset."
  },
  {
    "id" : "02ddf182-fba1-4d39-af53-9f18826e742e",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "9c7caef8-3c86-4c88-82ca-043cfa3e0e87",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I don't think we need this warning to be honest. Maybe add the seeding-type to the startup info log, where we also print the supported LF versions.",
        "createdAt" : "2020-02-28T08:21:03Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -328,6 +320,8 @@ final class SandboxServer(\n           ledgerType,\n           authService.getClass.getSimpleName\n         )\n+        if (config.seeding.contains(SeedService.Seeding.Weak))\n+          logger.warn(\"Contract id seeding uses a weak seed. DO NOT USE IN PRODUCTION.\")"
  },
  {
    "id" : "a5bf88b4-0575-49f8-a707-a6bb50132909",
    "prId" : 4533,
    "comments" : [
      {
        "id" : "38ffa8a6-5a0b-4cf2-81ac-d495ef952e8a",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Shouldn't it be the other way around? When `useSortableCid` is active, we create a seed service?",
        "createdAt" : "2020-02-17T09:29:27Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fe5be47e-79f3-445e-b26b-e5cd2d68648d",
        "parentId" : "38ffa8a6-5a0b-4cf2-81ac-d495ef952e8a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. Thanks.",
        "createdAt" : "2020-02-17T09:49:23Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69e42150daf521f93631ef81bea5b8b2314d7beb",
    "line" : 21,
    "diffHunk" : "@@ -272,6 +274,12 @@ final class SandboxServer(\n           )\n       }\n \n+      val seedService =\n+        if (config.useSortableCid)"
  },
  {
    "id" : "4976ef6f-3dcb-4cd4-8b97-c8354e82356e",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "a370535d-f6cf-460f-a6ce-c61e14727ef6",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to have a `Resource.forTryCloseable` to avoid having an owner that just acquires?",
        "createdAt" : "2020-02-10T09:41:35Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b87ead7a-ad5c-402a-a917-cfae9cc86754",
        "parentId" : "a370535d-f6cf-460f-a6ce-c61e14727ef6",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Maybe, but I think the explicit `acquire` is worth it for things that really should be released. I think this is a bigger question; perhaps all those `ResourceOwner.forXyz` methods should also be available on `Resource`?",
        "createdAt" : "2020-02-10T10:05:46Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "08987a8b-8c41-4b73-b443-e5c304657a32",
        "parentId" : "a370535d-f6cf-460f-a6ce-c61e14727ef6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Does the explicit `acquire` actually change the semantics?",
        "createdAt" : "2020-02-10T10:21:05Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b4c2e2a3-ed14-4d43-9506-62c2737437ec",
        "parentId" : "a370535d-f6cf-460f-a6ce-c61e14727ef6",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Nah. I have a refactoring on the way but it's a big change because I'm making the constructor private, which breaks some stuff, so I'd rather do this in a separate piece of work.",
        "createdAt" : "2020-02-10T12:33:21Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : 15,
    "diffHunk" : "@@ -63,15 +64,14 @@ object SandboxServer {\n   // repeated validation of the sames packages after each reset\n   private val engine = Engine()\n \n-  def owner(config: SandboxConfig): ResourceOwner[SandboxState] = new ResourceOwner[SandboxState] {\n-    override def acquire()(implicit executionContext: ExecutionContext): Resource[SandboxState] = {\n-      for {\n-        server <- ResourceOwner.forTry(() => Try(new SandboxServer(config))).acquire()\n-        state <- server.sandboxState\n-        _ <- state.apiServer\n-      } yield state\n+  def owner(config: SandboxConfig): ResourceOwner[SandboxServer] =\n+    new ResourceOwner[SandboxServer] {\n+      override def acquire()(implicit executionContext: ExecutionContext): Resource[SandboxServer] =\n+        for {\n+          server <- ResourceOwner.forTryCloseable(() => Try(new SandboxServer(config))).acquire()"
  },
  {
    "id" : "b966e0df-cb66-46f6-b680-d4e36dff6c6d",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "de6141f1-a6cc-4dc1-86a1-13176d6524d9",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It looks like you are turning a resource into a future and then wrapping it into a resource, right? Can you shortcut this and simply `flatMap` over the resource itself?",
        "createdAt" : "2020-02-10T09:42:55Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "05045556-7140-47ff-ae2f-b260ff8c2c27",
        "parentId" : "de6141f1-a6cc-4dc1-86a1-13176d6524d9",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Nope; the point of this is to make sure we _don't_ capture a reference to the `apiServer`, which is part of what causes the memory leak. (Try it; the test will fail.)",
        "createdAt" : "2020-02-10T10:06:20Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e35c2102-875f-4364-8928-5ff68c3d0d56",
        "parentId" : "de6141f1-a6cc-4dc1-86a1-13176d6524d9",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Thanks. Probably worth commenting this for future reference, then.",
        "createdAt" : "2020-02-10T10:21:46Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f856bd51-911c-4073-8a68-62b10fbf5fa5",
        "parentId" : "de6141f1-a6cc-4dc1-86a1-13176d6524d9",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-02-10T12:40:02Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : null,
    "diffHunk" : "@@ -63,15 +64,14 @@ object SandboxServer {\n   // repeated validation of the sames packages after each reset\n   private val engine = Engine()\n \n-  def owner(config: SandboxConfig): ResourceOwner[SandboxState] = new ResourceOwner[SandboxState] {\n-    override def acquire()(implicit executionContext: ExecutionContext): Resource[SandboxState] = {\n-      for {\n-        server <- ResourceOwner.forTry(() => Try(new SandboxServer(config))).acquire()\n-        state <- server.sandboxState\n-        _ <- state.apiServer\n-      } yield state\n+  def owner(config: SandboxConfig): ResourceOwner[SandboxServer] =\n+    new ResourceOwner[SandboxServer] {\n+      override def acquire()(implicit executionContext: ExecutionContext): Resource[SandboxServer] =\n+        for {\n+          server <- ResourceOwner.forTryCloseable(() => Try(new SandboxServer(config))).acquire()\n+          _ <- Resource.fromFuture(server.sandboxState.apiServer.asFuture.map(_ => ()))"
  },
  {
    "id" : "22ba016f-b26f-445a-9740-9ab39fd1e6b1",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "c92b69d5-0fb0-4749-953d-a50dc7d8a031",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would this make the `DirectExecutionContext` of the actor system?",
        "createdAt" : "2020-02-10T09:45:50Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3761f73e-70c4-4fef-8b7a-1c1e315e18ab",
        "parentId" : "c92b69d5-0fb0-4749-953d-a50dc7d8a031",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good question. The semantics haven't changed here; it was always the implicit execution context. It appears that `ActorSystem` doesn't take an implicit execution context though, only an explicit one, and we never provide it, which I think means it uses `ExecutionContext.global` (but I'm not sure about that).",
        "createdAt" : "2020-02-10T10:53:38Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "709dc3bc-6452-4806-9c5f-0733be7e9e15",
        "parentId" : "c92b69d5-0fb0-4749-953d-a50dc7d8a031",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I know how to fix this but it's a fairly big change (because lots of tests call `new SandboxServer` directly) so I'd like to do it separately.",
        "createdAt" : "2020-02-10T12:39:03Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : 98,
    "diffHunk" : "@@ -123,25 +124,34 @@ final class SandboxServer(config: SandboxConfig) extends AutoCloseable {\n \n   private val authService: AuthService = config.authService.getOrElse(AuthServiceWildcard)\n \n-  private val metrics = new MetricRegistry\n-\n-  @volatile private var sandboxState: Resource[SandboxState] = _\n-\n-  sandboxState = {\n+  private val metricsResource: Resource[MetricRegistry] = {\n     implicit val executionContext: ExecutionContext = DirectExecutionContext\n+    val metrics = new MetricRegistry\n     for {\n       _ <- ResourceOwner\n         .forCloseable(() => new MetricsReporting(metrics, getClass.getPackage.getName))\n         .acquire()\n-      state <- start()\n-    } yield state\n+    } yield metrics\n   }\n \n+  private val materializerResource: Resource[Materializer] = {\n+    implicit val executionContext: ExecutionContext = DirectExecutionContext"
  },
  {
    "id" : "737a9051-4548-4fbe-8498-e707b1f137e8",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "c99448b7-1bbd-4f7a-8b54-d92d7ad7b349",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Why isn't package private enough for testing?",
        "createdAt" : "2020-02-10T09:46:44Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "010ef1e0-867a-44a9-9e06-234642cc76d2",
        "parentId" : "c99448b7-1bbd-4f7a-8b54-d92d7ad7b349",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "It is. This annotation does nothing; it just makes it clear to the reader that the reason this is _not_ `private` is for testing purposes.\r\n\r\nI can change it to a comment if you like.",
        "createdAt" : "2020-02-10T10:06:57Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "54e71105-2083-4ae8-843c-ed27ef5b9582",
        "parentId" : "c99448b7-1bbd-4f7a-8b54-d92d7ad7b349",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yes, please. Seems like a more straightforward way to communicate to readers. :slightly_smiling_face: ",
        "createdAt" : "2020-02-10T10:22:54Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b392e9a3-915c-43bf-88b6-1a7eeff5a6ec",
        "parentId" : "c99448b7-1bbd-4f7a-8b54-d92d7ad7b349",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-02-10T12:39:13Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : null,
    "diffHunk" : "@@ -123,25 +124,34 @@ final class SandboxServer(config: SandboxConfig) extends AutoCloseable {\n \n   private val authService: AuthService = config.authService.getOrElse(AuthServiceWildcard)\n \n-  private val metrics = new MetricRegistry\n-\n-  @volatile private var sandboxState: Resource[SandboxState] = _\n-\n-  sandboxState = {\n+  private val metricsResource: Resource[MetricRegistry] = {\n     implicit val executionContext: ExecutionContext = DirectExecutionContext\n+    val metrics = new MetricRegistry\n     for {\n       _ <- ResourceOwner\n         .forCloseable(() => new MetricsReporting(metrics, getClass.getPackage.getName))\n         .acquire()\n-      state <- start()\n-    } yield state\n+    } yield metrics\n   }\n \n+  private val materializerResource: Resource[Materializer] = {\n+    implicit val executionContext: ExecutionContext = DirectExecutionContext\n+    for {\n+      actorSystem <- AkkaResourceOwner.forActorSystem(() => ActorSystem(ActorSystemName)).acquire()\n+      materializer <- AkkaResourceOwner.forMaterializer(() => Materializer(actorSystem)).acquire()\n+    } yield materializer\n+  }\n+\n+  @VisibleForTesting"
  },
  {
    "id" : "70db648f-c90f-49dc-8a23-f9c55498b539",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "52ce0572-c269-42c3-a3cd-dc8c214803af",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's not completely clear to me as to why we'd want to use the `DirectExecutionContext` here. Can you comment this to make it clear for other readers?",
        "createdAt" : "2020-02-10T09:47:55Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1874459c-54a7-4918-a534-a21e9266034b",
        "parentId" : "52ce0572-c269-42c3-a3cd-dc8c214803af",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'm not clear on it either. It's Always Been That Way™. I'd love to change it, but, well, I'm scared.",
        "createdAt" : "2020-02-10T11:04:44Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5d0bab17-63eb-486a-b261-28b1defe4bf6",
        "parentId" : "52ce0572-c269-42c3-a3cd-dc8c214803af",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I don't think we (necessarily) have to change this. @gerolf-da Do you perhaps have the context to clarify this?",
        "createdAt" : "2020-02-10T11:53:54Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "47990615-d515-43a3-a0d1-a8efe92959dd",
        "parentId" : "52ce0572-c269-42c3-a3cd-dc8c214803af",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I can fix this in the next piece of work. 🙂 ",
        "createdAt" : "2020-02-10T12:39:26Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : null,
    "diffHunk" : "@@ -123,25 +124,34 @@ final class SandboxServer(config: SandboxConfig) extends AutoCloseable {\n \n   private val authService: AuthService = config.authService.getOrElse(AuthServiceWildcard)\n \n-  private val metrics = new MetricRegistry\n-\n-  @volatile private var sandboxState: Resource[SandboxState] = _\n-\n-  sandboxState = {\n+  private val metricsResource: Resource[MetricRegistry] = {\n     implicit val executionContext: ExecutionContext = DirectExecutionContext\n+    val metrics = new MetricRegistry\n     for {\n       _ <- ResourceOwner\n         .forCloseable(() => new MetricsReporting(metrics, getClass.getPackage.getName))\n         .acquire()\n-      state <- start()\n-    } yield state\n+    } yield metrics\n   }\n \n+  private val materializerResource: Resource[Materializer] = {\n+    implicit val executionContext: ExecutionContext = DirectExecutionContext\n+    for {\n+      actorSystem <- AkkaResourceOwner.forActorSystem(() => ActorSystem(ActorSystemName)).acquire()\n+      materializer <- AkkaResourceOwner.forMaterializer(() => Materializer(actorSystem)).acquire()\n+    } yield materializer\n+  }\n+\n+  @VisibleForTesting\n+  @volatile private[sandbox] var sandboxState: SandboxState = _\n+\n+  start()(DirectExecutionContext)"
  },
  {
    "id" : "0238098c-e072-4450-9193-9c0654aa7236",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "df910b9a-47a3-4872-a2b0-e23c2664d633",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Was the `MetricRegistry` the only resource that was not released properly on reset?",
        "createdAt" : "2020-02-10T09:49:34Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "44741fe5-90bc-41ae-9332-bb57691374f3",
        "parentId" : "df910b9a-47a3-4872-a2b0-e23c2664d633",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Nope, the `SandboxState` (and by extension everything inside it) was being held on to.",
        "createdAt" : "2020-02-10T10:07:31Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "df3d931d-a603-421d-9c3e-f6a81193e150",
        "parentId" : "df910b9a-47a3-4872-a2b0-e23c2664d633",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I see, thanks.",
        "createdAt" : "2020-02-10T10:23:08Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : 163,
    "diffHunk" : "@@ -158,29 +168,31 @@ final class SandboxServer(config: SandboxConfig) extends AutoCloseable {\n \n   def resetAndRestartServer()(implicit executionContext: ExecutionContext): Future[Unit] = {\n     val apiServicesClosed =\n-      sandboxState.flatMap(_.apiServer).asFuture.flatMap(_.servicesClosed())\n+      sandboxState.apiServer.asFuture.flatMap(_.servicesClosed())\n \n     // Need to run this async otherwise the callback kills the server under the in-flight reset service request!\n     // TODO: eliminate the state mutation somehow\n-    sandboxState = for {\n-      state <- sandboxState\n-      currentPort <- Resource.fromFuture(state.port)\n-      _ <- Resource.fromFuture(state.apiServer.release())\n-    } yield\n-      state.copy(\n+    for {\n+      currentPort <- sandboxState.port\n+      _ <- sandboxState.apiServer.release()\n+    } {\n+      sandboxState = sandboxState.copy(\n         apiServer = buildAndStartApiServer(\n-          state.materializer,\n-          state.packageStore,\n+          sandboxState.materializer,\n+          sandboxState.metrics,\n+          sandboxState.packageStore,\n           SqlStartMode.AlwaysReset,\n           Some(currentPort),\n         ))\n+    }\n \n     // waits for the services to be closed, so we can guarantee that future API calls after finishing the reset will never be handled by the old one\n     apiServicesClosed\n   }\n \n   private def buildAndStartApiServer(\n       materializer: Materializer,\n+      metrics: MetricRegistry,"
  },
  {
    "id" : "65e2733b-5480-4137-bf2f-9f264080cd72",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "c27873e0-85ac-4db7-af77-8a1fb9afdaf2",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I can't find a place where `Some(port)` is used, why do we need this?",
        "createdAt" : "2020-02-10T09:53:36Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "955eddd8-6755-4716-9cde-a5bb47add3c8",
        "parentId" : "c27873e0-85ac-4db7-af77-8a1fb9afdaf2",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The original idea of returning a resource doesn't sound so bad, why undoing this?",
        "createdAt" : "2020-02-10T09:59:18Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "65044e9b-dd4e-4c73-b089-a60a4ed2a9e7",
        "parentId" : "c27873e0-85ac-4db7-af77-8a1fb9afdaf2",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Whoops, left that `port` in during debugging. I'll remove it.",
        "createdAt" : "2020-02-10T10:09:08Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4ecce13d-b962-4a84-b2d4-0cb260ef1f39",
        "parentId" : "c27873e0-85ac-4db7-af77-8a1fb9afdaf2",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "We need to avoid storing the `Resource` because that's what was causing the memory leak. By flatmapping over resources, we capture the old resources, even if we've already released them. (Perhaps we can catch this by checking if a resource has been released during a `flatMap`; what do you think?)\r\n\r\nI'm about to push a change to make this return a `Future[SandboxState]` instead, which preserves the semantics without the memory leak. It was definitely cleaner when this returned.",
        "createdAt" : "2020-02-10T10:10:33Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "658feaa5-bc0d-466c-a5d1-3cab67e00f04",
        "parentId" : "c27873e0-85ac-4db7-af77-8a1fb9afdaf2",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Thanks for the explanation and for looking into this!",
        "createdAt" : "2020-02-10T10:23:49Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : null,
    "diffHunk" : "@@ -296,19 +308,20 @@ final class SandboxServer(config: SandboxConfig) extends AutoCloseable {\n \n   }\n \n-  private def start()(implicit executionContext: ExecutionContext): Resource[SandboxState] = {\n+  private def start(port: Option[Int] = None)(implicit executionContext: ExecutionContext): Unit = {"
  },
  {
    "id" : "7b2fe2ec-1434-4d44-8249-47fd43829516",
    "prId" : 4447,
    "comments" : [
      {
        "id" : "7cb52149-b23d-4116-a3db-db87dde4d71f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "In general, I would recommend _not_ using type aliases, unless there's a strong motivation to do it. They add one level of indirection when reasoning about types without providing any additional type safety. The aliased types can be used interchangeably, which can lead to some unwanted :spaghetti:.\r\n\r\n```scala\r\nscala> type Port = Int\r\ndefined type alias Port\r\n\r\nscala> val a: Port = 1\r\na: Port = 1\r\n\r\nscala> val b: Int = 2\r\nb: Int = 2\r\n\r\nscala> def sum(n: Int, m: Int): Int = n + m\r\nsum: (n: Int, m: Int)Int\r\n\r\nscala> def sumPort(n: Port, m: Port): Int = n + m\r\nsumPort: (n: Port, m: Port)Int\r\n\r\nscala> def sumPort(n: Port, m: Port): Port = n + m\r\nsumPort: (n: Port, m: Port)Port\r\n\r\nscala> sum(1, 2)\r\nres0: Int = 3\r\n\r\nscala> sumPort(1, 2)\r\nres1: Port = 3\r\n```\r\n\r\nI would suggest you either simply use `Int` or you make `Port` perform some useful check, e.g.:\r\n\r\n```scala\r\nfinal implicit class Port(val n: Int) extends AnyVal {\r\n  def isValid: Boolean = n >= 0 && n <= 65535\r\n}\r\n```\r\nBut I don't really see a true advantage in doing with this right now.",
        "createdAt" : "2020-02-10T13:18:23Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9e78b784-dd31-459e-b28d-1816820e4962",
        "parentId" : "7cb52149-b23d-4116-a3db-db87dde4d71f",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Happy to turn this into a proper class. The type signature for `SandboxState#reset` got confusing when it was just talking about `Int`.",
        "createdAt" : "2020-02-10T14:02:01Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b82fd1c7-d7f8-4615-b0c2-1e091c7cd5a2",
        "parentId" : "7cb52149-b23d-4116-a3db-db87dde4d71f",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Gonna revert to just using `Int` with a comment for now.",
        "createdAt" : "2020-02-10T15:48:36Z",
        "updatedAt" : "2020-02-10T15:56:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "84e6c618d4689590c8f46682a40a528bbafe76f7",
    "line" : null,
    "diffHunk" : "@@ -54,6 +54,8 @@ import scala.concurrent.{Await, ExecutionContext, Future}\n import scala.util.Try\n \n object SandboxServer {\n+  type Port = Int"
  },
  {
    "id" : "12dfee0e-8e15-497b-a7a5-71f4860f7cc9",
    "prId" : 3187,
    "comments" : [
      {
        "id" : "0d3826d4-3299-46d6-95fb-7dd9663fc57a",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please remove the `daml-engine = {}` part, as this parameter is actually not provided afterwards (this has been the case for quite a while now).",
        "createdAt" : "2019-10-16T09:56:49Z",
        "updatedAt" : "2019-10-17T09:25:40Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "65a5065c51e4501f7ea27dddccafbd13acfad00c",
    "line" : null,
    "diffHunk" : "@@ -275,13 +275,14 @@ class SandboxServer(actorSystemName: String, config: => SandboxConfig) extends A\n \n     Banner.show(Console.out)\n     logger.info(\n-      \"Initialized sandbox version {} with ledger-id = {}, port = {}, dar file = {}, time mode = {}, ledger = {}, daml-engine = {}\",\n+      \"Initialized sandbox version {} with ledger-id = {}, port = {}, dar file = {}, time mode = {}, ledger = {}, daml-engine = {}, auth-service = {}\","
  },
  {
    "id" : "132a11e1-7f9d-4ab6-b690-e378ab63e7d5",
    "prId" : 3138,
    "comments" : [
      {
        "id" : "599b1c77-28a0-4b8a-856b-bb9b4b191380",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Add `ClaimPublic`, otherwise you won't be able to use \"public\" APIs. Same below.",
        "createdAt" : "2019-10-09T10:03:22Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6051e0e0-321b-4209-b018-861ed51b672a",
        "parentId" : "599b1c77-28a0-4b8a-856b-bb9b4b191380",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ah, I thought public was equal to non-empty. Shouldn't we make it that way?",
        "createdAt" : "2019-10-09T11:17:47Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bb3817c9a66c72de085b1959aae0ac7ddc5f7a3d",
    "line" : null,
    "diffHunk" : "@@ -90,7 +96,12 @@ class SandboxServer(actorSystemName: String, config: => SandboxConfig) extends A\n   // TODO: Pass this info in command-line (See issue #2025)\n   val participantId: ParticipantId = Ref.LedgerString.assertFromString(\"sandbox-participant\")\n \n-  private val authService: AuthService = AuthServiceWildcard\n+  // FIXME If this code is still here when reviewing, please ask me to remove it\n+  private val authService: AuthService = AuthServiceStatic {\n+    case \"root\" => Claims.wildcard\n+    case \"admin\" => Claims(Seq(ClaimAdmin))"
  },
  {
    "id" : "eae606bc-6d7c-4a88-af98-c12f4ed1a6ea",
    "prId" : 1985,
    "comments" : [
      {
        "id" : "a99ed7cb-f177-4ea3-b8c2-3fcf32c31459",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please use `sandbox` as the participant id.",
        "createdAt" : "2019-07-05T13:19:01Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "755744c2-6f4b-4cf9-a168-2a2cfcce7c92",
        "parentId" : "a99ed7cb-f177-4ea3-b8c2-3fcf32c31459",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-05T14:38:18Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a76d1f28b41fc02600441b5d40c9b25038667c33",
    "line" : null,
    "diffHunk" : "@@ -82,6 +83,9 @@ object SandboxServer {\n \n class SandboxServer(actorSystemName: String, config: => SandboxConfig) extends AutoCloseable {\n \n+  // Name of this participant, ultimately pass this info in command-line\n+  val participantId: ParticipantId = Ref.LedgerString.assertFromString(\"in-memory-participant\")"
  },
  {
    "id" : "18378fcc-2cff-46d1-a88c-068216ecd8ab",
    "prId" : 1818,
    "comments" : [
      {
        "id" : "2cab0364-d712-4509-b713-0165bc80df85",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "👍 ",
        "createdAt" : "2019-06-28T08:13:25Z",
        "updatedAt" : "2019-07-02T12:24:58Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bae23a0a96200d0ece436a646cceb68a50511f37",
    "line" : 5,
    "diffHunk" : "@@ -160,7 +160,7 @@ class SandboxServer(actorSystemName: String, config: => SandboxConfig) extends A\n       case LedgerIdMode.Dynamic() => LedgerIdGenerator.generateRandomId()\n     }\n \n-    val packageStore = InMemoryPackageStore()\n+    val packageStore = InMemoryPackageStore.empty"
  },
  {
    "id" : "53bf750d-5718-413e-8dc2-cb962df36f75",
    "prId" : 1610,
    "comments" : [
      {
        "id" : "4f917547-31c3-4305-af77-431a5190e0f9",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think relying on `*Sync` methods here will make it harder to later switch to an SQL backed package store.",
        "createdAt" : "2019-06-13T08:46:57Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6f9ee0f3-1160-4e3b-9c4f-1e1e1089b4a2",
        "parentId" : "4f917547-31c3-4305-af77-431a5190e0f9",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Currently, the whole sandbox initialization part is hardcoded to work with in-memory data structures:\r\n- The scenario loader depends on `ActiveContractsInMemory` and `InMemoryPackageStore`\r\n- The scenario loader uses `listLfPackagesSync`, and does not use any async code.\r\n- The scenario loader uses its own ledger implementation\r\n\r\nThe scenario is executed before the postgres ledger is initialized. It would be a bigger change to refactor the scenario to be executed on the postgres ledger.",
        "createdAt" : "2019-06-14T12:02:12Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3369563c-6dd6-427e-becb-73c9cbdb3d9b",
        "parentId" : "4f917547-31c3-4305-af77-431a5190e0f9",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I see. Makes sense then.",
        "createdAt" : "2019-06-14T12:25:04Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e866b02c0df2f20dcee08439e1105fe577f0609",
    "line" : 27,
    "diffHunk" : "@@ -50,19 +51,20 @@ object SandboxServer {\n   private val engine = Engine()\n \n   // if requested, initialize the ledger state with the given scenario\n-  private def createInitialState(config: SandboxConfig, context: SandboxContext)\n+  private def createInitialState(config: SandboxConfig, packages: SandboxPackageStore)\n     : (ActiveContractsInMemory, ImmArray[LedgerEntryWithLedgerEndIncrement], Option[Instant]) = {\n     // [[ScenarioLoader]] needs all the packages to be already compiled --\n     // make sure that that's the case\n     if (config.eagerPackageLoading || config.scenario.nonEmpty) {\n-      for ((pkgId, pkg) <- context.packageContainer.packages) {\n+      for (pkgId <- packages.listLfPackagesSync().keys) {"
  },
  {
    "id" : "4e84bc58-2b22-4279-b3b7-56294d746117",
    "prId" : 1555,
    "comments" : [
      {
        "id" : "62caed8f-19a9-4dc4-9e41-e0aaec1aabd0",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "You can combine the last 2 branches and simply do `mbLedgerTime.getOrElse(Instant.EPOCH)`.",
        "createdAt" : "2019-06-07T09:14:47Z",
        "updatedAt" : "2019-06-07T11:40:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ce6fe991-60f1-4e0f-b854-7a02a0a5b48f",
        "parentId" : "62caed8f-19a9-4dc4-9e41-e0aaec1aabd0",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "right, will do that.",
        "createdAt" : "2019-06-07T11:38:12Z",
        "updatedAt" : "2019-06-07T11:40:55Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2a302d0b3d12ee4828eda045d0f4799d3e00906e",
    "line" : null,
    "diffHunk" : "@@ -162,10 +162,14 @@ class SandboxServer(actorSystemName: String, config: => SandboxConfig) extends A\n       (mbLedgerTime, config.timeProviderType) match {\n         case (None, TimeProviderType.WallClock) => (TimeProvider.UTC, None)\n         case (None, _) =>\n-          val ts = TimeServiceBackend.simple(Instant.EPOCH)\n+          val ts = TimeServiceBackend.simple(\n+            Instant.EPOCH,\n+            config.timeProviderType == TimeProviderType.StaticAllowBackwards)\n           (ts, Some(ts))\n         case (Some(ledgerTime), _) =>\n-          val ts = TimeServiceBackend.simple(ledgerTime)\n+          val ts = TimeServiceBackend.simple(\n+            ledgerTime,"
  },
  {
    "id" : "c2e44b24-fa3e-4ac0-b80d-3e39f25160be",
    "prId" : 1278,
    "comments" : [
      {
        "id" : "e02fad9f-2c7d-4745-9661-fb0a23660a89",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Do we really want to wait until infinity in here?",
        "createdAt" : "2019-05-21T13:43:51Z",
        "updatedAt" : "2019-05-21T13:46:18Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "831f7f40-53bf-4a5b-acad-45aea3baa6ee",
        "parentId" : "e02fad9f-2c7d-4745-9661-fb0a23660a89",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "good point, I changed it to use `asyncTolerance`. BTW,  I am blocking here on purpose as it didn't seem reasonable to push the async behaviour further up the stack. We might do it later though.",
        "createdAt" : "2019-05-21T13:47:34Z",
        "updatedAt" : "2019-05-21T13:47:34Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6c78964bdfd67df79aee1708c222fc9bcbfb7383",
    "line" : 44,
    "diffHunk" : "@@ -207,28 +207,33 @@ class SandboxServer(actorSystemName: String, config: => SandboxConfig) extends A\n \n     val stopHeartbeats = scheduleHeartbeats(timeProvider, ledger.publishHeartbeat)\n \n-    val apiServer = LedgerApiServer(\n-      (am: ActorMaterializer, esf: ExecutionSequencerFactory) =>\n-        ApiServices\n-          .create(\n-            config,\n-            ledgerBackend,\n-            ledgerBackend,\n-            ApiServices.configurationService(config),\n-            SandboxServer.engine,\n-            timeProvider,\n-            timeServiceBackendO\n-              .map(\n-                TimeServiceBackend.withObserver(\n-                  _,\n-                  ledger.publishHeartbeat\n-                ))\n-          )(am, esf)\n-          .withServices(List(resetService)),\n-      // NOTE(JM): Re-use the same port after reset.\n-      Option(sandboxState).fold(config.port)(_.apiServerState.port),\n-      config.address,\n-      config.tlsConfig.flatMap(_.server)\n+    val apiServer = Await.result("
  },
  {
    "id" : "0f944007-5436-494e-ac60-7386a2abc166",
    "prId" : 1248,
    "comments" : [
      {
        "id" : "374c6677-69f9-42ea-aca4-b606b5eb197a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: since you are using `pkg` as a tuple, it would probably make it more readable if you could deconstruct it here to give more meaningful names than `pkg._1` and `pkg._2`.",
        "createdAt" : "2019-05-20T12:27:12Z",
        "updatedAt" : "2019-05-21T13:32:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e35f469-ee21-4358-9af9-ebd055f4c1ee",
        "parentId" : "374c6677-69f9-42ea-aca4-b606b5eb197a",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-05-21T10:53:35Z",
        "updatedAt" : "2019-05-21T13:32:56Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "faaa0812fab962194c58c95f12dc8f29f2ccb7b7",
    "line" : null,
    "diffHunk" : "@@ -73,14 +73,31 @@ object SandboxServer {\n \n   // if requested, initialize the ledger state with the given scenario\n   private def createInitialState(config: SandboxConfig, context: SandboxContext)\n-    : (ActiveContractsInMemory, ImmArray[LedgerEntryWithLedgerEndIncrement], Option[Instant]) =\n+    : (ActiveContractsInMemory, ImmArray[LedgerEntryWithLedgerEndIncrement], Option[Instant]) = {\n+    // [[ScenarioLoader]] needs all the packages to be already compiled --\n+    // make sure that that's the case\n+    if (config.eagerPackageLoading || config.scenario.nonEmpty) {\n+      for (pkg <- context.packageContainer.packages) {"
  }
]