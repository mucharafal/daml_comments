[
  {
    "id" : "3f321f8d-2a16-4bbe-a187-02e0ca15e770",
    "prId" : 2316,
    "comments" : [
      {
        "id" : "3d185720-67dc-4348-a356-e14dff43616e",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This makes every contract lookup when validating exercises much more expensive. Not sure what to do about it though.",
        "createdAt" : "2019-07-29T12:16:13Z",
        "updatedAt" : "2019-07-30T07:40:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4402d231-2279-42a3-94e1-b171bfdbe7b7",
        "parentId" : "3d185720-67dc-4348-a356-e14dff43616e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I believe the only possible solution would be to add two columns holding the stakeholders. Would this be feasible? If so, what would the right procedure be to add new \"metadata\" columns?",
        "createdAt" : "2019-07-29T12:20:18Z",
        "updatedAt" : "2019-07-30T07:40:55Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f09acbf0-b51e-432b-a2ed-210f0fc6265e",
        "parentId" : "3d185720-67dc-4348-a356-e14dff43616e",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "One easy place to add it to is `ContractInst` (which already gets serialized), but it might not be right place actually. For example, `NodeCreate` holds the stakeholders at the same level as the contract value of type `ContractInst`.\r\n\r\n@S11001001, @remyhaemmerle-da: what do you think?",
        "createdAt" : "2019-07-29T12:33:41Z",
        "updatedAt" : "2019-07-30T07:40:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7e33fecd-a6d7-46ab-866a-5e280f999407",
        "parentId" : "3d185720-67dc-4348-a356-e14dff43616e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Created issue to discuss about this: for the moment, I believe we can merge this. https://github.com/digital-asset/daml/issues/2330",
        "createdAt" : "2019-07-30T07:17:43Z",
        "updatedAt" : "2019-07-30T07:40:55Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "47b714a3ed00ebad6f3ae49f66e85e66dbcf2c20",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +838,842 @@        val (signatories, observers) =\n          transactionSerializer\n            .deserializeTransaction(ByteStreams.toByteArray(tx))\n            .getOrElse(sys.error(s\"failed to deserialize transaction! cid:$coid\"))\n            .nodes"
  },
  {
    "id" : "4680a2e1-b1a9-44fb-b3c4-16c915f9329e",
    "prId" : 1985,
    "comments" : [
      {
        "id" : "1d892d25-8c51-4486-9cbd-befee797350c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please open a github issue for this and reference the issue here in a code comment.",
        "createdAt" : "2019-07-05T13:20:34Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6b2a93c6-3e56-4619-a5a1-f0017d993cd6",
        "parentId" : "1d892d25-8c51-4486-9cbd-befee797350c",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Issue #2026 ",
        "createdAt" : "2019-07-05T14:38:46Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a76d1f28b41fc02600441b5d40c9b25038667c33",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +964,968 @@      SQL_SELECT_PARTIES\n        .as(PartyDataParser.*)\n        // TODO: isLocal should be based on equality of participantId reported in an\n        // update and the id given to participant in a command-line argument\n        // (See issue #2026)"
  },
  {
    "id" : "a09fea74-88c5-4007-b8e6-2680d5af130f",
    "prId" : 1818,
    "comments" : [
      {
        "id" : "8d9c684c-0034-49e5-b908-d1eb2a636d27",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "returning an `UploadPackagesResult` should not be the concern of this class. That way you can avoid the `Try/rollback` logic, and just call `transform` on the resulting `Future` to do the mapping to `UploadPackagesResult`",
        "createdAt" : "2019-06-28T08:25:13Z",
        "updatedAt" : "2019-07-02T12:24:58Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9607cf3a-0c42-4706-b344-ef4378d99e68",
        "parentId" : "8d9c684c-0034-49e5-b908-d1eb2a636d27",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "I see this is not necessary for the packages. It was done for party management, to differentiate duplicate parties from other database errors. Would you have party allocation method return `Future[Unit]`, and map all failures to `PartyAllocationResult.AlreadyExists`? Or create a custom Ok/Duplicate/OtherError sum type?",
        "createdAt" : "2019-06-28T08:37:29Z",
        "updatedAt" : "2019-07-02T12:24:58Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1318787c-1345-4814-a7dc-1a3dac90169a",
        "parentId" : "8d9c684c-0034-49e5-b908-d1eb2a636d27",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "Oh I see. In that case I would probably follow that pattern like here: https://github.com/digital-asset/daml/blob/c23af0eaa04a63bdda6e58c964a1b824448c7f96/ledger/sandbox/src/main/scala/com/digitalasset/platform/sandbox/stores/ledger/sql/dao/PostgresLedgerDao.scala#L553",
        "createdAt" : "2019-06-28T09:00:32Z",
        "updatedAt" : "2019-07-02T12:24:58Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bae23a0a96200d0ece436a646cceb68a50511f37",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +1044,1048 @@      }.recover {\n        case NonFatal(e) if e.getMessage.contains(\"duplicate key\") =>\n          conn.rollback()\n          PersistenceResponse.Duplicate\n      }.get"
  },
  {
    "id" : "ba95c585-2bea-42a3-80d4-34d2d3a09b95",
    "prId" : 1452,
    "comments" : [
      {
        "id" : "edbb9539-5cf2-43a0-914a-79dcad3c54b9",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Maybe I'm mistaken, but the ledger_end is updated AFTER inserting the transaction and updating the active contracts, which means the party gets the offset of the previous entry (checkpoint, rejection, ...). Or am I missing something?",
        "createdAt" : "2019-06-07T11:33:09Z",
        "updatedAt" : "2019-06-07T21:22:35Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7899c4bb-b863-445c-9a3e-5cd24ec8317d",
        "parentId" : "edbb9539-5cf2-43a0-914a-79dcad3c54b9",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "From the table definition:\r\n```\r\n  -- True iff the party was added explicitly through an API call\r\n  explicit bool not null,\r\n  -- For implicitly added parties: the offset of the transaction that introduced the party\r\n  -- For explicitly added parties: the ledger end at the time when the party was added\r\n  ledger_offset bigint\r\n```\r\n\r\nThe above SQL statement is only for explicitly inserting parties through the ledger API, which is done outside of the persistence queue used for ledger entries.\r\nThe main purpose of this field is to allow a future migration to insert \"party added\" ledger entries at the correct place. This will not be an easy migration, as inserting new ledger entries in the middle of the stream means transactions will get new offsets.",
        "createdAt" : "2019-06-07T11:59:11Z",
        "updatedAt" : "2019-06-07T21:22:35Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "90e140d2-4ae8-42fc-897e-f2ad15a4961a",
        "parentId" : "edbb9539-5cf2-43a0-914a-79dcad3c54b9",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "oh, right. sorry I missed that. thank you for the explanation.",
        "createdAt" : "2019-06-07T12:35:05Z",
        "updatedAt" : "2019-06-07T21:22:35Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "21be6910a5debd0672b0db0815d8993c33b21e53",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +926,930 @@    SQL(\"\"\"insert into parties(party, display_name, ledger_offset, explicit)\n        |select {party}, {display_name}, ledger_end, 'true'\n        |from parameters\"\"\".stripMargin)\n\n  override def storeParty("
  },
  {
    "id" : "d6441cbc-782d-44d5-bd23-132d88407ad3",
    "prId" : 959,
    "comments" : [
      {
        "id" : "4b9a382b-4cfe-4d4c-bed3-37525e128b54",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "@gaboraranyossy-da There is now a new DAO method to store the initial state from the scenario loader. Previously, we just processed all `LedgerEntry`s produced by the loader (recomputing the ACS from scratch), but these do not contain the blinding info required to updated the ACS. This new method is given the in-memory ACS and the list of `LedgerEntry`s",
        "createdAt" : "2019-05-07T06:37:39Z",
        "updatedAt" : "2019-05-15T16:27:45Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "74bdb6a1-b4e5-4b41-a254-c3d5df519902",
        "parentId" : "4b9a382b-4cfe-4d4c-bed3-37525e128b54",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "Ok. Shouldn't we depend on the `ActiveContracts` trait instead?",
        "createdAt" : "2019-05-07T07:03:09Z",
        "updatedAt" : "2019-05-15T16:27:45Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d062983a-e633-435b-a518-62ea01318dbe",
        "parentId" : "4b9a382b-4cfe-4d4c-bed3-37525e128b54",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The `ActiveContracts` trait only defines methods to modify the ACS, and query individual contracts.\r\n\r\nThe `storeInitialState` method is specifically for copying the initial ACS that was produced by the scenario loader, and needs access to the full list of active contracts and contract keys.\r\n\r\nI could extends the trait to contain methods to return the full content of the ACS, but that sounds unnecessary. Let me know if you would still prefer that.",
        "createdAt" : "2019-05-07T07:52:05Z",
        "updatedAt" : "2019-05-15T16:27:45Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "971a8bab-2ec3-4771-8b80-fe219fc9ca41",
        "parentId" : "4b9a382b-4cfe-4d4c-bed3-37525e128b54",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "i'd add it to the interface as well. We should not depend on implementations if possible. ",
        "createdAt" : "2019-05-07T08:22:47Z",
        "updatedAt" : "2019-05-15T16:27:45Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a20bb167-8682-4bb2-984f-691acec4e92b",
        "parentId" : "4b9a382b-4cfe-4d4c-bed3-37525e128b54",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "I have changed the interface of this method to take a `immutable.Seq[Contract]` instead of `ActiveContractsInMemory `.",
        "createdAt" : "2019-05-10T21:32:30Z",
        "updatedAt" : "2019-05-15T16:27:45Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0991c0a3-eb4a-4348-b42c-e7082e4b8317",
        "parentId" : "4b9a382b-4cfe-4d4c-bed3-37525e128b54",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "ok, that sounds good",
        "createdAt" : "2019-05-13T08:38:55Z",
        "updatedAt" : "2019-05-15T16:27:45Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e4dc5b75fb95575adb8e21bb2ae04bcccdc97acf",
    "line" : 428,
    "diffHunk" : "@@ -1,1 +547,551 @@      ledgerEntries: immutable.Seq[(LedgerOffset, LedgerEntry)],\n      newLedgerEnd: LedgerOffset\n  ): Future[Unit] = {\n    // A map to look up offset by transaction ID\n    // Needed to store contracts: in the database, we store the offset at which a contract was created,"
  },
  {
    "id" : "7bfde3d7-6a7e-4299-9a83-7284b820d427",
    "prId" : 754,
    "comments" : [
      {
        "id" : "f0cdf8c5-3286-4efb-8ebe-c93e961fa666",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "i think this relies on the assumption that the stream is monotonically growing. if it was not monotonically growing, you could end up with different results with the pagination as opposed to the single query.\r\n\r\nif i'm correct, please note this fact in the code.",
        "createdAt" : "2019-04-29T09:15:40Z",
        "updatedAt" : "2019-04-29T10:11:33Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1a0d28fa-f8e9-49c3-bd79-e994217d0cec",
        "parentId" : "f0cdf8c5-3286-4efb-8ebe-c93e961fa666",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "yes it does. I added a note as you requested.",
        "createdAt" : "2019-04-29T09:20:34Z",
        "updatedAt" : "2019-04-29T10:11:33Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a7c5c82f7085b44368f72d6bcc130128e8519aa5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +667,671 @@      endExclusive: Long,\n      pageSize: Int,\n      queryPage: (Long, Long) => Source[T, NotUsed]): Source[T, NotUsed] =\n    Source\n      .lazily[T, NotUsed] { () =>"
  },
  {
    "id" : "f7bfd4c1-e08d-4400-af93-0a3bd86f381c",
    "prId" : 611,
    "comments" : [
      {
        "id" : "0be99355-b9ac-493c-b53d-9f2542d381d7",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "I will address this in a follow-up PR",
        "createdAt" : "2019-04-23T11:20:11Z",
        "updatedAt" : "2019-04-24T10:54:57Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e376d59-0349-42b1-bbe5-c47769c1e6ae",
        "parentId" : "0be99355-b9ac-493c-b53d-9f2542d381d7",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "what do you mean with paging -- chunk the results rather than getting them all at a time?",
        "createdAt" : "2019-04-24T09:00:46Z",
        "updatedAt" : "2019-04-24T10:54:57Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fa30344c-de88-4b8c-9c66-d2f504f199f9",
        "parentId" : "0be99355-b9ac-493c-b53d-9f2542d381d7",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "Precisely. Here it's perfectly possible and it's a much better approach. See: https://github.com/digital-asset/daml/pull/641",
        "createdAt" : "2019-04-24T09:09:02Z",
        "updatedAt" : "2019-04-24T10:54:57Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "80a155bf0253163f8e06e1fb42f82f22e3ae95fe",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +670,674 @@    \"select * from ledger_entries where ledger_offset>={startInclusive} and ledger_offset<{endExclusive} order by ledger_offset asc\")\n\n  //TODO we should use paging instead, check if Alpakka can do that?\n  override def getLedgerEntries(\n      startInclusive: Long,"
  },
  {
    "id" : "27f2e67e-c9f7-46ab-98c4-abd053ab32e4",
    "prId" : 444,
    "comments" : [
      {
        "id" : "dbd7384b-2d2f-4c37-9c3e-bdbe02996b5a",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "We could cache this in a member field. `MessageDigest` might cache itself too, but it's safer to do it ourselves.",
        "createdAt" : "2019-04-16T05:57:50Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cd710d17-4a4c-4020-b39c-63091d3f08e8",
        "parentId" : "dbd7384b-2d2f-4c37-9c3e-bdbe02996b5a",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Using a single instance of `MessageDigest` would mean the `keyHash` function would not be thread safe, I don't think that's a good idea. `keyHash` is called by both `lookupKey` and `storeLedgerEntry`.",
        "createdAt" : "2019-04-16T07:21:51Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b7ece1d0-c3dd-4cce-b7c8-6674a6441f08",
        "parentId" : "dbd7384b-2d2f-4c37-9c3e-bdbe02996b5a",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "Oops, I missed that. Nevermind then ",
        "createdAt" : "2019-04-16T07:36:29Z",
        "updatedAt" : "2019-04-16T07:36:29Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2caa7f293aac7972574e45eb2989deaffe86da96",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +116,120 @@    */\n  private[this] def keyHash(key: GlobalKey): String = {\n    val digest = MessageDigest.getInstance(\"SHA-256\")\n    valueSerializer\n      .serialiseValue(key.key)"
  }
]