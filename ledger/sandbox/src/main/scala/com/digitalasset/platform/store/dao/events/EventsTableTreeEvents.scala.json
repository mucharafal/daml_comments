[
  {
    "id" : "708807fa-dd8f-45ac-b014-8814d4590fed",
    "prId" : 6658,
    "comments" : [
      {
        "id" : "7ab3216b-254e-4722-9d44-89afe66da358",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Good catch removing the `group by`s, they should have been removed since we had witnesses directly in the events table, too bad it slipped so far.",
        "createdAt" : "2020-07-15T09:34:13Z",
        "updatedAt" : "2020-07-28T19:42:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69f55443bf44c1520d2dc1c24b1aa8bee88b4d46",
    "line" : null,
    "diffHunk" : "@@ -86,31 +86,6 @@ private[events] trait EventsTableTreeEvents { this: EventsTable =>\n     \"exercise_child_event_ids\",\n   ).mkString(\", \")\n \n-  private val groupByColumns = Seq(\n-    \"event_offset\",\n-    \"transaction_id\",\n-    \"node_index\",\n-    \"participant_events.event_id\",\n-    \"contract_id\",\n-    \"ledger_effective_time\",\n-    \"template_id\",\n-    \"command_id\",\n-    \"workflow_id\",\n-    \"application_id\",\n-    \"submitter\",\n-    \"create_argument\",\n-    \"create_signatories\",\n-    \"create_observers\",\n-    \"create_agreement_text\",\n-    \"create_key_value\",\n-    \"exercise_consuming\",\n-    \"exercise_choice\",\n-    \"exercise_argument\",\n-    \"exercise_result\",\n-    \"exercise_actors\",\n-    \"exercise_child_event_ids\",\n-  ).mkString(\", \")"
  },
  {
    "id" : "e9d65e9f-5f45-454b-9755-3049db410228",
    "prId" : 6658,
    "comments" : [
      {
        "id" : "0f97cb31-9e6a-47ec-a931-0676a3f8f42b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The original intent of the single-line SQL query was for it to be less obtrusive in logs. But was just a bad call on my side, thanks for fixing it.",
        "createdAt" : "2020-07-15T09:35:37Z",
        "updatedAt" : "2020-07-28T19:42:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69f55443bf44c1520d2dc1c24b1aa8bee88b4d46",
    "line" : null,
    "diffHunk" : "@@ -126,7 +101,11 @@ private[events] trait EventsTableTreeEvents { this: EventsTable =>\n   ): SimpleSql[Row] = {\n     val witnessesWhereClause =\n       sqlFunctions.arrayIntersectionWhereClause(\"tree_event_witnesses\", requestingParty)\n-    SQL\"select #$selectColumns, array[$requestingParty] as event_witnesses, case when submitter = $requestingParty then command_id else '' end as command_id from participant_events where transaction_id = $transactionId and #$witnessesWhereClause order by node_index asc\"\n+    SQL\"\"\"select #$selectColumns, array[$requestingParty] as event_witnesses,\n+                 case when submitter = $requestingParty then command_id else '' end as command_id\n+          from participant_events\n+          where transaction_id = $transactionId and #$witnessesWhereClause\n+          order by node_index asc\"\"\""
  },
  {
    "id" : "eaf3173a-b840-4e39-860c-c7c0a938e17b",
    "prId" : 6372,
    "comments" : [
      {
        "id" : "20cf9023-bcd7-457d-b3cc-033e99dc7816",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Very compact, love it. :heart: ",
        "createdAt" : "2020-06-26T14:17:12Z",
        "updatedAt" : "2020-07-07T20:49:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a4ac22ba1dbfc5a1f114a75812abec7b87d0eb34",
    "line" : 80,
    "diffHunk" : "@@ -143,55 +144,35 @@ private[events] trait EventsTableTreeEvents { this: EventsTable =>\n   }\n \n   def preparePagedGetTransactionTrees(sqlFunctions: SqlFunctions)(\n-      startExclusive: Offset,\n-      endInclusive: Offset,\n+      eventsRange: EventsRange[Long],\n       requestingParties: Set[Party],\n       pageSize: Int,\n-      previousEventNodeIndex: Option[Int],\n   ): SimpleSql[Row] =\n     route(requestingParties)(\n-      single = singlePartyTrees(sqlFunctions)(\n-        startExclusive,\n-        endInclusive,\n-        _,\n-        pageSize,\n-        previousEventNodeIndex),\n-      multi = multiPartyTrees(sqlFunctions)(\n-        startExclusive,\n-        endInclusive,\n-        _,\n-        pageSize,\n-        previousEventNodeIndex),\n+      single = singlePartyTrees(sqlFunctions)(eventsRange, _, pageSize),\n+      multi = multiPartyTrees(sqlFunctions)(eventsRange, _, pageSize),"
  },
  {
    "id" : "4ad8366b-682a-482c-a14c-f1b4ef3e81e0",
    "prId" : 6172,
    "comments" : [
      {
        "id" : "cfa5302e-7b22-440d-88d2-e9568f0b7fa2",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "These can also be folded in the query itself at this point. They were meant to be short-hands for longer fragments.",
        "createdAt" : "2020-06-02T07:21:11Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a07d02c332d46c90c777addcbdff06f74cd74a61",
    "line" : null,
    "diffHunk" : "@@ -86,10 +89,10 @@ private[events] trait EventsTableTreeEvents { this: EventsTable =>\n   ).mkString(\", \")\n \n   private val witnessesAggregation =\n-    \"array_agg(event_witness) as event_witnesses\"\n+    \"tree_event_witnesses\"\n \n   private val treeEventsTable =\n-    \"participant_events natural join participant_event_transaction_tree_witnesses\"\n+    \"participant_events\""
  },
  {
    "id" : "a0ff7b70-8302-4203-a535-1720b0c89c20",
    "prId" : 5248,
    "comments" : [
      {
        "id" : "31f49695-4c2c-42b4-a428-afb44d58b6ac",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n    createdTreeEventParser(verbose = false) | exercisedTreeEventParser(verbose = false)\r\n```",
        "createdAt" : "2020-03-27T14:25:11Z",
        "updatedAt" : "2020-03-27T14:26:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "310855735a30aa8f8f3ce29513189c5c659db88f",
    "line" : null,
    "diffHunk" : "@@ -60,14 +61,21 @@ private[events] trait EventsTableTreeEvents { this: EventsTable =>\n                 exerciseActors = exerciseActors,\n                 exerciseChildEventIds = exerciseChildEventIds,\n                 eventWitnesses = eventWitnesses,\n+                verbose = verbose,\n               )\n             )\n           )\n         )\n     }\n \n-  val treeEventParser\n-    : RowParser[Entry[TreeEvent]] = createdTreeEventParser | exercisedTreeEventParser\n+  private val verboseTreeEventParser: RowParser[Entry[TreeEvent]] =\n+    createdTreeEventParser(verbose = true) | exercisedTreeEventParser(verbose = true)\n+\n+  private val succinctTreeEventParser: RowParser[Entry[TreeEvent]] =\n+    createdTreeEventParser(verbose = false) | exercisedTreeEventParser(verbose = true)"
  }
]