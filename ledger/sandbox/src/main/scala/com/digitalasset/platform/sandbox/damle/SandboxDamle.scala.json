[
  {
    "id" : "6e8f65b2-e82a-4c03-ab5d-c57d1177228e",
    "prId" : 2835,
    "comments" : [
      {
        "id" : "d74ef2c5-581e-4eb0-b26c-16902c79400f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This doesn't cover the case when the future is failed (e.g. db connection failed when loading the package) and will forever retain the failed future in the map.",
        "createdAt" : "2019-09-10T12:03:16Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eaf912b8-acee-488e-951a-c40723ee688a",
        "parentId" : "d74ef2c5-581e-4eb0-b26c-16902c79400f",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Thanks, I was sure I missed something. Suggestions how to handle that? Or suggestions how to write this whole thing in a safer way?",
        "createdAt" : "2019-09-10T14:37:04Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "505b3614e6d6967667efca7353f4ae8a5301f162",
    "line" : null,
    "diffHunk" : "@@ -36,7 +41,23 @@ object SandboxDamle {\n     def resolveStep(result: Result[A]): Future[Either[DamlLfError, A]] = {\n       result match {\n         case ResultNeedPackage(packageId, resume) =>\n-          getPackage(packageId).flatMap(mbPkg => resolveStep(resume(mbPkg)))\n+          var gettingPackage = false\n+          packagePromises\n+            .computeIfAbsent(packageId, { _ =>\n+              val p = Promise[Option[Package]]()\n+              gettingPackage = true\n+              getPackage(packageId).foreach(p.success)\n+              p\n+            })\n+            .future\n+            .flatMap { mbPkg =>\n+              if (gettingPackage && mbPkg.isEmpty) {\n+                // Failed to find the package. Remove the promise to allow later retries."
  },
  {
    "id" : "ea1e5f24-f38f-4afc-805e-82f2469485e7",
    "prId" : 2835,
    "comments" : [
      {
        "id" : "24e29225-276d-4698-8b3c-d6aa4e8783b1",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  private val packagePromises: ConcurrentHashMap[Ref.PackageId, Promise[Option[Package]]] =\r\n```\r\nGenerally a good practice but not needed for an `object`.",
        "createdAt" : "2019-09-10T12:08:00Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "505b3614e6d6967667efca7353f4ae8a5301f162",
    "line" : null,
    "diffHunk" : "@@ -19,12 +21,15 @@ import com.digitalasset.daml.lf.value.Value.AbsoluteContractId\n import com.digitalasset.daml.lf.language.Ast.Package\n import com.digitalasset.daml.lf.data.Ref\n \n-import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n \n /**\n   * provides smart constructor for DAML engine environment\n   */\n object SandboxDamle {\n+  // Concurrent map of promises to request each package only once.\n+  private[this] val packagePromises: ConcurrentHashMap[Ref.PackageId, Promise[Option[Package]]] ="
  },
  {
    "id" : "d334c1f6-3051-4d75-9ca9-fe3e5e6b629b",
    "prId" : 2835,
    "comments" : [
      {
        "id" : "f1a635ab-9dfd-4b04-9538-114159476ea7",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "You may want to consider Scala's [`TrieMap`](https://www.scala-lang.org/api/2.12.2/scala/collection/concurrent/TrieMap.html) for this.",
        "createdAt" : "2019-09-10T12:12:59Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "37a42c82-517d-4776-ab37-d2bccdedb804",
        "parentId" : "f1a635ab-9dfd-4b04-9538-114159476ea7",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@gabor-aranyossy has some stories from the trenches to tell about `TrieMap`. For that reason I'm not too unhappy to see `ConcurentHashMap` being used.",
        "createdAt" : "2019-09-10T12:57:27Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "505b3614e6d6967667efca7353f4ae8a5301f162",
    "line" : null,
    "diffHunk" : "@@ -3,6 +3,8 @@\n \n package com.digitalasset.platform.sandbox.damle\n \n+import java.util.concurrent.ConcurrentHashMap"
  },
  {
    "id" : "f4d6fad6-f5e8-4b15-9787-f7b152bbff6d",
    "prId" : 2835,
    "comments" : [
      {
        "id" : "c78bf37e-49df-442f-acb7-688ae9eec0d7",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Do you think it would be possible for a call to this method that fails to fetch a package due to a transient error to end up removing a package that has been concurrently fetched on a different thread? Do you think there would be a way to not store failures? We would not longer have to add the removal step and probably synchronizing would be easier.",
        "createdAt" : "2019-09-10T12:25:23Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "820cf130-9050-4658-8a53-ef8dcbc1dab1",
        "parentId" : "c78bf37e-49df-442f-acb7-688ae9eec0d7",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "With this change there shouldn't be concurrent package fetching/loading anymore.",
        "createdAt" : "2019-09-10T13:28:15Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "75fbf0c5-8ca0-496c-9de8-d4b05a12fc92",
        "parentId" : "c78bf37e-49df-442f-acb7-688ae9eec0d7",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Except, this only covers the fetching of the package, but not duplicate compilation. Compilation is done as a side effect of the `ResultNeedPackage#resume` callback. Good catch @stefanobaghino-da!\r\nhttps://github.com/digital-asset/daml/blob/eefd481b9a1a6d271b2b045acc06e713da0e86c3/daml-lf/engine/src/main/scala/com/digitalasset/daml/lf/engine/Result.scala#L102-L111",
        "createdAt" : "2019-09-10T13:32:51Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d1ad7259-757a-41ea-ad4b-b70964dff98b",
        "parentId" : "c78bf37e-49df-442f-acb7-688ae9eec0d7",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Duplicate compilation is already taken care of in ConcurrentCompiledPackages (it's wrapped in `this.synchronized`).",
        "createdAt" : "2019-09-10T14:36:26Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "505b3614e6d6967667efca7353f4ae8a5301f162",
    "line" : null,
    "diffHunk" : "@@ -36,7 +41,23 @@ object SandboxDamle {\n     def resolveStep(result: Result[A]): Future[Either[DamlLfError, A]] = {\n       result match {\n         case ResultNeedPackage(packageId, resume) =>\n-          getPackage(packageId).flatMap(mbPkg => resolveStep(resume(mbPkg)))\n+          var gettingPackage = false\n+          packagePromises\n+            .computeIfAbsent(packageId, { _ =>"
  },
  {
    "id" : "aa5a813a-f2f3-4129-9dcf-3e120741897d",
    "prId" : 2835,
    "comments" : [
      {
        "id" : "193fee7d-11eb-4cfd-9047-e706ae6e56a8",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "hey, the usage pattern seems to be an async read-through cache.  You might want to take a look at [scaffeine](https://github.com/blemale/scaffeine).",
        "createdAt" : "2019-09-10T15:14:27Z",
        "updatedAt" : "2019-09-10T15:55:45Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "132d80a2-77fe-4011-8018-05a2575565c9",
        "parentId" : "193fee7d-11eb-4cfd-9047-e706ae6e56a8",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "hi @gabor-aranyossy! thanks for the suggestion. @gerolf-da would that library make more sense here?",
        "createdAt" : "2019-09-10T15:59:08Z",
        "updatedAt" : "2019-09-10T15:59:08Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "23016957-1bce-4a65-8a7a-3704439dde46",
        "parentId" : "193fee7d-11eb-4cfd-9047-e706ae6e56a8",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I wouldn't bring it in for this particular use case. But we have many others were using scaffeine could make sense. Thanks @gabor-aranyossy.",
        "createdAt" : "2019-09-10T16:00:08Z",
        "updatedAt" : "2019-09-10T16:00:09Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "505b3614e6d6967667efca7353f4ae8a5301f162",
    "line" : null,
    "diffHunk" : "@@ -19,12 +21,15 @@ import com.digitalasset.daml.lf.value.Value.AbsoluteContractId\n import com.digitalasset.daml.lf.language.Ast.Package\n import com.digitalasset.daml.lf.data.Ref\n \n-import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n \n /**\n   * provides smart constructor for DAML engine environment\n   */\n object SandboxDamle {\n+  // Concurrent map of promises to request each package only once.\n+  private[this] val packagePromises: ConcurrentHashMap[Ref.PackageId, Promise[Option[Package]]] ="
  }
]