[
  {
    "id" : "50efcc2b-f17a-4ad0-82bf-7fe3d5524e8b",
    "prId" : 3574,
    "comments" : [
      {
        "id" : "2e817c8b-1847-4b69-b105-4c878210d80b",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Why bother with this? We can just call the constructor directly.",
        "createdAt" : "2019-11-21T13:09:48Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a47e40d0-791c-4c84-b2ad-cade4c7199b9",
        "parentId" : "2e817c8b-1847-4b69-b105-4c878210d80b",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Consider it gone.",
        "createdAt" : "2019-11-21T13:31:10Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a4ca5d76-ce06-465f-89ce-1f1431d01910",
        "parentId" : "2e817c8b-1847-4b69-b105-4c878210d80b",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by 1227da2.",
        "createdAt" : "2019-11-21T14:08:58Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "18df6d0c630aacd94a8f5897ab38b731d34a2b93",
    "line" : null,
    "diffHunk" : "@@ -35,25 +31,16 @@ final class MetricsManager(jmxDomain: String, enableJmxReporter: Boolean) extend\n \n   if (enableJmxReporter) jmxReporter.start()\n \n-  def timedFuture[T](timerName: String, f: => Future[T]): Future[T] = {\n-    val timer = metrics.timer(timerName)\n-    timedFuture(timer, f)\n-  }\n-\n-  def timedFuture[T](timer: Timer, f: => Future[T]): Future[T] = {\n-    val ctx = timer.time()\n-    val res = f\n-    res.onComplete(_ => ctx.stop())(DirectExecutionContext)\n-    res\n-  }\n-\n   override def close(): Unit = {\n     slf4jReporter.report()\n     if (enableJmxReporter) jmxReporter.close()\n   }\n }\n \n-object MetricsManager {\n-  def apply(jmxDomain: String, enableJmxReporter: Boolean = true): MetricsManager =\n-    new MetricsManager(jmxDomain, enableJmxReporter)\n+object MetricsReporting {\n+  def apply(\n+      metrics: MetricRegistry,\n+      jmxDomain: String,\n+      enableJmxReporter: Boolean = true): MetricsReporting =\n+    new MetricsReporting(metrics, jmxDomain, enableJmxReporter)"
  },
  {
    "id" : "c5fbf01d-ebf3-4256-832a-fa7497e5b1d6",
    "prId" : 3574,
    "comments" : [
      {
        "id" : "c2a15d94-7a6b-44cb-a90c-ae156aef4ee0",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "We never set `enableJmxReporter` to `false`. Can we just always do it?",
        "createdAt" : "2019-11-21T13:10:30Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fab405c3-054d-4247-bc91-f7599b847be4",
        "parentId" : "c2a15d94-7a6b-44cb-a90c-ae156aef4ee0",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yes, I think it is safe to do so now. ",
        "createdAt" : "2019-11-21T13:33:08Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "358a51be-145b-4b33-adbf-1b57a51ea205",
        "parentId" : "c2a15d94-7a6b-44cb-a90c-ae156aef4ee0",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by 1227da2.",
        "createdAt" : "2019-11-21T14:08:50Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "18df6d0c630aacd94a8f5897ab38b731d34a2b93",
    "line" : null,
    "diffHunk" : "@@ -35,25 +31,16 @@ final class MetricsManager(jmxDomain: String, enableJmxReporter: Boolean) extend\n \n   if (enableJmxReporter) jmxReporter.start()\n \n-  def timedFuture[T](timerName: String, f: => Future[T]): Future[T] = {\n-    val timer = metrics.timer(timerName)\n-    timedFuture(timer, f)\n-  }\n-\n-  def timedFuture[T](timer: Timer, f: => Future[T]): Future[T] = {\n-    val ctx = timer.time()\n-    val res = f\n-    res.onComplete(_ => ctx.stop())(DirectExecutionContext)\n-    res\n-  }\n-\n   override def close(): Unit = {\n     slf4jReporter.report()\n     if (enableJmxReporter) jmxReporter.close()\n   }\n }\n \n-object MetricsManager {\n-  def apply(jmxDomain: String, enableJmxReporter: Boolean = true): MetricsManager =\n-    new MetricsManager(jmxDomain, enableJmxReporter)\n+object MetricsReporting {\n+  def apply(\n+      metrics: MetricRegistry,\n+      jmxDomain: String,\n+      enableJmxReporter: Boolean = true): MetricsReporting ="
  }
]