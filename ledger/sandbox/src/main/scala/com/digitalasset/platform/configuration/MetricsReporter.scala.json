[
  {
    "id" : "860223d4-8528-4db7-805e-2458d3041b54",
    "prId" : 6690,
    "comments" : [
      {
        "id" : "0c4e4507-6b11-48c9-bdfc-b7c4ef004f27",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Ah, there it is. I was wondering how to do this all in one place.",
        "createdAt" : "2020-07-10T13:07:58Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d4af266bf7e56ca7c32b63484d5d1b7bf433566",
    "line" : 24,
    "diffHunk" : "@@ -34,10 +34,12 @@ object MetricsReporter {\n         .build(directory.toFile)\n   }\n \n-  final case class Graphite(address: InetSocketAddress) extends MetricsReporter {\n+  final case class Graphite(address: InetSocketAddress, prefix: Option[String] = None)\n+      extends MetricsReporter {\n     override def register(registry: MetricRegistry): ScheduledReporter =\n       metrics.graphite.GraphiteReporter\n         .forRegistry(registry)\n+        .prefixedWith(prefix.orNull)"
  },
  {
    "id" : "c74a08b3-9d9d-4b09-91ee-b2c17cb06253",
    "prId" : 6690,
    "comments" : [
      {
        "id" : "087ed887-3c43-4b53-9639-6262a5100060",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This is not documented, the options are hidden, and I don't know of anyone using it. I don't think we need to support legacy users.",
        "createdAt" : "2020-07-10T13:09:04Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82429949-ca9e-478c-a5c9-15a91bd6c134",
        "parentId" : "087ed887-3c43-4b53-9639-6262a5100060",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Agree. I'm about to make them public and document them, now it's a good time to break an undocumented, hidden option.",
        "createdAt" : "2020-07-10T14:16:10Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f9c6495d-f3e1-4c43-aea3-ed58513700c2",
        "parentId" : "087ed887-3c43-4b53-9639-6262a5100060",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I was mostly trying to not break any existing deployments.",
        "createdAt" : "2020-07-10T15:13:26Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "27b3e47e-db66-4ab3-bd23-a9b5f31782aa",
        "parentId" : "087ed887-3c43-4b53-9639-6262a5100060",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Well, I think you actually knew at least one user. :wink: https://github.com/DACH-NY/spider-on-x/pull/34",
        "createdAt" : "2020-07-15T11:32:00Z",
        "updatedAt" : "2020-07-15T11:32:00Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d4af266bf7e56ca7c32b63484d5d1b7bf433566",
    "line" : null,
    "diffHunk" : "@@ -52,8 +54,25 @@ object MetricsReporter {\n       Graphite(new InetSocketAddress(defaultHost, port))\n   }\n \n-  implicit val metricsReporterRead: Read[MetricsReporter] = Read.reads {\n-    _.split(\":\", 2).toSeq match {\n+  implicit val metricsReporterRead: Read[MetricsReporter] = Read.reads { value =>\n+    if (value == \"console\") Console\n+    else if (!value.contains(\"://\")) {\n+      readLegacy(value)"
  },
  {
    "id" : "dccb8118-74b3-4c0f-96fd-fbf2d8a8bea9",
    "prId" : 6690,
    "comments" : [
      {
        "id" : "fb13d276-02ef-4e23-8688-c72f78247a0e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can you add a `case _` that throws a reasonable exception, like in the `readLegacy` function below?",
        "createdAt" : "2020-07-10T13:11:40Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d4af266bf7e56ca7c32b63484d5d1b7bf433566",
    "line" : 68,
    "diffHunk" : "@@ -52,8 +54,25 @@ object MetricsReporter {\n       Graphite(new InetSocketAddress(defaultHost, port))\n   }\n \n-  implicit val metricsReporterRead: Read[MetricsReporter] = Read.reads {\n-    _.split(\":\", 2).toSeq match {\n+  implicit val metricsReporterRead: Read[MetricsReporter] = Read.reads { value =>\n+    if (value == \"console\") Console\n+    else if (!value.contains(\"://\")) {\n+      readLegacy(value)\n+    } else {\n+      val uri = Read.uriRead.reads(value)\n+      uri.getScheme match {\n+        case \"csv\" => Csv(Paths.get(uri.getPath))\n+        case \"graphite\" =>\n+          val port = if (uri.getPort > 0) uri.getPort else Graphite.defaultPort\n+          val address = new InetSocketAddress(uri.getHost, port)\n+          val metricPrefix = Some(uri.getPath.stripPrefix(\"/\")).filter(_.nonEmpty)\n+          Graphite(address, metricPrefix)\n+      }"
  },
  {
    "id" : "9310f15f-2015-49e0-b50e-975e036c1b75",
    "prId" : 6690,
    "comments" : [
      {
        "id" : "59cf59d4-7ece-4668-a672-af9182c5d36b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\nsealed abstract class MetricsReporter {\r\n```",
        "createdAt" : "2020-07-10T14:15:00Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d4af266bf7e56ca7c32b63484d5d1b7bf433566",
    "line" : null,
    "diffHunk" : "@@ -14,7 +14,7 @@ import scopt.Read\n \n import scala.util.Try\n \n-sealed trait MetricsReporter {\n+sealed trait MetricsReporter extends Product with Serializable {"
  },
  {
    "id" : "13d71981-a410-4f7f-b1a0-a01fd938182f",
    "prId" : 6690,
    "comments" : [
      {
        "id" : "84d78037-b982-4c4a-80bb-2893fc1a8057",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  final class Graphite(address: InetSocketAddress, prefix: Option[String] = None)\r\n```",
        "createdAt" : "2020-07-10T14:15:12Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d4af266bf7e56ca7c32b63484d5d1b7bf433566",
    "line" : 19,
    "diffHunk" : "@@ -34,10 +34,12 @@ object MetricsReporter {\n         .build(directory.toFile)\n   }\n \n-  final case class Graphite(address: InetSocketAddress) extends MetricsReporter {\n+  final case class Graphite(address: InetSocketAddress, prefix: Option[String] = None)"
  },
  {
    "id" : "aef9658f-0dd9-49d4-acb9-8d4e782c7664",
    "prId" : 6690,
    "comments" : [
      {
        "id" : "60c06858-1043-4c1d-8bf0-ecfcc2424b4d",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n          new Graphite(address, metricPrefix)\r\n```",
        "createdAt" : "2020-07-10T14:16:40Z",
        "updatedAt" : "2020-07-13T08:46:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d4af266bf7e56ca7c32b63484d5d1b7bf433566",
    "line" : 64,
    "diffHunk" : "@@ -52,8 +54,25 @@ object MetricsReporter {\n       Graphite(new InetSocketAddress(defaultHost, port))\n   }\n \n-  implicit val metricsReporterRead: Read[MetricsReporter] = Read.reads {\n-    _.split(\":\", 2).toSeq match {\n+  implicit val metricsReporterRead: Read[MetricsReporter] = Read.reads { value =>\n+    if (value == \"console\") Console\n+    else if (!value.contains(\"://\")) {\n+      readLegacy(value)\n+    } else {\n+      val uri = Read.uriRead.reads(value)\n+      uri.getScheme match {\n+        case \"csv\" => Csv(Paths.get(uri.getPath))\n+        case \"graphite\" =>\n+          val port = if (uri.getPort > 0) uri.getPort else Graphite.defaultPort\n+          val address = new InetSocketAddress(uri.getHost, port)\n+          val metricPrefix = Some(uri.getPath.stripPrefix(\"/\")).filter(_.nonEmpty)\n+          Graphite(address, metricPrefix)"
  },
  {
    "id" : "d3b906a7-750b-4279-a6d5-af7ca2ead350",
    "prId" : 5267,
    "comments" : [
      {
        "id" : "4169e226-1eda-4b99-9c26-3e3c5b521965",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n          \"\"\"Must be one of \"console\", \"csv:PATH\", or \"graphite[:HOST][:PORT]\".\"\"\")\r\n```",
        "createdAt" : "2020-03-30T11:02:58Z",
        "updatedAt" : "2020-03-30T12:22:45Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cebb3243c650e3971de38697c13ba114d85ce34f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.configuration\n+\n+import java.net.{InetAddress, InetSocketAddress}\n+import java.nio.file.{Path, Paths}\n+\n+import com.codahale.metrics\n+import com.codahale.metrics.{MetricRegistry, ScheduledReporter}\n+import com.digitalasset.platform.sandbox.config.InvalidConfigException\n+import com.google.common.net.HostAndPort\n+import scopt.Read\n+\n+import scala.util.Try\n+\n+sealed trait MetricsReporter {\n+  def register(registry: MetricRegistry): ScheduledReporter\n+}\n+\n+object MetricsReporter {\n+\n+  case object Console extends MetricsReporter {\n+    override def register(registry: MetricRegistry): ScheduledReporter =\n+      metrics.ConsoleReporter\n+        .forRegistry(registry)\n+        .build()\n+  }\n+\n+  final case class Csv(directory: Path) extends MetricsReporter {\n+    override def register(registry: MetricRegistry): ScheduledReporter =\n+      metrics.CsvReporter\n+        .forRegistry(registry)\n+        .build(directory.toFile)\n+  }\n+\n+  final case class Graphite(address: InetSocketAddress) extends MetricsReporter {\n+    override def register(registry: MetricRegistry): ScheduledReporter =\n+      metrics.graphite.GraphiteReporter\n+        .forRegistry(registry)\n+        .build(new metrics.graphite.Graphite(address))\n+  }\n+\n+  object Graphite {\n+    val defaultHost: InetAddress = InetAddress.getLoopbackAddress\n+    val defaultPort: Int = 2003\n+\n+    def apply(): Graphite =\n+      Graphite(new InetSocketAddress(defaultHost, defaultPort))\n+\n+    def apply(port: Int): Graphite =\n+      Graphite(new InetSocketAddress(defaultHost, port))\n+  }\n+\n+  implicit val metricsReporterRead: Read[MetricsReporter] = Read.reads {\n+    _.split(\":\", 2).toSeq match {\n+      case Seq(\"console\") => Console\n+      case Seq(\"csv\", directory) => Csv(Paths.get(directory))\n+      case Seq(\"graphite\") =>\n+        Graphite()\n+      case Seq(\"graphite\", address) =>\n+        Try(address.toInt)\n+          .map(port => Graphite(port))\n+          .recover {\n+            case _: NumberFormatException =>\n+              //noinspection UnstableApiUsage\n+              val hostAndPort = HostAndPort\n+                .fromString(address)\n+                .withDefaultPort(Graphite.defaultPort)\n+              Graphite(new InetSocketAddress(hostAndPort.getHost, hostAndPort.getPort))\n+          }\n+          .get\n+      case _ =>\n+        throw new InvalidConfigException(\n+          s\"\"\"Must be one of \"console\", \"csv:PATH\", or \"graphite[:HOST][:PORT]\".\"\"\")"
  }
]