[
  {
    "id" : "da7f42fa-daf3-44e4-b29c-9f3bdfab1c66",
    "prId" : 5441,
    "comments" : [
      {
        "id" : "c712bc67-7a40-4702-893e-00363fc166be",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think a regex might help you reduce duplication.\r\n\r\nI haven't tested the below code; apply it at your own peril.\r\n\r\n```suggestion\r\n      val search = \"^com\\\\.daml\\\\.\".r\r\n      val replacement = \"com.digitalasset.\"\r\n      if (search.matches(damlDesc.getName)) {\r\n        val digitalassetName = search.replaceFirstIn(damlDesc.getName, replacement)\r\n        val digitalassetDef = ServerServiceDefinition.builder(digitalassetName)\r\n        damlDef.getMethods.forEach { methodDef =>\r\n          val damlMethodDesc = methodDef.getMethodDescriptor\r\n          val digitalassetMethodName =\r\n            search.replaceFirstIn(damlMethodDesc.getFullMethodName, replacement)\r\n```",
        "createdAt" : "2020-04-06T07:41:41Z",
        "updatedAt" : "2020-04-07T06:58:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e29911a9-3e99-47a8-b70c-18c3adea852c",
        "parentId" : "c712bc67-7a40-4702-893e-00363fc166be",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I can pull out the strings into variables, but not sure using regex is improving it.",
        "createdAt" : "2020-04-06T11:14:11Z",
        "updatedAt" : "2020-04-07T06:58:22Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d1e24b62-f8a9-487d-a925-c0f48c630088",
        "parentId" : "c712bc67-7a40-4702-893e-00363fc166be",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Just makes sure it's at the start of the string, but I'm easy either way.",
        "createdAt" : "2020-04-06T12:49:31Z",
        "updatedAt" : "2020-04-07T06:58:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1c53e53117066a6254e679d47a4f2b1f7735a5e2",
    "line" : null,
    "diffHunk" : "@@ -148,6 +149,37 @@ final class LedgerApiServer(\n         server\n       })(server => Future(server.shutdown().awaitTermination()))\n     }\n+\n+    // This exposes the existing services under com.daml also under com.digitalasset.\n+    // This is necessary to allow applications built with an earlier version of the SDK\n+    // to still work.\n+    // The \"proxy\" services will not show up on the reflection service, because of the way it\n+    // processes service definitions via protobuf file descriptors.\n+    private def addService(serverBuilder: NettyServerBuilder, service: BindableService): Unit = {\n+      // First add the original com.daml service\n+      serverBuilder.addService(service)\n+\n+      val damlDef = service.bindService()\n+      val damlDesc = damlDef.getServiceDescriptor\n+      // Only add \"proxy\" services if it actually contains com.daml in the service name.\n+      // There are other services registered like the reflection service, that doesn't need the special treatment.\n+      if (damlDesc.getName.contains(\"com.daml\")) {\n+        val digitalassetName = damlDesc.getName.replace(\"com.daml\", \"com.digitalasset\")\n+        val digitalassetDef = ServerServiceDefinition.builder(digitalassetName)\n+        damlDef.getMethods.forEach { methodDef =>\n+          val damlMethodDesc = methodDef.getMethodDescriptor\n+          val digitalassetMethodName =\n+            damlMethodDesc.getFullMethodName.replace(\"com.daml\", \"com.digitalasset\")"
  },
  {
    "id" : "ffcd371e-f629-4c68-a0a3-1559fcb2b5c5",
    "prId" : 4097,
    "comments" : [
      {
        "id" : "5cc9df77-c211-4bb6-b514-01d106fac4b4",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Would this not rather be `.get[LedgerApiServer]`?",
        "createdAt" : "2020-01-20T16:38:16Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d250ea6-3a76-4d6d-98c3-84b74ac4bdee",
        "parentId" : "5cc9df77-c211-4bb6-b514-01d106fac4b4",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Prone to copy-paste bugs. Using `this.type` means if you copy and paste it to a different class, it does the right thing.",
        "createdAt" : "2020-01-20T17:12:33Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5859e077-53e8-43b9-b8ff-57677b37744e",
        "parentId" : "5cc9df77-c211-4bb6-b514-01d106fac4b4",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Since `this.type` has specific semantics and a few (apparently) weird behaviors in edge case, we opted to replace this with a simpler `this.getClass` and a factory method that takes a `Class[_]`.",
        "createdAt" : "2020-01-20T18:42:55Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3ee7b62b-2581-461a-9deb-40e54aa3c9c9",
        "parentId" : "5cc9df77-c211-4bb6-b514-01d106fac4b4",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4097/commits/2e6c24a24c6f76815a2ee04be8aad65264d66bde",
        "createdAt" : "2020-01-20T18:43:01Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3fc1ddf4-4861-4c2e-b6d4-d692607f8232",
        "parentId" : "5cc9df77-c211-4bb6-b514-01d106fac4b4",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "What are the weird behaviors?",
        "createdAt" : "2020-01-21T08:45:29Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "80ef9a78495c345ca3a7442bc7c2397f4901c132",
    "line" : null,
    "diffHunk" : "@@ -36,19 +36,20 @@ trait ApiServer {\n \n }\n \n-class LedgerApiServer(\n+final class LedgerApiServer(\n     createApiServices: (Materializer, ExecutionSequencerFactory) => Future[ApiServices],\n     desiredPort: Int,\n     maxInboundMessageSize: Int,\n     address: Option[String],\n-    loggerFactory: NamedLoggerFactory,\n     sslContext: Option[SslContext] = None,\n     interceptors: List[ServerInterceptor] = List.empty,\n     metrics: MetricRegistry,\n-)(implicit actorSystem: ActorSystem, materializer: Materializer)\n+)(implicit actorSystem: ActorSystem, materializer: Materializer, logCtx: LoggingContext)\n     extends ResourceOwner[ApiServer] {\n+\n+  private val logger = ContextualizedLogger.get[this.type]"
  },
  {
    "id" : "b7c6e0e3-179d-4d44-ade1-3554eed63adf",
    "prId" : 3837,
    "comments" : [
      {
        "id" : "c95977fa-bf2e-4fe9-b3a6-495c25270a70",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If you put `stop()` in the `finally` block it's guaranteed to be executed even if you re-throw. Any reason to not put it there and skip the `NonFatal` rethrow?",
        "createdAt" : "2019-12-13T07:18:27Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a9f2088c-901f-4782-ae0c-1238b805d6bb",
        "parentId" : "c95977fa-bf2e-4fe9-b3a6-495c25270a70",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-12-13T10:08:31Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "743ff131e314eb1d8add80ffc8c20c5beefc43c7",
    "line" : 128,
    "diffHunk" : "@@ -52,136 +65,99 @@ object LedgerApiServer {\n       poolName = s\"ledger-api-server-rs-grpc-bridge-${UUID.randomUUID}\",\n       actorCount = Runtime.getRuntime.availableProcessors() * 8\n     )(mat.system)\n+    closeables.push(serverEsf)\n+\n+    val workerEventLoopGroup = createEventLoopGroup(\n+      mat.system.name + \"-nio-worker\",\n+      parallelism = Runtime.getRuntime.availableProcessors)\n+    val bossEventLoopGroup = createEventLoopGroup(mat.system.name + \"-nio-boss\", parallelism = 1)\n+    closeables.push(() => {\n+      // `shutdownGracefully` has a \"quiet period\" which specifies a time window in which\n+      // _no requests_ must be witnessed before shutdown is _initiated_. Here we want to\n+      // start immediately, so no quiet period -- by default it's 2 seconds.\n+      // Moreover, there's also a \"timeout\" parameter\n+      // which caps the time to wait for the quiet period to be fullfilled. Since we have\n+      // no quiet period, this can also be 0.\n+      // See <https://netty.io/4.1/api/io/netty/util/concurrent/EventExecutorGroup.html#shutdownGracefully-long-long-java.util.concurrent.TimeUnit->.\n+      // The 10 seconds to wait is sort of arbitrary, it's long enough to be noticeable though.\n+      Seq(\n+        workerEventLoopGroup.shutdownGracefully(0, 0, MILLISECONDS),\n+        bossEventLoopGroup.shutdownGracefully(0, 0, MILLISECONDS),\n+      ).foreach(_.await(10, SECONDS))\n+    })\n \n     createApiServices(mat, serverEsf).map { apiServices =>\n-      new ApiServer {\n-        private val impl = new LedgerApiServer(\n-          apiServices,\n-          desiredPort,\n-          maxInboundMessageSize,\n-          address,\n-          loggerFactory,\n-          sslContext,\n-          interceptors,\n-          metrics\n-        )\n-\n-        /** returns the api port the server is listening on */\n-        override def port: Int = impl.port\n-\n-        /** returns when all services have been closed during the shutdown */\n-        override def servicesClosed(): Future[Unit] = impl.servicesClosed()\n-\n-        override def close(): Unit = {\n-          impl.close()\n-          serverEsf.close()\n+      val builder = address.fold(NettyServerBuilder.forPort(desiredPort))(address =>\n+        NettyServerBuilder.forAddress(new InetSocketAddress(address, desiredPort)))\n+      sslContext\n+        .fold {\n+          logger.info(\"Starting plainText server\")\n+        } { sslContext =>\n+          logger.info(\"Starting TLS server\")\n+          val _ = builder.sslContext(sslContext)\n         }\n+      builder.directExecutor()\n+      builder.channelType(classOf[NioServerSocketChannel])\n+      builder.bossEventLoopGroup(bossEventLoopGroup)\n+      builder.workerEventLoopGroup(workerEventLoopGroup)\n+      builder.permitKeepAliveTime(10, SECONDS)\n+      builder.permitKeepAliveWithoutCalls(true)\n+      builder.maxInboundMessageSize(maxInboundMessageSize)\n+      interceptors.foreach(builder.intercept)\n+      builder.intercept(new MetricsInterceptor(metrics))\n+      apiServices.services.foreach(builder.addService)\n+      val grpcServer = builder.build()\n+\n+      try {\n+        grpcServer.start()\n+      } catch {\n+        case io: IOException if io.getCause != null && io.getCause.isInstanceOf[BindException] =>\n+          stop()"
  },
  {
    "id" : "1c46e470-74fd-4d92-89c3-5a3c7cf46734",
    "prId" : 3837,
    "comments" : [
      {
        "id" : "39e3ce05-46c8-4f5c-bab2-c481bea6f55c",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n        override val port: Int = actualPort\r\n```\r\nLooks like a `val` is enough here.",
        "createdAt" : "2019-12-13T07:21:07Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "658967fd-5b55-4b6c-ab26-5525f52a6090",
        "parentId" : "39e3ce05-46c8-4f5c-bab2-c481bea6f55c",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-12-13T10:08:55Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "743ff131e314eb1d8add80ffc8c20c5beefc43c7",
    "line" : null,
    "diffHunk" : "@@ -52,136 +65,99 @@ object LedgerApiServer {\n       poolName = s\"ledger-api-server-rs-grpc-bridge-${UUID.randomUUID}\",\n       actorCount = Runtime.getRuntime.availableProcessors() * 8\n     )(mat.system)\n+    closeables.push(serverEsf)\n+\n+    val workerEventLoopGroup = createEventLoopGroup(\n+      mat.system.name + \"-nio-worker\",\n+      parallelism = Runtime.getRuntime.availableProcessors)\n+    val bossEventLoopGroup = createEventLoopGroup(mat.system.name + \"-nio-boss\", parallelism = 1)\n+    closeables.push(() => {\n+      // `shutdownGracefully` has a \"quiet period\" which specifies a time window in which\n+      // _no requests_ must be witnessed before shutdown is _initiated_. Here we want to\n+      // start immediately, so no quiet period -- by default it's 2 seconds.\n+      // Moreover, there's also a \"timeout\" parameter\n+      // which caps the time to wait for the quiet period to be fullfilled. Since we have\n+      // no quiet period, this can also be 0.\n+      // See <https://netty.io/4.1/api/io/netty/util/concurrent/EventExecutorGroup.html#shutdownGracefully-long-long-java.util.concurrent.TimeUnit->.\n+      // The 10 seconds to wait is sort of arbitrary, it's long enough to be noticeable though.\n+      Seq(\n+        workerEventLoopGroup.shutdownGracefully(0, 0, MILLISECONDS),\n+        bossEventLoopGroup.shutdownGracefully(0, 0, MILLISECONDS),\n+      ).foreach(_.await(10, SECONDS))\n+    })\n \n     createApiServices(mat, serverEsf).map { apiServices =>\n-      new ApiServer {\n-        private val impl = new LedgerApiServer(\n-          apiServices,\n-          desiredPort,\n-          maxInboundMessageSize,\n-          address,\n-          loggerFactory,\n-          sslContext,\n-          interceptors,\n-          metrics\n-        )\n-\n-        /** returns the api port the server is listening on */\n-        override def port: Int = impl.port\n-\n-        /** returns when all services have been closed during the shutdown */\n-        override def servicesClosed(): Future[Unit] = impl.servicesClosed()\n-\n-        override def close(): Unit = {\n-          impl.close()\n-          serverEsf.close()\n+      val builder = address.fold(NettyServerBuilder.forPort(desiredPort))(address =>\n+        NettyServerBuilder.forAddress(new InetSocketAddress(address, desiredPort)))\n+      sslContext\n+        .fold {\n+          logger.info(\"Starting plainText server\")\n+        } { sslContext =>\n+          logger.info(\"Starting TLS server\")\n+          val _ = builder.sslContext(sslContext)\n         }\n+      builder.directExecutor()\n+      builder.channelType(classOf[NioServerSocketChannel])\n+      builder.bossEventLoopGroup(bossEventLoopGroup)\n+      builder.workerEventLoopGroup(workerEventLoopGroup)\n+      builder.permitKeepAliveTime(10, SECONDS)\n+      builder.permitKeepAliveWithoutCalls(true)\n+      builder.maxInboundMessageSize(maxInboundMessageSize)\n+      interceptors.foreach(builder.intercept)\n+      builder.intercept(new MetricsInterceptor(metrics))\n+      apiServices.services.foreach(builder.addService)\n+      val grpcServer = builder.build()\n+\n+      try {\n+        grpcServer.start()\n+      } catch {\n+        case io: IOException if io.getCause != null && io.getCause.isInstanceOf[BindException] =>\n+          stop()\n+          throw new UnableToBind(desiredPort, io.getCause)\n+        case NonFatal(e) =>\n+          stop()\n+          throw e\n       }\n-    }(mat.executionContext)\n-  }\n+      closeables.push(() => {\n+        grpcServer.shutdown()\n+        if (!grpcServer.awaitTermination(10, SECONDS)) {\n+          logger.warn(\n+            \"Server did not terminate gracefully in one second. \" +\n+              \"Clients probably did not disconnect. \" +\n+              \"Proceeding with forced termination.\")\n+          val _ = grpcServer.shutdownNow()\n+        }\n+      })\n \n-}\n+      val host = address.getOrElse(\"localhost\")\n+      val actualPort = grpcServer.getPort\n+      logger.info(s\"listening on $host:$actualPort\")\n+\n+      val servicesClosedP = Promise[Unit]()\n+      closeables.push(() => {\n+        apiServices.close()\n+        servicesClosedP.success(())\n+      })\n \n-private class LedgerApiServer(\n-    apiServices: ApiServices,\n-    desiredPort: Int,\n-    maxInboundMessageSize: Int,\n-    address: Option[String],\n-    loggerFactory: NamedLoggerFactory,\n-    sslContext: Option[SslContext] = None,\n-    interceptors: List[ServerInterceptor] = List.empty,\n-    metrics: MetricRegistry)(implicit mat: ActorMaterializer)\n-    extends ApiServer {\n+      new ApiServer {\n+        override def port: Int = actualPort"
  },
  {
    "id" : "fd1d4c31-d975-44ff-858e-4d360c7bed70",
    "prId" : 3837,
    "comments" : [
      {
        "id" : "acf1a55f-c9a2-48ef-98a6-7417ea31919d",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`closeables` is a stack of `AutoCloseable`s, how come you're passing a function here (and in other places)?",
        "createdAt" : "2019-12-13T07:30:02Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3401dfb3-f3ec-4678-8000-56ea1b784520",
        "parentId" : "acf1a55f-c9a2-48ef-98a6-7417ea31919d",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "The Scala compiler can turn a function into a functional interface.",
        "createdAt" : "2019-12-13T08:45:54Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1d854bf1-5ae2-4e8a-95d6-d468f7f87269",
        "parentId" : "acf1a55f-c9a2-48ef-98a6-7417ea31919d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Uh, of course, thanks. :slightly_smiling_face: ",
        "createdAt" : "2019-12-13T09:08:11Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "743ff131e314eb1d8add80ffc8c20c5beefc43c7",
    "line" : 72,
    "diffHunk" : "@@ -52,136 +65,99 @@ object LedgerApiServer {\n       poolName = s\"ledger-api-server-rs-grpc-bridge-${UUID.randomUUID}\",\n       actorCount = Runtime.getRuntime.availableProcessors() * 8\n     )(mat.system)\n+    closeables.push(serverEsf)\n+\n+    val workerEventLoopGroup = createEventLoopGroup(\n+      mat.system.name + \"-nio-worker\",\n+      parallelism = Runtime.getRuntime.availableProcessors)\n+    val bossEventLoopGroup = createEventLoopGroup(mat.system.name + \"-nio-boss\", parallelism = 1)\n+    closeables.push(() => {"
  },
  {
    "id" : "3460f97c-3998-4863-b1a7-b1f015acdcd5",
    "prId" : 3837,
    "comments" : [
      {
        "id" : "69005084-5a5e-414e-8855-d5dd5018d40a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to explicitly call the method to set the channel to use an unsecured channel here? Just in case the default changes or this piece of code gets moved or reused without having the builder under control.",
        "createdAt" : "2019-12-13T07:32:12Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c2b0c7d0-aa85-4a57-b90b-9aac06caf525",
        "parentId" : "69005084-5a5e-414e-8855-d5dd5018d40a",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "If you can tell me what that method is, sure. I can't find it. 😉 ",
        "createdAt" : "2019-12-13T08:47:05Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1a510e95-b175-4863-ae80-f1b3589c6150",
        "parentId" : "69005084-5a5e-414e-8855-d5dd5018d40a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Uh, looks like it's not defined over this builder. From the code it looks like you should call `sslContext` with a `null` argument, but I would ask to double check whether that's the case.",
        "createdAt" : "2019-12-13T09:11:13Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "66e21013-e183-4ed4-a238-3696d0cc78ac",
        "parentId" : "69005084-5a5e-414e-8855-d5dd5018d40a",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I did exactly that, and moved the log line to simplify things.",
        "createdAt" : "2019-12-13T10:08:14Z",
        "updatedAt" : "2019-12-13T10:39:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "743ff131e314eb1d8add80ffc8c20c5beefc43c7",
    "line" : null,
    "diffHunk" : "@@ -52,136 +65,99 @@ object LedgerApiServer {\n       poolName = s\"ledger-api-server-rs-grpc-bridge-${UUID.randomUUID}\",\n       actorCount = Runtime.getRuntime.availableProcessors() * 8\n     )(mat.system)\n+    closeables.push(serverEsf)\n+\n+    val workerEventLoopGroup = createEventLoopGroup(\n+      mat.system.name + \"-nio-worker\",\n+      parallelism = Runtime.getRuntime.availableProcessors)\n+    val bossEventLoopGroup = createEventLoopGroup(mat.system.name + \"-nio-boss\", parallelism = 1)\n+    closeables.push(() => {\n+      // `shutdownGracefully` has a \"quiet period\" which specifies a time window in which\n+      // _no requests_ must be witnessed before shutdown is _initiated_. Here we want to\n+      // start immediately, so no quiet period -- by default it's 2 seconds.\n+      // Moreover, there's also a \"timeout\" parameter\n+      // which caps the time to wait for the quiet period to be fullfilled. Since we have\n+      // no quiet period, this can also be 0.\n+      // See <https://netty.io/4.1/api/io/netty/util/concurrent/EventExecutorGroup.html#shutdownGracefully-long-long-java.util.concurrent.TimeUnit->.\n+      // The 10 seconds to wait is sort of arbitrary, it's long enough to be noticeable though.\n+      Seq(\n+        workerEventLoopGroup.shutdownGracefully(0, 0, MILLISECONDS),\n+        bossEventLoopGroup.shutdownGracefully(0, 0, MILLISECONDS),\n+      ).foreach(_.await(10, SECONDS))\n+    })\n \n     createApiServices(mat, serverEsf).map { apiServices =>\n-      new ApiServer {\n-        private val impl = new LedgerApiServer(\n-          apiServices,\n-          desiredPort,\n-          maxInboundMessageSize,\n-          address,\n-          loggerFactory,\n-          sslContext,\n-          interceptors,\n-          metrics\n-        )\n-\n-        /** returns the api port the server is listening on */\n-        override def port: Int = impl.port\n-\n-        /** returns when all services have been closed during the shutdown */\n-        override def servicesClosed(): Future[Unit] = impl.servicesClosed()\n-\n-        override def close(): Unit = {\n-          impl.close()\n-          serverEsf.close()\n+      val builder = address.fold(NettyServerBuilder.forPort(desiredPort))(address =>\n+        NettyServerBuilder.forAddress(new InetSocketAddress(address, desiredPort)))\n+      sslContext\n+        .fold {\n+          logger.info(\"Starting plainText server\")"
  }
]