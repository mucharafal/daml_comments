[
  {
    "id" : "407712ec-f2fd-40be-b286-e8cd954b2bd7",
    "prId" : 6372,
    "comments" : [
      {
        "id" : "f56afd05-acc4-4940-9350-0522b3d8f845",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's probably still used by the active contracts query right now, but if it's not, `orderByColumns` can probably go away. :slightly_smiling_face: ",
        "createdAt" : "2020-06-26T14:11:58Z",
        "updatedAt" : "2020-07-07T20:49:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2c84b80e-73f4-40fe-9324-656b63648629",
        "parentId" : "f56afd05-acc4-4940-9350-0522b3d8f845",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "good catch... it is not used, removing it.",
        "createdAt" : "2020-06-26T22:06:57Z",
        "updatedAt" : "2020-07-07T20:49:50Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a4ac22ba1dbfc5a1f114a75812abec7b87d0eb34",
    "line" : 50,
    "diffHunk" : "@@ -108,7 +111,7 @@ private[events] trait EventsTableFlatEvents { this: EventsTable =>\n   ): SimpleSql[Row] = {\n     val witnessesWhereClause =\n       sqlFunctions.arrayIntersectionWhereClause(\"flat_event_witnesses\", requestingParty)\n-    SQL\"select #$selectColumns, array[$requestingParty] as event_witnesses, case when submitter = $requestingParty then command_id else '' end as command_id from participant_events where transaction_id = $transactionId and #$witnessesWhereClause order by #$orderByColumns\""
  },
  {
    "id" : "d94fa33d-b5c4-47d8-b73e-b4151675f60d",
    "prId" : 6172,
    "comments" : [
      {
        "id" : "a8589e97-c49b-43fc-b5d6-caec12ef1626",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Feel free to inline them in the actual queries.",
        "createdAt" : "2020-06-02T07:11:58Z",
        "updatedAt" : "2020-06-03T00:22:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a07d02c332d46c90c777addcbdff06f74cd74a61",
    "line" : null,
    "diffHunk" : "@@ -74,10 +75,10 @@ private[events] trait EventsTableFlatEvents { this: EventsTable =>\n     ).mkString(\", \")\n \n   private val witnessesAggregation =\n-    \"array_agg(event_witness) as event_witnesses\"\n+    \"flat_event_witnesses\"\n \n   private val flatEventsTable =\n-    \"participant_events natural join participant_event_flat_transaction_witnesses\"\n+    \"participant_events\""
  },
  {
    "id" : "428ac96d-30b4-4b52-8afc-96488d588566",
    "prId" : 5285,
    "comments" : [
      {
        "id" : "d13a19d9-e62d-470b-9e36-926d2ac15681",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "did you want to use `#$orderByColumns` in the query?",
        "createdAt" : "2020-03-31T07:54:15Z",
        "updatedAt" : "2020-03-31T12:00:51Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "650e766d-c4d3-4954-a58b-ce2b5ae6b1f4",
        "parentId" : "d13a19d9-e62d-470b-9e36-926d2ac15681",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Good catch, I'll make it happen in the follow up PR, thanks!",
        "createdAt" : "2020-03-31T12:12:57Z",
        "updatedAt" : "2020-03-31T12:12:57Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "498fbab4-36f8-4ec6-a4be-e7d90f76ce59",
        "parentId" : "d13a19d9-e62d-470b-9e36-926d2ac15681",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5305/commits/b01360c60bcbf0216026c58ceae9d8de4238e201",
        "createdAt" : "2020-03-31T12:34:46Z",
        "updatedAt" : "2020-03-31T12:34:47Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e26ca711868bcb2f98d3b48bc163c39c7b02dbc",
    "line" : 32,
    "diffHunk" : "@@ -116,4 +121,105 @@ private[events] trait EventsTableFlatEvents { this: EventsTable =>\n   ): SimpleSql[Row] =\n     SQL\"select #$selectColumns, case when submitter in ($requestingParties) then command_id else '' end as command_id from #$flatEventsTable where transaction_id = $transactionId and event_witness in ($requestingParties) group by (#$groupByColumns)\"\n \n+  private object RangeQueries {\n+\n+    def onlyWildcardParties(\n+        startExclusive: Offset,\n+        endInclusive: Offset,\n+        parties: Set[Party],\n+        pageSize: Int,\n+        rowOffset: Long,\n+    ): SimpleSql[Row] =\n+      SQL\"select #$selectColumns, case when submitter in ($parties) then command_id else '' end as command_id from #$flatEventsTable where event_offset > $startExclusive and event_offset <= $endInclusive and event_witness in ($parties) group by (#$groupByColumns) order by (event_offset, transaction_id, node_index) limit $pageSize offset $rowOffset\""
  },
  {
    "id" : "dc28c887-3eb0-4541-88be-e6771348de20",
    "prId" : 5241,
    "comments" : [
      {
        "id" : "654f8d58-9293-429d-9c7f-f67619242310",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "For safety around the parameters, you could also do something like:\r\n\r\n```suggestion\r\n  private def lookupFlatTransactionByIdQuery(\r\n      transactionId: TransactionId,\r\n      requestingParties: Set[Party],\r\n  ): SimpleSql[Row] =\r\n    SQL\"select #$selectColumns from #$flatEventsTable where transaction_id = $transactionId and event_witness in ($requestingParties) group by (#$groupByColumns)\"\r\n```\r\n\r\nYour call though; I don't mind either way.",
        "createdAt" : "2020-03-27T10:43:39Z",
        "updatedAt" : "2020-03-27T11:29:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2defc5e7-566f-48be-9687-9470e392c0e9",
        "parentId" : "654f8d58-9293-429d-9c7f-f67619242310",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's very nice to know about the syntax, can it still take advantage of `PreparedStatement` caching?",
        "createdAt" : "2020-03-27T11:11:39Z",
        "updatedAt" : "2020-03-27T11:29:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7740ae3d-ab0c-4d27-aa4f-a234b81b4f1e",
        "parentId" : "654f8d58-9293-429d-9c7f-f67619242310",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yup. [From the docs:](http://playframework.github.io/anorm/#string-interpolation)\r\n\r\n> By using `#$value` instead of `$value`, interpolated value will be part of the prepared statement, rather being passed as a parameter when executing this SQL statement.",
        "createdAt" : "2020-03-27T11:16:25Z",
        "updatedAt" : "2020-03-27T11:29:26Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "57f0d2b3-4109-4efc-b7bf-dce0fd93b494",
        "parentId" : "654f8d58-9293-429d-9c7f-f67619242310",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This is very cool, thanks for sharing.",
        "createdAt" : "2020-03-27T11:18:35Z",
        "updatedAt" : "2020-03-27T11:29:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5531e832-0f63-44cf-be58-c2db0882d042",
        "parentId" : "654f8d58-9293-429d-9c7f-f67619242310",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I added [this](https://github.com/digital-asset/daml/pull/5241/commits/926c17135222937bb5eb0a984589ae04714cfe60) to make it work. Unfortunately I had to move one column out of the shared ones because it needs a parameter. Let me know if you have better ways to do it.",
        "createdAt" : "2020-03-27T11:30:36Z",
        "updatedAt" : "2020-03-27T11:30:46Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "926c17135222937bb5eb0a984589ae04714cfe60",
    "line" : null,
    "diffHunk" : "@@ -62,47 +63,58 @@ private[events] trait EventsTableFlatEvents { this: EventsTable =>\n \n   val flatEventParser: RowParser[Entry[Event]] = createdFlatEventParser | archivedFlatEventParser\n \n+  private val selectColumns =\n+    Seq(\n+      \"event_offset\",\n+      \"transaction_id\",\n+      \"ledger_effective_time\",\n+      \"case when submitter = {requesting_parties} then command_id else '' end as command_id\",\n+      \"workflow_id\",\n+      \"participant_events.event_id\",\n+      \"contract_id\",\n+      \"template_package_id\",\n+      \"template_name\",\n+      \"create_argument\",\n+      \"create_signatories\",\n+      \"create_observers\",\n+      \"create_agreement_text\",\n+      \"create_key_value\",\n+      \"array_agg(event_witness) as event_witnesses\",\n+    ).mkString(\", \")\n+\n+  private val flatEventsTable =\n+    \"participant_events natural join participant_event_flat_transaction_witnesses\"\n+\n+  private val groupByColumns =\n+    Seq(\n+      \"event_offset\",\n+      \"transaction_id\",\n+      \"ledger_effective_time\",\n+      \"command_id\",\n+      \"workflow_id\",\n+      \"participant_events.event_id\",\n+      \"contract_id\",\n+      \"template_package_id\",\n+      \"template_name\",\n+      \"create_argument\",\n+      \"create_signatories\",\n+      \"create_observers\",\n+      \"create_agreement_text\",\n+      \"create_key_value\",\n+    ).mkString(\", \")\n+\n+  private val lookupFlatTransactionByIdQuery: SqlQuery =\n+    SQL(\n+      s\"select $selectColumns from $flatEventsTable where transaction_id = {transaction_id} and event_witness in ({requesting_parties}) group by ($groupByColumns)\"\n+    )"
  }
]