[
  {
    "id" : "b01300c5-bfce-4aab-9a4c-2f8ca9e8f216",
    "prId" : 6289,
    "comments" : [
      {
        "id" : "2510690a-1250-4d60-aa03-82dea45d0844",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Would it make sense to create a type parametrized weighting scheme for this instead? I.e., do you expect such weighting to be used for more caches than the 2 defined here?",
        "createdAt" : "2020-06-12T08:15:52Z",
        "updatedAt" : "2020-06-15T07:48:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "88fbf388af498692afc5283d2a171d201046eb70",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +251,255 @@  object ContractCache {\n\n    private implicit object `Key Weight` extends caching.Weight[Key] {\n      override def weigh(value: Key): caching.Cache.Size =\n        0 // make sure that only the value is counted"
  },
  {
    "id" : "c1b33eea-a178-4ce9-8cbe-93563c0b203a",
    "prId" : 6289,
    "comments" : [
      {
        "id" : "918b5d49-de4c-43f1-9ebe-e671c2baeefc",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "This singular name is a bit confusing here. Maybe call it `Caches` or `CachedEntities` or similar to be explicit that it is holding more than one cache?",
        "createdAt" : "2020-06-12T08:21:40Z",
        "updatedAt" : "2020-06-15T07:48:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "88fbf388af498692afc5283d2a171d201046eb70",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +177,181 @@object LfValueTranslation {\n\n  final case class Cache(events: EventCache, contracts: ContractCache)\n  type EventCache = caching.Cache[EventCache.Key, EventCache.Value]\n  type ContractCache = caching.Cache[ContractCache.Key, ContractCache.Value]"
  },
  {
    "id" : "6da59b1c-5454-431a-b92e-649d6b6b10a3",
    "prId" : 6052,
    "comments" : [
      {
        "id" : "0bd75a3d-7e2d-4912-88b7-63807fcc82f9",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Thank you for using a typed exception. ðŸ˜€ ",
        "createdAt" : "2020-05-20T14:49:42Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +196,200 @@\n    final class UnexpectedTypeException(value: Value)\n        extends RuntimeException(s\"Unexpected value $value\")\n\n    final case class Key(eventId: String)"
  },
  {
    "id" : "24d7f03b-7be6-4d13-90f5-205309b2d78f",
    "prId" : 6052,
    "comments" : [
      {
        "id" : "c5514221-c149-4f86-b2bc-6659a1f7e877",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Could this `extends AnyVal`?",
        "createdAt" : "2020-05-20T14:51:09Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bef3d5b2-0c6a-49cd-a9fa-1ccca057867e",
        "parentId" : "c5514221-c149-4f86-b2bc-6659a1f7e877",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Also, instead of making `Key` here, perhaps we could make `EventId` a proper type and just use that? (Potentially as a separate piece of work.)",
        "createdAt" : "2020-05-20T14:54:06Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2d93b20c-d613-4c7b-bee0-44f07fcbd478",
        "parentId" : "c5514221-c149-4f86-b2bc-6659a1f7e877",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "> Could this `extends AnyVal`?\r\n\r\nKeys must extends `AnyRef`.",
        "createdAt" : "2020-05-20T16:58:41Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e94f0d9b-9c41-4671-83cc-36fd33d553f7",
        "parentId" : "c5514221-c149-4f86-b2bc-6659a1f7e877",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "> Also, instead of making `Key` here, perhaps we could make `EventId` a proper type and just use that? (Potentially as a separate piece of work.)\r\n\r\nIt is already, I'm using string here because I also have those coming from the database.",
        "createdAt" : "2020-05-20T16:59:30Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@        extends RuntimeException(s\"Unexpected value $value\")\n\n    final case class Key(eventId: String)\n\n    sealed abstract class Value {"
  },
  {
    "id" : "a0001ce4-f153-4b0f-a9d1-4de7423ed53c",
    "prId" : 6052,
    "comments" : [
      {
        "id" : "ef0d3df8-57d9-46b8-a321-43bee24957ad",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n  private def cannotSerialize(attribute: String, forContract: ContractId): String =\r\n```",
        "createdAt" : "2020-05-25T13:59:23Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff1e6587-60cc-42f0-b7db-bbbfc16a3bee",
        "parentId" : "ef0d3df8-57d9-46b8-a321-43bee24957ad",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Thanks, seems unnecessary though.",
        "createdAt" : "2020-05-26T07:22:42Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@final class LfValueTranslation(val cache: LfValueTranslation.Cache) {\n\n  private def cantSerialize(attribute: String, forContract: ContractId): String =\n    s\"Cannot serialize $attribute for ${forContract.coid}\"\n"
  },
  {
    "id" : "1c30bb2d-59d8-4cd9-b9bf-b70d21aacea4",
    "prId" : 6052,
    "comments" : [
      {
        "id" : "c6c94636-82fb-4de7-b061-6b163b95670e",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Just construct a count-based caffeine cache, i.e., use `.maximumSize(...)` instead of `.maximumWeight(...)` and a weighter when creating the cache:\r\nhttps://github.com/ben-manes/caffeine/blob/4451d4443f1db71d3dc11925a1bca9a5206dd539/caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java#L368",
        "createdAt" : "2020-05-25T14:05:45Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a9d4d74a-2011-4292-ace6-4b3a43333061",
        "parentId" : "c6c94636-82fb-4de7-b061-6b163b95670e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I tried this already, unfortunately this starts to get out of scope with several changes needed to make sure we have an alternative that doesn't take an implicit `Weight` and that everything typechecks. I agree it's a meaningful improvement but I'd prefer not making everything in one PR which is already reasonably large.",
        "createdAt" : "2020-05-26T07:25:34Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +183,187 @@    private implicit object `Value Weight` extends caching.Weight[Value] {\n      override def weigh(value: Value): caching.Cache.Size =\n        1 // TODO replace this with something to avoid weights entirely\n    }\n"
  }
]