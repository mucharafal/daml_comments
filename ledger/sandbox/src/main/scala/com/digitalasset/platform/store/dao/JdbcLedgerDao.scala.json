[
  {
    "id" : "c7b3ecbb-f209-4707-96a9-42209d8a8d39",
    "prId" : 6256,
    "comments" : [
      {
        "id" : "b979c5ec-3d28-4181-ba01-42b1b44c66f6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Again, why not use the error message?",
        "createdAt" : "2020-06-08T10:05:40Z",
        "updatedAt" : "2020-06-08T11:19:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1752fe64c734b3190730de0876c39fb6c0a481c8",
    "line" : null,
    "diffHunk" : "@@ -463,7 +463,12 @@ private class JdbcLedgerDao(\n     contractsReader.lookupContractKey(forParty, key)\n \n   private def splitOrThrow(id: EventId): NodeId =\n-    split(id).fold(sys.error(s\"Illegal format for event identifier $id\"))(_.nodeId)\n+    TransactionIdWithIndex\n+      .fromString(id)\n+      .fold(\n+        _ => sys.error(s\"Illegal format for event identifier $id\"),"
  },
  {
    "id" : "9b8d46e5-84fa-4338-bf58-9bcdf5d0e704",
    "prId" : 6256,
    "comments" : [
      {
        "id" : "129de892-733e-41ee-b892-1e3ab5aeb6ba",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I think this can be inlined too, the custom error message seems unnecessary (and probably misleading).",
        "createdAt" : "2020-06-08T10:06:47Z",
        "updatedAt" : "2020-06-08T11:19:22Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f70a1f2d-4b62-4a95-8c31-a459f94c3301",
        "parentId" : "129de892-733e-41ee-b892-1e3ab5aeb6ba",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-06-08T10:47:58Z",
        "updatedAt" : "2020-06-08T11:19:22Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1752fe64c734b3190730de0876c39fb6c0a481c8",
    "line" : null,
    "diffHunk" : "@@ -463,7 +463,12 @@ private class JdbcLedgerDao(\n     contractsReader.lookupContractKey(forParty, key)\n \n   private def splitOrThrow(id: EventId): NodeId =\n-    split(id).fold(sys.error(s\"Illegal format for event identifier $id\"))(_.nodeId)\n+    TransactionIdWithIndex"
  },
  {
    "id" : "35465955-07c7-4fd5-9b00-60c1f8021560",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "4a15e394-645d-4e10-8927-7003d59c8871",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "The braces are unnecessary.",
        "createdAt" : "2020-05-26T10:58:28Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f3586cc8-870a-434d-a097-5e9d622652c6",
        "parentId" : "4a15e394-645d-4e10-8927-7003d59c8871",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2020-05-26T12:33:07Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : null,
    "diffHunk" : "@@ -110,11 +110,15 @@ private class JdbcLedgerDao(\n \n   private val SQL_SELECT_LEDGER_END = SQL(\"select ledger_end from parameters\")\n \n-  override def lookupLedgerEnd(): Future[Offset] =\n+  /**\n+    * Defaults to Offset.begin if ledger_end is unset\n+    */\n+  override def lookupLedgerEnd(): Future[Offset] = {\n     dbDispatcher.executeSql(metrics.daml.index.db.getLedgerEnd) { implicit conn =>\n       SQL_SELECT_LEDGER_END\n-        .as(offset(\"ledger_end\").single)\n+        .as(offset(\"ledger_end\").?.map(_.getOrElse(Offset.begin)).single)\n     }\n+  }"
  },
  {
    "id" : "19813287-4346-4886-9624-d16c01aec395",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "30f6c8c9-2bb9-41cc-ab13-9834c93d595b",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think that when this function is called, there should _always_ be a value here, so crashing would be appropriate. If we haven't initialized the ledger, the code should be calling `lookupInitialLedgerEnd` instead.\r\n\r\nWhat happens if you revert this? What breaks?",
        "createdAt" : "2020-05-26T10:59:00Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "071b4aaf-8b66-45fe-995b-9bc8b61baef8",
        "parentId" : "30f6c8c9-2bb9-41cc-ab13-9834c93d595b",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "~Yes, that's correct, @SamirTalwar-DA.~\r\nThat's only correct, if we initialize the index DB with the \"fake\" offset. But since this PR avoids doing that, we need to return `Offset.begin`.",
        "createdAt" : "2020-05-26T11:08:24Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "23ce6283-35af-412c-a046-07f6b3fc762a",
        "parentId" : "30f6c8c9-2bb9-41cc-ab13-9834c93d595b",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "The previous behaviour was:\r\n1. If called prior to ledger initialisation - _crash_\r\n2. If called post initialisation but pre first ledger end update - _default to Offset.begin_\r\n3. If called post first ledger end update - _return most recently updated ledger_end_\r\n\r\nThis change means that the default provided in #2 above comes from the method as opposed to from the database column.\r\n\r\nAs many things could be happening asynchronously during startup I think it is safest to leave the default, or leave it someone more expert in the area to remove it ;-)",
        "createdAt" : "2020-05-26T11:13:53Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 11,
    "diffHunk" : "@@ -110,11 +110,15 @@ private class JdbcLedgerDao(\n \n   private val SQL_SELECT_LEDGER_END = SQL(\"select ledger_end from parameters\")\n \n-  override def lookupLedgerEnd(): Future[Offset] =\n+  /**\n+    * Defaults to Offset.begin if ledger_end is unset\n+    */\n+  override def lookupLedgerEnd(): Future[Offset] = {\n     dbDispatcher.executeSql(metrics.daml.index.db.getLedgerEnd) { implicit conn =>\n       SQL_SELECT_LEDGER_END\n-        .as(offset(\"ledger_end\").single)\n+        .as(offset(\"ledger_end\").?.map(_.getOrElse(Offset.begin)).single)"
  },
  {
    "id" : "57b3764f-f0d3-4e1a-9fde-d7696f1fb093",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "dc659dea-d6cf-4205-94e6-b327e84eb56d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    \"update parameters set ledger_end = {LedgerEnd} where ledger_end is null or ledger_end < {LedgerEnd}\")\r\n```",
        "createdAt" : "2020-05-26T12:55:58Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "faf6d54c-3434-4e3e-99dc-2420948ac1c5",
        "parentId" : "dc659dea-d6cf-4205-94e6-b327e84eb56d",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "as above",
        "createdAt" : "2020-05-26T16:35:55Z",
        "updatedAt" : "2020-05-26T16:35:56Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 37,
    "diffHunk" : "@@ -139,7 +141,7 @@ private class JdbcLedgerDao(\n   // and thus we need to make sure to only update the ledger end when the ledger entry we're committing\n   // is advancing it.\n   private val SQL_UPDATE_LEDGER_END = SQL(\n-    \"update parameters set ledger_end = {LedgerEnd} where ledger_end < {LedgerEnd}\")\n+    \"update parameters set ledger_end = {LedgerEnd} where (ledger_end is null or ledger_end < {LedgerEnd})\")"
  },
  {
    "id" : "8f51e720-4dc6-49fd-992b-fd1b81942219",
    "prId" : 5983,
    "comments" : [
      {
        "id" : "0fb08424-3af1-449a-811e-028eabe8a5c6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think we're going to need to pull this out and share it around. Later though.",
        "createdAt" : "2020-05-14T15:37:20Z",
        "updatedAt" : "2020-05-14T16:26:38Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9757bb57bd136b3cf70daf8c475f40f7e49bcb34",
    "line" : 36,
    "diffHunk" : "@@ -952,8 +949,7 @@ object JdbcLedgerDao {\n   )(implicit logCtx: LoggingContext): ResourceOwner[LedgerDao] =\n     for {\n       dbDispatcher <- DbDispatcher.owner(serverRole, jdbcUrl, maxConnections, metrics)\n-      executor <- ResourceOwner.forExecutorService(() =>\n-        Executors.newCachedThreadPool(ThreadFactory))\n+      executor <- ResourceOwner.forExecutorService(() => Executors.newWorkStealingPool())"
  },
  {
    "id" : "d6fc07cc-92cc-4cdd-ab9e-c0b993fa6c80",
    "prId" : 5930,
    "comments" : [
      {
        "id" : "4ca660db-dad6-46ac-98a0-41603cc4a940",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can't you pull this preparation up too?",
        "createdAt" : "2020-05-11T16:36:42Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a829b164-2d25-4dd7-842d-374f86b0ab95",
        "parentId" : "4ca660db-dad6-46ac-98a0-41603cc4a940",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "We can evaluate this but for the time being I'd leave this here, it only affects Sandbox Classic and the scenario loader, which is not really performance sensitive. But in general I agree it would make sense.",
        "createdAt" : "2020-05-11T16:44:53Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ccc43a28-e385-41ec-a08e-4517545d5834",
        "parentId" : "4ca660db-dad6-46ac-98a0-41603cc4a940",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sorry, I haven't given enough context: the problem is that we would need to add a non-trivial bit of code to handle this case specifically and I would prefer to keep this sub-optimal but without any additional infrastructure, unless we really see there is a use for it.",
        "createdAt" : "2020-05-11T16:52:40Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c4f8c953c4ccd754c46e920876b4288839fa9bdb",
    "line" : 66,
    "diffHunk" : "@@ -534,15 +537,17 @@ private class JdbcLedgerDao(\n                   for (submitter <- tx.submittingParty; appId <- tx.applicationId;\n                     cmdId <- tx.commandId)\n                     yield SubmitterInfo(submitter, appId, cmdId, Instant.EPOCH)\n-                transactionsWriter.write(\n-                  submitterInfo = submitterInfo,\n-                  workflowId = tx.workflowId,\n-                  transactionId = tx.transactionId,\n-                  ledgerEffectiveTime = tx.ledgerEffectiveTime,\n-                  offset = offset,\n-                  transaction = tx.transaction.mapNodeId(splitOrThrow),\n-                  divulgedContracts = Nil,\n-                )\n+                transactionsWriter\n+                  .prepare(\n+                    submitterInfo = submitterInfo,\n+                    workflowId = tx.workflowId,\n+                    transactionId = tx.transactionId,\n+                    ledgerEffectiveTime = tx.ledgerEffectiveTime,\n+                    offset = offset,\n+                    transaction = tx.transaction.mapNodeId(splitOrThrow),\n+                    divulgedContracts = Nil,\n+                  )"
  },
  {
    "id" : "8031af48-9125-42db-81d6-18dfb9292478",
    "prId" : 5706,
    "comments" : [
      {
        "id" : "6737ff0a-54c9-4419-af0c-2470e22bc541",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Maybe instead of `null` and `s` return `None` and `Some(s)` directly without using `.?`",
        "createdAt" : "2020-04-23T16:14:26Z",
        "updatedAt" : "2020-04-23T16:14:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "33be359c-7ded-4890-bebf-317d19bf547b",
        "parentId" : "6737ff0a-54c9-4419-af0c-2470e22bc541",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I think this was done so that both `null` and an empty string were evaluated to an empty value. Does it make sense?",
        "createdAt" : "2020-04-23T16:28:38Z",
        "updatedAt" : "2020-04-23T16:28:38Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d14449de39fc87d40ac96f7e69f906a20fc0157d",
    "line" : 5,
    "diffHunk" : "@@ -216,7 +216,7 @@ private class JdbcLedgerDao(\n       str(\"typ\") ~\n       str(\"submission_id\") ~\n       str(\"participant_id\") ~\n-      str(\"rejection_reason\")(emptyStringToNullColumn).? ~\n+      str(\"rejection_reason\").map(s => if (s.isEmpty) null else s).? ~"
  },
  {
    "id" : "68f2042d-c15b-4439-aaa5-e5a607951624",
    "prId" : 5393,
    "comments" : [
      {
        "id" : "886e5a39-5eec-4b18-ac05-b874cad0ea06",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "A rejection entry can be added:\r\n- By `JdbcIndexer`, when consuming a `ReadService` update\r\n- By `SqlLedger`, when the time model check fails\r\n- By `JdbcLedgerDao`, when persisting the transaction fails with a consistency error\r\n",
        "createdAt" : "2020-04-02T22:57:23Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4e668161-cc5d-498c-8eed-dce9b8ca470e",
        "parentId" : "886e5a39-5eec-4b18-ac05-b874cad0ea06",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@stefanobaghino-da: does the new schema require this to be added somewhere in addition?",
        "createdAt" : "2020-04-03T07:47:17Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6e944458-f016-4d97-b64e-8b95cb4ada52",
        "parentId" : "886e5a39-5eec-4b18-ac05-b874cad0ea06",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The sync version of this method should probably be called inside `storeRejection` so it is done in the same database transaction.",
        "createdAt" : "2020-04-03T07:48:54Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b8cd8d0f-9ed1-47c1-96b6-16041b75c76b",
        "parentId" : "886e5a39-5eec-4b18-ac05-b874cad0ea06",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "> The sync version of this method should probably be called\r\n\r\nThis is the sync method 🙂 ",
        "createdAt" : "2020-04-06T06:35:27Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a442251-c6c7-4bbe-9e0b-df013f0eee32",
        "parentId" : "886e5a39-5eec-4b18-ac05-b874cad0ea06",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "> @stefanobaghino-da: does the new schema require this to be added somewhere in addition?\r\n\r\nThe new schema has a separate table for completions and rejections, I believe we can wire it in there.",
        "createdAt" : "2020-04-06T08:05:36Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "efd1bb54-f467-47cc-b4ff-12e5db7e1c4f",
        "parentId" : "886e5a39-5eec-4b18-ac05-b874cad0ea06",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'll try to transition this to the new schema after this has been merged.",
        "createdAt" : "2020-04-06T08:06:18Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f49d72d97c5936a50cb883659dd2caeda6205402",
    "line" : 4,
    "diffHunk" : "@@ -981,6 +981,7 @@ private class JdbcLedgerDao(\n           }.get\n \n         case PersistenceEntry.Rejection(rejection) =>\n+          stopDeduplicatingCommandSync(domain.CommandId(rejection.commandId), rejection.submitter)"
  },
  {
    "id" : "fa477810-91d7-4a41-bb23-ecac51edd4e1",
    "prId" : 5333,
    "comments" : [
      {
        "id" : "8fd06d07-2344-4d74-b3c8-d5012391aec6",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The description here looks like a better name for the method.",
        "createdAt" : "2020-04-01T11:17:38Z",
        "updatedAt" : "2020-04-01T22:27:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7094fefa-30b1-46b0-8954-3186dba16f21",
        "parentId" : "8fd06d07-2344-4d74-b3c8-d5012391aec6",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Oh, copy and paste error, there's a different method for removing expired deduplication data.",
        "createdAt" : "2020-04-01T11:28:11Z",
        "updatedAt" : "2020-04-01T22:27:18Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46d32a53-cd25-4988-a833-f41a3ef05dd2",
        "parentId" : "8fd06d07-2344-4d74-b3c8-d5012391aec6",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "For reference, `stopDeduplicatingCommand` removes a deduplication entry prior to its expiry. Entries should be removed when the commands are rejected.",
        "createdAt" : "2020-04-01T11:31:04Z",
        "updatedAt" : "2020-04-01T22:27:18Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "604acf2e7fa591e369cfa89cde1eabf73916b57c",
    "line" : null,
    "diffHunk" : "@@ -1693,6 +1702,22 @@ private class JdbcLedgerDao(\n       ()\n     }\n \n+  private val SQL_DELETE_COMMAND = SQL(\"\"\"\n+     |delete from participant_command_submissions\n+     |where deduplicate_key < {deduplicationKey}\n+    \"\"\".stripMargin)\n+\n+  override def stopDeduplicatingCommand(\n+      commandId: domain.CommandId,\n+      submitter: Party): Future[Unit] =\n+    dbDispatcher.executeSql(\"remove_expired_deduplication_data\") { implicit conn =>"
  },
  {
    "id" : "624282fc-8cc4-4832-8528-c89e53fe78d7",
    "prId" : 5181,
    "comments" : [
      {
        "id" : "bb26b0b1-b551-4655-9cf2-43907316159a",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "`conn` is implicit here.",
        "createdAt" : "2020-03-25T14:30:39Z",
        "updatedAt" : "2020-03-25T14:43:37Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d60e11c5-2a80-4776-b19b-c1ce204f9246",
        "parentId" : "bb26b0b1-b551-4655-9cf2-43907316159a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5181/commits/92cdffb0d36fc940def615f2e5f8bf9dbd0538c2",
        "createdAt" : "2020-03-25T14:44:03Z",
        "updatedAt" : "2020-03-25T14:44:03Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "de51a118c24adc46da99a09073bee4661f4203ba",
    "line" : null,
    "diffHunk" : "@@ -1470,7 +1465,7 @@ private class JdbcLedgerDao(\n                 \"template_parties\" -> byPartyAndTemplate(filter),\n                 \"wildcard_parties\" -> justByParty(filter),\n               )\n-              .as(ContractDataParser.*)(conn)\n+              .asVectorOf(ContractDataParser)(conn)"
  },
  {
    "id" : "1893a12f-8e5d-452f-9cc2-3041a104d6aa",
    "prId" : 5172,
    "comments" : [
      {
        "id" : "f7591c76-6645-41be-a97d-e8994c21c968",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Removing this means loading an already stored rejection will fall through to the catch all case and fail with a `sys.error`. I think we need to keep the `TimedOut` case.\r\n\r\nThe alternative is to write a simple migration that updates all rejection reasons from `TimedOut` to `InvalidLedgerTime`.",
        "createdAt" : "2020-03-25T09:27:48Z",
        "updatedAt" : "2020-03-25T14:06:52Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b71c1250aa1753ee4cc4181a639eb4e99b47e872",
    "line" : 4,
    "diffHunk" : "@@ -1071,7 +1071,6 @@ private class JdbcLedgerDao(\n     (rejectionReason.description, rejectionReason match {\n       case _: Inconsistent => \"Inconsistent\"\n       case _: OutOfQuota => \"OutOfQuota\"\n-      case _: TimedOut => \"TimedOut\""
  },
  {
    "id" : "ea9c2672-04af-4398-9bba-00c53be8a952",
    "prId" : 5129,
    "comments" : [
      {
        "id" : "b53fd49c-4ab6-4558-a964-898f131053c3",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "shouldn't this be taken care of by `truncate participant_events cascade;`?",
        "createdAt" : "2020-03-23T09:13:39Z",
        "updatedAt" : "2020-03-23T09:14:15Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6c3bbd3b-0155-4c8c-965b-f741d71fc1f8",
        "parentId" : "b53fd49c-4ab6-4558-a964-898f131053c3",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'd say yes, but I'd say I'll add a test right now to make sure that's the case (and to ensure we don't forget about this in the future).",
        "createdAt" : "2020-03-23T09:17:30Z",
        "updatedAt" : "2020-03-23T09:17:30Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "91ec4df51a96f7aaee4a99aefbc3285ecb6290e4",
    "line" : 4,
    "diffHunk" : "@@ -1724,6 +1724,8 @@ private class JdbcLedgerDao(\n         |truncate participant_command_completions cascade;\n         |truncate participant_command_submissions cascade;\n         |truncate participant_events cascade;\n+        |truncate participant_event_flat_transaction_witnesses cascade;"
  },
  {
    "id" : "1789ba96-37df-4394-a819-5026c4b256ad",
    "prId" : 5091,
    "comments" : [
      {
        "id" : "8ec04565-a8b9-4cca-8bc4-07071fb5f878",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I prefer the previous approach of keeping it explicit. It's not too elegant but it clarifies where we switch execution context.",
        "createdAt" : "2020-03-19T16:38:54Z",
        "updatedAt" : "2020-03-20T14:39:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fd94402e-c395-4764-b2c9-00267cc285c6",
        "parentId" : "8ec04565-a8b9-4cca-8bc4-07071fb5f878",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I agree with @stefanobaghino-da. Let's keep it explicit as much as possible.",
        "createdAt" : "2020-03-19T20:00:45Z",
        "updatedAt" : "2020-03-20T14:39:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0bd6ae70-c29c-45cc-96cb-5843da160f4a",
        "parentId" : "8ec04565-a8b9-4cca-8bc4-07071fb5f878",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Threw away the commit that makes things implicit.",
        "createdAt" : "2020-03-20T14:37:37Z",
        "updatedAt" : "2020-03-20T14:39:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3cf8839b6f6b186f8bec7348f27339747eb6a4e",
    "line" : null,
    "diffHunk" : "@@ -105,15 +106,18 @@ private final case class ParsedPackageData(\n private final case class ParsedCommandData(deduplicateUntil: Instant)\n \n private class JdbcLedgerDao(\n+    override val maxConnections: Int,\n     dbDispatcher: DbDispatcher,\n     contractSerializer: ContractSerializer,\n     transactionSerializer: TransactionSerializer,\n     keyHasher: KeyHasher,\n     dbType: DbType,\n-    executionContext: ExecutionContext,\n+    executor: Executor,\n )(implicit logCtx: LoggingContext)\n     extends LedgerDao {\n \n+  private implicit val ec: ExecutionContext = ExecutionContext.fromExecutor(executor)"
  },
  {
    "id" : "627eb685-118f-49da-91a8-bc0fa6682118",
    "prId" : 5091,
    "comments" : [
      {
        "id" : "f3c566d1-752a-4604-a1dd-e42e0f793a39",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I think it would be better to make this a `private def` at the top level, with a name so that it's clear where we're building this.",
        "createdAt" : "2020-03-19T16:44:53Z",
        "updatedAt" : "2020-03-20T14:39:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cb334feb-4dae-4acd-bc35-881343937efd",
        "parentId" : "f3c566d1-752a-4604-a1dd-e42e0f793a39",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done. Made it a `val` because thread factories are stateless.",
        "createdAt" : "2020-03-20T14:38:01Z",
        "updatedAt" : "2020-03-20T14:39:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3cf8839b6f6b186f8bec7348f27339747eb6a4e",
    "line" : null,
    "diffHunk" : "@@ -1753,43 +1761,61 @@ private class JdbcLedgerDao(\n \n object JdbcLedgerDao {\n \n-  val defaultNumberOfShortLivedConnections = 16\n+  private val DefaultNumberOfShortLivedConnections = 16\n+\n+  def readOwner(\n+      jdbcUrl: String,\n+      metrics: MetricRegistry,\n+  )(implicit logCtx: LoggingContext): ResourceOwner[LedgerReadDao] = {\n+    val maxConnections = DefaultNumberOfShortLivedConnections\n+    owner(jdbcUrl, maxConnections, metrics)\n+      .map(new MeteredLedgerReadDao(_, metrics))\n+  }\n \n-  def owner(\n+  def writeOwner(\n       jdbcUrl: String,\n       metrics: MetricRegistry,\n-      executionContext: ExecutionContext,\n   )(implicit logCtx: LoggingContext): ResourceOwner[LedgerDao] = {\n     val dbType = DbType.jdbcType(jdbcUrl)\n     val maxConnections =\n-      if (dbType.supportsParallelWrites) defaultNumberOfShortLivedConnections else 1\n-    for {\n-      dbDispatcher <- DbDispatcher.owner(jdbcUrl, maxConnections, metrics)\n-    } yield new MeteredLedgerDao(JdbcLedgerDao(dbDispatcher, dbType, executionContext), metrics)\n+      if (dbType.supportsParallelWrites) DefaultNumberOfShortLivedConnections else 1\n+    owner(jdbcUrl, maxConnections, metrics)\n+      .map(new MeteredLedgerDao(_, metrics))\n   }\n \n-  def apply(\n-      dbDispatcher: DbDispatcher,\n-      dbType: DbType,\n-      executionContext: ExecutionContext,\n-  )(implicit logCtx: LoggingContext): LedgerDao =\n-    new JdbcLedgerDao(\n-      dbDispatcher,\n-      ContractSerializer,\n-      TransactionSerializer,\n-      KeyHasher,\n-      dbType,\n-      executionContext,\n-    )\n+  private def owner(\n+      jdbcUrl: String,\n+      maxConnections: Int,\n+      metrics: MetricRegistry,\n+  )(implicit logCtx: LoggingContext): ResourceOwner[LedgerDao] =\n+    for {\n+      dbDispatcher <- DbDispatcher.owner(jdbcUrl, maxConnections, metrics)\n+      executor <- ResourceOwner.forExecutorService(\n+        () =>\n+          Executors.newCachedThreadPool(\n+            new ThreadFactoryBuilder().setNameFormat(\"dao-executor-%d\").build()))"
  },
  {
    "id" : "8036bc0e-9d4e-4372-9d47-be845fa68ca4",
    "prId" : 5029,
    "comments" : [
      {
        "id" : "33cbcbd3-b19f-4fdc-87d8-350a5bc01e5e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we have a more meaningful error here?",
        "createdAt" : "2020-03-16T17:24:25Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9e7b3d71-e4cf-41af-aaa6-8fbf94f9fb53",
        "parentId" : "33cbcbd3-b19f-4fdc-87d8-350a5bc01e5e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "That's actually a leftover from debugging, I'll remove it, thanks.",
        "createdAt" : "2020-03-16T17:26:52Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c57029a-9ade-4468-b350-9447e3ccc8e7",
        "parentId" : "33cbcbd3-b19f-4fdc-87d8-350a5bc01e5e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5029/commits/e2b82530893ccb82d932fdcc5198ac0ccd829928",
        "createdAt" : "2020-03-16T17:40:28Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "580296f46e11bdbf48ffee6d6071962630781dae",
    "line" : null,
    "diffHunk" : "@@ -952,6 +954,24 @@ private class JdbcLedgerDao(\n           Try {\n             storeTransaction(offset, tx, txBytes)\n \n+            tx.transaction.roots.iterator\n+              .map(nid => split(nid).fold(sys.error(s\"########## can't split $nid\"))(_.nodeId))"
  },
  {
    "id" : "5b64e4ec-1e5e-4228-86f5-0555e05d6129",
    "prId" : 5029,
    "comments" : [
      {
        "id" : "814a24a1-79ba-40ef-b323-fa1b8b265b96",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we make an issue for this rather than leaving long-lived comments in the code?",
        "createdAt" : "2020-03-16T17:42:31Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ceef28d9-7f0f-427d-bc73-dae1e8501687",
        "parentId" : "814a24a1-79ba-40ef-b323-fa1b8b265b96",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sure, make sense, thanks.",
        "createdAt" : "2020-03-17T07:31:37Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e9ead99-30a9-44f8-9637-e1884ea91bd3",
        "parentId" : "814a24a1-79ba-40ef-b323-fa1b8b265b96",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5029/commits/69c89d1cd151749414508f0e893d3f606beda166 and #5035.",
        "createdAt" : "2020-03-17T07:57:07Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dc171f26-008a-4dac-8a67-3017dfa6b21e",
        "parentId" : "814a24a1-79ba-40ef-b323-fa1b8b265b96",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2020-03-17T08:10:36Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "580296f46e11bdbf48ffee6d6071962630781dae",
    "line" : null,
    "diffHunk" : "@@ -946,12 +948,29 @@ private class JdbcLedgerDao(\n \n     val txBytes = serializeTransaction(ledgerEntry.entry)\n \n+    def splitOrThrow(id: EventId): NodeId =\n+      split(id).fold(sys.error(s\"Illegal format for event identifier $id\"))(_.nodeId)\n+\n     def insertEntry(le: PersistenceEntry)(implicit conn: Connection): PersistenceResponse =\n       le match {\n         case PersistenceEntry.Transaction(tx, globalDivulgence, divulgedContracts) =>\n           Try {\n             storeTransaction(offset, tx, txBytes)\n \n+            // TODO Run this directly from the indexer once we no longer\n+            // TODO need to validate transactions on the index"
  },
  {
    "id" : "350ee1aa-5295-4887-9209-874d0678cd95",
    "prId" : 5029,
    "comments" : [
      {
        "id" : "f777e5b6-21d3-4fc5-bd76-edf70d384bfc",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we have a test in `JdbcLedgerDaoSpec` to show how this is used?",
        "createdAt" : "2020-03-16T17:43:35Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ea884c19-201e-4b17-a85c-dd831fa66fbd",
        "parentId" : "f777e5b6-21d3-4fc5-bd76-edf70d384bfc",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I agree that we need to test this, but the problem is that there's no read API for this yet and I wanted to keep PR size at the absolute minimum. I was thinking of adding tests to the `JdbcLedgerDao` in a follow up PR. Do you have suggestions?",
        "createdAt" : "2020-03-17T07:31:28Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "243aefcd-165a-45e8-90bc-7864bd3e844c",
        "parentId" : "f777e5b6-21d3-4fc5-bd76-edf70d384bfc",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Nah, sounds good.",
        "createdAt" : "2020-03-17T08:10:47Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "580296f46e11bdbf48ffee6d6071962630781dae",
    "line" : null,
    "diffHunk" : "@@ -1707,6 +1726,9 @@ private class JdbcLedgerDao(\n       ()\n     }\n \n+  override val transactions: TransactionWriter[LedgerOffset] =\n+    TransactionWriter.apply(dbDispatcher)"
  },
  {
    "id" : "2fdfbc2b-dd4f-4bdf-8e41-99e75331953a",
    "prId" : 5029,
    "comments" : [
      {
        "id" : "b226a140-b118-4a00-a21d-707b47cf0c92",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What do you mean with `validate transactions`?",
        "createdAt" : "2020-03-17T07:42:36Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ada9313d-1147-4b5e-8f97-f951f7b7f487",
        "parentId" : "b226a140-b118-4a00-a21d-707b47cf0c92",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Doing what the `ActiveLedgerState` does. Not relevant anymore, addressed by https://github.com/digital-asset/daml/pull/5029/commits/69c89d1cd151749414508f0e893d3f606beda166 and #5035 in response to https://github.com/digital-asset/daml/pull/5029#discussion_r393201832.",
        "createdAt" : "2020-03-17T07:57:35Z",
        "updatedAt" : "2020-03-17T08:13:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "580296f46e11bdbf48ffee6d6071962630781dae",
    "line" : null,
    "diffHunk" : "@@ -946,12 +948,29 @@ private class JdbcLedgerDao(\n \n     val txBytes = serializeTransaction(ledgerEntry.entry)\n \n+    def splitOrThrow(id: EventId): NodeId =\n+      split(id).fold(sys.error(s\"Illegal format for event identifier $id\"))(_.nodeId)\n+\n     def insertEntry(le: PersistenceEntry)(implicit conn: Connection): PersistenceResponse =\n       le match {\n         case PersistenceEntry.Transaction(tx, globalDivulgence, divulgedContracts) =>\n           Try {\n             storeTransaction(offset, tx, txBytes)\n \n+            // TODO Run this directly from the indexer once we no longer\n+            // TODO need to validate transactions on the index"
  },
  {
    "id" : "f3e9223a-d380-44dc-b9d9-76f53ad64648",
    "prId" : 4953,
    "comments" : [
      {
        "id" : "a3d13e15-777a-4083-9e8a-77f73ab191bf",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n    val txId = ledgerEntry.entry match {\r\n      case x: LedgerEntry.Transaction => Some(x.transactionId)\r\n      case _ => None\r\n    }\r\n```\r\nI realized afterwards that the meaning is the same, but maybe the alternative is a bit more straightforward for the reader. Feel free to discard.",
        "createdAt" : "2020-03-17T14:57:51Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "79d232cc-699c-4f6f-8b37-65c4294d0949",
        "parentId" : "a3d13e15-777a-4083-9e8a-77f73ab191bf",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I definitely find the suggested code easier to read.",
        "createdAt" : "2020-03-17T16:38:53Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9dad9a99-291c-4cf2-ab32-dfefbae91fb4",
        "parentId" : "a3d13e15-777a-4083-9e8a-77f73ab191bf",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "that's actually an artefact from me trying to debug something. `txId` is not used anywhere. thanks for bringing it to my attention. I'll delete it.",
        "createdAt" : "2020-03-17T16:39:49Z",
        "updatedAt" : "2020-03-17T19:46:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9c3ccf491dcebc26c083911d9714d2fa5d032f",
    "line" : null,
    "diffHunk" : "@@ -1015,19 +1003,22 @@ private class JdbcLedgerDao(\n           Ok\n       }\n \n+    val txId = Some(ledgerEntry.entry) collect {\n+      case x: LedgerEntry.Transaction => x.transactionId\n+    }"
  },
  {
    "id" : "662b0fb9-9952-430d-9939-18c4239f71a9",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "5f2c6d28-e86a-411f-ad97-d181529e52ab",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "`view` doesn't really buy us anything. For the non-empty check in `orEmptyStringList` it needs to be constructed fully anyway.",
        "createdAt" : "2020-03-02T08:40:44Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "481d3d61-60c1-404e-ba5e-8b277b4c0d17",
        "parentId" : "5f2c6d28-e86a-411f-ad97-d181529e52ab",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yes, thanks.",
        "createdAt" : "2020-03-02T10:52:00Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a47afef1-110f-46a8-b9bc-7d2ddbf92a60",
        "parentId" : "5f2c6d28-e86a-411f-ad97-d181529e52ab",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4763/commits/084f83f6a7e9794c09cd508e4c4c0898039e0bea",
        "createdAt" : "2020-03-02T12:40:59Z",
        "updatedAt" : "2020-03-02T12:40:59Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : null,
    "diffHunk" : "@@ -1393,11 +1399,28 @@ private class JdbcLedgerDao(\n   // this query pre-filters the active contracts. this avoids loading data that anyway will be dismissed later\n   private val SQL_SELECT_ACTIVE_CONTRACTS = SQL(queries.SQL_SELECT_ACTIVE_CONTRACTS)\n \n+  private def orEmptyStringList(xs: Iterable[String]): List[String] =\n+    if (xs.nonEmpty) xs.toList else List(\"\")\n+\n+  private def justByParty(txf: TransactionFilter): List[String] =\n+    orEmptyStringList(txf.filtersByParty.view.collect {"
  },
  {
    "id" : "7c2776e1-eba6-4626-a480-213930378729",
    "prId" : 4763,
    "comments" : [
      {
        "id" : "a83da9b8-57f5-444a-97dd-3523c96abbcc",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Same comment about `view` as above.",
        "createdAt" : "2020-03-02T08:40:55Z",
        "updatedAt" : "2020-03-02T12:38:29Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d58da372-37ae-4ef0-8216-a6927a5878f9",
        "parentId" : "a83da9b8-57f5-444a-97dd-3523c96abbcc",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4763/commits/084f83f6a7e9794c09cd508e4c4c0898039e0bea",
        "createdAt" : "2020-03-02T12:41:04Z",
        "updatedAt" : "2020-03-02T12:41:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "084f83f6a7e9794c09cd508e4c4c0898039e0bea",
    "line" : null,
    "diffHunk" : "@@ -1393,11 +1399,28 @@ private class JdbcLedgerDao(\n   // this query pre-filters the active contracts. this avoids loading data that anyway will be dismissed later\n   private val SQL_SELECT_ACTIVE_CONTRACTS = SQL(queries.SQL_SELECT_ACTIVE_CONTRACTS)\n \n+  private def orEmptyStringList(xs: Iterable[String]): List[String] =\n+    if (xs.nonEmpty) xs.toList else List(\"\")\n+\n+  private def justByParty(txf: TransactionFilter): List[String] =\n+    orEmptyStringList(txf.filtersByParty.view.collect {\n+      case (party, Filters(None)) => party\n+    })\n+\n+  // using '&' as a \"separator\" for the two columns because it is not allowed in either Party or Identifier strings\n+  // and querying on tuples is basically impossible to do sensibly.\n+  private def byPartyAndTemplate(txf: TransactionFilter): List[String] =\n+    orEmptyStringList(\n+      txf.filtersByParty.view"
  },
  {
    "id" : "b8d6c9b4-7863-4e8b-b0cf-e09946f17786",
    "prId" : 4681,
    "comments" : [
      {
        "id" : "2c919158-8bff-4cdb-acc8-aad0b8ebd4b6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Everything else cascades; why not this one?",
        "createdAt" : "2020-02-25T08:08:48Z",
        "updatedAt" : "2020-02-25T14:40:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d2d82edc-56cc-4141-8837-2b436f0fa197",
        "parentId" : "2c919158-8bff-4cdb-acc8-aad0b8ebd4b6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Because I like dangling indexes. :smile: Good catch, thanks, I'll fix this.",
        "createdAt" : "2020-02-25T08:30:20Z",
        "updatedAt" : "2020-02-25T14:40:00Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d4d97a97-4dd6-407c-9691-f5c93e1fabe0",
        "parentId" : "2c919158-8bff-4cdb-acc8-aad0b8ebd4b6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4681/commits/92dc224b1c0325df0b56d7b8c3579c79268d8cf3.",
        "createdAt" : "2020-02-25T08:33:03Z",
        "updatedAt" : "2020-02-25T14:40:00Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "877ea5fa91f11308feaa2e732233aa13ed38dd18",
    "line" : null,
    "diffHunk" : "@@ -1640,6 +1640,7 @@ private class JdbcLedgerDao(\n         |truncate contract_keys cascade;\n         |truncate configuration_entries cascade;\n         |truncate package_entries cascade;\n+        |truncate participant_command_completions;"
  },
  {
    "id" : "3d906b6f-6a6a-4522-8ae5-9acbfa0bf841",
    "prId" : 4657,
    "comments" : [
      {
        "id" : "f7f968df-745b-4e12-b7ea-5d5d4fdd48d8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Looks like this `executionContext` comes from `actorSystem.dispatcher`, which comes from the `StandaloneIndexer`'s actor system. Just wanted to make sure we're OK with this.",
        "createdAt" : "2020-02-22T07:44:36Z",
        "updatedAt" : "2020-02-22T07:46:23Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "50f431e9-b7b9-485a-a898-b01ad7b39d0a",
        "parentId" : "f7f968df-745b-4e12-b7ea-5d5d4fdd48d8",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I agree we should change this, but in the context of this object (as it is right now) the `executionContext` is where `Future`s should be ran. I'll probably have a go at this as part of my participant redesign story.\r\n\r\nThanks for pointing this out though, as mentioned I agree that we could do a better job at organizing our thread pools.",
        "createdAt" : "2020-02-24T08:46:53Z",
        "updatedAt" : "2020-02-24T08:46:53Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c1109b06acedc19d1d3792f5963e9b00bb3eb2b4",
    "line" : 24,
    "diffHunk" : "@@ -1432,14 +1432,19 @@ private class JdbcLedgerDao(\n     )\n \n   override def getParties: Future[List[PartyDetails]] =\n-    dbDispatcher.executeSql(\"load_parties\") { implicit conn =>\n-      SQL_SELECT_PARTIES\n-        .as(PartyDataParser.*)\n-        // TODO: isLocal should be based on equality of participantId reported in an\n-        // update and the id given to participant in a command-line argument\n-        // (See issue #2026)\n-        .map(d => PartyDetails(Party.assertFromString(d.party), d.displayName, isLocal = true))\n-    }\n+    dbDispatcher\n+      .executeSql(\"load_parties\") { implicit conn =>\n+        SQL_SELECT_PARTIES\n+          .as(PartyDataParser.*)\n+      }\n+      .map(\n+        _.map(\n+          d =>\n+            // TODO: isLocal should be based on equality of participantId reported in an\n+            // update and the id given to participant in a command-line argument\n+            // (See issue #2026)\n+            PartyDetails(Party.assertFromString(d.party), d.displayName, isLocal = true)))(\n+        executionContext)"
  },
  {
    "id" : "f91716b8-899e-4022-a14b-1597a0dd9d60",
    "prId" : 4545,
    "comments" : [
      {
        "id" : "aae5126a-ec17-4c27-8ae1-8cd403e461dc",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Maybe keep the newline before the closing quotes?",
        "createdAt" : "2020-02-17T14:04:41Z",
        "updatedAt" : "2020-02-17T16:48:05Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d58b9c9a-2361-45ef-b191-66d78cd1b5c8",
        "parentId" : "aae5126a-ec17-4c27-8ae1-8cd403e461dc",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4545/commits/890ac2f1fe52e97f66cc6cbf5939b804706c9ab6",
        "createdAt" : "2020-02-17T16:48:19Z",
        "updatedAt" : "2020-02-17T16:48:19Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "890ac2f1fe52e97f66cc6cbf5939b804706c9ab6",
    "line" : null,
    "diffHunk" : "@@ -1170,7 +1170,15 @@ private class JdbcLedgerDao(\n     ~ str(\"observers\").? map flatten)\n \n   private val SQL_SELECT_CONTRACT =\n-    SQL(queries.SQL_SELECT_CONTRACT)\n+    SQL(\"\"\"select cd.contract\n+        |from contract_data cd\n+        |left join contracts c on cd.id=c.id\n+        |left join contract_witnesses cowi on cowi.contract_id = c.id and witness = {party}\n+        |left join contract_divulgences codi on codi.contract_id = cd.id and party = {party}\n+        |where\n+        |  cd.id={contract_id} and\n+        |  c.archive_offset is null and\n+        |  (cowi.witness is not null or codi.party is not null)\"\"\".stripMargin)"
  },
  {
    "id" : "bd361011-4005-4df8-b0b2-f9713e1173a3",
    "prId" : 4543,
    "comments" : [
      {
        "id" : "8f41a95b-8fa3-4a91-920f-1d968e82651f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I guess without the string aggregation the query could even be moved out of the database specific traits?",
        "createdAt" : "2020-02-17T12:17:55Z",
        "updatedAt" : "2020-02-17T12:18:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "85e0520c-8f22-4c32-aeb6-1c9c2159fd07",
        "parentId" : "8f41a95b-8fa3-4a91-920f-1d968e82651f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "For sure, I just wanted to solve one issue at a time and keep the PR as simple as possible.",
        "createdAt" : "2020-02-17T12:22:11Z",
        "updatedAt" : "2020-02-17T12:22:11Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2ed0362-3416-4079-bfca-e36a46ea0e5a",
        "parentId" : "8f41a95b-8fa3-4a91-920f-1d968e82651f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Tracked by https://github.com/digital-asset/daml/issues/4544",
        "createdAt" : "2020-02-17T12:23:53Z",
        "updatedAt" : "2020-02-17T12:23:53Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1424492e-5277-4ae8-89b4-698041d4e77b",
        "parentId" : "8f41a95b-8fa3-4a91-920f-1d968e82651f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4545",
        "createdAt" : "2020-02-17T12:58:30Z",
        "updatedAt" : "2020-02-17T12:58:30Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "535444751d1cc0b9d8329e518ce4eb226309876c",
    "line" : 56,
    "diffHunk" : "@@ -1728,32 +1728,18 @@ object JdbcLedgerDao {\n \n     override protected[JdbcLedgerDao] val SQL_SELECT_CONTRACT: String =\n       s\"\"\"\n-         |select\n-         |  cd.id,\n-         |  cd.contract,\n-         |  c.transaction_id,\n-         |  c.create_event_id,\n-         |  c.workflow_id,\n-         |  c.key,\n-         |  le.effective_at,\n-         |  string_agg(distinct sigs.signatory, '$PARTY_SEPARATOR') as signatories,\n-         |  string_agg(distinct obs.observer, '$PARTY_SEPARATOR') as observers\n+         |select cd.contract"
  },
  {
    "id" : "892d6875-e214-4ed1-a981-e60eadfa8132",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "6cef1632-89f5-4598-aeae-b2b754186c6f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      |from participant_commands\r\n```",
        "createdAt" : "2020-02-11T08:25:44Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "928c4549-0dea-468e-9910-df9fd98d4fbb",
        "parentId" : "6cef1632-89f5-4598-aeae-b2b754186c6f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "As part of the schema redesign I'm introducing the `participant_completions` table. Would it make sense to rather call this `participant_submissions`?",
        "createdAt" : "2020-02-11T09:44:47Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1335e889-e364-4d6a-ae85-99af6de0fb52",
        "parentId" : "6cef1632-89f5-4598-aeae-b2b754186c6f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Think about it, it would probably it would make sense to prepend `command` to both to not mix them up with other submission/completion tracking tables (for parties, packages, etc.)\r\n\r\n`participant_command_submissions` and `participant_command_completions`?",
        "createdAt" : "2020-02-11T09:46:51Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e14aab7-acbb-4011-aa5d-36858c23ff56",
        "parentId" : "6cef1632-89f5-4598-aeae-b2b754186c6f",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Table renamed to `participant_command_submissions`",
        "createdAt" : "2020-02-12T00:05:02Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : null,
    "diffHunk" : "@@ -1610,6 +1611,92 @@ private class JdbcLedgerDao(\n     }\n   }\n \n+  private val SQL_SELECT_COMMAND = SQL(\n+    \"\"\"\n+      |select submittedAt, ttl, success, error,\n+      |from participant_command"
  },
  {
    "id" : "4c557539-b824-4f8c-8a8e-259d57eb2988",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "5ad4c458-ba39-41a5-b8d1-28f28b32e882",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      |insert into participant_commands(deduplication_key, submittedAt, ttl)\r\n```",
        "createdAt" : "2020-02-11T08:26:07Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : null,
    "diffHunk" : "@@ -1610,6 +1611,92 @@ private class JdbcLedgerDao(\n     }\n   }\n \n+  private val SQL_SELECT_COMMAND = SQL(\n+    \"\"\"\n+      |select submittedAt, ttl, success, error,\n+      |from participant_command\n+      |where deduplication_key = {deduplication_key} and {submittedAt} < ttl\n+    \"\"\".stripMargin)\n+\n+  private val SQL_INSERT_COMMAND = SQL(\n+    \"\"\"\n+      |insert into participant_command(deduplication_key, submittedAt, ttl)"
  },
  {
    "id" : "0a42072c-9558-4e39-ac7c-7f048cd31e42",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "855bc20c-98ca-4185-bc1a-ef27b1eaf1d7",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      |update participant_commands\r\n```",
        "createdAt" : "2020-02-11T08:27:04Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : null,
    "diffHunk" : "@@ -1610,6 +1611,92 @@ private class JdbcLedgerDao(\n     }\n   }\n \n+  private val SQL_SELECT_COMMAND = SQL(\n+    \"\"\"\n+      |select submittedAt, ttl, success, error,\n+      |from participant_command\n+      |where deduplication_key = {deduplication_key} and {submittedAt} < ttl\n+    \"\"\".stripMargin)\n+\n+  private val SQL_INSERT_COMMAND = SQL(\n+    \"\"\"\n+      |insert into participant_command(deduplication_key, submittedAt, ttl)\n+      |values ({deduplication_key}, {submittedAt}, {ttl})\n+    \"\"\".stripMargin)\n+\n+  case class ParsedCommandData(\n+      submittedAt: Instant,\n+      ttl: Instant,\n+      success: Option[Boolean],\n+      error: Option[String])\n+\n+  private val CommandDataParser: RowParser[ParsedCommandData] =\n+    Macro.parser[ParsedCommandData](\n+      \"submittedAt\",\n+      \"ttl\",\n+      \"success\",\n+      \"error\"\n+    )\n+\n+  override def deduplicateCommand(\n+      deduplicationKey: String,\n+      submittedAt: Instant,\n+      ttl: Instant): Future[Option[CommandDeduplicationEntry]] =\n+    dbDispatcher.executeSql(\"deduplicate_command\") { implicit conn =>\n+      conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE)\n+      val entry = SQL_SELECT_COMMAND\n+        .on(\"deduplicationKey\" -> deduplicationKey, \"submittedAt\" -> submittedAt)\n+        .as(CommandDataParser.singleOpt)\n+\n+      entry.fold[Option[CommandDeduplicationEntry]] {\n+        SQL_INSERT_COMMAND\n+          .on(\"deduplicationKey\" -> deduplicationKey, \"submittedAt\" -> submittedAt, \"ttl\" -> ttl)\n+          .execute()\n+        None\n+      } {\n+        case ParsedCommandData(originalSubmittedAt, originalTtl, None, None) =>\n+          Some(CommandDeduplicationEntry(deduplicationKey, originalSubmittedAt, originalTtl, None))\n+        case ParsedCommandData(originalSubmittedAt, originalTtl, Some(true), None) =>\n+          Some(\n+            CommandDeduplicationEntry(\n+              deduplicationKey,\n+              originalSubmittedAt,\n+              originalTtl,\n+              Some(Right(()))))\n+        case ParsedCommandData(originalSubmittedAt, originalTtl, Some(false), Some(error)) =>\n+          Some(\n+            CommandDeduplicationEntry(\n+              deduplicationKey,\n+              originalSubmittedAt,\n+              originalTtl,\n+              Some(Left(error))))\n+        case data => sys.error(\"Invalid command deduplication row {data}\")\n+      }\n+    }\n+\n+  private val SQL_UPDATE_COMMAND = SQL(\n+    \"\"\"\n+      |update participant_command"
  },
  {
    "id" : "07a7f08f-9234-42f1-9d86-b62f6d575b2a",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "773c7777-0cf1-404a-a28f-5be62a5cfcb6",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n    dbDispatcher.executeSql(\"update_command_result\") { implicit conn =>\r\n```\r\nNot sure about the name, but it's probably better to not have two queries share the same key for metrics registering purposes.",
        "createdAt" : "2020-02-12T09:45:09Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : null,
    "diffHunk" : "@@ -1610,6 +1611,115 @@ private class JdbcLedgerDao(\n     }\n   }\n \n+  private val SQL_REMOVE_OLD_COMMAND = SQL(\n+    \"\"\"\n+      |delete from participant_command_submissions\n+      |where deduplication_key = {deduplicationKey} and {submittedAt} < ttl\n+    \"\"\".stripMargin)\n+\n+  private val SQL_SELECT_COMMAND = SQL(\n+    \"\"\"\n+      |select submitted_at, ttl, success, error\n+      |from participant_command_submissions\n+      |where deduplication_key = {deduplicationKey} and {submittedAt} < ttl\n+    \"\"\".stripMargin)\n+\n+  private val SQL_INSERT_COMMAND = SQL(\n+    \"\"\"\n+      |insert into participant_command_submissions(deduplication_key, submitted_at, ttl)\n+      |values ({deduplicationKey}, {submittedAt}, {ttl})\n+    \"\"\".stripMargin)\n+\n+  case class ParsedCommandData(\n+      submittedAt: Instant,\n+      ttl: Instant,\n+      success: Option[Boolean],\n+      error: Option[String])\n+\n+  private val CommandDataParser: RowParser[ParsedCommandData] =\n+    Macro.parser[ParsedCommandData](\n+      \"submitted_at\",\n+      \"ttl\",\n+      \"success\",\n+      \"error\"\n+    )\n+\n+  override def deduplicateCommand(\n+      deduplicationKey: String,\n+      submittedAt: Instant,\n+      ttl: Instant): Future[Option[CommandDeduplicationEntry]] =\n+    dbDispatcher.executeSql(\"deduplicate_command\") { implicit conn =>\n+      // Remove expired deduplication rows\n+      SQL_REMOVE_OLD_COMMAND\n+        .on(\"deduplicationKey\" -> deduplicationKey, \"submittedAt\" -> submittedAt)\n+        .execute()\n+\n+      // Try to insert a new deduplication row.\n+      // If the row already exists and the insert fails, select the existing row.\n+      Try(\n+        SQL_INSERT_COMMAND\n+          .on(\"deduplicationKey\" -> deduplicationKey, \"submittedAt\" -> submittedAt, \"ttl\" -> ttl)\n+          .execute()\n+      ).fold(\n+        _ =>\n+          Try(\n+            SQL_SELECT_COMMAND\n+              .on(\"deduplicationKey\" -> deduplicationKey, \"submittedAt\" -> submittedAt)\n+              .as(CommandDataParser.single)\n+          ).fold(\n+            error => sys.error(s\"Could not find deduplication data: $error\"), {\n+              case ParsedCommandData(originalSubmittedAt, originalTtl, None, None) =>\n+                Some(\n+                  CommandDeduplicationEntry(\n+                    deduplicationKey,\n+                    originalSubmittedAt,\n+                    originalTtl,\n+                    None))\n+              case ParsedCommandData(originalSubmittedAt, originalTtl, Some(true), None) =>\n+                Some(\n+                  CommandDeduplicationEntry(\n+                    deduplicationKey,\n+                    originalSubmittedAt,\n+                    originalTtl,\n+                    Some(Right(()))))\n+              case ParsedCommandData(originalSubmittedAt, originalTtl, Some(false), Some(error)) =>\n+                Some(\n+                  CommandDeduplicationEntry(\n+                    deduplicationKey,\n+                    originalSubmittedAt,\n+                    originalTtl,\n+                    Some(Left(error))))\n+              case data =>\n+                sys.error(s\"Invalid command deduplication row $data\")\n+            }\n+        ),\n+        _ => None\n+      )\n+    }\n+\n+  private val SQL_UPDATE_COMMAND = SQL(\n+    \"\"\"\n+      |update participant_command_submissions\n+      |set success={success}, error={error}\n+      |where deduplication_key={deduplicationKey} and submitted_at={submittedAt}\n+    \"\"\".stripMargin)\n+\n+  override def updateCommandResult(\n+      deduplicationKey: String,\n+      submittedAt: Instant,\n+      result: Either[String, Unit]): Future[Unit] =\n+    dbDispatcher.executeSql(\"deduplicate_command\") { implicit conn =>"
  },
  {
    "id" : "ca6b74d7-c09e-4a01-bf91-db9480360173",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "be6f289f-ccfa-4573-9cbe-885d52ec4f42",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: this could be `private` and `final`.",
        "createdAt" : "2020-02-20T09:43:37Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e19835e5-8baf-41d6-8b14-a0e396647f09",
        "parentId" : "be6f289f-ccfa-4573-9cbe-885d52ec4f42",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Adding private final to all similar case classes in this file.",
        "createdAt" : "2020-02-20T16:48:32Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : null,
    "diffHunk" : "@@ -1620,6 +1621,92 @@ private class JdbcLedgerDao(\n     }\n   }\n \n+  private val SQL_SELECT_COMMAND = SQL(\"\"\"\n+      |select submitted_at, ttl, success, error\n+      |from participant_command_submissions\n+      |where deduplication_key = {deduplicationKey}\n+    \"\"\".stripMargin)\n+\n+  case class ParsedCommandData("
  },
  {
    "id" : "1119d35e-6da5-4573-be0d-215e8724c2dd",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "62056f01-5776-4238-a191-f66327019c06",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Very nice, thanks. :slightly_smiling_face: ",
        "createdAt" : "2020-02-20T09:43:59Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : 114,
    "diffHunk" : "@@ -1620,6 +1621,92 @@ private class JdbcLedgerDao(\n     }\n   }\n \n+  private val SQL_SELECT_COMMAND = SQL(\"\"\"\n+      |select submitted_at, ttl, success, error\n+      |from participant_command_submissions\n+      |where deduplication_key = {deduplicationKey}\n+    \"\"\".stripMargin)\n+\n+  case class ParsedCommandData(\n+      submittedAt: Instant,\n+      ttl: Instant,\n+      success: Option[Boolean],\n+      error: Option[String])\n+\n+  private val CommandDataParser: RowParser[ParsedCommandData] =\n+    Macro.parser[ParsedCommandData]("
  },
  {
    "id" : "8eae699e-d270-4ccd-8ed6-a84e4a791b86",
    "prId" : 4442,
    "comments" : [
      {
        "id" : "e4e8f6e2-e6f0-499a-b99e-b95ca510abe2",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This column is not in the select clause of the query. I don't think we need to handle the archive offset outside the query.",
        "createdAt" : "2020-02-07T10:28:29Z",
        "updatedAt" : "2020-02-07T12:16:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7869352b-9403-493b-9246-b166c3c7a834",
        "parentId" : "e4e8f6e2-e6f0-499a-b99e-b95ca510abe2",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Ah yes we don't. Left-over from an earlier iteration.. thanks for catching!",
        "createdAt" : "2020-02-07T10:34:31Z",
        "updatedAt" : "2020-02-07T12:16:28Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dff6cd1e9ff35353328a96a7b5cc38739a20fe70",
    "line" : null,
    "diffHunk" : "@@ -1220,17 +1220,22 @@ private class JdbcLedgerDao(\n     ~ str(\"observers\").? map flatten)\n \n   private val ContractLetParser = (ledgerString(\"id\")\n-    ~ date(\"effective_at\").? map flatten)\n+    ~ date(\"effective_at\").?\n+    ~ long(\"archive_offset\").? map flatten)"
  },
  {
    "id" : "4d9bb004-ebbe-4372-ba4f-01c8b693bbc2",
    "prId" : 4442,
    "comments" : [
      {
        "id" : "be3124dd-38db-4ffe-b6b4-6adf361174b5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This could be `cd.id={contract_id} and (le.effective_at is null || c.archive_offset is null)`.\r\n",
        "createdAt" : "2020-02-07T10:29:36Z",
        "updatedAt" : "2020-02-07T12:16:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b9025e0c-c07e-4ce0-87c2-8775bae0b883",
        "parentId" : "be3124dd-38db-4ffe-b6b4-6adf361174b5",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-02-07T10:34:47Z",
        "updatedAt" : "2020-02-07T12:16:28Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dff6cd1e9ff35353328a96a7b5cc38739a20fe70",
    "line" : null,
    "diffHunk" : "@@ -1220,17 +1220,22 @@ private class JdbcLedgerDao(\n     ~ str(\"observers\").? map flatten)\n \n   private val ContractLetParser = (ledgerString(\"id\")\n-    ~ date(\"effective_at\").? map flatten)\n+    ~ date(\"effective_at\").?\n+    ~ long(\"archive_offset\").? map flatten)\n \n   private val SQL_SELECT_CONTRACT =\n     SQL(queries.SQL_SELECT_CONTRACT)\n \n   private val SQL_SELECT_CONTRACT_LET =\n     SQL(\"\"\"\n-        |select c.id, le.effective_at\n-        |from contracts c\n+        |select cd.id, le.effective_at\n+        |from contract_data cd\n+        |left join contracts c on c.id=cd.id\n         |left join ledger_entries le on c.transaction_id = le.transaction_id\n-        |where c.id={contract_id} and c.archive_offset is null\"\"\".stripMargin)\n+        |where\n+        |  cd.id={contract_id} and\n+        |  ((le.effective_at is not null and c.archive_offset is null) or le.effective_at is null)"
  },
  {
    "id" : "ef77a063-5af3-4da8-9245-5f6a1f16ef36",
    "prId" : 4442,
    "comments" : [
      {
        "id" : "24f4a671-f0a6-408c-a6b3-7ded13224ce5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "What is the difference from what was there before?",
        "createdAt" : "2020-02-07T11:59:28Z",
        "updatedAt" : "2020-02-07T12:16:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eef21f83-a816-4d61-be25-8d36c3a293a8",
        "parentId" : "24f4a671-f0a6-408c-a6b3-7ded13224ce5",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "As a further note, we can probably drop the contract identifier from the query projection since we never use it.",
        "createdAt" : "2020-02-07T12:00:01Z",
        "updatedAt" : "2020-02-07T12:16:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8d64b332-46c8-4d5a-9b00-85b4eb61cdf3",
        "parentId" : "24f4a671-f0a6-408c-a6b3-7ded13224ce5",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "No difference anymore after iterating on it. Will return the original.\r\nWill drop contract identifier from projection.",
        "createdAt" : "2020-02-07T12:13:59Z",
        "updatedAt" : "2020-02-07T12:16:28Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dff6cd1e9ff35353328a96a7b5cc38739a20fe70",
    "line" : null,
    "diffHunk" : "@@ -1261,9 +1265,9 @@ private class JdbcLedgerDao(\n     SQL_SELECT_CONTRACT_LET\n       .on(\"contract_id\" -> contractId.coid)\n       .as(ContractLetParser.singleOpt)\n-      .map {\n-        case (_, None) => LetUnknown\n-        case (_, Some(let)) => Let(let.toInstant)\n+      .flatMap {"
  }
]