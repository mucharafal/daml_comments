[
  {
    "id" : "de1f8ac2-f84a-45d4-880d-16bf4ed27975",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "360715c9-0600-444d-aa30-c6e099227012",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think that when this function is called, there should _always_ be a value here, so crashing would be appropriate. If we haven't initialized the ledger, the code should be calling `lookupInitialLedgerEnd` instead.\r\n\r\nWhat happens if you revert this? What breaks?",
        "createdAt" : "2020-05-26T10:59:00Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "597513b1-50dd-4a60-a6f8-ebdbbc89b88a",
        "parentId" : "360715c9-0600-444d-aa30-c6e099227012",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "~Yes, that's correct, @SamirTalwar-DA.~\r\nThat's only correct, if we initialize the index DB with the \"fake\" offset. But since this PR avoids doing that, we need to return `Offset.begin`.",
        "createdAt" : "2020-05-26T11:08:24Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cde6c2e9-292e-4e38-8b27-1eca8e93c2a6",
        "parentId" : "360715c9-0600-444d-aa30-c6e099227012",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "The previous behaviour was:\r\n1. If called prior to ledger initialisation - _crash_\r\n2. If called post initialisation but pre first ledger end update - _default to Offset.begin_\r\n3. If called post first ledger end update - _return most recently updated ledger_end_\r\n\r\nThis change means that the default provided in #2 above comes from the method as opposed to from the database column.\r\n\r\nAs many things could be happening asynchronously during startup I think it is safest to leave the default, or leave it someone more expert in the area to remove it ;-)",
        "createdAt" : "2020-05-26T11:13:53Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +117,121 @@    dbDispatcher.executeSql(metrics.daml.index.db.getLedgerEnd) { implicit conn =>\n      SQL_SELECT_LEDGER_END\n        .as(offset(\"ledger_end\").?.map(_.getOrElse(Offset.begin)).single)\n    }\n"
  },
  {
    "id" : "1b97528b-bcb9-42a8-8d12-6b86eeeab29b",
    "prId" : 6103,
    "comments" : [
      {
        "id" : "2c74f5ef-41c5-4747-916b-7afbc7c26463",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    \"update parameters set ledger_end = {LedgerEnd} where ledger_end is null or ledger_end < {LedgerEnd}\")\r\n```",
        "createdAt" : "2020-05-26T12:55:58Z",
        "updatedAt" : "2020-05-26T15:43:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "92d2f778-c9f4-4a1f-9cdc-59efef0b0c87",
        "parentId" : "2c74f5ef-41c5-4747-916b-7afbc7c26463",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "as above",
        "createdAt" : "2020-05-26T16:35:55Z",
        "updatedAt" : "2020-05-26T16:35:56Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "447bf07d48a08769e0ac5671843a250f435a0aed",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +142,146 @@  // is advancing it.\n  private val SQL_UPDATE_LEDGER_END = SQL(\n    \"update parameters set ledger_end = {LedgerEnd} where (ledger_end is null or ledger_end < {LedgerEnd})\")\n\n  private def updateLedgerEnd(ledgerEnd: Offset)(implicit conn: Connection): Unit = {"
  },
  {
    "id" : "3be12998-9b8a-4034-b867-20ae614a574a",
    "prId" : 5983,
    "comments" : [
      {
        "id" : "51a25a06-9730-4481-97db-75a35c1ad4e1",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think we're going to need to pull this out and share it around. Later though.",
        "createdAt" : "2020-05-14T15:37:20Z",
        "updatedAt" : "2020-05-14T16:26:38Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9757bb57bd136b3cf70daf8c475f40f7e49bcb34",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +950,954 @@    for {\n      dbDispatcher <- DbDispatcher.owner(serverRole, jdbcUrl, maxConnections, metrics)\n      executor <- ResourceOwner.forExecutorService(() => Executors.newWorkStealingPool())\n    } yield\n      new JdbcLedgerDao("
  },
  {
    "id" : "05f35364-444f-4a63-aa88-4aabd8ac83d8",
    "prId" : 5930,
    "comments" : [
      {
        "id" : "294d95b7-a552-499e-ba7b-b939975bd5c9",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can't you pull this preparation up too?",
        "createdAt" : "2020-05-11T16:36:42Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bcfae153-817c-4bc0-8be0-c8e23d66d1d8",
        "parentId" : "294d95b7-a552-499e-ba7b-b939975bd5c9",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "We can evaluate this but for the time being I'd leave this here, it only affects Sandbox Classic and the scenario loader, which is not really performance sensitive. But in general I agree it would make sense.",
        "createdAt" : "2020-05-11T16:44:53Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c76b9d7b-51c9-4998-a7e0-2cca85aa905b",
        "parentId" : "294d95b7-a552-499e-ba7b-b939975bd5c9",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sorry, I haven't given enough context: the problem is that we would need to add a non-trivial bit of code to handle this case specifically and I would prefer to keep this sub-optimal but without any additional infrastructure, unless we really see there is a use for it.",
        "createdAt" : "2020-05-11T16:52:40Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c4f8c953c4ccd754c46e920876b4288839fa9bdb",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +547,551 @@                    transaction = tx.transaction.mapNodeId(splitOrThrow),\n                    divulgedContracts = Nil,\n                  )\n                  .write()\n                submitterInfo"
  },
  {
    "id" : "87320a75-85ab-4a33-9866-fc8257cf2e14",
    "prId" : 5706,
    "comments" : [
      {
        "id" : "eaa2c1c3-2c05-46fd-88e5-427d383efde5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Maybe instead of `null` and `s` return `None` and `Some(s)` directly without using `.?`",
        "createdAt" : "2020-04-23T16:14:26Z",
        "updatedAt" : "2020-04-23T16:14:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7252002f-2153-4a7d-a0d8-8b58b5d04d3c",
        "parentId" : "eaa2c1c3-2c05-46fd-88e5-427d383efde5",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I think this was done so that both `null` and an empty string were evaluated to an empty value. Does it make sense?",
        "createdAt" : "2020-04-23T16:28:38Z",
        "updatedAt" : "2020-04-23T16:28:38Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d14449de39fc87d40ac96f7e69f906a20fc0157d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +217,221 @@      str(\"submission_id\") ~\n      str(\"participant_id\") ~\n      str(\"rejection_reason\").map(s => if (s.isEmpty) null else s).? ~\n      byteArray(\"configuration\"))\n      .map(flatten)"
  },
  {
    "id" : "c7e4c61d-ceab-48d9-8859-f9a12b2c175a",
    "prId" : 5393,
    "comments" : [
      {
        "id" : "7c0d4ea0-9e36-4587-b284-9c0027821f36",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "A rejection entry can be added:\r\n- By `JdbcIndexer`, when consuming a `ReadService` update\r\n- By `SqlLedger`, when the time model check fails\r\n- By `JdbcLedgerDao`, when persisting the transaction fails with a consistency error\r\n",
        "createdAt" : "2020-04-02T22:57:23Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "695006fc-e042-4bbf-b603-1af1471d62c9",
        "parentId" : "7c0d4ea0-9e36-4587-b284-9c0027821f36",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@stefanobaghino-da: does the new schema require this to be added somewhere in addition?",
        "createdAt" : "2020-04-03T07:47:17Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b8eea2d3-9ee4-4b64-a26f-2a1c3a7231c6",
        "parentId" : "7c0d4ea0-9e36-4587-b284-9c0027821f36",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The sync version of this method should probably be called inside `storeRejection` so it is done in the same database transaction.",
        "createdAt" : "2020-04-03T07:48:54Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1d409253-11a4-4033-bf65-e924912abe1b",
        "parentId" : "7c0d4ea0-9e36-4587-b284-9c0027821f36",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "> The sync version of this method should probably be called\r\n\r\nThis is the sync method 🙂 ",
        "createdAt" : "2020-04-06T06:35:27Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3b48766e-efe8-4b98-aee3-e90d69bcb88c",
        "parentId" : "7c0d4ea0-9e36-4587-b284-9c0027821f36",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "> @stefanobaghino-da: does the new schema require this to be added somewhere in addition?\r\n\r\nThe new schema has a separate table for completions and rejections, I believe we can wire it in there.",
        "createdAt" : "2020-04-06T08:05:36Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4b05b353-afe0-474e-91ef-d30a1721dc31",
        "parentId" : "7c0d4ea0-9e36-4587-b284-9c0027821f36",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'll try to transition this to the new schema after this has been merged.",
        "createdAt" : "2020-04-06T08:06:18Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f49d72d97c5936a50cb883659dd2caeda6205402",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +982,986 @@\n        case PersistenceEntry.Rejection(rejection) =>\n          stopDeduplicatingCommandSync(domain.CommandId(rejection.commandId), rejection.submitter)\n          storeRejection(offset, rejection)\n          Ok"
  },
  {
    "id" : "c0cd16a5-3efe-45fe-9678-1a12574975c5",
    "prId" : 5129,
    "comments" : [
      {
        "id" : "68bc08ea-31b7-4c5f-b815-56a0e10fa2db",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "shouldn't this be taken care of by `truncate participant_events cascade;`?",
        "createdAt" : "2020-03-23T09:13:39Z",
        "updatedAt" : "2020-03-23T09:14:15Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f1432e26-75fe-4ebd-bf1e-875496bd46d6",
        "parentId" : "68bc08ea-31b7-4c5f-b815-56a0e10fa2db",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'd say yes, but I'd say I'll add a test right now to make sure that's the case (and to ensure we don't forget about this in the future).",
        "createdAt" : "2020-03-23T09:17:30Z",
        "updatedAt" : "2020-03-23T09:17:30Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "91ec4df51a96f7aaee4a99aefbc3285ecb6290e4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1725,1729 @@        |truncate participant_command_submissions cascade;\n        |truncate participant_events cascade;\n        |truncate participant_event_flat_transaction_witnesses cascade;\n        |truncate participant_event_witnesses_complement cascade;\n      \"\"\".stripMargin)"
  },
  {
    "id" : "d75e8ebc-cddc-42f7-aa9f-df0adb867c8a",
    "prId" : 4657,
    "comments" : [
      {
        "id" : "aaa4af8c-2604-44e6-98cd-ae4816ff3265",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Looks like this `executionContext` comes from `actorSystem.dispatcher`, which comes from the `StandaloneIndexer`'s actor system. Just wanted to make sure we're OK with this.",
        "createdAt" : "2020-02-22T07:44:36Z",
        "updatedAt" : "2020-02-22T07:46:23Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "28ba6f95-663c-4d76-a5d7-4e7d3ef1e2e0",
        "parentId" : "aaa4af8c-2604-44e6-98cd-ae4816ff3265",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I agree we should change this, but in the context of this object (as it is right now) the `executionContext` is where `Future`s should be ran. I'll probably have a go at this as part of my participant redesign story.\r\n\r\nThanks for pointing this out though, as mentioned I agree that we could do a better job at organizing our thread pools.",
        "createdAt" : "2020-02-24T08:46:53Z",
        "updatedAt" : "2020-02-24T08:46:53Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c1109b06acedc19d1d3792f5963e9b00bb3eb2b4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1445,1449 @@            // (See issue #2026)\n            PartyDetails(Party.assertFromString(d.party), d.displayName, isLocal = true)))(\n        executionContext)\n\n  private val SQL_INSERT_PARTY ="
  },
  {
    "id" : "a82842cd-527b-4d07-809c-f83e8dfb5d20",
    "prId" : 4543,
    "comments" : [
      {
        "id" : "1763c132-b152-4dd3-ac77-c49b5186c559",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I guess without the string aggregation the query could even be moved out of the database specific traits?",
        "createdAt" : "2020-02-17T12:17:55Z",
        "updatedAt" : "2020-02-17T12:18:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5e03dee-fc88-4931-8a8b-2aa20b55430e",
        "parentId" : "1763c132-b152-4dd3-ac77-c49b5186c559",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "For sure, I just wanted to solve one issue at a time and keep the PR as simple as possible.",
        "createdAt" : "2020-02-17T12:22:11Z",
        "updatedAt" : "2020-02-17T12:22:11Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ce13f353-d4dc-4c0f-8dc8-2dd1945c8cd4",
        "parentId" : "1763c132-b152-4dd3-ac77-c49b5186c559",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Tracked by https://github.com/digital-asset/daml/issues/4544",
        "createdAt" : "2020-02-17T12:23:53Z",
        "updatedAt" : "2020-02-17T12:23:53Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2297b46a-2906-4d54-ab85-9735315d6dce",
        "parentId" : "1763c132-b152-4dd3-ac77-c49b5186c559",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed in https://github.com/digital-asset/daml/pull/4545",
        "createdAt" : "2020-02-17T12:58:30Z",
        "updatedAt" : "2020-02-17T12:58:30Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "535444751d1cc0b9d8329e518ce4eb226309876c",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1729,1733 @@    override protected[JdbcLedgerDao] val SQL_SELECT_CONTRACT: String =\n      s\"\"\"\n         |select cd.contract\n         |from contract_data cd\n         |left join contracts c on cd.id=c.id"
  },
  {
    "id" : "9f55594f-ec51-462f-a505-889095f03c2f",
    "prId" : 4467,
    "comments" : [
      {
        "id" : "6462bba3-a637-4fef-b603-84a5e6790e8a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Very nice, thanks. :slightly_smiling_face: ",
        "createdAt" : "2020-02-20T09:43:59Z",
        "updatedAt" : "2020-02-26T09:55:05Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81c3bb07cc3057b6358f8d09902331b1a80501bf",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +1643,1647 @@\n  private val CommandDataParser: RowParser[ParsedCommandData] =\n    Macro.parser[ParsedCommandData](\n      \"submitted_at\",\n      \"ttl\","
  }
]