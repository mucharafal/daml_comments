[
  {
    "id" : "b5d21818-9a0a-4961-b4dc-670fb8b8dd50",
    "prId" : 4735,
    "comments" : [
      {
        "id" : "caeedc20-73a2-4cdb-bcd1-cddce95f4134",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Hm, this spreads out the clause for checkpoints across two terms. How about something along the lines of\r\n```sql\r\n-- checkpoints\r\n(application_id is null and submitting_party is null and command_id is null) \r\nor\r\n-- rejections or successful completions\r\n(application_id = ${applicationId: String} and submitting_party in (${parties}))\r\n```",
        "createdAt" : "2020-02-26T19:28:33Z",
        "updatedAt" : "2020-02-27T08:49:32Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3a920971-a645-48f3-825f-1ed4224ce096",
        "parentId" : "caeedc20-73a2-4cdb-bcd1-cddce95f4134",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Sure, makes sense (btw now GitHub supports multi-line suggestions, go wild!)",
        "createdAt" : "2020-02-27T08:26:26Z",
        "updatedAt" : "2020-02-27T08:49:32Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f667322c-f725-455c-9ebd-8348bcab58db",
        "parentId" : "caeedc20-73a2-4cdb-bcd1-cddce95f4134",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'll stick to `application_id` and `submitting_party` for checkpoints though, `command_id` is not indexed.",
        "createdAt" : "2020-02-27T08:44:22Z",
        "updatedAt" : "2020-02-27T08:49:32Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd6bf25c-c3b7-4f5f-8b8b-bec46b3c85ad",
        "parentId" : "caeedc20-73a2-4cdb-bcd1-cddce95f4134",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4735/commits/390025ca382a58b34a71246869dcd1b95fb2be05",
        "createdAt" : "2020-02-27T08:49:52Z",
        "updatedAt" : "2020-02-27T08:49:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "390025ca382a58b34a71246869dcd1b95fb2be05",
    "line" : null,
    "diffHunk" : "@@ -61,8 +61,10 @@ object CommandCompletionsTable {\n           from participant_command_completions\n           where\n             completion_offset between $startInclusive and $endExclusive and\n-            application_id = ${applicationId: String} and\n-            submitting_party in (${parties.asInstanceOf[Set[String]]})\"\"\"\n+            (application_id is null or application_id = ${applicationId: String}) and"
  },
  {
    "id" : "23dbfdc3-16f8-46d4-9b84-404028496863",
    "prId" : 4681,
    "comments" : [
      {
        "id" : "7f57d908-5561-4d8c-b030-5798d30ee20b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "How does anorm decide when to choose a different alternative? Because the row in the result set contains all columns. I suppose `str(\"transaction_id\")` only matches if it's the string is not null?",
        "createdAt" : "2020-02-25T14:11:35Z",
        "updatedAt" : "2020-02-25T14:40:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2aa8ccb-a945-4d47-98eb-a612f5e17564",
        "parentId" : "7f57d908-5561-4d8c-b030-5798d30ee20b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yes, exactly. :slightly_smiling_face: ",
        "createdAt" : "2020-02-25T14:22:35Z",
        "updatedAt" : "2020-02-25T14:40:00Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "877ea5fa91f11308feaa2e732233aa13ed38dd18",
    "line" : 45,
    "diffHunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.store.dao\n+\n+import anorm.{Row, RowParser, SimpleSql, SqlParser, SqlStringInterpolation, ~}\n+import com.digitalasset.daml.lf.data.Ref\n+import com.digitalasset.ledger.ApplicationId\n+import com.digitalasset.ledger.api.v1.command_completion_service.CompletionStreamResponse\n+import com.digitalasset.ledger.api.v1.completion.Completion\n+import com.digitalasset.platform.store.CompletionFromTransaction.{toApiCheckpoint, toErrorCode}\n+import com.digitalasset.platform.store.entries.LedgerEntry\n+import com.google.rpc.status.Status\n+\n+object CommandCompletionsTable {\n+\n+  import SqlParser.{date, int, long, str}\n+\n+  private val acceptedCommandParser: RowParser[CompletionStreamResponse] =\n+    long(\"completion_offset\") ~ date(\"record_time\") ~ str(\"command_id\") ~ str(\"transaction_id\") map {\n+      case offset ~ recordTime ~ commandId ~ transactionId =>\n+        CompletionStreamResponse(\n+          checkpoint = toApiCheckpoint(recordTime.toInstant, offset),\n+          completions = Seq(Completion(commandId, Some(Status()), transactionId)))\n+    }\n+\n+  private val rejectedCommandParser: RowParser[CompletionStreamResponse] =\n+    long(\"completion_offset\") ~ date(\"record_time\") ~ str(\"command_id\") ~ int(\"status_code\") ~ str(\n+      \"status_message\") map {\n+      case offset ~ recordTime ~ commandId ~ statusCode ~ statusMessage =>\n+        CompletionStreamResponse(\n+          checkpoint = toApiCheckpoint(recordTime.toInstant, offset),\n+          completions = Seq(Completion(commandId, Some(Status(statusCode, statusMessage)))))\n+    }\n+\n+  private val checkpointParser: RowParser[CompletionStreamResponse] =\n+    long(\"completion_offset\") ~ date(\"record_time\") map {\n+      case offset ~ recordTime =>\n+        CompletionStreamResponse(\n+          checkpoint = toApiCheckpoint(recordTime.toInstant, offset),\n+          completions = Seq())\n+    }\n+\n+  val parser: RowParser[CompletionStreamResponse] =\n+    acceptedCommandParser | rejectedCommandParser | checkpointParser"
  }
]