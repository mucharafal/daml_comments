[
  {
    "id" : "3fea11e0-3592-4133-a62c-6fc8e573fead",
    "prId" : 6163,
    "comments" : [
      {
        "id" : "5cac7025-1ff2-4ff5-8672-a20bf9109ef6",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n      val storeTransactionDbMetrics = metrics.daml.index.db.storeTransactionDbMetrics\r\n```\r\nMinor and opinion-based, feel free to not use this.",
        "createdAt" : "2020-05-29T14:12:55Z",
        "updatedAt" : "2020-05-29T14:13:17Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "588f0a6bac1c93612ef40fd096f840974699be5f",
    "line" : 7,
    "diffHunk" : "@@ -25,26 +25,32 @@ private[dao] object TransactionsWriter {\n       deleteWitnessesBatch: Option[BatchSql],\n       insertWitnessesBatch: Option[BatchSql],\n   ) {\n-    def write()(implicit connection: Connection): Unit = {\n-      eventBatches.foreach(_.execute())\n+    def write(metrics: Metrics)(implicit connection: Connection): Unit = {\n+      import metrics.daml.index.db.storeTransactionDbMetrics"
  },
  {
    "id" : "66bafaaa-3a7a-4b58-ae0d-c02fc5ada439",
    "prId" : 5930,
    "comments" : [
      {
        "id" : "c38053d8-81f6-48f6-9840-6b89e5f92c3e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This slipped in, solving.",
        "createdAt" : "2020-05-11T13:43:42Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e3c53df1-1231-41e4-a4e9-fe6ef74b54c5",
        "parentId" : "c38053d8-81f6-48f6-9840-6b89e5f92c3e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5930/commits/980d99a1cb1337a1df1979506f6c4d0367bb5e22",
        "createdAt" : "2020-05-11T14:12:02Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c4f8c953c4ccd754c46e920876b4288839fa9bdb",
    "line" : null,
    "diffHunk" : "@@ -23,6 +23,33 @@ private[dao] final class TransactionsWriter(\n   private val contractsTable = ContractsTable(dbType)\n   private val contractWitnessesTable = WitnessesTable.ForContracts(dbType)\n \n+  private[dao] final class PreparedInsert(\n+      eventBatches: EventsTable.PreparedBatches,\n+      flatTransactionWitnessesBatch: Option[BatchSql],\n+      complementWitnessesBatch: Option[BatchSql],\n+      contractBatches: ContractsTable.PreparedBatches,\n+      insertWitnessesBatch: Option[BatchSql],\n+  ) {\n+    def write()(implicit connection: Connection): Unit = {\n+      eventBatches.foreach(_.execute())\n+      flatTransactionWitnessesBatch.foreach(_.execute())\n+      complementWitnessesBatch.foreach(_.execute())\n+\n+      for ((deleted, deleteContractsBatch) <- contractBatches.deletions) {\n+        val deleteWitnessesBatch = contractWitnessesTable.prepareBatchDelete(deleted.toSeq)"
  },
  {
    "id" : "86f677ff-7889-47b0-8d48-26688a92ec03",
    "prId" : 5930,
    "comments" : [
      {
        "id" : "6a4c3cd5-8527-45ec-9a2c-752f0158ae7d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I know you didn't introduce this here, but: This feels like a `getOrElse { throw â€¦ }` would be cleaner.",
        "createdAt" : "2020-05-11T16:37:29Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "afa41071-dbcc-4c7c-b497-20e7fbabb4e3",
        "parentId" : "6a4c3cd5-8527-45ec-9a2c-752f0158ae7d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, maybe a blunter approach was more readable before but now it's way better to use `getOrElse`. Good point, thanks!",
        "createdAt" : "2020-05-11T16:47:30Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "273215d9-ebb2-4b3c-9f73-d1a434940009",
        "parentId" : "6a4c3cd5-8527-45ec-9a2c-752f0158ae7d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5930/commits/d184b38da54f98383c779310e3d747b68143a224",
        "createdAt" : "2020-05-11T16:48:02Z",
        "updatedAt" : "2020-05-11T22:23:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c4f8c953c4ccd754c46e920876b4288839fa9bdb",
    "line" : null,
    "diffHunk" : "@@ -133,40 +168,35 @@ private[dao] final class TransactionsWriter(\n         witnesses = disclosureForTransactionTree,\n       )\n \n-    eventBatches.foreach(_.execute())\n-    flatTransactionWitnessesBatch.foreach(_.execute())\n-    complementWitnessesBatch.foreach(_.execute())\n-\n     val contractBatches = contractsTable.prepareBatchInsert(\n       ledgerEffectiveTime = ledgerEffectiveTime,\n       transaction = transaction,\n       divulgedContracts = divulgedContracts,\n     )\n \n-    for ((deleted, deleteContractsBatch) <- contractBatches.deletions) {\n-      val deleteWitnessesBatch = contractWitnessesTable.prepareBatchDelete(deleted.toSeq)\n-      assert(deleteWitnessesBatch.nonEmpty, \"No witness found for contracts marked for deletion\")\n-      // Delete the witnesses first to respect the foreign key constraint of the underlying storage\n-      deleteWitnessesBatch.get.execute()\n-      deleteContractsBatch.execute()\n-    }\n-\n-    for ((_, insertContractsBatch) <- contractBatches.insertions) {\n-      insertContractsBatch.execute()\n-    }\n+    val deleteWitnessesBatch =\n+      for ((deleted, _) <- contractBatches.deletions) yield {\n+        val deletedWitnessesBatch = contractWitnessesTable.prepareBatchDelete(deleted.toSeq)\n+        assert(deletedWitnessesBatch.nonEmpty, \"No witness found for contracts marked for deletion\")\n+        deletedWitnessesBatch.get"
  },
  {
    "id" : "ccdd2d57-91b0-4725-bc44-d81129fe4515",
    "prId" : 5541,
    "comments" : [
      {
        "id" : "aa2003ea-9081-45a5-8e67-be874a874d2a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Quite confused phrasing. It's probably worth re-writing this.",
        "createdAt" : "2020-04-15T12:45:21Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d9336cfd-c2f8-4ec2-82fe-d3e1cf464ee4",
        "parentId" : "aa2003ea-9081-45a5-8e67-be874a874d2a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "But, hey, it's kind of funny to read it out loud. :joy: ",
        "createdAt" : "2020-04-15T12:46:44Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd4d4733-3879-42fb-8f54-9e7e7490d899",
        "parentId" : "aa2003ea-9081-45a5-8e67-be874a874d2a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This was actually ok, I wanted to highlight another comment.",
        "createdAt" : "2020-04-15T13:23:12Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "45f317d7-4a02-4788-be64-2edb23b6c761",
        "parentId" : "aa2003ea-9081-45a5-8e67-be874a874d2a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5541/commits/a8b94bd0b1513143fc460fab81d670ef7a2f96a2",
        "createdAt" : "2020-04-15T13:49:19Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : null,
    "diffHunk" : "@@ -103,23 +134,46 @@ private[dao] object TransactionsWriter extends TransactionsWriter {\n       flatTransactionWitnessesBatch.foreach(_.execute())\n       complementWitnessesBatch.foreach(_.execute())\n \n+      val contractBatches = ContractsTable.prepareBatchInsert(\n+        ledgerEffectiveTime = ledgerEffectiveTime,\n+        transaction = transaction,\n+        divulgedContracts = divulgedContracts,\n+      )\n+\n+      for ((deleted, deleteContractsBatch) <- contractBatches.deletions) {\n+        val deleteWitnessesBatch = contractWitnessesTable.prepareBatchDelete(deleted.toSeq)\n+        require(deleteWitnessesBatch.nonEmpty, \"Illegal: deleting witnesses without a contract\")\n+        // Delete the witnesses first to respect the foreign key constraint of the underlying storage\n+        deleteWitnessesBatch.get.execute()\n+        deleteContractsBatch.execute()\n+      }\n+\n+      for ((_, insertContractsBatch) <- contractBatches.insertions) {\n+        insertContractsBatch.execute()\n+      }\n+\n+      val notDeleted: ContractId => Boolean =\n+        !contractBatches.deletions.fold(Set.empty[ContractId])(_._1).contains(_)\n+\n+      // Insert the witnesses last to respect the foreign key constraint of the underlying storage.\n+      // Compute and insert new witnesses regardless of whether the current transaction adds new\n+      // contracts because it may be the case that we are only adding new witnesses to existing\n+      // contracts (e.g. via a fetch)."
  },
  {
    "id" : "f1553b0b-177b-46c8-871f-213550009699",
    "prId" : 5541,
    "comments" : [
      {
        "id" : "dc3e1952-0114-42dd-8485-bf0463eaee50",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This is probably a good candidate to be extracted as a method.",
        "createdAt" : "2020-04-15T12:48:59Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ac5cd8f1-6ede-4f56-96af-0e1e7f714db1",
        "parentId" : "dc3e1952-0114-42dd-8485-bf0463eaee50",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5541/commits/1970436722f3b4966ea9421ec92e24379d737223",
        "createdAt" : "2020-04-15T13:49:06Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : null,
    "diffHunk" : "@@ -103,23 +134,46 @@ private[dao] object TransactionsWriter extends TransactionsWriter {\n       flatTransactionWitnessesBatch.foreach(_.execute())\n       complementWitnessesBatch.foreach(_.execute())\n \n+      val contractBatches = ContractsTable.prepareBatchInsert(\n+        ledgerEffectiveTime = ledgerEffectiveTime,\n+        transaction = transaction,\n+        divulgedContracts = divulgedContracts,\n+      )\n+\n+      for ((deleted, deleteContractsBatch) <- contractBatches.deletions) {\n+        val deleteWitnessesBatch = contractWitnessesTable.prepareBatchDelete(deleted.toSeq)\n+        require(deleteWitnessesBatch.nonEmpty, \"Illegal: deleting witnesses without a contract\")\n+        // Delete the witnesses first to respect the foreign key constraint of the underlying storage\n+        deleteWitnessesBatch.get.execute()\n+        deleteContractsBatch.execute()\n+      }\n+\n+      for ((_, insertContractsBatch) <- contractBatches.insertions) {\n+        insertContractsBatch.execute()\n+      }\n+\n+      val notDeleted: ContractId => Boolean =\n+        !contractBatches.deletions.fold(Set.empty[ContractId])(_._1).contains(_)\n+\n+      // Insert the witnesses last to respect the foreign key constraint of the underlying storage.\n+      // Compute and insert new witnesses regardless of whether the current transaction adds new\n+      // contracts because it may be the case that we are only adding new witnesses to existing\n+      // contracts (e.g. via a fetch).\n+      val localDivulgence =\n+        contractBatches.insertions.fold[WitnessRelation[ContractId]](Map.empty) {\n+          case (toBeInserted, _) => divulgence(transaction, blinding.disclosure, toBeInserted)\n+        }\n+      val fullDivulgence = Relation.union(\n+        localDivulgence,\n+        blinding.globalDivulgence.filterKeys(notDeleted)\n+      )\n+      val insertWitnessesBatch = contractWitnessesTable.prepareBatchInsert(fullDivulgence)\n+      if (localDivulgence.nonEmpty) {\n+        require(insertWitnessesBatch.nonEmpty, \"Illegal: inserting a contract without witnesses\")\n+      }\n+      insertWitnessesBatch.foreach(_.execute())"
  },
  {
    "id" : "7dc86562-54f9-4282-9cfd-aa36530aa826",
    "prId" : 5541,
    "comments" : [
      {
        "id" : "a03d1bd8-7918-4b37-a9c1-7656bde97f51",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n    case (nodeId, l: LookupByKey) if l.result.exists(toBeInserted) =>\r\n```",
        "createdAt" : "2020-04-16T08:17:58Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : null,
    "diffHunk" : "@@ -41,16 +45,62 @@ private[dao] object TransactionsWriter extends TransactionsWriter {\n     }\n   }\n \n-  def apply(\n+  private def divulgedContracts(\n+      disclosure: DisclosureRelation,\n+      toBeInserted: Set[ContractId],\n+  ): PartialFunction[(NodeId, Node), (ContractId, Set[Party])] = {\n+    case (nodeId, c: Create) if toBeInserted(c.coid) =>\n+      c.coid -> disclosure(nodeId)\n+    case (nodeId, e: Exercise) if toBeInserted(e.targetCoid) =>\n+      e.targetCoid -> disclosure(nodeId)\n+    case (nodeId, f: Fetch) if toBeInserted(f.coid) =>\n+      f.coid -> disclosure(nodeId)\n+    case (nodeId, l: LookupByKey) if l.result.fold(false)(toBeInserted) =>"
  },
  {
    "id" : "c24f4942-7c63-4bd0-95be-b557d184a2f8",
    "prId" : 5541,
    "comments" : [
      {
        "id" : "68287526-1b79-40b0-9570-40d30ad9bf08",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Shouldn't the error message say `deleting contracts without deleting witnesses`?",
        "createdAt" : "2020-04-16T08:45:44Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "31032f76-58ee-454d-81c9-9c9d597b517b",
        "parentId" : "68287526-1b79-40b0-9570-40d30ad9bf08",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "No, in this line I'm checking that `deleteWitnessesBatch` is not empty, which it should not be, because we're deleting a contract and no contract should be added if if cannot be witnessed.",
        "createdAt" : "2020-04-16T09:04:31Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "df472184-7f0a-4b57-89c2-685e0a278b4b",
        "parentId" : "68287526-1b79-40b0-9570-40d30ad9bf08",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Sorry, I don't follow. Maybe it is also a moot point because`deleteWitnessesBatch` will always be non-empty and \r\nmaybe it's worth removing the optionality by making `PreparedBatches#deleted` and the parameter for `prepareBatchDelete` of type `Option[OneAnd[Set, ContractId]]`.\r\n",
        "createdAt" : "2020-04-16T09:34:51Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c08ea85b-401d-4b26-8b46-ec13185bee0c",
        "parentId" : "68287526-1b79-40b0-9570-40d30ad9bf08",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "What I'm saying is that this is an exceptional condition because I found a batch of witnesses that do not have any corresponding contracts. I understand that this constraint is currently implied by the underlying storage foreign key constraint, but I'd at least leave an `assert` here (the `require` is probably confusing, but the meaning was that of an `assert`).\r\n\r\nI would prefer not pulling in `scalaz` just for one type, especially given the fact that it would imply some sort of `assert`-like behavior as soon as we pull data from the database.\r\n\r\nIf that's ok with you I would simply change this to an assert and possibly rephrase it to: `\"No witness found for contracts marked for deletion\"`.",
        "createdAt" : "2020-04-16T18:35:39Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "63a52a0c-0e9c-4c94-861d-d9b61678b938",
        "parentId" : "68287526-1b79-40b0-9570-40d30ad9bf08",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5541/commits/3e9c6dec68fe7c51603a369e74fd3b5bfbe94f9e",
        "createdAt" : "2020-04-17T10:18:02Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : null,
    "diffHunk" : "@@ -103,23 +157,37 @@ private[dao] object TransactionsWriter extends TransactionsWriter {\n       flatTransactionWitnessesBatch.foreach(_.execute())\n       complementWitnessesBatch.foreach(_.execute())\n \n+      val contractBatches = ContractsTable.prepareBatchInsert(\n+        ledgerEffectiveTime = ledgerEffectiveTime,\n+        transaction = transaction,\n+        divulgedContracts = divulgedContracts,\n+      )\n+\n+      for ((deleted, deleteContractsBatch) <- contractBatches.deletions) {\n+        val deleteWitnessesBatch = contractWitnessesTable.prepareBatchDelete(deleted.toSeq)\n+        require(deleteWitnessesBatch.nonEmpty, \"Illegal: deleting witnesses without a contract\")"
  },
  {
    "id" : "6851e031-cb4d-4b3e-aaa6-143ff71f19d9",
    "prId" : 5541,
    "comments" : [
      {
        "id" : "df976bbf-1a18-4c30-bb00-93f00dc2ef74",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      // contracts (e.g. via divulging a contract with fetch).\r\n```",
        "createdAt" : "2020-04-16T08:46:46Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : null,
    "diffHunk" : "@@ -103,23 +157,37 @@ private[dao] object TransactionsWriter extends TransactionsWriter {\n       flatTransactionWitnessesBatch.foreach(_.execute())\n       complementWitnessesBatch.foreach(_.execute())\n \n+      val contractBatches = ContractsTable.prepareBatchInsert(\n+        ledgerEffectiveTime = ledgerEffectiveTime,\n+        transaction = transaction,\n+        divulgedContracts = divulgedContracts,\n+      )\n+\n+      for ((deleted, deleteContractsBatch) <- contractBatches.deletions) {\n+        val deleteWitnessesBatch = contractWitnessesTable.prepareBatchDelete(deleted.toSeq)\n+        require(deleteWitnessesBatch.nonEmpty, \"Illegal: deleting witnesses without a contract\")\n+        // Delete the witnesses first to respect the foreign key constraint of the underlying storage\n+        deleteWitnessesBatch.get.execute()\n+        deleteContractsBatch.execute()\n+      }\n+\n+      for ((_, insertContractsBatch) <- contractBatches.insertions) {\n+        insertContractsBatch.execute()\n+      }\n+\n+      // Insert the witnesses last to respect the foreign key constraint of the underlying storage.\n+      // Compute and insert new witnesses regardless of whether the current transaction adds new\n+      // contracts because it may be the case that we are only adding new witnesses to existing\n+      // contracts (e.g. via a fetch)."
  },
  {
    "id" : "c1abe605-b8db-4146-b7d7-8d6f1daf5b84",
    "prId" : 5541,
    "comments" : [
      {
        "id" : "904cc485-749c-43df-aee6-564f87ca6a3b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I'm not sure I understand this correctly. Do you observe a difference between this `localDivulgence` and `blindingInfo.globalDivulgence`?",
        "createdAt" : "2020-04-16T08:48:37Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aab75b0d-7842-4c16-9fa1-89f2f5b5bcfe",
        "parentId" : "904cc485-749c-43df-aee6-564f87ca6a3b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yes, `blindingInfo.globalDivulgence` does not include the divulgence relation between contracts that are being divulged in the current transaction. If I only use `globalDivulgence` I will not add the witnesses of contracts divulged in the current transaction.",
        "createdAt" : "2020-04-16T09:06:33Z",
        "updatedAt" : "2020-04-17T19:02:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2034352017063fbc2c958c5a086273e66ed0ad47",
    "line" : 62,
    "diffHunk" : "@@ -41,16 +45,62 @@ private[dao] object TransactionsWriter extends TransactionsWriter {\n     }\n   }\n \n-  def apply(\n+  private def divulgedContracts(\n+      disclosure: DisclosureRelation,\n+      toBeInserted: Set[ContractId],\n+  ): PartialFunction[(NodeId, Node), (ContractId, Set[Party])] = {\n+    case (nodeId, c: Create) if toBeInserted(c.coid) =>\n+      c.coid -> disclosure(nodeId)\n+    case (nodeId, e: Exercise) if toBeInserted(e.targetCoid) =>\n+      e.targetCoid -> disclosure(nodeId)\n+    case (nodeId, f: Fetch) if toBeInserted(f.coid) =>\n+      f.coid -> disclosure(nodeId)\n+    case (nodeId, l: LookupByKey) if l.result.fold(false)(toBeInserted) =>\n+      l.result.get -> disclosure(nodeId)\n+  }\n+\n+  private def divulgence(\n+      transaction: Transaction,\n+      disclosure: DisclosureRelation,\n+      toBeInserted: Set[ContractId],\n+  ): WitnessRelation[ContractId] =\n+    if (toBeInserted.isEmpty) {\n+      Map.empty\n+    } else {\n+      transaction.nodes.iterator\n+        .collect(divulgedContracts(disclosure, toBeInserted))\n+        .foldLeft[WitnessRelation[ContractId]](Map.empty)(Relation.merge)\n+    }\n+\n+  private def prepareWitnessesBatch(\n+      insertions: Set[ContractId],\n+      deletions: Set[ContractId],\n+      transaction: Transaction,\n+      blinding: BlindingInfo,\n+  ): Option[BatchSql] = {\n+    val localDivulgence = divulgence(transaction, blinding.disclosure, insertions)\n+    val fullDivulgence = Relation.union("
  }
]