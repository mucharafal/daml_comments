[
  {
    "id" : "bc227d8c-2b54-40dd-8dee-1b8f7a921394",
    "prId" : 4046,
    "comments" : [
      {
        "id" : "637f0bf1-85f4-41be-a04c-81a2c83c1e35",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Is this used for side-effecting somewhere?",
        "createdAt" : "2020-01-15T13:29:06Z",
        "updatedAt" : "2020-01-16T07:56:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f103ca37-0ee0-4c30-82a2-5b88b543a412",
        "parentId" : "637f0bf1-85f4-41be-a04c-81a2c83c1e35",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Not for side-effecting but mostly to drop results coming from the evaluated `f` without causing (fatal) warnings. It's used in the tests and replacing it with `newLoggingContext` causes the following:\r\n```\r\nledger/sandbox/src/test/suite/scala/com/digitalasset/platform/logging/ContextualizedLoggerSpec.scala:123: warning: discarded non-Unit value\r\n    LoggingContext.newLoggingContext(f(ContextualizedLogger.createFor(mockLogger(Level.INFO))))\r\n                                    ^\r\nledger/sandbox/src/test/suite/scala/com/digitalasset/platform/logging/ContextualizedLoggerSpec.scala:127: warning: discarded non-Unit value\r\n    LoggingContext.newLoggingContext(kv, kvs: _*)(\r\n                                                 ^\r\nerror: No warnings can be incurred under -Xfatal-warnings.\r\n```\r\nI do agree that the name is less than ideal but I'm gladly accepting suggestions. :slightly_smiling_face: ",
        "createdAt" : "2020-01-16T07:51:22Z",
        "updatedAt" : "2020-01-16T07:56:16Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d0a821d2-f731-4b1b-9066-869d5000d30e",
        "parentId" : "637f0bf1-85f4-41be-a04c-81a2c83c1e35",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : ":thinking: \r\n\r\nBut on the other hand, simply annotating `f` to explicitly return `Unit` does the trick. I can probably remove this, at least for now, and introduce it only if needed.",
        "createdAt" : "2020-01-16T07:53:02Z",
        "updatedAt" : "2020-01-16T07:56:16Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e90fd74-29ab-4b52-aeb4-53439a023c7f",
        "parentId" : "637f0bf1-85f4-41be-a04c-81a2c83c1e35",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4046/commits/9aac1cf1b1c5758a7fc6cb6c605911ef5efe8e47",
        "createdAt" : "2020-01-16T07:56:28Z",
        "updatedAt" : "2020-01-16T07:56:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9aac1cf1b1c5758a7fc6cb6c605911ef5efe8e47",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.logging\n+\n+import net.logstash.logback.argument.StructuredArgument\n+import net.logstash.logback.marker.MapEntriesAppendingMarker\n+import org.slf4j.Marker\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+object LoggingContext {\n+\n+  def newLoggingContext[A](f: LoggingContext => A): A =\n+    f(new LoggingContext(Map.empty))\n+\n+  def newLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n+      f: LoggingContext => A): A =\n+    f(new LoggingContext(Map(kv +: kvs: _*)))\n+\n+  def withEnrichedLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n+      f: LoggingContext => A)(implicit ctx: LoggingContext): A =\n+    f((ctx + kv) ++ kvs)\n+\n+  /**\n+    * Same as [[newLoggingContext]] but discards the result\n+    */\n+  def newLoggingContext_(f: LoggingContext => Any): Unit = {"
  },
  {
    "id" : "cb869bd5-cb0a-48eb-94bb-1cf1b1ffc9a7",
    "prId" : 4046,
    "comments" : [
      {
        "id" : "636e050c-c38e-46c9-81dd-97b29aad0221",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I find `x.toMap` more readable than `Map(x: _*)`.\r\n\r\n```suggestion\r\n    f(new LoggingContext((kv +: kvs).toMap))\r\n```",
        "createdAt" : "2020-01-15T13:45:00Z",
        "updatedAt" : "2020-01-16T07:56:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9aac1cf1b1c5758a7fc6cb6c605911ef5efe8e47",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.logging\n+\n+import net.logstash.logback.argument.StructuredArgument\n+import net.logstash.logback.marker.MapEntriesAppendingMarker\n+import org.slf4j.Marker\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+object LoggingContext {\n+\n+  def newLoggingContext[A](f: LoggingContext => A): A =\n+    f(new LoggingContext(Map.empty))\n+\n+  def newLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n+      f: LoggingContext => A): A =\n+    f(new LoggingContext(Map(kv +: kvs: _*)))"
  }
]