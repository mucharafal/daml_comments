[
  {
    "id" : "2283e49b-f1c3-4c60-8a74-9eb07bab40f2",
    "prId" : 787,
    "comments" : [
      {
        "id" : "36412ae6-9bcf-4543-b775-4319c9949a2f",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "all the...?",
        "createdAt" : "2019-04-30T11:34:01Z",
        "updatedAt" : "2019-04-30T11:40:00Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "555039da-55d1-44fa-bce6-d3cf5ea3af7a",
        "parentId" : "36412ae6-9bcf-4543-b775-4319c9949a2f",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "haha, I must have had an interrupt to leave this cliffhanger here.. will fix it",
        "createdAt" : "2019-04-30T11:39:01Z",
        "updatedAt" : "2019-04-30T11:40:00Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ee9d60ac667c2a2afc6fdd7cca354b5a140e2776",
    "line" : null,
    "diffHunk" : "@@ -125,10 +121,12 @@ CREATE TABLE contract_key_maintainers (\n CREATE UNIQUE INDEX contract_key_maintainers_idx\n   ON contract_key_maintainers (contract_id, maintainer);\n \n--- a generic table to store meta information such as: ledger id and ledger end\n+-- this table is meant to have a single row storing all the"
  },
  {
    "id" : "faf4a93b-8abc-4e64-b697-b75ea2734410",
    "prId" : 759,
    "comments" : [
      {
        "id" : "d56ea80a-9315-4ab6-9c24-0a9e483a4d98",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "let's wait with this statement until #752 lands",
        "createdAt" : "2019-04-29T13:46:50Z",
        "updatedAt" : "2019-04-29T13:54:50Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e317dc7466a89dfe7ccb23f8818e28d99b073e50",
    "line" : null,
    "diffHunk" : "@@ -5,22 +5,38 @@\n --            As soon we released it, every schema change must be a separate file, so future migrations can work from any\n --            released Sandbox version.\n \n+-- Stores the history of the ledger -- mostly transactions. This table is immutable in the sense that\n+-- rows can never be modified, only added.\n CREATE TABLE ledger_entries\n (\n+  -- Every entry is indexed by a monotonically growing integer. That is, new rows can only have a\n+  -- ledger_offet which is greater than the larger ledger_offset in ledger_entries. However, note that there\n+  -- might be gaps in the series formed by all the ledger_offsets in the table."
  },
  {
    "id" : "39e59281-be80-4483-9247-978342ef577c",
    "prId" : 759,
    "comments" : [
      {
        "id" : "c0abde14-a7d6-4808-8206-8362afbd4597",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "why the underscores?",
        "createdAt" : "2019-04-29T13:47:25Z",
        "updatedAt" : "2019-04-29T13:54:50Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "18c29e15-6601-43a3-8cf8-cec714df6364",
        "parentId" : "c0abde14-a7d6-4808-8206-8362afbd4597",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "that's italics in plain text",
        "createdAt" : "2019-04-29T13:52:18Z",
        "updatedAt" : "2019-04-29T13:54:50Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e317dc7466a89dfe7ccb23f8818e28d99b073e50",
    "line" : null,
    "diffHunk" : "@@ -5,22 +5,38 @@\n --            As soon we released it, every schema change must be a separate file, so future migrations can work from any\n --            released Sandbox version.\n \n+-- Stores the history of the ledger -- mostly transactions. This table is immutable in the sense that\n+-- rows can never be modified, only added.\n CREATE TABLE ledger_entries\n (\n+  -- Every entry is indexed by a monotonically growing integer. That is, new rows can only have a\n+  -- ledger_offet which is greater than the larger ledger_offset in ledger_entries. However, note that there\n+  -- might be gaps in the series formed by all the ledger_offsets in the table.\n   ledger_offset         bigint primary key           not null,\n-  -- one of 'transaction', 'rejection', or 'checkpoint' -- also see check_entry below\n+  -- one of 'transaction', 'rejection', or 'checkpoint' -- also see check_entry below.\n+  -- note that we _could_ store the different entries in different tables, but as of now we deem"
  },
  {
    "id" : "e2d22156-7261-4ec3-9d36-edf4aaafe20b",
    "prId" : 759,
    "comments" : [
      {
        "id" : "e89c124e-9ad1-4238-8f64-ced6c4516b20",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "tables",
        "createdAt" : "2019-04-29T13:47:52Z",
        "updatedAt" : "2019-04-29T13:54:50Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f0051a5-fe6f-45a5-9ab8-48c1d2029f3c",
        "parentId" : "e89c124e-9ad1-4238-8f64-ced6c4516b20",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-29T13:54:55Z",
        "updatedAt" : "2019-04-29T13:54:55Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e317dc7466a89dfe7ccb23f8818e28d99b073e50",
    "line" : null,
    "diffHunk" : "@@ -5,22 +5,38 @@\n --            As soon we released it, every schema change must be a separate file, so future migrations can work from any\n --            released Sandbox version.\n \n+-- Stores the history of the ledger -- mostly transactions. This table is immutable in the sense that\n+-- rows can never be modified, only added.\n CREATE TABLE ledger_entries\n (\n+  -- Every entry is indexed by a monotonically growing integer. That is, new rows can only have a\n+  -- ledger_offet which is greater than the larger ledger_offset in ledger_entries. However, note that there\n+  -- might be gaps in the series formed by all the ledger_offsets in the table.\n   ledger_offset         bigint primary key           not null,\n-  -- one of 'transaction', 'rejection', or 'checkpoint' -- also see check_entry below\n+  -- one of 'transaction', 'rejection', or 'checkpoint' -- also see check_entry below.\n+  -- note that we _could_ store the different entries in different tables, but as of now we deem\n+  -- more convient having a single table even if it imposes the constraint below, since\n+  -- this table represents a single unified stream of events and partitioning it across table"
  },
  {
    "id" : "781a4c7f-e55d-4502-90c5-7bc2eff28edb",
    "prId" : 759,
    "comments" : [
      {
        "id" : "90948c30-e3be-4426-8384-9d922eef9f8c",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "one more `currently` than needed",
        "createdAt" : "2019-04-29T13:50:28Z",
        "updatedAt" : "2019-04-29T13:54:50Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8e406536-a194-4335-bde0-caddb9ca4d2d",
        "parentId" : "90948c30-e3be-4426-8384-9d922eef9f8c",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-29T13:54:53Z",
        "updatedAt" : "2019-04-29T13:54:53Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e317dc7466a89dfe7ccb23f8818e28d99b073e50",
    "line" : null,
    "diffHunk" : "@@ -40,32 +57,58 @@ CREATE TABLE disclosures (\n   party          varchar                                            not null\n );\n \n+-- Note that technically this information is all present in `ledger_entries`,\n+-- but we store it in this form since it would not be viable to traverse\n+-- the entries every time we need to gain information as a contract. It's essentially\n+-- a materialized view of the contracts state.\n CREATE TABLE contracts (\n   id             varchar primary key                                not null,\n+  -- this is the transaction id that _originated_ the contract.\n   transaction_id varchar references ledger_entries (transaction_id) not null,\n+  -- this is the workflow id of the transaction above. note that this is\n+  -- a denormalization -- we could simply look up in the transaction table.\n+  -- we cache it here since we do not want to risk impacting performance\n+  -- by looking it up in `ledger_entries`, however we should verify this\n+  -- claim.\n   workflow_id    varchar,\n+  -- This triple is currently included in `contract`, since currently"
  },
  {
    "id" : "192a7b5f-62f3-42c8-b562-65336bc43985",
    "prId" : 759,
    "comments" : [
      {
        "id" : "cd54d0b8-52d2-4211-a4ad-4567db20f7ca",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "why the underscores?",
        "createdAt" : "2019-04-29T13:51:34Z",
        "updatedAt" : "2019-04-29T13:54:50Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6c4a085d-2880-49c0-bcd4-a3fd7b026a8b",
        "parentId" : "cd54d0b8-52d2-4211-a4ad-4567db20f7ca",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "again, italics",
        "createdAt" : "2019-04-29T13:53:33Z",
        "updatedAt" : "2019-04-29T13:54:50Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e317dc7466a89dfe7ccb23f8818e28d99b073e50",
    "line" : 85,
    "diffHunk" : "@@ -40,32 +57,58 @@ CREATE TABLE disclosures (\n   party          varchar                                            not null\n );\n \n+-- Note that technically this information is all present in `ledger_entries`,\n+-- but we store it in this form since it would not be viable to traverse\n+-- the entries every time we need to gain information as a contract. It's essentially\n+-- a materialized view of the contracts state.\n CREATE TABLE contracts (\n   id             varchar primary key                                not null,\n+  -- this is the transaction id that _originated_ the contract.\n   transaction_id varchar references ledger_entries (transaction_id) not null,\n+  -- this is the workflow id of the transaction above. note that this is\n+  -- a denormalization -- we could simply look up in the transaction table.\n+  -- we cache it here since we do not want to risk impacting performance\n+  -- by looking it up in `ledger_entries`, however we should verify this\n+  -- claim.\n   workflow_id    varchar,\n+  -- This triple is currently included in `contract`, since currently\n+  -- we encode the full value including all the identifiers. However\n+  -- we plan to move to a more compact representation that would need\n+  -- a pointer to the \"top level\" value type, and therefore we store\n+  -- the identifier here separately.\n   package_id     varchar                                            not null,\n-  module_name    varchar                                            not null,\n-  entity_name    varchar                                            not null,\n-  create_offset  bigint references ledger_entries (ledger_offset)   not null,--TODO this is also denormalisation, as we could get this data from ledger_entries table too. We might not need this, this should be reviewed later.\n+  -- using the QualifiedName#toString format\n+  name           varchar                                            not null,\n+  -- this is denormalized much like `transaction_id` -- see comment above.\n+  create_offset  bigint references ledger_entries (ledger_offset)   not null,\n+  -- this on the other hand _cannot_ be easily found out by looking into"
  },
  {
    "id" : "ae7697bd-dad6-43fb-be00-3ac0136f2c52",
    "prId" : 444,
    "comments" : [
      {
        "id" : "9c142a56-1765-4664-bbfe-e65fb5a82139",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "you need the package id too, and it's better to store the name in one column.\r\n\r\n```suggestion\r\nCREATE TABLE contract_keys (\r\n  package_id varchar not null,\r\n  name varchar not null, // using the QualifiedName#toString format\r\n```",
        "createdAt" : "2019-04-15T14:58:52Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05a9c034-ac3d-48c5-bca7-f2e4e86f3ffa",
        "parentId" : "9c142a56-1765-4664-bbfe-e65fb5a82139",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "is `//` a valid comment format with Postgres? Mostly I have been using `--`",
        "createdAt" : "2019-04-16T05:55:20Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "92103699-3168-4199-8ca2-83fd4750ca96",
        "parentId" : "9c142a56-1765-4664-bbfe-e65fb5a82139",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The above was only a suggestion. I have added the comment with a `--` comment format.",
        "createdAt" : "2019-04-16T08:08:06Z",
        "updatedAt" : "2019-04-16T08:08:07Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8ea8f1aa-8da0-4ebf-b92c-25c1ff3000ab",
        "parentId" : "9c142a56-1765-4664-bbfe-e65fb5a82139",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "👍 ",
        "createdAt" : "2019-04-16T08:10:16Z",
        "updatedAt" : "2019-04-16T08:10:16Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2caa7f293aac7972574e45eb2989deaffe86da96",
    "line" : 32,
    "diffHunk" : "@@ -68,8 +69,28 @@ CREATE TABLE contract_witnesses (\n CREATE UNIQUE INDEX contract_witnesses_idx\n   ON contract_witnesses (contract_id, witness);\n \n+CREATE TABLE contract_key_maintainers (\n+  contract_id varchar references contracts (id) not null,\n+  maintainer  varchar                           not null\n+);\n+\n+CREATE UNIQUE INDEX contract_key_maintainers_idx\n+  ON contract_key_maintainers (contract_id, maintainer);\n+\n -- a generic table to store meta information such as: ledger id and ledger end\n CREATE TABLE parameters (\n   key   varchar primary key not null,\n   value varchar             not null\n );\n+\n+\n+-- table to store a mapping from (template_id, contract value) to contract id\n+-- contract values are binary blobs of unbounded size, the table therefore only stores a hash of the value\n+-- and relies for the hash to be collision free\n+CREATE TABLE contract_keys ("
  },
  {
    "id" : "b72c9390-2f12-4bce-b386-26736458c63b",
    "prId" : 444,
    "comments" : [
      {
        "id" : "95684266-c448-411d-9a87-2ed7b4e7386c",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "either comment on what the function is, or have a column specifying the function -- i'd suggest a string, i.e. `\"SHA256\"`",
        "createdAt" : "2019-04-15T14:59:36Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "27bcc4ac-6d92-42be-b260-07e7e1d41dd8",
        "parentId" : "95684266-c448-411d-9a87-2ed7b4e7386c",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Added to https://github.com/digital-asset/daml/issues/497\r\n\r\nThe function would probably have to describe not only the hash, but also the serialization algorithm. E.g., \"Protobuf-SHA256\".",
        "createdAt" : "2019-04-15T15:38:47Z",
        "updatedAt" : "2019-04-16T07:25:47Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2caa7f293aac7972574e45eb2989deaffe86da96",
    "line" : null,
    "diffHunk" : "@@ -68,8 +69,28 @@ CREATE TABLE contract_witnesses (\n CREATE UNIQUE INDEX contract_witnesses_idx\n   ON contract_witnesses (contract_id, witness);\n \n+CREATE TABLE contract_key_maintainers (\n+  contract_id varchar references contracts (id) not null,\n+  maintainer  varchar                           not null\n+);\n+\n+CREATE UNIQUE INDEX contract_key_maintainers_idx\n+  ON contract_key_maintainers (contract_id, maintainer);\n+\n -- a generic table to store meta information such as: ledger id and ledger end\n CREATE TABLE parameters (\n   key   varchar primary key not null,\n   value varchar             not null\n );\n+\n+\n+-- table to store a mapping from (template_id, contract value) to contract id\n+-- contract values are binary blobs of unbounded size, the table therefore only stores a hash of the value\n+-- and relies for the hash to be collision free\n+CREATE TABLE contract_keys (\n+  module_name varchar                           not null,\n+  entity_name varchar                           not null,\n+  value_hash  varchar                           not null,"
  }
]