[
  {
    "id" : "a6009d6c-d6af-4740-873c-6fd04287296c",
    "prId" : 6765,
    "comments" : [
      {
        "id" : "e25e3db6-d9ec-4f41-ab34-97d6886cb12c",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@S11001001: I could not find a `noop` natural transformation in scalaz. Is there one?",
        "createdAt" : "2020-07-16T20:16:12Z",
        "updatedAt" : "2020-07-16T21:12:58Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e81b8b7-b343-41fe-a9cf-cf1127ccbe7a",
        "parentId" : "e25e3db6-d9ec-4f41-ab34-97d6886cb12c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Yep; suggested above.",
        "createdAt" : "2020-07-16T20:36:44Z",
        "updatedAt" : "2020-07-16T21:12:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c0d2d717629388ddb09147ea4d298b314f63e96f",
    "line" : 21,
    "diffHunk" : "@@ -443,6 +445,28 @@ private[dao] trait JdbcLedgerDaoSuite extends AkkaBeforeAndAfterAll with JdbcLed\n       implicit ec: ExecutionContext): Future[(Offset, LedgerEntry.Transaction)] =\n     store(divulgedContracts = Map.empty, offsetAndTx)\n \n+  protected final def storeSync(commands: Vector[(Offset, LedgerEntry.Transaction)])(\n+      implicit ec: ExecutionContext): Future[Vector[(Offset, LedgerEntry.Transaction)]] = {\n+\n+    import scalaz.Free\n+    import scalaz.syntax.traverse._\n+    import scalaz.std.vector._\n+    import scalaz.std.scalaFuture._\n+\n+    val storeDelayed = (a: (Offset, LedgerEntry.Transaction)) => Free.liftFU(store(a))\n+\n+    // force synchronous future processing with Free monad\n+    // to provide the guarantees that all transactions persisted in the specified order\n+    val xs: Free[Future, Vector[(Offset, LedgerEntry.Transaction)]] =\n+      commands.traverse(storeDelayed)\n+\n+    xs.foldMap(noopNaturalTransformation[Future])\n+  }\n+\n+  private def noopNaturalTransformation[F[_]] = new scalaz.NaturalTransformation[F, F] {\n+    override def apply[A](fa: F[A]): F[A] = fa\n+  }\n+"
  },
  {
    "id" : "b108ee72-7e5f-4573-b948-4f1d5310112f",
    "prId" : 6765,
    "comments" : [
      {
        "id" : "73a2c122-bdc8-4c3c-8092-4bfff493113c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`liftFU` is strict; also, don't use `U` functions anymore.\r\n\r\n```suggestion\r\n    val storeDelayed = (a: (Offset, LedgerEntry.Transaction)) => Free.suspend(Free.liftF(store(a)))\r\n```",
        "createdAt" : "2020-07-16T20:36:17Z",
        "updatedAt" : "2020-07-16T21:12:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0d2d717629388ddb09147ea4d298b314f63e96f",
    "line" : null,
    "diffHunk" : "@@ -443,6 +445,28 @@ private[dao] trait JdbcLedgerDaoSuite extends AkkaBeforeAndAfterAll with JdbcLed\n       implicit ec: ExecutionContext): Future[(Offset, LedgerEntry.Transaction)] =\n     store(divulgedContracts = Map.empty, offsetAndTx)\n \n+  protected final def storeSync(commands: Vector[(Offset, LedgerEntry.Transaction)])(\n+      implicit ec: ExecutionContext): Future[Vector[(Offset, LedgerEntry.Transaction)]] = {\n+\n+    import scalaz.Free\n+    import scalaz.syntax.traverse._\n+    import scalaz.std.vector._\n+    import scalaz.std.scalaFuture._\n+\n+    val storeDelayed = (a: (Offset, LedgerEntry.Transaction)) => Free.liftFU(store(a))"
  },
  {
    "id" : "8ba6a577-740a-4c84-8bde-cbb9f860be88",
    "prId" : 6765,
    "comments" : [
      {
        "id" : "006a28d0-6225-442a-a3b9-5c164dd35aae",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    xs.foldMap(NaturalTransformation.refl[Future])\r\n```",
        "createdAt" : "2020-07-16T20:36:29Z",
        "updatedAt" : "2020-07-16T21:12:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0d2d717629388ddb09147ea4d298b314f63e96f",
    "line" : null,
    "diffHunk" : "@@ -443,6 +445,28 @@ private[dao] trait JdbcLedgerDaoSuite extends AkkaBeforeAndAfterAll with JdbcLed\n       implicit ec: ExecutionContext): Future[(Offset, LedgerEntry.Transaction)] =\n     store(divulgedContracts = Map.empty, offsetAndTx)\n \n+  protected final def storeSync(commands: Vector[(Offset, LedgerEntry.Transaction)])(\n+      implicit ec: ExecutionContext): Future[Vector[(Offset, LedgerEntry.Transaction)]] = {\n+\n+    import scalaz.Free\n+    import scalaz.syntax.traverse._\n+    import scalaz.std.vector._\n+    import scalaz.std.scalaFuture._\n+\n+    val storeDelayed = (a: (Offset, LedgerEntry.Transaction)) => Free.liftFU(store(a))\n+\n+    // force synchronous future processing with Free monad\n+    // to provide the guarantees that all transactions persisted in the specified order\n+    val xs: Free[Future, Vector[(Offset, LedgerEntry.Transaction)]] =\n+      commands.traverse(storeDelayed)\n+\n+    xs.foldMap(noopNaturalTransformation[Future])"
  },
  {
    "id" : "e0397fc0-99a3-465a-bac5-23e166a0b55d",
    "prId" : 6765,
    "comments" : [
      {
        "id" : "eab21e69-6e4c-4b23-9ecd-60399e5415d7",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The `suspend` from the prior suggestion is important, too.",
        "createdAt" : "2020-07-16T20:47:28Z",
        "updatedAt" : "2020-07-16T21:12:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c47219ea-8fd8-4679-93ae-54f94058fe57",
        "parentId" : "eab21e69-6e4c-4b23-9ecd-60399e5415d7",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`def liftFU[MA](value: => MA)`\r\n this was actually taking the argument by name.... \r\n`def liftF[S[_], A](value: S[A]): Free[S, A]`\r\n does NOT... so why not to use `liftFU`",
        "createdAt" : "2020-07-16T20:49:24Z",
        "updatedAt" : "2020-07-16T21:12:58Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5db488c1-cf84-4685-b8e4-0b1f1a14907d",
        "parentId" : "eab21e69-6e4c-4b23-9ecd-60399e5415d7",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "For posterity:\r\n\r\n```scala\r\nscala> def boom(): Future[Int] = sys.error(\"boom\")\r\nboom: ()scala.concurrent.Future[Int]\r\n\r\nscala> Free.liftF(boom())\r\njava.lang.RuntimeException: boom\r\n  at scala.sys.package$.error(package.scala:30)\r\n  at .boom(<console>:15)\r\n  ... 28 elided\r\n\r\nscala> Free.liftFU(boom())\r\njava.lang.RuntimeException: boom\r\n  at scala.sys.package$.error(package.scala:30)\r\n  at .boom(<console>:15)\r\n  at .$anonfun$res3$1(<console>:21)\r\n  at scalaz.Free$.liftFU(Free.scala:31)\r\n  ... 28 elided\r\n\r\nscala> Free.suspend(Free.liftF(boom()))\r\nres4: scalaz.Free[scala.concurrent.Future,Int] = Gosub(Suspend(Future(Success(()))),scalaz.Free$$$Lambda$1316/150619719@205c5cd0)\r\n```",
        "createdAt" : "2020-07-16T21:20:03Z",
        "updatedAt" : "2020-07-16T21:20:03Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0d2d717629388ddb09147ea4d298b314f63e96f",
    "line" : null,
    "diffHunk" : "@@ -443,6 +443,24 @@ private[dao] trait JdbcLedgerDaoSuite extends AkkaBeforeAndAfterAll with JdbcLed\n       implicit ec: ExecutionContext): Future[(Offset, LedgerEntry.Transaction)] =\n     store(divulgedContracts = Map.empty, offsetAndTx)\n \n+  protected final def storeSync(commands: Vector[(Offset, LedgerEntry.Transaction)])(\n+      implicit ec: ExecutionContext): Future[Vector[(Offset, LedgerEntry.Transaction)]] = {\n+\n+    import scalaz.{Free, NaturalTransformation}\n+    import scalaz.syntax.traverse._\n+    import scalaz.std.vector._\n+    import scalaz.std.scalaFuture._\n+\n+    val storeDelayed = (a: (Offset, LedgerEntry.Transaction)) => Free.liftF(store(a))"
  },
  {
    "id" : "ec816487-243f-4bde-9be5-4db31b3b8536",
    "prId" : 6610,
    "comments" : [
      {
        "id" : "22c4acba-cf72-4414-92ae-d781da30aae3",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Thank you very much for adding names to these arguments.",
        "createdAt" : "2020-07-06T08:16:01Z",
        "updatedAt" : "2020-07-06T08:31:58Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d8b0b4ec3b91fb39295653af2df268470899b352",
    "line" : 19,
    "diffHunk" : "@@ -143,21 +143,19 @@ private[dao] trait JdbcLedgerDaoSuite extends AkkaBeforeAndAfterAll with JdbcLed\n     val txBuilder = new TransactionBuilder\n     val cid = txBuilder.newCid\n     val eid = txBuilder.add(create(cid))\n-    val tx = Tx.CommittedTransaction(txBuilder.build())\n     val offset = nextOffset()\n     val id = offset.toLong\n-    val txId = s\"trId$id\"\n     val let = Instant.now\n     offset -> LedgerEntry.Transaction(\n-      Some(s\"commandId$id\"),\n-      txId,\n-      Some(\"appID1\"),\n-      Some(alice),\n-      Some(\"workflowId\"),\n-      let,\n-      let,\n-      tx,\n-      Map(eid -> Set(\"Alice\", \"Bob\"))\n+      commandId = Some(s\"commandId$id\"),"
  },
  {
    "id" : "fa16e8c7-46b0-4060-a18c-feb0e5b876d4",
    "prId" : 6256,
    "comments" : [
      {
        "id" : "5c988e0d-9f18-4237-8f3b-da40fbc08e7e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The new method has a sensible name, I would simply inline it wherever `splitOrThrow` is called and remove that method.",
        "createdAt" : "2020-06-08T09:55:07Z",
        "updatedAt" : "2020-06-08T11:19:22Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ceab33fb-7857-4e34-851c-2e95a93eb07b",
        "parentId" : "5c988e0d-9f18-4237-8f3b-da40fbc08e7e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done.",
        "createdAt" : "2020-06-08T10:48:48Z",
        "updatedAt" : "2020-06-08T11:19:22Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1752fe64c734b3190730de0876c39fb6c0a481c8",
    "line" : null,
    "diffHunk" : "@@ -430,7 +429,7 @@ private[dao] trait JdbcLedgerDaoSuite extends AkkaBeforeAndAfterAll with JdbcLed\n   }\n \n   private def splitOrThrow(id: EventId): NodeId =\n-    split(id).fold(sys.error(s\"Illegal format for event identifier $id\"))(_.nodeId)\n+    TransactionIdWithIndex.assertFromString(id).nodeId"
  },
  {
    "id" : "d173847b-b95d-4d6d-ba63-8a7354aadf20",
    "prId" : 5101,
    "comments" : [
      {
        "id" : "6bf6cfa4-00f7-462d-b140-72029e2be9e1",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This doesn't seem to be used anywhere. Next PR?",
        "createdAt" : "2020-03-20T11:00:22Z",
        "updatedAt" : "2020-03-20T11:00:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "02675f49-912d-4d83-bc4e-86b21ee8683d",
        "parentId" : "6bf6cfa4-00f7-462d-b140-72029e2be9e1",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Precisely. :slightly_smiling_face: ",
        "createdAt" : "2020-03-20T11:00:56Z",
        "updatedAt" : "2020-03-20T11:00:57Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7a936c165c9f7eac6374cfcd75aa1fa7ff51089b",
    "line" : 178,
    "diffHunk" : "@@ -231,13 +248,57 @@ private[dao] trait JdbcLedgerDaoSuite extends AkkaBeforeAndAfterAll with JdbcLed\n     )\n   }\n \n-  protected final def storeFullyTransientTransaction()(\n+  /**\n+    * Creates the following transaction\n+    *\n+    * Create A --> Exercise A\n+    *              |        |\n+    *              |        |\n+    *              v        v\n+    *           Create B  Exercise B\n+    *\n+    * A is visible to Charlie\n+    * B is visible to Alice, Bob and Charlie\n+    *\n+    */\n+  protected def withChildren: (Offset, LedgerEntry.Transaction) = {"
  }
]