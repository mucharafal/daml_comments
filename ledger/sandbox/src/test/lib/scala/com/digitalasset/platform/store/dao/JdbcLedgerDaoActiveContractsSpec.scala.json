[
  {
    "id" : "7afc3c79-09b7-487a-8919-d40f9c93f4d0",
    "prId" : 6782,
    "comments" : [
      {
        "id" : "cd766df5-f72b-41cd-994f-8ffa80f1fe77",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Of course. Now that I see this I realize we'd better have an integration test as well (but not a conformance test).",
        "createdAt" : "2020-07-17T15:44:22Z",
        "updatedAt" : "2020-07-17T15:54:15Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6084d169-c027-4932-af3c-1097372ae7da",
        "parentId" : "cd766df5-f72b-41cd-994f-8ffa80f1fe77",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "yeah, this doesn't test the full picture. but the existing ledger api test tool tests already check for the offset to be available.",
        "createdAt" : "2020-07-17T15:53:26Z",
        "updatedAt" : "2020-07-17T15:54:15Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "37d073f6e3bbc3340e8e4215d470126f6f187e7f",
    "line" : null,
    "diffHunk" : "@@ -262,6 +263,27 @@ private[dao] trait JdbcLedgerDaoActiveContractsSpec\n     }\n   }\n \n+  it should \"not set the offset\" in {\n+    for {\n+      (_, t1) <- store(singleCreate)\n+      (_, t2) <- store(singleCreate)\n+      end <- ledgerDao.lookupLedgerEnd()\n+      activeContracts <- ledgerDao.transactionsReader\n+        .getActiveContracts(\n+          activeAt = end,\n+          filter = Map(alice -> Set.empty),\n+          verbose = true,\n+        )\n+        .runWith(Sink.seq)\n+\n+    } yield {\n+      activeContracts should not be empty\n+      forAll(activeContracts) { ac =>\n+        ac.offset shouldBe empty"
  }
]