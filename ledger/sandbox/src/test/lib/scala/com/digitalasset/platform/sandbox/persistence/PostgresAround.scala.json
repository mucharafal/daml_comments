[
  {
    "id" : "e7e16b2e-b235-4a16-a1e4-55ad453d08f7",
    "prId" : 3655,
    "comments" : [
      {
        "id" : "9b4de7e2-5dfe-425e-aafb-8414345529c8",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If you can, I'd suggest being more granular in importing implicit conversions. I'm very happy to help with this if you need.",
        "createdAt" : "2019-11-28T12:31:44Z",
        "updatedAt" : "2019-11-29T13:33:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6faa9af0e976c271138c3d4af75a805e9497ba39",
    "line" : null,
    "diffHunk" : "@@ -7,15 +7,15 @@ import java.io.StringWriter\n import java.net.ServerSocket\n import java.nio.charset.StandardCharsets\n import java.nio.file.{Files, Path, Paths}\n-import java.time.Instant\n+import java.util.concurrent.atomic.AtomicBoolean\n \n import com.digitalasset.daml.bazeltools.BazelRunfiles._\n import com.digitalasset.ledger.api.testing.utils.Resource\n import org.apache.commons.io.{FileUtils, IOUtils}\n import org.scalatest.{BeforeAndAfterAll, BeforeAndAfterEach}\n import org.slf4j.LoggerFactory\n \n-import scala.io.Source\n+import scala.collection.JavaConverters._"
  },
  {
    "id" : "72a0b367-2663-4150-bd3b-d5eb7f22322a",
    "prId" : 1921,
    "comments" : [
      {
        "id" : "1c2f65e9-4599-46eb-8bee-1da7280764ce",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The logic here was just completely broken. The config file was not used at all, the ports werenâ€™t used either and instead it connected via unix domain sockets.",
        "createdAt" : "2019-06-27T15:26:10Z",
        "updatedAt" : "2019-06-27T15:26:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b36ba417480ce022f12ef073a6fd25201f18e7f",
    "line" : 4,
    "diffHunk" : "@@ -90,6 +90,7 @@ trait PostgresAround {\n     val tempDir = Files.createTempDirectory(\"postgres_test\")\n     val tempDirPath = tempDir.toAbsolutePath.toString\n     val dataDir = Paths.get(tempDirPath, \"data\")\n+    val postgresConfPath = Paths.get(dataDir.toString, \"postgresql.conf\");"
  }
]