[
  {
    "id" : "76a9c914-d830-4210-8ca5-56fe09e71e1b",
    "prId" : 5728,
    "comments" : [
      {
        "id" : "75288b3b-29e4-48ff-89f6-80a06b223e8b",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Could you add a comment explaining why this is necessary?",
        "createdAt" : "2020-04-29T11:27:22Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "925bc583-9b8f-43f4-9068-559ca2313e05",
        "parentId" : "75288b3b-29e4-48ff-89f6-80a06b223e8b",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Rewrote the assertion to not trigger the `Any` wart: ff0d753 ",
        "createdAt" : "2020-04-29T11:38:07Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : null,
    "diffHunk" : "@@ -59,6 +60,7 @@ import org.scalatest.{AsyncWordSpec, Matchers}\n import scala.concurrent.Future\n import scala.concurrent.duration.{DurationInt, DurationLong, FiniteDuration}\n \n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))"
  },
  {
    "id" : "6e08f432-d0d8-4e2a-a975-f272e5d16dda",
    "prId" : 5728,
    "comments" : [
      {
        "id" : "406dad50-1377-4abc-9450-c6ff248c1073",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2020-04-29T11:27:37Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : 22,
    "diffHunk" : "@@ -219,6 +224,22 @@ abstract class ResetServiceITBase\n         }\n       }\n \n+      \"retain previously uploaded packages\" in {"
  },
  {
    "id" : "c922e813-91b1-4ee3-8bd6-033c808c37ad",
    "prId" : 4802,
    "comments" : [
      {
        "id" : "a1f2c232-0c35-4168-82ab-898388c2c35f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This doesn't strictly match directly with the test description, although transitively it's still testing that the ledger id had changed.",
        "createdAt" : "2020-03-04T10:07:00Z",
        "updatedAt" : "2020-03-04T13:15:13Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b9b40dad-1180-41fc-8a38-eb62b5df9290",
        "parentId" : "a1f2c232-0c35-4168-82ab-898388c2c35f",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yeah, I tried not to change the tests (just moved them from `ResetServiceIT` to `ResetServiceITBase`), but you're right, this one is confusing. How would you change it?",
        "createdAt" : "2020-03-04T10:16:57Z",
        "updatedAt" : "2020-03-04T13:15:13Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "234ac6d5-bf00-482e-bd84-fe8930a88f45",
        "parentId" : "a1f2c232-0c35-4168-82ab-898388c2c35f",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Hm, actually it's fine as it is. The test compares `lid1` and `lid2`, and sending any request with the old ledgerId should be rejected ... might as well try to reset again.",
        "createdAt" : "2020-03-04T10:43:25Z",
        "updatedAt" : "2020-03-04T13:15:13Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "97ef26113c6aa971ce6ba16c78bf26810e827c9b",
    "line" : 138,
    "diffHunk" : "@@ -0,0 +1,194 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.services.reset\n+\n+import java.io.File\n+import java.util.UUID\n+\n+import com.digitalasset.daml.bazeltools.BazelRunfiles.rlocation\n+import com.digitalasset.ledger.api.domain.LedgerId\n+import com.digitalasset.ledger.api.testing.utils.{\n+  IsStatusException,\n+  SuiteResourceManagementAroundEach,\n+  MockMessages => M\n+}\n+import com.digitalasset.ledger.api.v1.active_contracts_service.{\n+  ActiveContractsServiceGrpc,\n+  GetActiveContractsRequest,\n+  GetActiveContractsResponse\n+}\n+import com.digitalasset.ledger.api.v1.admin.party_management_service.{\n+  AllocatePartyRequest,\n+  PartyManagementServiceGrpc\n+}\n+import com.digitalasset.ledger.api.v1.command_completion_service.{\n+  CommandCompletionServiceGrpc,\n+  CompletionStreamRequest\n+}\n+import com.digitalasset.ledger.api.v1.command_service.{CommandServiceGrpc, SubmitAndWaitRequest}\n+import com.digitalasset.ledger.api.v1.command_submission_service.CommandSubmissionServiceGrpc\n+import com.digitalasset.ledger.api.v1.event.CreatedEvent\n+import com.digitalasset.ledger.api.v1.ledger_identity_service.{\n+  GetLedgerIdentityRequest,\n+  LedgerIdentityServiceGrpc\n+}\n+import com.digitalasset.ledger.api.v1.testing.reset_service.{ResetRequest, ResetServiceGrpc}\n+import com.digitalasset.ledger.api.v1.transaction_filter.TransactionFilter\n+import com.digitalasset.platform.common.LedgerIdMode\n+import com.digitalasset.platform.sandbox.AbstractSandboxFixture\n+import com.digitalasset.platform.sandbox.config.SandboxConfig\n+import com.digitalasset.platform.sandbox.services.TestCommands\n+import com.digitalasset.platform.testing.{StreamConsumer, WaitForCompletionsObserver}\n+import com.digitalasset.timer.RetryStrategy\n+import com.google.protobuf.empty.Empty\n+import io.grpc.Status\n+import org.scalatest.concurrent.{AsyncTimeLimitedTests, ScalaFutures}\n+import org.scalatest.time.Span\n+import org.scalatest.{AsyncWordSpec, Matchers}\n+\n+import scala.concurrent.Future\n+import scala.concurrent.duration.{DurationInt, DurationLong, FiniteDuration}\n+\n+abstract class ResetServiceITBase\n+    extends AsyncWordSpec\n+    with AsyncTimeLimitedTests\n+    with Matchers\n+    with ScalaFutures\n+    with AbstractSandboxFixture\n+    with SuiteResourceManagementAroundEach\n+    with TestCommands {\n+\n+  override def timeLimit: Span = scaled(30.seconds)\n+\n+  override protected def config: SandboxConfig =\n+    super.config.copy(ledgerIdMode = LedgerIdMode.Dynamic)\n+\n+  protected val eventually: RetryStrategy = RetryStrategy.exponentialBackoff(10, 10.millis)\n+\n+  override protected def darFile: File = new File(rlocation(\"ledger/test-common/Test-stable.dar\"))\n+\n+  protected def fetchLedgerId(): Future[String] =\n+    LedgerIdentityServiceGrpc\n+      .stub(channel)\n+      .getLedgerIdentity(GetLedgerIdentityRequest())\n+      .map(_.ledgerId)\n+\n+  // Resets and waits for a new ledger identity to be available\n+  protected def reset(ledgerId: String): Future[String] =\n+    for {\n+      _ <- ResetServiceGrpc.stub(channel).reset(ResetRequest(ledgerId))\n+      newLedgerId <- eventually { (_, _) =>\n+        fetchLedgerId()\n+      }\n+    } yield newLedgerId\n+\n+  protected def timedReset(ledgerId: String): Future[(String, FiniteDuration)] = {\n+    val start = System.nanoTime()\n+    reset(ledgerId).map(_ -> (System.nanoTime() - start).nanos)\n+  }\n+\n+  protected def allocateParty(hint: String): Future[String] =\n+    PartyManagementServiceGrpc\n+      .stub(channel)\n+      .allocateParty(AllocatePartyRequest(hint))\n+      .map(_.partyDetails.get.party)\n+\n+  protected def submitAndWait(req: SubmitAndWaitRequest): Future[Empty] =\n+    CommandServiceGrpc.stub(channel).submitAndWait(req)\n+\n+  protected def activeContracts(ledgerId: String, f: TransactionFilter): Future[Set[CreatedEvent]] =\n+    new StreamConsumer[GetActiveContractsResponse](\n+      ActiveContractsServiceGrpc\n+        .stub(channel)\n+        .getActiveContracts(GetActiveContractsRequest(ledgerId, Some(f)), _))\n+      .all()\n+      .map(_.flatMap(_.activeContracts)(collection.breakOut))\n+\n+  protected def submitAndExpectCompletions(\n+      ledgerId: String,\n+      commands: Int,\n+      party: String,\n+  ): Future[Unit] =\n+    for {\n+      _ <- Future.sequence(\n+        Vector.fill(commands)(\n+          CommandSubmissionServiceGrpc\n+            .stub(channel)\n+            .submit(dummyCommands(LedgerId(ledgerId), UUID.randomUUID.toString, party))))\n+      unit <- WaitForCompletionsObserver(commands)(\n+        CommandCompletionServiceGrpc\n+          .stub(channel)\n+          .completionStream(\n+            CompletionStreamRequest(\n+              ledgerId = ledgerId,\n+              applicationId = M.applicationId,\n+              parties = Seq(party),\n+              offset = Some(M.ledgerBegin)\n+            ),\n+            _))\n+    } yield unit\n+\n+  \"ResetService\" when {\n+    \"state is reset\" should {\n+      \"return a new ledger ID\" in {\n+        for {\n+          lid1 <- fetchLedgerId()\n+          lid2 <- reset(lid1)\n+          throwable <- reset(lid1).failed"
  }
]