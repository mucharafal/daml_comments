[
  {
    "id" : "733a6f24-ef6c-437d-8886-958ff6fb3875",
    "prId" : 5072,
    "comments" : [
      {
        "id" : "64bf7363-eecc-4dcf-9019-e5093a71bca8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Please pull this out into a helper, with a meaningful name.",
        "createdAt" : "2020-03-18T15:45:08Z",
        "updatedAt" : "2020-03-18T16:04:31Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0073c5e8-bcc0-461f-8034-cff6b3c9b9dd",
        "parentId" : "64bf7363-eecc-4dcf-9019-e5093a71bca8",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5072/commits/2f35ea00e91ac6dd081dc601dfd4ece98c9923b7",
        "createdAt" : "2020-03-18T16:04:47Z",
        "updatedAt" : "2020-03-18T16:04:47Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3785e7c393670e0a218c4680b173a8d3ad34cbf2",
    "line" : null,
    "diffHunk" : "@@ -21,6 +22,28 @@ private[dao] trait JdbcLedgerDaoCompletionsSpec extends OptionValues {\n \n   behavior of \"JdbcLedgerDao (completions)\"\n \n+  it should \"return the expected completion for an accepted transaction\" in {\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      (offset, tx) <- storeCreateTransaction()\n+      to <- ledgerDao.lookupLedgerEnd()\n+      (_, response) <- ledgerDao.completions\n+        .getCommandCompletions(from, to, tx.applicationId.get, Set(tx.submittingParty.get))\n+        .runWith(Sink.head)\n+    } yield {\n+      val receivedOffset =\n+        ApiOffset.assertFromString(response.checkpoint.value.offset.value.value.absolute.value)"
  },
  {
    "id" : "402c4911-c4a2-4945-8de0-189038fb22e6",
    "prId" : 5072,
    "comments" : [
      {
        "id" : "9e4e0c0c-e103-4f6f-b39f-95a434464d44",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we move this stuff to the bottom of this file, or a companion object if possible?",
        "createdAt" : "2020-03-18T15:46:04Z",
        "updatedAt" : "2020-03-18T16:04:31Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f31ea8a2-b370-4039-969d-67151c5b7551",
        "parentId" : "9e4e0c0c-e103-4f6f-b39f-95a434464d44",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5072/commits/5a84f21e6031c81f89c9a7ce87e099ac3e82a72b",
        "createdAt" : "2020-03-18T16:04:59Z",
        "updatedAt" : "2020-03-18T16:04:59Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3785e7c393670e0a218c4680b173a8d3ad34cbf2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.store.dao\n+\n+import java.time.Instant\n+import java.util.UUID\n+\n+import akka.stream.scaladsl.Sink\n+import com.digitalasset.daml.lf.data.Ref.Party\n+import com.digitalasset.ledger.ApplicationId\n+import com.digitalasset.ledger.api.domain.RejectionReason\n+import com.digitalasset.platform.ApiOffset\n+import com.digitalasset.platform.store.{CompletionFromTransaction, PersistenceEntry}\n+import com.digitalasset.platform.store.entries.LedgerEntry\n+import org.scalatest.{AsyncFlatSpec, Matchers, OptionValues}\n+\n+import scala.concurrent.Future\n+\n+private[dao] trait JdbcLedgerDaoCompletionsSpec extends OptionValues {\n+  this: AsyncFlatSpec with Matchers with JdbcLedgerDaoSuite =>\n+\n+  behavior of \"JdbcLedgerDao (completions)\"\n+\n+  it should \"return the expected completion for an accepted transaction\" in {\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      (offset, tx) <- storeCreateTransaction()\n+      to <- ledgerDao.lookupLedgerEnd()\n+      (_, response) <- ledgerDao.completions\n+        .getCommandCompletions(from, to, tx.applicationId.get, Set(tx.submittingParty.get))\n+        .runWith(Sink.head)\n+    } yield {\n+      val receivedOffset =\n+        ApiOffset.assertFromString(response.checkpoint.value.offset.value.value.absolute.value)\n+      receivedOffset shouldBe offset\n+\n+      response.completions should have length 1\n+      val completion = response.completions.head\n+\n+      completion.transactionId shouldBe tx.transactionId\n+      completion.commandId shouldBe tx.commandId.get\n+      completion.status.value.code shouldBe io.grpc.Status.Code.OK.value()\n+    }\n+  }\n+\n+  private val applicationId: ApplicationId = \"JdbcLedgerDaoCompletionsSpec\"\n+  private val party: Party = \"JdbcLedgerDaoCompletionsSpec\"\n+  private val parties: Set[Party] = Set(party)\n+\n+  private def rejectWith(reason: RejectionReason): PersistenceEntry.Rejection =\n+    PersistenceEntry.Rejection(\n+      LedgerEntry.Rejection(\n+        recordTime = Instant.now,\n+        commandId = UUID.randomUUID().toString,\n+        applicationId = applicationId,\n+        submitter = party,\n+        rejectionReason = reason,\n+      )\n+    )"
  },
  {
    "id" : "30ad5246-63b6-43da-82be-76e8cd3067cf",
    "prId" : 5072,
    "comments" : [
      {
        "id" : "03a8c3ca-5d52-4ced-9088-5929e663704a",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You can probably inline `offset`. Even if you don't, I think it'd be clearer if it lived in the `yield` block.",
        "createdAt" : "2020-03-18T15:46:46Z",
        "updatedAt" : "2020-03-18T16:04:31Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "307c5fd4-8e34-4150-8a3e-a0a87cf32aa1",
        "parentId" : "03a8c3ca-5d52-4ced-9088-5929e663704a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5072/commits/a18bf358d4c7d743d9738aee6fb84c70da1d0afd",
        "createdAt" : "2020-03-18T16:05:11Z",
        "updatedAt" : "2020-03-18T16:05:11Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3785e7c393670e0a218c4680b173a8d3ad34cbf2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.store.dao\n+\n+import java.time.Instant\n+import java.util.UUID\n+\n+import akka.stream.scaladsl.Sink\n+import com.digitalasset.daml.lf.data.Ref.Party\n+import com.digitalasset.ledger.ApplicationId\n+import com.digitalasset.ledger.api.domain.RejectionReason\n+import com.digitalasset.platform.ApiOffset\n+import com.digitalasset.platform.store.{CompletionFromTransaction, PersistenceEntry}\n+import com.digitalasset.platform.store.entries.LedgerEntry\n+import org.scalatest.{AsyncFlatSpec, Matchers, OptionValues}\n+\n+import scala.concurrent.Future\n+\n+private[dao] trait JdbcLedgerDaoCompletionsSpec extends OptionValues {\n+  this: AsyncFlatSpec with Matchers with JdbcLedgerDaoSuite =>\n+\n+  behavior of \"JdbcLedgerDao (completions)\"\n+\n+  it should \"return the expected completion for an accepted transaction\" in {\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      (offset, tx) <- storeCreateTransaction()\n+      to <- ledgerDao.lookupLedgerEnd()\n+      (_, response) <- ledgerDao.completions\n+        .getCommandCompletions(from, to, tx.applicationId.get, Set(tx.submittingParty.get))\n+        .runWith(Sink.head)\n+    } yield {\n+      val receivedOffset =\n+        ApiOffset.assertFromString(response.checkpoint.value.offset.value.value.absolute.value)\n+      receivedOffset shouldBe offset\n+\n+      response.completions should have length 1\n+      val completion = response.completions.head\n+\n+      completion.transactionId shouldBe tx.transactionId\n+      completion.commandId shouldBe tx.commandId.get\n+      completion.status.value.code shouldBe io.grpc.Status.Code.OK.value()\n+    }\n+  }\n+\n+  private val applicationId: ApplicationId = \"JdbcLedgerDaoCompletionsSpec\"\n+  private val party: Party = \"JdbcLedgerDaoCompletionsSpec\"\n+  private val parties: Set[Party] = Set(party)\n+\n+  private def rejectWith(reason: RejectionReason): PersistenceEntry.Rejection =\n+    PersistenceEntry.Rejection(\n+      LedgerEntry.Rejection(\n+        recordTime = Instant.now,\n+        commandId = UUID.randomUUID().toString,\n+        applicationId = applicationId,\n+        submitter = party,\n+        rejectionReason = reason,\n+      )\n+    )\n+\n+  it should \"return the expected completion for a rejection\" in {\n+    val offset = nextOffset()\n+    val rejection = rejectWith(RejectionReason.Inconsistent(\"\"))\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      _ <- ledgerDao.storeLedgerEntry(offset, rejection)\n+      to <- ledgerDao.lookupLedgerEnd()\n+      (_, response) <- ledgerDao.completions\n+        .getCommandCompletions(from, to, applicationId, parties)\n+        .runWith(Sink.head)\n+    } yield {\n+      val receivedOffset =\n+        ApiOffset.assertFromString(response.checkpoint.value.offset.value.value.absolute.value)\n+      receivedOffset shouldBe offset\n+\n+      response.completions should have length 1\n+      val completion = response.completions.head\n+\n+      completion.transactionId shouldBe empty\n+      completion.commandId shouldBe rejection.entry.commandId\n+      completion.status.value.code shouldNot be(io.grpc.Status.Code.OK)\n+    }\n+  }\n+\n+  it should \"not return completions if the application id is wrong\" in {\n+    val offset = nextOffset()\n+    val rejection = rejectWith(RejectionReason.Inconsistent(\"\"))\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      _ <- ledgerDao.storeLedgerEntry(offset, rejection)\n+      to <- ledgerDao.lookupLedgerEnd()\n+      response <- ledgerDao.completions\n+        .getCommandCompletions(from, to, applicationId = \"WRONG\", parties)\n+        .runWith(Sink.seq)\n+    } yield {\n+      response should have length 0\n+    }\n+  }\n+\n+  it should \"not return completions if the parties do not match\" in {\n+    val offset = nextOffset()\n+    val rejection = rejectWith(RejectionReason.Inconsistent(\"\"))\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      _ <- ledgerDao.storeLedgerEntry(offset, rejection)\n+      to <- ledgerDao.lookupLedgerEnd()\n+      response <- ledgerDao.completions\n+        .getCommandCompletions(from, to, applicationId, Set(\"WRONG\"))\n+        .runWith(Sink.seq)\n+    } yield {\n+      response should have length 0\n+    }\n+  }\n+\n+  it should \"return the expected status for each rejection reason\" in {\n+    val reasons = Seq[RejectionReason](\n+      RejectionReason.Disputed(\"\"),\n+      RejectionReason.Inconsistent(\"\"),\n+      RejectionReason.InvalidLedgerTime(\"\"),\n+      RejectionReason.OutOfQuota(\"\"),\n+      RejectionReason.PartyNotKnownOnLedger(\"\"),\n+      RejectionReason.SubmitterCannotActViaParticipant(\"\"),\n+      RejectionReason.TimedOut(\"\"),\n+    )\n+\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      _ <- Future.sequence(\n+        for (reason <- reasons; offset = nextOffset())"
  },
  {
    "id" : "bea29c9a-13a7-4199-9983-683b7d30c5f8",
    "prId" : 5072,
    "comments" : [
      {
        "id" : "f122598a-7652-4726-9338-72e41a9858e7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      val completion = response.completions.loneElement\r\n```",
        "createdAt" : "2020-03-18T15:49:55Z",
        "updatedAt" : "2020-03-18T16:04:31Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d2f2a0f-0901-484e-b590-29efdeb1c111",
        "parentId" : "f122598a-7652-4726-9338-72e41a9858e7",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "For future reference, this is added by the trait `LoneElement`.",
        "createdAt" : "2020-03-18T16:03:49Z",
        "updatedAt" : "2020-03-18T16:04:31Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "acaea018-80e3-44cf-aa33-e78906d13610",
        "parentId" : "f122598a-7652-4726-9338-72e41a9858e7",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/5072/commits/3785e7c393670e0a218c4680b173a8d3ad34cbf2",
        "createdAt" : "2020-03-18T16:05:19Z",
        "updatedAt" : "2020-03-18T16:05:19Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3785e7c393670e0a218c4680b173a8d3ad34cbf2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.store.dao\n+\n+import java.time.Instant\n+import java.util.UUID\n+\n+import akka.stream.scaladsl.Sink\n+import com.digitalasset.daml.lf.data.Ref.Party\n+import com.digitalasset.ledger.ApplicationId\n+import com.digitalasset.ledger.api.domain.RejectionReason\n+import com.digitalasset.platform.ApiOffset\n+import com.digitalasset.platform.store.{CompletionFromTransaction, PersistenceEntry}\n+import com.digitalasset.platform.store.entries.LedgerEntry\n+import org.scalatest.{AsyncFlatSpec, Matchers, OptionValues}\n+\n+import scala.concurrent.Future\n+\n+private[dao] trait JdbcLedgerDaoCompletionsSpec extends OptionValues {\n+  this: AsyncFlatSpec with Matchers with JdbcLedgerDaoSuite =>\n+\n+  behavior of \"JdbcLedgerDao (completions)\"\n+\n+  it should \"return the expected completion for an accepted transaction\" in {\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      (offset, tx) <- storeCreateTransaction()\n+      to <- ledgerDao.lookupLedgerEnd()\n+      (_, response) <- ledgerDao.completions\n+        .getCommandCompletions(from, to, tx.applicationId.get, Set(tx.submittingParty.get))\n+        .runWith(Sink.head)\n+    } yield {\n+      val receivedOffset =\n+        ApiOffset.assertFromString(response.checkpoint.value.offset.value.value.absolute.value)\n+      receivedOffset shouldBe offset\n+\n+      response.completions should have length 1\n+      val completion = response.completions.head\n+\n+      completion.transactionId shouldBe tx.transactionId\n+      completion.commandId shouldBe tx.commandId.get\n+      completion.status.value.code shouldBe io.grpc.Status.Code.OK.value()\n+    }\n+  }\n+\n+  private val applicationId: ApplicationId = \"JdbcLedgerDaoCompletionsSpec\"\n+  private val party: Party = \"JdbcLedgerDaoCompletionsSpec\"\n+  private val parties: Set[Party] = Set(party)\n+\n+  private def rejectWith(reason: RejectionReason): PersistenceEntry.Rejection =\n+    PersistenceEntry.Rejection(\n+      LedgerEntry.Rejection(\n+        recordTime = Instant.now,\n+        commandId = UUID.randomUUID().toString,\n+        applicationId = applicationId,\n+        submitter = party,\n+        rejectionReason = reason,\n+      )\n+    )\n+\n+  it should \"return the expected completion for a rejection\" in {\n+    val offset = nextOffset()\n+    val rejection = rejectWith(RejectionReason.Inconsistent(\"\"))\n+    for {\n+      from <- ledgerDao.lookupLedgerEnd()\n+      _ <- ledgerDao.storeLedgerEntry(offset, rejection)\n+      to <- ledgerDao.lookupLedgerEnd()\n+      (_, response) <- ledgerDao.completions\n+        .getCommandCompletions(from, to, applicationId, parties)\n+        .runWith(Sink.head)\n+    } yield {\n+      val receivedOffset =\n+        ApiOffset.assertFromString(response.checkpoint.value.offset.value.value.absolute.value)\n+      receivedOffset shouldBe offset\n+\n+      response.completions should have length 1\n+      val completion = response.completions.head"
  }
]