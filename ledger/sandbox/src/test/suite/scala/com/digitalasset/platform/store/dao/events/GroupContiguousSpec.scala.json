[
  {
    "id" : "a2740f7f-d8d2-40a1-bd1b-6a6300b0d119",
    "prId" : 5432,
    "comments" : [
      {
        "id" : "99766e78-87e4-43d4-bcb3-e3b54300b983",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Just to be consistent with the next test change\r\n\r\n```suggestion\r\n       _.map(_.toSet should contain theSameElementsAs pairsWithContiguousKeys.groupBy(_._1).map.(_._2.toSet)\r\n```",
        "createdAt" : "2020-04-03T15:58:51Z",
        "updatedAt" : "2020-04-03T16:27:36Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b9e7e2b5b2cb3e1978499dd562701c1c2e2efb",
    "line" : null,
    "diffHunk" : "@@ -29,36 +27,24 @@ final class GroupContiguousSpec\n       }\n   }\n \n-  it should \"be equivalent to grouping on inputs with a contiguous key\" in forAll(contiguous) {\n-    pairsWithContiguousKeys =>\n-      val grouped = groupContiguous(Source(pairsWithContiguousKeys))(by = _._1)\n-      whenReady(grouped.runWith(Sink.seq[Vector[(Int, String)]])) {\n-        _ should contain theSameElementsAs pairsWithContiguousKeys.groupBy(_._1).values\n-      }\n+  it should \"be equivalent to grouping on inputs with a contiguous key\" in {\n+    val pairsWithContiguousKeys = List(1 -> \"baz\", 0 -> \"foo\", 0 -> \"bar\", 0 -> \"quux\")\n+    val grouped = groupContiguous(Source(pairsWithContiguousKeys))(by = _._1)\n+    whenReady(grouped.runWith(Sink.seq[Vector[(Int, String)]])) {\n+      _ should contain theSameElementsAs pairsWithContiguousKeys.groupBy(_._1).values"
  },
  {
    "id" : "dec6b303-b1ac-426b-8b07-7c8e261d5dd0",
    "prId" : 5432,
    "comments" : [
      {
        "id" : "6c10300c-90b3-4eff-9ead-5579f320aac0",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Why only one test cases ? ",
        "createdAt" : "2020-04-03T16:00:05Z",
        "updatedAt" : "2020-04-03T16:27:36Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8f3eca89-9b08-4992-8f78-e50aa37a635a",
        "parentId" : "6c10300c-90b3-4eff-9ead-5579f320aac0",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This is just to confirm that sorting is not important, the previous one covers enough cases.",
        "createdAt" : "2020-04-03T16:13:34Z",
        "updatedAt" : "2020-04-03T16:27:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e4b9e7e2b5b2cb3e1978499dd562701c1c2e2efb",
    "line" : 27,
    "diffHunk" : "@@ -29,36 +27,24 @@ final class GroupContiguousSpec\n       }\n   }\n \n-  it should \"be equivalent to grouping on inputs with a contiguous key\" in forAll(contiguous) {\n-    pairsWithContiguousKeys =>\n-      val grouped = groupContiguous(Source(pairsWithContiguousKeys))(by = _._1)\n-      whenReady(grouped.runWith(Sink.seq[Vector[(Int, String)]])) {\n-        _ should contain theSameElementsAs pairsWithContiguousKeys.groupBy(_._1).values\n-      }\n+  it should \"be equivalent to grouping on inputs with a contiguous key\" in {\n+    val pairsWithContiguousKeys = List(1 -> \"baz\", 0 -> \"foo\", 0 -> \"bar\", 0 -> \"quux\")"
  }
]