[
  {
    "id" : "16e32e5d-fff0-43ba-abb5-680c87441f91",
    "prId" : 3840,
    "comments" : [
      {
        "id" : "e8a85fb2-30fe-4a04-aad8-a125360b5138",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Why not `PartialFunction[Throwable, Unit]`?",
        "createdAt" : "2019-12-13T10:43:00Z",
        "updatedAt" : "2019-12-13T10:43:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cbdc830a-9a97-4e02-8349-a6e2654075d5",
        "parentId" : "e8a85fb2-30fe-4a04-aad8-a125360b5138",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I tried that initially but unfortunately `matchResult` specifically asks for a ~`Receive`~ `PartialFunction[Any, Unit]` and changing this to `PartialFunction[Throwable, Unit]` makes it not compile. It's a bit weird now that I think about it, since I believe `PartialFunction` to be contravariant in the input type... :thinking: ",
        "createdAt" : "2019-12-13T10:53:21Z",
        "updatedAt" : "2019-12-13T10:53:21Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "433e7c49314321cc7bade9e722065506b397a3f7",
    "line" : 42,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.services.time\n+\n+import java.time.Instant\n+\n+import akka.stream.scaladsl.Sink\n+import com.digitalasset.api.util.TimestampConversion.fromInstant\n+import com.digitalasset.grpc.GrpcException\n+import com.digitalasset.grpc.adapter.client.akka.ClientAdapter\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.ledger.api.v1.testing.time_service.{\n+  GetTimeRequest,\n+  SetTimeRequest,\n+  TimeServiceGrpc\n+}\n+import com.digitalasset.platform.sandbox.config.SandboxConfig\n+import com.digitalasset.platform.sandbox.services.SandboxFixture\n+import com.digitalasset.platform.services.time.TimeProviderType\n+import org.scalatest.concurrent.{AsyncTimeLimitedTests, ScalaFutures}\n+import org.scalatest.time.Span\n+import org.scalatest.time.SpanSugar.convertIntToGrainOfTime\n+import org.scalatest.{AsyncWordSpec, Matchers}\n+import scalaz.syntax.tag.ToTagOps\n+\n+final class WallClockTimeIT\n+    extends AsyncWordSpec\n+    with SandboxFixture\n+    with SuiteResourceManagementAroundAll\n+    with AsyncTimeLimitedTests\n+    with ScalaFutures\n+    with Matchers {\n+\n+  override val timeLimit: Span = 15.seconds\n+\n+  override protected def config: SandboxConfig = SandboxConfig.default.copy(\n+    timeProviderType = TimeProviderType.WallClock,\n+  )\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+  private val unimplemented: PartialFunction[Any, Unit] = {"
  }
]