[
  {
    "id" : "5e51589e-e903-48f4-b007-fa9c7af110ab",
    "prId" : 3582,
    "comments" : [
      {
        "id" : "cb39308c-b25a-4535-af5c-af29fc83ab69",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "@SamirTalwar I'm aware this is in conflict with #3573, I'll wait until that's merged to rebase and change this.",
        "createdAt" : "2019-11-21T17:18:12Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "10518c3e-25b4-4b63-8e9d-ed4f4cbb7943",
        "parentId" : "cb39308c-b25a-4535-af5c-af29fc83ab69",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "ðŸ–– ",
        "createdAt" : "2019-11-21T17:25:04Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0983a05c-7b14-473f-b4f1-b5a4f59c3566",
        "parentId" : "cb39308c-b25a-4535-af5c-af29fc83ab69",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Rebased.",
        "createdAt" : "2019-11-22T15:49:53Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8676cf8e330c2e9b8240da082d4c941d116fe98f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,88 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.services.reflection\n+\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.platform.sandbox.services.SandboxFixture\n+import io.grpc.reflection.v1alpha.{\n+  ServerReflectionGrpc,\n+  ServerReflectionRequest,\n+  ServerReflectionResponse\n+}\n+import io.grpc.stub.StreamObserver\n+import org.scalatest.{AsyncWordSpec, Matchers}\n+\n+import scala.collection.JavaConverters._\n+import scala.concurrent.{Future, Promise}\n+\n+final class ReflectionIT\n+    extends AsyncWordSpec\n+    with Matchers\n+    with SandboxFixture\n+    with SuiteResourceManagementAroundAll {\n+\n+  private val listServices: ServerReflectionRequest =\n+    ServerReflectionRequest.newBuilder().setHost(\"127.0.0.1\").setListServices(\"\").build()\n+\n+  \"Reflection service\" when {\n+\n+    \"accessed\" should {\n+\n+      \"provide a list of exposed services\" in {\n+        for {\n+          response <- execRequest(listServices)\n+        } yield {\n+          response.getListServicesResponse.getServiceCount shouldEqual 13"
  },
  {
    "id" : "36e05bd6-2f97-4ae2-b35e-01ee81102471",
    "prId" : 3582,
    "comments" : [
      {
        "id" : "d8004831-c206-48f4-87c0-ba12351acc54",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Why not use `SingleItemObserver` here?",
        "createdAt" : "2019-11-21T17:29:07Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e438a123-4fe6-4c48-ac5a-fa3c3f2fb81e",
        "parentId" : "d8004831-c206-48f4-87c0-ba12351acc54",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Makes sense, thanks, addressed by https://github.com/digital-asset/daml/pull/3582/commits/1c27b192828386dfe96162628254003c1f8dde29",
        "createdAt" : "2019-11-21T17:50:58Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8676cf8e330c2e9b8240da082d4c941d116fe98f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,88 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.services.reflection\n+\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.platform.sandbox.services.SandboxFixture\n+import io.grpc.reflection.v1alpha.{\n+  ServerReflectionGrpc,\n+  ServerReflectionRequest,\n+  ServerReflectionResponse\n+}\n+import io.grpc.stub.StreamObserver\n+import org.scalatest.{AsyncWordSpec, Matchers}\n+\n+import scala.collection.JavaConverters._\n+import scala.concurrent.{Future, Promise}\n+\n+final class ReflectionIT\n+    extends AsyncWordSpec\n+    with Matchers\n+    with SandboxFixture\n+    with SuiteResourceManagementAroundAll {\n+\n+  private val listServices: ServerReflectionRequest =\n+    ServerReflectionRequest.newBuilder().setHost(\"127.0.0.1\").setListServices(\"\").build()\n+\n+  \"Reflection service\" when {\n+\n+    \"accessed\" should {\n+\n+      \"provide a list of exposed services\" in {\n+        for {\n+          response <- execRequest(listServices)\n+        } yield {\n+          response.getListServicesResponse.getServiceCount shouldEqual 13\n+        }\n+      }\n+\n+      \"provide details about each service\" in {\n+        for {\n+          servicesResponse <- execRequest(listServices)\n+          symbolResponses <- Future.sequence {\n+            servicesResponse.getListServicesResponse.getServiceList.asScala\n+              .map(resp => execRequest(fileBySymbolReq(resp.getName)))\n+          }\n+        } yield {\n+          for {\n+            r <- symbolResponses\n+            p <- r.getFileDescriptorResponse.getFileDescriptorProtoList.asScala\n+          } {\n+            // We filter for this string due to an exotic bug in the bazel-grpc setup, see grpc-definitions/BUILD.bazel.\n+            assert(\n+              !p.toStringUtf8.contains(\"bazel-out\"),\n+              s\"filedescriptor ${p.toStringUtf8} contains string 'bazel-out'. This means grpc reflection will not work.\")\n+          }\n+          all(symbolResponses) should have('hasErrorResponse (false))\n+        }\n+      }\n+    }\n+  }\n+\n+  private def fileBySymbolReq(symbol: String) =\n+    ServerReflectionRequest.newBuilder().setFileContainingSymbol(symbol).build()\n+\n+  private def execRequest(request: ServerReflectionRequest) = {\n+    val doneP = Promise[ServerReflectionResponse]()\n+    val ro =\n+      ServerReflectionGrpc\n+        .newStub(channel)\n+        .serverReflectionInfo(new StreamObserver[ServerReflectionResponse] {\n+          override def onNext(v: ServerReflectionResponse): Unit = {\n+            doneP.success(v)\n+          }\n+\n+          override def onError(throwable: Throwable): Unit = doneP.failure(throwable)\n+\n+          override def onCompleted(): Unit = {\n+            doneP.tryFailure(new NoSuchElementException(\"Stream closed without any response.\"))\n+            ()\n+          }\n+        })\n+    ro.onNext(request)\n+    ro.onCompleted()\n+    val doneF = doneP.future\n+    doneF\n+  }"
  },
  {
    "id" : "81aebcc5-1ec8-4fe2-a039-84a70ed58934",
    "prId" : 3582,
    "comments" : [
      {
        "id" : "d33f59f9-2d96-47ce-b1fa-c3ac96f81504",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "You can use `SingleItemObserver.first` here.\r\n\r\n```scala\r\n    SingleItemObserver[ServerReflectionResponse].first(\r\n      ServerReflectionGrpc\r\n        .newStub(channel)\r\n        .serverReflectionInfo(_)\r\n        .onNext(request)\r\n    )",
        "createdAt" : "2019-11-22T09:39:26Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f4a2e119-4104-4f1d-83de-d64224a2ccdb",
        "parentId" : "d33f59f9-2d96-47ce-b1fa-c3ac96f81504",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Thanks, much better, I struggled with it for a few minutes and gave up. Thanks for keeping the quality up. :+1: ",
        "createdAt" : "2019-11-22T15:48:55Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "10866828-125b-413d-be72-a393c44f922d",
        "parentId" : "d33f59f9-2d96-47ce-b1fa-c3ac96f81504",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3582/commits/020dc833d392c091979e7e9552d935fd1a2fc125",
        "createdAt" : "2019-11-22T15:49:40Z",
        "updatedAt" : "2019-11-22T15:50:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8676cf8e330c2e9b8240da082d4c941d116fe98f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.services.reflection\n+\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.platform.sandbox.services.SandboxFixture\n+import com.digitalasset.platform.testing.SingleItemObserver\n+import io.grpc.reflection.v1alpha.{\n+  ServerReflectionGrpc,\n+  ServerReflectionRequest,\n+  ServerReflectionResponse\n+}\n+import org.scalatest.{AsyncWordSpec, Matchers}\n+\n+import scala.collection.JavaConverters._\n+import scala.concurrent.Future\n+\n+final class ReflectionIT\n+    extends AsyncWordSpec\n+    with Matchers\n+    with SandboxFixture\n+    with SuiteResourceManagementAroundAll {\n+\n+  private val listServices: ServerReflectionRequest =\n+    ServerReflectionRequest.newBuilder().setHost(\"127.0.0.1\").setListServices(\"\").build()\n+\n+  \"Reflection service\" when {\n+\n+    \"accessed\" should {\n+\n+      \"provide a list of exposed services\" in {\n+        for {\n+          response <- execRequest(listServices)\n+        } yield {\n+          response.getListServicesResponse.getServiceCount shouldEqual 13\n+        }\n+      }\n+\n+      \"provide details about each service\" in {\n+        for {\n+          servicesResponse <- execRequest(listServices)\n+          symbolResponses <- Future.sequence {\n+            servicesResponse.getListServicesResponse.getServiceList.asScala\n+              .map(resp => execRequest(fileBySymbolReq(resp.getName)))\n+          }\n+        } yield {\n+          for {\n+            r <- symbolResponses\n+            p <- r.getFileDescriptorResponse.getFileDescriptorProtoList.asScala\n+          } {\n+            // We filter for this string due to an exotic bug in the bazel-grpc setup, see grpc-definitions/BUILD.bazel.\n+            assert(\n+              !p.toStringUtf8.contains(\"bazel-out\"),\n+              s\"filedescriptor ${p.toStringUtf8} contains string 'bazel-out'. This means grpc reflection will not work.\")\n+          }\n+          all(symbolResponses) should have('hasErrorResponse (false))\n+        }\n+      }\n+    }\n+  }\n+\n+  private def fileBySymbolReq(symbol: String) =\n+    ServerReflectionRequest.newBuilder().setFileContainingSymbol(symbol).build()\n+\n+  private def execRequest(request: ServerReflectionRequest) = {\n+    val observer = new SingleItemObserver[ServerReflectionResponse](_ => true)\n+    ServerReflectionGrpc.newStub(channel).serverReflectionInfo(observer).onNext(request)\n+    observer.result.map(_.get)"
  }
]