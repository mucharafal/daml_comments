[
  {
    "id" : "f8a47474-4020-41e2-b8be-56f74b7188fd",
    "prId" : 4722,
    "comments" : [
      {
        "id" : "245d79ba-676d-4511-8abd-35aeae77d812",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we name this and add a trailing comma for nicer diffs?",
        "createdAt" : "2020-02-27T13:09:54Z",
        "updatedAt" : "2020-03-09T16:23:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ecd5f47ac6267722864002b678eeaa67142ff5cd",
    "line" : null,
    "diffHunk" : "@@ -266,7 +266,8 @@ class JdbcLedgerDaoSpec\n \n     val defaultConfig = Configuration(\n       generation = 0,\n-      timeModel = TimeModel.reasonableDefault\n+      timeModel = TimeModel.reasonableDefault,\n+      Duration.ofDays(1L)"
  },
  {
    "id" : "e91fff88-1020-4396-9817-692627891a70",
    "prId" : 4722,
    "comments" : [
      {
        "id" : "254f84ac-78c4-46c5-98f9-88e6cc221cab",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      maxDeduplicationTime = Duration.ofDays(1),\r\n```",
        "createdAt" : "2020-03-06T17:02:21Z",
        "updatedAt" : "2020-03-09T16:23:44Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ecd5f47ac6267722864002b678eeaa67142ff5cd",
    "line" : 15,
    "diffHunk" : "@@ -265,7 +265,8 @@ class JdbcLedgerDaoSpec\n \n     val defaultConfig = Configuration(\n       generation = 0,\n-      timeModel = TimeModel.reasonableDefault\n+      timeModel = TimeModel.reasonableDefault,\n+      Duration.ofDays(1),"
  },
  {
    "id" : "22bca2ac-cbad-46da-8728-62df28618669",
    "prId" : 4606,
    "comments" : [
      {
        "id" : "7cb6fd1b-7fcb-41d4-ba9a-a467ff64fc6a",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This might be easier to read if it looked something like this:\r\n\r\n```scala\r\nval actualDescriptions = loadedPackages.values.flatMap(_.sourceDescription.toList)\r\nactualDescriptions should have length JdbcLedgerDaoSpec.Fixtures.packages.length\r\nval (actualFirstDescription :: actualOtherDescriptions) = actualDescriptions\r\nactualFirstDescription should be(firstDescription)\r\nall(actualOtherDescriptions) should be(secondDescription)\r\n```",
        "createdAt" : "2020-02-19T13:53:59Z",
        "updatedAt" : "2020-02-19T14:49:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f7507e8-720c-4ae3-b8ca-45dbf300502d",
        "parentId" : "7cb6fd1b-7fcb-41d4-ba9a-a467ff64fc6a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks, changed!",
        "createdAt" : "2020-02-19T14:07:01Z",
        "updatedAt" : "2020-02-19T14:49:07Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f0f07f82-a493-44f0-b2ac-84798d37a390",
        "parentId" : "7cb6fd1b-7fcb-41d4-ba9a-a467ff64fc6a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesn’t work since the order isn’t fixed so I undid this change again.",
        "createdAt" : "2020-02-19T14:50:06Z",
        "updatedAt" : "2020-02-19T14:50:07Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e350a297-4cbf-4f54-8115-f8c6c5c1c811",
        "parentId" : "7cb6fd1b-7fcb-41d4-ba9a-a467ff64fc6a",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Boooo. Fair enough.",
        "createdAt" : "2020-02-19T15:52:20Z",
        "updatedAt" : "2020-02-19T15:52:20Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae0e93ffe0abea8636c1a56175a81e0a5d90727",
    "line" : 8,
    "diffHunk" : "@@ -436,7 +436,8 @@ class JdbcLedgerDaoSpec\n         firstUploadResult shouldBe PersistenceResponse.Ok\n         secondUploadResult shouldBe PersistenceResponse.Ok\n         loadedPackages.values.flatMap(_.sourceDescription.toList) should contain theSameElementsAs\n-          Seq(firstDescription) ++ Seq.fill(17)(secondDescription)\n+          Seq(firstDescription) ++ Seq.fill(JdbcLedgerDaoSpec.Fixtures.packages.length - 1)(\n+            secondDescription)"
  },
  {
    "id" : "feda5f3b-1422-427d-9ab3-43c91109cb69",
    "prId" : 4442,
    "comments" : [
      {
        "id" : "69af62bb-19a9-4228-9459-97d63171e74e",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "To improve readability of this test case please move this into a helper function.",
        "createdAt" : "2020-02-07T14:11:19Z",
        "updatedAt" : "2020-02-07T14:13:28Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e29b201b-5967-48e0-bd1f-e3f7174bfebd",
        "parentId" : "69af62bb-19a9-4228-9459-97d63171e74e",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "it is a helper function?",
        "createdAt" : "2020-02-07T14:48:31Z",
        "updatedAt" : "2020-02-07T14:48:31Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "07cd8b62-1bb6-484b-b3ad-0df479017ebe",
        "parentId" : "69af62bb-19a9-4228-9459-97d63171e74e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Sorry, I wasn't specific enough: it should be moved outside of your test case to improve readability because it's just details that you don't need to know to understand the scenario.",
        "createdAt" : "2020-02-07T18:25:05Z",
        "updatedAt" : "2020-02-07T18:27:05Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dff6cd1e9ff35353328a96a7b5cc38739a20fe70",
    "line" : 10,
    "diffHunk" : "@@ -1103,6 +1103,57 @@ class JdbcLedgerDaoSpec\n         res3 shouldBe a[LedgerEntry.Rejection]\n       }\n     }\n+\n+    \"be able to use divulged contract in later transaction\" in {\n+      val let = Instant.now\n+      val offset1 = nextOffset()\n+      val offset2 = nextOffset()\n+      val offset3 = nextOffset()\n+      def emptyTxWithDivulgedContracts(id: Long) = PersistenceEntry.Transaction("
  },
  {
    "id" : "53c026e0-e94e-4a7f-8950-ad1f656bc613",
    "prId" : 4442,
    "comments" : [
      {
        "id" : "d989a4db-dc4a-49a3-a690-86338f655f60",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Without your fix the last assertion fails, right?",
        "createdAt" : "2020-02-07T14:13:12Z",
        "updatedAt" : "2020-02-07T14:13:28Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1114b9b8-cc3a-4ef2-9ed9-1098a5608c88",
        "parentId" : "d989a4db-dc4a-49a3-a690-86338f655f60",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Yep.",
        "createdAt" : "2020-02-07T14:45:53Z",
        "updatedAt" : "2020-02-07T14:45:54Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4b363598-9c2a-4efd-99fb-c71c7cfaf64e",
        "parentId" : "d989a4db-dc4a-49a3-a690-86338f655f60",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "OK",
        "createdAt" : "2020-02-07T18:23:57Z",
        "updatedAt" : "2020-02-07T18:23:58Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dff6cd1e9ff35353328a96a7b5cc38739a20fe70",
    "line" : 52,
    "diffHunk" : "@@ -1103,6 +1103,57 @@ class JdbcLedgerDaoSpec\n         res3 shouldBe a[LedgerEntry.Rejection]\n       }\n     }\n+\n+    \"be able to use divulged contract in later transaction\" in {\n+      val let = Instant.now\n+      val offset1 = nextOffset()\n+      val offset2 = nextOffset()\n+      val offset3 = nextOffset()\n+      def emptyTxWithDivulgedContracts(id: Long) = PersistenceEntry.Transaction(\n+        LedgerEntry.Transaction(\n+          Some(s\"commandId$id\"),\n+          s\"transactionId$id\",\n+          Some(\"applicationId\"),\n+          Some(alice),\n+          Some(\"workflowId\"),\n+          let,\n+          let,\n+          GenTransaction(HashMap.empty, ImmArray.empty, None),\n+          Map.empty\n+        ),\n+        Map.empty,\n+        Map(AbsoluteContractId(s\"contractId$id\") -> Set(bob)),\n+        List(AbsoluteContractId(s\"contractId$id\") -> someContractInstance)\n+      )\n+\n+      for {\n+        // First try and index a transaction fetching a completely unknown contract.\n+        _ <- ledgerDao.storeLedgerEntry(offset1, offset1 + 1, None, txFetch(let, offset1, bob, 0))\n+        res1 <- ledgerDao.lookupLedgerEntryAssert(offset1)\n+\n+        // Then index a transaction that just divulges the contract to bob.\n+        _ <- ledgerDao.storeLedgerEntry(\n+          offset2,\n+          offset2 + 1,\n+          None,\n+          emptyTxWithDivulgedContracts(offset2))\n+        res2 <- ledgerDao.lookupLedgerEntryAssert(offset2)\n+\n+        // Finally try and fetch the divulged contract. LedgerDao should be able to look up the divulged contract\n+        // and index the transaction without finding the contract metadata (LET) for it, as long as the contract\n+        // exists in contract_data.\n+        _ <- ledgerDao.storeLedgerEntry(\n+          offset3,\n+          offset3 + 1,\n+          None,\n+          txFetch(let.plusSeconds(1), offset3, bob, offset2))\n+        res3 <- ledgerDao.lookupLedgerEntryAssert(offset3)\n+      } yield {\n+        res1 shouldBe a[LedgerEntry.Rejection]\n+        res2 shouldBe a[LedgerEntry.Transaction]\n+        res3 shouldBe a[LedgerEntry.Transaction]"
  }
]