[
  {
    "id" : "a6478f16-e13e-4a6b-ae3f-d4dbbee245e5",
    "prId" : 6751,
    "comments" : [
      {
        "id" : "7b0c6b46-4b92-4fb7-af94-27a9da8f7460",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  private val eventsRangeGen: Gen[EventsRange[Int]] =\r\n```",
        "createdAt" : "2020-07-16T09:16:17Z",
        "updatedAt" : "2020-07-16T13:20:02Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dd313d3fe5c71387852de6eeb3741784b6f50729",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,26 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+package com.daml.platform.store.dao.events\n+\n+import org.scalacheck.{Arbitrary, Gen}\n+import org.scalatest.prop.GeneratorDrivenPropertyChecks\n+import org.scalatest.{FlatSpec, Matchers}\n+\n+class EventsRangeSpec extends FlatSpec with Matchers with GeneratorDrivenPropertyChecks {\n+\n+  implicit override val generatorDrivenConfig: PropertyCheckConfiguration =\n+    PropertyCheckConfiguration(minSuccessful = 100)\n+\n+  behavior of EventsRange.getClass.getSimpleName\n+\n+  \"isEmpty\" should \"work\" in forAll(eventsRangeGen) { range =>\n+    val expected = range.startExclusive >= range.endInclusive\n+    EventsRange.isEmpty(range) shouldBe expected\n+  }\n+\n+  private def eventsRangeGen: Gen[EventsRange[Int]] ="
  }
]