[
  {
    "id" : "1a5b0ee1-038f-431e-83f0-9c31a141b82c",
    "prId" : 3871,
    "comments" : [
      {
        "id" : "fbf79d21-80eb-4d0d-bfc8-232048967708",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Consider adding `withHint` in tests where you have more than one `should` in a single test case.",
        "createdAt" : "2019-12-20T15:50:39Z",
        "updatedAt" : "2019-12-22T14:40:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3353132b-2dc6-453a-99fb-1d076210ad36",
        "parentId" : "fbf79d21-80eb-4d0d-bfc8-232048967708",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Adding them. ðŸ˜„ ",
        "createdAt" : "2019-12-20T16:09:50Z",
        "updatedAt" : "2019-12-22T14:40:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0c6828ae4d7794fc12160eb51a23c06485aac526",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,596 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.resources\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+import java.util.concurrent.{Executors, RejectedExecutionException}\n+import java.util.{Timer, TimerTask}\n+\n+import akka.actor.{Actor, ActorSystem, Props}\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.{Keep, Sink, Source}\n+import akka.{Done, NotUsed}\n+import com.digitalasset.platform.resources.ResourceOwnerSpec._\n+import org.scalatest.{AsyncWordSpec, Matchers}\n+\n+import scala.collection.mutable\n+import scala.concurrent.duration.{DurationInt, FiniteDuration}\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n+import scala.util.{Failure, Success}\n+\n+class ResourceOwnerSpec extends AsyncWordSpec with Matchers {\n+  \"a resource owner\" should {\n+    \"acquire and release a resource\" in {\n+      val owner = TestResourceOwner(42)\n+      owner.hasBeenAcquired should be(false)"
  },
  {
    "id" : "863160c3-99f0-451e-a3dd-ceb80bc5ec64",
    "prId" : 3871,
    "comments" : [
      {
        "id" : "c381bd35-fb7e-4cc4-8fb1-41b34bca158f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "So why does calling `release` twice not result in an exception? Probably better document the behavior and who has to do what with some comments. Adding them to the tests as well would be good, so that it's clear what is the runtime behavior we expect and the component involved in the test.",
        "createdAt" : "2019-12-20T15:52:46Z",
        "updatedAt" : "2019-12-22T14:40:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b90d20eb-dc3f-479f-9dff-45847323bdfa",
        "parentId" : "c381bd35-fb7e-4cc4-8fb1-41b34bca158f",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "It's because releases can and should be idempotent. I'll update the test name and comment to clarify.",
        "createdAt" : "2019-12-20T16:02:19Z",
        "updatedAt" : "2019-12-22T14:40:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0c6828ae4d7794fc12160eb51a23c06485aac526",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,596 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.resources\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+import java.util.concurrent.{Executors, RejectedExecutionException}\n+import java.util.{Timer, TimerTask}\n+\n+import akka.actor.{Actor, ActorSystem, Props}\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.{Keep, Sink, Source}\n+import akka.{Done, NotUsed}\n+import com.digitalasset.platform.resources.ResourceOwnerSpec._\n+import org.scalatest.{AsyncWordSpec, Matchers}\n+\n+import scala.collection.mutable\n+import scala.concurrent.duration.{DurationInt, FiniteDuration}\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n+import scala.util.{Failure, Success}\n+\n+class ResourceOwnerSpec extends AsyncWordSpec with Matchers {\n+  \"a resource owner\" should {\n+    \"acquire and release a resource\" in {\n+      val owner = TestResourceOwner(42)\n+      owner.hasBeenAcquired should be(false)\n+\n+      val resource = for {\n+        value <- owner.acquire()\n+      } yield {\n+        owner.hasBeenAcquired should be(true)\n+        value should be(42)\n+      }\n+\n+      for {\n+        _ <- resource.asFuture\n+        _ <- resource.release()\n+      } yield {\n+        owner.hasBeenAcquired should be(false)\n+      }\n+    }\n+\n+    \"release all sub-resources when released\" in {\n+      val ownerA = TestResourceOwner(1)\n+      val ownerB = TestResourceOwner(\"two\")\n+\n+      val resource = for {\n+        _ <- ownerA.acquire()\n+        _ <- ownerB.acquire()\n+      } yield {\n+        ownerA.hasBeenAcquired should be(true)\n+        ownerB.hasBeenAcquired should be(true)\n+        ()\n+      }\n+\n+      for {\n+        _ <- resource.asFuture\n+        _ <- resource.release()\n+      } yield {\n+        ownerA.hasBeenAcquired should be(false)\n+        ownerB.hasBeenAcquired should be(false)\n+      }\n+    }\n+\n+    \"only release once\" in {\n+      val ownerA = TestResourceOwner(7)\n+      val ownerB = TestResourceOwner(\"eight\")\n+\n+      val resource = for {\n+        _ <- ownerA.acquire()\n+        _ <- ownerB.acquire()\n+      } yield ()\n+\n+      for {\n+        _ <- resource.asFuture\n+        _ <- resource.release()\n+        _ <- resource.release() // will throw an exception if it actually releases twice"
  }
]