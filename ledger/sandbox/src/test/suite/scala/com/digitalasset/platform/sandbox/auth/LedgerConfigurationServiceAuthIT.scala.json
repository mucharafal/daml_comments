[
  {
    "id" : "3b126acb-6a67-4d48-997c-529134155e6c",
    "prId" : 3598,
    "comments" : [
      {
        "id" : "79417f53-6688-49ea-a9cf-264870070666",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Why do we test this here, but not in other tests like `CommandSubmissionServiceAuthIT` and other files above?",
        "createdAt" : "2019-11-25T11:01:47Z",
        "updatedAt" : "2019-11-25T22:18:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c7bfd7d4-1ae1-43c5-813c-3d7db3f5f15f",
        "parentId" : "79417f53-6688-49ea-a9cf-264870070666",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Because copy pasta is delicious. :spaghetti: ",
        "createdAt" : "2019-11-25T12:13:04Z",
        "updatedAt" : "2019-11-25T22:18:48Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0861fc99c196c4f679d95440b2795fcd3c2e404c",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,55 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.auth\n+\n+import java.util.UUID\n+\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.ledger.api.v1.ledger_configuration_service.{\n+  GetLedgerConfigurationRequest,\n+  GetLedgerConfigurationResponse,\n+  LedgerConfigurationServiceGrpc\n+}\n+import com.digitalasset.platform.sandbox.Expect\n+import com.digitalasset.platform.sandbox.services.SandboxFixtureWithAuth\n+import org.scalatest.{AsyncFlatSpec, Matchers}\n+\n+import scala.concurrent.Future\n+\n+final class LedgerConfigurationServiceAuthIT\n+    extends AsyncFlatSpec\n+    with SandboxFixtureWithAuth\n+    with SuiteResourceManagementAroundAll\n+    with Matchers\n+    with Expect {\n+\n+  private def ledgerConfig(token: Option[String]): Future[Unit] =\n+    streamResult[GetLedgerConfigurationResponse](\n+      observer =>\n+        stub(LedgerConfigurationServiceGrpc.stub(channel), token)\n+          .getLedgerConfiguration(new GetLedgerConfigurationRequest(unwrappedLedgerId), observer)\n+    )\n+\n+  behavior of \"LedgerIdentityService with authorization\"\n+\n+  it should \"deny unauthorized calls\" in {\n+    expect(ledgerConfig(None)).toBeDenied\n+  }\n+  it should \"deny calls with an invalid signature\" in {"
  },
  {
    "id" : "5295367c-858a-4349-93d0-21072169e43d",
    "prId" : 3598,
    "comments" : [
      {
        "id" : "4d763750-e558-4890-bbd6-8b56e640a068",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Put alice in a `submitter` value like in other tests above.",
        "createdAt" : "2019-11-25T11:02:56Z",
        "updatedAt" : "2019-11-25T22:18:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0861fc99c196c4f679d95440b2795fcd3c2e404c",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,55 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.sandbox.auth\n+\n+import java.util.UUID\n+\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.ledger.api.v1.ledger_configuration_service.{\n+  GetLedgerConfigurationRequest,\n+  GetLedgerConfigurationResponse,\n+  LedgerConfigurationServiceGrpc\n+}\n+import com.digitalasset.platform.sandbox.Expect\n+import com.digitalasset.platform.sandbox.services.SandboxFixtureWithAuth\n+import org.scalatest.{AsyncFlatSpec, Matchers}\n+\n+import scala.concurrent.Future\n+\n+final class LedgerConfigurationServiceAuthIT\n+    extends AsyncFlatSpec\n+    with SandboxFixtureWithAuth\n+    with SuiteResourceManagementAroundAll\n+    with Matchers\n+    with Expect {\n+\n+  private def ledgerConfig(token: Option[String]): Future[Unit] =\n+    streamResult[GetLedgerConfigurationResponse](\n+      observer =>\n+        stub(LedgerConfigurationServiceGrpc.stub(channel), token)\n+          .getLedgerConfiguration(new GetLedgerConfigurationRequest(unwrappedLedgerId), observer)\n+    )\n+\n+  behavior of \"LedgerIdentityService with authorization\"\n+\n+  it should \"deny unauthorized calls\" in {\n+    expect(ledgerConfig(None)).toBeDenied\n+  }\n+  it should \"deny calls with an invalid signature\" in {\n+    expect(ledgerConfig(Option(rwToken(\"alice\").asHeader(UUID.randomUUID.toString)))).toBeDenied"
  }
]