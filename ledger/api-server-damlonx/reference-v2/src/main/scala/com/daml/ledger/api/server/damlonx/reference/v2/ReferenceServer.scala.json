[
  {
    "id" : "75fd7b9d-2e05-43a7-bce2-bc35c6735a6d",
    "prId" : 3903,
    "comments" : [
      {
        "id" : "1d2a0e24-27c4-4b9d-9837-8e1757307ce6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "See comment above.",
        "createdAt" : "2019-12-19T13:12:22Z",
        "updatedAt" : "2019-12-19T14:11:18Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "242850c7-7577-47ce-8f80-aabf9e49e1b9",
        "parentId" : "1d2a0e24-27c4-4b9d-9837-8e1757307ce6",
        "author" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "body" : "removed",
        "createdAt" : "2019-12-19T14:11:40Z",
        "updatedAt" : "2019-12-19T14:11:40Z",
        "lastEditedBy" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c86938d339fca4debd3a42491d5ca8f6832f6056",
    "line" : null,
    "diffHunk" : "@@ -37,12 +37,11 @@ object ReferenceServer extends App {\n       .getOrElse(sys.exit(1))\n \n   implicit val system: ActorSystem = ActorSystem(\"indexed-kvutils\")\n-  implicit val materializer: ActorMaterializer = ActorMaterializer(\n-    ActorMaterializerSettings(system)\n-      .withSupervisionStrategy { e =>\n-        logger.error(s\"Supervision caught exception: $e\")\n-        Supervision.Stop\n-      })\n+  implicit val materializer: Materializer = Materializer(system)\n+  ActorAttributes.supervisionStrategy { e =>\n+    logger.error(s\"Supervision caught exception: $e\")\n+    Supervision.Stop\n+  }"
  },
  {
    "id" : "42d6a77d-93fc-451e-9168-a574f5e5eb8f",
    "prId" : 3871,
    "comments" : [
      {
        "id" : "0bb344cc-27a0-4793-9a58-1952dd8ada9c",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to pass arguments by name instead of by value for these helpers?",
        "createdAt" : "2019-12-20T15:28:35Z",
        "updatedAt" : "2019-12-22T14:40:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e69a6308-aa5e-4f48-aaaa-8dc97fd3f648",
        "parentId" : "0bb344cc-27a0-4793-9a58-1952dd8ada9c",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I'll add a comment here. This is a hack to \"take\" ownership of something that's already been constructed. It shouldn't be necessary except that we want to use them implicitly all over the place.",
        "createdAt" : "2019-12-20T15:57:04Z",
        "updatedAt" : "2019-12-22T14:40:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6828ae4d7794fc12160eb51a23c06485aac526",
    "line" : 47,
    "diffHunk" : "@@ -38,51 +38,71 @@ object ReferenceServer extends App {\n \n   implicit val system: ActorSystem = ActorSystem(\"indexed-kvutils\")\n   implicit val materializer: Materializer = Materializer(system)\n-  implicit val ec: ExecutionContext = system.dispatcher\n-\n-  val ledger = new InMemoryKVParticipantState(config.participantId)\n-\n-  val readService = ledger\n-  val writeService = ledger\n-  val authService = AuthServiceWildcard\n+  implicit val executionContext: ExecutionContext = system.dispatcher\n+\n+  val resource = for {\n+    _ <- ResourceOwner.forActorSystem(() => system).acquire()"
  },
  {
    "id" : "f39d1bba-2a33-4e6d-a4ec-4fde8de208f1",
    "prId" : 3806,
    "comments" : [
      {
        "id" : "384fa1d6-6484-43e9-b4e1-13c0e1cf5c63",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Should we use the reference server to show how to wait for successful uploads?",
        "createdAt" : "2019-12-12T16:13:57Z",
        "updatedAt" : "2019-12-12T17:11:45Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bd802b95-b0db-485f-ac0c-985e78361e4b",
        "parentId" : "384fa1d6-6484-43e9-b4e1-13c0e1cf5c63",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Not sure I understand what you mean by this?",
        "createdAt" : "2019-12-13T08:57:02Z",
        "updatedAt" : "2019-12-13T08:57:02Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "251fd5fc053893266c997d1d7451a1f25479df7b",
    "line" : 23,
    "diffHunk" : "@@ -50,10 +52,11 @@ object ReferenceServer extends App {\n   val authService = AuthServiceWildcard\n \n   config.archiveFiles.foreach { file =>\n+    val submissionId = SubmissionId.assertFromString(UUID.randomUUID().toString)\n     for {\n       dar <- DarReader { case (_, x) => Try(Archive.parseFrom(x)) }\n         .readArchiveFromFile(file)\n-    } yield ledger.uploadPackages(dar.all, None)\n+    } yield ledger.uploadPackages(submissionId, dar.all, None)"
  },
  {
    "id" : "9412b3af-959c-4d65-b9c9-b934f9a702b3",
    "prId" : 3574,
    "comments" : [
      {
        "id" : "daf9fa01-43c6-45eb-997b-2c5a699807a9",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Can I recommend we start adding a trailing `,` and newline to multi-line function calls to make the diffs cleaner?",
        "createdAt" : "2019-11-21T13:01:31Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9bdee1a1-b59c-49f6-9880-269785fc9577",
        "parentId" : "daf9fa01-43c6-45eb-997b-2c5a699807a9",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "yeah, good idea. I'm not yet consistent in doing so. Thanks for the reminder.",
        "createdAt" : "2019-11-21T13:29:26Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fb58a9aa-8289-436f-938d-58b1855b82fb",
        "parentId" : "daf9fa01-43c6-45eb-997b-2c5a699807a9",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I think later versions of Scalafmt can do this for us.",
        "createdAt" : "2019-11-21T13:51:00Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3a2a3320-8ef2-4b0e-ac78-b30eda4564b1",
        "parentId" : "daf9fa01-43c6-45eb-997b-2c5a699807a9",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by 1227da2.",
        "createdAt" : "2019-11-21T14:09:13Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "18df6d0c630aacd94a8f5897ab38b731d34a2b93",
    "line" : null,
    "diffHunk" : "@@ -61,13 +62,18 @@ object ReferenceServer extends App {\n \n   val participantLoggerFactory = NamedLoggerFactory.forParticipant(participantId)\n   val participantF: Future[(AutoCloseable, StandaloneIndexServer#SandboxState)] = for {\n-    indexerServer <- StandaloneIndexerServer(readService, config, participantLoggerFactory)\n+    indexerServer <- StandaloneIndexerServer(\n+      readService,\n+      config,\n+      participantLoggerFactory,\n+      SharedMetricRegistries.getOrCreate(s\"indexer-$participantId\"))\n     indexServer <- StandaloneIndexServer(\n       config,\n       readService,\n       writeService,\n       authService,\n-      participantLoggerFactory).start()\n+      participantLoggerFactory,\n+      SharedMetricRegistries.getOrCreate(s\"ledger-api-server-$participantId\")).start()"
  },
  {
    "id" : "d473288a-d729-4452-93d8-2707e1d27194",
    "prId" : 3574,
    "comments" : [
      {
        "id" : "f30d3acd-a3cb-44d5-a6e3-362387deb667",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Perhaps pull the registry out (and `SharedMetricRegistries.getOrCreate(s\"ledger-api-server-$participantId\")` too), as they're used twice.",
        "createdAt" : "2019-11-21T13:03:10Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ed0ef922-a464-4069-aa73-51a643da5fea",
        "parentId" : "f30d3acd-a3cb-44d5-a6e3-362387deb667",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "`participantId` refers to two different IDs.",
        "createdAt" : "2019-11-21T13:30:34Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59d0057c-d1c4-4220-800c-af2af21ff544",
        "parentId" : "f30d3acd-a3cb-44d5-a6e3-362387deb667",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Good point. Can we avoid the shadowing by renaming the other one to `extraParticipantId` or something?",
        "createdAt" : "2019-11-21T13:43:42Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c11da55e-69f6-4ce8-8979-4ad75c02e547",
        "parentId" : "f30d3acd-a3cb-44d5-a6e3-362387deb667",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by 1227da2.",
        "createdAt" : "2019-11-21T14:09:06Z",
        "updatedAt" : "2019-11-21T14:11:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "18df6d0c630aacd94a8f5897ab38b731d34a2b93",
    "line" : null,
    "diffHunk" : "@@ -61,13 +62,18 @@ object ReferenceServer extends App {\n \n   val participantLoggerFactory = NamedLoggerFactory.forParticipant(participantId)\n   val participantF: Future[(AutoCloseable, StandaloneIndexServer#SandboxState)] = for {\n-    indexerServer <- StandaloneIndexerServer(readService, config, participantLoggerFactory)\n+    indexerServer <- StandaloneIndexerServer(\n+      readService,\n+      config,\n+      participantLoggerFactory,\n+      SharedMetricRegistries.getOrCreate(s\"indexer-$participantId\"))"
  },
  {
    "id" : "8817f7d2-c985-4a5d-a3ef-ca3ec1898d1a",
    "prId" : 2005,
    "comments" : [
      {
        "id" : "c2f83c88-c8c9-42ef-895b-18880d6ac1c6",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Again this should be just the call to `readArchive(darFile: ZipFile): Try[Dar[A]]` which should also take care of the closing the input stream, which are not doing here.",
        "createdAt" : "2019-07-08T15:02:10Z",
        "updatedAt" : "2019-07-11T14:55:46Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ad17e497cfec277fb5878ad7865ec99b598053c",
    "line" : null,
    "diffHunk" : "@@ -46,8 +48,9 @@ object ReferenceServer extends App {\n \n   config.archiveFiles.foreach { file =>\n     val archivesTry = for {\n-      zipFile <- Try(new ZipFile(file))\n-      dar <- DarReader { case (_, x) => Try(Archive.parseFrom(x)) }.readArchive(zipFile)\n+      zipInputStream <- Try(new ZipInputStream(new FileInputStream(file)))"
  }
]