[
  {
    "id" : "2971530e-3c1b-4b21-8d79-7b727548a618",
    "prId" : 4607,
    "comments" : [
      {
        "id" : "1a653a66-0d73-48d7-85b8-4dbce28df0f5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to rather let constructor callers optionally pass a `() => Timestamp` so that they can read it?",
        "createdAt" : "2020-02-19T16:00:45Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "90b4b01f-ff17-4f4d-8994-39681bd2868a",
        "parentId" : "1a653a66-0d73-48d7-85b8-4dbce28df0f5",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Maybe passing a `Clock` could make sense in this case, depending on what the callers have to expect.",
        "createdAt" : "2020-02-19T16:01:19Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "962bba52-ed5d-4ce3-9ba4-aa06ea45e4da",
        "parentId" : "1a653a66-0d73-48d7-85b8-4dbce28df0f5",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I just moved and renamed this function to fix a couple of warnings. Don't want to improve upon this code because it's going to be deleted.",
        "createdAt" : "2020-02-19T16:57:33Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2631a6f3d08f69f84454f5b30c7ebcb7581b0e28",
    "line" : 31,
    "diffHunk" : "@@ -35,18 +34,24 @@ import org.slf4j.LoggerFactory\n \n import scala.collection.JavaConverters._\n import scala.collection.breakOut\n-import scala.concurrent.duration._\n+import scala.concurrent.duration.DurationInt\n import scala.concurrent.{Await, ExecutionContext, Future}\n import scala.util.Try\n \n object InMemoryKVParticipantState {\n \n+  /** Get a new record time for the ledger from the system clock.\n+    * Public for use from integration tests.\n+    */\n+  private def now(): Timestamp ="
  },
  {
    "id" : "50c0c811-b1e8-4859-8e43-8171f11b4be9",
    "prId" : 4607,
    "comments" : [
      {
        "id" : "b2531979-e697-4f4b-b638-ec1240ae996b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Nice, thanks!",
        "createdAt" : "2020-02-19T16:01:28Z",
        "updatedAt" : "2020-02-19T20:48:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2631a6f3d08f69f84454f5b30c7ebcb7581b0e28",
    "line" : 40,
    "diffHunk" : "@@ -35,18 +34,24 @@ import org.slf4j.LoggerFactory\n \n import scala.collection.JavaConverters._\n import scala.collection.breakOut\n-import scala.concurrent.duration._\n+import scala.concurrent.duration.DurationInt\n import scala.concurrent.{Await, ExecutionContext, Future}\n import scala.util.Try\n \n object InMemoryKVParticipantState {\n \n+  /** Get a new record time for the ledger from the system clock.\n+    * Public for use from integration tests.\n+    */\n+  private def now(): Timestamp =\n+    Timestamp.assertFromInstant(Clock.systemUTC().instant())\n+\n   /** The complete state of the ledger at a given point in time.\n     * This emulates a key-value blockchain with a log of commits and a key-value store.\n     * The commit log provides the ordering for the log entries, and its height is used\n     * as the [[Offset]].\n     * */\n-  case class State(\n+  private case class State("
  }
]