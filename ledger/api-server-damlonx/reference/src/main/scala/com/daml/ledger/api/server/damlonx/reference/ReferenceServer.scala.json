[
  {
    "id" : "8b4aa251-ad9f-4b9d-84a9-188289636132",
    "prId" : 637,
    "comments" : [
      {
        "id" : "2d802478-5303-4438-8b8a-a275090ac2e7",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "left-over comment?",
        "createdAt" : "2019-04-24T07:55:31Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e21ab732-9fa9-4b39-b59f-da22311dfe08",
        "parentId" : "2d802478-5303-4438-8b8a-a275090ac2e7",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I was trying out the implementation. I'll remove this / make it configurable.",
        "createdAt" : "2019-04-24T14:47:14Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : null,
    "diffHunk" : "@@ -76,7 +77,7 @@ object ReferenceServer extends App {\n \n   val timeModel = TimeModel.reasonableDefault\n   val tsb = TimeServiceBackend.simple(Instant.EPOCH)\n-  val ledger = new Ledger(timeModel, tsb)\n+  val ledger = new InMemoryKVParticipantState // new Ledger(timeModel, tsb)"
  },
  {
    "id" : "25d8cd9a-5bbc-4d5b-ad13-e22766f4df90",
    "prId" : 424,
    "comments" : [
      {
        "id" : "dfb5dba1-78bc-407c-9e0d-a831f9ed9915",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Add comments above on what the `ReferenceServer` is for. ",
        "createdAt" : "2019-04-15T09:18:45Z",
        "updatedAt" : "2019-04-16T17:27:35Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a5fea54-1f5d-4527-9a31-a184163ffef9",
        "parentId" : "dfb5dba1-78bc-407c-9e0d-a831f9ed9915",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Objective is for readers to be able to understand purpose of code.",
        "createdAt" : "2019-04-15T09:19:08Z",
        "updatedAt" : "2019-04-16T17:27:35Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3d38961dc15c7f1453400960e2f30869590d2412",
    "line" : 24,
    "diffHunk" : "@@ -21,6 +21,29 @@ import scala.util.Try\n object ReferenceServer extends App {\n   val logger = LoggerFactory.getLogger(this.getClass)\n \n+  final case class Config("
  },
  {
    "id" : "1f9052c2-7c03-47db-8499-ea1434403a92",
    "prId" : 424,
    "comments" : [
      {
        "id" : "f3556658-87c8-4db3-a295-00b6f052380c",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Add a note on why that is useful.",
        "createdAt" : "2019-04-15T09:19:32Z",
        "updatedAt" : "2019-04-16T17:27:35Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bbcee66c-6fe3-4a2c-9b02-94bd718f87a2",
        "parentId" : "f3556658-87c8-4db3-a295-00b6f052380c",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "`Used to inform clients in CI about the port allocated by the server.`",
        "createdAt" : "2019-04-15T09:23:21Z",
        "updatedAt" : "2019-04-16T17:27:35Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3d38961dc15c7f1453400960e2f30869590d2412",
    "line" : null,
    "diffHunk" : "@@ -21,6 +21,29 @@ import scala.util.Try\n object ReferenceServer extends App {\n   val logger = LoggerFactory.getLogger(this.getClass)\n \n+  final case class Config(\n+      port: Int,\n+      portFile: Option[File],\n+      archiveFiles: List[File],\n+  )\n+\n+  val argParser = new scopt.OptionParser[Config](\"reference-server\") {\n+    head(\"DamlOnX Reference Server\")\n+    opt[Int](\"port\")\n+      .optional()\n+      .action((p, c) => c.copy(port = p))\n+      .text(\"Server port. If not set, a random port is allocated.\")\n+    opt[File](\"port-file\")\n+      .optional()\n+      .action((f, c) => c.copy(portFile = Some(f)))\n+      .text(\"File to write the allocated port number to.\")"
  },
  {
    "id" : "4bce21a3-9aa3-4d83-a72f-4810478eed1e",
    "prId" : 424,
    "comments" : [
      {
        "id" : "a6d77f40-949e-456d-a666-58b92358fa5d",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Add a sentence describing what the reference server does and how it starts by default. Along the lines of:\r\n\r\n```\r\nA fully compliant DAML Ledger API server backed by an in-memory store. Due to its lack of persistence it is not meant for production, but to serve as a blueprint for other DAML Ledger API server implementations.\r\n```",
        "createdAt" : "2019-04-15T09:22:19Z",
        "updatedAt" : "2019-04-16T17:27:35Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3d38961dc15c7f1453400960e2f30869590d2412",
    "line" : null,
    "diffHunk" : "@@ -21,6 +21,29 @@ import scala.util.Try\n object ReferenceServer extends App {\n   val logger = LoggerFactory.getLogger(this.getClass)\n \n+  final case class Config(\n+      port: Int,\n+      portFile: Option[File],\n+      archiveFiles: List[File],\n+  )\n+\n+  val argParser = new scopt.OptionParser[Config](\"reference-server\") {\n+    head(\"DamlOnX Reference Server\")"
  },
  {
    "id" : "1aafc073-4fa4-4b09-997d-b580df22643a",
    "prId" : 424,
    "comments" : [
      {
        "id" : "6e6bd9c5-6541-41d9-a03b-02b8b54e46e3",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "`DAR files to load. Scenarios are ignored. The servers starts with an empty ledger by default.`",
        "createdAt" : "2019-04-15T09:24:36Z",
        "updatedAt" : "2019-04-16T17:27:35Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3d38961dc15c7f1453400960e2f30869590d2412",
    "line" : null,
    "diffHunk" : "@@ -21,6 +21,29 @@ import scala.util.Try\n object ReferenceServer extends App {\n   val logger = LoggerFactory.getLogger(this.getClass)\n \n+  final case class Config(\n+      port: Int,\n+      portFile: Option[File],\n+      archiveFiles: List[File],\n+  )\n+\n+  val argParser = new scopt.OptionParser[Config](\"reference-server\") {\n+    head(\"DamlOnX Reference Server\")\n+    opt[Int](\"port\")\n+      .optional()\n+      .action((p, c) => c.copy(port = p))\n+      .text(\"Server port. If not set, a random port is allocated.\")\n+    opt[File](\"port-file\")\n+      .optional()\n+      .action((f, c) => c.copy(portFile = Some(f)))\n+      .text(\"File to write the allocated port number to.\")\n+    arg[File](\"<archive>...\")\n+      .unbounded()\n+      .action((f, c) => c.copy(archiveFiles = f :: c.archiveFiles))\n+      .text(\"DAR files to load\")"
  }
]