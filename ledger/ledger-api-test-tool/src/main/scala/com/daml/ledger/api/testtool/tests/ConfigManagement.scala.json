[
  {
    "id" : "8dfc9f79-3af0-49ee-954c-2d82798321b0",
    "prId" : 3756,
    "comments" : [
      {
        "id" : "ef75ca5c-01e3-43b6-9c46-c006f0ae4909",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "I think these values have to be within the realm of possibility, otherwise the ledger will become unusable, it won't be possible to change it back again",
        "createdAt" : "2019-12-06T08:37:53Z",
        "updatedAt" : "2019-12-13T17:13:57Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0ba1727a-b92c-4857-ab42-e1852b4d2450",
        "parentId" : "ef75ca5c-01e3-43b6-9c46-c006f0ae4909",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "agreed, these should probably be higher.",
        "createdAt" : "2019-12-06T11:09:42Z",
        "updatedAt" : "2019-12-13T17:13:57Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6e626a81c096637c202b8d3ca5d09dfa4e41393",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,99 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import java.time.Instant\n+\n+import com.daml.ledger.api.testtool.infrastructure.Allocation._\n+import com.daml.ledger.api.testtool.infrastructure.Assertions._\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTestSuite}\n+import com.digitalasset.ledger.api.v1.admin.config_management_service.TimeModel\n+import com.google.protobuf.duration.Duration\n+import io.grpc.Status\n+\n+final class ConfigManagement(session: LedgerSession) extends LedgerTestSuite(session) {\n+  test(\n+    \"CMSetAndGetTimeModel\",\n+    \"It should be able to get, set and restore the time model\",\n+    allocate(NoParties)) {\n+\n+    case Participants(Participant(ledger)) =>\n+      val newTimeModel = TimeModel(\n+        minTransactionLatency = Some(Duration(0, 1)),\n+        maxClockSkew = Some(Duration(1, 2)),\n+        maxTtl = Some(Duration(2, 3))"
  },
  {
    "id" : "0bf3b1b9-97c0-4512-9acb-d13a24a57cc3",
    "prId" : 3756,
    "comments" : [
      {
        "id" : "dad5de53-9edf-46fe-963c-e381b53ddfab",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n        response1 <- ledger.getTimeModel()\r\n```\r\nSince the later responses have numbers as well, let's start with numbering from 1 (or 0 if you prefer). And the `get` prefix doesn't add much value.\r\n\r\nAlternatively use names that express what the response is about, e.g. `originalTimeModel`, `newTimeModel`, `timeModelAfterFailedUpdate`, ...",
        "createdAt" : "2019-12-06T09:36:38Z",
        "updatedAt" : "2019-12-13T17:13:57Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6e626a81c096637c202b8d3ca5d09dfa4e41393",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,99 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import java.time.Instant\n+\n+import com.daml.ledger.api.testtool.infrastructure.Allocation._\n+import com.daml.ledger.api.testtool.infrastructure.Assertions._\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTestSuite}\n+import com.digitalasset.ledger.api.v1.admin.config_management_service.TimeModel\n+import com.google.protobuf.duration.Duration\n+import io.grpc.Status\n+\n+final class ConfigManagement(session: LedgerSession) extends LedgerTestSuite(session) {\n+  test(\n+    \"CMSetAndGetTimeModel\",\n+    \"It should be able to get, set and restore the time model\",\n+    allocate(NoParties)) {\n+\n+    case Participants(Participant(ledger)) =>\n+      val newTimeModel = TimeModel(\n+        minTransactionLatency = Some(Duration(0, 1)),\n+        maxClockSkew = Some(Duration(1, 2)),\n+        maxTtl = Some(Duration(2, 3))\n+      )\n+      for {\n+        // Get the current time model\n+        getResponse <- ledger.getTimeModel()"
  }
]