[
  {
    "id" : "8d57805b-806f-46f8-aed4-f0eb529f5120",
    "prId" : 2490,
    "comments" : [
      {
        "id" : "0e5fb334-9ec5-43af-af94-b7970e9d456c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "More specifically signatory:\r\n```suggestion\r\n          // Such contract is divulged by creating a DivulgeWitness with Charlie as a signatory and exercising\r\n```",
        "createdAt" : "2019-08-12T13:55:57Z",
        "updatedAt" : "2019-08-12T14:16:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d4c15b70a1fd06cdd0549950ae0f0005b80f823",
    "line" : null,
    "diffHunk" : "@@ -10,86 +10,94 @@ import scalaz.Tag\n \n final class Witnesses(session: LedgerSession) extends LedgerTestSuite(session) {\n \n-  val respectDisclosureRules =\n+  private[this] val respectDisclosureRules =\n     LedgerTest(\"RespectDisclosureRules\", \"The ledger should respect disclosure rules\") {\n       implicit context =>\n         for {\n           Vector(alice, bob, charlie) <- allocateParties(3)\n \n-          // Create Witnesses contract\n-          (witnessTxId, witnesses) <- create(WitnessesTemplate(alice, bob, charlie))(alice)\n-          witnessTx <- transactionTreeById(witnessTxId, alice, bob, charlie)\n+          // Create the Witnesses contract as Alice and get the resulting transaction as seen by all parties\n+          (witnessesTransactionId, witnesses) <- createAndGetTransactionId(\n+            WitnessesTemplate(alice, bob, charlie))(alice)\n+          witnessesTransaction <- transactionTreeById(witnessesTransactionId, alice, bob, charlie)\n \n-          // Divulge Witnesses contract to charlie, who's just an actor and thus cannot\n-          // see it by default.\n-          (_, divulgeWitness) <- create(DivulgeWitnesses(alice, charlie))(charlie)\n-          _ <- exercise(divulgeWitness.contractId.exerciseDivulge(alice, witnesses.contractId))(\n-            alice)\n+          // Charlie is not a stakeholder of Witnesses and thus cannot see any such contract unless divulged.\n+          // Such contract is divulged by creating a DivulgeWitness with Charlie as a stakeholder and exercising"
  },
  {
    "id" : "03ab47f6-9234-4085-b1ef-b4f39540e162",
    "prId" : 2490,
    "comments" : [
      {
        "id" : "34d669c9-005d-41a5-8bc4-69810ff4db89",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "At this point the `Witnesses` contract already has been divulged. This tests that `Charlie` can exercise a choice on the divulged contract.",
        "createdAt" : "2019-08-12T13:59:26Z",
        "updatedAt" : "2019-08-12T14:16:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a42c09eb-57e3-4e1a-9593-955dc969a9e1",
        "parentId" : "34d669c9-005d-41a5-8bc4-69810ff4db89",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2490/commits/8d4c15b70a1fd06cdd0549950ae0f0005b80f823",
        "createdAt" : "2019-08-12T14:18:11Z",
        "updatedAt" : "2019-08-12T14:18:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d4c15b70a1fd06cdd0549950ae0f0005b80f823",
    "line" : null,
    "diffHunk" : "@@ -10,86 +10,94 @@ import scalaz.Tag\n \n final class Witnesses(session: LedgerSession) extends LedgerTestSuite(session) {\n \n-  val respectDisclosureRules =\n+  private[this] val respectDisclosureRules =\n     LedgerTest(\"RespectDisclosureRules\", \"The ledger should respect disclosure rules\") {\n       implicit context =>\n         for {\n           Vector(alice, bob, charlie) <- allocateParties(3)\n \n-          // Create Witnesses contract\n-          (witnessTxId, witnesses) <- create(WitnessesTemplate(alice, bob, charlie))(alice)\n-          witnessTx <- transactionTreeById(witnessTxId, alice, bob, charlie)\n+          // Create the Witnesses contract as Alice and get the resulting transaction as seen by all parties\n+          (witnessesTransactionId, witnesses) <- createAndGetTransactionId(\n+            WitnessesTemplate(alice, bob, charlie))(alice)\n+          witnessesTransaction <- transactionTreeById(witnessesTransactionId, alice, bob, charlie)\n \n-          // Divulge Witnesses contract to charlie, who's just an actor and thus cannot\n-          // see it by default.\n-          (_, divulgeWitness) <- create(DivulgeWitnesses(alice, charlie))(charlie)\n-          _ <- exercise(divulgeWitness.contractId.exerciseDivulge(alice, witnesses.contractId))(\n-            alice)\n+          // Charlie is not a stakeholder of Witnesses and thus cannot see any such contract unless divulged.\n+          // Such contract is divulged by creating a DivulgeWitness with Charlie as a stakeholder and exercising\n+          // a choice as Alice that causes divulgence (in this case, the Witnesses instance previously\n+          // created is fetched as part of the transaction).\n+          divulgeWitness <- create(DivulgeWitnesses(alice, charlie))(charlie)\n+          _ <- exercise(divulgeWitness.contractId.exerciseDivulge(_, witnesses.contractId))(alice)\n \n-          // Now, first try the non-consuming choice\n-          nonConsumingTxId <- exercise(\n-            witnesses.contractId.exerciseWitnessesNonConsumingChoice(charlie))(charlie)\n-          nonConsumingTx <- transactionTreeById(nonConsumingTxId, alice, bob, charlie)\n+          // A non-consuming choice is exercised with the expectation\n+          // that this will not cause the contract to be divulged"
  },
  {
    "id" : "5e2f20f6-2ebc-45a2-ae14-11bf18f278b3",
    "prId" : 2490,
    "comments" : [
      {
        "id" : "bf74b6ad-bd3b-4532-bf3f-1bb493d3910b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Same remark as above. The contract already has been divulged at this point.",
        "createdAt" : "2019-08-12T13:59:52Z",
        "updatedAt" : "2019-08-12T14:16:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7da214da-2996-41bd-bcc0-9e6320f0d512",
        "parentId" : "bf74b6ad-bd3b-4532-bf3f-1bb493d3910b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2490/commits/8d4c15b70a1fd06cdd0549950ae0f0005b80f823",
        "createdAt" : "2019-08-12T14:18:17Z",
        "updatedAt" : "2019-08-12T14:18:17Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d4c15b70a1fd06cdd0549950ae0f0005b80f823",
    "line" : null,
    "diffHunk" : "@@ -10,86 +10,94 @@ import scalaz.Tag\n \n final class Witnesses(session: LedgerSession) extends LedgerTestSuite(session) {\n \n-  val respectDisclosureRules =\n+  private[this] val respectDisclosureRules =\n     LedgerTest(\"RespectDisclosureRules\", \"The ledger should respect disclosure rules\") {\n       implicit context =>\n         for {\n           Vector(alice, bob, charlie) <- allocateParties(3)\n \n-          // Create Witnesses contract\n-          (witnessTxId, witnesses) <- create(WitnessesTemplate(alice, bob, charlie))(alice)\n-          witnessTx <- transactionTreeById(witnessTxId, alice, bob, charlie)\n+          // Create the Witnesses contract as Alice and get the resulting transaction as seen by all parties\n+          (witnessesTransactionId, witnesses) <- createAndGetTransactionId(\n+            WitnessesTemplate(alice, bob, charlie))(alice)\n+          witnessesTransaction <- transactionTreeById(witnessesTransactionId, alice, bob, charlie)\n \n-          // Divulge Witnesses contract to charlie, who's just an actor and thus cannot\n-          // see it by default.\n-          (_, divulgeWitness) <- create(DivulgeWitnesses(alice, charlie))(charlie)\n-          _ <- exercise(divulgeWitness.contractId.exerciseDivulge(alice, witnesses.contractId))(\n-            alice)\n+          // Charlie is not a stakeholder of Witnesses and thus cannot see any such contract unless divulged.\n+          // Such contract is divulged by creating a DivulgeWitness with Charlie as a stakeholder and exercising\n+          // a choice as Alice that causes divulgence (in this case, the Witnesses instance previously\n+          // created is fetched as part of the transaction).\n+          divulgeWitness <- create(DivulgeWitnesses(alice, charlie))(charlie)\n+          _ <- exercise(divulgeWitness.contractId.exerciseDivulge(_, witnesses.contractId))(alice)\n \n-          // Now, first try the non-consuming choice\n-          nonConsumingTxId <- exercise(\n-            witnesses.contractId.exerciseWitnessesNonConsumingChoice(charlie))(charlie)\n-          nonConsumingTx <- transactionTreeById(nonConsumingTxId, alice, bob, charlie)\n+          // A non-consuming choice is exercised with the expectation\n+          // that this will not cause the contract to be divulged\n+          // The tree is fetched from the identifier to ensure we get the witnesses as seen by all parties\n+          nonConsuming <- exercise(witnesses.contractId.exerciseWitnessesNonConsumingChoice)(\n+            charlie)\n+          nonConsumingTransaction <- transactionTreeById(\n+            nonConsuming.transactionId,\n+            alice,\n+            bob,\n+            charlie)\n \n-          // And then the consuming one\n-          consumingTxId <- exercise(witnesses.contractId.exerciseWitnessesChoice(charlie))(charlie)\n-          consumingTx <- transactionTreeById(consumingTxId, alice, bob, charlie)\n+          // A consuming choice is exercised with the expectation\n+          // that this will cause the contract to be divulged"
  }
]