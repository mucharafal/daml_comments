[
  {
    "id" : "e91f86f3-138d-4744-919b-49a4e218a8f9",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "0472cbab-fbc0-4fc9-a906-32257bf2ed9e",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "You could change it to `submitAndWaitForTransactionTree`, although it'll have slightly different semantics than the current implementation, which loads all events visible to all `parties`.",
        "createdAt" : "2019-08-06T13:22:34Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1f129f09-1d9f-48fb-bbdb-ce02206d5adb",
        "parentId" : "0472cbab-fbc0-4fc9-a906-32257bf2ed9e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "As discussed offline, the semantic tests need broader visibility.",
        "createdAt" : "2019-08-06T15:16:10Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,78 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.rewrite.testtool.infrastructure\n+\n+import com.digitalasset.daml.lf.command.Commands\n+import com.digitalasset.daml.lf.data.Ref.Party\n+import com.digitalasset.daml.lf.data.{Ref, Time}\n+import com.digitalasset.daml.lf.engine.Event\n+import com.digitalasset.daml.lf.engine.testing.SemanticTester\n+import com.digitalasset.daml.lf.language.Ast\n+import com.digitalasset.daml.lf.value.Value\n+import com.digitalasset.ledger.api.v1.transaction.TransactionTree\n+import com.digitalasset.platform.common.PlatformTypes.Events\n+import com.digitalasset.platform.participant.util.LfEngineToApi\n+import com.digitalasset.platform.semantictest.ApiScenarioTransform\n+\n+import scala.concurrent.Future\n+import scala.concurrent.duration.DurationLong\n+\n+private[infrastructure] final class SemanticTesterLedger(bindings: LedgerBindings)(\n+    parties: Set[Ref.Party],\n+    packages: Map[Ref.PackageId, Ast.Package])(implicit context: LedgerTestContext)\n+    extends SemanticTester.GenericLedger {\n+\n+  private def lfCommandToApiCommand(party: String, commands: Commands) =\n+    for (ledgerId <- context.ledgerId)\n+      yield\n+        LfEngineToApi.lfCommandToApiCommand(\n+          party,\n+          ledgerId,\n+          commands.commandsReference,\n+          context.applicationId,\n+          Some(LfEngineToApi.toTimestamp(commands.ledgerEffectiveTime.toInstant)),\n+          Some(LfEngineToApi.toTimestamp(commands.ledgerEffectiveTime.toInstant.plusSeconds(30L))),\n+          commands\n+        )\n+\n+  private val apiScenarioTransform = for (ledgerId <- context.ledgerId)\n+    yield new ApiScenarioTransform(ledgerId, packages)\n+\n+  private def apiTransactionToLfEvents(\n+      tree: TransactionTree): Future[Events[String, Value.AbsoluteContractId]] =\n+    for {\n+      transform <- apiScenarioTransform\n+      result = transform.eventsFromApiTransaction(tree)\n+      future <- result.fold(Future.failed, Future.successful)\n+    } yield future\n+\n+  override type EventNodeId = String\n+\n+  override def submit(\n+      party: Party,\n+      lfCommands: Commands,\n+      opDescription: String): Future[Event.Events[\n+    EventNodeId,\n+    Value.AbsoluteContractId,\n+    Value.VersionedValue[Value.AbsoluteContractId]]] =\n+    for {\n+      apiCommands <- lfCommandToApiCommand(party, lfCommands)\n+      command +: commands = apiCommands.commands.map(_.command)\n+      id <- bindings.submitAndWaitForTransactionId("
  }
]