[
  {
    "id" : "a1fe4f02-1c4b-48bf-b106-fb1b4325b9e4",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "74884f4b-ebe7-4663-ba92-3f493e87165e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The short test identifier should be different for each test (it's used to generate unique but recognizable party and command identifiers).",
        "createdAt" : "2019-09-24T08:09:26Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import io.grpc.Status\n+\n+final class Packages(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  /** A package ID that is guaranteed to not be uploaded */\n+  val unknownPackageId = \" \"\n+\n+  val listPackages =\n+    LedgerTest(\"Packages\", \"Listing packages should return a result\") { context =>"
  },
  {
    "id" : "f43bb6d4-3f1f-4b10-915a-f606aba9510f",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "db7e83d8-7eb4-47ea-9502-f2ae3ed93b42",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Is the message empty here?",
        "createdAt" : "2019-09-24T08:10:45Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b33acd92-aba7-4dcc-b663-b39373a14522",
        "parentId" : "db7e83d8-7eb4-47ea-9502-f2ae3ed93b42",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Based on your previous reply, empty string means that we either don't care about the pattern (it matches any string) or the description is null (and turned into an empty string).",
        "createdAt" : "2019-09-24T09:25:21Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "29011a6e-252b-4750-a6de-ef8f3d75f79e",
        "parentId" : "db7e83d8-7eb4-47ea-9502-f2ae3ed93b42",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The description for this status is `null`, and  `assertGrpcError()` maps null descriptions to an empty string.",
        "createdAt" : "2019-09-24T09:25:31Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : 47,
    "diffHunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import io.grpc.Status\n+\n+final class Packages(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  /** A package ID that is guaranteed to not be uploaded */\n+  val unknownPackageId = \" \"\n+\n+  val listPackages =\n+    LedgerTest(\"Packages\", \"Listing packages should return a result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        knownPackages <- ledger.listPackages()\n+      } yield\n+        assert(\n+          knownPackages.size >= 3,\n+          s\"List of packages was expected to contain at least 3 packages, got ${knownPackages.size} instead.\")\n+    }\n+\n+  val getPackage =\n+    LedgerTest(\"Packages\", \"Getting package content should return a valid result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        somePackageId <- ledger.listPackages().map(_.headOption.getOrElse(fail(\"No package found\")))\n+        somePackage <- ledger.getPackage(somePackageId)\n+      } yield {\n+        assert(somePackage.hash.length > 0, s\"Package $somePackageId has an empty hash.\")\n+        assert(somePackage.archivePayload.size() >= 0, s\"Package $somePackageId has zero size.\")\n+      }\n+    }\n+\n+  val getUnknownPackage =\n+    LedgerTest(\"Packages\", \"Getting package content for an unknown package should fail\") {\n+      context =>\n+        for {\n+          ledger <- context.participant()\n+          failure <- ledger.getPackage(unknownPackageId).failed\n+        } yield {\n+          assertGrpcError(failure, Status.Code.NOT_FOUND, \"\")"
  },
  {
    "id" : "3843504b-a05c-49eb-aa14-e4ff9adf90c3",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "1d4dd956-cda5-4965-b700-28617401eb44",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Very good making the failure message explicit. :slightly_smiling_face: ",
        "createdAt" : "2019-09-24T08:11:34Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : 55,
    "diffHunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import io.grpc.Status\n+\n+final class Packages(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  /** A package ID that is guaranteed to not be uploaded */\n+  val unknownPackageId = \" \"\n+\n+  val listPackages =\n+    LedgerTest(\"Packages\", \"Listing packages should return a result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        knownPackages <- ledger.listPackages()\n+      } yield\n+        assert(\n+          knownPackages.size >= 3,\n+          s\"List of packages was expected to contain at least 3 packages, got ${knownPackages.size} instead.\")\n+    }\n+\n+  val getPackage =\n+    LedgerTest(\"Packages\", \"Getting package content should return a valid result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        somePackageId <- ledger.listPackages().map(_.headOption.getOrElse(fail(\"No package found\")))\n+        somePackage <- ledger.getPackage(somePackageId)\n+      } yield {\n+        assert(somePackage.hash.length > 0, s\"Package $somePackageId has an empty hash.\")\n+        assert(somePackage.archivePayload.size() >= 0, s\"Package $somePackageId has zero size.\")\n+      }\n+    }\n+\n+  val getUnknownPackage =\n+    LedgerTest(\"Packages\", \"Getting package content for an unknown package should fail\") {\n+      context =>\n+        for {\n+          ledger <- context.participant()\n+          failure <- ledger.getPackage(unknownPackageId).failed\n+        } yield {\n+          assertGrpcError(failure, Status.Code.NOT_FOUND, \"\")\n+        }\n+    }\n+\n+  val getPackageStatus =\n+    LedgerTest(\"Packages\", \"Getting package status should return a valid result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        somePackageId <- ledger.listPackages().map(_.headOption.getOrElse(fail(\"No package found\")))"
  },
  {
    "id" : "408a2958-45c6-4ffb-98e5-29c32f07d502",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "dd0a6458-8059-4bc9-a1b9-d3182c1a96ae",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: all tests can be `private[this]`.",
        "createdAt" : "2019-09-24T08:12:03Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import io.grpc.Status\n+\n+final class Packages(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  /** A package ID that is guaranteed to not be uploaded */\n+  val unknownPackageId = \" \"\n+\n+  val listPackages =\n+    LedgerTest(\"Packages\", \"Listing packages should return a result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        knownPackages <- ledger.listPackages()\n+      } yield\n+        assert(\n+          knownPackages.size >= 3,\n+          s\"List of packages was expected to contain at least 3 packages, got ${knownPackages.size} instead.\")\n+    }\n+\n+  val getPackage =\n+    LedgerTest(\"Packages\", \"Getting package content should return a valid result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        somePackageId <- ledger.listPackages().map(_.headOption.getOrElse(fail(\"No package found\")))\n+        somePackage <- ledger.getPackage(somePackageId)\n+      } yield {\n+        assert(somePackage.hash.length > 0, s\"Package $somePackageId has an empty hash.\")\n+        assert(somePackage.archivePayload.size() >= 0, s\"Package $somePackageId has zero size.\")\n+      }\n+    }\n+\n+  val getUnknownPackage =\n+    LedgerTest(\"Packages\", \"Getting package content for an unknown package should fail\") {\n+      context =>\n+        for {\n+          ledger <- context.participant()\n+          failure <- ledger.getPackage(unknownPackageId).failed\n+        } yield {\n+          assertGrpcError(failure, Status.Code.NOT_FOUND, \"\")\n+        }\n+    }\n+\n+  val getPackageStatus =\n+    LedgerTest(\"Packages\", \"Getting package status should return a valid result\") { context =>\n+      for {\n+        ledger <- context.participant()\n+        somePackageId <- ledger.listPackages().map(_.headOption.getOrElse(fail(\"No package found\")))\n+        status <- ledger.getPackageStatus(somePackageId)\n+      } yield {\n+        assert(status.isRegistered, s\"Package $somePackageId is not registered.\")\n+      }\n+    }\n+\n+  val getUnknownPackageStatus ="
  }
]