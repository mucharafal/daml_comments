[
  {
    "id" : "97cbe214-7308-493d-b0c5-d4a0b78db2f2",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "eb496800-6742-48e4-9458-b3b2c34c2996",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Why are you taking the whole configuration?",
        "createdAt" : "2020-09-07T10:03:26Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81474118-226e-4ad1-b826-6490a01ec1d7",
        "parentId" : "eb496800-6742-48e4-9458-b3b2c34c2996",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good point. Fixed.",
        "createdAt" : "2020-09-07T12:51:21Z",
        "updatedAt" : "2020-09-07T12:51:21Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : null,
    "diffHunk" : "@@ -3,38 +3,45 @@\n \n package com.daml.ledger.api.testtool.infrastructure\n \n-import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantSessionManager\n+import com.daml.ledger.api.testtool.infrastructure.participant.{\n+  ParticipantSession,\n+  ParticipantSessionManager\n+}\n \n+import scala.collection.immutable\n import scala.concurrent.{ExecutionContext, Future}\n \n-private[testtool] final class LedgerSession(\n-    val config: LedgerSessionConfiguration,\n-    participantSessionManager: ParticipantSessionManager,\n+private[infrastructure] final class LedgerSession(\n+    shuffleParticipants: Boolean,\n+    participantSessions: immutable.Seq[(String, ParticipantSession)],\n )(implicit val executionContext: ExecutionContext) {\n-\n-  private[this] val endpointIdProvider =\n-    Identification.circularWithIndex(Identification.greekAlphabet)\n-\n-  private[this] val participantSessions =\n-    Future\n-      .sequence(config.participants.map(hostAndPort =>\n-        participantSessionManager.getOrCreate(config.forParticipant(hostAndPort))))\n-      .map(_.map(endpointIdProvider() -> _))\n-\n-  private[testtool] def createTestContext(\n+  private[infrastructure] def createTestContext(\n       applicationId: String,\n       identifierSuffix: String,\n   ): Future[LedgerTestContext] =\n-    participantSessions.flatMap { sessions =>\n-      Future\n-        .sequence(\n-          (if (config.shuffleParticipants) scala.util.Random.shuffle(sessions) else sessions)\n-            .map {\n-              case (endpointId, session) =>\n-                session.createTestContext(endpointId, applicationId, identifierSuffix)\n-            }\n-        )\n-        .map(new LedgerTestContext(_))\n-    }\n+    Future\n+      .sequence(\n+        (if (shuffleParticipants) scala.util.Random.shuffle(participantSessions)\n+         else participantSessions)\n+          .map {\n+            case (endpointId, session) =>\n+              session.createTestContext(endpointId, applicationId, identifierSuffix)\n+          }\n+      )\n+      .map(new LedgerTestContext(_))\n+}\n \n+object LedgerSession {\n+  def apply(\n+      config: LedgerSessionConfiguration,"
  },
  {
    "id" : "902915f3-2f5d-4db5-baee-9f681d88d216",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "4ff70c5c-1385-4586-ba84-536717c761d1",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`inputSessions`",
        "createdAt" : "2020-02-10T09:57:14Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "03d7f2d0-2829-4ac7-a818-53343148719c",
        "parentId" : "4ff70c5c-1385-4586-ba84-536717c761d1",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I'll keep the original naming as it's unambiguous here.",
        "createdAt" : "2020-02-10T12:22:35Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : 20,
    "diffHunk" : "@@ -33,8 +38,11 @@ private[testtool] final class LedgerSession(\n       identifierSuffix: String,\n   ): Future[LedgerTestContext] =\n     participantSessions.flatMap { sessions =>"
  },
  {
    "id" : "147a048c-594e-4fb7-917f-491a094f8654",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "e66be7c9-de6a-456f-b5a1-d4f7595eb9c6",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`usedSessions` or simply `sessions` may be a better name here.",
        "createdAt" : "2020-02-10T09:58:07Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c0be4426-a648-45cc-9997-55dd9247c54e",
        "parentId" : "e66be7c9-de6a-456f-b5a1-d4f7595eb9c6",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-02-10T12:22:24Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : null,
    "diffHunk" : "@@ -33,8 +38,11 @@ private[testtool] final class LedgerSession(\n       identifierSuffix: String,\n   ): Future[LedgerTestContext] =\n     participantSessions.flatMap { sessions =>\n+      val sessions2 ="
  },
  {
    "id" : "dfbe2f5c-90c9-487e-9c68-5c4043c698fa",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "10e0c04b-c9c8-4816-bba6-6a0739712963",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`.map(_.map(...))`",
        "createdAt" : "2020-02-10T09:59:39Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e851da6d-8c3e-4db1-bd2d-6a17201710a5",
        "parentId" : "10e0c04b-c9c8-4816-bba6-6a0739712963",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-02-10T12:23:04Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : null,
    "diffHunk" : "@@ -23,7 +23,12 @@ private[testtool] final class LedgerSession(\n       .sequence(config.participants.map {\n         case (host, port) =>\n           participantSessionManager.getOrCreate(\n-            ParticipantSessionConfiguration(host, port, config.ssl, config.commandTtlFactor),\n+            ParticipantSessionConfiguration(\n+              host,\n+              port,\n+              config.ssl,\n+              config.commandTtlFactor,\n+              config.waitForParties),\n           )\n       })\n       .map(sessions => sessions.map(endpointIdProvider() -> _))"
  },
  {
    "id" : "8ee4a993-a91d-4f01-8561-1808160d4164",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "2c044986-ec0f-4707-93ae-984c48065c0b",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This makes sense, but in which context would it be a _bad_ idea?",
        "createdAt" : "2020-02-10T10:14:14Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8d41d2e5-ba51-4a36-86dd-3ddfbd7facb8",
        "parentId" : "2c044986-ec0f-4707-93ae-984c48065c0b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "When you have two participants that are configured in a specific way and you want tests to always it the two participants in the same order (within the context of a single test).",
        "createdAt" : "2020-02-10T10:28:13Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fd750e18-6ddb-4775-892a-a44a78f77a51",
        "parentId" : "2c044986-ec0f-4707-93ae-984c48065c0b",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "That sort of makes sense, except we use a ring buffer, so adding a test _before_ that test case will change the order. In addition, we don't always run tests in the same order, so the participant order might be different from run to run.",
        "createdAt" : "2020-02-10T10:34:21Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c121a973-9002-4d62-aa78-2f3af51074db",
        "parentId" : "2c044986-ec0f-4707-93ae-984c48065c0b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The participant sessions are initialized on construction based on the ring buffer, so every test case will always pick either the first or the first two participants passed to the application (because we don't have any test case that picks up more than two participants).",
        "createdAt" : "2020-02-10T11:51:37Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a7817f46-0116-4532-8c28-bb5f3e37b8f6",
        "parentId" : "2c044986-ec0f-4707-93ae-984c48065c0b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "My comment refers to the behavior _without_ this newly introduced flag, which allows to shuffle participants against which the test is ran.",
        "createdAt" : "2020-02-10T11:52:23Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : null,
    "diffHunk" : "@@ -33,8 +38,11 @@ private[testtool] final class LedgerSession(\n       identifierSuffix: String,\n   ): Future[LedgerTestContext] =\n     participantSessions.flatMap { sessions =>\n+      val sessions2 =\n+        if (config.shuffleParticipants) scala.util.Random.shuffle(sessions)"
  },
  {
    "id" : "4f4d5213-ef77-4ab7-a73e-c0d2b2eccc26",
    "prId" : 2508,
    "comments" : [
      {
        "id" : "495c5689-73ef-4c2d-8f5e-bc3e0b4e70a1",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The ledger services sit at a lower level of abstraction and I don't think these should be freely available outside of this class.",
        "createdAt" : "2019-08-13T12:10:15Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ccea8cb-06fb-40a0-99ce-a14fe5af122f",
        "parentId" : "495c5689-73ef-4c2d-8f5e-bc3e0b4e70a1",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Having read the other tests, I see why you opened up the bindings but it looks like the services do not need to be public.",
        "createdAt" : "2019-08-13T12:30:10Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2f7e5b7654159e3a35c0c4c116f43779c18dedc8",
    "line" : null,
    "diffHunk" : "@@ -23,7 +23,9 @@ private[testtool] final class LedgerSession private (\n \n   private[this] val logger = LoggerFactory.getLogger(classOf[LedgerSession])\n \n-  private[this] val bindings: LedgerBindings = new LedgerBindings(channel, config.commandTtlFactor)\n+  val services: LedgerServices = new LedgerServices(channel)"
  },
  {
    "id" : "28fc6dad-9b00-4098-80c2-ed474391ba88",
    "prId" : 2508,
    "comments" : [
      {
        "id" : "7e2dcf01-7f51-4459-9688-6c845def5dde",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The ledger bindings sit at a lower level of abstraction and I don't think these should be freely available outside of this class.",
        "createdAt" : "2019-08-13T12:10:27Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6eef7ec8-13f4-45ca-bde8-869c64ef6e03",
        "parentId" : "7e2dcf01-7f51-4459-9688-6c845def5dde",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Having read the following code I see why you made this change. I would still recommend to revert it. Rather, I would suggest to expose them through the `LedgerTestContext` and the `LedgerTestSuite`.",
        "createdAt" : "2019-08-13T13:03:01Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "97885f15-ff28-4a98-aae2-8d5f3a16d978",
        "parentId" : "7e2dcf01-7f51-4459-9688-6c845def5dde",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This would also allow to expose a method that does not require to take an application identifier and command identifier, making it shorter and less prone to error.",
        "createdAt" : "2019-08-13T13:08:10Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fcfeeef6-0881-4b53-a36a-ce02297d1c33",
        "parentId" : "7e2dcf01-7f51-4459-9688-6c845def5dde",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The exposed `submitAndWait` can also take a `Template` rather then a command to make the usage even shorter.",
        "createdAt" : "2019-08-13T13:13:16Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a2570cdd-d1c6-45e6-8a8b-55f6556aceda",
        "parentId" : "7e2dcf01-7f51-4459-9688-6c845def5dde",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Would you then expose these methods with the possibility to override the ledger id (i.e. provide one that is very likely to fail) just for this test? I think we'll probably need to go down directly to the services for other tests as well.",
        "createdAt" : "2019-08-13T13:38:39Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a8c32f8-00ec-4a77-af77-cafa9e4c5ab8",
        "parentId" : "7e2dcf01-7f51-4459-9688-6c845def5dde",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would create a method that explicitly allows to create invalid commands, e.g. with an invalid ledger identifier and/or a repeated command identifier.",
        "createdAt" : "2019-08-13T13:58:10Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "80f89bd6-67dc-453c-8ebd-410e5197fcae",
        "parentId" : "7e2dcf01-7f51-4459-9688-6c845def5dde",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Your point makes a lot of sense, it took me a while today to get to it. I solved this by allowing the client to pass `pollutants`, i.e. lens transformation that can mutate an outgoing request. The end result seems reasonable. PR coming soon.",
        "createdAt" : "2019-08-14T16:52:12Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2f7e5b7654159e3a35c0c4c116f43779c18dedc8",
    "line" : null,
    "diffHunk" : "@@ -23,7 +23,9 @@ private[testtool] final class LedgerSession private (\n \n   private[this] val logger = LoggerFactory.getLogger(classOf[LedgerSession])\n \n-  private[this] val bindings: LedgerBindings = new LedgerBindings(channel, config.commandTtlFactor)\n+  val services: LedgerServices = new LedgerServices(channel)\n+\n+  val bindings: LedgerBindings = new LedgerBindings(services, config.commandTtlFactor)"
  }
]