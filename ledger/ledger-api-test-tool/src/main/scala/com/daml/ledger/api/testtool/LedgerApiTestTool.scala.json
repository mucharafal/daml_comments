[
  {
    "id" : "96db1cce-247f-4ca4-8815-d49dbcdecf67",
    "prId" : 7756,
    "comments" : [
      {
        "id" : "cca30b12-a5a8-48a1-8984-c22430dbb679",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Clever. Now remove it. ðŸ˜‚ ",
        "createdAt" : "2020-10-21T10:05:59Z",
        "updatedAt" : "2020-10-21T10:33:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d057c427-5f29-4d0b-8832-179260bd6cbf",
        "parentId" : "cca30b12-a5a8-48a1-8984-c22430dbb679",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "How did I manage to leave this in? :joy: ",
        "createdAt" : "2020-10-21T10:30:19Z",
        "updatedAt" : "2020-10-21T10:33:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "97386d4f048437a7bca48f9f19aa77e1748e7b95",
    "line" : null,
    "diffHunk" : "@@ -83,6 +83,10 @@ object LedgerApiTestTool {\n   def main(args: Array[String]): Unit = {\n \n     val config = Cli.parse(args).getOrElse(sys.exit(1))\n+    println(config)\n+    if (Math.random() < 1) {\n+      sys.exit(0)\n+    }"
  },
  {
    "id" : "60584541-2721-44f9-b051-d2ef6a953d93",
    "prId" : 7732,
    "comments" : [
      {
        "id" : "2f7219b7-6edb-443e-ba68-77b5c46d6153",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      skipDarUpload = config.skipDarUpload,\r\n```",
        "createdAt" : "2020-10-19T12:42:26Z",
        "updatedAt" : "2020-10-20T09:47:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b8e6353a94e633a5ccbee4aeec2e63645436d1fb",
    "line" : null,
    "diffHunk" : "@@ -187,5 +187,6 @@ object LedgerApiTestTool {\n       identifierSuffix,\n       config.timeoutScaleFactor,\n       concurrencyOverride.getOrElse(config.concurrentTestRuns),\n+      skipDarUpload = config.skipDarUpload"
  },
  {
    "id" : "e025e50e-ac1d-4b19-a2d2-59fd792abb93",
    "prId" : 7680,
    "comments" : [
      {
        "id" : "66347244-029b-4920-a8ec-33a0693a18be",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would recommend creating a type around this (e.g. `LedgerTestRunInfo`). We can add more information that needs to be fed to the reporter afterwards. In the meantime, it would be easier to understand what's the purpose of this.",
        "createdAt" : "2020-10-14T11:48:36Z",
        "updatedAt" : "2020-10-14T13:23:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3978c9b9-3594-4719-916b-f6661d8e9ba2",
        "parentId" : "66347244-029b-4920-a8ec-33a0693a18be",
        "author" : {
          "login" : "mzagorski-da",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/72492842?v=4"
        },
        "body" : "As long as we have just to parameters and type will be only used to pack and immediately unpack values inside, I'm in favour of sticking to 2 plain params. I agree that when we need to put more params here, or reuse somehere, case class should be used. ",
        "createdAt" : "2020-10-14T12:15:59Z",
        "updatedAt" : "2020-10-14T13:23:42Z",
        "lastEditedBy" : {
          "login" : "mzagorski-da",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/72492842?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ca37e035f480d8f9c36af4fce8b5c8485251dfbc",
    "line" : 5,
    "diffHunk" : "@@ -160,7 +160,7 @@ object LedgerApiTestTool {\n         new ColorizedPrintStreamReporter(\n           System.out,\n           config.verbose,\n-        ).report(summaries)\n+        ).report(summaries, identifierSuffix)"
  },
  {
    "id" : "d66bfdcc-697d-4df6-8678-d321b3a690bc",
    "prId" : 7294,
    "comments" : [
      {
        "id" : "c7cc9787-793d-426f-b7c2-6f150c180a35",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "You're recreating over and over again all the tests suites across the entire class.\r\n\r\nPlease create a variable, call `Test.all(config)` once and use that value.",
        "createdAt" : "2020-09-02T12:23:53Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6b664886-bed8-4268-bf96-a2283da5d63f",
        "parentId" : "c7cc9787-793d-426f-b7c2-6f150c180a35",
        "author" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "body" : "addressed comment",
        "createdAt" : "2020-09-03T14:42:05Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8ec3a3f3aa8d156744841bab938f5e26ddc6492d",
    "line" : null,
    "diffHunk" : "@@ -104,7 +104,7 @@ object LedgerApiTestTool {\n     }\n \n     val allTestCaseNames: Set[String] =\n-      (Tests.all ++ Tests.retired).flatMap(_.tests).map(_.name).toSet\n+      (Tests.all(config) ++ Tests.retired).flatMap(_.tests).map(_.name).toSet"
  },
  {
    "id" : "1cb412e9-9299-4ffe-b531-4a98a4684760",
    "prId" : 7163,
    "comments" : [
      {
        "id" : "b3c964b0-f0ba-4f99-a6d7-e68140f8e627",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "We may be able to get rid of this option entirely, or at least deprecate it, if uploading the DARs is the only use case. However, it's probably useful for debugging too (at least), so I didn't want to do that without asking.",
        "createdAt" : "2020-08-18T10:15:13Z",
        "updatedAt" : "2020-08-18T11:48:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "716ff4749b8fae388baa7d58fc7faa67fcf772a5",
    "line" : 20,
    "diffHunk" : "@@ -93,12 +94,7 @@ object LedgerApiTestTool {\n     }\n \n     if (config.extract) {"
  },
  {
    "id" : "d3f10769-ae85-4721-8fa1-85cca5003ae1",
    "prId" : 6682,
    "comments" : [
      {
        "id" : "00fbb675-e069-4b5a-91c5-03992fcc7268",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Perhaps this is a case for tagged string types.",
        "createdAt" : "2020-07-10T10:04:47Z",
        "updatedAt" : "2020-07-10T10:16:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "90b0692d5f6b2035df3d03696aa4669b8004a333",
    "line" : 6,
    "diffHunk" : "@@ -107,7 +107,8 @@ object LedgerApiTestTool {\n       sys.exit(0)\n     }\n \n-    val allTestCaseNames: Set[String] = (Tests.all ++ Tests.retired).map(_.name).toSet\n+    val allTestCaseNames: Set[String] =\n+      (Tests.all ++ Tests.retired).flatMap(_.tests).map(_.name).toSet"
  },
  {
    "id" : "fac9c98c-97ff-439c-814f-26c94a2f9ce0",
    "prId" : 6506,
    "comments" : [
      {
        "id" : "83a6cc9a-e3ed-4867-9c1f-7a131065e2f6",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can you sort this please, just for my sanity?",
        "createdAt" : "2020-06-26T09:54:22Z",
        "updatedAt" : "2020-06-26T11:19:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d4342e4db17283312fc898b18a846df59d9b908",
    "line" : null,
    "diffHunk" : "@@ -92,10 +92,10 @@ object LedgerApiTestTool {\n     if (config.extract) {\n       // This must be kept aligned manually with artifacts declared in /ledger/test-common/BUILD.bazel.\n       extractResources(\n-        \"/ledger/test-common/SemanticTests.dar\",\n-        \"/ledger/test-common/Test-stable.dar\",\n+        \"/ledger/test-common/semantic-tests.dar\",\n+        \"/ledger/test-common/model-tests.dar\",\n         \"/ledger/test-common/Test-dev.dar\",\n-        \"/ledger/test-common/PerformanceTests.dar\",\n+        \"/ledger/test-common/performance-tests.dar\","
  },
  {
    "id" : "d49a38a5-9d67-43dd-8f90-b38c0444f991",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "beb3ae2c-c645-41fb-9eda-08e3198d44cd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Totally unrelated but 64 seems like a weird choice :thinking: ",
        "createdAt" : "2020-06-23T07:15:12Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e1efe56d-56b9-4d7e-b2b8-4af2431c9b50",
        "parentId" : "beb3ae2c-c645-41fb-9eda-08e3198d44cd",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I believe @rautenrieth-da picked it, based on [`sysexits`](https://man.openbsd.org/sysexits).",
        "createdAt" : "2020-06-23T07:46:53Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : 75,
    "diffHunk" : "@@ -88,28 +104,25 @@ object LedgerApiTestTool {\n       sys.exit(0)\n     }\n \n-    val missingTests = (config.included ++ config.excluded).filterNot(Tests.all(config).contains)\n+    val cases: Tests.Tests => Iterable[LedgerTestCase] = m => m.values.flatMap(_.tests)\n+    val matches: Iterable[String] => LedgerTestCase => Boolean = prefixes =>\n+      test => prefixes.exists(prefix => test.name.startsWith(prefix))\n+\n+    val allTestCaseNames: Set[String] = cases(Tests.all(config)).map(_.name).toSet\n+    val missingTests = (config.included ++ config.excluded).filterNot(prefix =>\n+      allTestCaseNames.exists(_.startsWith(prefix)))\n     if (missingTests.nonEmpty) {\n-      println(\"The following tests could not be found:\")\n+      println(\"The following exclusion or inclusion does not match any test:\")\n       missingTests.foreach { testName =>\n         println(s\"  - $testName\")\n       }\n       sys.exit(64)"
  },
  {
    "id" : "8e844be9-558d-4793-9be8-db61e5153f35",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "8dcf4360-82d9-4410-b5a3-09e8a5601de1",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The function signature is generic, but the implementation is quite specific. Mentioning the tests in the function name is more honest and memorable. Furthermore, it wouldn't shadow `print` from the `Prelude`.",
        "createdAt" : "2020-06-23T10:10:55Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6b366881-bd33-4987-8be8-a316c30166a9",
        "parentId" : "8dcf4360-82d9-4410-b5a3-09e8a5601de1",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Renamed to `printListOfTests`.",
        "createdAt" : "2020-06-23T10:25:12Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -38,18 +38,29 @@ object LedgerApiTestTool {\n   private def exitCode(summaries: Vector[LedgerTestSummary], expectFailure: Boolean): Int =\n     if (summaries.exists(_.result.isLeft) == expectFailure) 0 else 1\n \n-  private def printAvailableTests(config: Config): Unit = {\n+  private def print[A](defaults: Seq[A], optionals: Seq[A])(t: A => String): Unit = {"
  },
  {
    "id" : "9201f707-a3c6-46e7-b01d-a5eccfa8a54a",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "687dda01-dd8d-4412-be30-aca06b855330",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Related to the shadowing I mentioned before, reading this in isolation would look a bit weird, given that `print` is defined in the `Prelude`.",
        "createdAt" : "2020-06-23T10:12:42Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -38,18 +38,29 @@ object LedgerApiTestTool {\n   private def exitCode(summaries: Vector[LedgerTestSummary], expectFailure: Boolean): Int =\n     if (summaries.exists(_.result.isLeft) == expectFailure) 0 else 1\n \n-  private def printAvailableTests(config: Config): Unit = {\n+  private def print[A](defaults: Seq[A], optionals: Seq[A])(t: A => String): Unit = {\n     println(\"Tests marked with * are run by default.\")\n     println(\n       \"You can include extra tests with `--include=TEST-NAME`, or run all tests with `--all-tests`.\\n\")\n-    Tests.default.keySet.toSeq.sorted.map(_ + \" *\").foreach(println(_))\n-    Tests.optional(config).keySet.toSeq.sorted.foreach(println(_))\n+    defaults.map(t(_) + \" * \").sorted.foreach(println(_))\n+    optionals.map(t).sorted.foreach(println(_))\n \n     println(\"\\nAlternatively, you can run performance tests.\")\n     println(\n       \"Performance tests are not run by default, but can be run with `--perf-tests=TEST-NAME`.\\n\")\n     Tests.PerformanceTestsKeys.sorted.foreach(println(_))\n   }\n+  private def printAvailableTestSuites(config: Config): Unit = {\n+    println(\"Listing test suites. Run with --list-all to see individual tests.\")\n+    print(Tests.default.values.toSeq, Tests.optional(config).values.toSeq)(_.name)"
  },
  {
    "id" : "5301c54c-d94e-498d-a5ef-bf17dcf5c199",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "5c698b92-a3db-414b-b453-0bbf8c4fc5b9",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we rename `t` to `getName` or something?",
        "createdAt" : "2020-06-23T10:34:47Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2364bd48-2b17-48c8-94c6-833a74822f9c",
        "parentId" : "5c698b92-a3db-414b-b453-0bbf8c4fc5b9",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Sure.",
        "createdAt" : "2020-06-23T10:44:10Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -38,18 +38,29 @@ object LedgerApiTestTool {\n   private def exitCode(summaries: Vector[LedgerTestSummary], expectFailure: Boolean): Int =\n     if (summaries.exists(_.result.isLeft) == expectFailure) 0 else 1\n \n-  private def printAvailableTests(config: Config): Unit = {\n+  private def printListOfTests[A](defaults: Seq[A], optionals: Seq[A])(t: A => String): Unit = {"
  },
  {
    "id" : "8d1843a2-40ee-41b7-9a83-46b2bf62068c",
    "prId" : 5466,
    "comments" : [
      {
        "id" : "f012421d-9ee6-41c2-a67a-867499a6fff2",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      // This must be kept aligned manually with artifacts declared in /ledger/test-common/BUILD.bazel.\r\n```",
        "createdAt" : "2020-04-07T11:51:29Z",
        "updatedAt" : "2020-04-07T11:52:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e1ce0403eaf4bf47cba892513159a4903c35cd4e",
    "line" : null,
    "diffHunk" : "@@ -74,11 +74,12 @@ object LedgerApiTestTool {\n     }\n \n     if (config.extract) {\n+      // [FT] This must be kept aligned manually with artifacts declared in /ledger/test-common/BUILD.bazel"
  },
  {
    "id" : "aa809f44-d3ec-44cb-a774-08d5188d0d8c",
    "prId" : 5377,
    "comments" : [
      {
        "id" : "bf9c9ff7-ca4e-4d9a-b482-d63f5b07c73d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Please use an `Option[Int]` here. This isn't C. ðŸ˜› ",
        "createdAt" : "2020-04-03T15:17:21Z",
        "updatedAt" : "2020-04-06T12:50:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f318d1cf-4410-45e1-9ee7-b49cc781c621",
        "parentId" : "bf9c9ff7-ca4e-4d9a-b482-d63f5b07c73d",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Don't really see an advantage here (more complex to call, possibly additional GC pressure) but OK",
        "createdAt" : "2020-04-03T15:31:50Z",
        "updatedAt" : "2020-04-06T12:50:22Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70cc33cce879b665e8969f8d4f92cb39b9b489d5",
    "line" : null,
    "diffHunk" : "@@ -130,4 +134,21 @@ object LedgerApiTestTool {\n     }\n   }\n \n+  private[this] def newLedgerSuiteRunner(\n+      config: Config,\n+      suites: Iterable[LedgerSession => LedgerTestSuite],\n+      concurrencyOverride: Int = -1): LedgerTestSuiteRunner ="
  },
  {
    "id" : "784675a5-bbc7-4779-b62f-52cba59619e9",
    "prId" : 5377,
    "comments" : [
      {
        "id" : "2598da4c-66a9-495c-81e5-6f69f33ccd87",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Please name this argument. If I came back to this in a week, I would have no idea what it's for.",
        "createdAt" : "2020-04-03T15:18:03Z",
        "updatedAt" : "2020-04-06T12:50:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70cc33cce879b665e8969f8d4f92cb39b9b489d5",
    "line" : null,
    "diffHunk" : "@@ -106,19 +111,18 @@ object LedgerApiTestTool {\n         sys.exit(1)\n       })\n \n-    val runner = new LedgerTestSuiteRunner(\n-      LedgerSessionConfiguration(\n-        config.participants,\n-        config.shuffleParticipants,\n-        config.tlsConfig,\n-        config.loadScaleFactor,\n-        config.partyAllocation,\n-      ),\n-      testsToRun.values.toVector,\n-      identifierSuffix,\n-      config.timeoutScaleFactor,\n-      config.concurrentTestRuns,\n-    )\n+    val runner =\n+      if (performanceTestsToRun.nonEmpty)\n+        newLedgerSuiteRunner(\n+          config,\n+          performanceTestsToRun.values,\n+          1"
  },
  {
    "id" : "6782240c-3131-4c89-9b07-6badb3fb9ee9",
    "prId" : 5377,
    "comments" : [
      {
        "id" : "a252d089-c087-43be-b378-9464a872b835",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "If you use `--perf-test` alongside `--include` or `--all-tests`, some of the tests you explicitly specified won't get run. Might wanna raise an error in this case.",
        "createdAt" : "2020-04-03T15:18:43Z",
        "updatedAt" : "2020-04-06T12:50:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70cc33cce879b665e8969f8d4f92cb39b9b489d5",
    "line" : null,
    "diffHunk" : "@@ -93,6 +97,7 @@ object LedgerApiTestTool {\n       else config.included\n \n     val testsToRun = Tests.all.filterKeys(included -- config.excluded)\n+    val performanceTestsToRun = Tests.performanceTests.filterKeys(config.performanceTests)"
  },
  {
    "id" : "fa75fe55-1542-4ce4-a605-082f19b946ca",
    "prId" : 5377,
    "comments" : [
      {
        "id" : "4c250302-4563-4d46-8643-5056d0b6d3f8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think this is confusing without a description of how you run them.\r\n\r\n```suggestion\r\n    println(\"Tests marked with * are run by default.\\n\")\r\n    println(\"You can include extra tests with `--include=TEST-NAME`, or run all tests with `--all-tests`.\")\r\n    Tests.default.keySet.toSeq.sorted.foreach(println(\"  * \" + _))\r\n    Tests.optional.keySet.toSeq.sorted.foreach(println(\"    \" + _))\r\n\r\n    println(\"\\nAlternatively, you can run performance tests.\")\r\n    println(\"Performance tests are not run by default, but can be run with `--perf-tests=TEST-NAME`.\\n\")\r\n    println(\"Performance tests:\")\r\n    Tests.performanceTests.keySet.toSeq.sorted.foreach(println(\"    \" + _))\r\n```\r\n\r\nI haven't tested if this compiles or makes any sense.",
        "createdAt" : "2020-04-03T15:23:27Z",
        "updatedAt" : "2020-04-06T12:50:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70cc33cce879b665e8969f8d4f92cb39b9b489d5",
    "line" : null,
    "diffHunk" : "@@ -41,6 +43,7 @@ object LedgerApiTestTool {\n     println(\"Tests marked with * are run by default.\\n\")\n     Tests.default.keySet.toSeq.sorted.map(_ + \" *\").foreach(println(_))\n     Tests.optional.keySet.toSeq.sorted.foreach(println(_))\n+    Tests.performanceTests.keySet.toSeq.sorted.foreach(println(_))"
  },
  {
    "id" : "31a9739e-91f6-4d15-90f6-babbb246fcc8",
    "prId" : 5377,
    "comments" : [
      {
        "id" : "c97b3edd-8bd8-4212-bb0b-8bda1677b4c7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Why `-1`? Most shells will convert this to `255`, which is considered to be [in the class of \"serious error\"](https://www.gnu.org/software/libc/manual/html_node/Exit-Status.html).\r\n\r\nAbove, we use an exit status of `2` to signify bad configuration.\r\n\r\nWe use `64` elsewhere, which typically means \"bad command line usage\" [on BSD](https://man.openbsd.org/sysexits).\r\n\r\nDon't mind which you pick, but < 128, please, and please change the other one to match. ðŸ˜‰ ",
        "createdAt" : "2020-04-06T12:38:57Z",
        "updatedAt" : "2020-04-06T12:50:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70cc33cce879b665e8969f8d4f92cb39b9b489d5",
    "line" : null,
    "diffHunk" : "@@ -93,10 +103,16 @@ object LedgerApiTestTool {\n       else config.included\n \n     val testsToRun = Tests.all.filterKeys(included -- config.excluded)\n+    val performanceTestsToRun =\n+      Tests.performanceTests(config.performanceTestsReportFile).filterKeys(config.performanceTests)\n \n-    if (testsToRun.isEmpty) {\n+    if (testsToRun.isEmpty && performanceTestsToRun.isEmpty) {\n       println(\"No tests to run.\")\n       sys.exit(0)\n+    } else if (config.included.nonEmpty && performanceTestsToRun.nonEmpty) {\n+      println(\n+        \"Both regular tests and performance tests have been specified but only one type is allowed.\")\n+      sys.exit(-1)"
  },
  {
    "id" : "6d30f84c-9098-417f-b526-2486caed6aa1",
    "prId" : 2737,
    "comments" : [
      {
        "id" : "f363185b-b29c-4c3c-809c-2aacd65a96ce",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Should be replaced by either exponential back-off or ensuring that the participants are online before the test tool runs. I'd favor the latter.",
        "createdAt" : "2019-09-04T09:49:38Z",
        "updatedAt" : "2019-09-05T06:23:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "717dfbaf-af2d-4c2f-9b96-ee685d5acba1",
        "parentId" : "f363185b-b29c-4c3c-809c-2aacd65a96ce",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2737/commits/5a733e99406ca835afe746d1ad39421bd23faefd",
        "createdAt" : "2019-09-04T14:42:02Z",
        "updatedAt" : "2019-09-05T06:23:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "faac5dc7e2a093e26288e54e8f5d3c6aa69c6e90",
    "line" : null,
    "diffHunk" : "@@ -92,6 +92,8 @@ object LedgerApiTestTool {\n         sys.exit(1)\n       })\n \n+    Thread.sleep(5000)"
  },
  {
    "id" : "070c4bfc-9c0e-4f8e-a188-5be24788fb3f",
    "prId" : 1985,
    "comments" : [
      {
        "id" : "671b9cb8-df18-4dc8-9049-f151d5421557",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I'd rather we don't add tests to the \"default set of tests\" until we have the tests also running against sandbox via the test tool. This is even more the case for tests that we semi-instantiate but don't make available anyway, like the `PartyManagementServiceIT` test.",
        "createdAt" : "2019-07-03T13:32:41Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "72527ebf-8ab2-4350-b8af-180306653763",
        "parentId" : "671b9cb8-df18-4dc8-9049-f151d5421557",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Moved to optional part.",
        "createdAt" : "2019-07-03T17:20:37Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a76d1f28b41fc02600441b5d40c9b25038667c33",
    "line" : null,
    "diffHunk" : "@@ -138,7 +143,39 @@ object LedgerApiTestTool {\n             commonConfig.withDarFile(resourceAsFile(semanticTestsResource))\n       }\n     )\n-    Map(semanticTestsRunner)\n+    val packageManagementServiceIT = lazyInit("
  },
  {
    "id" : "1ddd8197-6832-461c-b2b6-ea2069e06474",
    "prId" : 1985,
    "comments" : [
      {
        "id" : "75209187-18fc-44be-af08-7afb6d5250f3",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please un-comment the test. It is optional, so users have to opt-in anyway.",
        "createdAt" : "2019-07-04T07:18:19Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1c4a1e60-5b48-4492-9796-70e72cd9e2a4",
        "parentId" : "75209187-18fc-44be-af08-7afb6d5250f3",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-04T13:33:39Z",
        "updatedAt" : "2019-07-05T14:48:28Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a76d1f28b41fc02600441b5d40c9b25038667c33",
    "line" : null,
    "diffHunk" : "@@ -246,12 +217,43 @@ object LedgerApiTestTool {\n       }\n     )\n \n+    val packageManagementServiceIT = lazyInit(\n+      \"PackageManagementServiceIT\",\n+      name =>\n+        new PackageManagementServiceIT {\n+          override def suiteName: String = name\n+          override def actorSystemName = s\"${name}ToolActorSystem\"\n+          override def fixtureIdsEnabled: Set[LedgerBackend] = Set(LedgerBackend.RemoteApiProxy)\n+          override def spanScaleFactor: Double = toolConfig.timeoutScaleFactor\n+          override protected def config: Config =\n+            commonConfig.withDarFile(resourceAsFile(integrationTestResource))\n+      }\n+    )\n+\n+    val partyManagementServiceIT = lazyInit(\n+      \"PartyManagementServiceIT\",\n+      name =>\n+        new PartyManagementServiceIT {\n+          override def suiteName: String = name\n+          override def actorSystemName = s\"${name}ToolActorSystem\"\n+          override def fixtureIdsEnabled: Set[LedgerBackend] = Set(LedgerBackend.RemoteApiProxy)\n+          override def spanScaleFactor: Double = toolConfig.timeoutScaleFactor\n+          override protected def config: Config =\n+            commonConfig.withDarFile(resourceAsFile(integrationTestResource))\n+      }\n+    )\n+\n     Map(\n       transactionServiceIT,\n       transactionBackpressureIT,\n       divulgenceIT,\n       commandTransactionChecksHighLevelIT,\n-      commandTransactionChecksLowLevelIT\n+      commandTransactionChecksLowLevelIT,\n+      packageManagementServiceIT\n+      // TODO: Enable when KVUtils participant is backed by a postgres index database\n+      // Present implementation is susceptible to race conditions between allocateParty\n+      // and listKnownParties\n+      //partyManagementServiceIT"
  },
  {
    "id" : "c3dbd68f-b38b-4dbc-9d52-37c005be86fb",
    "prId" : 1171,
    "comments" : [
      {
        "id" : "aefb994d-4198-4c3f-802f-ff8bb3604070",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "please remove this",
        "createdAt" : "2019-05-16T08:14:49Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0375ea95bfb713575e4b4fa54cb2011cbc90f244",
    "line" : null,
    "diffHunk" : "@@ -3,118 +3,103 @@\n \n package com.daml.ledger.api.testtool\n \n-import java.io.{File, PrintWriter, StringWriter}\n+import java.io.File\n import java.nio.file.{Files, Path, Paths, StandardCopyOption}\n \n import akka.actor.ActorSystem\n import akka.stream.ActorMaterializer\n import com.digitalasset.daml.lf.UniversalArchiveReader\n-import com.digitalasset.daml.lf.types.{Ledger => L}\n-import com.digitalasset.daml.lf.data.Ref.{PackageId, QualifiedName}\n-import com.digitalasset.daml.lf.engine.testing.SemanticTester\n+import com.digitalasset.daml.lf.data.Ref.PackageId\n import com.digitalasset.daml.lf.lfpackage.{Ast, Decode}\n import com.digitalasset.grpc.adapter.AkkaExecutionSequencerPool\n-import com.digitalasset.platform.apitesting.{LedgerContext, PlatformChannels, RemoteServerResource}\n+import com.digitalasset.platform.PlatformApplications.RemoteApiEndpoint\n import com.digitalasset.platform.common.LedgerIdMode\n-import com.digitalasset.platform.semantictest.SemanticTestAdapter\n+import com.digitalasset.platform.semantictest.SandboxSemanticTestsLfRunner\n+import com.digitalasset.platform.services.time.TimeProviderType\n+import com.digitalasset.platform.testing.LedgerBackend\n+import org.scalatest.time.{Seconds, Span}\n \n import scala.concurrent.duration._\n-import scala.concurrent.{Await, ExecutionContext}\n-import scala.collection.breakOut\n-import scala.util.Random\n+import scala.concurrent.{Await, ExecutionContext, Future}\n+\n+object LedgerApiTestToolHelper {\n+  def runWithTimeout[T](timeout: Duration)(f: => T)(implicit ec: ExecutionContext): Option[T] = {\n+    Await.result(Future(f), timeout).asInstanceOf[Option[T]]\n+  }\n+\n+  def runWithTimeout[T](timeout: Duration, default: T)(f: => T)(\n+    implicit ec: ExecutionContext): T = {\n+    runWithTimeout(timeout)(f).getOrElse(default)\n+  }\n+}\n \n object LedgerApiTestTool {\n \n   def main(args: Array[String]): Unit = {\n-    implicit val system: ActorSystem = ActorSystem(\"LedgerApiTestTool\")\n-    implicit val mat: ActorMaterializer = ActorMaterializer()(system)\n-    implicit val ec: ExecutionContext = mat.executionContext\n+    implicit val toolSystem: ActorSystem = ActorSystem(\"LedgerApiTestTool\")\n+    implicit val toolMaterializer: ActorMaterializer = ActorMaterializer()(toolSystem)\n+    implicit val ec: ExecutionContext = toolMaterializer.executionContext\n     implicit val esf: AkkaExecutionSequencerPool =\n-      new AkkaExecutionSequencerPool(\"esf-\" + this.getClass.getSimpleName)(system)\n+      new AkkaExecutionSequencerPool(\"esf-\" + this.getClass.getSimpleName)(toolSystem)\n \n     val testResources = List(\"/ledger/ledger-api-integration-tests/SemanticTests.dar\")\n \n-    val config = Cli\n+    val toolConfig = Cli\n       .parse(args)\n       .getOrElse(sys.exit(1))\n \n-    if (config.extract) {\n+    if (toolConfig.extract) {\n       extractTestFiles(testResources)\n       System.exit(0)\n     }\n \n-    val packages: Map[PackageId, Ast.Package] = testResources\n-      .flatMap(loadAllPackagesFromResource)(breakOut)\n+    //    if (config.performReset) {"
  },
  {
    "id" : "eb4f64fc-ec1e-4672-a93e-06e31f9471fd",
    "prId" : 1171,
    "comments" : [
      {
        "id" : "b70f3743-afc9-42b7-8197-809106afdc7c",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "wrap it in `Option` to avoid null checks",
        "createdAt" : "2019-05-16T08:15:29Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0375ea95bfb713575e4b4fa54cb2011cbc90f244",
    "line" : null,
    "diffHunk" : "@@ -3,118 +3,103 @@\n \n package com.daml.ledger.api.testtool\n \n-import java.io.{File, PrintWriter, StringWriter}\n+import java.io.File\n import java.nio.file.{Files, Path, Paths, StandardCopyOption}\n \n import akka.actor.ActorSystem\n import akka.stream.ActorMaterializer\n import com.digitalasset.daml.lf.UniversalArchiveReader\n-import com.digitalasset.daml.lf.types.{Ledger => L}\n-import com.digitalasset.daml.lf.data.Ref.{PackageId, QualifiedName}\n-import com.digitalasset.daml.lf.engine.testing.SemanticTester\n+import com.digitalasset.daml.lf.data.Ref.PackageId\n import com.digitalasset.daml.lf.lfpackage.{Ast, Decode}\n import com.digitalasset.grpc.adapter.AkkaExecutionSequencerPool\n-import com.digitalasset.platform.apitesting.{LedgerContext, PlatformChannels, RemoteServerResource}\n+import com.digitalasset.platform.PlatformApplications.RemoteApiEndpoint\n import com.digitalasset.platform.common.LedgerIdMode\n-import com.digitalasset.platform.semantictest.SemanticTestAdapter\n+import com.digitalasset.platform.semantictest.SandboxSemanticTestsLfRunner\n+import com.digitalasset.platform.services.time.TimeProviderType\n+import com.digitalasset.platform.testing.LedgerBackend\n+import org.scalatest.time.{Seconds, Span}\n \n import scala.concurrent.duration._\n-import scala.concurrent.{Await, ExecutionContext}\n-import scala.collection.breakOut\n-import scala.util.Random\n+import scala.concurrent.{Await, ExecutionContext, Future}\n+\n+object LedgerApiTestToolHelper {\n+  def runWithTimeout[T](timeout: Duration)(f: => T)(implicit ec: ExecutionContext): Option[T] = {\n+    Await.result(Future(f), timeout).asInstanceOf[Option[T]]\n+  }\n+\n+  def runWithTimeout[T](timeout: Duration, default: T)(f: => T)(\n+    implicit ec: ExecutionContext): T = {\n+    runWithTimeout(timeout)(f).getOrElse(default)\n+  }\n+}\n \n object LedgerApiTestTool {\n \n   def main(args: Array[String]): Unit = {\n-    implicit val system: ActorSystem = ActorSystem(\"LedgerApiTestTool\")\n-    implicit val mat: ActorMaterializer = ActorMaterializer()(system)\n-    implicit val ec: ExecutionContext = mat.executionContext\n+    implicit val toolSystem: ActorSystem = ActorSystem(\"LedgerApiTestTool\")\n+    implicit val toolMaterializer: ActorMaterializer = ActorMaterializer()(toolSystem)\n+    implicit val ec: ExecutionContext = toolMaterializer.executionContext\n     implicit val esf: AkkaExecutionSequencerPool =\n-      new AkkaExecutionSequencerPool(\"esf-\" + this.getClass.getSimpleName)(system)\n+      new AkkaExecutionSequencerPool(\"esf-\" + this.getClass.getSimpleName)(toolSystem)\n \n     val testResources = List(\"/ledger/ledger-api-integration-tests/SemanticTests.dar\")\n \n-    val config = Cli\n+    val toolConfig = Cli\n       .parse(args)\n       .getOrElse(sys.exit(1))\n \n-    if (config.extract) {\n+    if (toolConfig.extract) {\n       extractTestFiles(testResources)\n       System.exit(0)\n     }\n \n-    val packages: Map[PackageId, Ast.Package] = testResources\n-      .flatMap(loadAllPackagesFromResource)(breakOut)\n+    //    if (config.performReset) {\n+    //      Await.result(ledger.reset(), 10.seconds)\n+    //    }\n+    var failed = false\n \n-    val scenarios = SemanticTester.scenarios(packages)\n-    val nScenarios: Int = scenarios.foldLeft(0)((c, xs) => c + xs._2.size)\n+    try {\n \n-    println(s\"Running $nScenarios scenarios against ${config.host}:${config.port}...\")\n \n-    val ledgerResource = RemoteServerResource(config.host, config.port, config.tlsConfig)\n-      .map {\n-        case PlatformChannels(channel) =>\n-          LedgerContext.SingleChannelContext(channel, LedgerIdMode.Dynamic(), packages.keys)\n-      }\n-    ledgerResource.setup()\n-    val ledger = ledgerResource.value\n+      val integrationTestResource = testResources.head\n+      val is = getClass.getResourceAsStream(integrationTestResource)"
  },
  {
    "id" : "2fc61d68-d26b-4391-8864-d31f139b338f",
    "prId" : 496,
    "comments" : [
      {
        "id" : "29c90ae5-96a4-4d1c-8252-3ee458f6c76c",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Is this FIXME still current?",
        "createdAt" : "2019-04-17T06:58:50Z",
        "updatedAt" : "2019-04-18T12:30:15Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1f298a4a0c798ff2435f7661c5cef974c569d646",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,180 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool\n+\n+import java.io.File\n+import java.nio.file.{Files, StandardCopyOption, Paths, Path}\n+\n+import akka.actor.ActorSystem\n+import akka.stream.ActorMaterializer\n+import com.digitalasset.daml.lf.UniversalArchiveReader\n+import com.digitalasset.daml.lf.data.Ref.PackageId\n+import com.digitalasset.daml.lf.engine.testing.SemanticTester\n+import com.digitalasset.daml.lf.lfpackage.{Ast, Decode}\n+import com.digitalasset.grpc.adapter.AkkaExecutionSequencerPool\n+import com.digitalasset.platform.apitesting.{LedgerContext, PlatformChannels, RemoteServerResource}\n+import com.digitalasset.platform.sandbox.config.DamlPackageContainer\n+import com.digitalasset.platform.semantictest.SemanticTestAdapter\n+\n+import scala.concurrent.duration._\n+import scala.concurrent.{Await, ExecutionContext}\n+import scala.collection.breakOut\n+\n+object LedgerApiTestTool {\n+  def main(args: Array[String]): Unit = {\n+    implicit val system: ActorSystem = ActorSystem(\"LedgerApiTestTool\")\n+    implicit val mat: ActorMaterializer = ActorMaterializer()(system)\n+    implicit val ec: ExecutionContext = mat.executionContext\n+    implicit val esf: AkkaExecutionSequencerPool =\n+      new AkkaExecutionSequencerPool(\"esf-\" + this.getClass.getSimpleName)(system)\n+\n+    // FIXME(TW) daml-prim location has just become deprecated"
  },
  {
    "id" : "9e990245-618b-403f-8863-48ff8bf61c9d",
    "prId" : 496,
    "comments" : [
      {
        "id" : "2dd9b743-fc68-47fd-b2fa-38c438b8ff35",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Please create an issue in backlog keeping track of this: https://github.com/digital-asset/daml/milestone/6\r\n\r\nand add issue reference to code.",
        "createdAt" : "2019-04-17T07:00:54Z",
        "updatedAt" : "2019-04-18T12:30:15Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed51f82f-f1d7-4597-b23e-0cd376cc9251",
        "parentId" : "2dd9b743-fc68-47fd-b2fa-38c438b8ff35",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "It's already referenced in the next line.",
        "createdAt" : "2019-04-17T11:07:26Z",
        "updatedAt" : "2019-04-18T12:30:15Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f298a4a0c798ff2435f7661c5cef974c569d646",
    "line" : 106,
    "diffHunk" : "@@ -0,0 +1,180 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool\n+\n+import java.io.File\n+import java.nio.file.{Files, StandardCopyOption, Paths, Path}\n+\n+import akka.actor.ActorSystem\n+import akka.stream.ActorMaterializer\n+import com.digitalasset.daml.lf.UniversalArchiveReader\n+import com.digitalasset.daml.lf.data.Ref.PackageId\n+import com.digitalasset.daml.lf.engine.testing.SemanticTester\n+import com.digitalasset.daml.lf.lfpackage.{Ast, Decode}\n+import com.digitalasset.grpc.adapter.AkkaExecutionSequencerPool\n+import com.digitalasset.platform.apitesting.{LedgerContext, PlatformChannels, RemoteServerResource}\n+import com.digitalasset.platform.sandbox.config.DamlPackageContainer\n+import com.digitalasset.platform.semantictest.SemanticTestAdapter\n+\n+import scala.concurrent.duration._\n+import scala.concurrent.{Await, ExecutionContext}\n+import scala.collection.breakOut\n+\n+object LedgerApiTestTool {\n+  def main(args: Array[String]): Unit = {\n+    implicit val system: ActorSystem = ActorSystem(\"LedgerApiTestTool\")\n+    implicit val mat: ActorMaterializer = ActorMaterializer()(system)\n+    implicit val ec: ExecutionContext = mat.executionContext\n+    implicit val esf: AkkaExecutionSequencerPool =\n+      new AkkaExecutionSequencerPool(\"esf-\" + this.getClass.getSimpleName)(system)\n+\n+    // FIXME(TW) daml-prim location has just become deprecated\n+    val testResources = List(\"/ledger/ledger-api-integration-tests/SemanticTests.dar\")\n+\n+    val config = argParser\n+      .parse(args, defaultConfig)\n+      .getOrElse(sys.exit(1))\n+\n+    if (config.extract) {\n+      extractTestFiles(testResources)\n+      System.exit(1)\n+    }\n+\n+    val packages: Map[PackageId, Ast.Package] = testResources\n+      .flatMap(loadAllPackagesFromResource)(breakOut)\n+\n+    val scenarios = SemanticTester.scenarios(packages)\n+    val nScenarios: Int = scenarios.foldLeft(0)((c, xs) => c + xs._2.size)\n+\n+    println(s\"Running ${nScenarios} scenarios against ${config.host}:${config.port}...\")\n+\n+    val ledgerResource = RemoteServerResource(config.host, config.port)\n+      .map {\n+        case PlatformChannels(channel) =>\n+          LedgerContext.SingleChannelContext(channel, None, packages.keys)\n+      }\n+    ledgerResource.setup()\n+    val ledger = ledgerResource.value\n+\n+    if (config.performReset) {\n+      Await.result(ledger.reset(), 10.seconds)\n+    }\n+    var failed = false\n+\n+    try {\n+      scenarios.foreach {\n+        case (pkgId, names) =>\n+          val tester = new SemanticTester(\n+            parties => new SemanticTestAdapter(ledger, packages, parties.map(_.underlyingString)),\n+            pkgId,\n+            packages)\n+          names\n+            .foreach { name =>\n+              println(s\"Testing scenario: $name\")\n+              val _ = try {\n+                Await.result(\n+                  tester.testScenario(name),\n+                  10.seconds\n+                )\n+              } catch {\n+                case (t: Throwable) =>\n+                  sys.error(\"Timed-out waiting for an expected event: \" + t.getMessage)\n+              }\n+            }\n+      }\n+      println(\"All scenarios completed.\")\n+    } catch {\n+      case (t: Throwable) => {\n+        failed = true\n+        if (!config.mustFail) throw t\n+      }\n+    } finally {\n+      ledgerResource.close()\n+      mat.shutdown()\n+      val _ = Await.result(system.terminate(), 5.seconds)\n+    }\n+\n+    if (config.mustFail) {\n+      if (failed) println(\"One or more scenarios failed as expected.\")\n+      else\n+        throw new RuntimeException(\n+          \"None of the scenarios failed, yet the --must-fail flag was specified!\")\n+    }\n+  }\n+\n+  private def loadAllPackagesFromResource(resource: String): Map[PackageId, Ast.Package] = {\n+    // TODO: replace with stream-supporting functions from UniversalArchiveReader when"
  }
]