[
  {
    "id" : "29233d5f-4457-45a7-be50-487b27f27b3d",
    "prId" : 3446,
    "comments" : [
      {
        "id" : "4e4691d7-f598-4914-ad52-588940a6aedc",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This creates a new instance of the retry strategy object at every call of `eventually`, which is anyhow fine, we're talking about a few objects, so not a problem, I'm mostly thinking out loud in the review. :slightly_smiling_face: :+1: ",
        "createdAt" : "2019-11-13T16:04:06Z",
        "updatedAt" : "2019-11-13T16:05:47Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f52498b-c18e-4761-856d-0c8588d4b108",
        "parentId" : "4e4691d7-f598-4914-ad52-588940a6aedc",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Yeah, didn't seem to be a big deal. I can revert this if you like; not actually using it. I just needed to slow down the timeout to debug the propagation check because it was swamping the logs with errors.\r\n\r\n(I got the `subsetOf` call the wrong way around, of course.)",
        "createdAt" : "2019-11-13T16:24:06Z",
        "updatedAt" : "2019-11-13T16:24:06Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ad42041a13e959b0ede9d81e8f8dc32bae860183",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +8,12 @@\nobject Eventually {\n  def eventually[A](\n      runAssertion: => Future[A],\n      attempts: Int = 10,"
  }
]