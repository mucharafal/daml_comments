[
  {
    "id" : "e0b685fc-9878-43ce-b6f2-a1f65e5db160",
    "prId" : 3446,
    "comments" : [
      {
        "id" : "eaf21a33-14ed-48b3-9271-bda489d66014",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This creates a new instance of the retry strategy object at every call of `eventually`, which is anyhow fine, we're talking about a few objects, so not a problem, I'm mostly thinking out loud in the review. :slightly_smiling_face: :+1: ",
        "createdAt" : "2019-11-13T16:04:06Z",
        "updatedAt" : "2019-11-13T16:05:47Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6815fd3f-ab46-4e55-ad17-3e4c2654565f",
        "parentId" : "eaf21a33-14ed-48b3-9271-bda489d66014",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Yeah, didn't seem to be a big deal. I can revert this if you like; not actually using it. I just needed to slow down the timeout to debug the propagation check because it was swamping the logs with errors.\r\n\r\n(I got the `subsetOf` call the wrong way around, of course.)",
        "createdAt" : "2019-11-13T16:24:06Z",
        "updatedAt" : "2019-11-13T16:24:06Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ad42041a13e959b0ede9d81e8f8dc32bae860183",
    "line" : 13,
    "diffHunk" : "@@ -3,14 +3,15 @@\n \n package com.daml.ledger.api.testtool.infrastructure\n \n-import scala.concurrent.duration.DurationInt\n+import scala.concurrent.duration.{Duration, DurationInt}\n import scala.concurrent.{ExecutionContext, Future}\n \n object Eventually {\n-  private val withRetryStrategy = RetryStrategy.exponentialBackoff(10, 10.millis)\n-\n-  def eventually[A](runAssertion: => Future[A])(implicit ec: ExecutionContext): Future[A] =\n-    withRetryStrategy { _ =>\n+  def eventually[A]("
  }
]