[
  {
    "id" : "314bca58-6ffe-4022-a22c-7ce8dcb4a169",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "97dcde6a-70ad-4b44-9b41-d9379f9ac278",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n        testCase,\r\n      ),\r\n```",
        "createdAt" : "2020-06-23T10:36:36Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -24,7 +24,13 @@ private[testtool] abstract class LedgerTestSuite {\n   )(testCase: ExecutionContext => Participants => Future[Unit]): Unit = {\n     val shortIdentifierRef = Ref.LedgerString.assertFromString(shortIdentifier)\n     testCaseBuffer.append(\n-      new LedgerTestCase(shortIdentifierRef, description, timeoutScale, participants, testCase),\n+      new LedgerTestCase(\n+        this,\n+        shortIdentifierRef,\n+        description,\n+        timeoutScale,\n+        participants,\n+        testCase),"
  },
  {
    "id" : "c52ac767-de4d-45c2-b25b-b5e4c69202eb",
    "prId" : 3325,
    "comments" : [
      {
        "id" : "68eb2467-0a90-4564-a9b1-06a78ca49745",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: why the conversion? If you need to convert, probably getting the iterator is a better choice, performance-wise (one scan over the collection instead of five).",
        "createdAt" : "2019-11-04T12:54:43Z",
        "updatedAt" : "2019-11-04T13:44:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "02726d94-2ad3-4f6e-b8ff-13746f81d1ab",
        "parentId" : "68eb2467-0a90-4564-a9b1-06a78ca49745",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I'm converting because the `constructorOption` function requires a `List`. I do not know why, exactly; a `Seq` should be more than enough.\r\n\r\nYou're right about the performance. I thought, for some reason, that Scala's `List` was lazy, but apparently I need to use `Stream` or `Iterator` (as you say) to get that benefit. Will fix.",
        "createdAt" : "2019-11-04T13:37:31Z",
        "updatedAt" : "2019-11-04T13:44:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cdc639de788bd7b090c887c5c6f2f4965359e1bf",
    "line" : null,
    "diffHunk" : "@@ -126,4 +126,41 @@ private[testtool] abstract class LedgerTestSuite(val session: LedgerSession) {\n     }\n   }\n \n+  implicit def diffShowSeq[T](implicit diffShowT: DiffShow[T]): DiffShow[Seq[T]] =\n+    new DiffShow[Seq[T]] {\n+      override def show(t: Seq[T]): String = t.toString\n+\n+      override def diff(left: Seq[T], right: Seq[T]): Comparison = {\n+        val leftList = left.toList"
  },
  {
    "id" : "b9882bb5-f9d3-496b-8a62-05da915c8c34",
    "prId" : 3325,
    "comments" : [
      {
        "id" : "613e7578-f96b-4c3d-97c5-257a1e9d40d6",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: a `filter` followed by a `map` is usually a good use case for a `collect`.\r\n```suggestion\r\n          .collect { case (index, diff) if !diff.isIdentical => index.toString -> diff.string }\r\n```",
        "createdAt" : "2019-11-04T12:58:40Z",
        "updatedAt" : "2019-11-04T13:44:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "efe137be-6432-45ea-b258-1cbf2157c387",
        "parentId" : "613e7578-f96b-4c3d-97c5-257a1e9d40d6",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Agreed, I was flipping back and forth for readability but I think this is fine.",
        "createdAt" : "2019-11-04T13:37:47Z",
        "updatedAt" : "2019-11-04T13:44:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cdc639de788bd7b090c887c5c6f2f4965359e1bf",
    "line" : null,
    "diffHunk" : "@@ -126,4 +126,41 @@ private[testtool] abstract class LedgerTestSuite(val session: LedgerSession) {\n     }\n   }\n \n+  implicit def diffShowSeq[T](implicit diffShowT: DiffShow[T]): DiffShow[Seq[T]] =\n+    new DiffShow[Seq[T]] {\n+      override def show(t: Seq[T]): String = t.toString\n+\n+      override def diff(left: Seq[T], right: Seq[T]): Comparison = {\n+        val leftList = left.toList\n+        val rightList = right.toList\n+        val changed = leftList\n+          .zip(rightList)\n+          .zipWithIndex\n+          .map { case ((l, r), index) => index -> diffShowT.diff(l, r) }\n+          .filter { case (_, diff) => !diff.isIdentical }\n+          .map { case (index, diff) => index.toString -> diff.string }"
  },
  {
    "id" : "e9adb4c6-ea6f-41f0-b397-c6d169874d91",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "4042761a-d374-4948-99b1-c366ed0b42d5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Is the output of `getDescription` nullable?",
        "createdAt" : "2019-09-24T08:05:58Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82bb821a-2488-46a9-b2b9-60a1216046c0",
        "parentId" : "4042761a-d374-4948-99b1-c366ed0b42d5",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Apparently yes. `ledger.getPackage` returns a `NOT_FOUND` status code with a `null` description.",
        "createdAt" : "2019-09-24T09:15:36Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0cc38018-8df5-4def-9d85-fb7dda432ff8",
        "parentId" : "4042761a-d374-4948-99b1-c366ed0b42d5",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Cool, thanks.",
        "createdAt" : "2019-09-24T09:22:30Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : null,
    "diffHunk" : "@@ -91,7 +91,7 @@ private[testtool] abstract class LedgerTestSuite(val session: LedgerSession) {\n     }\n     assert(actualCode == expectedCode, s\"Expected code [$expectedCode], but got [$actualCode].\")\n     assert(\n-      message.contains(pattern),\n+      Option(message).getOrElse(\"\").contains(pattern),"
  },
  {
    "id" : "e2bad4fc-8b3c-46a9-943c-d89510e1422d",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "f73e1cd9-0840-407f-8a46-ce97437957c2",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If it's nullable, it's probably best to handle this in the output as well so that it's the least confusing for the reader.",
        "createdAt" : "2019-09-24T08:06:37Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : null,
    "diffHunk" : "@@ -91,7 +91,7 @@ private[testtool] abstract class LedgerTestSuite(val session: LedgerSession) {\n     }\n     assert(actualCode == expectedCode, s\"Expected code [$expectedCode], but got [$actualCode].\")\n     assert(\n-      message.contains(pattern),\n+      Option(message).getOrElse(\"\").contains(pattern),\n       s\"Error message did not contain [$pattern], but was [$message].\")"
  },
  {
    "id" : "198701ba-e5fa-4813-b908-ec8d28e5f6f1",
    "prId" : 2900,
    "comments" : [
      {
        "id" : "d5cb55f4-1e83-4b54-a94d-b6ec7c5537db",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Could also be a by-name parameter, which gives a bit nicer syntax on use site.",
        "createdAt" : "2019-09-16T07:44:34Z",
        "updatedAt" : "2019-09-16T11:46:34Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d07c178-f4c4-420b-9453-aa9d073576b7",
        "parentId" : "d5cb55f4-1e83-4b54-a94d-b6ec7c5537db",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, for some reason I thought _by-name_ parameters were evaluated only once but I guess it shows that I wrote this code on a Friday afternoon. :slightly_smiling_face: ",
        "createdAt" : "2019-09-16T08:36:44Z",
        "updatedAt" : "2019-09-16T11:46:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "77dc1039-7a26-46a6-b792-63c97d797215",
        "parentId" : "d5cb55f4-1e83-4b54-a94d-b6ec7c5537db",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Also `message` is unused (it was part of an initial experiment), I've reworked the whole thing a bit, thanks for the feedback.",
        "createdAt" : "2019-09-16T08:38:46Z",
        "updatedAt" : "2019-09-16T11:46:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8b455268-04e8-4552-911b-a779d380a3d6",
        "parentId" : "d5cb55f4-1e83-4b54-a94d-b6ec7c5537db",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2900/commits/2cef0bf1f45303a27f3e2980c106e6e6694627b6",
        "createdAt" : "2019-09-16T09:22:27Z",
        "updatedAt" : "2019-09-16T11:46:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "131bf99b912303d82407c7a903bba0ad64ce2cb6",
    "line" : null,
    "diffHunk" : "@@ -26,6 +27,16 @@ private[testtool] abstract class LedgerTestSuite(val session: LedgerSession) {\n \n   protected final implicit val ec: ExecutionContext = session.executionContext\n \n+  // TODO Make this configurable\n+  final private[this] val eventually = RetryStrategy.exponentialBackoff(10, 10.millis)\n+\n+  final def assertEventually[A](message: String)(assertion: () => Future[A]): Future[Unit] ="
  },
  {
    "id" : "14a8ed04-33d2-406e-bafd-0ef20235b3ee",
    "prId" : 2486,
    "comments" : [
      {
        "id" : "e680dc4e-1ac8-438a-868a-018414810c6b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@stefanobaghino-da: I think it'd be overall cleaner to have a second method (like `createWithTransactionId`) to not have to ignore the transaction ID if it's not needed. WDYT?",
        "createdAt" : "2019-08-12T09:39:51Z",
        "updatedAt" : "2019-08-12T14:20:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cabf5a54-8a76-4907-a4ea-de5e1b743314",
        "parentId" : "e680dc4e-1ac8-438a-868a-018414810c6b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'm having a look precisely now on how to go about this.",
        "createdAt" : "2019-08-12T09:41:31Z",
        "updatedAt" : "2019-08-12T14:20:37Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6c24fee8bf055b9cbc1c90702dad1d74b2ba1c30",
    "line" : null,
    "diffHunk" : "@@ -57,11 +57,11 @@ private[testtool] abstract class LedgerTestSuite(val session: LedgerSession) {\n     Future.sequence(Vector.fill(n)(allocateParty()))\n \n   final def create[T <: Template[T]: ValueDecoder](template: Template[T])(party: Party)(\n-      implicit context: LedgerTestContext): Future[Contract[T]] =\n+      implicit context: LedgerTestContext): Future[(String, Contract[T])] ="
  },
  {
    "id" : "2e9a342e-12ff-4ad2-bb02-eea93e7b7bba",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "ca970743-e5da-4690-a2d1-56a2c1bea3b6",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I'd rather see a fail `case` in the `match`, so the relationship is structural rather than [unchecked] logical.",
        "createdAt" : "2019-08-08T19:20:32Z",
        "updatedAt" : "2019-08-09T15:27:26Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "080d9fae-9e07-49d2-9687-82b94d1c49f7",
        "parentId" : "ca970743-e5da-4690-a2d1-56a2c1bea3b6",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed in #2495.",
        "createdAt" : "2019-08-12T15:00:02Z",
        "updatedAt" : "2019-08-12T15:00:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : 87,
    "diffHunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.infrastructure\n+\n+import java.time.Instant\n+\n+import com.daml.ledger.api.testtool.infrastructure.LedgerTestSuite.SkipTestException\n+import com.digitalasset.ledger.api.v1.event.CreatedEvent\n+import com.digitalasset.ledger.api.v1.transaction.{Transaction, TransactionTree}\n+import com.digitalasset.ledger.api.v1.value.Identifier\n+import io.grpc.{Status, StatusException, StatusRuntimeException}\n+import com.digitalasset.ledger.client.binding.{Contract, Primitive, Template, ValueDecoder}\n+\n+import scala.concurrent.duration.Duration\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+private[testtool] object LedgerTestSuite {\n+\n+  final case class SkipTestException(message: String) extends RuntimeException(message)\n+\n+}\n+\n+private[testtool] abstract class LedgerTestSuite(val session: LedgerSession) {\n+\n+  val name: String = getClass.getSimpleName\n+\n+  val tests: Vector[LedgerTest] = Vector.empty\n+\n+  final def skip(reason: String): Future[Unit] = Future.failed(new SkipTestException(reason))\n+\n+  final def skipIf(reason: String)(p: => Boolean): Future[Unit] =\n+    if (p) skip(reason) else Future.successful(())\n+\n+  final def time()(implicit context: LedgerTestContext): Future[Instant] =\n+    context.time\n+\n+  final def passTime(t: Duration)(implicit context: LedgerTestContext): Future[Unit] =\n+    context.passTime(t)\n+\n+  final def activeContracts(party: String, parties: String*)(\n+      implicit context: LedgerTestContext): Future[Vector[CreatedEvent]] =\n+    context.activeContracts(party +: parties, Seq.empty)\n+\n+  final def activeContractsByTemplateId(party: String, parties: String*)(templateIds: Identifier*)(\n+      implicit context: LedgerTestContext): Future[Vector[CreatedEvent]] =\n+    context.activeContracts(party +: parties, templateIds)\n+\n+  final def ledgerId()(implicit context: LedgerTestContext): Future[String] =\n+    context.ledgerId\n+\n+  final def allocateParty()(implicit context: LedgerTestContext): Future[String] =\n+    context.allocateParty()\n+\n+  final def allocateParties(n: Int)(implicit context: LedgerTestContext): Future[Vector[String]] =\n+    Future.sequence(Vector.fill(n)(allocateParty()))\n+\n+  final def create[T <: Template[T]: ValueDecoder](template: Template[T])(party: String)(\n+      implicit context: LedgerTestContext): Future[Contract[T]] =\n+    context.create(party, template)\n+\n+  final def exercise[T](exercise: Primitive.Update[T])(party: String)(\n+      implicit context: LedgerTestContext): Future[Unit] =\n+    context.exercise(party, exercise)\n+\n+  final def flatTransactions(party: String, parties: String*)(\n+      implicit context: LedgerTestContext): Future[Vector[Transaction]] =\n+    context.flatTransactions(party +: parties, Seq.empty)\n+\n+  final def flatTransactionsByTemplateId(party: String, parties: String*)(templateIds: Identifier*)(\n+      implicit context: LedgerTestContext): Future[Vector[Transaction]] =\n+    context.flatTransactions(party +: parties, templateIds)\n+\n+  final def transactionTrees(party: String, parties: String*)(\n+      implicit context: LedgerTestContext): Future[Vector[TransactionTree]] =\n+    context.transactionTrees(party +: parties, Seq.empty)\n+\n+  final def transactionTreesByTemplateId(party: String, parties: String*)(templateIds: Identifier*)(\n+      implicit context: LedgerTestContext): Future[Vector[TransactionTree]] =\n+    context.transactionTrees(party +: parties, templateIds)\n+\n+  final def assertGrpcError[A](t: Throwable, expectedCode: Status.Code, pattern: String)(\n+      implicit ec: ExecutionContext): Unit = {\n+    assert(\n+      t.isInstanceOf[StatusRuntimeException] || t.isInstanceOf[StatusException],\n+      \"Exception is neither a StatusRuntimeException nor a StatusException\")"
  }
]