[
  {
    "id" : "a1920783-4236-455a-92f5-3471788de316",
    "prId" : 3877,
    "comments" : [
      {
        "id" : "f78d2701-d5c6-4273-bb40-c102f6e7233d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "```suggestion\r\n    \"CSCNoCompletionsWithoutRightAppId\",\r\n```",
        "createdAt" : "2019-12-17T17:49:43Z",
        "updatedAt" : "2019-12-17T23:52:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f4bd3fb4e0b29ff76ad96c3e223a7a2dbecd4cfa",
    "line" : 37,
    "diffHunk" : "@@ -0,0 +1,121 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.Allocation._\n+import com.daml.ledger.api.testtool.infrastructure.Assertions._\n+import com.daml.ledger.api.testtool.infrastructure.Synchronize.synchronize\n+import com.daml.ledger.api.testtool.infrastructure.TransactionHelpers._\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTestSuite}\n+import com.digitalasset.ledger.client.binding.Primitive\n+import com.digitalasset.ledger.client.binding.Value.encode\n+import com.digitalasset.ledger.test_stable.Test.CallablePayout._\n+import com.digitalasset.ledger.test_stable.Test.Dummy._\n+import com.digitalasset.ledger.test_stable.Test.DummyFactory._\n+import com.digitalasset.ledger.test_stable.Test.WithObservers._\n+import com.digitalasset.ledger.test_stable.Test.{Dummy, _}\n+import com.digitalasset.platform.testing.{TimeoutException, WithTimeout}\n+import io.grpc.Status\n+import scalaz.syntax.tag._\n+\n+import scala.concurrent.duration.DurationInt\n+\n+final class CommandSubmissionCompletion(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  test(\n+    \"CSCCompletions\",\n+    \"Read completions correctly with a correct application identifier and reading party\",\n+    allocate(SingleParty)) {\n+    case Participants(Participant(ledger, party)) =>\n+      for {\n+        request <- ledger.submitRequest(party, Dummy(party).create.command)\n+        _ <- ledger.submit(request)\n+        completions <- ledger.firstCompletions(party)\n+      } yield {\n+        val commandId =\n+          assertSingleton(\"Expected only one completion\", completions.map(_.commandId))\n+        assert(\n+          commandId == request.commands.get.commandId,\n+          \"Wrong command identifier on completion\")\n+      }\n+  }\n+\n+  test(\n+    \"CSNoCompletionsWithoutRightAppId\","
  },
  {
    "id" : "56aa6d8b-de0f-4ba6-b3e0-cc6b51378d9d",
    "prId" : 3877,
    "comments" : [
      {
        "id" : "3f9ce957-0b91-4f71-9f03-6446c0b635f2",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "```suggestion\r\n    \"CSCDisallowEmptyTransactionsSubmission\",\r\n```",
        "createdAt" : "2019-12-17T17:50:04Z",
        "updatedAt" : "2019-12-17T23:52:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f4bd3fb4e0b29ff76ad96c3e223a7a2dbecd4cfa",
    "line" : 102,
    "diffHunk" : "@@ -0,0 +1,121 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.Allocation._\n+import com.daml.ledger.api.testtool.infrastructure.Assertions._\n+import com.daml.ledger.api.testtool.infrastructure.Synchronize.synchronize\n+import com.daml.ledger.api.testtool.infrastructure.TransactionHelpers._\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTestSuite}\n+import com.digitalasset.ledger.client.binding.Primitive\n+import com.digitalasset.ledger.client.binding.Value.encode\n+import com.digitalasset.ledger.test_stable.Test.CallablePayout._\n+import com.digitalasset.ledger.test_stable.Test.Dummy._\n+import com.digitalasset.ledger.test_stable.Test.DummyFactory._\n+import com.digitalasset.ledger.test_stable.Test.WithObservers._\n+import com.digitalasset.ledger.test_stable.Test.{Dummy, _}\n+import com.digitalasset.platform.testing.{TimeoutException, WithTimeout}\n+import io.grpc.Status\n+import scalaz.syntax.tag._\n+\n+import scala.concurrent.duration.DurationInt\n+\n+final class CommandSubmissionCompletion(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  test(\n+    \"CSCCompletions\",\n+    \"Read completions correctly with a correct application identifier and reading party\",\n+    allocate(SingleParty)) {\n+    case Participants(Participant(ledger, party)) =>\n+      for {\n+        request <- ledger.submitRequest(party, Dummy(party).create.command)\n+        _ <- ledger.submit(request)\n+        completions <- ledger.firstCompletions(party)\n+      } yield {\n+        val commandId =\n+          assertSingleton(\"Expected only one completion\", completions.map(_.commandId))\n+        assert(\n+          commandId == request.commands.get.commandId,\n+          \"Wrong command identifier on completion\")\n+      }\n+  }\n+\n+  test(\n+    \"CSNoCompletionsWithoutRightAppId\",\n+    \"Read no completions without the correct application identifier\",\n+    allocate(SingleParty)) {\n+    case Participants(Participant(ledger, party)) =>\n+      for {\n+        request <- ledger.submitRequest(party, Dummy(party).create.command)\n+        _ <- ledger.submit(request)\n+        invalidRequest = ledger\n+          .completionStreamRequest(party)\n+          .update(_.applicationId := \"invalid-application-id\")\n+        failed <- WithTimeout(5.seconds)(ledger.firstCompletions(invalidRequest)).failed\n+      } yield {\n+        assert(failed == TimeoutException, \"Timeout expected\")\n+      }\n+  }\n+\n+  test(\n+    \"CSCNoCompletionsWithoutRightParty\",\n+    \"Read no completions without the correct party\",\n+    allocate(TwoParties)) {\n+    case Participants(Participant(ledger, party, notTheSubmittingParty)) =>\n+      for {\n+        request <- ledger.submitRequest(party, Dummy(party).create.command)\n+        _ <- ledger.submit(request)\n+        failed <- WithTimeout(5.seconds)(ledger.firstCompletions(notTheSubmittingParty)).failed\n+      } yield {\n+        assert(failed == TimeoutException, \"Timeout expected\")\n+      }\n+  }\n+\n+  test(\n+    \"CSCRefuseBadChoice\",\n+    \"The submission of an exercise of a choice that does not exist should yield INVALID_ARGUMENT\",\n+    allocate(SingleParty)) {\n+    case Participants(Participant(ledger, party)) =>\n+      val badChoice = \"THIS_IS_NOT_A_VALID_CHOICE\"\n+      for {\n+        dummy <- ledger.create(party, Dummy(party))\n+        exercise = dummy.exerciseDummyChoice1(party).command\n+        wrongExercise = exercise.update(_.exercise.choice := badChoice)\n+        wrongRequest <- ledger.submitRequest(party, wrongExercise)\n+        failure <- ledger.submit(wrongRequest).failed\n+      } yield {\n+        assertGrpcError(\n+          failure,\n+          Status.Code.INVALID_ARGUMENT,\n+          s\"Couldn't find requested choice $badChoice\")\n+      }\n+  }\n+\n+  test(\n+    \"CSCSubmitWithInvalidLedgerId\",\n+    \"Submit should fail for an invalid ledger identifier\",\n+    allocate(SingleParty)) {\n+    case Participants(Participant(ledger, party)) =>\n+      val invalidLedgerId = \"CSsubmitAndWaitInvalidLedgerId\"\n+      for {\n+        request <- ledger.submitRequest(party, Dummy(party).create.command)\n+        badLedgerId = request.update(_.commands.ledgerId := invalidLedgerId)\n+        failure <- ledger.submit(badLedgerId).failed\n+      } yield\n+        assertGrpcError(failure, Status.Code.NOT_FOUND, s\"Ledger ID '$invalidLedgerId' not found.\")\n+  }\n+\n+  test(\n+    \"CSDisallowEmptyTransactionsSubmission\","
  }
]