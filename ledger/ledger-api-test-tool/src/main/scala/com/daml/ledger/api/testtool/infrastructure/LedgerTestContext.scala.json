[
  {
    "id" : "5ea31bc9-39fb-41f5-894e-738a5243e865",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "2571dbe4-71cb-4355-92e6-2b6a157016ed",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "What is the purpose of this? This is mainly making the performance characteristics unclear.",
        "createdAt" : "2020-09-07T10:09:19Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9b0cb948-f801-45d2-b1a9-515f8190bd27",
        "parentId" : "2571dbe4-71cb-4355-92e6-2b6a157016ed",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This is generally tiny, on the order of 1â€“2 elements in the list. At this size, the performance characteristics are \"meh, who cares\"?",
        "createdAt" : "2020-09-07T12:28:08Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : 8,
    "diffHunk" : "@@ -11,9 +11,10 @@ import com.daml.ledger.api.testtool.infrastructure.Allocation.{\n import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantTestContext\n \n import scala.concurrent.{ExecutionContext, Future}\n+import scala.collection.immutable\n \n private[testtool] final class LedgerTestContext private[infrastructure] (\n-    participants: Vector[ParticipantTestContext],\n+    participants: immutable.Seq[ParticipantTestContext],"
  },
  {
    "id" : "3c46b4ef-a197-4dfb-8312-3cda54ae1775",
    "prId" : 4894,
    "comments" : [
      {
        "id" : "655ec83a-7b79-4d5c-88a4-049e87abe2b9",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's probably worth moving this into a method rather than nesting this much.",
        "createdAt" : "2020-03-09T12:34:39Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "80a97d2c-b699-48f4-a970-eba6b50f9477",
        "parentId" : "655ec83a-7b79-4d5c-88a4-049e87abe2b9",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good call. I also realized, in doing this, that it doesn't make sense to have both `openWorld` and `waitForParties`, so I moved them into an enumeration (sealed trait and case objects), `PartyAllocationConfiguration`, that makes it impossible to have both.",
        "createdAt" : "2020-03-09T13:37:13Z",
        "updatedAt" : "2020-03-09T14:59:52Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e110aecc4e2083ff9c7d5e50944d36ae8822e8d",
    "line" : null,
    "diffHunk" : "@@ -43,9 +44,14 @@ private[testtool] final class LedgerTestContext private[infrastructure] (\n       .sequence(allocation.partyCounts.map(partyCount => {\n         val participant = nextParticipant()\n         for {\n-          parties <- participant.allocateParties(partyCount.count)\n-          partiesSet = parties.toSet\n-          _ <- participant.waitForParties(participants, partiesSet)\n+          parties <- if (openWorld) {"
  },
  {
    "id" : "d414c3ca-2814-45cb-8cb4-660f040961f4",
    "prId" : 3401,
    "comments" : [
      {
        "id" : "731dca9b-0444-4d20-92e8-54eb2eb0b934",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Probably worth putting a comment here to explain what's going on.",
        "createdAt" : "2019-11-08T12:38:55Z",
        "updatedAt" : "2019-11-08T13:04:38Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ece9ac9c-c9bf-48f4-9402-ca0e9855c388",
        "parentId" : "731dca9b-0444-4d20-92e8-54eb2eb0b934",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-11-08T12:54:24Z",
        "updatedAt" : "2019-11-08T13:04:38Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "37ce8d9e6fc8e72458f839c417eaf6fa28b98de7",
    "line" : null,
    "diffHunk" : "@@ -11,13 +16,19 @@ private[testtool] final class LedgerTestContext private[infrastructure] (\n     participants: Vector[ParticipantTestContext])(implicit ec: ExecutionContext) {\n \n   private[this] val participantsRing = Iterator.continually(participants).flatten\n-  private[this] def nextParticipant(): ParticipantTestContext =\n-    participantsRing.synchronized { participantsRing.next() }\n \n-  def participant(): Future[ParticipantTestContext] =\n-    Future.successful(nextParticipant())\n-\n-  def participants(n: Int): Future[Vector[ParticipantTestContext]] =\n-    Future.sequence(Vector.fill(n)(participant()))\n+  def provision(allocation: ParticipantAllocation): Future[Participants] ="
  },
  {
    "id" : "1a35bc95-c0c4-482d-b767-44e16e4ce054",
    "prId" : 2713,
    "comments" : [
      {
        "id" : "2e6ef24a-747c-4e09-90c2-5c8b3b214b1c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Why not use `Update[T]` here and remove the explicit cast below?\r\n```suggestion\r\n      exercise: Party => Primitive.Update[T]\r\n```",
        "createdAt" : "2019-08-30T14:52:24Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e26f9423-1db5-4a61-bd05-afcd44d43eec",
        "parentId" : "2e6ef24a-747c-4e09-90c2-5c8b3b214b1c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It is not necessarily the case that the contract on which an update operates is the same as the one created by exercising the choice. ",
        "createdAt" : "2019-09-02T09:18:01Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3aa2171a-bca4-4d09-8d3e-1334ef953855",
        "parentId" : "2e6ef24a-747c-4e09-90c2-5c8b3b214b1c",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Could you elaborate please? I don't understand what you mean.",
        "createdAt" : "2019-09-02T09:39:50Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "933d4da2-b0ea-43c6-938f-9cef55d353f9",
        "parentId" : "2e6ef24a-747c-4e09-90c2-5c8b3b214b1c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "As explained offline (reported here for clarity): the type variable is used to cast [here](https://github.com/digital-asset/daml/pull/2713#discussion_r319549199). When exercising a choice on a contract based on template `T` there is no (easy?) way to get the type of the contracts that are created as part of the transaction kicked of by the exercise.",
        "createdAt" : "2019-09-02T09:55:02Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "155aa436-74e4-4940-94c3-811a03674454",
        "parentId" : "2e6ef24a-747c-4e09-90c2-5c8b3b214b1c",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Alright, so the `T` type parameter expresses an expectation of the method's caller that it expects the first contract to be of type `T`. I'd prefer a mechanism as described in my comment on the type cast a few lines below.",
        "createdAt" : "2019-09-02T09:56:30Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3153aa5aee7120933b68f4773dedc170bfa2b123",
    "line" : 208,
    "diffHunk" : "@@ -243,6 +328,23 @@ private[testtool] final class LedgerTestContext private[infrastructure] (\n   ): Future[TransactionTree] =\n     submitAndWaitRequest(party, exercise(party).command).flatMap(submitAndWaitForTransactionTree)\n \n+  def exerciseAndGetContract[T](\n+      party: Party,\n+      exercise: Party => Primitive.Update[_]"
  },
  {
    "id" : "95f11953-6936-4930-a314-cbd29b4d2e85",
    "prId" : 2713,
    "comments" : [
      {
        "id" : "df756a47-3bb6-4d00-af00-fe81d12eb245",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-08-30T14:53:48Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7cf71288-070f-4a3d-a44a-7671c44a4bda",
        "parentId" : "df756a47-3bb6-4d00-af00-fe81d12eb245",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Without this we would get all contracts created in the transaction instead of a single one and we would not be able to dictate what kind of contract it is. But I do agree that the casting is quite a wart. Not sure of how I could feed the type information correctly without that.",
        "createdAt" : "2019-09-02T09:21:15Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9fe49830-619c-459e-845c-6c77e30384bd",
        "parentId" : "df756a47-3bb6-4d00-af00-fe81d12eb245",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Can we even make the assumption that the first contract is of type `T`? How about we pass the template companion object (`TemplateCompanion[T]`) or template identifier as parameter to the method, which which we can actually check the created events for matching template ids.",
        "createdAt" : "2019-09-02T09:44:27Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d856b1da-0b0a-469d-a932-910d4b6b3345",
        "parentId" : "df756a47-3bb6-4d00-af00-fe81d12eb245",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "See [this other comment](https://github.com/digital-asset/daml/pull/2713#discussion_r319888452) for more details.",
        "createdAt" : "2019-09-02T09:55:21Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3153aa5aee7120933b68f4773dedc170bfa2b123",
    "line" : 213,
    "diffHunk" : "@@ -243,6 +328,23 @@ private[testtool] final class LedgerTestContext private[infrastructure] (\n   ): Future[TransactionTree] =\n     submitAndWaitRequest(party, exercise(party).command).flatMap(submitAndWaitForTransactionTree)\n \n+  def exerciseAndGetContract[T](\n+      party: Party,\n+      exercise: Party => Primitive.Update[_]\n+  ): Future[Primitive.ContractId[T]] =\n+    submitAndWaitRequest(party, exercise(party).command)\n+      .flatMap(submitAndWaitForTransaction)\n+      .map(extractContracts)\n+      .map(_.head.asInstanceOf[Primitive.ContractId[T]])"
  },
  {
    "id" : "5ceb7f81-ec46-40ae-884d-c0959bdc634d",
    "prId" : 2713,
    "comments" : [
      {
        "id" : "cc5b5434-a087-4467-9740-7620dd56b586",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  ): Future[Seq[Primitive.ContractId[T]]] =\r\n```",
        "createdAt" : "2019-08-30T14:53:57Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6e622f26-d61b-45d0-a98f-25cc7582149c",
        "parentId" : "cc5b5434-a087-4467-9740-7620dd56b586",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Here the meaning of the type variable is different, the idea is that all updates operate on contracts of type `T` but we don't know what is the type of the contracts that is going to be created as part of the transaction.",
        "createdAt" : "2019-09-02T09:24:37Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f97f9a2-2358-43ac-9820-c98d74b11fa0",
        "parentId" : "cc5b5434-a087-4467-9740-7620dd56b586",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Alright, so an exercise in DAML can any number contracts of any kind of template, and this is what this method returns? If so, then ignore my suggestions please.",
        "createdAt" : "2019-09-02T09:41:18Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8f7b6b0b-d731-448c-a804-e7d7aa9ffec0",
        "parentId" : "cc5b5434-a087-4467-9740-7620dd56b586",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Exactly.",
        "createdAt" : "2019-09-02T09:55:34Z",
        "updatedAt" : "2019-09-02T10:59:08Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3153aa5aee7120933b68f4773dedc170bfa2b123",
    "line" : 218,
    "diffHunk" : "@@ -243,6 +328,23 @@ private[testtool] final class LedgerTestContext private[infrastructure] (\n   ): Future[TransactionTree] =\n     submitAndWaitRequest(party, exercise(party).command).flatMap(submitAndWaitForTransactionTree)\n \n+  def exerciseAndGetContract[T](\n+      party: Party,\n+      exercise: Party => Primitive.Update[_]\n+  ): Future[Primitive.ContractId[T]] =\n+    submitAndWaitRequest(party, exercise(party).command)\n+      .flatMap(submitAndWaitForTransaction)\n+      .map(extractContracts)\n+      .map(_.head.asInstanceOf[Primitive.ContractId[T]])\n+\n+  def exerciseAndGetContracts[T](\n+      party: Party,\n+      exercise: Party => Primitive.Update[T]\n+  ): Future[Seq[Primitive.ContractId[_]]] ="
  },
  {
    "id" : "55f4602f-266a-4861-b0c2-b65f6dcb2e16",
    "prId" : 2580,
    "comments" : [
      {
        "id" : "4b47a283-15a3-4f37-bed5-4685199ca5b6",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Not sure this change is necessary. If we can avoid allowing test contexts to be instantiated outside of the `infrastructure` package I believe it would make it less probable to inadvertently shoot ourselfs in the foot. ",
        "createdAt" : "2019-08-22T08:25:11Z",
        "updatedAt" : "2019-08-22T08:58:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d25afbc5-bcb2-4ce2-8eee-969f33e05ea3",
        "parentId" : "4b47a283-15a3-4f37-bed5-4685199ca5b6",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I only needed that to be able to use the type `LedgerTestContext` in the signature of a [helper method](https://github.com/digital-asset/daml/pull/2580/files#diff-1b8839de3a7ecbb5a49106dd66e0dc7cR52). How about making the constructor package private to `infrastructure`?\r\n\r\n```scala\r\nprivate[testtool] final class LedgerTestContext private[infrastructure](...)\r\n```",
        "createdAt" : "2019-08-22T08:36:32Z",
        "updatedAt" : "2019-08-22T08:58:24Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9954748c-dba6-47fb-9c0b-ceb74c50bc1d",
        "parentId" : "4b47a283-15a3-4f37-bed5-4685199ca5b6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Makes sense, thanks.",
        "createdAt" : "2019-08-22T08:44:17Z",
        "updatedAt" : "2019-08-22T08:58:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b181c94af530655fbe510732ed5f6ab6a447fc08",
    "line" : null,
    "diffHunk" : "@@ -69,7 +69,7 @@ object LedgerTestContext {\n \n }\n \n-private[infrastructure] final class LedgerTestContext(\n+private[testtool] final class LedgerTestContext("
  },
  {
    "id" : "86480ebe-cd75-420e-a1e1-97390656dfd7",
    "prId" : 2573,
    "comments" : [
      {
        "id" : "4e4ade0b-d22d-45f2-a0cf-6d6e115c657d",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Is this the ledger ID?",
        "createdAt" : "2019-08-16T12:33:52Z",
        "updatedAt" : "2019-08-16T13:57:49Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "988bbde7-c584-47a7-80d6-f9d9d3299cdb",
        "parentId" : "4e4ade0b-d22d-45f2-a0cf-6d6e115c657d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yes, the only reason why I made this shorter it's because the binding of the context is usually called `ledger` and `ledger.id` seems a bit better than `ledger.ledgerId` but it's not that important, probably it's better to revert it.",
        "createdAt" : "2019-08-16T12:56:51Z",
        "updatedAt" : "2019-08-16T13:57:49Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1f8203d3-4607-4bb4-87b4-28742467fa2c",
        "parentId" : "4e4ade0b-d22d-45f2-a0cf-6d6e115c657d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2573/commits/9fee1f3007d39c57c4533707639f2f158dac6028",
        "createdAt" : "2019-08-16T13:27:11Z",
        "updatedAt" : "2019-08-16T13:57:49Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8bc2c4c323b336a7a9f52540c08a1697d6222824",
    "line" : null,
    "diffHunk" : "@@ -3,30 +3,84 @@\n \n package com.daml.ledger.api.testtool.infrastructure\n \n-import java.time.Instant\n+import java.time.{Clock, Instant}\n \n-import com.digitalasset.daml.lf.data.Ref\n-import com.digitalasset.daml.lf.language.Ast\n+import com.digitalasset.ledger.api.v1.active_contracts_service.{\n+  GetActiveContractsRequest,\n+  GetActiveContractsResponse\n+}\n+import com.digitalasset.ledger.api.v1.admin.party_management_service.AllocatePartyRequest\n import com.digitalasset.ledger.api.v1.command_service.SubmitAndWaitRequest\n-import com.digitalasset.ledger.api.v1.commands.Command\n-import com.digitalasset.ledger.api.v1.event.CreatedEvent\n+import com.digitalasset.ledger.api.v1.commands.{Command, Commands}\n+import com.digitalasset.ledger.api.v1.event.Event.Event.Created\n+import com.digitalasset.ledger.api.v1.event.{CreatedEvent, Event}\n import com.digitalasset.ledger.api.v1.ledger_offset.LedgerOffset\n+import com.digitalasset.ledger.api.v1.testing.time_service.{\n+  GetTimeRequest,\n+  GetTimeResponse,\n+  SetTimeRequest\n+}\n import com.digitalasset.ledger.api.v1.transaction.{Transaction, TransactionTree}\n-import com.digitalasset.ledger.api.v1.value.Identifier\n+import com.digitalasset.ledger.api.v1.transaction_filter.{\n+  Filters,\n+  InclusiveFilters,\n+  TransactionFilter\n+}\n+import com.digitalasset.ledger.api.v1.transaction_service.{\n+  GetLedgerEndRequest,\n+  GetTransactionByIdRequest,\n+  GetTransactionsRequest\n+}\n+import com.digitalasset.ledger.api.v1.value.{Identifier, Value}\n import com.digitalasset.ledger.client.binding.Primitive.Party\n import com.digitalasset.ledger.client.binding.{Contract, Primitive, Template, ValueDecoder}\n+import com.digitalasset.platform.testing.{FiniteStreamObserver, SingleItemObserver}\n+import com.google.protobuf.timestamp.Timestamp\n+import io.grpc.stub.StreamObserver\n+import scalaz.Tag\n+import scalaz.syntax.tag._\n \n import scala.concurrent.duration.Duration\n import scala.concurrent.{ExecutionContext, Future}\n+import scala.util.control.NonFatal\n+\n+object LedgerTestContext {\n+\n+  private[this] def filter(templateIds: Seq[Identifier]): Filters =\n+    new Filters(if (templateIds.isEmpty) None else Some(new InclusiveFilters(templateIds)))\n+\n+  private def transactionFilter(\n+      parties: Seq[String],\n+      templateIds: Seq[Identifier]): Some[TransactionFilter] =\n+    Some(new TransactionFilter(Map(parties.map(_ -> filter(templateIds)): _*)))\n \n-final class LedgerTestContext(\n+  private def timestamp(i: Instant): Some[Timestamp] =\n+    Some(new Timestamp(i.getEpochSecond, i.getNano))\n+\n+  private def timestampToInstant(t: Timestamp): Instant =\n+    Instant.EPOCH.plusSeconds(t.seconds).plusNanos(t.nanos.toLong)\n+\n+  private def instantToTimestamp(t: Instant): Timestamp =\n+    new Timestamp(t.getEpochSecond, t.getNano)\n+\n+  private val end = LedgerOffset(\n+    LedgerOffset.Value.Boundary(LedgerOffset.LedgerBoundary.LEDGER_END))\n+\n+  private val defaultTtlSeconds = 30\n+\n+}\n+\n+private[infrastructure] final class LedgerTestContext(\n+    val id: String,"
  },
  {
    "id" : "8efd408c-0cd4-4bf5-86a0-40a5aa375089",
    "prId" : 2508,
    "comments" : [
      {
        "id" : "6ecb1731-b705-4a34-b23e-a051deb0bbfa",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Why making this public? It's used internally exclusively and it should not be part of the public API.",
        "createdAt" : "2019-08-13T12:10:50Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8561314e-6b41-407f-8632-3d20b3d3d5d8",
        "parentId" : "6ecb1731-b705-4a34-b23e-a051deb0bbfa",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I see why the change has been done. As I've commented in another comment, I believe this is better encapsulated here and a controlled version of `submitAndWait` exposed.",
        "createdAt" : "2019-08-13T13:09:48Z",
        "updatedAt" : "2019-08-15T14:01:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2f7e5b7654159e3a35c0c4c116f43779c18dedc8",
    "line" : null,
    "diffHunk" : "@@ -31,7 +31,7 @@ final class LedgerTestContext(\n     () =>\n       it.synchronized(it.next())\n   }\n-  private[this] val nextCommandId: () => String = {\n+  val nextCommandId: () => String = {"
  },
  {
    "id" : "2dbb41fa-52af-467b-a0dc-2e35e0cbd21e",
    "prId" : 2452,
    "comments" : [
      {
        "id" : "dc71f130-05cd-4062-b24f-db7f1b60b357",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@stefanobaghino-da: we might want to put this logic somewhere else.",
        "createdAt" : "2019-08-08T08:42:10Z",
        "updatedAt" : "2019-08-08T09:46:14Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4f785c7c0d1d2c34c8d51854d685a8d38693299e",
    "line" : null,
    "diffHunk" : "@@ -63,4 +65,9 @@ final class LedgerTestContext(\n   def semanticTesterLedger(parties: Set[Ref.Party], packages: Map[Ref.PackageId, Ast.Package]) =\n     new SemanticTesterLedger(bindings)(parties, packages)(this)\n \n+  def extractErrorStatus[A](future: Future[A]): Future[Status.Code] ="
  },
  {
    "id" : "9780bc91-49d1-4e6e-86f1-6182efbe51ed",
    "prId" : 2452,
    "comments" : [
      {
        "id" : "f5218f23-a7ba-488c-991e-169769776bfb",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Very nice method. :slightly_smiling_face. This does not need to be in the `LedgerTestContext`, but rather needs an `ExecutionContext` for it to run. I would suggest moving it in the `LedgerTestSuite` taking an implicit `ExecutionContext` (of which `LedgerTestContext` is an instance).",
        "createdAt" : "2019-08-08T08:49:18Z",
        "updatedAt" : "2019-08-08T09:46:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6610ada0-07a7-4672-8c5f-5141ecdb719b",
        "parentId" : "f5218f23-a7ba-488c-991e-169769776bfb",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Given how it's used, a good name could be something like `expectGrpcErrorCode`.",
        "createdAt" : "2019-08-08T08:51:12Z",
        "updatedAt" : "2019-08-08T09:46:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "05d49f24-f749-4e35-afcc-b17b1e56ebcd",
        "parentId" : "f5218f23-a7ba-488c-991e-169769776bfb",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by acb912d.",
        "createdAt" : "2019-08-08T09:47:10Z",
        "updatedAt" : "2019-08-08T09:47:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4f785c7c0d1d2c34c8d51854d685a8d38693299e",
    "line" : null,
    "diffHunk" : "@@ -63,4 +65,9 @@ final class LedgerTestContext(\n   def semanticTesterLedger(parties: Set[Ref.Party], packages: Map[Ref.PackageId, Ast.Package]) =\n     new SemanticTesterLedger(bindings)(parties, packages)(this)\n \n+  def extractErrorStatus[A](future: Future[A]): Future[Status.Code] ="
  },
  {
    "id" : "ade918fc-248b-4a2f-bb30-a78125aeb37d",
    "prId" : 2452,
    "comments" : [
      {
        "id" : "ab22b10e-af86-4561-98d2-a59df8e5d2f5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Should we also catch [`io.grpc.StatusException`](https://grpc.github.io/grpc-java/javadoc/io/grpc/StatusException.html)s?",
        "createdAt" : "2019-08-08T08:51:50Z",
        "updatedAt" : "2019-08-08T09:46:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ffbf2f2a-0123-4d75-8fa6-c73a200828a8",
        "parentId" : "ab22b10e-af86-4561-98d2-a59df8e5d2f5",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by acb912d.",
        "createdAt" : "2019-08-08T09:47:06Z",
        "updatedAt" : "2019-08-08T09:47:06Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4f785c7c0d1d2c34c8d51854d685a8d38693299e",
    "line" : null,
    "diffHunk" : "@@ -63,4 +65,9 @@ final class LedgerTestContext(\n   def semanticTesterLedger(parties: Set[Ref.Party], packages: Map[Ref.PackageId, Ast.Package]) =\n     new SemanticTesterLedger(bindings)(parties, packages)(this)\n \n+  def extractErrorStatus[A](future: Future[A]): Future[Status.Code] =\n+    future.failed\n+      .collect {\n+        case NonFatal(ex: StatusRuntimeException) => ex.getStatus.getCode"
  }
]