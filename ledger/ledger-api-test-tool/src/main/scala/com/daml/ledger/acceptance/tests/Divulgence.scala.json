[
  {
    "id" : "9587573b-3062-4851-a016-477ed5767d80",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "1ee09c07-a212-4099-936c-18e25ac428c8",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This test is not yet complete, it's missing further assertions: https://github.com/digital-asset/daml/blob/2a17b3d1911e6b62dcb343ebf9c5aefdcceef657/ledger/ledger-api-integration-tests/src/test/itsuite/scala/com/digitalasset/platform/tests/integration/ledger/api/DivulgenceIT.scala#L284-L323",
        "createdAt" : "2019-07-29T07:21:32Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,67 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.acceptance.tests\n+\n+import com.daml.ledger.acceptance.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import com.digitalasset.ledger.api.v1.value.Value.Sum.{ContractId, Party}\n+\n+import scala.concurrent.Future\n+\n+final class Divulgence(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  private val flatStreamDivulgence =\n+    LedgerTest(\"Divulged contracts should not be exposed in the flat transaction stream\") {\n+      implicit context =>\n+        for {\n+          Vector(alice, bob) <- allocateParties(2)\n+          divulgence1 <- create(\n+            alice,\n+            templateIds.divulgence1,\n+            \"div1Party\" -> new Party(alice)\n+          )\n+          divulgence2 <- create(\n+            bob,\n+            templateIds.divulgence2,\n+            \"div2Signatory\" -> new Party(bob),\n+            \"div2Fetcher\" -> new Party(alice)\n+          )\n+          _ <- exercise(\n+            alice,\n+            templateIds.divulgence2,\n+            divulgence2,\n+            \"Divulgence2Archive\",\n+            \"div1ToArchive\" -> new ContractId(divulgence1))\n+          transactions <- transactionsSinceStart(bob)\n+        } yield {\n+          assert(\n+            transactions.size == 1,\n+            s\"Bob should see exactly one transaction but sees ${transactions.size} instead\")\n+          val events = transactions.head.events\n+          assert(\n+            events.size == 1,\n+            s\"The transaction should contain exactly one event but contains ${events.size} instead\")\n+          val event = events.head.event\n+          assert(event.isCreated, \"The transaction should contain a created event\")\n+          val contractId = event.created.get.contractId\n+          assert(\n+            contractId == divulgence2,\n+            \"The only visible event should be the creation of the second contract\")\n+        }"
  }
]