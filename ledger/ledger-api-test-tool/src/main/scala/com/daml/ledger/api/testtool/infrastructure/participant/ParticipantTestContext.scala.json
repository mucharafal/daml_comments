[
  {
    "id" : "07a131a4-8613-4fae-9e96-44430128c559",
    "prId" : 7714,
    "comments" : [
      {
        "id" : "b4288f58-44f6-4791-b5fc-3b0059db0431",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think we could still keep this.",
        "createdAt" : "2020-10-16T11:18:20Z",
        "updatedAt" : "2020-10-16T11:27:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f66bb9f8-271d-4625-bc68-6821c1290691",
        "parentId" : "b4288f58-44f6-4791-b5fc-3b0059db0431",
        "author" : {
          "login" : "kamil-da",
          "name" : "Kamil Bożek",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/72492440?u=e7ea2d3e3a22508e4942f56fa3fc86f6dd28f06c&v=4"
        },
        "body" : "Restored to the initial state 👍 ",
        "createdAt" : "2020-10-16T11:28:23Z",
        "updatedAt" : "2020-10-16T11:28:23Z",
        "lastEditedBy" : {
          "login" : "kamil-da",
          "name" : "Kamil Bożek",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/72492440?u=e7ea2d3e3a22508e4942f56fa3fc86f6dd28f06c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a6c9781954fbe6ede931e76a263a4343d5a2dd7f",
    "line" : 3,
    "diffHunk" : "@@ -114,15 +114,14 @@ private[testtool] final class ParticipantTestContext private[participant] (\n     */\n   val end: LedgerOffset =\n     LedgerOffset(LedgerOffset.Value.Boundary(LedgerOffset.LedgerBoundary.LEDGER_END))\n-\n-  private[this] val identifierPrefix = s\"$applicationId-$endpointId-$identifierSuffix\""
  },
  {
    "id" : "e88efc17-0a9a-4620-8d3f-ae0408791d00",
    "prId" : 7251,
    "comments" : [
      {
        "id" : "7ca746d8-03f6-4779-872b-2ba6f3f23dea",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * Gets an absolute offset that is beyond the current ledger end.\r\n```",
        "createdAt" : "2020-08-27T13:51:27Z",
        "updatedAt" : "2020-08-28T07:02:17Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "475e930a877b740b8c4a1e2b6794ea7e7f4fd2d2",
    "line" : null,
    "diffHunk" : "@@ -140,6 +140,19 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def currentEnd(overrideLedgerId: String): Future[LedgerOffset] =\n     services.transaction.getLedgerEnd(new GetLedgerEndRequest(overrideLedgerId)).map(_.getOffset)\n \n+  /**\n+    * Gets the absolute offset that is beyond the current ledger end."
  },
  {
    "id" : "53801ad2-7e77-48f0-845f-73f9c8964841",
    "prId" : 7251,
    "comments" : [
      {
        "id" : "327bd91a-55f6-4891-9b23-d2d37fcd9f79",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we rename this to something a but more deadly?\r\n\r\nPerhaps \"offsetWayPastLedgerEnd\"?",
        "createdAt" : "2020-08-27T13:51:58Z",
        "updatedAt" : "2020-08-28T07:02:17Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8f73b758-4a96-4736-bdf8-fb1320db4196",
        "parentId" : "327bd91a-55f6-4891-9b23-d2d37fcd9f79",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Renamed to `offsetBeyondLedgerEnd`",
        "createdAt" : "2020-08-28T07:08:27Z",
        "updatedAt" : "2020-08-28T07:08:28Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "475e930a877b740b8c4a1e2b6794ea7e7f4fd2d2",
    "line" : null,
    "diffHunk" : "@@ -140,6 +140,19 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def currentEnd(overrideLedgerId: String): Future[LedgerOffset] =\n     services.transaction.getLedgerEnd(new GetLedgerEndRequest(overrideLedgerId)).map(_.getOffset)\n \n+  /**\n+    * Gets the absolute offset that is beyond the current ledger end.\n+    *\n+    * Note: offsets are opaque byte strings, but they are lexicographically sortable.\n+    * Prepending the current absolute ledger end with non-zero bytes creates an offset that\n+    * is be beyond the current ledger end for the ledger API server.\n+    * The offset might however not be valid for the underlying ledger.\n+    * This method can therefore only be used for offsets that are only interpreted by the\n+    * ledger API server and not sent to the ledger.\n+    */\n+  def futureOffset(): Future[LedgerOffset] ="
  },
  {
    "id" : "03d11d2e-05a8-4827-9ecf-840f705c822a",
    "prId" : 6382,
    "comments" : [
      {
        "id" : "a409d072-a9a9-4f06-8772-9e8856c69953",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If after the previous suggestion this is unused, please remove it.",
        "createdAt" : "2020-06-17T14:17:53Z",
        "updatedAt" : "2020-06-19T09:18:12Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2894e242-c910-415f-962f-7605f91584ff",
        "parentId" : "a409d072-a9a9-4f06-8772-9e8856c69953",
        "author" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "body" : "Done",
        "createdAt" : "2020-06-18T09:49:32Z",
        "updatedAt" : "2020-06-19T09:18:12Z",
        "lastEditedBy" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "efb941f667b1ddcd27e8da8d7740f2ea79ba5a67",
    "line" : null,
    "diffHunk" : "@@ -201,9 +201,12 @@ private[testtool] final class ParticipantTestContext private[participant] (\n       .map(_.partyDetails)\n \n   def listKnownParties(): Future[Set[Party]] =\n+    listKnownPartyDetails().map(_.map(partyDetails => Party(partyDetails.party)).toSet)\n+\n+  def listKnownPartyDetails(): Future[Seq[PartyDetails]] ="
  },
  {
    "id" : "692b66ce-0e1e-4f8b-9cbc-430d674f020a",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "af475022-2d39-4290-9950-1d1ba05096ac",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "For better readability please use:\r\n```scala\r\n  .foreach { actualParties =>\r\n    ...\r\n  }\r\n```",
        "createdAt" : "2020-02-10T10:01:48Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : null,
    "diffHunk" : "@@ -210,21 +211,26 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def waitForParties(\n       otherParticipants: Iterable[ParticipantTestContext],\n       expectedParties: Set[Party],\n-  ): Future[Unit] = eventually {\n-    val participants = otherParticipants.toSet + this\n-    Future\n-      .sequence(participants.map(otherParticipant => {\n-        otherParticipant\n-          .listParties()\n-          .map(actualParties => {\n-            assert(\n-              expectedParties.subsetOf(actualParties),\n-              s\"Parties from $this never appeared on $otherParticipant.\",\n-            )\n-          })\n-      }))\n-      .map(_ => ())\n-  }\n+  ): Future[Unit] =\n+    if (waitForPartiesEnabled) {\n+      eventually {\n+        val participants = otherParticipants.toSet + this\n+        Future\n+          .sequence(participants.map(otherParticipant => {\n+            otherParticipant\n+              .listParties()\n+              .map(actualParties => {"
  },
  {
    "id" : "3d152da8-92ed-4c28-b5cd-c8aa761758a9",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "e0984948-58f3-4da0-b7c7-267d259fcd78",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "As you are just asserting that the parties have been allocated, it is enough to use `foreach` on the created futures instead of `map`. I.e.:\r\n```scala\r\nFuture\r\n  .sequence(participants.map { otherParticipant =>\r\n    otherParticipant\r\n      .listParties()\r\n      .foreach(/* assert here */)\r\n      ...\r\n```",
        "createdAt" : "2020-02-10T10:05:57Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d9be6db7-67f1-4d1f-bad5-dac6ba61ab3f",
        "parentId" : "e0984948-58f3-4da0-b7c7-267d259fcd78",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-02-10T12:25:14Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "03aefc20-7f1a-4a93-aaa8-709384954988",
        "parentId" : "e0984948-58f3-4da0-b7c7-267d259fcd78",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Hm, I don't see how a foreach works here. Its type is Unit and we need a Future here for this to work with the eventually combinator. I'll leave it as is.",
        "createdAt" : "2020-02-10T12:36:25Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "89f9ed43-1fa8-47de-98cc-b0362e568bce",
        "parentId" : "e0984948-58f3-4da0-b7c7-267d259fcd78",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Sorry, my oversight -- you're right, because of the `eventually` combinator you need to use `.map`.",
        "createdAt" : "2020-02-10T12:46:59Z",
        "updatedAt" : "2020-02-10T12:47:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : 32,
    "diffHunk" : "@@ -210,21 +211,26 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def waitForParties(\n       otherParticipants: Iterable[ParticipantTestContext],\n       expectedParties: Set[Party],\n-  ): Future[Unit] = eventually {\n-    val participants = otherParticipants.toSet + this\n-    Future\n-      .sequence(participants.map(otherParticipant => {\n-        otherParticipant\n-          .listParties()\n-          .map(actualParties => {\n-            assert(\n-              expectedParties.subsetOf(actualParties),\n-              s\"Parties from $this never appeared on $otherParticipant.\",\n-            )\n-          })\n-      }))\n-      .map(_ => ())\n-  }\n+  ): Future[Unit] =\n+    if (waitForPartiesEnabled) {\n+      eventually {\n+        val participants = otherParticipants.toSet + this\n+        Future\n+          .sequence(participants.map(otherParticipant => {"
  },
  {
    "id" : "6ec40092-234b-4274-a5ca-f26812601573",
    "prId" : 3153,
    "comments" : [
      {
        "id" : "d51465d4-868e-4602-a4ce-affe313ae1e6",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Do you think this is useful enough to have in the participant context, or should this rather be a utility function within the test?",
        "createdAt" : "2019-10-10T14:30:13Z",
        "updatedAt" : "2019-10-10T20:41:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f92c34105ccb2694917b584a32f79ae70a6ac215",
    "line" : null,
    "diffHunk" : "@@ -459,4 +466,41 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def submitAndWaitForTransactionTree(request: SubmitAndWaitRequest): Future[TransactionTree] =\n     services.command.submitAndWaitForTransactionTree(request).map(_.getTransaction)\n \n+  /** Moves all time values in the request (the LET and MRT) by the specified amount.\n+    * This simulates a request from a client with a skewed clock. */\n+  def moveRequestTime("
  },
  {
    "id" : "e84c5be7-ecff-423e-b0f4-db1e386a6282",
    "prId" : 3153,
    "comments" : [
      {
        "id" : "77ffe6c5-733b-4bb3-96e1-1c54c9bee2b1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What does `oc` stand for? Maybe rename it?",
        "createdAt" : "2019-10-10T14:31:21Z",
        "updatedAt" : "2019-10-10T20:41:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f92c34105ccb2694917b584a32f79ae70a6ac215",
    "line" : null,
    "diffHunk" : "@@ -459,4 +466,41 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def submitAndWaitForTransactionTree(request: SubmitAndWaitRequest): Future[TransactionTree] =\n     services.command.submitAndWaitForTransactionTree(request).map(_.getTransaction)\n \n+  /** Moves all time values in the request (the LET and MRT) by the specified amount.\n+    * This simulates a request from a client with a skewed clock. */\n+  def moveRequestTime(\n+      request: SubmitAndWaitRequest,\n+      offset: java.time.Duration): SubmitAndWaitRequest =\n+    request.copy(\n+      commands = request.commands.map(command =>\n+        command.copy(\n+          ledgerEffectiveTime = command.ledgerEffectiveTime.flatMap(let =>\n+            timestamp(instant(let).plus(offset))),\n+          maximumRecordTime = command.maximumRecordTime.flatMap(mrt =>\n+            timestamp(instant(mrt).plus(offset)))\n+      )))\n+\n+  private def configurations[Res](\n+      request: GetLedgerConfigurationRequest,\n+      service: (GetLedgerConfigurationRequest, StreamObserver[Res]) => Unit): Future[Option[Res]] =\n+    SingleItemObserver.first[Res](service(request, _))\n+\n+  def latestConfiguration(): Future[LedgerConfiguration] =\n+    configurations(\n+      new GetLedgerConfigurationRequest(ledgerId),\n+      services.configuration.getLedgerConfiguration)\n+      .map(\n+        _.flatMap(_.ledgerConfiguration).getOrElse(sys.error(\"No ledger configuration available.\")))\n+\n+  def latestMaxTtl(): Future[java.time.Duration] =\n+    latestConfiguration()\n+      .map(\n+        oc =>"
  },
  {
    "id" : "37008b97-750e-48a7-bcd1-c9bc50179e25",
    "prId" : 3153,
    "comments" : [
      {
        "id" : "b5bf8ca7-1e32-4ed7-8037-7daa58374589",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Do we always want to shift the offset for both LET and MRT?",
        "createdAt" : "2019-10-10T14:38:28Z",
        "updatedAt" : "2019-10-10T20:41:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f92c34105ccb2694917b584a32f79ae70a6ac215",
    "line" : null,
    "diffHunk" : "@@ -459,4 +466,41 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def submitAndWaitForTransactionTree(request: SubmitAndWaitRequest): Future[TransactionTree] =\n     services.command.submitAndWaitForTransactionTree(request).map(_.getTransaction)\n \n+  /** Moves all time values in the request (the LET and MRT) by the specified amount.\n+    * This simulates a request from a client with a skewed clock. */\n+  def moveRequestTime(\n+      request: SubmitAndWaitRequest,\n+      offset: java.time.Duration): SubmitAndWaitRequest =\n+    request.copy(\n+      commands = request.commands.map(command =>\n+        command.copy("
  },
  {
    "id" : "3c4e8cce-4d18-4502-9e6e-6d9dab2c99af",
    "prId" : 3052,
    "comments" : [
      {
        "id" : "cf463522-c8db-4b9b-8ea4-cba6b8a7f52a",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Preferably we should use `Duration` here.",
        "createdAt" : "2019-09-26T16:06:30Z",
        "updatedAt" : "2019-09-27T09:13:36Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d0704772-ebb4-43fd-8937-32a1a6f3f965",
        "parentId" : "cf463522-c8db-4b9b-8ea4-cba6b8a7f52a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3052/commits/f28736e5df07b0d30fd1b1d174e63fa974c75fde",
        "createdAt" : "2019-09-27T09:17:33Z",
        "updatedAt" : "2019-09-27T09:17:33Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8efcdd4cb8c2327da1e5fa8b20b81aaec11bf80c",
    "line" : null,
    "diffHunk" : "@@ -96,7 +94,7 @@ private[testtool] final class ParticipantTestContext private[participant] (\n     val identifierSuffix: String,\n     referenceOffset: LedgerOffset,\n     services: LedgerServices,\n-    commandTtlFactor: Double)(implicit ec: ExecutionContext) {\n+    ttlNanos: Long)(implicit ec: ExecutionContext) {"
  },
  {
    "id" : "31a77516-f8e4-47cd-9d81-8338fa82e377",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "f85a4e59-618b-4ca5-aa85-5266821c6bea",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to simply return the byte array directly here?",
        "createdAt" : "2019-09-24T08:08:26Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e3e83eb7-8a5e-494c-9a8d-cce180aea499",
        "parentId" : "f85a4e59-618b-4ca5-aa85-5266821c6bea",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "`GetPackageResponse` also contains the hash value and the hash type (although the hash value *should* be the same as the input `packageId`). ",
        "createdAt" : "2019-09-24T09:17:09Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : 21,
    "diffHunk" : "@@ -146,6 +153,17 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def participantId(): Future[String] =\n     services.partyManagement.getParticipantId(new GetParticipantIdRequest).map(_.participantId)\n \n+  def listPackages(): Future[Seq[String]] =\n+    services.packages.listPackages(new ListPackagesRequest(ledgerId)).map(_.packageIds)\n+\n+  def getPackage(packageId: String): Future[GetPackageResponse] ="
  },
  {
    "id" : "1b7061cf-15fc-4704-a107-0568bb0d6667",
    "prId" : 2961,
    "comments" : [
      {
        "id" : "2d985d39-ebdd-4f43-b053-42e5fb23663f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Do you want to move the \"low-level\" testing methods into a nested object?\r\nSomething like:\r\n```\r\nclass ParticipantTestContext {\r\n  object lowLevel {\r\n    // low-level methods here\r\n  }\r\n```\r\nThis way it is fairly obvious that these are discouraged from general purpose use. What do you think?",
        "createdAt" : "2019-09-23T08:24:13Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bb863154-69f3-49c0-a780-2b67b381a5e4",
        "parentId" : "2d985d39-ebdd-4f43-b053-42e5fb23663f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I was thinking of the same and I'm in favor of this (also to keep the \"actual\" API a bit leaner and cleaner). I would address this as part of a different ticket though. Is that OK with you?",
        "createdAt" : "2019-09-23T09:37:06Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6864acdb-ec1b-45f4-9763-657660664033",
        "parentId" : "2d985d39-ebdd-4f43-b053-42e5fb23663f",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Sure, thanks 👍 ",
        "createdAt" : "2019-09-23T09:46:49Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f1221504aed4a2bc42e4068e5ee9f8fed8c49",
    "line" : 42,
    "diffHunk" : "@@ -286,11 +296,75 @@ private[testtool] final class ParticipantTestContext private[participant] (\n   def transactionTrees(take: Int, parties: Party*): Future[Vector[TransactionTree]] =\n     transactionTrees(take, getTransactionsRequest(parties))\n \n+  /**\n+    * Create a [[GetTransactionByIdRequest]] with an identifier and a set of [[Party]] objects.\n+    * You should use this only when you need to tweak the request of [[transactionTreeById]] or\n+    * [[flatTransactionById]], otherwise use the shortcut override that allows you to directly\n+    * pass the identifier and parties.\n+    */\n+  def getTransactionByIdRequest(\n+      transactionId: String,\n+      parties: Seq[Party]): GetTransactionByIdRequest =\n+    new GetTransactionByIdRequest(ledgerId, transactionId, Tag.unsubst(parties))\n+\n+  /**\n+    * Non-managed version of [[transactionTreeById]], use this only if you need to tweak the request (i.e. to test low-level details)\n+    */\n+  def transactionTreeById(request: GetTransactionByIdRequest): Future[TransactionTree] ="
  }
]