[
  {
    "id" : "d849cdf8-23d0-48b2-8e37-bbabe2428bff",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "db155963-326a-493f-9b10-b7269ccc18fa",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "As you are just asserting that the parties have been allocated, it is enough to use `foreach` on the created futures instead of `map`. I.e.:\r\n```scala\r\nFuture\r\n  .sequence(participants.map { otherParticipant =>\r\n    otherParticipant\r\n      .listParties()\r\n      .foreach(/* assert here */)\r\n      ...\r\n```",
        "createdAt" : "2020-02-10T10:05:57Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d37d9411-09ac-4741-9e4f-4f2f9cd44269",
        "parentId" : "db155963-326a-493f-9b10-b7269ccc18fa",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M√§ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-02-10T12:25:14Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M√§ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "007a5e5d-1ee8-426f-9646-9e845a535f9e",
        "parentId" : "db155963-326a-493f-9b10-b7269ccc18fa",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M√§ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Hm, I don't see how a foreach works here. Its type is Unit and we need a Future here for this to work with the eventually combinator. I'll leave it as is.",
        "createdAt" : "2020-02-10T12:36:25Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M√§ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cde4c3db-2e9d-41d7-bfea-c23d928942d5",
        "parentId" : "db155963-326a-493f-9b10-b7269ccc18fa",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Sorry, my oversight -- you're right, because of the `eventually` combinator you need to use `.map`.",
        "createdAt" : "2020-02-10T12:46:59Z",
        "updatedAt" : "2020-02-10T12:47:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +217,221 @@        val participants = otherParticipants.toSet + this\n        Future\n          .sequence(participants.map(otherParticipant => {\n            otherParticipant\n              .listParties()"
  },
  {
    "id" : "862e39ce-eddc-4e99-86a6-9eb53f4fc91a",
    "prId" : 2988,
    "comments" : [
      {
        "id" : "2e3894cf-265f-41a6-adad-e452cb289775",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it make sense to simply return the byte array directly here?",
        "createdAt" : "2019-09-24T08:08:26Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b7aefd11-10a6-412c-800d-1f1b112fc70b",
        "parentId" : "2e3894cf-265f-41a6-adad-e452cb289775",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "`GetPackageResponse` also contains the hash value and the hash type (although the hash value *should* be the same as the input `packageId`). ",
        "createdAt" : "2019-09-24T09:17:09Z",
        "updatedAt" : "2019-09-24T12:37:50Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "676e49829bff5ae43df57086bbed3a3ce3b23560",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +157,161 @@    services.packages.listPackages(new ListPackagesRequest(ledgerId)).map(_.packageIds)\n\n  def getPackage(packageId: String): Future[GetPackageResponse] =\n    services.packages.getPackage(new GetPackageRequest(ledgerId, packageId))\n"
  },
  {
    "id" : "8a17a278-bd4c-471b-96b4-dbfb18013b90",
    "prId" : 2961,
    "comments" : [
      {
        "id" : "d210062a-a820-42f6-883e-740ba93db18c",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Do you want to move the \"low-level\" testing methods into a nested object?\r\nSomething like:\r\n```\r\nclass ParticipantTestContext {\r\n  object lowLevel {\r\n    // low-level methods here\r\n  }\r\n```\r\nThis way it is fairly obvious that these are discouraged from general purpose use. What do you think?",
        "createdAt" : "2019-09-23T08:24:13Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "51828904-b7e0-4f36-bf96-fdf95915dd91",
        "parentId" : "d210062a-a820-42f6-883e-740ba93db18c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I was thinking of the same and I'm in favor of this (also to keep the \"actual\" API a bit leaner and cleaner). I would address this as part of a different ticket though. Is that OK with you?",
        "createdAt" : "2019-09-23T09:37:06Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "26ee10c7-8344-4be6-b3f5-72abd91feb6f",
        "parentId" : "d210062a-a820-42f6-883e-740ba93db18c",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Sure, thanks üëç ",
        "createdAt" : "2019-09-23T09:46:49Z",
        "updatedAt" : "2019-09-23T13:11:21Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b32f1221504aed4a2bc42e4068e5ee9f8fed8c49",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +311,315 @@    * Non-managed version of [[transactionTreeById]], use this only if you need to tweak the request (i.e. to test low-level details)\n    */\n  def transactionTreeById(request: GetTransactionByIdRequest): Future[TransactionTree] =\n    services.transaction.getTransactionById(request).map(_.getTransaction)\n"
  }
]