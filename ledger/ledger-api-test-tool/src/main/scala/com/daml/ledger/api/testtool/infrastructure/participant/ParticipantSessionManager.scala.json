[
  {
    "id" : "fc65621a-5cd5-484d-8953-fa3c32cc4a7d",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "76137a9c-1bbf-4042-8c19-bb0069340ef7",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`Map`s are immutable by default in Scala, no need to specify it.",
        "createdAt" : "2020-09-07T10:12:31Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3cf1fc88-f28f-4dd4-929c-0d30b1050560",
        "parentId" : "76137a9c-1bbf-4042-8c19-bb0069340ef7",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yup, fixed.",
        "createdAt" : "2020-09-07T12:51:49Z",
        "updatedAt" : "2020-09-07T12:51:50Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : null,
    "diffHunk" : "@@ -3,26 +3,62 @@\n \n package com.daml.ledger.api.testtool.infrastructure.participant\n \n+import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantSessionManager._\n+import io.grpc.ManagedChannel\n import io.grpc.netty.{NegotiationType, NettyChannelBuilder}\n+import io.netty.channel.EventLoopGroup\n import io.netty.channel.nio.NioEventLoopGroup\n import io.netty.channel.socket.nio.NioSocketChannel\n import io.netty.util.concurrent.DefaultThreadFactory\n import org.slf4j.LoggerFactory\n \n-import scala.collection.concurrent.TrieMap\n+import scala.collection.immutable\n+import scala.concurrent.duration.SECONDS\n import scala.concurrent.{ExecutionContext, Future}\n \n-private[infrastructure] final class ParticipantSessionManager {\n+private[infrastructure] final class ParticipantSessionManager(\n+    sessions: immutable.Map[ParticipantSessionConfiguration, SessionParts],"
  },
  {
    "id" : "e94bed3a-3378-4a08-8beb-fdaddae8c3ff",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "5d5cc41c-3431-453f-b976-bad6bf4f7b24",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  val all: Vector[ParticipantSession] = sessions.valuesIterator.map(_._1).toVector\r\n```\r\nI would also recommend to rename `all` to `allSessions`.",
        "createdAt" : "2020-09-07T10:14:21Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aea527a9-e9d7-4a20-8ab8-061187a24a98",
        "parentId" : "5d5cc41c-3431-453f-b976-bad6bf4f7b24",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-09-07T12:51:54Z",
        "updatedAt" : "2020-09-07T12:51:55Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : null,
    "diffHunk" : "@@ -3,26 +3,62 @@\n \n package com.daml.ledger.api.testtool.infrastructure.participant\n \n+import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantSessionManager._\n+import io.grpc.ManagedChannel\n import io.grpc.netty.{NegotiationType, NettyChannelBuilder}\n+import io.netty.channel.EventLoopGroup\n import io.netty.channel.nio.NioEventLoopGroup\n import io.netty.channel.socket.nio.NioSocketChannel\n import io.netty.util.concurrent.DefaultThreadFactory\n import org.slf4j.LoggerFactory\n \n-import scala.collection.concurrent.TrieMap\n+import scala.collection.immutable\n+import scala.concurrent.duration.SECONDS\n import scala.concurrent.{ExecutionContext, Future}\n \n-private[infrastructure] final class ParticipantSessionManager {\n+private[infrastructure] final class ParticipantSessionManager(\n+    sessions: immutable.Map[ParticipantSessionConfiguration, SessionParts],\n+) {\n+  lazy val all: immutable.Seq[ParticipantSession] = sessions.values.toVector.map(_._1)"
  },
  {
    "id" : "b6fe4614-6d8c-43f4-a8f2-60f3243b328d",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "ce46bd31-7c94-4fef-bd7a-c1382983e523",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If you convert this to a `case class` you can name the members of the tuple and make uses way more readable.\r\n\r\nI cannot stress enough how the indirection of type aliases simply trades a few characters less to write for a whole lot of jumps back and forth between the uses and the definition for the reader (which will eventually also be the writer).",
        "createdAt" : "2020-09-07T10:17:09Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "44dc8384-5e12-41b8-8488-614e447fb858",
        "parentId" : "ce46bd31-7c94-4fef-bd7a-c1382983e523",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I made it a real class, and it went ahead and attracted the disconnect logic, which makes the code much nicer IMO. Thanks for the tip.",
        "createdAt" : "2020-09-07T12:52:52Z",
        "updatedAt" : "2020-09-07T12:52:52Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : null,
    "diffHunk" : "@@ -3,26 +3,62 @@\n \n package com.daml.ledger.api.testtool.infrastructure.participant\n \n+import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantSessionManager._\n+import io.grpc.ManagedChannel\n import io.grpc.netty.{NegotiationType, NettyChannelBuilder}\n+import io.netty.channel.EventLoopGroup\n import io.netty.channel.nio.NioEventLoopGroup\n import io.netty.channel.socket.nio.NioSocketChannel\n import io.netty.util.concurrent.DefaultThreadFactory\n import org.slf4j.LoggerFactory\n \n-import scala.collection.concurrent.TrieMap\n+import scala.collection.immutable\n+import scala.concurrent.duration.SECONDS\n import scala.concurrent.{ExecutionContext, Future}\n \n-private[infrastructure] final class ParticipantSessionManager {\n+private[infrastructure] final class ParticipantSessionManager(\n+    sessions: immutable.Map[ParticipantSessionConfiguration, SessionParts],\n+) {\n+  lazy val all: immutable.Seq[ParticipantSession] = sessions.values.toVector.map(_._1)\n \n-  private[this] val logger = LoggerFactory.getLogger(classOf[ParticipantSession])\n+  def get(configuration: ParticipantSessionConfiguration): ParticipantSession =\n+    sessions(configuration)._1\n \n-  private[this] val channels = TrieMap.empty[ParticipantSessionConfiguration, ParticipantSession]\n+  def closeAll(): Unit =\n+    for ((config, (_, channel, eventLoopGroup)) <- sessions) {\n+      logger.info(s\"Disconnecting from participant at ${config.address}...\")\n+      channel.shutdownNow()\n+      if (!channel.awaitTermination(10L, SECONDS)) {\n+        sys.error(\"Channel shutdown stuck. Unable to recover. Terminating.\")\n+      }\n+      logger.info(s\"Connection to participant at ${config.address} shut down.\")\n+      if (!eventLoopGroup\n+          .shutdownGracefully(0, 0, SECONDS)\n+          .await(10L, SECONDS)) {\n+        sys.error(\"Unable to shutdown event loop. Unable to recover. Terminating.\")\n+      }\n+      logger.info(s\"Connection to participant at ${config.address} closed.\")\n+    }\n+}\n+\n+object ParticipantSessionManager {\n+  private type SessionParts = (ParticipantSession, ManagedChannel, EventLoopGroup)"
  },
  {
    "id" : "b9857494-e85b-4541-a1cf-ed6223f9ba23",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "2c963fe2-7e8c-466c-b823-3a0b88b6bc80",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would prefer if you could use `get` rather than `apply` here.",
        "createdAt" : "2020-09-07T10:18:11Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3950f90b-3099-4f3c-acda-1951bb28825f",
        "parentId" : "2c963fe2-7e8c-466c-b823-3a0b88b6bc80",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Deleted this method; it's no longer used.",
        "createdAt" : "2020-09-07T12:52:05Z",
        "updatedAt" : "2020-09-07T12:52:06Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : null,
    "diffHunk" : "@@ -3,26 +3,62 @@\n \n package com.daml.ledger.api.testtool.infrastructure.participant\n \n+import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantSessionManager._\n+import io.grpc.ManagedChannel\n import io.grpc.netty.{NegotiationType, NettyChannelBuilder}\n+import io.netty.channel.EventLoopGroup\n import io.netty.channel.nio.NioEventLoopGroup\n import io.netty.channel.socket.nio.NioSocketChannel\n import io.netty.util.concurrent.DefaultThreadFactory\n import org.slf4j.LoggerFactory\n \n-import scala.collection.concurrent.TrieMap\n+import scala.collection.immutable\n+import scala.concurrent.duration.SECONDS\n import scala.concurrent.{ExecutionContext, Future}\n \n-private[infrastructure] final class ParticipantSessionManager {\n+private[infrastructure] final class ParticipantSessionManager(\n+    sessions: immutable.Map[ParticipantSessionConfiguration, SessionParts],\n+) {\n+  lazy val all: immutable.Seq[ParticipantSession] = sessions.values.toVector.map(_._1)\n \n-  private[this] val logger = LoggerFactory.getLogger(classOf[ParticipantSession])\n+  def get(configuration: ParticipantSessionConfiguration): ParticipantSession =\n+    sessions(configuration)._1"
  },
  {
    "id" : "d846743b-827d-4baf-959e-929674530108",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "081c9f85-63ce-4da1-b249-4c10562b6787",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would recommend using a concrete collection to make sure the performance characteristics are clear.",
        "createdAt" : "2020-09-07T10:20:03Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : 37,
    "diffHunk" : "@@ -3,26 +3,62 @@\n \n package com.daml.ledger.api.testtool.infrastructure.participant\n \n+import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantSessionManager._\n+import io.grpc.ManagedChannel\n import io.grpc.netty.{NegotiationType, NettyChannelBuilder}\n+import io.netty.channel.EventLoopGroup\n import io.netty.channel.nio.NioEventLoopGroup\n import io.netty.channel.socket.nio.NioSocketChannel\n import io.netty.util.concurrent.DefaultThreadFactory\n import org.slf4j.LoggerFactory\n \n-import scala.collection.concurrent.TrieMap\n+import scala.collection.immutable\n+import scala.concurrent.duration.SECONDS\n import scala.concurrent.{ExecutionContext, Future}\n \n-private[infrastructure] final class ParticipantSessionManager {\n+private[infrastructure] final class ParticipantSessionManager(\n+    sessions: immutable.Map[ParticipantSessionConfiguration, SessionParts],\n+) {\n+  lazy val all: immutable.Seq[ParticipantSession] = sessions.values.toVector.map(_._1)\n \n-  private[this] val logger = LoggerFactory.getLogger(classOf[ParticipantSession])\n+  def get(configuration: ParticipantSessionConfiguration): ParticipantSession =\n+    sessions(configuration)._1\n \n-  private[this] val channels = TrieMap.empty[ParticipantSessionConfiguration, ParticipantSession]\n+  def closeAll(): Unit =\n+    for ((config, (_, channel, eventLoopGroup)) <- sessions) {\n+      logger.info(s\"Disconnecting from participant at ${config.address}...\")\n+      channel.shutdownNow()\n+      if (!channel.awaitTermination(10L, SECONDS)) {\n+        sys.error(\"Channel shutdown stuck. Unable to recover. Terminating.\")\n+      }\n+      logger.info(s\"Connection to participant at ${config.address} shut down.\")\n+      if (!eventLoopGroup\n+          .shutdownGracefully(0, 0, SECONDS)\n+          .await(10L, SECONDS)) {\n+        sys.error(\"Unable to shutdown event loop. Unable to recover. Terminating.\")\n+      }\n+      logger.info(s\"Connection to participant at ${config.address} closed.\")\n+    }\n+}\n+\n+object ParticipantSessionManager {\n+  private type SessionParts = (ParticipantSession, ManagedChannel, EventLoopGroup)\n+\n+  private val logger = LoggerFactory.getLogger(classOf[ParticipantSession])\n+\n+  def apply(configs: immutable.Seq[ParticipantSessionConfiguration])("
  },
  {
    "id" : "919c05fd-87e0-4b52-b476-fe353d0e32e5",
    "prId" : 7328,
    "comments" : [
      {
        "id" : "481db2fc-2517-4490-9d52-d7bd49f13c11",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n    } yield new ParticipantSessionManager(participantSessions.toMap)\r\n```\r\nThis should be equivalent, right?",
        "createdAt" : "2020-09-07T10:21:05Z",
        "updatedAt" : "2020-09-07T12:51:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4704b586-fe2e-47ef-adef-5e49a71634e9",
        "parentId" : "481db2fc-2517-4490-9d52-d7bd49f13c11",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "It is, well spotted. Thanks!",
        "createdAt" : "2020-09-07T12:52:12Z",
        "updatedAt" : "2020-09-07T12:52:12Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf7583b91c2f670c439f510026de0dfba0bb94f0",
    "line" : null,
    "diffHunk" : "@@ -3,26 +3,62 @@\n \n package com.daml.ledger.api.testtool.infrastructure.participant\n \n+import com.daml.ledger.api.testtool.infrastructure.participant.ParticipantSessionManager._\n+import io.grpc.ManagedChannel\n import io.grpc.netty.{NegotiationType, NettyChannelBuilder}\n+import io.netty.channel.EventLoopGroup\n import io.netty.channel.nio.NioEventLoopGroup\n import io.netty.channel.socket.nio.NioSocketChannel\n import io.netty.util.concurrent.DefaultThreadFactory\n import org.slf4j.LoggerFactory\n \n-import scala.collection.concurrent.TrieMap\n+import scala.collection.immutable\n+import scala.concurrent.duration.SECONDS\n import scala.concurrent.{ExecutionContext, Future}\n \n-private[infrastructure] final class ParticipantSessionManager {\n+private[infrastructure] final class ParticipantSessionManager(\n+    sessions: immutable.Map[ParticipantSessionConfiguration, SessionParts],\n+) {\n+  lazy val all: immutable.Seq[ParticipantSession] = sessions.values.toVector.map(_._1)\n \n-  private[this] val logger = LoggerFactory.getLogger(classOf[ParticipantSession])\n+  def get(configuration: ParticipantSessionConfiguration): ParticipantSession =\n+    sessions(configuration)._1\n \n-  private[this] val channels = TrieMap.empty[ParticipantSessionConfiguration, ParticipantSession]\n+  def closeAll(): Unit =\n+    for ((config, (_, channel, eventLoopGroup)) <- sessions) {\n+      logger.info(s\"Disconnecting from participant at ${config.address}...\")\n+      channel.shutdownNow()\n+      if (!channel.awaitTermination(10L, SECONDS)) {\n+        sys.error(\"Channel shutdown stuck. Unable to recover. Terminating.\")\n+      }\n+      logger.info(s\"Connection to participant at ${config.address} shut down.\")\n+      if (!eventLoopGroup\n+          .shutdownGracefully(0, 0, SECONDS)\n+          .await(10L, SECONDS)) {\n+        sys.error(\"Unable to shutdown event loop. Unable to recover. Terminating.\")\n+      }\n+      logger.info(s\"Connection to participant at ${config.address} closed.\")\n+    }\n+}\n+\n+object ParticipantSessionManager {\n+  private type SessionParts = (ParticipantSession, ManagedChannel, EventLoopGroup)\n+\n+  private val logger = LoggerFactory.getLogger(classOf[ParticipantSession])\n+\n+  def apply(configs: immutable.Seq[ParticipantSessionConfiguration])(\n+      implicit executionContext: ExecutionContext\n+  ): Future[ParticipantSessionManager] =\n+    for {\n+      participantSessions <- Future\n+        .traverse(configs)(config => connect(config).map(config -> _))\n+        .map(_.toMap)\n+    } yield new ParticipantSessionManager(participantSessions)"
  }
]