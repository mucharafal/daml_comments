[
  {
    "id" : "b9a2dc78-a7e8-42fc-b7d0-b57bdf97c559",
    "prId" : 7051,
    "comments" : [
      {
        "id" : "47a4f58e-25d8-4925-847a-842425a8edad",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Isn't `Some(_) | None` the same as `_`?\r\n\r\n```suggestion\r\n      case (GrpcException(GrpcStatus(`expectedCode`, _), _), None) => ()\r\n```",
        "createdAt" : "2020-08-06T17:54:16Z",
        "updatedAt" : "2020-08-06T18:05:47Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "767e0265-df90-4c0b-853e-d9d04b103623",
        "parentId" : "47a4f58e-25d8-4925-847a-842425a8edad",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`null` matches neither ðŸ™‚ \r\n\r\nStrictly speaking it doesn't preserve semantics, but it is probably what we meant anyway so I'll adopt that change.",
        "createdAt" : "2020-08-06T18:05:14Z",
        "updatedAt" : "2020-08-06T18:05:47Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "703d5dae-0db8-401d-a8fa-9daad64d7199",
        "parentId" : "47a4f58e-25d8-4925-847a-842425a8edad",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "![You are technically correct. The best kind of correct.](https://user-images.githubusercontent.com/60356447/89566564-aa8ad600-d820-11ea-8a9f-959c051c7258.gif)\r\n",
        "createdAt" : "2020-08-06T18:09:19Z",
        "updatedAt" : "2020-08-06T18:09:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d3af0a63186840ccb4158b6bec2f780692fcc17",
    "line" : null,
    "diffHunk" : "@@ -50,9 +50,7 @@ object Assertions extends DiffExtensions {\n         }\n       // None both represents pattern that we do not care about as well as\n       // exceptions that have no message.\n-      case (GrpcException(GrpcStatus(`expectedCode`, Some(msg)), _), None) => ()\n-      case (GrpcException(GrpcStatus(`expectedCode`, None), _), None) =>\n-        ()\n+      case (GrpcException(GrpcStatus(`expectedCode`, Some(_) | None), _), None) => ()"
  },
  {
    "id" : "d9205888-8884-4b40-8208-4472c6f68d41",
    "prId" : 6429,
    "comments" : [
      {
        "id" : "13e560f3-a6e6-4fba-8601-61c638b2726e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Perhaps provide an overload that takes a `Pattern`, rather than making everyone who calls this think about regular expressions?\r\n\r\nI'd be up for renaming this one to `substring`.",
        "createdAt" : "2020-06-19T09:59:26Z",
        "updatedAt" : "2020-06-19T11:32:48Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4878ec27-bcf2-4bd9-8df2-de85b6efb083",
        "parentId" : "13e560f3-a6e6-4fba-8601-61c638b2726e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "good idea, added an overload. I donâ€™t care about the name so happy to change it instead of overloading if you prefer.\r\n\r\nBut we should all spend more time thinking about regex, regex are pretty cool!",
        "createdAt" : "2020-06-19T10:44:34Z",
        "updatedAt" : "2020-06-19T11:32:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f63b442d9fc7982d124644c27ceeea9e3f102b3f",
    "line" : null,
    "diffHunk" : "@@ -34,14 +35,21 @@ object Assertions extends DiffExtensions {\n       )\n   }\n \n+  /** Match the given exception against a status code and a regex for the expected message.\n+      Succeeds if the exception is a GrpcException with the expected code and\n+      the regex matches some part of the message or there is no message and the pattern is\n+      empty.\n+    */\n   def assertGrpcError(t: Throwable, expectedCode: Status.Code, pattern: String): Unit ="
  },
  {
    "id" : "ad68d8c5-2c5f-4237-8cda-ea4c71157aaf",
    "prId" : 6429,
    "comments" : [
      {
        "id" : "e1053f81-8b37-45f6-a58d-d2b01a0c51b7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Just realized you can use `Regex` from Scala, rather than Java's `Pattern`. This allows you to use `.r` to compile a regular expression.\r\n\r\n```scala\r\n\"my\\\\s+regex [Ii][Ss] GREAT[!\\\\.]\".r\r\n```\r\n\r\nNot too fussed which you prefer.",
        "createdAt" : "2020-06-19T10:47:50Z",
        "updatedAt" : "2020-06-19T11:32:48Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "38183189-9d6c-4e94-bf06-7a6ffbcacd37",
        "parentId" : "e1053f81-8b37-45f6-a58d-d2b01a0c51b7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks for the tip, Iâ€™ll stick to the Java version for now but happy to change that later.",
        "createdAt" : "2020-06-19T11:33:33Z",
        "updatedAt" : "2020-06-19T11:33:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f63b442d9fc7982d124644c27ceeea9e3f102b3f",
    "line" : null,
    "diffHunk" : "@@ -34,17 +35,29 @@ object Assertions extends DiffExtensions {\n       )\n   }\n \n-  def assertGrpcError(t: Throwable, expectedCode: Status.Code, pattern: String): Unit =\n+  /** Match the given exception against a status code and a regex for the expected message.\n+      Succeeds if the exception is a GrpcException with the expected code and\n+      the regex matches some part of the message or there is no message and the pattern is\n+      empty.\n+    */\n+  def assertGrpcError(t: Throwable, expectedCode: Status.Code, pattern: Pattern): Unit ="
  }
]