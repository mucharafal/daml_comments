[
  {
    "id" : "340872eb-138e-4ecd-b9b4-86d9b298226f",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "0cdc2d6f-df0a-4b2a-9ce5-57319f6f67a1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I slightly rephrased the assertion message, after having to read it 3 times. I think the lack of punctuation tripped me up. WDYT?\r\n```suggestion\r\n            s\"The transaction that creates Divulgence2 should contain exactly one root event, but it contains ${createDivulgence2Transaction.rootEventIds.size} instead\"\r\n```",
        "createdAt" : "2019-08-07T07:58:51Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f65d2607-820b-4db7-acae-61a32ffa5423",
        "parentId" : "0cdc2d6f-df0a-4b2a-9ce5-57319f6f67a1",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I think it's perfect. :slightly_smiling_face: ",
        "createdAt" : "2019-08-07T09:21:38Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import com.daml.ledger.api.testtool.templates.{Divulgence1, Divulgence2}\n+\n+final class Divulgence(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  private val transactionServiceDivulgence =\n+    LedgerTest(\"Divulged contracts should not be exposed by the transaction service\") {\n+      implicit context =>\n+        for {\n+          Vector(alice, bob) <- allocateParties(2)\n+          divulgence1 <- Divulgence1(alice, alice)\n+          divulgence2 <- Divulgence2(bob, bob, alice)\n+          _ <- divulgence2.archive(alice, divulgence1)\n+          bobTransactions <- flatTransactions(bob)\n+          bobTrees <- transactionTrees(bob)\n+          aliceTransactions <- flatTransactions(alice)\n+        } yield {\n+\n+          assert(\n+            bobTransactions.size == 1,\n+            s\"Bob should see exactly one transaction but sees ${bobTransactions.size} instead\")\n+\n+          val events = bobTransactions.head.events\n+          assert(\n+            events.size == 1,\n+            s\"The transaction should contain exactly one event but contains ${events.size} instead\")\n+\n+          val event = events.head.event\n+          assert(event.isCreated, \"The transaction should contain a created event\")\n+\n+          val contractId = event.created.get.contractId\n+          assert(\n+            contractId == divulgence2.contractId,\n+            \"The only visible event should be the creation of the second contract\")\n+\n+          assert(\n+            bobTrees.size == 2,\n+            s\"Bob should see exactly two transaction trees but sees ${bobTrees.size} instead\")\n+\n+          val createDivulgence2Transaction = bobTrees(0)\n+          assert(\n+            createDivulgence2Transaction.rootEventIds.size == 1,\n+            s\"The transaction where Divulgence2 is created should contain exactly one root event contains ${createDivulgence2Transaction.rootEventIds.size} instead\""
  },
  {
    "id" : "bd799a29-1936-4693-8a8c-554f0ded99a6",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "2fc08946-5997-497d-a79c-5106f2ebb4d5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The original test used both parties to request the transactions for this part of the test, to show that bob does not see this create event.\r\nhttps://github.com/digital-asset/daml/blob/4ff9a6b7eae9e1ae55c5811f7c8c6f4a5a4d25c1/ledger/ledger-api-integration-tests/src/test/itsuite/scala/com/digitalasset/platform/tests/integration/ledger/api/DivulgenceIT.scala#L321",
        "createdAt" : "2019-08-07T08:30:05Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3771dee3-25cc-4271-ba8b-60338d187b5c",
        "parentId" : "2fc08946-5997-497d-a79c-5106f2ebb4d5",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2282/commits/c7e6538d4efaacb3ed283c726acc0a12dfaaa80f",
        "createdAt" : "2019-08-07T10:36:01Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import com.daml.ledger.api.testtool.templates.{Divulgence1, Divulgence2}\n+\n+final class Divulgence(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  private val transactionServiceDivulgence =\n+    LedgerTest(\"Divulged contracts should not be exposed by the transaction service\") {\n+      implicit context =>\n+        for {\n+          Vector(alice, bob) <- allocateParties(2)\n+          divulgence1 <- Divulgence1(alice, alice)\n+          divulgence2 <- Divulgence2(bob, bob, alice)\n+          _ <- divulgence2.archive(alice, divulgence1)\n+          bobTransactions <- flatTransactions(bob)\n+          bobTrees <- transactionTrees(bob)\n+          aliceTransactions <- flatTransactions(alice)\n+        } yield {\n+\n+          assert(\n+            bobTransactions.size == 1,\n+            s\"Bob should see exactly one transaction but sees ${bobTransactions.size} instead\")\n+\n+          val events = bobTransactions.head.events\n+          assert(\n+            events.size == 1,\n+            s\"The transaction should contain exactly one event but contains ${events.size} instead\")\n+\n+          val event = events.head.event\n+          assert(event.isCreated, \"The transaction should contain a created event\")\n+\n+          val contractId = event.created.get.contractId\n+          assert(\n+            contractId == divulgence2.contractId,\n+            \"The only visible event should be the creation of the second contract\")\n+\n+          assert(\n+            bobTrees.size == 2,\n+            s\"Bob should see exactly two transaction trees but sees ${bobTrees.size} instead\")\n+\n+          val createDivulgence2Transaction = bobTrees(0)\n+          assert(\n+            createDivulgence2Transaction.rootEventIds.size == 1,\n+            s\"The transaction where Divulgence2 is created should contain exactly one root event contains ${createDivulgence2Transaction.rootEventIds.size} instead\"\n+          )\n+\n+          val createDivulgence2 =\n+            createDivulgence2Transaction.eventsById(createDivulgence2Transaction.rootEventIds(0))\n+          assert(\n+            createDivulgence2.kind.isCreated,\n+            s\"Event expected to be a create\"\n+          )\n+\n+          assert(\n+            createDivulgence2.getCreated.contractId == divulgence2.contractId,\n+            s\"The event where Divulgence2 is created should have the same contract identifier as the created contract\"\n+          )\n+\n+          val exerciseOnDivulgence2Transaction = bobTrees(1)\n+          assert(\n+            exerciseOnDivulgence2Transaction.rootEventIds.size == 1,\n+            s\"The transaction where a choice is exercised on Divulgence2 should contain exactly one root event contains ${exerciseOnDivulgence2Transaction.rootEventIds.size} instead\"\n+          )\n+\n+          val exerciseOnDivulgence2 = exerciseOnDivulgence2Transaction.eventsById(\n+            exerciseOnDivulgence2Transaction.rootEventIds(0))\n+          assert(\n+            exerciseOnDivulgence2.kind.isExercised,\n+            s\"Expected event to be an exercise\"\n+          )\n+\n+          assert(exerciseOnDivulgence2.getExercised.contractId == divulgence2.contractId)\n+\n+          assert(exerciseOnDivulgence2.getExercised.childEventIds.size == 1)\n+\n+          val exerciseOnDivulgence1 =\n+            exerciseOnDivulgence2Transaction.eventsById(\n+              exerciseOnDivulgence2.getExercised.childEventIds(0))\n+\n+          assert(exerciseOnDivulgence1.kind.isExercised)\n+\n+          assert(exerciseOnDivulgence1.getExercised.contractId == divulgence1.contractId)\n+\n+          assert(exerciseOnDivulgence1.getExercised.childEventIds.isEmpty)\n+\n+          assert(\n+            aliceTransactions.size == 3,\n+            s\"Alice should see three transactions but sees ${aliceTransactions.size} instead\")\n+\n+          assert(aliceTransactions.head.events.size == 1)\n+\n+          assert(aliceTransactions.head.events.head.event.isCreated)\n+\n+          assert(\n+            aliceTransactions.head.events.head.event.created.get.contractId == divulgence1.contractId)\n+\n+          assert(aliceTransactions.head.events.head.event.created.get.witnessParties == Seq(alice))"
  },
  {
    "id" : "e3abe77d-0f47-41eb-995d-1afbeafa1159",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "6755a9c3-c1f0-4197-a032-56ef0c7b2c66",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Same comment as above. Let's preserve the behavior of the test with respect to both bob and alice requesting transactions.",
        "createdAt" : "2019-08-07T08:34:33Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d55ad81-60d3-4113-ae5a-7886aba8c7a2",
        "parentId" : "6755a9c3-c1f0-4197-a032-56ef0c7b2c66",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2282/commits/c7e6538d4efaacb3ed283c726acc0a12dfaaa80f",
        "createdAt" : "2019-08-07T10:36:08Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import com.daml.ledger.api.testtool.templates.{Divulgence1, Divulgence2}\n+\n+final class Divulgence(session: LedgerSession) extends LedgerTestSuite(session) {\n+\n+  private val transactionServiceDivulgence =\n+    LedgerTest(\"Divulged contracts should not be exposed by the transaction service\") {\n+      implicit context =>\n+        for {\n+          Vector(alice, bob) <- allocateParties(2)\n+          divulgence1 <- Divulgence1(alice, alice)\n+          divulgence2 <- Divulgence2(bob, bob, alice)\n+          _ <- divulgence2.archive(alice, divulgence1)\n+          bobTransactions <- flatTransactions(bob)\n+          bobTrees <- transactionTrees(bob)\n+          aliceTransactions <- flatTransactions(alice)\n+        } yield {\n+\n+          assert(\n+            bobTransactions.size == 1,\n+            s\"Bob should see exactly one transaction but sees ${bobTransactions.size} instead\")\n+\n+          val events = bobTransactions.head.events\n+          assert(\n+            events.size == 1,\n+            s\"The transaction should contain exactly one event but contains ${events.size} instead\")\n+\n+          val event = events.head.event\n+          assert(event.isCreated, \"The transaction should contain a created event\")\n+\n+          val contractId = event.created.get.contractId\n+          assert(\n+            contractId == divulgence2.contractId,\n+            \"The only visible event should be the creation of the second contract\")\n+\n+          assert(\n+            bobTrees.size == 2,\n+            s\"Bob should see exactly two transaction trees but sees ${bobTrees.size} instead\")\n+\n+          val createDivulgence2Transaction = bobTrees(0)\n+          assert(\n+            createDivulgence2Transaction.rootEventIds.size == 1,\n+            s\"The transaction where Divulgence2 is created should contain exactly one root event contains ${createDivulgence2Transaction.rootEventIds.size} instead\"\n+          )\n+\n+          val createDivulgence2 =\n+            createDivulgence2Transaction.eventsById(createDivulgence2Transaction.rootEventIds(0))\n+          assert(\n+            createDivulgence2.kind.isCreated,\n+            s\"Event expected to be a create\"\n+          )\n+\n+          assert(\n+            createDivulgence2.getCreated.contractId == divulgence2.contractId,\n+            s\"The event where Divulgence2 is created should have the same contract identifier as the created contract\"\n+          )\n+\n+          val exerciseOnDivulgence2Transaction = bobTrees(1)\n+          assert(\n+            exerciseOnDivulgence2Transaction.rootEventIds.size == 1,\n+            s\"The transaction where a choice is exercised on Divulgence2 should contain exactly one root event contains ${exerciseOnDivulgence2Transaction.rootEventIds.size} instead\"\n+          )\n+\n+          val exerciseOnDivulgence2 = exerciseOnDivulgence2Transaction.eventsById(\n+            exerciseOnDivulgence2Transaction.rootEventIds(0))\n+          assert(\n+            exerciseOnDivulgence2.kind.isExercised,\n+            s\"Expected event to be an exercise\"\n+          )\n+\n+          assert(exerciseOnDivulgence2.getExercised.contractId == divulgence2.contractId)\n+\n+          assert(exerciseOnDivulgence2.getExercised.childEventIds.size == 1)\n+\n+          val exerciseOnDivulgence1 =\n+            exerciseOnDivulgence2Transaction.eventsById(\n+              exerciseOnDivulgence2.getExercised.childEventIds(0))\n+\n+          assert(exerciseOnDivulgence1.kind.isExercised)\n+\n+          assert(exerciseOnDivulgence1.getExercised.contractId == divulgence1.contractId)\n+\n+          assert(exerciseOnDivulgence1.getExercised.childEventIds.isEmpty)\n+\n+          assert(\n+            aliceTransactions.size == 3,\n+            s\"Alice should see three transactions but sees ${aliceTransactions.size} instead\")\n+\n+          assert(aliceTransactions.head.events.size == 1)\n+\n+          assert(aliceTransactions.head.events.head.event.isCreated)\n+\n+          assert(\n+            aliceTransactions.head.events.head.event.created.get.contractId == divulgence1.contractId)\n+\n+          assert(aliceTransactions.head.events.head.event.created.get.witnessParties == Seq(alice))\n+        }\n+    }\n+\n+  private val activeContractServiceDivulgence = {\n+    LedgerTest(\"Divulged contracts should not be exposed by the active contract service\") {\n+      implicit context =>\n+        for {\n+          Vector(alice, bob) <- allocateParties(2)\n+          divulgence1 <- Divulgence1(alice, alice)\n+          divulgence2 <- Divulgence2(bob, bob, alice)\n+          _ <- divulgence2.fetch(controller = alice, divulgence1)\n+          activeForBob <- activeContracts(bob)\n+          activeForAlice <- activeContracts(alice)\n+        } yield {\n+          assert(activeForBob.size == 1)\n+          assert(activeForBob.head.contractId == divulgence2.contractId)\n+          assert(activeForBob.head.witnessParties == Seq(bob))\n+          assert(activeForAlice.size == 2)\n+          assert(\n+            activeForAlice.map(_.contractId) == Seq(divulgence1.contractId, divulgence2.contractId))\n+          assert(activeForAlice(0).witnessParties == Seq(alice))\n+          assert(activeForAlice(1).witnessParties == Seq(alice))"
  },
  {
    "id" : "7f6f127c-deb8-4ec2-a983-d8e160a48c79",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "6450c8c2-d3d2-45cf-869d-31227bccf256",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "`DivulgenceIT` is \"decorated\" with quite a few comments. Please carry them over to this test as well. I think they are a great help as a preview of what the next few lines are about.\r\nHaving said that, the assertions in this test are super helpful as well.",
        "createdAt" : "2019-08-07T08:36:23Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bcbb984d-cc02-4d8e-b837-bd925821639d",
        "parentId" : "6450c8c2-d3d2-45cf-869d-31227bccf256",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2282/commits/c7e6538d4efaacb3ed283c726acc0a12dfaaa80f",
        "createdAt" : "2019-08-07T10:36:13Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : 11,
    "diffHunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import com.daml.ledger.api.testtool.templates.{Divulgence1, Divulgence2}\n+\n+final class Divulgence(session: LedgerSession) extends LedgerTestSuite(session) {"
  }
]