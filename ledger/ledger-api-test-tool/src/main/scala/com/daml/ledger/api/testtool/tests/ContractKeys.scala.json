[
  {
    "id" : "d696fcc9-4861-468f-87b2-53166a425243",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "3d1cb79f-5cf5-40ae-830c-bca6f2fd404a",
        "parentId" : null,
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "This would seem to lead to unpredictable behaviour.  If lookup is done using lookupByKey on a non-existent key and it returns None I don't see why that behaviour should change if that key is then used by a different party in a way that is not visible to the original caller ?",
        "createdAt" : "2020-04-22T11:41:44Z",
        "updatedAt" : "2020-04-22T11:41:45Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d9f823da-a737-4ae8-bb57-9b9cb843ba8e",
        "parentId" : "3d1cb79f-5cf5-40ae-830c-bca6f2fd404a",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Consider the following situation:\r\n`Alice` can send a command that results in a transaction with a `NodeLookupByKey` with the right authorization, but `Alice` is not actually a stakeholder of the contract that the lookup would resolve to, therefore the `NodeLookupByKey` doesn't find a contract. Based on that fact, the DAML model can make a decision (i.e. create a contract with such a key). However, during validation the committer sees that there already exists such a contract. In that case the validation needs to fail, because the original transaction didn't have an accurate view of the ledger.\r\n\r\nSimilarly, if there is contention on the contract key, the validation shows that the original `NodeLookupByKey` and all following actions are invalid.",
        "createdAt" : "2020-04-22T11:52:44Z",
        "updatedAt" : "2020-04-22T11:52:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7a4cc5dc-1b87-4ef9-a60b-22cf532ca2cf",
        "parentId" : "3d1cb79f-5cf5-40ae-830c-bca6f2fd404a",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "I see, so there are three possible outcomes: Visible(conctractId), Available and Unavailable.  Could we change the API to reflect this more obviously ?",
        "createdAt" : "2020-04-22T12:32:16Z",
        "updatedAt" : "2020-04-22T12:32:43Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : 14,
    "diffHunk" : "@@ -47,18 +47,18 @@ final class ContractKeys(session: LedgerSession) extends LedgerTestSuite(session\n         // fetch by key should fail during interpretation\n         // Reason: Only stakeholders see the result of fetchByKey, beta is neither stakeholder nor divulgee\n         fetchFailure <- beta\n-          .exercise(delegate, delegation.exerciseFetchByKeyDelegated(_, owner, key, None))\n+          .exercise(delegate, delegation.exerciseFetchByKeyDelegated(_, owner, key))\n           .failed\n \n         // lookup by key delegation is should fail during validation\n         // Reason: During command interpretation, the lookup did not find anything due to privacy rules,\n         // but validation determined that this result is wrong as the contract is there.\n         lookupByKeyFailure <- beta\n-          .exercise(delegate, delegation.exerciseLookupByKeyDelegated(_, owner, key, None))\n+          .exercise(delegate, delegation.exerciseLookupByKeyDelegated(_, owner, key))\n           .failed"
  },
  {
    "id" : "cafd12bb-d187-4e79-b572-2e339c1d94d0",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "6f56aa3f-c412-4576-9123-d3abfe484e5c",
        "parentId" : null,
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "See comment above.",
        "createdAt" : "2020-04-22T11:42:18Z",
        "updatedAt" : "2020-04-22T11:42:18Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : 36,
    "diffHunk" : "@@ -85,14 +85,14 @@ final class ContractKeys(session: LedgerSession) extends LedgerTestSuite(session\n         // fetch by key should fail\n         // Reason: Only stakeholders see the result of fetchByKey, beta is only a divulgee\n         fetchByKeyFailure <- beta\n-          .exercise(delegate, delegation.exerciseFetchByKeyDelegated(_, owner, key, None))\n+          .exercise(delegate, delegation.exerciseFetchByKeyDelegated(_, owner, key))\n           .failed\n \n         // lookup by key should fail\n         // Reason: During command interpretation, the lookup did not find anything due to privacy rules,\n         // but validation determined that this result is wrong as the contract is there.\n         lookupByKeyFailure <- beta\n-          .exercise(delegate, delegation.exerciseLookupByKeyDelegated(_, owner, key, None))\n+          .exercise(delegate, delegation.exerciseLookupByKeyDelegated(_, owner, key))\n           .failed"
  },
  {
    "id" : "448d8d5d-e186-4c17-b3c0-f975bef0f08a",
    "prId" : 2933,
    "comments" : [
      {
        "id" : "081e5f0e-8899-4c97-ba9d-0e52c539bd6b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "You can use `ledger.allocateParty()` to only get back a single one.",
        "createdAt" : "2019-09-17T12:50:14Z",
        "updatedAt" : "2019-09-17T15:12:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "22c50646-1470-4d44-ae37-f3b9e73018e4",
        "parentId" : "081e5f0e-8899-4c97-ba9d-0e52c539bd6b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Which would be:\r\n```suggestion\r\n        owner <- ledger.allocateParty()\r\n```",
        "createdAt" : "2019-09-17T15:40:25Z",
        "updatedAt" : "2019-09-17T15:40:25Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f56a2b31-6881-4e4b-ab18-1c13132cbee4",
        "parentId" : "081e5f0e-8899-4c97-ba9d-0e52c539bd6b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ah, already done, sorry, just noticed.",
        "createdAt" : "2019-09-17T15:44:55Z",
        "updatedAt" : "2019-09-17T15:44:55Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "beae767a4a15fe68869f55750f566f913cc05172",
    "line" : null,
    "diffHunk" : "@@ -162,10 +163,22 @@ final class ContractKeys(session: LedgerSession) extends LedgerTestSuite(session\n       }\n     }\n \n+  val recreateContractKeys =\n+    LedgerTest(\"CKRecreate\", \"Contract keys can be recreated in single transaction\") { context =>\n+      val key = s\"${UUID.randomUUID.toString}-key\"\n+      for {\n+        ledger <- context.participant()\n+        Vector(owner) <- ledger.allocateParties(1)"
  },
  {
    "id" : "5f9544a9-058c-484c-b378-c6ef76ee6c65",
    "prId" : 2933,
    "comments" : [
      {
        "id" : "8ea0ef52-cbf5-4700-a6c4-ad9846375425",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think we can still make some assertions here:\r\nfor example:\r\nasserting that the contract key from the original `Delegated` contract is the same as the contract key from the replacement, but the contract IDs themselves are different.",
        "createdAt" : "2019-09-17T12:55:54Z",
        "updatedAt" : "2019-09-17T15:12:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9f0f4fd3-bbcf-4ee6-a9af-ed8c38e9b4da",
        "parentId" : "8ea0ef52-cbf5-4700-a6c4-ad9846375425",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "thanks, good point. will add the assertions.",
        "createdAt" : "2019-09-17T13:12:07Z",
        "updatedAt" : "2019-09-17T15:12:33Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "beae767a4a15fe68869f55750f566f913cc05172",
    "line" : null,
    "diffHunk" : "@@ -162,10 +163,22 @@ final class ContractKeys(session: LedgerSession) extends LedgerTestSuite(session\n       }\n     }\n \n+  val recreateContractKeys =\n+    LedgerTest(\"CKRecreate\", \"Contract keys can be recreated in single transaction\") { context =>\n+      val key = s\"${UUID.randomUUID.toString}-key\"\n+      for {\n+        ledger <- context.participant()\n+        Vector(owner) <- ledger.allocateParties(1)\n+        delegated <- ledger.create(owner, Delegated(owner, key))\n+        _ <- ledger.exercise(owner, delegated.exerciseRecreate(_))\n+      } yield { () }"
  },
  {
    "id" : "6401eca8-15da-43ab-9a5b-d9f0fcf681a1",
    "prId" : 2452,
    "comments" : [
      {
        "id" : "576fb04e-b743-4e91-b606-88adeb1ed3e5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Do you think it would be worth adding a few comments and assertion messages? Unfortunately the default assertion message is very vague. Consider though that now the framework should be able to detect the line where the test fails, so that might help already.",
        "createdAt" : "2019-08-08T08:56:48Z",
        "updatedAt" : "2019-08-08T09:46:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8be8ebe7-a059-42fe-9fef-b6ad0f00607d",
        "parentId" : "576fb04e-b743-4e91-b606-88adeb1ed3e5",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by 3aa8ae2 .",
        "createdAt" : "2019-08-08T09:46:51Z",
        "updatedAt" : "2019-08-08T09:46:51Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4f785c7c0d1d2c34c8d51854d685a8d38693299e",
    "line" : 19,
    "diffHunk" : "@@ -0,0 +1,121 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool.tests\n+\n+import java.util.UUID\n+\n+import com.daml.ledger.api.testtool.infrastructure.{LedgerSession, LedgerTest, LedgerTestSuite}\n+import com.daml.ledger.api.testtool.templates.{\n+  Delegated,\n+  Delegation,\n+  MaintainerNotSignatory,\n+  ShowDelegated,\n+  TextKey,\n+  TextKeyOperations\n+}\n+import io.grpc.Status\n+\n+final class ContractKeys(session: LedgerSession) extends LedgerTestSuite(session) {"
  }
]