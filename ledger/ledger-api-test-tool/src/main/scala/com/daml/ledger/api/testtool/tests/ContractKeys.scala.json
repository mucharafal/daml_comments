[
  {
    "id" : "0cb21134-24f2-481a-baaa-513a97978294",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "e1dc6182-c3af-4434-b7ff-1037174e0e9f",
        "parentId" : null,
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "This would seem to lead to unpredictable behaviour.  If lookup is done using lookupByKey on a non-existent key and it returns None I don't see why that behaviour should change if that key is then used by a different party in a way that is not visible to the original caller ?",
        "createdAt" : "2020-04-22T11:41:44Z",
        "updatedAt" : "2020-04-22T11:41:45Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "efc8beb9-ae6a-494f-bfb8-f167834edc4e",
        "parentId" : "e1dc6182-c3af-4434-b7ff-1037174e0e9f",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Consider the following situation:\r\n`Alice` can send a command that results in a transaction with a `NodeLookupByKey` with the right authorization, but `Alice` is not actually a stakeholder of the contract that the lookup would resolve to, therefore the `NodeLookupByKey` doesn't find a contract. Based on that fact, the DAML model can make a decision (i.e. create a contract with such a key). However, during validation the committer sees that there already exists such a contract. In that case the validation needs to fail, because the original transaction didn't have an accurate view of the ledger.\r\n\r\nSimilarly, if there is contention on the contract key, the validation shows that the original `NodeLookupByKey` and all following actions are invalid.",
        "createdAt" : "2020-04-22T11:52:44Z",
        "updatedAt" : "2020-04-22T11:52:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "90ba90ce-b9c0-4ee1-9457-e1848330aab1",
        "parentId" : "e1dc6182-c3af-4434-b7ff-1037174e0e9f",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "I see, so there are three possible outcomes: Visible(conctractId), Available and Unavailable.  Could we change the API to reflect this more obviously ?",
        "createdAt" : "2020-04-22T12:32:16Z",
        "updatedAt" : "2020-04-22T12:32:43Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +56,60 @@        lookupByKeyFailure <- beta\n          .exercise(delegate, delegation.exerciseLookupByKeyDelegated(_, owner, key))\n          .failed\n      } yield {\n        assertGrpcError(fetchFailure, Status.Code.INVALID_ARGUMENT, \"couldn't find key\")"
  },
  {
    "id" : "09d190e6-a568-42d4-ab06-db51b2254bfc",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "11958c47-a6dc-4db2-99b7-a84f16666df3",
        "parentId" : null,
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "See comment above.",
        "createdAt" : "2020-04-22T11:42:18Z",
        "updatedAt" : "2020-04-22T11:42:18Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +94,98 @@        lookupByKeyFailure <- beta\n          .exercise(delegate, delegation.exerciseLookupByKeyDelegated(_, owner, key))\n          .failed\n      } yield {\n        assertGrpcError("
  },
  {
    "id" : "b5fdc357-9aef-4349-9eab-82b5a999b82d",
    "prId" : 2452,
    "comments" : [
      {
        "id" : "81dd0239-dfbd-4cc6-b3de-fb5fff601d50",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Do you think it would be worth adding a few comments and assertion messages? Unfortunately the default assertion message is very vague. Consider though that now the framework should be able to detect the line where the test fails, so that might help already.",
        "createdAt" : "2019-08-08T08:56:48Z",
        "updatedAt" : "2019-08-08T09:46:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e65ade99-3f83-48dc-b127-a6b765986867",
        "parentId" : "81dd0239-dfbd-4cc6-b3de-fb5fff601d50",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Addressed by 3aa8ae2 .",
        "createdAt" : "2019-08-08T09:46:51Z",
        "updatedAt" : "2019-08-08T09:46:51Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4f785c7c0d1d2c34c8d51854d685a8d38693299e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@import io.grpc.Status\n\nfinal class ContractKeys(session: LedgerSession) extends LedgerTestSuite(session) {\n\n  val fetchDivulgedContract ="
  }
]