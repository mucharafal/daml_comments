[
  {
    "id" : "33aee015-79ae-4b9a-989f-19cf5ebaa43b",
    "prId" : 2282,
    "comments" : [
      {
        "id" : "02b5473f-2dcb-4c40-8a60-7bab41b8f7d9",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "👍 on keeping it synchronized 👍 ",
        "createdAt" : "2019-08-06T12:53:38Z",
        "updatedAt" : "2019-08-09T14:28:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c0ec2e9d435c3c835828ec8bb046a8d6fe9c4a32",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,44 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.rewrite.testtool.infrastructure\n+\n+import io.grpc.stub.StreamObserver\n+\n+import scala.concurrent.{Future, Promise}\n+\n+object FiniteStreamObserver {\n+\n+  def apply[A](attach: StreamObserver[A] => Unit): Future[Vector[A]] = {\n+    val observer = new FiniteStreamObserver[A]\n+    attach(observer)\n+    observer.result\n+  }\n+\n+}\n+\n+/**\n+  * Implementation of [[StreamObserver]] designed to expose a finite amount of items\n+  *\n+  * THIS WILL NEVER COMPLETE IF FED AN UNBOUND STREAM!!!\n+  *\n+  * @tparam A\n+  */\n+final class FiniteStreamObserver[A] extends StreamObserver[A] {\n+\n+  private[this] val promise = Promise[Vector[A]]()\n+  private[this] val items = Vector.newBuilder[A]\n+\n+  val result: Future[Vector[A]] = promise.future\n+\n+  override def onNext(value: A): Unit = {\n+    val _ = items.synchronized(items += value)"
  }
]