[
  {
    "id" : "fb9e0922-8cea-4789-aeb0-d48ccb95acbe",
    "prId" : 2241,
    "comments" : [
      {
        "id" : "b1391c7a-41ea-4d68-8841-5b83c8bd61a2",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : ":bug: ",
        "createdAt" : "2019-07-23T08:22:24Z",
        "updatedAt" : "2019-07-23T08:22:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ca70c52bca9ee552644a904bd17c3cccec9c63ad",
    "line" : 12,
    "diffHunk" : "@@ -201,14 +201,15 @@ class ToolReporter(verbose: Boolean) extends Reporter {\n       case Statistics(a, s, 0, 0) =>\n         println(ansiGreen + s\"All ${s}/${a} tests were successful!\" + ansiReset)\n       case Statistics(a, 0, c, 0) =>\n-        println(ansiYellow + s\"All ${a}/${a} tests were cancelled.\" + ansiReset)\n+        println(ansiYellow + s\"All ${c}/${a} tests were cancelled.\" + ansiReset)\n       case Statistics(a, s, c, 0) =>\n         println(\n           ansiYellow + s\"${s}/${a} tests were successful, but ${c} were cancelled.\" + ansiReset)\n       case Statistics(a, s, 0, f) =>\n         println(ansiRed + s\"${s} were successful and ${f} failed out of ${a} tests.\" + ansiReset)\n-      case _ =>\n-        println(\"BUG\")"
  },
  {
    "id" : "55811872-5d28-4b87-a160-01d632dc7694",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "ba4dc088-9b23-4cff-9eeb-6f764d66a678",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "I commented on this in another PR. ",
        "createdAt" : "2019-05-27T16:04:19Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils\n+\n+import org.scalatest.{events => e}\n+import org.scalatest.events.Event\n+import org.scalatest.Reporter\n+\n+/**\n+  * Ledger API Test Tool CLI reporter. Implements scalatest's Reporter interface and prints out colorized reports to the\n+  * stdout. Supports very limited set of scalatest events.\n+  */\n+class ToolReporter extends Reporter {\n+\n+  final val ansiReset = \"\\u001b[0m\"\n+  final val ansiBlue = \"\\u001b[34m\"\n+  final val ansiGreen = \"\\u001b[32m\"\n+  final val ansiCyan = \"\\u001b[36m\"\n+  final val ansiYellow = \"\\u001b[33m\"\n+  final val ansiRed = \"\\u001b[31m\"\n+\n+  private def repeatChar(char: Char, n: Int) = List.fill(n)(char).mkString"
  },
  {
    "id" : "6e5a965b-6a33-477f-8856-eef5ec238a70",
    "prId" : 1171,
    "comments" : [
      {
        "id" : "7d9fc71f-8994-4aa6-a584-b2e877920358",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "why not `private`?",
        "createdAt" : "2019-05-27T15:27:53Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "056856bf-9dc0-4629-8e96-ba23d5db54c0",
        "parentId" : "7d9fc71f-8994-4aa6-a584-b2e877920358",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "the `Atomic*` semantics does not seem to be required here. Does a `Reporter` need to be thread-safe? ",
        "createdAt" : "2019-05-27T15:30:30Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9fe092f0-17e3-4fd5-acde-4c5f0ce98cb0",
        "parentId" : "7d9fc71f-8994-4aa6-a584-b2e877920358",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "I assumed it had to, but it does not have to. No other implementation I could find was using concurrency synchronization.",
        "createdAt" : "2019-05-28T09:20:34Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a5a5051-4d58-4377-9697-29c698e6520b",
        "parentId" : "7d9fc71f-8994-4aa6-a584-b2e877920358",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "in that case I'd just use a `var` to avoid confusion",
        "createdAt" : "2019-05-28T11:02:12Z",
        "updatedAt" : "2019-05-28T11:02:12Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0375ea95bfb713575e4b4fa54cb2011cbc90f244",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils\n+\n+import org.scalatest.{events => e}\n+import org.scalatest.events.Event\n+import org.scalatest.Reporter\n+\n+/**\n+  * Ledger API Test Tool CLI reporter. Implements scalatest's Reporter interface and prints out colorized reports to the\n+  * stdout. Supports very limited set of scalatest events.\n+  */\n+class ToolReporter extends Reporter {\n+\n+  final val ansiReset = \"\\u001b[0m\"\n+  final val ansiBlue = \"\\u001b[34m\"\n+  final val ansiGreen = \"\\u001b[32m\"\n+  final val ansiCyan = \"\\u001b[36m\"\n+  final val ansiYellow = \"\\u001b[33m\"\n+  final val ansiRed = \"\\u001b[31m\"\n+\n+  private def repeatChar(char: Char, n: Int) = List.fill(n)(char).mkString\n+\n+  val depth: AtomicInteger = new AtomicInteger(0)"
  },
  {
    "id" : "8e54f02c-0239-4e29-9190-feeeb4c0f585",
    "prId" : 1171,
    "comments" : [
      {
        "id" : "f05ccfe9-10c5-4b3c-bad8-2f1cfdb5ee28",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "nitpick: this can be really inefficient. Consider creating an array and a String from it via: `String.valueOf` ",
        "createdAt" : "2019-05-27T15:41:50Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "98975a54-f9b6-446b-a83b-1475488e76c5",
        "parentId" : "f05ccfe9-10c5-4b3c-bad8-2f1cfdb5ee28",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "I've switched to `StringLike.*` which is efficient: https://github.com/scala/scala/blob/v2.12.8/src/library/scala/collection/immutable/StringLike.scala#L72",
        "createdAt" : "2019-05-28T09:27:32Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0375ea95bfb713575e4b4fa54cb2011cbc90f244",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,157 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.api.testtool\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils\n+\n+import org.scalatest.{events => e}\n+import org.scalatest.events.Event\n+import org.scalatest.Reporter\n+\n+/**\n+  * Ledger API Test Tool CLI reporter. Implements scalatest's Reporter interface and prints out colorized reports to the\n+  * stdout. Supports very limited set of scalatest events.\n+  */\n+class ToolReporter extends Reporter {\n+\n+  final val ansiReset = \"\\u001b[0m\"\n+  final val ansiBlue = \"\\u001b[34m\"\n+  final val ansiGreen = \"\\u001b[32m\"\n+  final val ansiCyan = \"\\u001b[36m\"\n+  final val ansiYellow = \"\\u001b[33m\"\n+  final val ansiRed = \"\\u001b[31m\"\n+\n+  private def repeatChar(char: Char, n: Int) = List.fill(n)(char).mkString"
  }
]