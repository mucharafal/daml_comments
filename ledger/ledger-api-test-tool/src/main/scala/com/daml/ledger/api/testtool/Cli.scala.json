[
  {
    "id" : "d6d8ab1d-06a7-4be2-9afe-21bf717cd1f9",
    "prId" : 7756,
    "comments" : [
      {
        "id" : "4707cb90-1ce7-40d5-a1cf-fccf1239d304",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If the documentation does not mention this, it's a good chance to add it, possibly adding a few example and explaining when and how this is useful.\r\n\r\nI don't see a problem in adding the new behavior, but I would recommend you also not break current users. This would mean interpreting an absence of unit as `ms`.",
        "createdAt" : "2020-10-21T08:36:32Z",
        "updatedAt" : "2020-10-21T10:33:42Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c4339ec2-3b1c-4be0-bda2-1c17a85194f1",
        "parentId" : "4707cb90-1ce7-40d5-a1cf-fccf1239d304",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good plan. I'll see if I can keep the old behavior as well, but keep it hidden so new users don't find it.",
        "createdAt" : "2020-10-21T08:54:38Z",
        "updatedAt" : "2020-10-21T10:33:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6a0525a3-8533-4118-b957-79b151fa53a0",
        "parentId" : "4707cb90-1ce7-40d5-a1cf-fccf1239d304",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done. Let me know if you're happy with the implementation.",
        "createdAt" : "2020-10-21T10:03:39Z",
        "updatedAt" : "2020-10-21T10:33:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2327d596-5f73-464c-956b-671ccec669ad",
        "parentId" : "4707cb90-1ce7-40d5-a1cf-fccf1239d304",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "LGTM, thanks.",
        "createdAt" : "2020-10-21T11:01:07Z",
        "updatedAt" : "2020-10-21T11:01:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "97386d4f048437a7bca48f9f19aa77e1748e7b95",
    "line" : 39,
    "diffHunk" : "@@ -197,10 +199,10 @@ object Cli {\n       .action((_, _) => { println(BuildInfo.Version); sys.exit(0) })\n       .text(\"Prints the version on stdout and exit.\")\n \n-    opt[Int](\"ledger-clock-granularity\")\n+    opt[Duration](\"ledger-clock-granularity\")\n       .optional()\n-      .action((interval, c) => c.copy(ledgerClockGranularityMs = interval))\n-      .text(\"Specify the largest interval in ms that you will see between clock ticks on the ledger under test.  The default is 10000ms\")\n+      .action((x, c) => c.copy(ledgerClockGranularity = x))\n+      .text(\"Specify the largest interval that you will see between clock ticks on the ledger under test. The default is \\\"1s\\\" (1 second).\")"
  },
  {
    "id" : "e3ee29f6-91da-4839-8fc4-2f833e6aa236",
    "prId" : 7294,
    "comments" : [
      {
        "id" : "e962a0bc-5b5d-49b6-b8cd-ea91f9d6cf69",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's very difficult to understand the meaning of this flag from it's description and name and why one should choose change it. The name could probably be well suited for the context you have on the ledger you are testing. Please have a second look at the name and description of this option.\r\n\r\n@rautenrieth-da Can you have a look at this one? You can probably suggest a more telling name for this.",
        "createdAt" : "2020-09-02T12:29:38Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5e238168-b0ea-4a16-ad28-a9730f4873ad",
        "parentId" : "e962a0bc-5b5d-49b6-b8cd-ea91f9d6cf69",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Perhaps a name like \"ledger-clock-granularity\"?",
        "createdAt" : "2020-09-02T12:51:29Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c27920e6-3e0a-4a8e-9322-3aa407635938",
        "parentId" : "e962a0bc-5b5d-49b6-b8cd-ea91f9d6cf69",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Reading the code it looks like a timeout, rather than some form of ticks or granularity.",
        "createdAt" : "2020-09-02T13:24:20Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd8efe0c-2bdf-4286-bcac-8332e47caf3e",
        "parentId" : "e962a0bc-5b5d-49b6-b8cd-ea91f9d6cf69",
        "author" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "body" : "it is basically an indicator of ledger clock granularity - the max time you will see between clock ticks on the ledger under test",
        "createdAt" : "2020-09-02T21:25:42Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c20e2d4c-c579-4fc8-a81c-853a67d7be8b",
        "parentId" : "e962a0bc-5b5d-49b6-b8cd-ea91f9d6cf69",
        "author" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "body" : "renamed and added better description",
        "createdAt" : "2020-09-03T14:42:50Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8ec3a3f3aa8d156744841bab938f5e26ddc6492d",
    "line" : null,
    "diffHunk" : "@@ -197,6 +197,11 @@ object Cli {\n       .action((_, _) => { println(BuildInfo.Version); sys.exit(0) })\n       .text(\"Prints the version on stdout and exit.\")\n \n+    opt[Int](\"ledger-clock-tick-interval\")\n+      .optional()\n+      .action((interval, c) => c.copy(ledgerClockTickIntervalMs = interval))\n+      .text(\"Specify the interval in ms at which the clock of the ledger under test ticks.\")"
  },
  {
    "id" : "410809a9-36d9-4c0c-8d48-00a948419841",
    "prId" : 7294,
    "comments" : [
      {
        "id" : "005aec5d-3f8d-4e88-afe8-0716dfcde942",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      .text(\"Specify the largest interval (in ms) that you will see between clock ticks on the ledger under test. The default is 10000ms.\")\r\n```",
        "createdAt" : "2020-09-03T18:56:02Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d9b0d3b-985d-4347-a871-e8f4305a5562",
        "parentId" : "005aec5d-3f8d-4e88-afe8-0716dfcde942",
        "author" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "body" : "addressed",
        "createdAt" : "2020-09-03T20:36:34Z",
        "updatedAt" : "2020-09-04T12:48:14Z",
        "lastEditedBy" : {
          "login" : "dasormeter",
          "name" : "Brian Healey",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/25179017?u=80e3160e2447461bd5847fe928a3e6fa9f6793fc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8ec3a3f3aa8d156744841bab938f5e26ddc6492d",
    "line" : null,
    "diffHunk" : "@@ -197,6 +197,11 @@ object Cli {\n       .action((_, _) => { println(BuildInfo.Version); sys.exit(0) })\n       .text(\"Prints the version on stdout and exit.\")\n \n+    opt[Int](\"ledger-clock-granularity\")\n+      .optional()\n+      .action((interval, c) => c.copy(ledgerClockGranularityMs = interval))\n+      .text(\"Specify the largest interval in ms that you will see between clock ticks on the ledger under test\")"
  },
  {
    "id" : "d477f89b-b807-4e1f-9397-a7e329cdd694",
    "prId" : 6826,
    "comments" : [
      {
        "id" : "0844d7cd-fc81-4782-b632-fcebb3904e9e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n          failure(\"Invalid performance test name. Use `--list` to see valid names.\")\r\n```",
        "createdAt" : "2020-07-22T11:43:16Z",
        "updatedAt" : "2020-07-22T13:09:02Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed7c37fb0a12564901f8bbdf63d080b35a523d49",
    "line" : null,
    "diffHunk" : "@@ -146,6 +146,12 @@ object Cli {\n       .text(\"\"\"A comma-separated list of inclusion prefixes. If not specified, all default tests are included. If specified, only tests that match at least one of the given inclusion prefixes (and none of the given exclusion prefixes) will be run. Can be specified multiple times, i.e. `--include=a,b` is the same as `--include=a --include=b`.\"\"\")\n \n     opt[Seq[String]](\"perf-tests\")\n+      .validate(tests =>\n+        if (tests.forall(Tests.PerformanceTestsKeySet)) {\n+          success\n+        } else {\n+          failure(\"Invalid performance test name, use --list to see valid performance test names\")"
  },
  {
    "id" : "485e038c-0aa4-4536-a0ea-1416bb6d8de8",
    "prId" : 6826,
    "comments" : [
      {
        "id" : "3b284852-a00d-467b-8b05-d59c1a7aa6c9",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Or perhaps something like this:\r\n\r\n```suggestion\r\n      .validate(tests =>\r\n        tests.find(Tests.PerformanceTestsKeySet) match {\r\n          None =>\r\n            success\r\n          Some(test) =>\r\n            failure(s\"Invalid performance test name: '$test'. Use `--list` to see valid names.\")\r\n      })\r\n```",
        "createdAt" : "2020-07-22T11:44:58Z",
        "updatedAt" : "2020-07-22T13:09:02Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7109f139-89e1-4cf8-adfb-5bdb97d607fe",
        "parentId" : "3b284852-a00d-467b-8b05-d59c1a7aa6c9",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'll use this suggestion, but I believe this logic is the opposite of what we want. :wink: ",
        "createdAt" : "2020-07-22T13:00:07Z",
        "updatedAt" : "2020-07-22T13:09:02Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7ded52d1-91d7-4fe1-9447-ba01292a3377",
        "parentId" : "3b284852-a00d-467b-8b05-d59c1a7aa6c9",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6826/commits/ed7c37fb0a12564901f8bbdf63d080b35a523d49\r\nThanks for the suggestion. :bow: ",
        "createdAt" : "2020-07-22T13:09:26Z",
        "updatedAt" : "2020-07-22T13:09:26Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d56d808b-e3ee-4b83-98ce-6d1d70712867",
        "parentId" : "3b284852-a00d-467b-8b05-d59c1a7aa6c9",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Eh, you figured it out. 😛 ",
        "createdAt" : "2020-07-22T14:09:46Z",
        "updatedAt" : "2020-07-22T14:09:46Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed7c37fb0a12564901f8bbdf63d080b35a523d49",
    "line" : null,
    "diffHunk" : "@@ -146,6 +146,12 @@ object Cli {\n       .text(\"\"\"A comma-separated list of inclusion prefixes. If not specified, all default tests are included. If specified, only tests that match at least one of the given inclusion prefixes (and none of the given exclusion prefixes) will be run. Can be specified multiple times, i.e. `--include=a,b` is the same as `--include=a --include=b`.\"\"\")\n \n     opt[Seq[String]](\"perf-tests\")\n+      .validate(tests =>\n+        if (tests.forall(Tests.PerformanceTestsKeySet)) {\n+          success\n+        } else {\n+          failure(\"Invalid performance test name, use --list to see valid performance test names\")\n+      })"
  },
  {
    "id" : "1a240755-8336-41b1-83cb-3e4f174279eb",
    "prId" : 6651,
    "comments" : [
      {
        "id" : "2f831501-63ac-47ed-9da4-0fbdd9d2e5fa",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I still think it's worth logging a warning if you use a deprecated option.\r\n\r\n```suggestion\r\n      .text(\"DEPRECATED: All tests are always run by default.\")\r\n      .action(_ => logger.warn(\"The `--all-tests` option is deprecated. All tests are always run by default.\"))\r\n```\r\n\r\nAnd so on for the other deprecated options.",
        "createdAt" : "2020-07-09T09:51:11Z",
        "updatedAt" : "2020-07-09T13:44:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aefa5ecb-705b-4ad0-b4f1-6eb346348f59",
        "parentId" : "2f831501-63ac-47ed-9da4-0fbdd9d2e5fa",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6651/commits/69178c4e63fc29dec22b9cf744ce846a4c036a5c",
        "createdAt" : "2020-07-09T10:15:39Z",
        "updatedAt" : "2020-07-09T13:44:00Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92276dec4a74821dcec140cb26ac3bd9e14c5c04",
    "line" : 66,
    "diffHunk" : "@@ -146,11 +143,12 @@ object Cli {\n     opt[Path](\"perf-tests-report\")\n       .action((inc, c) => c.copy(performanceTestsReport = Some(inc)))\n       .optional()\n-      .text(\"\"\"The path of the the benchmark report file produced by performance tests (default: stdout).\"\"\")\n+      .text(\n+        \"The path of the the benchmark report file produced by performance tests (default: stdout).\")\n \n     opt[Unit](\"all-tests\")\n-      .action((_, c) => c.copy(allTests = true))\n-      .text(\"\"\"Run all default and optional tests. Respects the --exclude flag.\"\"\")\n+      .text(\"DEPRECATED: All tests are always run by default.\")"
  },
  {
    "id" : "0c3ce5a2-1027-46bb-b974-eb0e9acb4210",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "aa5cfa68-1c3e-4560-be10-b1d1791d60b0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Happy to leave this up to you but an alternative UX would be `list --all`. Not sure what I prefer.",
        "createdAt" : "2020-06-23T07:07:43Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8f6ad29d-0595-4a28-b1bc-9d1b5d406fb0",
        "parentId" : "aa5cfa68-1c3e-4560-be10-b1d1791d60b0",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I agree the `--list`/`--list-all` thing is a bit awkward, but I believe fixing this should be done as part of a broader redesign of the CLI; for example the situation with perf tests vs. normal tests could also use a more explicit structure. I don't want to extend the scope of this PR though.",
        "createdAt" : "2020-06-23T10:17:24Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : 24,
    "diffHunk" : "@@ -169,6 +169,11 @@ object Cli {\n            |Party names must be their hints.\"\"\".stripMargin)\n \n     opt[Unit](\"list\")\n+      .action((_, c) => c.copy(listTestSuites = true))\n+      .text(\n+        \"\"\"Lists all available test suites that can be used in the include and exclude options. Test names always start with their suite name, so using the suite name as a prefix matches all tests in a given suite.\"\"\")\n+\n+    opt[Unit](\"list-all\")"
  },
  {
    "id" : "84a26b09-e1f6-4a0b-b115-5c5d4b7c4fd0",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "dc42bc36-c074-4e0c-908c-71bc9a78c5a5",
        "parentId" : null,
        "author" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "body" : "```suggestion\r\n        \"\"\"A comma-separated list of exclusion prefixes. Tests whose name start with any of the given prefixes will be skipped. Can be specified multiple times, e.g. `--exclude=a,b` is the same as `--exclude=a --exclude=b`.\"\"\",\r\n```",
        "createdAt" : "2020-06-23T07:42:50Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -130,13 +130,13 @@ object Cli {\n       .action((ex, c) => c.copy(excluded = c.excluded ++ ex))\n       .unbounded()\n       .text(\n-        \"\"\"A comma-separated list of tests that should NOT be run. By default, no tests are excluded.\"\"\",\n+        \"\"\"A comma-separated list of exclusion prefixes. Tests whose name starts with any of the given prefixes will be skipped. Can be specified multiple times, e.g. `--exclude=a,b` is the same as `--exclude=a --exclude=b`.\"\"\","
  },
  {
    "id" : "65cdaa47-ab8b-40de-8068-ef70aea9a945",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "669e9265-c410-474b-8968-1d92aa548108",
        "parentId" : null,
        "author" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "body" : "```suggestion\r\n      .text(\"\"\"A comma-separated list of inclusion prefixes. If not specified, all default tests are included. If specified, only tests that match at least one of the given inclusion prefixes (and none of the given exclusion prefixes) will be run. Can be specified multiple times, e.g. `--include=a,b` is the same as `--include=a --include=b`.\"\"\")\r\n```",
        "createdAt" : "2020-06-23T07:43:43Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "oliverse-da",
          "name" : "Oliver Seeliger",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/46452754?u=dd1d8e09760abe67b40a4e527a15aafe9d104d82&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -130,13 +130,13 @@ object Cli {\n       .action((ex, c) => c.copy(excluded = c.excluded ++ ex))\n       .unbounded()\n       .text(\n-        \"\"\"A comma-separated list of tests that should NOT be run. By default, no tests are excluded.\"\"\",\n+        \"\"\"A comma-separated list of exclusion prefixes. Tests whose name starts with any of the given prefixes will be skipped. Can be specified multiple times, e.g. `--exclude=a,b` is the same as `--exclude=a --exclude=b`.\"\"\",\n       )\n \n     opt[Seq[String]](\"include\")\n       .action((inc, c) => c.copy(included = c.included ++ inc))\n       .unbounded()\n-      .text(\"\"\"A comma-separated list of tests that should be run.\"\"\")\n+      .text(\"\"\"A comma-separated list of inclusion prefixes. If not specified, all default tests are included. If specified, only tests that match at least one of the given inclusion prefixes (and none of the given exclusion prefixes) will be run. Can be specified multiple times, e.g. `--include=a,b` is the same as `--include=a --exclude=b`.\"\"\")"
  },
  {
    "id" : "02749f05-af72-4a4b-891f-69a3c74bbc91",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "7c541cca-612b-4f83-a824-3bca7bc58084",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n        \"\"\"A comma-separated list of exclusion prefixes. Tests whose name start with any of the given prefixes will be skipped. Can be specified multiple times, i.e. `--exclude=a,b` is the same as `--exclude=a --exclude=b`.\"\"\",\r\n```",
        "createdAt" : "2020-06-23T10:32:33Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -130,13 +130,13 @@ object Cli {\n       .action((ex, c) => c.copy(excluded = c.excluded ++ ex))\n       .unbounded()\n       .text(\n-        \"\"\"A comma-separated list of tests that should NOT be run. By default, no tests are excluded.\"\"\",\n+        \"\"\"A comma-separated list of exclusion prefixes. Tests whose name start with any of the given prefixes will be skipped. Can be specified multiple times, e.g. `--exclude=a,b` is the same as `--exclude=a --exclude=b`.\"\"\","
  },
  {
    "id" : "810238a0-16aa-459b-bb31-9c11b06ba0ef",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "d1a4eb00-dc53-4b31-8b83-459db9b8c002",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      .text(\"\"\"A comma-separated list of inclusion prefixes. If not specified, all default tests are included. If specified, only tests that match at least one of the given inclusion prefixes (and none of the given exclusion prefixes) will be run. Can be specified multiple times, i.e. `--include=a,b` is the same as `--include=a --include=b`.\"\"\")\r\n```",
        "createdAt" : "2020-06-23T10:32:51Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : null,
    "diffHunk" : "@@ -130,13 +130,13 @@ object Cli {\n       .action((ex, c) => c.copy(excluded = c.excluded ++ ex))\n       .unbounded()\n       .text(\n-        \"\"\"A comma-separated list of tests that should NOT be run. By default, no tests are excluded.\"\"\",\n+        \"\"\"A comma-separated list of exclusion prefixes. Tests whose name start with any of the given prefixes will be skipped. Can be specified multiple times, e.g. `--exclude=a,b` is the same as `--exclude=a --exclude=b`.\"\"\",\n       )\n \n     opt[Seq[String]](\"include\")\n       .action((inc, c) => c.copy(included = c.included ++ inc))\n       .unbounded()\n-      .text(\"\"\"A comma-separated list of tests that should be run.\"\"\")\n+      .text(\"\"\"A comma-separated list of inclusion prefixes. If not specified, all default tests are included. If specified, only tests that match at least one of the given inclusion prefixes (and none of the given exclusion prefixes) will be run. Can be specified multiple times, e.g. `--include=a,b` is the same as `--include=a --include=b`.\"\"\")"
  },
  {
    "id" : "7c3b6e9a-12cd-4038-ac19-80efb9649a0d",
    "prId" : 6458,
    "comments" : [
      {
        "id" : "522475e2-0d32-43c7-98e1-8a5c11420b44",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "What happens if you use both `--list` and `--list-all`?",
        "createdAt" : "2020-06-23T10:33:40Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "18bed1a4-0463-4427-81e7-cfe8f80b4f14",
        "parentId" : "522475e2-0d32-43c7-98e1-8a5c11420b44",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "At the moment `--list` wins over everything. So if you say `--include=... --perf-tests=... --list` you still get the list of test suites. That's very much related to @cocreature's comment: we have a bunch of \"flat\" flags (i.e. no hierarchy) as far as the external interface is concerned, but internally we treat them as special things where some affect others. I think the tool has become rich enough that it's now worth having explicit subcommands, each which its own set of allowed flags.",
        "createdAt" : "2020-06-23T10:49:38Z",
        "updatedAt" : "2020-06-23T11:39:22Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "369498b2337dab0f8d310a86dce521d86703c678",
    "line" : 24,
    "diffHunk" : "@@ -169,6 +169,11 @@ object Cli {\n            |Party names must be their hints.\"\"\".stripMargin)\n \n     opt[Unit](\"list\")\n+      .action((_, c) => c.copy(listTestSuites = true))\n+      .text(\n+        \"\"\"Lists all available test suites that can be used in the include and exclude options. Test names always start with their suite name, so using the suite name as a prefix matches all tests in a given suite.\"\"\")\n+\n+    opt[Unit](\"list-all\")"
  },
  {
    "id" : "92680fb3-94d7-4e69-b8ef-b3ef8e6d769a",
    "prId" : 5377,
    "comments" : [
      {
        "id" : "52bedf57-e87a-41dd-9e12-2cfc90c67799",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good call. We should do this everywhere.",
        "createdAt" : "2020-04-06T12:32:55Z",
        "updatedAt" : "2020-04-06T12:50:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "70cc33cce879b665e8969f8d4f92cb39b9b489d5",
    "line" : 12,
    "diffHunk" : "@@ -50,6 +51,8 @@ object Cli {\n       )(c => Some(c.copy(trustCertCollectionFile = Some(new File(path))))),\n   )\n \n+  private[this] implicit val pathRead: Read[Path] = Read.reads(Paths.get(_))"
  },
  {
    "id" : "7931cf2a-194f-451c-8586-fc6f23df14a4",
    "prId" : 5172,
    "comments" : [
      {
        "id" : "d311d246-33f5-4753-8440-9071db690245",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Maybe we want to keep it in and just let it do nothing?",
        "createdAt" : "2020-03-25T09:21:43Z",
        "updatedAt" : "2020-03-25T14:06:52Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d160e8e-6573-4ac4-9200-275e11105cbf",
        "parentId" : "d311d246-33f5-4753-8440-9071db690245",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Why keeping an option that doesn't do anything? To not break external test setups?",
        "createdAt" : "2020-03-25T12:53:46Z",
        "updatedAt" : "2020-03-25T14:06:52Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fa7711f9-a4fc-40c7-8cd7-3f9d00be6d0a",
        "parentId" : "d311d246-33f5-4753-8440-9071db690245",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yes, that would've been the idea. But we can add it back if it turns out to be a problem, which I don't think it will be.",
        "createdAt" : "2020-03-25T15:47:18Z",
        "updatedAt" : "2020-03-25T15:47:18Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b71c1250aa1753ee4cc4181a639eb4e99b47e872",
    "line" : 4,
    "diffHunk" : "@@ -82,16 +82,6 @@ object Cli {\n       .text(\"TLS: The crt file to be used as the the trusted root CA. Applied to all endpoints.\")\n       .action(cacrtConfig)\n \n-    opt[Double](name = \"command-submission-ttl-scale-factor\")"
  },
  {
    "id" : "427d28e1-6d23-4093-8c94-f024c343b647",
    "prId" : 4450,
    "comments" : [
      {
        "id" : "a29974a1-9920-428d-a3d4-13272b510d79",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`do-not-wait-for-parties` or `no-waiting-for-parties` may be a better name for this parameter.",
        "createdAt" : "2020-02-10T09:55:42Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aa5c9ab5-80ab-420c-b5e0-e6bf4aa50dea",
        "parentId" : "a29974a1-9920-428d-a3d4-13272b510d79",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's not particularly important, this is just temporary before we reach a shared understanding of whether we want tests to wait for parties in the first place. If anything, I'd recommend hiding this option for now with `.hidden()`.",
        "createdAt" : "2020-02-10T11:44:14Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "58d06aea-e1c1-4967-9045-7bebc24dc200",
        "parentId" : "a29974a1-9920-428d-a3d4-13272b510d79",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "+1 for making the new option hidden. Otherwise, I'm sure you have seen a lot of 'temporary' solutions lying around for years ; )",
        "createdAt" : "2020-02-10T11:59:11Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c31bd7a7-4a79-4e54-8755-0e1b8f5fd9ec",
        "parentId" : "a29974a1-9920-428d-a3d4-13272b510d79",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "+1 for hidden. Adding it.",
        "createdAt" : "2020-02-10T12:21:31Z",
        "updatedAt" : "2020-02-10T12:43:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b50aea234086b5d2936b09b0d3a1451d42d8d09",
    "line" : 4,
    "diffHunk" : "@@ -147,6 +147,15 @@ object Cli {\n       .action((_, c) => c.copy(allTests = true))\n       .text(\"\"\"Run all default and optional tests. Respects the --exclude flag.\"\"\")\n \n+    opt[Unit](\"no-wait-for-parties\")"
  }
]