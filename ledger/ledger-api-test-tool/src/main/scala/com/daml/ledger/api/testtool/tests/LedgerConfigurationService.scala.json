[
  {
    "id" : "c7283c46-2345-4023-8b7e-d80627b34c79",
    "prId" : 5216,
    "comments" : [
      {
        "id" : "4f0cf362-da5a-4e4e-950e-75e9212adab6",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n    \"CSLSuccessIfMaxDeduplicationTimeExceeded\",\r\n```",
        "createdAt" : "2020-03-27T14:18:48Z",
        "updatedAt" : "2020-03-27T15:08:38Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "06ac8e1f40676caa1f52730059d896e20643c665",
    "line" : null,
    "diffHunk" : "@@ -31,20 +32,39 @@ class LedgerConfigurationService(session: LedgerSession) extends LedgerTestSuite\n   }\n \n   test(\n-    \"CSLSuccessIfLetRight\",\n-    \"Submission returns OK if LET is within the accepted interval\",\n+    \"CSLSuccessIfMaxDedplicationTimeRight\",\n+    \"Submission returns OK if deduplication time is within the accepted interval\",\n     allocate(SingleParty),\n   ) {\n     case Participants(Participant(ledger, party)) =>\n-      // The maximum accepted clock skew depends on the ledger and is not exposed through the LedgerConfigurationService,\n-      // and there might be an actual clock skew between the devices running the test and the ledger.\n-      // This test therefore does not attempt to simulate any clock skew\n-      // but simply checks whether basic command submission with an unmodified LET works.\n+      // Submission using the maximum allowed deduplication time\n       val request = ledger.submitRequest(party, Dummy(party).create.command)\n       for {\n-        _ <- ledger.submit(request)\n+        config <- ledger.configuration()\n+        maxDedupTime = config.maxDeduplicationTime.get\n+        _ <- ledger.submit(request.update(_.commands.deduplicationTime := maxDedupTime))\n       } yield {\n         // No assertions to make, since the command went through as expected\n       }\n   }\n+\n+  test(\n+    \"CSLSuccessIfMaxDedplicationTimeExceeded\","
  }
]