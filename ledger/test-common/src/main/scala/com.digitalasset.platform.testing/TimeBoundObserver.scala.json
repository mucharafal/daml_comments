[
  {
    "id" : "cc313a4f-5042-4a88-a157-b40a6bd6c9f3",
    "prId" : 3573,
    "comments" : [
      {
        "id" : "49ff928f-0270-4cf9-af41-3cf8a4759f03",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If the execution context has a single thread, would this block the entire process? I'd suggest you to have a look at `//libs-scala/timer-utils`, you can probably use `Delayed.by` for this. :slightly_smiling_face: ",
        "createdAt" : "2019-11-21T15:12:46Z",
        "updatedAt" : "2019-11-22T13:38:57Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6292569f-9f4d-4fe3-a91a-5e7327f7b1a0",
        "parentId" : "49ff928f-0270-4cf9-af41-3cf8a4759f03",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Do you also have to close the upstream source here?",
        "createdAt" : "2019-11-21T15:15:21Z",
        "updatedAt" : "2019-11-22T13:38:57Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "66a49f91-f987-46b3-a477-6b6f282fe291",
        "parentId" : "49ff928f-0270-4cf9-af41-3cf8a4759f03",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "`Delayed.by` sounds like a good call!",
        "createdAt" : "2019-11-21T15:32:29Z",
        "updatedAt" : "2019-11-22T13:38:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "307a9110-3e87-449b-9898-bdbe3a009a08",
        "parentId" : "49ff928f-0270-4cf9-af41-3cf8a4759f03",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "And I'm changing it to close the upstream source.",
        "createdAt" : "2019-11-21T15:35:50Z",
        "updatedAt" : "2019-11-22T13:38:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4848f40af9b3e4bc6651d495959322efdfdbaa78",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,44 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.testing\n+\n+import io.grpc.stub.StreamObserver\n+\n+import scala.collection.{immutable, mutable}\n+import scala.concurrent.duration.FiniteDuration\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n+\n+object TimeBoundObserver {\n+  def apply[T](duration: FiniteDuration)(attach: StreamObserver[T] => Unit)(\n+      implicit executionContext: ExecutionContext): Future[Seq[T]] = {\n+    val observer = new TimeBoundObserver[T](duration)\n+    attach(observer)\n+    observer.future\n+  }\n+}\n+\n+class TimeBoundObserver[T](duration: FiniteDuration)(implicit executionContext: ExecutionContext)\n+    extends StreamObserver[T] {\n+  private val promise: Promise[immutable.Seq[T]] = Promise()\n+  private val buffer: mutable.Buffer[T] = mutable.ListBuffer()\n+\n+  executionContext.execute(() => {\n+    Thread.sleep(duration.toMillis)"
  }
]