[
  {
    "id" : "ceeb2e1c-d92e-4cde-ab07-131d7259ac1e",
    "prId" : 3844,
    "comments" : [
      {
        "id" : "d4a7b1c8-d4ed-41ef-b78e-84472cb107cd",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "This seems to be basically the same as `SizeBoundObserver`, with the only real difference being that this one fails when `onCompleted` is called, and `SizeBoundObserver` succeeds. Can you make that one do what you want instead?",
        "createdAt" : "2019-12-13T15:52:52Z",
        "updatedAt" : "2019-12-13T15:55:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "edb37938-c7c5-4e75-9801-70eb98786909",
        "parentId" : "d4a7b1c8-d4ed-41ef-b78e-84472cb107cd",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Not really, this is specialized to count the number of completions within each response, not to count each response as one.",
        "createdAt" : "2019-12-13T15:58:03Z",
        "updatedAt" : "2019-12-13T15:58:03Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b1493b21c23cbfff4e88cad63f00f68284ec1f4a",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,53 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.testing\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+\n+import com.digitalasset.ledger.api.v1.command_completion_service.CompletionStreamResponse\n+import io.grpc.Context\n+import io.grpc.stub.StreamObserver\n+\n+import scala.concurrent.{Future, Promise}\n+\n+object WaitForCompletionsObserver {"
  }
]