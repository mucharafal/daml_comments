[
  {
    "id" : "f2543e84-9c22-4dd6-a087-72ab4c338f27",
    "prId" : 3844,
    "comments" : [
      {
        "id" : "d1f5f164-595c-4363-b2f6-091a02deabd0",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "This seems to be basically the same as `SizeBoundObserver`, with the only real difference being that this one fails when `onCompleted` is called, and `SizeBoundObserver` succeeds. Can you make that one do what you want instead?",
        "createdAt" : "2019-12-13T15:52:52Z",
        "updatedAt" : "2019-12-13T15:55:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "069ad498-738d-4424-8e47-eb8ff421997c",
        "parentId" : "d1f5f164-595c-4363-b2f6-091a02deabd0",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Not really, this is specialized to count the number of completions within each response, not to count each response as one.",
        "createdAt" : "2019-12-13T15:58:03Z",
        "updatedAt" : "2019-12-13T15:58:03Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b1493b21c23cbfff4e88cad63f00f68284ec1f4a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@import scala.concurrent.{Future, Promise}\n\nobject WaitForCompletionsObserver {\n\n  def apply(n: Int)(attach: StreamObserver[CompletionStreamResponse] => Unit): Future[Unit] = {"
  }
]