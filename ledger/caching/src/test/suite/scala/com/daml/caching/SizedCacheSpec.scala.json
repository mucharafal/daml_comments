[
  {
    "id" : "896f5d44-29de-4640-98d5-5bd2da42cd63",
    "prId" : 6432,
    "comments" : [
      {
        "id" : "320355f7-ad71-499f-a596-e0aff03aae4e",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "You need such upper limit because `maximumSize` is not a hard limit on the number of items kept in the cache?",
        "createdAt" : "2020-06-19T13:59:56Z",
        "updatedAt" : "2020-06-19T14:19:22Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "32d0c031-8ec9-48ea-91ff-51e89bb6a9e4",
        "parentId" : "320355f7-ad71-499f-a596-e0aff03aae4e",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Because eviction might be delayed; Caffeine has some heuristics about when to evict that I don't quite understand. As you say, it's not a hard limit.\r\n\r\nIt also might evict _more_ than you expect, because again, fun times.",
        "createdAt" : "2020-06-19T14:15:11Z",
        "updatedAt" : "2020-06-19T14:19:22Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f92e8924-9ea8-4b39-805d-310c11887060",
        "parentId" : "320355f7-ad71-499f-a596-e0aff03aae4e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "That's fine as long as the test case won't be flaky due to this variability (and the expected length range).",
        "createdAt" : "2020-06-19T14:26:12Z",
        "updatedAt" : "2020-06-19T14:26:12Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b17acec2-88e2-4f12-aa24-7997d9deb1e1",
        "parentId" : "320355f7-ad71-499f-a596-e0aff03aae4e",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I ran them a hundred times to be sure. ğŸ™‚ ",
        "createdAt" : "2020-06-19T14:31:47Z",
        "updatedAt" : "2020-06-19T14:31:47Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b406d43c-4acc-46a5-9148-dd93be3be2ec",
        "parentId" : "320355f7-ad71-499f-a596-e0aff03aae4e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Good call!",
        "createdAt" : "2020-06-19T14:45:12Z",
        "updatedAt" : "2020-06-19T14:45:12Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9e404d140fe8f22a807a16033b1a4e5cf3349485",
    "line" : 23,
    "diffHunk" : "@@ -0,0 +1,26 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.caching\n+\n+import scala.util.Random\n+\n+class SizedCacheSpec extends CacheSpecBase(\"a sized cache\") {\n+  override protected def newCache(): Cache[Integer, String] =\n+    SizedCache.from[Integer, String](SizedCache.Configuration(maximumSize = 16))\n+\n+  \"a sized cache\" should {\n+    \"evict values eventually, once the size limit has been reached\" in {\n+      val cache =\n+        SizedCache.from[Integer, String](SizedCache.Configuration(maximumSize = 256))\n+      val values = Iterator.continually[Integer](Random.nextInt).take(1000).toSet.toVector\n+\n+      values.foreach { value =>\n+        cache.get(value, _.toString)\n+      }\n+      val cachedValues = values.map(cache.getIfPresent).filter(_.isDefined)\n+\n+      cachedValues.length should (be > 16 and be < 500)"
  }
]