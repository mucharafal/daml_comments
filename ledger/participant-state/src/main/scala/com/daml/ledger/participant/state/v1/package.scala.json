[
  {
    "id" : "9656db12-68df-4813-b9fe-076fc4e3caf2",
    "prId" : 6714,
    "comments" : [
      {
        "id" : "b0516ac6-0f0e-44ca-b96e-4e2255e1b68c",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "If you imported `com.daml.lf.transaction.Transaction` you could remove the prefix here.",
        "createdAt" : "2020-07-14T08:33:26Z",
        "updatedAt" : "2020-07-14T11:01:31Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "abbbd00618a037c1a12fd6080434dcd3248dfc6e",
    "line" : null,
    "diffHunk" : "@@ -96,14 +96,14 @@ package object v1 {\n     *\n     * See the Contract Id specification for more detail daml-lf/spec/contract-id.rst\n     */\n-  type SubmittedTransaction = Tx.SubmittedTransaction\n+  type SubmittedTransaction = transaction.Transaction.SubmittedTransaction"
  },
  {
    "id" : "2c1b1e08-3bfa-42ee-a492-49e984777f01",
    "prId" : 5991,
    "comments" : [
      {
        "id" : "d70a936b-a4f6-4258-95a4-706310aa1782",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Do you plan on renaming this one too?",
        "createdAt" : "2020-05-15T14:44:57Z",
        "updatedAt" : "2020-05-25T08:54:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d70cbbf83f8ff0e01b793b887f877d8f61f7294",
    "line" : null,
    "diffHunk" : "@@ -105,10 +105,10 @@ package object v1 {\n     * absolute contract identifiers.\n     */\n   type CommittedTransaction =\n-    GenTransaction.WithTxValue[NodeId, Value.AbsoluteContractId]\n+    GenTransaction.WithTxValue[NodeId, Value.ContractId]\n \n   /** A contract instance with absolute contract identifiers only. */\n   type AbsoluteContractInst ="
  },
  {
    "id" : "298f7c71-f642-4976-bed7-16ef28e28ac0",
    "prId" : 5991,
    "comments" : [
      {
        "id" : "371cd530-e0c4-4931-90a5-b476b5d0c31d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please refine the comments above as well (they still reference relative and absolute contract identifiers).",
        "createdAt" : "2020-05-20T16:26:39Z",
        "updatedAt" : "2020-05-25T08:54:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "85ce9c8d-b883-4ace-877a-07e0662873a4",
        "parentId" : "371cd530-e0c4-4931-90a5-b476b5d0c31d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done. ",
        "createdAt" : "2020-05-25T07:21:16Z",
        "updatedAt" : "2020-05-25T08:54:03Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d70cbbf83f8ff0e01b793b887f877d8f61f7294",
    "line" : null,
    "diffHunk" : "@@ -105,10 +105,10 @@ package object v1 {\n     * absolute contract identifiers."
  },
  {
    "id" : "b9ba5b37-f824-4edd-87ca-ea46c89f83f9",
    "prId" : 519,
    "comments" : [
      {
        "id" : "d95cb0dc-a2db-490f-8308-57cf29d95296",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Why is this called the `recordTimeEpoch`? Doesn't seem to match the the description.",
        "createdAt" : "2019-04-16T13:41:51Z",
        "updatedAt" : "2019-04-23T12:01:12Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "50726f5499da8c39f9f20b4d09c3c4b9509b02e1",
    "line" : null,
    "diffHunk" : "@@ -100,25 +100,39 @@ package object v1 {\n     * though that there usually are few elements in the array.\n     *\n     */\n-  @SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))\n-  final case class Offset(private val xs: Array[Int]) {\n+  final case class Offset(private val xs: Array[Long]) {\n     override def toString: String =\n-      xs.mkString(\"-\")\n+      components.mkString(\"-\")\n \n-    def components: Iterable[Int] = xs\n+    def components: Iterable[Long] = xs\n+\n+    override def equals(that: Any): Boolean = that match {\n+      case o: Offset => Offset.compare(this, o) == 0\n+      case _ => false\n+    }\n   }\n   implicit object Offset extends Ordering[Offset] {\n \n     /** Create an offset from a string of form 1-2-3. Throws\n       * NumberFormatException on misformatted strings.\n       */\n     def assertFromString(s: String): Offset =\n-      Offset(s.split('-').map(_.toInt))\n+      Offset(s.split('-').map(_.toLong))\n \n     override def compare(x: Offset, y: Offset): Int =\n-      scala.math.Ordering.Iterable[Int].compare(x.xs, y.xs)\n+      scala.math.Ordering.Iterable[Long].compare(x.xs, y.xs)\n   }\n \n+  /** The initial conditions of the ledger.\n+    *\n+    * @param ledgerId: The static ledger identifier.\n+    * @param recordTimeEpoch: The initial record time before any [[Update]] arrives.\n+    */\n+  final case class LedgerInitialConditions(\n+      ledgerId: LedgerId,\n+      recordTimeEpoch: Timestamp"
  }
]