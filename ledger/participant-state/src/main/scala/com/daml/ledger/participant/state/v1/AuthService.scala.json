[
  {
    "id" : "8fa917cd-a4ea-4162-9b59-408167899852",
    "prId" : 3051,
    "comments" : [
      {
        "id" : "56ebd1d2-2b1e-4afe-af20-b62a96b5b537",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n/** The interface to implement for authorizing the Ledger API access to a participant.\r\n```",
        "createdAt" : "2019-10-04T11:54:11Z",
        "updatedAt" : "2019-10-07T13:17:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8bf5ad47-415c-419b-ad18-055a54e5e9b7",
        "parentId" : "56ebd1d2-2b1e-4afe-af20-b62a96b5b537",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "I will leave the comment as is, it uses the same style as `ReadService` and `WriteService`.",
        "createdAt" : "2019-10-07T10:54:00Z",
        "updatedAt" : "2019-10-07T13:17:51Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b086d71418f8dd31bcf1d51c0ae1f9e2877d27c",
    "line" : 8,
    "diffHunk" : "@@ -0,0 +1,30 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.v1\n+\n+import java.util.concurrent.CompletionStage\n+\n+/** An interface for authorizing the ledger API access to a participant."
  },
  {
    "id" : "c8571e76-1eb1-45b2-83e1-6a6fe725139c",
    "prId" : 3051,
    "comments" : [
      {
        "id" : "33b88b0a-bf89-4e58-8aac-a9089e2c3d86",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Note: this introduces a GRPC dependency to the participant state. The `io.grpc.Metadata` class is useful for dealing with HTTP headers, please let me know if you think converting it into something plain, like a `List[(String, BinaryBlob)]` is a better idea.",
        "createdAt" : "2019-10-07T13:16:57Z",
        "updatedAt" : "2019-10-07T13:17:51Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7b086d71418f8dd31bcf1d51c0ae1f9e2877d27c",
    "line" : 29,
    "diffHunk" : "@@ -0,0 +1,30 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.v1\n+\n+import java.util.concurrent.CompletionStage\n+\n+/** An interface for authorizing the ledger API access to a participant.\n+  *\n+  * The AuthService is responsible for converting request metadata (such as\n+  * the HTTP headers) into a set of [[Claims]].\n+  * These claims are then used by the ledger API server to check whether the\n+  * request is authorized.\n+  *\n+  * For example, a participant could:\n+  * - Ask all ledger API users to attach an `Authorization` header\n+  *   with a JWT token as the header value.\n+  * - Implement `decodeMetadata()` such that it reads the JWT token\n+  *   from the corresponding HTTP header, validates the token,\n+  *   and converts the token payload to [[Claims]].\n+  */\n+trait AuthService {\n+\n+  /** Converts gRPC request metadata into a set of [[Claims]].\n+    *\n+    *  @param headers All HTTP headers attached to the request.\n+    *\n+    */\n+  def decodeMetadata(headers: io.grpc.Metadata): CompletionStage[Claims]"
  }
]