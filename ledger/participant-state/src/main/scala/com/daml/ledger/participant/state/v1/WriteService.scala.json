[
  {
    "id" : "05ac1642-cdd2-42ca-84bb-c667192260d3",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "5e7eb938-842e-4735-a2ee-05718885662a",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can you hit reformat to re-indent the above comments?",
        "createdAt" : "2020-06-29T07:40:59Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : 33,
    "diffHunk" : "@@ -90,11 +90,22 @@ trait WriteService\n     *                        suffix those contract-ids in order to guaranteed their global\n     *                        uniqueness. See the Contract Id specification for more detail\n     *                        daml-lf/spec/contract-id.rst.\n+    * @param estimatedInterpretationCost Estimated cost of interpretation that may be used for\n+    *                                    handling submitted transactions differently."
  },
  {
    "id" : "6fe57c67-218a-4673-9c69-f8c38c775f15",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "d54769e8-20a0-44f0-bb2a-70e03631aa06",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      transaction: SubmittedTransaction,\r\n    ): CompletionStage[SubmissionResult] = ???\r\n```",
        "createdAt" : "2020-06-29T07:41:09Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : null,
    "diffHunk" : "@@ -90,11 +90,22 @@ trait WriteService\n     *                        suffix those contract-ids in order to guaranteed their global\n     *                        uniqueness. See the Contract Id specification for more detail\n     *                        daml-lf/spec/contract-id.rst.\n+    * @param estimatedInterpretationCost Estimated cost of interpretation that may be used for\n+    *                                    handling submitted transactions differently.\n     * @return an async result of a SubmissionResult\n     */\n   def submitTransaction(\n       submitterInfo: SubmitterInfo,\n       transactionMeta: TransactionMeta,\n       transaction: SubmittedTransaction,\n-  ): CompletionStage[SubmissionResult]\n+      estimatedInterpretationCost: Long,\n+  ): CompletionStage[SubmissionResult] =\n+    submitTransaction(submitterInfo, transactionMeta, transaction)\n+\n+  // Have to disable deprecation warnings for this package.\n+  //@deprecated(\"Will be removed in 1.4.0\", since = \"1.3.0\")\n+  def submitTransaction(\n+      submitterInfo: SubmitterInfo,\n+      transactionMeta: TransactionMeta,\n+      transaction: SubmittedTransaction): CompletionStage[SubmissionResult] = ???"
  },
  {
    "id" : "e83b2544-51aa-43d4-bcd0-8346f3243b6c",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "f0d064fe-61f9-4930-9156-0adfc556d8c7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Again, why is this commented out?",
        "createdAt" : "2020-06-29T07:42:04Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eddf3f8d-738f-44bd-a20a-83970448da34",
        "parentId" : "f0d064fe-61f9-4930-9156-0adfc556d8c7",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Will use Silencer so that this can be uncommented.",
        "createdAt" : "2020-06-29T08:12:54Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "515aeb0e-be2a-4524-a748-fb108a80b66a",
        "parentId" : "f0d064fe-61f9-4930-9156-0adfc556d8c7",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2020-06-29T11:21:48Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : null,
    "diffHunk" : "@@ -90,11 +90,22 @@ trait WriteService\n     *                        suffix those contract-ids in order to guaranteed their global\n     *                        uniqueness. See the Contract Id specification for more detail\n     *                        daml-lf/spec/contract-id.rst.\n+    * @param estimatedInterpretationCost Estimated cost of interpretation that may be used for\n+    *                                    handling submitted transactions differently.\n     * @return an async result of a SubmissionResult\n     */\n   def submitTransaction(\n       submitterInfo: SubmitterInfo,\n       transactionMeta: TransactionMeta,\n       transaction: SubmittedTransaction,\n-  ): CompletionStage[SubmissionResult]\n+      estimatedInterpretationCost: Long,\n+  ): CompletionStage[SubmissionResult] =\n+    submitTransaction(submitterInfo, transactionMeta, transaction)\n+\n+  // Have to disable deprecation warnings for this package.\n+  //@deprecated(\"Will be removed in 1.4.0\", since = \"1.3.0\")"
  },
  {
    "id" : "0d61f7ef-4964-4e65-a081-708878bd5390",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "90fb9af9-e023-49d7-9814-586bf67a2615",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Shouldn't this be delegating to the above?",
        "createdAt" : "2020-06-29T07:42:23Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d4d6827-6130-4fd9-bf50-548eba80603e",
        "parentId" : "90fb9af9-e023-49d7-9814-586bf67a2615",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, changed -- just was checking if it is being called from anywhere.",
        "createdAt" : "2020-06-29T08:12:26Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : null,
    "diffHunk" : "@@ -90,11 +90,22 @@ trait WriteService\n     *                        suffix those contract-ids in order to guaranteed their global\n     *                        uniqueness. See the Contract Id specification for more detail\n     *                        daml-lf/spec/contract-id.rst.\n+    * @param estimatedInterpretationCost Estimated cost of interpretation that may be used for\n+    *                                    handling submitted transactions differently.\n     * @return an async result of a SubmissionResult\n     */\n   def submitTransaction(\n       submitterInfo: SubmitterInfo,\n       transactionMeta: TransactionMeta,\n       transaction: SubmittedTransaction,\n-  ): CompletionStage[SubmissionResult]\n+      estimatedInterpretationCost: Long,\n+  ): CompletionStage[SubmissionResult] =\n+    submitTransaction(submitterInfo, transactionMeta, transaction)\n+\n+  // Have to disable deprecation warnings for this package.\n+  //@deprecated(\"Will be removed in 1.4.0\", since = \"1.3.0\")\n+  def submitTransaction(\n+      submitterInfo: SubmitterInfo,\n+      transactionMeta: TransactionMeta,\n+      transaction: SubmittedTransaction): CompletionStage[SubmissionResult] = ???"
  },
  {
    "id" : "715d9446-9ef1-46c0-ba5c-c7484ebbddde",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "e38cdccd-9024-475e-bfe8-32fc33f92b1c",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n  @silent(\"deprecated\")\r\n```",
        "createdAt" : "2020-06-29T11:22:32Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : null,
    "diffHunk" : "@@ -80,21 +81,34 @@ trait WriteService\n     * time for submitting and validating large transactions before they are\n     * timestamped with their record time.\n     *\n-    * @param submitterInfo   : the information provided by the submitter for\n-    *                        correlating this submission with its acceptance or rejection on the\n-    *                        associated [[ReadService]].\n-    * @param transactionMeta : the meta-data accessible to all consumers of the\n-    *                        transaction. See [[TransactionMeta]] for more information.\n-    * @param transaction     : the submitted transaction. This transaction can contain local\n-    *                        contract-ids that need suffixing. The participant state may have to\n-    *                        suffix those contract-ids in order to guaranteed their global\n-    *                        uniqueness. See the Contract Id specification for more detail\n-    *                        daml-lf/spec/contract-id.rst.\n+    * @param submitterInfo               the information provided by the submitter for\n+    *                                    correlating this submission with its acceptance or rejection on the\n+    *                                    associated [[ReadService]].\n+    * @param transactionMeta             the meta-data accessible to all consumers of the transaction.\n+    *                                    See [[TransactionMeta]] for more information.\n+    * @param transaction                 the submitted transaction. This transaction can contain local\n+    *                                    contract-ids that need suffixing. The participant state may have to\n+    *                                    suffix those contract-ids in order to guaranteed their global\n+    *                                    uniqueness. See the Contract Id specification for more detail\n+    *                                    daml-lf/spec/contract-id.rst.\n+    * @param estimatedInterpretationCost Estimated cost of interpretation that may be used for\n+    *                                    handling submitted transactions differently.\n     * @return an async result of a SubmissionResult\n     */\n+  @silent"
  },
  {
    "id" : "65809a67-4685-4741-bfa6-2bfad7a973ee",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "467704b3-27bd-4d6d-95ab-35692b630752",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Why is it mandatory here and optional in `CommitMetadata`?",
        "createdAt" : "2020-06-29T14:51:58Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e85b721c-f87e-4216-a558-ea8f1dbf18ff",
        "parentId" : "467704b3-27bd-4d6d-95ab-35692b630752",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Because for a transaction you have interpretation cost whereas for non-transaction submissions you don't (and `CommitMetadata` is passed for each type).",
        "createdAt" : "2020-06-29T15:08:46Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aa539e19-8924-45cd-a7a1-e8ec85b790d2",
        "parentId" : "467704b3-27bd-4d6d-95ab-35692b630752",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "The relationship between submission type and metadata is not made explicit by an `Option` though; I'd consider specializing `CommitMetadata`.",
        "createdAt" : "2020-06-29T15:54:05Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9d596fbb-8661-419f-b7cc-2725826249ae",
        "parentId" : "467704b3-27bd-4d6d-95ab-35692b630752",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Agreed, that specialization will probably happen when we add more fields to `CommitMetadata`. Another angle is, however, that for Java consumers exposing different case classes may not be preferred and hence we may want to choose a different design.",
        "createdAt" : "2020-06-30T08:46:26Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : 42,
    "diffHunk" : "@@ -80,21 +81,34 @@ trait WriteService\n     * time for submitting and validating large transactions before they are\n     * timestamped with their record time.\n     *\n-    * @param submitterInfo   : the information provided by the submitter for\n-    *                        correlating this submission with its acceptance or rejection on the\n-    *                        associated [[ReadService]].\n-    * @param transactionMeta : the meta-data accessible to all consumers of the\n-    *                        transaction. See [[TransactionMeta]] for more information.\n-    * @param transaction     : the submitted transaction. This transaction can contain local\n-    *                        contract-ids that need suffixing. The participant state may have to\n-    *                        suffix those contract-ids in order to guaranteed their global\n-    *                        uniqueness. See the Contract Id specification for more detail\n-    *                        daml-lf/spec/contract-id.rst.\n+    * @param submitterInfo               the information provided by the submitter for\n+    *                                    correlating this submission with its acceptance or rejection on the\n+    *                                    associated [[ReadService]].\n+    * @param transactionMeta             the meta-data accessible to all consumers of the transaction.\n+    *                                    See [[TransactionMeta]] for more information.\n+    * @param transaction                 the submitted transaction. This transaction can contain local\n+    *                                    contract-ids that need suffixing. The participant state may have to\n+    *                                    suffix those contract-ids in order to guaranteed their global\n+    *                                    uniqueness. See the Contract Id specification for more detail\n+    *                                    daml-lf/spec/contract-id.rst.\n+    * @param estimatedInterpretationCost Estimated cost of interpretation that may be used for\n+    *                                    handling submitted transactions differently.\n     * @return an async result of a SubmissionResult\n     */\n+  @silent(\"deprecated\")\n   def submitTransaction(\n       submitterInfo: SubmitterInfo,\n       transactionMeta: TransactionMeta,\n       transaction: SubmittedTransaction,\n-  ): CompletionStage[SubmissionResult]\n+      estimatedInterpretationCost: Long,"
  },
  {
    "id" : "1abf492f-e98c-477c-ae01-6cd9501b8111",
    "prId" : 4793,
    "comments" : [
      {
        "id" : "bae55367-c8c2-4dbd-8f4d-2ccfc58b0b37",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I guess this is a proactive removal of the comment, but doesn't really fit this PR.",
        "createdAt" : "2020-03-03T12:16:48Z",
        "updatedAt" : "2020-03-03T13:36:40Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b699d6f9-2f00-415e-97ee-7501549d8134",
        "parentId" : "bae55367-c8c2-4dbd-8f4d-2ccfc58b0b37",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I put back the comment",
        "createdAt" : "2020-03-03T12:23:11Z",
        "updatedAt" : "2020-03-03T13:36:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2b2d462e9e87d0e7d8f5934660f5aa9b57eb1935",
    "line" : null,
    "diffHunk" : "@@ -87,14 +87,7 @@ trait WriteService\n     *                        associated [[ReadService]].\n     * @param transactionMeta : the meta-data accessible to all consumers of the\n     *                        transaction. See [[TransactionMeta]] for more information.\n-    * @param transaction     : the submitted transaction. This transaction can\n-    *                        contain contract-ids that are relative to this transaction itself.\n-    *                        These are used to refer to contracts created in the transaction\n-    *                        itself. The participant state implementation is expected to convert\n-    *                        these into absolute contract-ids that are guaranteed to be unique.\n-    *                        This typically happens after a transaction has been assigned a\n-    *                        globally unique id, as then the contract-ids can be derived from that\n-    *                        transaction id.\n+    * @param transaction     : the submitted transaction."
  },
  {
    "id" : "62300544-753a-4fc9-a6bd-e5630a6ef5fd",
    "prId" : 1193,
    "comments" : [
      {
        "id" : "8969086d-dbd1-4b5c-bc88-d53a3c130653",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "as discussed, lets use java-friendly types at this level, e.g. CompletableFuture.",
        "createdAt" : "2019-05-16T14:27:52Z",
        "updatedAt" : "2019-05-17T08:14:21Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "add9ff3e-0318-46b5-91db-031b6c437056",
        "parentId" : "8969086d-dbd1-4b5c-bc88-d53a3c130653",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "changed it to use the interface `CompletionStage`",
        "createdAt" : "2019-05-17T06:35:49Z",
        "updatedAt" : "2019-05-17T08:14:21Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b1821dbc0a9cd4b31f942d66ff76647c601cfcfb",
    "line" : null,
    "diffHunk" : "@@ -89,9 +91,10 @@ trait WriteService {\n     *   transaction id.\n     *\n     */\n+  //TODO: update docs\n   def submitTransaction(\n       submitterInfo: SubmitterInfo,\n       transactionMeta: TransactionMeta,\n-      transaction: SubmittedTransaction): Unit\n+      transaction: SubmittedTransaction): Future[SubmissionResult]"
  },
  {
    "id" : "6c9bb262-6834-47aa-9f30-a8e1810a8a67",
    "prId" : 432,
    "comments" : [
      {
        "id" : "b3ff9716-3d28-41b6-b3e5-3d1abb39438f",
        "parentId" : null,
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "Please reflow text here.",
        "createdAt" : "2019-04-12T13:18:35Z",
        "updatedAt" : "2019-04-12T15:11:57Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ab4a6bc3-c6c6-4d5e-88f6-ddeb3160a8f4",
        "parentId" : "b3ff9716-3d28-41b6-b3e5-3d1abb39438f",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-12T15:10:56Z",
        "updatedAt" : "2019-04-12T15:12:30Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "015b4a7f0c0e810915767c5f413631c8cde70d08",
    "line" : null,
    "diffHunk" : "@@ -3,7 +3,93 @@\n \n package com.daml.ledger.participant.state.v1\n \n+/** An interface to change a ledger via a participant.\n+  *\n+  * The methods in this interface are all methods that are supported\n+  * *uniformly* across all ledger participant implementations. Methods for\n+  * uploading packages, on-boarding parties, and changing ledger-wide\n+  * configuration are specific to a ledger and therefore to a participant\n+  * implementation. Moreover, these methods usually require admin-level\n+  * privileges, whose granting is also specific to a ledger.\n+  *\n+  * If a ledger is run for testing only, there is the option for quite freely\n+  * allowing the on-boarding"
  },
  {
    "id" : "e26443e3-0c90-4a16-9d36-d61bb0f9bde5",
    "prId" : 432,
    "comments" : [
      {
        "id" : "dc070cd6-4ba0-453b-b678-cafb1c547e6d",
        "parentId" : null,
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "```suggestion\r\n    * ready for acceptance to the ledger, which typically requires some\r\n```",
        "createdAt" : "2019-04-12T13:19:21Z",
        "updatedAt" : "2019-04-12T15:11:57Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0afbe37-e457-432c-9a49-14e264bfe014",
        "parentId" : "dc070cd6-4ba0-453b-b678-cafb1c547e6d",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-12T15:11:27Z",
        "updatedAt" : "2019-04-12T15:12:30Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "015b4a7f0c0e810915767c5f413631c8cde70d08",
    "line" : null,
    "diffHunk" : "@@ -3,7 +3,93 @@\n \n package com.daml.ledger.participant.state.v1\n \n+/** An interface to change a ledger via a participant.\n+  *\n+  * The methods in this interface are all methods that are supported\n+  * *uniformly* across all ledger participant implementations. Methods for\n+  * uploading packages, on-boarding parties, and changing ledger-wide\n+  * configuration are specific to a ledger and therefore to a participant\n+  * implementation. Moreover, these methods usually require admin-level\n+  * privileges, whose granting is also specific to a ledger.\n+  *\n+  * If a ledger is run for testing only, there is the option for quite freely\n+  * allowing the on-boarding\n+  * of parties and uploading of packages. There are plans to make this\n+  * functionality uniformly available: see the roadmap for progress\n+  * information https://github.com/digital-asset/daml/issues/121.\n+  *\n+  * As of now there is only one method for changing the state of a DAML\n+  * ledger: submitting a transaction using [[WriteService!.submitTransaction]].\n+  *\n+  */\n trait WriteService {\n+\n+  /** Submit a transaction for acceptance to the ledger.\n+    *\n+    * This method must be thread-safe, not throw, and not block on IO. It is\n+    * though allowed to perform significant computation. The expectation is\n+    * that callers call this method on a thread dedicated to getting this transaction\n+    * ready for acceptance to the ledger,which typically requires some"
  },
  {
    "id" : "9eb415f4-6ef8-4f44-95be-f7b83bb1bfc2",
    "prId" : 432,
    "comments" : [
      {
        "id" : "7818fd89-2bb2-421b-bbb5-157698a0738c",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "nitpick: `getTime : Update Time` :)",
        "createdAt" : "2019-04-12T14:12:22Z",
        "updatedAt" : "2019-04-12T15:11:57Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "015b4a7f0c0e810915767c5f413631c8cde70d08",
    "line" : 48,
    "diffHunk" : "@@ -3,7 +3,93 @@\n \n package com.daml.ledger.participant.state.v1\n \n+/** An interface to change a ledger via a participant.\n+  *\n+  * The methods in this interface are all methods that are supported\n+  * *uniformly* across all ledger participant implementations. Methods for\n+  * uploading packages, on-boarding parties, and changing ledger-wide\n+  * configuration are specific to a ledger and therefore to a participant\n+  * implementation. Moreover, these methods usually require admin-level\n+  * privileges, whose granting is also specific to a ledger.\n+  *\n+  * If a ledger is run for testing only, there is the option for quite freely\n+  * allowing the on-boarding\n+  * of parties and uploading of packages. There are plans to make this\n+  * functionality uniformly available: see the roadmap for progress\n+  * information https://github.com/digital-asset/daml/issues/121.\n+  *\n+  * As of now there is only one method for changing the state of a DAML\n+  * ledger: submitting a transaction using [[WriteService!.submitTransaction]].\n+  *\n+  */\n trait WriteService {\n+\n+  /** Submit a transaction for acceptance to the ledger.\n+    *\n+    * This method must be thread-safe, not throw, and not block on IO. It is\n+    * though allowed to perform significant computation. The expectation is\n+    * that callers call this method on a thread dedicated to getting this transaction\n+    * ready for acceptance to the ledger,which typically requires some\n+    * preparation steps (decomposition, serialization) by the implementation\n+    * of the [[WriteService]].\n+    *\n+    * The result of the transaction submission is communicated asynchronously\n+    * via a [[ReadService]] implementation backed by the same participant\n+    * state as this [[WriteService]]. Successful transaction acceptance is\n+    * communicated using a [[Update.TransactionAccepted]] message. Failed\n+    * transaction acceptance is communicated when possible via a\n+    * [[Update.CommandRejected]] message referencing the same `submitterInfo` as\n+    * provided in the submission. There can be failure modes where a\n+    * transaction submission is lost in transit, and no [[Update.CommandRejected]] is\n+    * generated. These failures are communicated via [[Update.Heartbeat]]s signalling\n+    * that the `maximumRecordTime` provided in the submitter info has been\n+    * exceeded. See the comments on [[ReadService.stateUpdates]] for further details.\n+    *\n+    * A note on ledger effective time and record time: transactions are\n+    * submitted together with a `ledgerEffectiveTime` provided as part of the\n+    * `transactionMeta` information. The ledger-effective time is used by the\n+    * DAML Engine to resolve calls to the `getTime :: Update Time`"
  }
]