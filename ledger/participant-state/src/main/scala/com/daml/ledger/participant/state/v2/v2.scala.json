[
  {
    "id" : "5216670c-bb92-4c9e-ad1a-63f2195ecc05",
    "prId" : 1541,
    "comments" : [
      {
        "id" : "d62f3f4a-8ce7-45af-8e8b-4349776f1f0d",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "s/v1/v2 and in the other files that are below the v2 hierarchy",
        "createdAt" : "2019-06-06T12:35:02Z",
        "updatedAt" : "2019-06-06T16:50:19Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbded2c80d13c22efe0f8a94e70de1b79383261f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state\n+\n+import com.digitalasset.daml.lf.data.Ref\n+import com.digitalasset.daml.lf.transaction.{GenTransaction, Transaction}\n+import com.digitalasset.daml.lf.value.Value\n+\n+/** Interfaces to read from and write to an (abstract) participant state.\n+  *\n+  * A DAML ledger participant is code that allows to actively participate in\n+  * the evolution of a shared DAML ledger. Each such participant maintains a\n+  * particular view onto the state of the DAML ledger. We call this view the\n+  * participant state.\n+  *\n+  * Actual implementations of a DAML ledger participant will likely maintain\n+  * more state than what is exposed through the interfaces in this package,\n+  * which is why we talk about an abstract participant state. It abstracts\n+  * over the different implementations of DAML ledger participants.\n+  *\n+  * The interfaces are optimized for easy implementation. The\n+  * [[v1.WriteService]] interface contains the methods for changing the"
  },
  {
    "id" : "5c858196-6b67-401b-8a4f-722a246cda40",
    "prId" : 1541,
    "comments" : [
      {
        "id" : "4a644d3e-f526-4fe3-86a4-1ddb0852b0ab",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Remove this explanation here; and replace it with an explanation at the very top which explains the relation between the `v2` and `v1` version of the service. \r\n\r\n- v1 is kept as is to serve the needs of `//ledger/api-server-damlonx`\r\n- v2 is in-flux to evolve to serve the needs of merging the Sandbox ledger API server with the DAML on X API server as per #1273 .",
        "createdAt" : "2019-06-06T12:36:58Z",
        "updatedAt" : "2019-06-06T16:50:19Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbded2c80d13c22efe0f8a94e70de1b79383261f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,107 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state\n+\n+import com.digitalasset.daml.lf.data.Ref\n+import com.digitalasset.daml.lf.transaction.{GenTransaction, Transaction}\n+import com.digitalasset.daml.lf.value.Value\n+\n+/** Interfaces to read from and write to an (abstract) participant state.\n+  *\n+  * A DAML ledger participant is code that allows to actively participate in\n+  * the evolution of a shared DAML ledger. Each such participant maintains a\n+  * particular view onto the state of the DAML ledger. We call this view the\n+  * participant state.\n+  *\n+  * Actual implementations of a DAML ledger participant will likely maintain\n+  * more state than what is exposed through the interfaces in this package,\n+  * which is why we talk about an abstract participant state. It abstracts\n+  * over the different implementations of DAML ledger participants.\n+  *\n+  * The interfaces are optimized for easy implementation. The\n+  * [[v1.WriteService]] interface contains the methods for changing the\n+  * participant state (and potentially the state of the DAML ledger), which\n+  * all ledger participants must support. These methods are for example\n+  * exposed via the DAML Ledger API. Actual ledger participant implementations\n+  * likely support more implementation-specific methods. They are however not\n+  * exposed via the DAML Ledger API. The [[v1.ReadService]] interface contains\n+  * the one method [[v1.ReadService.stateUpdates]] to read the state of a ledger\n+  * participant. It represents the participant state as a stream of\n+  * [[v1.Update]]s to an initial participant state. The typical consumer of this\n+  * method is a class that subscribes to this stream of [[v1.Update]]s and\n+  * reconstructs (a view of) the actual participant state. See the comments\n+  * on [[v1.Update]] and [[v1.ReadService.stateUpdates]] for details about the kind\n+  * of updates and the guarantees given to consumers of the stream of\n+  * [[v1.Update]]s.\n+  *\n+  * We provide a reference implementation of a participant state in\n+  * [[com.daml.ledger.participant.state.v2.impl.reference.Ledger]]. There we\n+  * model an in-memory ledger, which has by construction a single participant,\n+  * which hosts all parties. See its comments for details on how that is done,\n+  * and how its implementation can be used as a blueprint for implementing\n+  * your own participant state.\n+  *\n+  * We do expect the interfaces provided in"
  }
]