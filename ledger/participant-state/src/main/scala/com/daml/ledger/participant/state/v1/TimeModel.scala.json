[
  {
    "id" : "d5c1620e-cc5e-4ece-92c3-a1f5b408c6db",
    "prId" : 6813,
    "comments" : [
      {
        "id" : "a595289d-cb4a-41fc-bed2-767028cdc318",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Hm, I think the check is slightly backwards to begin with. `lowerBound` and `upperBound` should be derived from `recordTime`. This determines the window into which `ledgerTime` must fall. The error message should then say something like `Ledger time $ledgerTime outside of range [$lowerBound, $upperBound]\"`.",
        "createdAt" : "2020-07-22T09:49:59Z",
        "updatedAt" : "2020-07-24T19:49:58Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3dc4b086-5a5d-4d7d-8a22-9d54d9461263",
        "parentId" : "a595289d-cb4a-41fc-bed2-767028cdc318",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "You can either check whether `ledgerTime` falls within a window derived from the `recordTime`, or you can check whether `recordTime` falls within a window derived from the `ledgerTime`. The checks are identical, the only difference is the error message to the user.\r\n\r\nThe check changed in https://github.com/digital-asset/daml/commit/474e92c13c6989fb2ed2b59af58007880818b465#diff-813e8426f7741d927d9f57732c24ba69, should we revert to the previous error message based on `ledgerTime`?",
        "createdAt" : "2020-07-23T03:57:29Z",
        "updatedAt" : "2020-07-24T19:49:58Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b715feb96337b49d77a09c5a58ab31acd0942bc5",
    "line" : null,
    "diffHunk" : "@@ -34,7 +34,7 @@ case class TimeModel private (\n     val lowerBound = minRecordTime(ledgerTime)\n     val upperBound = maxRecordTime(ledgerTime)\n     if (recordTime.isBefore(lowerBound) || recordTime.isAfter(upperBound))\n-      Left(s\"Record time $ledgerTime outside of range [$lowerBound, $upperBound]\")\n+      Left(s\"Record time $recordTime outside of range [$lowerBound, $upperBound]\")"
  },
  {
    "id" : "d4b3d56b-6119-474c-bfa9-f5a424d2576e",
    "prId" : 6813,
    "comments" : [
      {
        "id" : "1851526e-812a-4819-80b3-caffa59ab11e",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      Left(s\"Ledger time $ledgerTime outside of range [$lowerBound, $upperBound]\")\r\n```",
        "createdAt" : "2020-07-24T15:43:34Z",
        "updatedAt" : "2020-07-24T19:49:58Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b715feb96337b49d77a09c5a58ab31acd0942bc5",
    "line" : null,
    "diffHunk" : "@@ -31,14 +31,20 @@ case class TimeModel private (\n       ledgerTime: Instant,\n       recordTime: Instant\n   ): Either[String, Unit] = {\n-    val lowerBound = minRecordTime(ledgerTime)\n-    val upperBound = maxRecordTime(ledgerTime)\n-    if (recordTime.isBefore(lowerBound) || recordTime.isAfter(upperBound))\n-      Left(s\"Record time $ledgerTime outside of range [$lowerBound, $upperBound]\")\n+    val lowerBound = minLedgerTime(recordTime)\n+    val upperBound = maxLedgerTime(recordTime)\n+    if (ledgerTime.isBefore(lowerBound) || ledgerTime.isAfter(upperBound))\n+      Left(s\"Record time $recordTime outside of range [$lowerBound, $upperBound]\")"
  },
  {
    "id" : "0ba70a35-614e-4300-a116-0a929cf70cef",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "1031afb4-e95c-4c5d-92ca-b32cd3c5a5fe",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "I'd put those methods into the `TimeModel` class such that you don't have to manually pass the skew parameters.",
        "createdAt" : "2020-07-03T15:36:24Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3a9f3091-37b5-4765-89bf-5b00da0e3599",
        "parentId" : "1031afb4-e95c-4c5d-92ca-b32cd3c5a5fe",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Agreed.",
        "createdAt" : "2020-07-03T15:45:35Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : null,
    "diffHunk" : "@@ -53,11 +53,25 @@ object TimeModel {\n       maxSkew = Duration.ofSeconds(30L),\n     ).get\n \n+  val resolution: Duration = Duration.ofNanos(1000L)\n+\n   def apply(avgTransactionLatency: Duration, minSkew: Duration, maxSkew: Duration): Try[TimeModel] =\n     Try {\n       require(!avgTransactionLatency.isNegative, \"Negative average transaction latency\")\n       require(!minSkew.isNegative, \"Negative min skew\")\n       require(!maxSkew.isNegative, \"Negative max skew\")\n       new TimeModel(avgTransactionLatency, minSkew, maxSkew)\n     }\n+\n+  private[state] def minRecordTime(ledgerTime: Instant, maxSkew: Duration): Instant =\n+    ledgerTime.minus(maxSkew)\n+\n+  private[state] def maxRecordTime(ledgerTime: Instant, minSkew: Duration): Instant =\n+    ledgerTime.plus(minSkew)\n+\n+  private def minLedgerTime(recordTime: Instant, minSkew: Duration): Instant =\n+    recordTime.minus(minSkew)\n+\n+  private def maxLedgerTime(recordTime: Instant, maxSkew: Duration): Instant =\n+    recordTime.plus(maxSkew)\n }"
  },
  {
    "id" : "a4f93827-543b-44c3-9d24-a073ddc32add",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "be918ca3-ea3e-4f92-b045-b1bb26fbde64",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "```suggestion\r\n    val lowerBound = minRecordTime(ledgerTime, minSkew)\r\n    val upperBound = maxRecordTime(ledgerTime, maxSkew)\r\n    if (recordTime.isBefore(lowerBound) || recordTime.isAfter(upperBound))\r\n```\r\nIf you replace the checks this way, then you don't need the `min/maxLedgerTime` methods at all and no need to document/test that minLedgerTime/maxRecordTime have a joint contract.",
        "createdAt" : "2020-07-03T15:38:03Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8a7b0da8-e550-484e-89d9-16a55143e4d0",
        "parentId" : "be918ca3-ea3e-4f92-b045-b1bb26fbde64",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Yes that was my first idea as well, my only problem with that is that I would have to change the message below and I'm not sure of the impacts; @miklos-da what's your take?",
        "createdAt" : "2020-07-03T15:44:41Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "260ac6c0-65f9-4108-b9de-b0fd0aa2f549",
        "parentId" : "be918ca3-ea3e-4f92-b045-b1bb26fbde64",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Also @rautenrieth-da you might be able to comment on this.",
        "createdAt" : "2020-07-03T15:51:43Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "48b03ace-9611-4160-a280-11e072ba1104",
        "parentId" : "be918ca3-ea3e-4f92-b045-b1bb26fbde64",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I don't think changing the rejection message should be a problem, i.e., it's not part of any contract (the fact that we are producing a `RejectionReason.InvalidLedgerTime` is).",
        "createdAt" : "2020-07-03T16:17:30Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : null,
    "diffHunk" : "@@ -30,14 +31,13 @@ case class TimeModel private (\n       ledgerTime: Instant,\n       recordTime: Instant\n   ): Either[String, Unit] = {\n-    val lowerBound = recordTime.minus(minSkew)\n-    val upperBound = recordTime.plus(maxSkew)\n+    val lowerBound = minLedgerTime(recordTime, minSkew)\n+    val upperBound = maxLedgerTime(recordTime, maxSkew)\n     if (ledgerTime.isBefore(lowerBound) || ledgerTime.isAfter(upperBound))"
  },
  {
    "id" : "5206d3ea-9077-4e45-aa6d-ab6173963cfd",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "acebbc5d-c7bc-4b3f-b52d-b67037a70625",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "This is a constant, isn't it?\r\n```suggestion\r\n  val Resolution: Duration = Duration.of(1L, MICROS)\r\n```",
        "createdAt" : "2020-07-03T16:05:16Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2c9e4d39-18c5-4c98-90be-3c045fa0f44a",
        "parentId" : "acebbc5d-c7bc-4b3f-b52d-b67037a70625",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Yes, but for consistency I'd also have to rename the preexisting one. I'll have a look.",
        "createdAt" : "2020-07-03T17:08:49Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b3d4da88-9624-4856-89be-029dd5ed9bfa",
        "parentId" : "acebbc5d-c7bc-4b3f-b52d-b67037a70625",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "What do you mean by 'preexisting one'?",
        "createdAt" : "2020-07-06T14:23:19Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : null,
    "diffHunk" : "@@ -53,11 +53,25 @@ object TimeModel {\n       maxSkew = Duration.ofSeconds(30L),\n     ).get\n \n+  val resolution: Duration = Duration.ofNanos(1000L)"
  },
  {
    "id" : "a3c5ce74-5cf8-4a92-9bb5-ccfa18633e68",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "0be41c4b-a703-43b9-8894-e4248edf49e0",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This should probably move to `com.daml.lf.data.Time.Timestamp`. The time model does not depend on the resolution.",
        "createdAt" : "2020-07-06T18:33:10Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7d0c484-ee49-4fa4-852e-e4df8d02ac43",
        "parentId" : "0be41c4b-a703-43b9-8894-e4248edf49e0",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Moved.",
        "createdAt" : "2020-07-07T09:22:02Z",
        "updatedAt" : "2020-07-07T09:22:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : null,
    "diffHunk" : "@@ -53,6 +60,8 @@ object TimeModel {\n       maxSkew = Duration.ofSeconds(30L),\n     ).get\n \n+  val Resolution: Duration = Duration.of(1L, MICROS)"
  },
  {
    "id" : "706d8f0e-00fd-4659-9df6-7882b4059930",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "c618b6b7-419d-46e6-bf77-1570df3a620b",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "```suggestion\r\n    ledgerTime.minus(maxSkew)\r\n```\r\n\r\nFrom the ledger time model document:\r\n```\r\nrecordTime - minSkew <= ledgerTime && ledgerTime <= recordTime + maxSkew\r\n```\r\n\r\nwhich transforms to:\r\n```\r\nledgerTime + minSkew >= recordTime && recordTime >= ledgerTime - maxSkew\r\n```\r\n\r\nThis error is only caught by tests that use an asymmetric time model (where `minSkew` != `maxSkew`), and is probably why `//ledger/sandbox:sandbox-tests_test_suite_src_test_suite_scala_com_digitalasset_platform_sandbox_stores_ledger_TransactionTimeModelComplianceIT.scala` fails.\r\n\r\nConsider also adding some kvutils test with an asymmetric time model.",
        "createdAt" : "2020-07-06T18:58:59Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2bfed784-adc6-4792-b4d2-56fa9154f271",
        "parentId" : "c618b6b7-419d-46e6-bf77-1570df3a620b",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Thanks for the explanation. Fixed and added test cases for `TimeModel`.",
        "createdAt" : "2020-07-07T09:18:22Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : null,
    "diffHunk" : "@@ -30,14 +32,19 @@ case class TimeModel private (\n       ledgerTime: Instant,\n       recordTime: Instant\n   ): Either[String, Unit] = {\n-    val lowerBound = recordTime.minus(minSkew)\n-    val upperBound = recordTime.plus(maxSkew)\n-    if (ledgerTime.isBefore(lowerBound) || ledgerTime.isAfter(upperBound))\n-      Left(s\"Ledger time $ledgerTime outside of range [$lowerBound, $upperBound]\")\n+    val lowerBound = minRecordTime(ledgerTime)\n+    val upperBound = maxRecordTime(ledgerTime)\n+    if (recordTime.isBefore(lowerBound) || recordTime.isAfter(upperBound))\n+      Left(s\"Record time $ledgerTime outside of range [$lowerBound, $upperBound]\")\n     else\n       Right(())\n   }\n \n+  private[state] def minRecordTime(ledgerTime: Instant): Instant =\n+    ledgerTime.minus(minSkew)"
  },
  {
    "id" : "0942c1d6-73b3-4a75-b3c3-893a98abc52e",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "48b625df-8b6c-4110-a537-dce1bd3d6d9e",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "```suggestion\r\n    ledgerTime.plus(minSkew)\r\n```",
        "createdAt" : "2020-07-06T18:59:15Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : null,
    "diffHunk" : "@@ -30,14 +32,19 @@ case class TimeModel private (\n       ledgerTime: Instant,\n       recordTime: Instant\n   ): Either[String, Unit] = {\n-    val lowerBound = recordTime.minus(minSkew)\n-    val upperBound = recordTime.plus(maxSkew)\n-    if (ledgerTime.isBefore(lowerBound) || ledgerTime.isAfter(upperBound))\n-      Left(s\"Ledger time $ledgerTime outside of range [$lowerBound, $upperBound]\")\n+    val lowerBound = minRecordTime(ledgerTime)\n+    val upperBound = maxRecordTime(ledgerTime)\n+    if (recordTime.isBefore(lowerBound) || recordTime.isAfter(upperBound))\n+      Left(s\"Record time $ledgerTime outside of range [$lowerBound, $upperBound]\")\n     else\n       Right(())\n   }\n \n+  private[state] def minRecordTime(ledgerTime: Instant): Instant =\n+    ledgerTime.minus(minSkew)\n+\n+  private[state] def maxRecordTime(ledgerTime: Instant): Instant =\n+    ledgerTime.plus(maxSkew)"
  },
  {
    "id" : "326d304f-e6a6-4944-8e36-6f6c124f518c",
    "prId" : 4558,
    "comments" : [
      {
        "id" : "087e2bfd-246f-42fc-9d99-63324e425315",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n    require(!avgTransactionLatency.isNegative, \"Negative average transaction latency\")\r\n```",
        "createdAt" : "2020-02-18T12:56:24Z",
        "updatedAt" : "2020-02-18T21:10:03Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c24fe9b1f64bcbfa0b0d58eeec235081a161b919",
    "line" : null,
    "diffHunk" : "@@ -57,16 +68,35 @@ object TimeModel {\n     * Serious applications (viz. ledger) should probably specify their own TimeModel.\n     */\n   val reasonableDefault: TimeModel =\n-    TimeModel(Duration.ofSeconds(1L), Duration.ofSeconds(1L), Duration.ofSeconds(30L)).get\n+    TimeModel(\n+      minTransactionLatency = Duration.ofSeconds(1L),\n+      maxClockSkew = Duration.ofSeconds(1L),\n+      maxTtl = Duration.ofSeconds(30L),\n+      avgTransactionLatency = Duration.ofSeconds(0L),\n+      minSkew = Duration.ofSeconds(30L),\n+      maxSkew = Duration.ofSeconds(30L),\n+    ).get\n \n   def apply(\n       minTransactionLatency: Duration,\n       maxClockSkew: Duration,\n-      maxTtl: Duration): Try[TimeModel] = Try {\n+      maxTtl: Duration,\n+      avgTransactionLatency: Duration,\n+      minSkew: Duration,\n+      maxSkew: Duration): Try[TimeModel] = Try {\n     require(!minTransactionLatency.isNegative, \"Negative min transaction latency\")\n     require(!maxTtl.isNegative, \"Negative max TTL\")\n     require(!maxClockSkew.isNegative, \"Negative max clock skew\")\n     require(!maxTtl.minus(maxClockSkew).isNegative, \"Max TTL must be greater than max clock skew\")\n-    new TimeModel(minTransactionLatency, maxClockSkew, maxTtl)\n+    require(!minSkew.isNegative, \"Negative average transaction latency\")"
  },
  {
    "id" : "fe8b300f-2cf7-4a00-bba7-94c53165ae70",
    "prId" : 1193,
    "comments" : [
      {
        "id" : "29950c73-5088-40d3-b3d3-3d529193d265",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "what do you think about just having the \"TimeModel\" data here and have the checks separate from it? e.g. https://github.com/digital-asset/daml/blob/master/ledger/participant-state/kvutils/src/main/protobuf/daml_kvutils.proto#L127.",
        "createdAt" : "2019-05-16T14:27:28Z",
        "updatedAt" : "2019-05-17T08:14:21Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c5ab09f2-f247-4eff-9968-d9a54d058112",
        "parentId" : "29950c73-5088-40d3-b3d3-3d529193d265",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "good idea, will do that.",
        "createdAt" : "2019-05-17T06:33:43Z",
        "updatedAt" : "2019-05-17T08:14:21Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b1821dbc0a9cd4b31f942d66ff76647c601cfcfb",
    "line" : 32,
    "diffHunk" : "@@ -0,0 +1,43 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.v1\n+\n+import java.time.{Duration, Instant}\n+\n+trait TimeModel {\n+\n+  //TODO docs\n+  def minTransactionLatency: Duration\n+\n+  def maxClockSkew: Duration\n+\n+  def minTtl: Duration\n+\n+  def maxTtl: Duration\n+\n+  /**\n+    * Validates that the given ledger effective time is within an acceptable time window of the current system time.\n+    *\n+    * @param currentTime              the current time\n+    * @param givenLedgerEffectiveTime The ledger effective time to validate.\n+    * @param givenMaximumRecordTime   The maximum record time to validate.\n+    * @return true if successful\n+    */\n+  def checkLet("
  }
]