[
  {
    "id" : "6244193e-2184-451b-9e5a-39e252a6cefb",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "c1bc607e-1911-4dee-8c0e-9008af68c408",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`getEnvironmentVariable`",
        "createdAt" : "2020-10-14T08:22:44Z",
        "updatedAt" : "2020-10-14T08:25:27Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : 4,
    "diffHunk" : "@@ -75,8 +75,9 @@ object Config {\n       extraOptions: OptionParser[Config[Extra]] => Unit,\n       defaultExtra: Extra,\n       args: Seq[String],\n+      getEnvVar: String => Option[String] = sys.env.get(_),"
  },
  {
    "id" : "75d504fd-9673-430d-b531-5218973d8098",
    "prId" : 7574,
    "comments" : [
      {
        "id" : "65bb8e82-b2f5-4f66-b8e4-f6415b0b4fdc",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I assume that two `false`s here would make no sense, right? Would it be better to have an enumeration of cases and choose from those?\r\n\r\nProbably you can extend `Mode` to have `RunFullParticipant`, `RunIndexerOnly` and `RunApiServerOnly` and have a CLI option that reflects that, like `--mode=[full,indexer-only,api-server-only]`, with `full` being the default.",
        "createdAt" : "2020-10-05T20:22:13Z",
        "updatedAt" : "2020-10-12T06:42:44Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5bee0e65d693c31ebb3a7b2d736ad4c23c132af6",
    "line" : null,
    "diffHunk" : "@@ -58,6 +60,8 @@ object Config {\n       seeding = Seeding.Strong,\n       metricsReporter = None,\n       metricsReportingInterval = Duration.ofSeconds(10),\n+      noIndexer = false,\n+      noLedgerApiServer = false,"
  },
  {
    "id" : "b3caea3b-61a3-4f37-8fc7-37e3530641c6",
    "prId" : 7574,
    "comments" : [
      {
        "id" : "33ccd5a7-a57a-47e1-8605-27da702022b1",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I would expect these options to be at the participant level, not for all participants. I'd make it part of the `--participant` option.",
        "createdAt" : "2020-10-06T07:32:52Z",
        "updatedAt" : "2020-10-12T06:42:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5bee0e65d693c31ebb3a7b2d736ad4c23c132af6",
    "line" : null,
    "diffHunk" : "@@ -199,6 +203,16 @@ object Config {\n         .action((interval, config) => config.copy(metricsReportingInterval = interval))\n         .hidden()\n \n+      opt[Boolean](\"no-indexer\")\n+        .optional()\n+        .text(\"Do not start any indexer.\")\n+        .action((enabled, config) => config.copy(noIndexer = enabled))\n+\n+      opt[Boolean](\"no-ledger-api-server\")\n+        .optional()\n+        .text(\"Do not start any ledger API server.\")\n+        .action((enabled, config) => config.copy(noLedgerApiServer = enabled))"
  },
  {
    "id" : "bc1e3863-bc64-4532-97c4-5ecdd833e41b",
    "prId" : 7574,
    "comments" : [
      {
        "id" : "94685440-29f6-47d5-b434-76a9b094e281",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`mode` is an overloaded term. I'd suggest making it a bit more explicit, e.g., `run-mode`, `server-mode` or similar.",
        "createdAt" : "2020-10-07T13:21:17Z",
        "updatedAt" : "2020-10-12T06:42:44Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5bee0e65d693c31ebb3a7b2d736ad4c23c132af6",
    "line" : null,
    "diffHunk" : "@@ -94,23 +94,33 @@ object Config {\n \n       opt[Map[String, String]](\"participant\")\n         .unbounded()\n-        .text(\"The configuration of a participant. Comma-separated pairs in the form key=value, with mandatory keys: [participant-id, port] and optional keys [address, port-file, server-jdbc-url, max-commands-in-flight]\")\n+        .text(\"The configuration of a participant. Comma-separated pairs in the form key=value, with mandatory keys: [participant-id, port] and optional keys [address, port-file, server-jdbc-url, max-commands-in-flight, mode]\")\n         .action((kv, config) => {\n           val participantId = ParticipantId.assertFromString(kv(\"participant-id\"))\n           val port = Port(kv(\"port\").toInt)\n           val address = kv.get(\"address\")\n           val portFile = kv.get(\"port-file\").map(new File(_).toPath)\n+          val mode: ParticipantMode = kv.get(\"mode\") match {"
  },
  {
    "id" : "ded40e38-ba30-4bcd-b555-72d024ae6cde",
    "prId" : 7460,
    "comments" : [
      {
        "id" : "22279a63-b766-43a0-a9a2-51576aa0291a",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I understand from this that the default behavior doesn't change. Is this right?",
        "createdAt" : "2020-09-23T12:19:53Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7dbed7cd-4eed-4b58-9115-65c3a9835582",
        "parentId" : "22279a63-b766-43a0-a9a2-51576aa0291a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Yes. I prefer to be on the safe side.",
        "createdAt" : "2020-09-24T08:02:48Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0a4599bcbf38cacac4088b9b73021b01c997c440",
    "line" : null,
    "diffHunk" : "@@ -59,6 +61,7 @@ object Config {\n       metricsReporter = None,\n       metricsReportingInterval = Duration.ofSeconds(10),\n       extra = extra,\n+      packageValidation = CommitPackageValidationMode.Postcommit,"
  },
  {
    "id" : "a484df1c-d2ae-4ccc-929a-d9e94708ae75",
    "prId" : 6721,
    "comments" : [
      {
        "id" : "764650d8-2593-485d-9b9c-a04488b41ebd",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Does this change the behavior when using `daml sandbox`? If so, this is probably worth mentioning in a change log entry.",
        "createdAt" : "2020-07-15T09:58:36Z",
        "updatedAt" : "2020-07-16T15:42:46Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6c56e86f-1991-4254-9792-7a6306b04186",
        "parentId" : "764650d8-2593-485d-9b9c-a04488b41ebd",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "No, options are optional by default, but since other parameters had `optional()` explicit, I added it here as well.",
        "createdAt" : "2020-07-15T10:20:12Z",
        "updatedAt" : "2020-07-16T15:42:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9317365d3249dfafc8dea2cd1562eb4cf29b0de3",
    "line" : 33,
    "diffHunk" : "@@ -123,9 +124,9 @@ object Config {\n           config.copy(participants = config.participants :+ partConfig)\n         })\n       opt[String](\"ledger-id\")\n-        .text(\n-          \"The ID of the ledger. This must be the same each time the ledger is started. Defaults to a random UUID.\")\n-        .action((ledgerId, config) => config.copy(ledgerId = Some(ledgerId)))\n+        .optional()"
  },
  {
    "id" : "de495774-1206-44ef-b6b5-f3d826ff059f",
    "prId" : 6052,
    "comments" : [
      {
        "id" : "4e2aee47-2d69-42f4-815a-105bac055e62",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I understand that it's not that easy to get the actual size occupied by individual entries, but I'm not a big fan of having different units for cache configuration.",
        "createdAt" : "2020-05-20T14:44:20Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ba5ae49b-740e-4aa8-80ec-d9f5b80e81e6",
        "parentId" : "4e2aee47-2d69-42f4-815a-105bac055e62",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Can we leave it out as an improvement? I'd like to get a sense of the overhead of doing it. Considering it's an opt-in feature and the size should be around the thousand of entries tops, I think it's not necessarily that bad.",
        "createdAt" : "2020-05-20T15:04:11Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "56e760af-51f2-4bee-97f8-636811dcf64c",
        "parentId" : "4e2aee47-2d69-42f4-815a-105bac055e62",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I agree with @gerolf-da that having a consistent cache weighting approach helps, however, as the first iteration it's fine to use element counts (note that doing it properly requires extending the current caffeine cache wrapper).",
        "createdAt" : "2020-05-25T13:53:09Z",
        "updatedAt" : "2020-05-26T07:28:28Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9945ea44fabe5fe18e6608839b2ce57f04cbb4ee",
    "line" : 23,
    "diffHunk" : "@@ -156,6 +158,14 @@ object Config {\n           config.copy(stateValueCache =\n             config.stateValueCache.copy(maximumWeight = maximumStateValueCacheSize * 1024 * 1024)))\n \n+      opt[Long](\"max-lf-value-translation-cache-entries\")\n+        .optional()\n+        .text(\n+          s\"The maximum size of the cache used to deserialize DAML-LF values, in number of allowed entries. By default, nothing is cached.\")"
  },
  {
    "id" : "acdcaa3b-e958-478c-b512-203d53d24d34",
    "prId" : 4674,
    "comments" : [
      {
        "id" : "64e73027-13d7-4ca4-87e5-d1daca8f5951",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Perhaps `defaultIndexJdbcUrl` to make it clear it's not for the ledger?",
        "createdAt" : "2020-02-25T12:53:46Z",
        "updatedAt" : "2020-02-26T13:34:02Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "882e1f83-4bcf-418b-bcfb-f777ba498248",
        "parentId" : "64e73027-13d7-4ca4-87e5-d1daca8f5951",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Great suggestion. Thank you.",
        "createdAt" : "2020-02-25T14:20:50Z",
        "updatedAt" : "2020-02-26T13:34:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "357d1c3ef2feb3fb5236e1f22c00afbf960d0ce6",
    "line" : null,
    "diffHunk" : "@@ -7,35 +7,45 @@ import java.io.File\n import java.nio.file.Path\n \n import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.digitalasset.ledger.api.tls.TlsConfiguration\n import com.digitalasset.resources.ProgramResource.SuppressedStartupException\n import com.digitalasset.resources.ResourceOwner\n import scopt.OptionParser\n \n case class Config[Extra](\n+    ledgerId: Option[String],\n+    archiveFiles: Seq[Path],\n+    tlsConfig: Option[TlsConfiguration],\n+    participants: Seq[ParticipantConfig],\n+    extra: Extra,\n+) {\n+  def withTlsConfig(modify: TlsConfiguration => TlsConfiguration): Config[Extra] =\n+    copy(tlsConfig = Some(modify(tlsConfig.getOrElse(TlsConfiguration.Empty))))\n+}\n+\n+case class ParticipantConfig(\n     participantId: ParticipantId,\n     address: Option[String],\n     port: Int,\n     portFile: Option[Path],\n     serverJdbcUrl: String,\n-    ledgerId: Option[String],\n-    archiveFiles: Seq[Path],\n     allowExistingSchemaForIndex: Boolean,\n-    extra: Extra,\n )\n \n+object ParticipantConfig {\n+  def defaultJdbcUrl(participantId: ParticipantId): String ="
  },
  {
    "id" : "bd6fabbf-ad17-43a4-baaf-f965a1bbbcfe",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "9cf5208e-3c9d-476d-858d-7c904eed2321",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This now requires a SQL backend as the kvutil ledger. Could the Runner then still be used with another implementation? Maybe `Runner` is not supposed to be used that way, then it's fine.",
        "createdAt" : "2020-01-22T12:44:07Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f6ba3998-5515-4272-bbed-9a4f72205364",
        "parentId" : "9cf5208e-3c9d-476d-858d-7c904eed2321",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "It defaults to H2 in memory, just as it did before; this is how _ledger-on-memory_ works.",
        "createdAt" : "2020-01-22T12:50:03Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9ccf73fd-46ce-4109-9d7c-aca99091ec9e",
        "parentId" : "9cf5208e-3c9d-476d-858d-7c904eed2321",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Right. I think it's not clear to me what the target of the `kvutils/app` folder is. On the surface it seems very general and not tied to a specific `ledger-on-...` implementation.",
        "createdAt" : "2020-01-22T13:48:49Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "211b621e-5505-4eb1-9321-36a58ad95856",
        "parentId" : "9cf5208e-3c9d-476d-858d-7c904eed2321",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "It is, absolutely. But it is tied to _kvutils_, the Ledger API Server, and the Indexer; for the API Server/Indexer, it'll use H2 by default.",
        "createdAt" : "2020-01-22T14:09:49Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : 4,
    "diffHunk" : "@@ -14,6 +14,8 @@ case class Config[Extra](\n     address: Option[String],\n     port: Int,\n     portFile: Option[Path],\n+    serverJdbcUrl: String,"
  },
  {
    "id" : "b94cafe3-177b-47fd-b08d-f541ff1c87f4",
    "prId" : 3930,
    "comments" : [
      {
        "id" : "e3d8b95e-23e7-4c6a-8260-972d0d0f9da6",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "... The server starts with ...",
        "createdAt" : "2020-01-07T09:30:49Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6dcd869a792cd3f93481b15fa023552da27cb7f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.app\n+\n+import java.io.File\n+import java.nio.file.Path\n+\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import scopt.OptionParser\n+\n+case class Config(\n+    participantId: ParticipantId,\n+    port: Int,\n+    portFile: Option[Path],\n+    archiveFiles: Seq[Path],\n+)\n+\n+object Config {\n+  val DefaultMaxInboundMessageSize: Int = 4 * 1024 * 1024\n+\n+  def default: Config =\n+    Config(\n+      participantId = ParticipantId.assertFromString(\"example\"),\n+      port = 6865,\n+      portFile = None,\n+      archiveFiles = Vector.empty,\n+    )\n+\n+  def parse(name: String, args: Seq[String]): Option[Config] =\n+    parser(name).parse(args, default)\n+\n+  private def parser(name: String): OptionParser[Config] = new scopt.OptionParser[Config](name) {\n+    head(name)\n+\n+    opt[String](name = \"participant-id\")\n+      .optional()\n+      .text(\"The participant ID given to all components of the ledger API server.\")\n+      .action((participantId, config) =>\n+        config.copy(participantId = ParticipantId.assertFromString(participantId)))\n+\n+    opt[Int](\"port\")\n+      .optional()\n+      .text(\"The port on which to run the ledger API server.\")\n+      .action((port, config) => config.copy(port = port))\n+      .withFallback(() => 6865)\n+\n+    opt[File](\"port-file\")\n+      .optional()\n+      .text(\"File to write the allocated port number to. Used to inform clients in CI about the allocated port.\")\n+      .action((file, config) => config.copy(portFile = Some(file.toPath)))\n+\n+    arg[File](\"<archive>...\")\n+      .optional()\n+      .unbounded()\n+      .text(\"DAR files to load. Scenarios are ignored. The servers starts with an empty ledger by default.\")"
  },
  {
    "id" : "d526bf03-1be6-4d81-a706-6f2f6c32c1b2",
    "prId" : 3930,
    "comments" : [
      {
        "id" : "3959857d-e47b-4a0a-91db-b64f85a99695",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I assume this will be parameterizable (i.e., the runner will support not just the in-memory ledger). ",
        "createdAt" : "2020-01-07T09:37:32Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5bdad317-8348-4dba-be5f-9fefc4eb9062",
        "parentId" : "3959857d-e47b-4a0a-91db-b64f85a99695",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I'm not sure what \"Runs the ledger as a service\" means in general in this context.",
        "createdAt" : "2020-01-07T10:42:38Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f8ae0bb1-4f12-4a0a-9172-9280017d78bd",
        "parentId" : "3959857d-e47b-4a0a-91db-b64f85a99695",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Fixed using `$name`.",
        "createdAt" : "2020-01-13T09:16:11Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6dcd869a792cd3f93481b15fa023552da27cb7f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.app\n+\n+import java.io.File\n+import java.nio.file.Path\n+\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import scopt.OptionParser\n+\n+case class Config(\n+    participantId: ParticipantId,\n+    port: Int,\n+    portFile: Option[Path],\n+    archiveFiles: Seq[Path],\n+)\n+\n+object Config {\n+  val DefaultMaxInboundMessageSize: Int = 4 * 1024 * 1024\n+\n+  def default: Config =\n+    Config(\n+      participantId = ParticipantId.assertFromString(\"example\"),\n+      port = 6865,\n+      portFile = None,\n+      archiveFiles = Vector.empty,\n+    )\n+\n+  def parse(name: String, args: Seq[String]): Option[Config] =\n+    parser(name).parse(args, default)\n+\n+  private def parser(name: String): OptionParser[Config] = new scopt.OptionParser[Config](name) {\n+    head(name)\n+\n+    opt[String](name = \"participant-id\")\n+      .optional()\n+      .text(\"The participant ID given to all components of the ledger API server.\")\n+      .action((participantId, config) =>\n+        config.copy(participantId = ParticipantId.assertFromString(participantId)))\n+\n+    opt[Int](\"port\")\n+      .optional()\n+      .text(\"The port on which to run the ledger API server.\")\n+      .action((port, config) => config.copy(port = port))\n+      .withFallback(() => 6865)\n+\n+    opt[File](\"port-file\")\n+      .optional()\n+      .text(\"File to write the allocated port number to. Used to inform clients in CI about the allocated port.\")\n+      .action((file, config) => config.copy(portFile = Some(file.toPath)))\n+\n+    arg[File](\"<archive>...\")\n+      .optional()\n+      .unbounded()\n+      .text(\"DAR files to load. Scenarios are ignored. The servers starts with an empty ledger by default.\")\n+      .action((file, config) => config.copy(archiveFiles = config.archiveFiles :+ file.toPath))\n+\n+    help(\"help\").text(\"Runs the in-memory ledger as a service.\")"
  },
  {
    "id" : "f74c1ad0-8380-4d38-ad08-8c246f96b5d0",
    "prId" : 3930,
    "comments" : [
      {
        "id" : "ce4f05fb-884f-4196-b3cf-28dd2bda1eaa",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n      .text(\"DAR files to load. Scenarios are ignored. The server starts with an empty ledger by default.\")\r\n```\r\nWhat @miklos-da said, in suggestion format. :wink:\r\n\r\nMore on suggestions [at point 6 in this article](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).",
        "createdAt" : "2020-01-07T10:25:26Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6dcd869a792cd3f93481b15fa023552da27cb7f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.app\n+\n+import java.io.File\n+import java.nio.file.Path\n+\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import scopt.OptionParser\n+\n+case class Config(\n+    participantId: ParticipantId,\n+    port: Int,\n+    portFile: Option[Path],\n+    archiveFiles: Seq[Path],\n+)\n+\n+object Config {\n+  val DefaultMaxInboundMessageSize: Int = 4 * 1024 * 1024\n+\n+  def default: Config =\n+    Config(\n+      participantId = ParticipantId.assertFromString(\"example\"),\n+      port = 6865,\n+      portFile = None,\n+      archiveFiles = Vector.empty,\n+    )\n+\n+  def parse(name: String, args: Seq[String]): Option[Config] =\n+    parser(name).parse(args, default)\n+\n+  private def parser(name: String): OptionParser[Config] = new scopt.OptionParser[Config](name) {\n+    head(name)\n+\n+    opt[String](name = \"participant-id\")\n+      .optional()\n+      .text(\"The participant ID given to all components of the ledger API server.\")\n+      .action((participantId, config) =>\n+        config.copy(participantId = ParticipantId.assertFromString(participantId)))\n+\n+    opt[Int](\"port\")\n+      .optional()\n+      .text(\"The port on which to run the ledger API server.\")\n+      .action((port, config) => config.copy(port = port))\n+      .withFallback(() => 6865)\n+\n+    opt[File](\"port-file\")\n+      .optional()\n+      .text(\"File to write the allocated port number to. Used to inform clients in CI about the allocated port.\")\n+      .action((file, config) => config.copy(portFile = Some(file.toPath)))\n+\n+    arg[File](\"<archive>...\")\n+      .optional()\n+      .unbounded()\n+      .text(\"DAR files to load. Scenarios are ignored. The servers starts with an empty ledger by default.\")"
  },
  {
    "id" : "36b5d182-2e60-4363-802d-0b08e77ccba4",
    "prId" : 3930,
    "comments" : [
      {
        "id" : "6c315cc0-0365-4914-96df-e1a5aaec7b67",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      .text(\"DAR files to load. Scenarios are ignored. The server starts with an empty ledger by default.\")\r\n```",
        "createdAt" : "2020-01-07T10:41:40Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6dcd869a792cd3f93481b15fa023552da27cb7f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.app\n+\n+import java.io.File\n+import java.nio.file.Path\n+\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import scopt.OptionParser\n+\n+case class Config(\n+    participantId: ParticipantId,\n+    port: Int,\n+    portFile: Option[Path],\n+    archiveFiles: Seq[Path],\n+)\n+\n+object Config {\n+  val DefaultMaxInboundMessageSize: Int = 4 * 1024 * 1024\n+\n+  def default: Config =\n+    Config(\n+      participantId = ParticipantId.assertFromString(\"example\"),\n+      port = 6865,\n+      portFile = None,\n+      archiveFiles = Vector.empty,\n+    )\n+\n+  def parse(name: String, args: Seq[String]): Option[Config] =\n+    parser(name).parse(args, default)\n+\n+  private def parser(name: String): OptionParser[Config] = new scopt.OptionParser[Config](name) {\n+    head(name)\n+\n+    opt[String](name = \"participant-id\")\n+      .optional()\n+      .text(\"The participant ID given to all components of the ledger API server.\")\n+      .action((participantId, config) =>\n+        config.copy(participantId = ParticipantId.assertFromString(participantId)))\n+\n+    opt[Int](\"port\")\n+      .optional()\n+      .text(\"The port on which to run the ledger API server.\")\n+      .action((port, config) => config.copy(port = port))\n+      .withFallback(() => 6865)\n+\n+    opt[File](\"port-file\")\n+      .optional()\n+      .text(\"File to write the allocated port number to. Used to inform clients in CI about the allocated port.\")\n+      .action((file, config) => config.copy(portFile = Some(file.toPath)))\n+\n+    arg[File](\"<archive>...\")\n+      .optional()\n+      .unbounded()\n+      .text(\"DAR files to load. Scenarios are ignored. The servers starts with an empty ledger by default.\")"
  }
]