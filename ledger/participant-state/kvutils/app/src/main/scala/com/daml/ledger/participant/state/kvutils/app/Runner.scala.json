[
  {
    "id" : "89b4459d-3b92-4eb7-b393-8e067d5c7920",
    "prId" : 7574,
    "comments" : [
      {
        "id" : "ebedf746-3b71-4493-a639-38b1122a020b",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think you can use `Resource.unit` here. (If it doesn't exist, add it. :stuck_out_tongue:)",
        "createdAt" : "2020-10-06T10:54:27Z",
        "updatedAt" : "2020-10-12T06:42:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5bee0e65d693c31ebb3a7b2d736ad4c23c132af6",
    "line" : null,
    "diffHunk" : "@@ -120,33 +120,37 @@ final class Runner[T <: ReadWriteService, Extra](\n             )\n             _ <- Resource.fromFuture(\n               Future.sequence(config.archiveFiles.map(uploadDar(_, writeService))))\n-            _ <- if (config.noIndexer)\n-              Resource.successful(())\n-            else\n-              new StandaloneIndexerServer(\n-                readService = readService,\n-                config = factory.indexerConfig(participantConfig, config),\n-                metrics = metrics,\n-                lfValueTranslationCache = lfValueTranslationCache,\n-              ).acquire()\n-            _ <- if (config.noLedgerApiServer)\n-              Resource.successful(())\n-            else\n-              new StandaloneApiServer(\n-                ledgerId = config.ledgerId,\n-                config = factory.apiServerConfig(participantConfig, config),\n-                commandConfig = factory.commandConfig(participantConfig, config),\n-                partyConfig = factory.partyConfig(config),\n-                ledgerConfig = factory.ledgerConfig(config),\n-                optWriteService = Some(writeService),\n-                authService = factory.authService(config),\n-                healthChecks = healthChecks,\n-                metrics = metrics,\n-                timeServiceBackend = factory.timeServiceBackend(config),\n-                otherInterceptors = factory.interceptors(config),\n-                engine = sharedEngine,\n-                lfValueTranslationCache = lfValueTranslationCache,\n-              ).acquire()\n+            _ <- participantConfig.mode match {\n+              case ParticipantMode.Full | ParticipantMode.Indexer =>\n+                new StandaloneIndexerServer(\n+                  readService = readService,\n+                  config = factory.indexerConfig(participantConfig, config),\n+                  metrics = metrics,\n+                  lfValueTranslationCache = lfValueTranslationCache,\n+                ).acquire()\n+              case ParticipantMode.LedgerApiServer =>\n+                Resource.successful(())"
  },
  {
    "id" : "ff48ec6b-1c83-488a-bfed-149185405700",
    "prId" : 7574,
    "comments" : [
      {
        "id" : "1b52608f-09a3-45a8-abc8-268090f6c058",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "And here.",
        "createdAt" : "2020-10-06T10:54:38Z",
        "updatedAt" : "2020-10-12T06:42:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5bee0e65d693c31ebb3a7b2d736ad4c23c132af6",
    "line" : null,
    "diffHunk" : "@@ -120,27 +120,37 @@ final class Runner[T <: ReadWriteService, Extra](\n             )\n             _ <- Resource.fromFuture(\n               Future.sequence(config.archiveFiles.map(uploadDar(_, writeService))))\n-            _ <- new StandaloneIndexerServer(\n-              readService = readService,\n-              config = factory.indexerConfig(participantConfig, config),\n-              metrics = metrics,\n-              lfValueTranslationCache = lfValueTranslationCache,\n-            ).acquire()\n-            _ <- new StandaloneApiServer(\n-              ledgerId = config.ledgerId,\n-              config = factory.apiServerConfig(participantConfig, config),\n-              commandConfig = factory.commandConfig(participantConfig, config),\n-              partyConfig = factory.partyConfig(config),\n-              ledgerConfig = factory.ledgerConfig(config),\n-              optWriteService = Some(writeService),\n-              authService = factory.authService(config),\n-              healthChecks = healthChecks,\n-              metrics = metrics,\n-              timeServiceBackend = factory.timeServiceBackend(config),\n-              otherInterceptors = factory.interceptors(config),\n-              engine = sharedEngine,\n-              lfValueTranslationCache = lfValueTranslationCache,\n-            ).acquire()\n+            _ <- participantConfig.mode match {\n+              case ParticipantMode.Full | ParticipantMode.Indexer =>\n+                new StandaloneIndexerServer(\n+                  readService = readService,\n+                  config = factory.indexerConfig(participantConfig, config),\n+                  metrics = metrics,\n+                  lfValueTranslationCache = lfValueTranslationCache,\n+                ).acquire()\n+              case ParticipantMode.LedgerApiServer =>\n+                Resource.successful(())\n+            }\n+            _ <- participantConfig.mode match {\n+              case ParticipantMode.Full | ParticipantMode.LedgerApiServer =>\n+                new StandaloneApiServer(\n+                  ledgerId = config.ledgerId,\n+                  config = factory.apiServerConfig(participantConfig, config),\n+                  commandConfig = factory.commandConfig(participantConfig, config),\n+                  partyConfig = factory.partyConfig(config),\n+                  ledgerConfig = factory.ledgerConfig(config),\n+                  optWriteService = Some(writeService),\n+                  authService = factory.authService(config),\n+                  healthChecks = healthChecks,\n+                  metrics = metrics,\n+                  timeServiceBackend = factory.timeServiceBackend(config),\n+                  otherInterceptors = factory.interceptors(config),\n+                  engine = sharedEngine,\n+                  lfValueTranslationCache = lfValueTranslationCache,\n+                ).acquire()\n+              case ParticipantMode.Indexer =>\n+                Resource.successful(())"
  },
  {
    "id" : "c9d40a1a-66ea-4b17-bae0-faa4513e1363",
    "prId" : 7224,
    "comments" : [
      {
        "id" : "b36cb6d8-dec8-4b7f-8b8d-45967fdf9163",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Are these `warn` for a specific reason or could they be turned into `info`?",
        "createdAt" : "2020-08-25T13:36:04Z",
        "updatedAt" : "2020-08-25T14:38:23Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "413f5404-381d-4afb-9359-13b21854aef9",
        "parentId" : "b36cb6d8-dec8-4b7f-8b8d-45967fdf9163",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would prefer avoiding, as much as possible, user confusion due to badly configured logging. It can also be used to ensure that the output stands out. Since the only thing this run mode does is print those four lines and exit, I don't see a specific issue in leaving these at `warn` level.",
        "createdAt" : "2020-08-25T14:42:55Z",
        "updatedAt" : "2020-08-25T14:42:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a85b4dbc-dbbb-46a3-b904-b28e85f616bd",
        "parentId" : "b36cb6d8-dec8-4b7f-8b8d-45967fdf9163",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "No real issue indeed, it only creates a moment of confusion for users that see the log for the first time and read WARN. It's rather more of a matter of consistency, i.e. \"info\" should be the threshold used for information (also, log configuration can be so broken, it doesn't even print warnings).",
        "createdAt" : "2020-08-25T14:55:15Z",
        "updatedAt" : "2020-08-25T14:55:15Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "29b289de696f9165d3b4733f6fb8fc502435ddd0",
    "line" : 9,
    "diffHunk" : "@@ -60,10 +60,9 @@ final class Runner[T <: ReadWriteService, Extra](\n         IndexMetadata.read(jdbcUrl).onComplete {\n           case Failure(exception) =>\n             logger.error(\"Error while retrieving the index metadata\", exception)\n-          case Success(None) =>\n-            logger.warn(\"The ledger is not initialized, no metadata to read\")\n-          case Success(Some(metadata)) =>\n+          case Success(metadata) =>\n             logger.warn(s\"ledger_id: ${metadata.ledgerId}\")\n+            logger.warn(s\"participant_id: ${metadata.participantId}\")"
  },
  {
    "id" : "e0f28a98-09b6-4018-8272-caa4229aa60e",
    "prId" : 6816,
    "comments" : [
      {
        "id" : "5c7ee005-fb3d-4eba-8602-bb153d436eb9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why are you pushing unrelated changes here?",
        "createdAt" : "2020-07-21T15:42:54Z",
        "updatedAt" : "2020-07-21T15:45:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f792907136449a8fe491394a12a95fc92e96047a",
    "line" : null,
    "diffHunk" : "@@ -43,13 +43,11 @@ final class Runner[T <: ReadWriteService, Extra](\n         \"[^A-Za-z0-9_\\\\-]\".r.replaceAllIn(name.toLowerCase, \"-\"))\n       implicit val materializer: Materializer = Materializer(actorSystem)\n \n-      // FIXME: https://github.com/digital-asset/daml/issues/5164\n-      // This should be made configurable\n-      val engineConfig = Engine.DevConfig\n-\n       // share engine between the kvutils committer backend and the ledger api server\n       // this avoids duplicate compilation of packages as well as keeping them in memory twice\n-      val sharedEngine = new Engine(engineConfig)\n+      // FIXME: https://github.com/digital-asset/daml/issues/5164"
  },
  {
    "id" : "16f8a247-08f2-42f2-a86c-86363f7cc46d",
    "prId" : 6428,
    "comments" : [
      {
        "id" : "eb38b9f7-4c49-4902-a917-cabce66aac1b",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I'd suggest `Engine()` to return the default configuration -- this way you won't have to change `kvutils` or other code.",
        "createdAt" : "2020-06-19T14:13:18Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0f86419a-eb64-485d-9ae8-e942cb1c162a",
        "parentId" : "eb38b9f7-4c49-4902-a917-cabce66aac1b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "All the purpose of #5164 is that each implementation of Ledger have to specify *explicitly* which version it allows, so when we introduce a new version in the engine this does not impact the ledger implementations. \r\nFor this reason we definitively do not want a default constructor.  \r\n\r\n",
        "createdAt" : "2020-06-19T15:01:50Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d2832ff8457fca90adb26dc3d71314a458f268fd",
    "line" : 5,
    "diffHunk" : "@@ -43,9 +43,13 @@ final class Runner[T <: ReadWriteService, Extra](\n         \"[^A-Za-z0-9_\\\\-]\".r.replaceAllIn(name.toLowerCase, \"-\"))\n       implicit val materializer: Materializer = Materializer(actorSystem)\n \n+      // FIXME: https://github.com/digital-asset/daml/issues/5164\n+      // This should be made configurable"
  },
  {
    "id" : "1abb50a7-98c7-4c85-9700-0d2552174c87",
    "prId" : 5728,
    "comments" : [
      {
        "id" : "985ca824-db33-4fcb-b198-652407f90c8d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      val sharedEngine = Engine()\r\n```",
        "createdAt" : "2020-04-30T08:19:06Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "999291e9-1b6c-4e1e-a764-720a5a4c61c3",
        "parentId" : "985ca824-db33-4fcb-b198-652407f90c8d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in feafc56.",
        "createdAt" : "2020-04-30T08:50:06Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : null,
    "diffHunk" : "@@ -46,6 +47,10 @@ final class Runner[T <: ReadWriteService, Extra](\n         \"[^A-Za-z0-9_\\\\-]\".r.replaceAllIn(name.toLowerCase, \"-\"))\n       implicit val materializer: Materializer = Materializer(actorSystem)\n \n+      // share engine between the kvutils committer backend and the ledger api server\n+      // this avoids duplicate compilation of packages as well as keeping them in memory twice\n+      val engine = Engine()"
  },
  {
    "id" : "eddcd653-565f-43da-9a76-3c143c5b9af1",
    "prId" : 4674,
    "comments" : [
      {
        "id" : "2d57f329-db02-46af-a521-54ba11afd051",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Debugging?",
        "createdAt" : "2020-02-25T12:50:21Z",
        "updatedAt" : "2020-02-26T13:34:02Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c0f6310b-9d5d-4203-9f19-37b340dd5f4c",
        "parentId" : "2d57f329-db02-46af-a521-54ba11afd051",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "yikes, I clearly need something like `remy.log`. thanks",
        "createdAt" : "2020-02-25T14:17:54Z",
        "updatedAt" : "2020-02-26T13:34:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "357d1c3ef2feb3fb5236e1f22c00afbf960d0ce6",
    "line" : null,
    "diffHunk" : "@@ -36,6 +36,7 @@ class Runner[T <: KeyValueLedger, Extra](name: String, factory: LedgerFactory[T,\n       .flatMap(owner)\n \n   def owner(originalConfig: Config[Extra]): ResourceOwner[Unit] = {\n+    println(s\"starting runner: ${originalConfig.participants}\")"
  },
  {
    "id" : "90d9ab76-77ac-4707-aac3-98214d636443",
    "prId" : 4674,
    "comments" : [
      {
        "id" : "8f3d8a3d-20c0-45b0-86fb-31efb8ea5a0d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can you use `ResourceOwner.sequence` here?",
        "createdAt" : "2020-02-25T12:54:35Z",
        "updatedAt" : "2020-02-26T13:34:02Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b0521a24-a8cc-43bf-9375-8e1554b2e3cc",
        "parentId" : "8f3d8a3d-20c0-45b0-86fb-31efb8ea5a0d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "That's much better of course. I honestly didn't think to look for it in `ResourceOwner`, but I actually did think \"if only we had Applicative for resource owner here for sequence...\".",
        "createdAt" : "2020-02-25T14:21:51Z",
        "updatedAt" : "2020-02-26T13:34:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "357d1c3ef2feb3fb5236e1f22c00afbf960d0ce6",
    "line" : null,
    "diffHunk" : "@@ -50,11 +51,21 @@ class Runner[T <: KeyValueLedger, Extra](name: String, factory: LedgerFactory[T,\n         _ <- AkkaResourceOwner.forActorSystem(() => system)\n         _ <- AkkaResourceOwner.forMaterializer(() => materializer)\n \n-        readerWriter <- factory.owner(config.ledgerId, config.participantId, config.extra)\n-        ledger = new KeyValueParticipantState(readerWriter, readerWriter)\n-        _ <- ResourceOwner.forFuture(() =>\n-          Future.sequence(config.archiveFiles.map(uploadDar(_, ledger))))\n-        _ <- startParticipant(config, ledger)\n+        // initialize all configured participants\n+        _ <- config.participants.foldLeft(ResourceOwner.successful(())) {\n+          case (acc, participantConfig) =>\n+            for {\n+              _ <- acc\n+              readerWriter <- factory.owner(\n+                config.ledgerId,\n+                participantConfig.participantId,\n+                config.extra)\n+              ledger = new KeyValueParticipantState(readerWriter, readerWriter)\n+              _ <- ResourceOwner.forFuture(() =>\n+                Future.sequence(config.archiveFiles.map(uploadDar(_, ledger))))\n+              _ <- startParticipant(config, participantConfig, ledger)\n+            } yield ()\n+        }"
  },
  {
    "id" : "43d4a9df-bab2-40ae-b197-61d61b956267",
    "prId" : 4674,
    "comments" : [
      {
        "id" : "75c55d89-5558-49cb-bc15-14501417c2f7",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Do you intend to leave this in here? Shouldn't this be logged instead?",
        "createdAt" : "2020-02-25T12:54:47Z",
        "updatedAt" : "2020-02-26T13:34:02Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "357d1c3ef2feb3fb5236e1f22c00afbf960d0ce6",
    "line" : null,
    "diffHunk" : "@@ -36,6 +36,7 @@ class Runner[T <: KeyValueLedger, Extra](name: String, factory: LedgerFactory[T,\n       .flatMap(owner)\n \n   def owner(originalConfig: Config[Extra]): ResourceOwner[Unit] = {\n+    println(s\"starting runner: ${originalConfig.participants}\")"
  },
  {
    "id" : "c5fe5462-203e-4825-b7d5-725f80d7f5d1",
    "prId" : 4097,
    "comments" : [
      {
        "id" : "6c79fde4-49fb-45eb-b8a4-dcc711558461",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "You missed a few. Try `ag ' ctx: LoggingContext'`.",
        "createdAt" : "2020-01-17T15:06:39Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "593be95c-969e-4646-b9e6-2e8f2ca6cc3b",
        "parentId" : "6c79fde4-49fb-45eb-b8a4-dcc711558461",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ah, yes, thanks.",
        "createdAt" : "2020-01-17T15:24:18Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "759990bf-a1da-4403-a751-e50b9338afff",
        "parentId" : "6c79fde4-49fb-45eb-b8a4-dcc711558461",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4097/commits/f6f0e94ba086d6dee3ad329ba3ba79d09b8d4026",
        "createdAt" : "2020-01-17T17:03:00Z",
        "updatedAt" : "2020-01-21T09:13:27Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "80ef9a78495c345ca3a7442bc7c2397f4901c132",
    "line" : null,
    "diffHunk" : "@@ -85,15 +88,14 @@ class Runner[Extra](name: String, constructor: LedgerFactory[Extra]) {\n   private def startIndexerServer(\n       config: Config[Extra],\n       readService: ReadService,\n-  )(implicit executionContext: ExecutionContext): Resource[Unit] =\n+  )(implicit executionContext: ExecutionContext, ctx: LoggingContext): Resource[Unit] ="
  },
  {
    "id" : "b75b9fae-85af-4736-a546-51a4ad6e3ebd",
    "prId" : 3930,
    "comments" : [
      {
        "id" : "250886cd-89d6-40ee-8f53-e256e1fe8185",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Safest bet is to use `URLEncoder`.",
        "createdAt" : "2020-01-07T10:49:23Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "424a4739-38d6-408b-9961-3d0d5c16f058",
        "parentId" : "250886cd-89d6-40ee-8f53-e256e1fe8185",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "This seems to encode spaces to `+`, which is still invalid.",
        "createdAt" : "2020-01-13T08:41:13Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e6dcd869a792cd3f93481b15fa023552da27cb7f",
    "line" : 41,
    "diffHunk" : "@@ -0,0 +1,120 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.app\n+\n+import java.util.UUID\n+\n+import akka.actor.ActorSystem\n+import akka.stream.Materializer\n+import com.codahale.metrics.SharedMetricRegistries\n+import com.daml.ledger.participant.state.kvutils.api.KeyValueParticipantState\n+import com.daml.ledger.participant.state.v1.{ParticipantId, ReadService, SubmissionId, WriteService}\n+import com.digitalasset.api.util.TimeProvider\n+import com.digitalasset.daml.lf.archive.DarReader\n+import com.digitalasset.daml_lf_dev.DamlLf.Archive\n+import com.digitalasset.ledger.api.auth.{AuthService, AuthServiceWildcard}\n+import com.digitalasset.platform.apiserver.{ApiServerConfig, StandaloneApiServer}\n+import com.digitalasset.platform.common.logging.NamedLoggerFactory\n+import com.digitalasset.platform.indexer.{\n+  IndexerConfig,\n+  IndexerStartupMode,\n+  StandaloneIndexerServer\n+}\n+import com.digitalasset.platform.resources.{Resource, ResourceOwner}\n+import org.slf4j.LoggerFactory\n+\n+import scala.concurrent.duration.DurationInt\n+import scala.concurrent.{Await, ExecutionContext}\n+import scala.util.Try\n+\n+class Runner(name: String, construct: ParticipantId => KeyValueLedger) {\n+  def run(args: Seq[String]): Unit = {\n+    val config = Config.parse(name, args).getOrElse(sys.exit(1))\n+\n+    val logger = LoggerFactory.getLogger(getClass)\n+\n+    implicit val system: ActorSystem = ActorSystem(\n+      \"[^A-Za-z0-9_\\\\-]\".r.replaceAllIn(name.toLowerCase, \"-\"))"
  },
  {
    "id" : "af687db2-a3fb-4086-96be-d208fcd9ef21",
    "prId" : 3930,
    "comments" : [
      {
        "id" : "7739192c-5d0f-4c24-87d4-a9d071928505",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The archives are already uploaded to the ledger, so we don't need to provide them here again.",
        "createdAt" : "2020-01-07T10:54:29Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f17a8a0c-e9c7-4b99-8a82-e25e7959f63a",
        "parentId" : "7739192c-5d0f-4c24-87d4-a9d071928505",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Good point!",
        "createdAt" : "2020-01-13T09:16:29Z",
        "updatedAt" : "2020-01-13T09:32:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2d3080f6-39fd-45f7-a472-ba675eb79357",
        "parentId" : "7739192c-5d0f-4c24-87d4-a9d071928505",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Turns out this is what enables the API server to preload the packages, which is a useful optimization, so leaving it. (Discussed with @gerolf-da.)",
        "createdAt" : "2020-01-13T09:32:56Z",
        "updatedAt" : "2020-01-13T09:32:56Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e6dcd869a792cd3f93481b15fa023552da27cb7f",
    "line" : 109,
    "diffHunk" : "@@ -0,0 +1,120 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.app\n+\n+import java.util.UUID\n+\n+import akka.actor.ActorSystem\n+import akka.stream.Materializer\n+import com.codahale.metrics.SharedMetricRegistries\n+import com.daml.ledger.participant.state.kvutils.api.KeyValueParticipantState\n+import com.daml.ledger.participant.state.v1.{ParticipantId, ReadService, SubmissionId, WriteService}\n+import com.digitalasset.api.util.TimeProvider\n+import com.digitalasset.daml.lf.archive.DarReader\n+import com.digitalasset.daml_lf_dev.DamlLf.Archive\n+import com.digitalasset.ledger.api.auth.{AuthService, AuthServiceWildcard}\n+import com.digitalasset.platform.apiserver.{ApiServerConfig, StandaloneApiServer}\n+import com.digitalasset.platform.common.logging.NamedLoggerFactory\n+import com.digitalasset.platform.indexer.{\n+  IndexerConfig,\n+  IndexerStartupMode,\n+  StandaloneIndexerServer\n+}\n+import com.digitalasset.platform.resources.{Resource, ResourceOwner}\n+import org.slf4j.LoggerFactory\n+\n+import scala.concurrent.duration.DurationInt\n+import scala.concurrent.{Await, ExecutionContext}\n+import scala.util.Try\n+\n+class Runner(name: String, construct: ParticipantId => KeyValueLedger) {\n+  def run(args: Seq[String]): Unit = {\n+    val config = Config.parse(name, args).getOrElse(sys.exit(1))\n+\n+    val logger = LoggerFactory.getLogger(getClass)\n+\n+    implicit val system: ActorSystem = ActorSystem(\n+      \"[^A-Za-z0-9_\\\\-]\".r.replaceAllIn(name.toLowerCase, \"-\"))\n+    implicit val materializer: Materializer = Materializer(system)\n+    implicit val executionContext: ExecutionContext = system.dispatcher\n+\n+    val resource = for {\n+      // Take ownership of the actor system and materializer so they're cleaned up properly.\n+      // This is necessary because we can't declare them as implicits within a `for` comprehension.\n+      _ <- ResourceOwner.forActorSystem(() => system).acquire()\n+      _ <- ResourceOwner.forMaterializer(() => materializer).acquire()\n+      readerWriter <- ResourceOwner\n+        .forCloseable(() => construct(config.participantId))\n+        .acquire()\n+      ledger = new KeyValueParticipantState(readerWriter, readerWriter)\n+      _ <- Resource.sequenceIgnoringValues(config.archiveFiles.map { file =>\n+        val submissionId = SubmissionId.assertFromString(UUID.randomUUID().toString)\n+        for {\n+          dar <- ResourceOwner\n+            .forTry(() =>\n+              DarReader { case (_, x) => Try(Archive.parseFrom(x)) }\n+                .readArchiveFromFile(file.toFile))\n+            .acquire()\n+          _ <- ResourceOwner\n+            .forCompletionStage(() => ledger.uploadPackages(submissionId, dar.all, None))\n+            .acquire()\n+        } yield ()\n+      })\n+      _ <- startIndexerServer(config, readService = ledger)\n+      _ <- startApiServer(\n+        config,\n+        readService = ledger,\n+        writeService = ledger,\n+        authService = AuthServiceWildcard,\n+      )\n+    } yield ()\n+\n+    resource.asFuture.failed.foreach { exception =>\n+      logger.error(\"Shutting down because of an initialization error.\", exception)\n+      System.exit(1)\n+    }\n+\n+    Runtime.getRuntime\n+      .addShutdownHook(new Thread(() => Await.result(resource.release(), 10.seconds)))\n+  }\n+\n+  private def startIndexerServer(\n+      config: Config,\n+      readService: ReadService,\n+  )(implicit executionContext: ExecutionContext): Resource[Unit] =\n+    new StandaloneIndexerServer(\n+      readService,\n+      IndexerConfig(\n+        config.participantId,\n+        jdbcUrl = \"jdbc:h2:mem:server;db_close_delay=-1;db_close_on_exit=false\",\n+        startupMode = IndexerStartupMode.MigrateAndStart,\n+      ),\n+      NamedLoggerFactory.forParticipant(config.participantId),\n+      SharedMetricRegistries.getOrCreate(s\"indexer-${config.participantId}\"),\n+    ).acquire()\n+\n+  private def startApiServer(\n+      config: Config,\n+      readService: ReadService,\n+      writeService: WriteService,\n+      authService: AuthService,\n+  )(implicit executionContext: ExecutionContext): Resource[Unit] =\n+    new StandaloneApiServer(\n+      ApiServerConfig(\n+        config.participantId,\n+        config.archiveFiles.map(_.toFile).toList,"
  }
]