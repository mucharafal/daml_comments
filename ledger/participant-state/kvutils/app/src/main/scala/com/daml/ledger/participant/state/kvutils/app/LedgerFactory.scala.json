[
  {
    "id" : "8d5bc593-15e0-48b2-acbd-f02f82aea4c1",
    "prId" : 7593,
    "comments" : [
      {
        "id" : "cb322b6e-d22e-4d05-ad38-e46c1d1fe7f3",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      managementServiceTimeout = participantConfig.managementServiceTimeout,\r\n```",
        "createdAt" : "2020-10-07T15:20:30Z",
        "updatedAt" : "2020-10-07T15:42:08Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32fe45def3644018b639489ac3e03ea28f298aeb",
    "line" : null,
    "diffHunk" : "@@ -56,6 +56,7 @@ trait ConfigProvider[ExtraConfig] {\n       eventsPageSize = config.eventsPageSize,\n       portFile = participantConfig.portFile,\n       seeding = config.seeding,\n+      managementServiceTimeout = participantConfig.managementServiceTimeout"
  },
  {
    "id" : "0ed681d0-fed7-46dc-a226-b5d586529dc1",
    "prId" : 6224,
    "comments" : [
      {
        "id" : "69b88efd-8af4-4e33-9121-8a90ebd43a5e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Just to keep it consistent.\r\n\r\n```suggestion\r\n  def interceptors(config: Config[ExtraConfig]): List[ServerInterceptor] =\r\n    List.empty\r\n```",
        "createdAt" : "2020-06-04T14:41:04Z",
        "updatedAt" : "2020-06-04T14:52:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d528963051885fe4755df4894ae4e277fab596de",
    "line" : null,
    "diffHunk" : "@@ -78,6 +79,8 @@ trait ConfigProvider[ExtraConfig] {\n   def authService(config: Config[ExtraConfig]): AuthService =\n     AuthServiceWildcard\n \n+  def interceptors(config: Config[ExtraConfig]): List[ServerInterceptor] = List.empty"
  },
  {
    "id" : "20963b12-8cbf-427a-8616-e013899390ab",
    "prId" : 4792,
    "comments" : [
      {
        "id" : "5581dbd4-60b8-4fa8-b90d-fb10d8811d93",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Similarly, perhaps `readWriteServiceOwner`.",
        "createdAt" : "2020-03-03T11:24:04Z",
        "updatedAt" : "2020-03-05T08:58:45Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "44862d1f28b75065ae9e7ceeb3dd627cb7f18ae3",
    "line" : null,
    "diffHunk" : "@@ -15,16 +16,16 @@ import scopt.OptionParser\n \n import scala.concurrent.ExecutionContext\n \n-trait LedgerFactory[T <: KeyValueLedger, ExtraConfig] {\n+trait LedgerFactory[RWS <: ReadWriterService, ExtraConfig] {\n   val defaultExtraConfig: ExtraConfig\n \n   def extraConfigParser(parser: OptionParser[Config[ExtraConfig]]): Unit\n \n-  def owner(config: Config[ExtraConfig], participantConfig: ParticipantConfig)(\n+  def readWriterServiceOwner(config: Config[ExtraConfig], participantConfig: ParticipantConfig)("
  },
  {
    "id" : "33e71c76-bd47-4a11-8c3c-a6c8865fdedd",
    "prId" : 4792,
    "comments" : [
      {
        "id" : "f8d87889-7b14-4230-b707-4940429102e1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "As a more general remark: what do you think about splitting the factory into `readServiceOwner` and `writeServiceOwner`? There are KV Ledger implementations where you don't want to create a read service when you only want to use a write service.",
        "createdAt" : "2020-03-03T12:44:47Z",
        "updatedAt" : "2020-03-05T08:58:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1b4d65a3-9419-4b03-9849-759d0938d5e3",
        "parentId" : "f8d87889-7b14-4230-b707-4940429102e1",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "It sounds sensible to me, trying to shape that.",
        "createdAt" : "2020-03-03T13:47:23Z",
        "updatedAt" : "2020-03-05T08:58:45Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d6a9714d-5388-4f88-8b0e-2cbcb08315f5",
        "parentId" : "f8d87889-7b14-4230-b707-4940429102e1",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "I've split the hierarchy upwards to clarify that a `LedgerFactory` is really a reader factory plus a writer factory plus a configuration builder: non-full implementations can really pick and choose in this way.\r\n\r\nI'd leave `LedgerFactory` and `Runner` as they are though, in order not to force splitting present full ledger implementations into two halves: a full ledger allocated as a whole has resource mgmt. options that readers and writers allocated separately don't have, or at least would be less convenient to implement (e.g. share the DB connection pool).",
        "createdAt" : "2020-03-04T20:43:59Z",
        "updatedAt" : "2020-03-05T08:58:45Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "44862d1f28b75065ae9e7ceeb3dd627cb7f18ae3",
    "line" : null,
    "diffHunk" : "@@ -15,16 +16,16 @@ import scopt.OptionParser\n \n import scala.concurrent.ExecutionContext\n \n-trait LedgerFactory[T <: KeyValueLedger, ExtraConfig] {\n+trait LedgerFactory[RWS <: ReadWriterService, ExtraConfig] {\n   val defaultExtraConfig: ExtraConfig\n \n   def extraConfigParser(parser: OptionParser[Config[ExtraConfig]]): Unit\n \n-  def owner(config: Config[ExtraConfig], participantConfig: ParticipantConfig)(\n+  def readWriterServiceOwner(config: Config[ExtraConfig], participantConfig: ParticipantConfig)("
  },
  {
    "id" : "a09e88b9-455a-4455-8903-0f0e4e49bfa5",
    "prId" : 4792,
    "comments" : [
      {
        "id" : "38dc90cf-c26c-4c05-bd24-3bfa77964bdd",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Perhaps we can rename this to `KeyValueLedgerFactory`.",
        "createdAt" : "2020-03-05T08:49:42Z",
        "updatedAt" : "2020-03-05T08:58:45Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "44862d1f28b75065ae9e7ceeb3dd627cb7f18ae3",
    "line" : null,
    "diffHunk" : "@@ -69,11 +65,68 @@ trait LedgerFactory[T <: KeyValueLedger, ExtraConfig] {\n     AuthServiceWildcard\n }\n \n+trait ReadServiceOwner[+RS <: ReadService, ExtraConfig] extends ConfigProvider[ExtraConfig] {\n+  def readServiceOwner(config: Config[ExtraConfig], participantConfig: ParticipantConfig)(\n+      implicit executionContext: ExecutionContext,\n+      materializer: Materializer,\n+      logCtx: LoggingContext,\n+  ): ResourceOwner[RS]\n+}\n+\n+trait WriteServiceOwner[+WS <: WriteService, ExtraConfig] extends ConfigProvider[ExtraConfig] {\n+  def writeServiceOwner(config: Config[ExtraConfig], participantConfig: ParticipantConfig)(\n+      implicit executionContext: ExecutionContext,\n+      materializer: Materializer,\n+      logCtx: LoggingContext,\n+  ): ResourceOwner[WS]\n+}\n+\n+trait LedgerFactory[+RWS <: ReadWriteService, ExtraConfig]\n+    extends ReadServiceOwner[RWS, ExtraConfig]\n+    with WriteServiceOwner[RWS, ExtraConfig] {\n+\n+  override final def readServiceOwner(\n+      config: Config[ExtraConfig],\n+      participantConfig: ParticipantConfig)(\n+      implicit executionContext: ExecutionContext,\n+      materializer: Materializer,\n+      logCtx: LoggingContext): ResourceOwner[RWS] = readWriteServiceOwner(config, participantConfig)\n+\n+  override final def writeServiceOwner(\n+      config: Config[ExtraConfig],\n+      participantConfig: ParticipantConfig)(\n+      implicit executionContext: ExecutionContext,\n+      materializer: Materializer,\n+      logCtx: LoggingContext): ResourceOwner[RWS] = readWriteServiceOwner(config, participantConfig)\n+\n+  def readWriteServiceOwner(config: Config[ExtraConfig], participantConfig: ParticipantConfig)(\n+      implicit executionContext: ExecutionContext,\n+      materializer: Materializer,\n+      logCtx: LoggingContext,\n+  ): ResourceOwner[RWS]\n+}\n+\n object LedgerFactory {\n \n-  abstract class SimpleLedgerFactory[T <: KeyValueLedger] extends LedgerFactory[T, Unit] {\n+  abstract class SimpleLedgerFactory[KWL <: KeyValueLedger]"
  }
]