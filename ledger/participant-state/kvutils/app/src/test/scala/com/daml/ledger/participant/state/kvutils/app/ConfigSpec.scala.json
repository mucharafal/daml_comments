[
  {
    "id" : "af1275a2-d49a-4157-9562-60a265399eaa",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "2c100a46-b79f-4773-9fe0-d064e20b4429",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  private val participantOption = \"--participant\"\r\n```",
        "createdAt" : "2020-10-13T06:35:15Z",
        "updatedAt" : "2020-10-13T07:33:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5b80a8d5-9201-4813-a299-9b80621e9c18",
        "parentId" : "2c100a46-b79f-4773-9fe0-d064e20b4429",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2020-10-13T07:35:36Z",
        "updatedAt" : "2020-10-13T07:35:36Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : null,
    "diffHunk" : "@@ -3,31 +3,66 @@\n \n package com.daml.ledger.participant.state.kvutils.app\n \n+import com.daml.ledger.participant.state.v1.ParticipantId\n import org.scalatest.{FlatSpec, Matchers, OptionValues}\n import scopt.OptionParser\n \n final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n \n-  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n-  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n-    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+  private val dumpIndexMetadataCommand = \"dump-index-metadata\"\n+  private val particiopantOption = \"--participant\""
  },
  {
    "id" : "9d076702-77fe-4ecf-9112-8b59c66cf7b9",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "f70cf269-2449-4588-b856-d6e9584c5f7f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      Seq(participantOption, s\"$defaultParticipantSubOptions,$jdbcUrlSubOption=$jdbcFromCli\"))\r\n```",
        "createdAt" : "2020-10-13T06:37:27Z",
        "updatedAt" : "2020-10-13T07:33:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b736f059-7506-4404-8bdb-fe0b47ee8b9d",
        "parentId" : "f70cf269-2449-4588-b856-d6e9584c5f7f",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2020-10-13T07:35:45Z",
        "updatedAt" : "2020-10-13T07:35:46Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : null,
    "diffHunk" : "@@ -3,31 +3,66 @@\n \n package com.daml.ledger.participant.state.kvutils.app\n \n+import com.daml.ledger.participant.state.v1.ParticipantId\n import org.scalatest.{FlatSpec, Matchers, OptionValues}\n import scopt.OptionParser\n \n final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n \n-  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n-  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n-    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+  private val dumpIndexMetadataCommand = \"dump-index-metadata\"\n+  private val particiopantOption = \"--participant\"\n+  private val participantId: ParticipantId = ParticipantId.assertFromString(\"dummy-participant\")\n+  private val defaultParticipantSubOptions = s\"participant-id=$participantId,port=123\"\n+  private val jdbcUrlSubOption = \"server-jdbc-url\"\n+  private val jdbcUrlEnvSubOption = \"server-jdbc-url-env\"\n+  private def configParser(\n+      parameters: Seq[String],\n+      getEnvVar: String => Option[String] = (_ => None)): Option[Config[Unit]] =\n+    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), parameters, getEnvVar)\n \n   behavior of \"Runner\"\n \n   it should \"fail if a participant is not provided in run mode\" in {\n-    ConfigParser(Seq.empty) shouldEqual None\n+    configParser(Seq.empty) shouldEqual None\n   }\n \n   it should \"fail if a participant is not provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand)) shouldEqual None\n+    configParser(Seq(dumpIndexMetadataCommand)) shouldEqual None\n   }\n \n   it should \"succeed if a participant is provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand, \"some-jdbc-url\"))\n+    configParser(Seq(dumpIndexMetadataCommand, \"some-jdbc-url\"))\n   }\n \n   it should \"succeed if more than one participant is provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand, \"some-jdbc-url\", \"some-other-jdbc-url\"))\n+    configParser(Seq(dumpIndexMetadataCommand, \"some-jdbc-url\", \"some-other-jdbc-url\"))\n+  }\n+\n+  it should \"get the jdbc string from the command line argument when provided\" in {\n+    val jdbcFromCli = \"command-line-jdbc\"\n+    val config = configParser(\n+      Seq(particiopantOption, s\"$defaultParticipantSubOptions,$jdbcUrlSubOption=$jdbcFromCli\"))"
  },
  {
    "id" : "509c8b1d-52a2-4f0f-b2df-1f0cf29b094c",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "8ca345e7-7765-4bda-9584-5f7923342511",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      Seq(participantOption, s\"$defaultParticipantSubOptions,$jdbcUrlEnvSubOption=$jdbcEnvVar\"),\r\n```",
        "createdAt" : "2020-10-13T06:37:37Z",
        "updatedAt" : "2020-10-13T07:33:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c491b493-367a-43d3-b30a-2a08036aa7ba",
        "parentId" : "8ca345e7-7765-4bda-9584-5f7923342511",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2020-10-13T07:35:55Z",
        "updatedAt" : "2020-10-13T07:35:55Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : null,
    "diffHunk" : "@@ -3,31 +3,66 @@\n \n package com.daml.ledger.participant.state.kvutils.app\n \n+import com.daml.ledger.participant.state.v1.ParticipantId\n import org.scalatest.{FlatSpec, Matchers, OptionValues}\n import scopt.OptionParser\n \n final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n \n-  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n-  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n-    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+  private val dumpIndexMetadataCommand = \"dump-index-metadata\"\n+  private val particiopantOption = \"--participant\"\n+  private val participantId: ParticipantId = ParticipantId.assertFromString(\"dummy-participant\")\n+  private val defaultParticipantSubOptions = s\"participant-id=$participantId,port=123\"\n+  private val jdbcUrlSubOption = \"server-jdbc-url\"\n+  private val jdbcUrlEnvSubOption = \"server-jdbc-url-env\"\n+  private def configParser(\n+      parameters: Seq[String],\n+      getEnvVar: String => Option[String] = (_ => None)): Option[Config[Unit]] =\n+    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), parameters, getEnvVar)\n \n   behavior of \"Runner\"\n \n   it should \"fail if a participant is not provided in run mode\" in {\n-    ConfigParser(Seq.empty) shouldEqual None\n+    configParser(Seq.empty) shouldEqual None\n   }\n \n   it should \"fail if a participant is not provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand)) shouldEqual None\n+    configParser(Seq(dumpIndexMetadataCommand)) shouldEqual None\n   }\n \n   it should \"succeed if a participant is provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand, \"some-jdbc-url\"))\n+    configParser(Seq(dumpIndexMetadataCommand, \"some-jdbc-url\"))\n   }\n \n   it should \"succeed if more than one participant is provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand, \"some-jdbc-url\", \"some-other-jdbc-url\"))\n+    configParser(Seq(dumpIndexMetadataCommand, \"some-jdbc-url\", \"some-other-jdbc-url\"))\n+  }\n+\n+  it should \"get the jdbc string from the command line argument when provided\" in {\n+    val jdbcFromCli = \"command-line-jdbc\"\n+    val config = configParser(\n+      Seq(particiopantOption, s\"$defaultParticipantSubOptions,$jdbcUrlSubOption=$jdbcFromCli\"))\n+      .getOrElse(fail())\n+    config.participants.head.serverJdbcUrl should be(jdbcFromCli)\n+  }\n+\n+  it should \"get the jdbc string from the environment when provided\" in {\n+    val jdbcEnvVar = \"JDBC_ENV_VAR\"\n+    val jdbcFromEnv = \"env-jdbc\"\n+    val config = configParser(\n+      Seq(particiopantOption, s\"$defaultParticipantSubOptions,$jdbcUrlEnvSubOption=$jdbcEnvVar\"),"
  },
  {
    "id" : "2d4d73fb-705d-4a40-b346-c8fe2f948346",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "952518eb-e741-4de1-b75e-df0d24401309",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "These magic strings must be referenced from `Config`.",
        "createdAt" : "2020-10-14T08:08:56Z",
        "updatedAt" : "2020-10-14T08:25:27Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : 17,
    "diffHunk" : "@@ -3,31 +3,66 @@\n \n package com.daml.ledger.participant.state.kvutils.app\n \n+import com.daml.ledger.participant.state.v1.ParticipantId\n import org.scalatest.{FlatSpec, Matchers, OptionValues}\n import scopt.OptionParser\n \n final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n \n-  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n-  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n-    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+  private val dumpIndexMetadataCommand = \"dump-index-metadata\"\n+  private val participantOption = \"--participant\"\n+  private val participantId: ParticipantId = ParticipantId.assertFromString(\"dummy-participant\")\n+  private val fixedParticipantSubOptions = s\"participant-id=$participantId,port=123\"\n+  private val jdbcUrlSubOption = \"server-jdbc-url\""
  },
  {
    "id" : "889f4bff-2a0d-4583-83c8-dc797f713851",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "7f2f258e-5998-401b-900e-ce95ad527314",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I'd suggest naming this as `mandatoryParticipantOptions` or `mandatoryParticipantConfig` or similar to hint that these must be provided.",
        "createdAt" : "2020-10-14T08:19:49Z",
        "updatedAt" : "2020-10-14T08:25:27Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : 16,
    "diffHunk" : "@@ -3,31 +3,66 @@\n \n package com.daml.ledger.participant.state.kvutils.app\n \n+import com.daml.ledger.participant.state.v1.ParticipantId\n import org.scalatest.{FlatSpec, Matchers, OptionValues}\n import scopt.OptionParser\n \n final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n \n-  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n-  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n-    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+  private val dumpIndexMetadataCommand = \"dump-index-metadata\"\n+  private val participantOption = \"--participant\"\n+  private val participantId: ParticipantId = ParticipantId.assertFromString(\"dummy-participant\")\n+  private val fixedParticipantSubOptions = s\"participant-id=$participantId,port=123\""
  },
  {
    "id" : "0c2907ed-ad94-4765-8621-ae214df2586b",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "9f6a1968-a8c8-4305-8d95-60e5d8fb8559",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Constants should be `UpperCamelCased` -- please don't change this.",
        "createdAt" : "2020-10-14T08:21:14Z",
        "updatedAt" : "2020-10-14T08:25:27Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : 13,
    "diffHunk" : "@@ -3,31 +3,66 @@\n \n package com.daml.ledger.participant.state.kvutils.app\n \n+import com.daml.ledger.participant.state.v1.ParticipantId\n import org.scalatest.{FlatSpec, Matchers, OptionValues}\n import scopt.OptionParser\n \n final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n \n-  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n-  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n-    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+  private val dumpIndexMetadataCommand = \"dump-index-metadata\""
  },
  {
    "id" : "8a67c4be-7131-4380-b47e-fe62a4622b24",
    "prId" : 7660,
    "comments" : [
      {
        "id" : "1a34c035-a6af-46aa-a753-73156043582d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "To improve test readability, I'd suggest putting the relevant config key first (i.e., from this test case's perspective).",
        "createdAt" : "2020-10-14T08:25:15Z",
        "updatedAt" : "2020-10-14T08:25:27Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f558a5537a7733d84118cdf9dedbb7389f44618",
    "line" : 49,
    "diffHunk" : "@@ -3,31 +3,66 @@\n \n package com.daml.ledger.participant.state.kvutils.app\n \n+import com.daml.ledger.participant.state.v1.ParticipantId\n import org.scalatest.{FlatSpec, Matchers, OptionValues}\n import scopt.OptionParser\n \n final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n \n-  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n-  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n-    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+  private val dumpIndexMetadataCommand = \"dump-index-metadata\"\n+  private val participantOption = \"--participant\"\n+  private val participantId: ParticipantId = ParticipantId.assertFromString(\"dummy-participant\")\n+  private val fixedParticipantSubOptions = s\"participant-id=$participantId,port=123\"\n+  private val jdbcUrlSubOption = \"server-jdbc-url\"\n+  private val jdbcUrlEnvSubOption = \"server-jdbc-url-env\"\n+  private def configParser(\n+      parameters: Seq[String],\n+      getEnvVar: String => Option[String] = (_ => None)): Option[Config[Unit]] =\n+    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), parameters, getEnvVar)\n \n   behavior of \"Runner\"\n \n   it should \"fail if a participant is not provided in run mode\" in {\n-    ConfigParser(Seq.empty) shouldEqual None\n+    configParser(Seq.empty) shouldEqual None\n   }\n \n   it should \"fail if a participant is not provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand)) shouldEqual None\n+    configParser(Seq(dumpIndexMetadataCommand)) shouldEqual None\n   }\n \n   it should \"succeed if a participant is provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand, \"some-jdbc-url\"))\n+    configParser(Seq(dumpIndexMetadataCommand, \"some-jdbc-url\"))\n   }\n \n   it should \"succeed if more than one participant is provided when dumping the index metadata\" in {\n-    ConfigParser(Seq(DumpIndexMetadataCommand, \"some-jdbc-url\", \"some-other-jdbc-url\"))\n+    configParser(Seq(dumpIndexMetadataCommand, \"some-jdbc-url\", \"some-other-jdbc-url\"))\n+  }\n+\n+  it should \"get the jdbc string from the command line argument when provided\" in {\n+    val jdbcFromCli = \"command-line-jdbc\"\n+    val config = configParser(\n+      Seq(participantOption, s\"$fixedParticipantSubOptions,$jdbcUrlSubOption=$jdbcFromCli\"))"
  },
  {
    "id" : "3a97b973-c87e-4803-b9f8-54c1705feb42",
    "prId" : 7213,
    "comments" : [
      {
        "id" : "36397fc4-66b1-4353-be9a-90dc30d58b38",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Shouldn't this be `ConfigParser`?",
        "createdAt" : "2020-08-31T17:04:58Z",
        "updatedAt" : "2020-08-31T17:04:58Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b157bb878277d49a3f0921b6958f5867d9395897",
    "line" : 15,
    "diffHunk" : "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.app\n+\n+import org.scalatest.{FlatSpec, Matchers, OptionValues}\n+import scopt.OptionParser\n+\n+final class ConfigSpec extends FlatSpec with Matchers with OptionValues {\n+\n+  private val DumpIndexMetadataCommand = \"dump-index-metadata\"\n+  private val ConfigParser: Seq[String] => Option[Config[Unit]] =\n+    Config.parse(\"Test\", (_: OptionParser[Config[Unit]]) => (), (), _)\n+\n+  behavior of \"Runner\""
  }
]