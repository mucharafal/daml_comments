[
  {
    "id" : "52649176-0f0c-4d9d-98ce-b43906fc879a",
    "prId" : 7258,
    "comments" : [
      {
        "id" : "b355c343-8690-46aa-add0-1d9999b3236b",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Test coverage seems a bit on the thin side but I think that's out of scope for this PR.",
        "createdAt" : "2020-08-28T11:27:44Z",
        "updatedAt" : "2020-08-28T11:29:19Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fd3a8353-1e79-4fa1-b688-204ba1b4c2c8",
        "parentId" : "b355c343-8690-46aa-add0-1d9999b3236b",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I agree, I'd like to add more.\r\n\r\nWorth noting we also run an integration check by using the test tool and in the integrity checker, which should catch most issues at a high level. So I'm not too worried.",
        "createdAt" : "2020-08-28T11:32:21Z",
        "updatedAt" : "2020-08-28T11:32:21Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c2289c2f32e1319b1b1881bbb9185ecef38a930b",
    "line" : 51,
    "diffHunk" : "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.export\n+\n+import java.io.{InputStream, OutputStream, PipedInputStream, PipedOutputStream}\n+import java.time.Instant\n+\n+import com.daml.ledger.participant.state.v1\n+import com.google.protobuf.ByteString\n+import org.scalatest.{Matchers, WordSpec}\n+\n+abstract class LedgerDataExportSpecBase(name: String) extends WordSpec with Matchers {\n+  protected def newExporter(outputStream: OutputStream): LedgerDataExporter\n+\n+  protected def newImporter(inputStream: InputStream): LedgerDataImporter\n+\n+  name should {\n+    \"serialize a submission to something deserializable\" in {\n+      val submissionInfo = SubmissionInfo(\n+        participantId = v1.ParticipantId.assertFromString(\"id\"),\n+        correlationId = \"parent\",\n+        submissionEnvelope = ByteString.copyFromUtf8(\"an envelope\"),\n+        recordTimeInstant = Instant.ofEpochSecond(123456, 123456789),\n+      )\n+\n+      val inputStream = new PipedInputStream()\n+      val outputStream = new PipedOutputStream(inputStream)\n+      val exporter = newExporter(outputStream)\n+\n+      val submission = exporter.addSubmission(submissionInfo)\n+      val writeSetA1 = submission.addChild()\n+      writeSetA1 ++= Seq(keyValuePairOf(\"a\", \"b\"), keyValuePairOf(\"c\", \"d\"))\n+      val writeSetA2 = submission.addChild()\n+      writeSetA2 ++= Seq(keyValuePairOf(\"e\", \"f\"), keyValuePairOf(\"g\", \"h\"))\n+\n+      submission.finish()\n+\n+      val importer = newImporter(inputStream)\n+\n+      val (actualSubmissionInfo, actualWriteSet) = importer.read().head\n+      actualSubmissionInfo should be(submissionInfo)\n+      actualWriteSet should be(\n+        Seq(\n+          keyValuePairOf(\"a\", \"b\"),\n+          keyValuePairOf(\"c\", \"d\"),\n+          keyValuePairOf(\"e\", \"f\"),\n+          keyValuePairOf(\"g\", \"h\"),\n+        ))\n+    }\n+  }"
  }
]