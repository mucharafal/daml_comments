[
  {
    "id" : "b6149ea0-ea5a-4dac-bcd3-536bd3490e69",
    "prId" : 7460,
    "comments" : [
      {
        "id" : "00ac073c-79d2-4ab7-bb7d-eaaf0e40fe1b",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "What does self-consistent mean here?",
        "createdAt" : "2020-10-05T15:56:42Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "432e3364-c43d-4440-ab8b-ae209f904e84",
        "parentId" : "00ac073c-79d2-4ab7-bb7d-eaaf0e40fe1b",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "They don't have dependencies to other archives.",
        "createdAt" : "2020-10-08T07:12:26Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0a4599bcbf38cacac4088b9b73021b01c997c440",
    "line" : 85,
    "diffHunk" : "@@ -712,6 +710,15 @@ object ParticipantStateIntegrationSpecBase {\n   private val darFile = new File(rlocation(\"ledger/test-common/model-tests.dar\"))\n   private val archives = darReader.readArchiveFromFile(darFile).get.all\n \n+  // 2 self consistent archives"
  },
  {
    "id" : "c5d6cccb-2cc0-46f7-b2a8-f4df2bd680f4",
    "prId" : 7460,
    "comments" : [
      {
        "id" : "c4a1ad64-738c-4a4f-b2e5-828e6c7b401f",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "If it doesn't really matter what archive `archive1` is then let's call it e.g. `anArchive` and `archive2` `anotherArchive`.",
        "createdAt" : "2020-10-05T16:10:59Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4182923a-3db3-4aa4-ae48-ed2a2db05afe",
        "parentId" : "c4a1ad64-738c-4a4f-b2e5-828e6c7b401f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "renamed",
        "createdAt" : "2020-10-08T07:15:50Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0a4599bcbf38cacac4088b9b73021b01c997c440",
    "line" : null,
    "diffHunk" : "@@ -101,7 +101,7 @@ abstract class ParticipantStateIntegrationSpecBase(implementationName: String)(\n       \"provide an update\" in participantState.use { ps =>\n         val submissionId = newSubmissionId()\n         for {\n-          result <- ps.uploadPackages(submissionId, List(archives.head), sourceDescription).toScala\n+          result <- ps.uploadPackages(submissionId, List(archive1), sourceDescription).toScala"
  },
  {
    "id" : "5da2da77-dc69-4389-9141-04663dd320cc",
    "prId" : 7278,
    "comments" : [
      {
        "id" : "8cae7f9c-16b5-4611-bae6-f9e07b08273b",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Minor: if it was `participantState` I wouldn't need to open more context :)",
        "createdAt" : "2020-08-31T14:16:13Z",
        "updatedAt" : "2020-08-31T14:18:18Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "669f627e-f508-430f-bb6a-4ed4d97d724c",
        "parentId" : "8cae7f9c-16b5-4611-bae6-f9e07b08273b",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I believe I left this exact same comment when this test was created. ðŸ˜› ",
        "createdAt" : "2020-08-31T14:39:58Z",
        "updatedAt" : "2020-08-31T14:39:58Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d181434bbf8c9b79f0a3bdffea837c5db4f2214b",
    "line" : 44,
    "diffHunk" : "@@ -567,28 +570,48 @@ abstract class ParticipantStateIntegrationSpecBase(implementationName: String)(\n       val partyNames =\n         partyIds\n           .map(i => Ref.Party.assertFromString(s\"party-%0${partyIdDigits}d\".format(i)))\n-          .toVector\n+          .to[SortedSet]\n \n-      val updatesF = ps\n+      val expectedOffsets = partyIds.map(i => toOffset(i)).to[SortedSet]\n+\n+      val updates = mutable.Buffer.empty[(Offset, Update)]\n+      val stateUpdatesF = ps"
  },
  {
    "id" : "80999508-357c-4d52-aba8-df80c8f9e51b",
    "prId" : 6506,
    "comments" : [
      {
        "id" : "d682b9ad-a9d7-4733-a6e1-f21aee37091a",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Might read more nicely (and live on fewer lines) if you pull out `new File(â€¦)` into a variable.",
        "createdAt" : "2020-06-26T09:55:17Z",
        "updatedAt" : "2020-06-26T11:19:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d4342e4db17283312fc898b18a846df59d9b908",
    "line" : null,
    "diffHunk" : "@@ -679,7 +679,10 @@ object ParticipantStateIntegrationSpecBase {\n \n   private val darReader = DarReader { case (_, is) => Try(DamlLf.Archive.parseFrom(is)) }\n   private val archives =\n-    darReader.readArchiveFromFile(new File(rlocation(\"ledger/test-common/Test-stable.dar\"))).get.all\n+    darReader\n+      .readArchiveFromFile(new File(rlocation(\"ledger/test-common/model-tests.dar\")))"
  },
  {
    "id" : "8190ba08-d0ed-4b80-8b69-0b240f582ce4",
    "prId" : 4558,
    "comments" : [
      {
        "id" : "4b204ffd-c381-48e4-ba45-943b95c8b135",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Perhaps pull the construction of the `TimeModel` out into a function called `aTimeModel` or something to keep the test case to the point?",
        "createdAt" : "2020-02-18T11:57:25Z",
        "updatedAt" : "2020-02-18T21:10:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c24fe9b1f64bcbfa0b0d58eeec235081a161b919",
    "line" : 6,
    "diffHunk" : "@@ -491,6 +491,9 @@ abstract class ParticipantStateIntegrationSpecBase(implementationName: String)\n                   Duration.ofSeconds(123),\n                   Duration.ofSeconds(123),\n                   Duration.ofSeconds(123),\n+                  Duration.ofSeconds(123),\n+                  Duration.ofSeconds(123),\n+                  Duration.ofSeconds(123),"
  },
  {
    "id" : "e0ed8e2b-aa44-4721-a050-edadef6c965b",
    "prId" : 4321,
    "comments" : [
      {
        "id" : "74671243-a4f6-4d67-9fa8-6fb890c609f7",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "We may want to rename this to `randomSubmissionId` or similar to avoid confusion (i.e., most of the places it is used as a submission ID and one may wonder why we have two utility methods returning the same type derived from an UUID).",
        "createdAt" : "2020-01-31T12:46:44Z",
        "updatedAt" : "2020-01-31T15:59:27Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2167231f-05ff-41f3-88b1-43171b19bca2",
        "parentId" : "74671243-a4f6-4d67-9fa8-6fb890c609f7",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Gonna go with `newSubmissionId` because the fact that it's random is an implementation detail (we could use an incrementing counter, for example, and it would make no difference), but I like your thinking.",
        "createdAt" : "2020-01-31T15:56:02Z",
        "updatedAt" : "2020-01-31T15:59:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a8df882d02ba51fc3a509767c49a514ca294bd45",
    "line" : null,
    "diffHunk" : "@@ -576,6 +605,9 @@ object ParticipantStateIntegrationSpecBase {\n \n   private val alice = Ref.Party.assertFromString(\"alice\")\n \n+  private def newLedgerId() =\n+    Ref.LedgerString.assertFromString(s\"ledger-${UUID.randomUUID()}\")\n+\n   private def randomLedgerString(): Ref.LedgerString ="
  },
  {
    "id" : "38d9d66f-4f8d-42f5-afe7-1b00e66906eb",
    "prId" : 3940,
    "comments" : [
      {
        "id" : "04c1f796-cfad-46c4-a2a3-9e85de0be18d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Thanks for improving readability of these assertions.",
        "createdAt" : "2020-01-07T09:51:08Z",
        "updatedAt" : "2020-01-15T14:19:40Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "54297f1691f54ac9cff06e5a3d56297e6e32b48b",
    "line" : 42,
    "diffHunk" : "@@ -90,7 +97,7 @@ abstract class ParticipantStateIntegrationSpecBase(implementationName: String)\n         _ <- ps.uploadPackages(submissionId, archives, sourceDescription).toScala\n         update1 <- ps.stateUpdates(beginAfter = None).runWith(Sink.head)\n       } yield {\n-        matchPackageUpload(update1, submissionId, Offset(Array(0L, 0L)), archives, rt)\n+        matchPackageUpload(update1, submissionId, offset(0, 0), archives, rt)"
  }
]