[
  {
    "id" : "095ed341-31bd-4ef2-b030-658ea0e387f7",
    "prId" : 7265,
    "comments" : [
      {
        "id" : "0a669a3d-3f50-48db-94a1-0fffd52dd506",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Please change this version :)",
        "createdAt" : "2020-08-31T14:56:13Z",
        "updatedAt" : "2020-09-01T09:44:56Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b11ac40-9b19-4e8b-bef2-88ab571593ad",
        "parentId" : "0a669a3d-3f50-48db-94a1-0fffd52dd506",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-08-31T15:26:58Z",
        "updatedAt" : "2020-09-01T09:44:56Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ac8921a780ac376a2ef73b6b5139530185f6bf5a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,86 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.export\n+\n+import java.io.{PipedInputStream, PipedOutputStream}\n+\n+import com.google.common.io.ByteStreams\n+import org.scalatest.{Matchers, WordSpec}\n+\n+final class HeaderSpec extends WordSpec with Matchers {\n+  \"header\" should {\n+    \"write and verify the version\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val header = new Header(version = \"v1\")\n+\n+      header.write(output)\n+      output.close()\n+\n+      header.consumeAndVerify(input)\n+      succeed\n+    }\n+\n+    \"throw if the preamble is wrong\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val header = new Header(version = \"version two\")\n+\n+      output.write(\"daml.kvutils.something\\u0000version two\\u0000\".getBytes(Header.charset))\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy header.consumeAndVerify(input)\n+    }\n+\n+    \"throw if the preamble is too long\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val header = new Header(version = \"vee three\")\n+\n+      output.write(s\"${Header.preamble}.xyz\\u0000version two\\u0000\".getBytes(Header.charset))\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy header.consumeAndVerify(input)\n+    }\n+\n+    \"throw if the version is wrong\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val exportHeader = new Header(version = \"wzn fuor\")\n+      val importHeader = new Header(version = \"vsn four\")\n+\n+      exportHeader.write(output)\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy importHeader.consumeAndVerify(input)\n+    }\n+\n+    \"throw if the version is too long\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val exportHeader = new Header(version = \"quersion 5.5\")\n+      val importHeader = new Header(version = \"quersion 5\")\n+\n+      exportHeader.write(output)\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy importHeader.consumeAndVerify(input)\n+    }\n+\n+    \"flushes correctly, and does not buffer\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val header = new Header(version = \"666\")"
  },
  {
    "id" : "41c7b7e3-f950-434b-ab23-dd6ce3a7d3fb",
    "prId" : 7265,
    "comments" : [
      {
        "id" : "e7f9bfee-92fb-433e-9b97-83f323832426",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "This description is puzzling when reading the below test case as flushing is not apparent. I.e., the test case rather tells that `only the required part of the input is consumed by consumeAndVerify`.",
        "createdAt" : "2020-09-02T10:20:36Z",
        "updatedAt" : "2020-09-02T10:22:17Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cd12cdf0-ae3c-49d1-818f-11c674ac114e",
        "parentId" : "e7f9bfee-92fb-433e-9b97-83f323832426",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "It tells us both, annoyingly. We can see that calling `output.write` after `header.write` doesn't end up with weird interleaving issues (which I had for a moment, which is why I wrote this test), and that calling `consumeAndVerify` does not buffer past the end of the header.",
        "createdAt" : "2020-09-02T12:28:28Z",
        "updatedAt" : "2020-09-02T12:28:28Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6e70e7e1-6928-4eb4-b6d5-c357b5b808cf",
        "parentId" : "e7f9bfee-92fb-433e-9b97-83f323832426",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "With your explanation it indeed makes sense!",
        "createdAt" : "2020-09-02T13:31:21Z",
        "updatedAt" : "2020-09-02T13:31:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ac8921a780ac376a2ef73b6b5139530185f6bf5a",
    "line" : 71,
    "diffHunk" : "@@ -0,0 +1,86 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.export\n+\n+import java.io.{PipedInputStream, PipedOutputStream}\n+\n+import com.google.common.io.ByteStreams\n+import org.scalatest.{Matchers, WordSpec}\n+\n+final class HeaderSpec extends WordSpec with Matchers {\n+  \"header\" should {\n+    \"write and verify the version\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val header = new Header(version = \"v1\")\n+\n+      header.write(output)\n+      output.close()\n+\n+      header.consumeAndVerify(input)\n+      succeed\n+    }\n+\n+    \"throw if the preamble is wrong\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val header = new Header(version = \"version two\")\n+\n+      output.write(\"daml.kvutils.something\\u0000version two\\u0000\".getBytes(Header.charset))\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy header.consumeAndVerify(input)\n+    }\n+\n+    \"throw if the preamble is too long\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val header = new Header(version = \"vee three\")\n+\n+      output.write(s\"${Header.preamble}.xyz\\u0000version two\\u0000\".getBytes(Header.charset))\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy header.consumeAndVerify(input)\n+    }\n+\n+    \"throw if the version is wrong\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val exportHeader = new Header(version = \"wzn fuor\")\n+      val importHeader = new Header(version = \"vsn four\")\n+\n+      exportHeader.write(output)\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy importHeader.consumeAndVerify(input)\n+    }\n+\n+    \"throw if the version is too long\" in {\n+      val input = new PipedInputStream\n+      val output = new PipedOutputStream(input)\n+      val exportHeader = new Header(version = \"quersion 5.5\")\n+      val importHeader = new Header(version = \"quersion 5\")\n+\n+      exportHeader.write(output)\n+      output.close()\n+\n+      a[Header.InvalidExportHeaderException] should be thrownBy importHeader.consumeAndVerify(input)\n+    }\n+\n+    \"flushes correctly, and does not buffer\" in {"
  }
]