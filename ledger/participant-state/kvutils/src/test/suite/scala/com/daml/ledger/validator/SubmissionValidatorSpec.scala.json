[
  {
    "id" : "f3ed2b2f-d7b3-4693-ad7a-55b0c5e87a05",
    "prId" : 6992,
    "comments" : [
      {
        "id" : "4bb68517-1a34-47ee-8fab-e310a09d5a64",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "I'd recommend defining in `SubmissionValidator.ProcessSubmission` type aliases that document the meaning of the parameters as we lose the names. Specifically, `RecordTime` and `InputState` should be enough.",
        "createdAt" : "2020-08-05T09:22:39Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0c3ab023-fa33-4e45-8dad-ba999d9d9932",
        "parentId" : "4bb68517-1a34-47ee-8fab-e310a09d5a64",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Sure. 46cbfd4e18219dad344c08641db3f24e3fb10ebc",
        "createdAt" : "2020-08-05T14:47:12Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4666d04ce7a5dc19ce3b8a8b1a8e625aa07570e0",
    "line" : 24,
    "diffHunk" : "@@ -87,14 +87,8 @@ class SubmissionValidatorSpec extends AsyncWordSpec with Matchers with Inside {\n       when(mockStateOperations.readState(any[Seq[Bytes]]()))\n         .thenReturn(Future.successful(Seq(Some(aStateValue()))))\n \n-      def failingProcessSubmission(\n-          damlLogEntryId: DamlLogEntryId,\n-          recordTime: Timestamp,\n-          damlSubmission: DamlSubmission,\n-          participantId: ParticipantId,\n-          inputState: DamlStateMap\n-      ): LogEntryAndState =\n-        throw new IllegalArgumentException(\"Validation failed\")\n+      val failingProcessSubmission: SubmissionValidator.ProcessSubmission ="
  },
  {
    "id" : "ce4e1f00-b649-428e-bf72-9e3cf8207e7d",
    "prId" : 5426,
    "comments" : [
      {
        "id" : "49b54367-2add-4176-b868-0d421ffa1e16",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Not in this PR but this is an opportunity for a welcome readability improvement",
        "createdAt" : "2020-04-03T16:57:29Z",
        "updatedAt" : "2020-04-06T15:24:56Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b6f6f786-b2b5-4eb4-a96c-b7b06cdf5135",
        "parentId" : "49b54367-2add-4176-b868-0d421ffa1e16",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I totally agree.",
        "createdAt" : "2020-04-06T07:13:13Z",
        "updatedAt" : "2020-04-06T15:24:56Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3d02b4d5980332a10e8ba6b26dda8c844e1a6e87",
    "line" : 90,
    "diffHunk" : "@@ -251,10 +264,13 @@ class SubmissionValidatorSpec extends AsyncWordSpec with Matchers with Inside {\n         .thenReturn(Future.successful(99))\n       val logEntryAndStateResult = (aLogEntry(), someStateUpdates)\n       val instance = new SubmissionValidator(\n-        new FakeStateAccess(mockStateOperations),\n-        (_, _, _, _, _) => logEntryAndStateResult,\n+        ledgerStateAccess = new FakeStateAccess(mockStateOperations),\n+        processSubmission = (_, _, _, _, _) => logEntryAndStateResult,"
  },
  {
    "id" : "b55e4d15-58c1-4d3b-bd77-bef48bbe40f2",
    "prId" : 4964,
    "comments" : [
      {
        "id" : "38d8431e-82f5-4ff0-90d1-106891d12edb",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Can you also add a test case to verify that we return an error in case a batch submission contains 2 entries, please?",
        "createdAt" : "2020-03-26T13:34:23Z",
        "updatedAt" : "2020-03-26T15:34:58Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f6e0b82-4bc9-4df9-b6b7-be699c5e050f",
        "parentId" : "38d8431e-82f5-4ff0-90d1-106891d12edb",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Will do!",
        "createdAt" : "2020-03-26T15:00:08Z",
        "updatedAt" : "2020-03-26T15:34:58Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1d5cd7fd70ebf4c50cfbce8cda42b260c81dd5",
    "line" : 43,
    "diffHunk" : "@@ -167,6 +167,45 @@ class SubmissionValidatorSpec extends AsyncWordSpec with Matchers with Inside {\n         }\n     }\n \n+    \"support batch with single submission\" in {\n+      val mockStateOperations = mock[LedgerStateOperations[Int]]\n+      val expectedLogResult: Int = 7\n+      when(mockStateOperations.readState(any[Seq[Bytes]]()))\n+        .thenReturn(Future.successful(Seq(Some(aStateValue()))))\n+      val writtenKeyValuesCaptor = captor[RawKeyValuePairs]\n+      when(mockStateOperations.writeState(writtenKeyValuesCaptor.capture()))\n+        .thenReturn(Future.successful(()))\n+      val logEntryCaptor = captor[Bytes]\n+      when(mockStateOperations.appendToLog(any[Bytes](), logEntryCaptor.capture()))\n+        .thenReturn(Future.successful(expectedLogResult))\n+      val logEntryAndStateResult = (aLogEntry(), someStateUpdates)\n+      val instance = new SubmissionValidator(\n+        new FakeStateAccess(mockStateOperations),\n+        (_, _, _, _, _) => logEntryAndStateResult,\n+        () => aLogEntryId())\n+      val batchEnvelope =\n+        Envelope.enclose(\n+          DamlSubmissionBatch.newBuilder\n+            .addSubmissions(\n+              DamlSubmissionBatch.CorrelatedSubmission.newBuilder\n+                .setCorrelationId(\"aCorrelationId\")\n+                .setSubmission(anEnvelope()))\n+            .build)\n+      instance\n+        .validateAndCommit(batchEnvelope, \"aBatchCorrelationId\", newRecordTime(), aParticipantId())\n+        .map {\n+          inside(_) {\n+            case Right(actualLogResult) =>\n+              actualLogResult should be(expectedLogResult)\n+              writtenKeyValuesCaptor.getAllValues should have size 1\n+              val writtenKeyValues = writtenKeyValuesCaptor.getValue\n+              writtenKeyValues should have size 1\n+              Try(SubmissionValidator.bytesToStateValue(writtenKeyValues.head._2)).isSuccess shouldBe true\n+              logEntryCaptor.getAllValues should have size 1\n+          }\n+        }\n+    }\n+"
  }
]