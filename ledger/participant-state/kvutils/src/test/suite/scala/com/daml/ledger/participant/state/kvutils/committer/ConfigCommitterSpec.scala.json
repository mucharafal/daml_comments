[
  {
    "id" : "9d982f2d-c207-4ab9-b5b9-d5d3e6f005bd",
    "prId" : 6852,
    "comments" : [
      {
        "id" : "2572c164-1378-4abb-93fe-1437db1f3c99",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Is that checked somewhere else?",
        "createdAt" : "2020-07-24T10:07:13Z",
        "updatedAt" : "2020-07-24T10:29:13Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "671fa541-4a09-440c-a64f-19e984757b8e",
        "parentId" : "2572c164-1378-4abb-93fe-1437db1f3c99",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, there's a test case below `produce a log entry ...` that does this check (and more) hence I removed this line to make the test cases independent.",
        "createdAt" : "2020-07-24T10:27:41Z",
        "updatedAt" : "2020-07-24T10:29:13Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e74a3e98b1c9a6b60582189b86edb8a2836dca76",
    "line" : 51,
    "diffHunk" : "@@ -83,7 +106,6 @@ class ConfigCommitterSpec extends WordSpec with Matchers {\n         case StepStop(actualLogEntry) =>\n           actualLogEntry.hasRecordTime shouldBe true\n           actualLogEntry.getRecordTime shouldBe buildTimestamp(theRecordTime)\n-          actualLogEntry.hasConfigurationEntry shouldBe true"
  },
  {
    "id" : "6cb629d4-5164-49a0-a56a-eeca165abe80",
    "prId" : 6852,
    "comments" : [
      {
        "id" : "07a80478-6c40-4f47-9e45-bb900eef807f",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Is that checked somewhere else?",
        "createdAt" : "2020-07-24T10:07:25Z",
        "updatedAt" : "2020-07-24T10:29:13Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9fa812ef-3056-4903-9f62-53d7c9ef471c",
        "parentId" : "07a80478-6c40-4f47-9e45-bb900eef807f",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, there's a test case below `produce a log entry ...` that does this check (and more) hence I removed this line to make the test cases independent.",
        "createdAt" : "2020-07-24T10:27:49Z",
        "updatedAt" : "2020-07-24T10:29:13Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e74a3e98b1c9a6b60582189b86edb8a2836dca76",
    "line" : 59,
    "diffHunk" : "@@ -97,36 +119,28 @@ class ConfigCommitterSpec extends WordSpec with Matchers {\n         case StepContinue(_) => fail\n         case StepStop(actualLogEntry) =>\n           actualLogEntry.hasRecordTime shouldBe false\n-          actualLogEntry.hasConfigurationEntry shouldBe true"
  },
  {
    "id" : "08723d91-4d6c-4af5-b53d-077b8b80bad0",
    "prId" : 6630,
    "comments" : [
      {
        "id" : "0d3574e7-81df-4a76-b5f5-377260463d3d",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "There is a lot of commonality between all this OOTB rejection log entry tests, please consider pulling up the common parts in a base test class.",
        "createdAt" : "2020-07-09T06:56:54Z",
        "updatedAt" : "2020-07-09T10:04:48Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1685bbba-b7f9-43ac-9874-22036610e6a9",
        "parentId" : "0d3574e7-81df-4a76-b5f5-377260463d3d",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Good point. However, I found the commonality so minimal that I'd rather keep the code easier to read than add another level of indirection.",
        "createdAt" : "2020-07-09T09:42:02Z",
        "updatedAt" : "2020-07-09T10:04:48Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "30f59a7ea813c8683703e913a307efff5574108f",
    "line" : 53,
    "diffHunk" : "@@ -94,6 +100,33 @@ class ConfigCommitterSpec extends WordSpec with Matchers {\n           actualLogEntry.hasConfigurationEntry shouldBe true\n       }\n     }\n+\n+    \"produce an out-of-time-bounds rejection log entry in case pre-execution is enabled\" in {\n+      val instance = createConfigCommitter(theRecordTime.addMicros(1000))\n+      val context = new FakeCommitContext(recordTime = None)\n+\n+      instance.buildLogEntry(context, anEmptyResult)\n+\n+      context.preExecute shouldBe true\n+      context.outOfTimeBoundsLogEntry should not be empty\n+      context.outOfTimeBoundsLogEntry.foreach { actual =>\n+        actual.hasRecordTime shouldBe false\n+        actual.hasConfigurationRejectionEntry shouldBe true\n+        actual.getConfigurationRejectionEntry.getSubmissionId shouldBe aConfigurationSubmission.getSubmissionId\n+        actual.getConfigurationRejectionEntry.getParticipantId shouldBe aConfigurationSubmission.getParticipantId\n+        actual.getConfigurationRejectionEntry.getConfiguration shouldBe aConfigurationSubmission.getConfiguration\n+      }\n+    }\n+\n+    \"not set an out-of-time-bounds rejection log entry in case pre-execution is disabled\" in {\n+      val instance = createConfigCommitter(theRecordTime)\n+      val context = new FakeCommitContext(recordTime = Some(aRecordTime))\n+\n+      instance.buildLogEntry(context, anEmptyResult)\n+\n+      context.preExecute shouldBe false\n+      context.outOfTimeBoundsLogEntry shouldBe empty\n+    }"
  },
  {
    "id" : "692e5721-f94a-4314-9d33-6efe09f53bf3",
    "prId" : 6538,
    "comments" : [
      {
        "id" : "c9c4eafb-1a7c-4f1f-ada0-65265df1c361",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Could you factor this into a 1-parameter (`recordTime`) method? In this way you can also get rid of the annoying \"duplicate code fragment\" warning in IntelliJ Idea.",
        "createdAt" : "2020-07-01T09:39:53Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "69e23678-2957-4c07-b16b-75dcb3a1ac94",
        "parentId" : "c9c4eafb-1a7c-4f1f-ada0-65265df1c361",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-01T12:56:32Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,95 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.committer\n+\n+import com.codahale.metrics.MetricRegistry\n+import com.daml.ledger.participant.state.kvutils.Conversions.buildTimestamp\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils.DamlConfigurationSubmission\n+import com.daml.ledger.participant.state.kvutils.TestHelpers._\n+import com.daml.lf.data.Time.Timestamp\n+import com.daml.metrics.Metrics\n+import org.scalatest.{Matchers, WordSpec}\n+\n+class ConfigCommitterSpec extends WordSpec with Matchers {\n+  private val metrics = new Metrics(new MetricRegistry)\n+  private val aRecordTime = Timestamp(100)\n+  private val aConfigurationSubmission = DamlConfigurationSubmission.getDefaultInstance\n+  private val anEmptyResult =\n+    ConfigCommitter.Result(aConfigurationSubmission, (None, theDefaultConfig))\n+\n+  \"checkTtl\" should {\n+    \"produce rejection log entry if maximum record time is before record time\" in {\n+      val instance = new ConfigCommitter(theDefaultConfig, aRecordTime, metrics)"
  },
  {
    "id" : "8dbe5986-18e0-4f3e-845a-9c50e7e03866",
    "prId" : 6538,
    "comments" : [
      {
        "id" : "37562525-22bd-4bb8-a848-28d6950f1345",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Could you factor this into a 1-parameter (`context`) method and perhaps also embed it in the `match` expression? In this way you can also get rid of the annoying \"duplicate code fragment\" warning in IntelliJ Idea.\r\n\r\nSimilarly for similar occurrences in the other new tests.",
        "createdAt" : "2020-07-01T09:41:09Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "10256ff4-8bde-4e32-933c-12a127b8fc3d",
        "parentId" : "37562525-22bd-4bb8-a848-28d6950f1345",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I would like to keep it as-is as creating a separate method won't improve readability significantly. I.e., it's better to leave calling the tested functions as-is whenever possible for better transparency (in this case we'd only save passing 1 parameter).",
        "createdAt" : "2020-07-01T12:58:50Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "07a776f8-df30-45a2-8f4a-a64f1c5bde5a",
        "parentId" : "37562525-22bd-4bb8-a848-28d6950f1345",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "OK with me.",
        "createdAt" : "2020-07-01T13:30:14Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : 26,
    "diffHunk" : "@@ -0,0 +1,95 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.committer\n+\n+import com.codahale.metrics.MetricRegistry\n+import com.daml.ledger.participant.state.kvutils.Conversions.buildTimestamp\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils.DamlConfigurationSubmission\n+import com.daml.ledger.participant.state.kvutils.TestHelpers._\n+import com.daml.lf.data.Time.Timestamp\n+import com.daml.metrics.Metrics\n+import org.scalatest.{Matchers, WordSpec}\n+\n+class ConfigCommitterSpec extends WordSpec with Matchers {\n+  private val metrics = new Metrics(new MetricRegistry)\n+  private val aRecordTime = Timestamp(100)\n+  private val aConfigurationSubmission = DamlConfigurationSubmission.getDefaultInstance\n+  private val anEmptyResult =\n+    ConfigCommitter.Result(aConfigurationSubmission, (None, theDefaultConfig))\n+\n+  \"checkTtl\" should {\n+    \"produce rejection log entry if maximum record time is before record time\" in {\n+      val instance = new ConfigCommitter(theDefaultConfig, aRecordTime, metrics)\n+      val context = new FakeCommitContext(recordTime = Some(aRecordTime.addMicros(1)))\n+\n+      val actual = instance.checkTtl(context, anEmptyResult)"
  }
]