[
  {
    "id" : "33cf6663-0a57-450c-9798-6e8a991306e9",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "153ac66e-ac81-4732-9083-27bafd84efce",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please merge these two test cases. Also, please explicitly spell out how you arrive at the expected values as they are non-obvious.",
        "createdAt" : "2020-07-03T16:01:44Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +143,147 @@\n      \"compute and correctly set the min/max ledger time without deduplicateUntil\" in {\n        instance.validateLedgerTime(\n          contextWithTimeModelAndEmptyCommandDeduplication,\n          aDamlTransactionEntrySummaryWithSubmissionAndLedgerEffectiveTimes)"
  },
  {
    "id" : "89d3ff43-8855-4895-b4f9-68dd0029d35e",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "53dd8f21-2798-4259-8f39-b956d2b07359",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please merge these two test cases. Also, please explicitly spell out how you arrive at the expected values as they are non-obvious.",
        "createdAt" : "2020-07-03T16:01:56Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +153,157 @@\n      \"compute and correctly set the min/max ledger time with deduplicateUntil\" in {\n        instance.validateLedgerTime(\n          contextWithTimeModelAndCommandDeduplication,\n          aDamlTransactionEntrySummaryWithSubmissionAndLedgerEffectiveTimes)"
  },
  {
    "id" : "16a8bdae-9cc0-40f8-9f37-b654b8c0c1a4",
    "prId" : 6538,
    "comments" : [
      {
        "id" : "31788af0-a097-4fe1-bf5f-a31ed6a5e3ae",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Could you also check that the same happens even in case a deduplication entry is present?",
        "createdAt" : "2020-07-01T09:53:06Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fb141efb-5ba4-49ae-bfcc-563cf64126f7",
        "parentId" : "31788af0-a097-4fe1-bf5f-a31ed6a5e3ae",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "We branch on whether there's a record time available. Hence, whether there's or not a deduplication entry does not play a role in case we don't have a record time. However, I added a test case for checking if a record time is available and a deduplication entry is not available (that wasn't covered).",
        "createdAt" : "2020-07-01T13:06:13Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f5e60ed4-31e8-40cb-8a71-01e41ed48538",
        "parentId" : "31788af0-a097-4fe1-bf5f-a31ed6a5e3ae",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "I think we should test all the valid situations regardless of our knowledge of how the code currently works, so that we are covered against regressions. Good catch RE the other one.",
        "createdAt" : "2020-07-01T13:30:00Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6643c703-42b2-4674-a1c7-a8f4a5808828",
        "parentId" : "31788af0-a097-4fe1-bf5f-a31ed6a5e3ae",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "That's a good point -- here I was focusing more on testing the risky parts and skipping the trivial parts for now as I didn't see much value spending more time on that.",
        "createdAt" : "2020-07-01T13:33:47Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@    \"continue if record time is not available\" in {\n      val instance = createTransactionCommitter()\n      val context = new FakeCommitContext(recordTime = None)\n\n      val actual = instance.deduplicateCommand(context, aTransactionEntrySummary)"
  },
  {
    "id" : "7e4001c2-e494-469d-8a85-33acd03aa8db",
    "prId" : 6538,
    "comments" : [
      {
        "id" : "6cad1a63-d971-404b-9728-a779f368e7a6",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Is the actual rejection content already tested somewhere? Else it should be tested here. Similarly for other similar occurrences in the test of this test.",
        "createdAt" : "2020-07-01T09:56:44Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "611f3d4e-70cf-42d7-a636-51dbc1b439d8",
        "parentId" : "6cad1a63-d971-404b-9728-a779f368e7a6",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "No, it's not tested at this level yet. However, I wouldn't like to make up for the missing test coverage in kvutils as part of this PR so will be focusing on adding tests for the changed logic only. When we get to implementing generation of the different log entries for pre-execution we'll be adding more tests related to that functionality as well.",
        "createdAt" : "2020-07-01T13:02:00Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@          case StepContinue(_) => fail\n          case StepStop(actualLogEntry) =>\n            actualLogEntry.hasTransactionRejectionEntry shouldBe true\n        }\n      }"
  },
  {
    "id" : "70cd3840-5566-4440-96f4-a928cab23566",
    "prId" : 6538,
    "comments" : [
      {
        "id" : "8a54a60d-df46-4b79-95b6-721d3414984c",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Could you also check that the same happens even if a time model is present as an input?",
        "createdAt" : "2020-07-01T10:03:24Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "39ed461d-977a-491c-be63-956fa6f1eba4",
        "parentId" : "8a54a60d-df46-4b79-95b6-721d3414984c",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "What do you mean? There must always be a time model present otherwise we cannot resolve the current configuration (i.e., `Configuration.decode` will throw in case there's no time model present). Outside of pre-execution we will always check against the time-model whereas with pre-execution we will only perform time-bound checks during post-execution by a different component.",
        "createdAt" : "2020-07-01T13:18:10Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a6cc4d3f-5220-465c-8016-9f4cd3d2e051",
        "parentId" : "8a54a60d-df46-4b79-95b6-721d3414984c",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Right, so this test is stricter than it should be, i.e. it should also provide for a configuration input because it would be valid for the tested code to fail without it. Alternatively, if this is the intended spec for the foreseeable future, I suggest changing the description into e.g. `continue without accessing the ledger configuration if record time is not available`.",
        "createdAt" : "2020-07-01T13:36:54Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0b9ced29-ce60-472d-9f1f-b8182b9304c0",
        "parentId" : "8a54a60d-df46-4b79-95b6-721d3414984c",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "It's the simplest you can write to test this code path ; ) OK, changed the description.",
        "createdAt" : "2020-07-01T13:48:35Z",
        "updatedAt" : "2020-07-01T13:48:35Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@    \"continue without accessing ledger configuration if record time is not available\" in {\n      val instance = createTransactionCommitter()\n      val context = new FakeCommitContext(recordTime = None)\n      val actual = instance.validateLedgerTime(context, aTransactionEntrySummary)\n"
  }
]