[
  {
    "id" : "efcb875c-36fe-42e0-9b3b-a761a0b9b24f",
    "prId" : 6739,
    "comments" : [
      {
        "id" : "a37bfcad-cb5d-4dc7-aa2e-6f439998a3b5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Isn't this masked by `subm` in the following statement?",
        "createdAt" : "2020-07-15T11:56:47Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03c01472-c61d-4e3a-b68f-168ab4ab8bb0",
        "parentId" : "a37bfcad-cb5d-4dc7-aa2e-6f439998a3b5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch. Thanks.",
        "createdAt" : "2020-07-15T16:16:04Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "56f970d2f86437d6e9b09a51bc1648fd3ae8e4c8",
    "line" : null,
    "diffHunk" : "@@ -188,6 +188,19 @@ object KVTest {\n       testState <- get[KVTestState]\n       submInfo = createSubmitterInfo(submitter, commandId, deduplicationTime, testState)\n       (tx, txMetaData) = transaction\n+      subm = keyValueSubmission.transactionToSubmission("
  },
  {
    "id" : "f2d902c0-85ae-4b23-a23b-aadf57e7929f",
    "prId" : 6739,
    "comments" : [
      {
        "id" : "7f9d682a-a9f5-4a7f-800b-af3edf34bd1b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Looks like this will end up masking the `subm` from before. Is it on purpose?",
        "createdAt" : "2020-07-15T11:57:26Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "56f970d2f86437d6e9b09a51bc1648fd3ae8e4c8",
    "line" : null,
    "diffHunk" : "@@ -188,6 +188,19 @@ object KVTest {\n       testState <- get[KVTestState]\n       submInfo = createSubmitterInfo(submitter, commandId, deduplicationTime, testState)\n       (tx, txMetaData) = transaction\n+      subm = keyValueSubmission.transactionToSubmission(\n+        submitterInfo = submInfo,\n+        meta = TransactionMeta(\n+          ledgerEffectiveTime = testState.recordTime.addMicros(letDelta.toNanos / 1000),\n+          workflowId = None,\n+          submissionTime = txMetaData.submissionTime,\n+          submissionSeed = submissionSeed,\n+          optUsedPackages = Some(txMetaData.usedPackages),\n+          optNodeSeeds = None,\n+          optByKeyNodes = None,\n+        ),\n+        submittedTransaction = tx\n+      )\n       subm = transactionToSubmission(submissionSeed, letDelta, testState, submInfo, tx, txMetaData)"
  },
  {
    "id" : "f4252660-d88a-4f1e-9d73-d07f2fc4bd32",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "6908a909-8799-4513-b7c9-55735c7fedd4",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      txMetaData: Transaction.Metadata): DamlSubmission =\r\n```",
        "createdAt" : "2020-07-13T16:37:46Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a583933-c9bb-4e06-881f-024f3843e85c",
        "parentId" : "6908a909-8799-4513-b7c9-55735c7fedd4",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T07:18:29Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,143 @@ object KVTest {\n       }\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)\n+\n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry\n+      val _ = KeyValueConsumption.logEntryToUpdate(entryId, logEntry)\n+\n+      entryId -> logEntry\n+    }\n+\n+  private def preExecute(\n+      damlSubmission: DamlSubmission): KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      preExecutionResult @ PreExecutionResult(_, successfulLogEntry, newState, _, _, _, _) = keyValueCommitting\n+        .preExecuteSubmission(\n+          defaultConfig = testState.defaultConfig,\n+          submission = damlSubmission,\n+          participantId = testState.participantId,\n+          inputState = damlSubmission.getInputDamlStateList.asScala.map { key =>\n+            {\n+              val damlStateValue = testState.damlState\n+                .get(key)\n+              key -> (damlStateValue -> damlStateValue\n+                .map(_.toByteString)\n+                .getOrElse(FingerprintPlaceholder))\n+            }\n+          }.toMap,\n+        )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that we can always process the log entry\n+      val _ =\n+        KeyValueConsumption.logEntryToUpdate(\n+          entryId,\n+          successfulLogEntry,\n+          recordTimeFromTimeUpdateLogEntry)\n+\n+      entryId -> preExecutionResult\n+    }\n+\n+  private[this] val defaultAdditionalContractDataTy = \"Party\"\n+  private[this] val engine = Engine.DevEngine()\n+  private[this] val keyValueCommitting = new KeyValueCommitting(engine, metrics)\n+  private[this] val keyValueSubmission = new KeyValueSubmission(metrics)\n+\n+  private[this] def createSubmitterInfo(\n+      submitter: Party,\n+      commandId: CommandId,\n+      deduplicationTime: Duration,\n+      testState: KVTestState): SubmitterInfo =\n+    SubmitterInfo(\n+      submitter = submitter,\n+      applicationId = Ref.LedgerString.assertFromString(\"test\"),\n+      commandId = commandId,\n+      deduplicateUntil = testState.recordTime.addMicros(deduplicationTime.toNanos / 1000).toInstant,\n+    )\n+\n+  private[this] def transactionToSubmission(\n+      submissionSeed: Hash,\n+      letDelta: Duration,\n+      testState: KVTestState,\n+      submInfo: SubmitterInfo,\n+      tx: SubmittedTransaction,\n+      txMetaData: Transaction.Metadata): DamlSubmission = {"
  },
  {
    "id" : "6ce85073-1175-4d39-b9a1-606479a30748",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "24f20db4-cd40-4bcd-90a6-09caeb809b81",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-13T16:37:58Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "30403a17-b557-469f-9f01-cad49306d4ed",
        "parentId" : "24f20db4-cd40-4bcd-90a6-09caeb809b81",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T07:18:24Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,143 @@ object KVTest {\n       }\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)\n+\n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry\n+      val _ = KeyValueConsumption.logEntryToUpdate(entryId, logEntry)\n+\n+      entryId -> logEntry\n+    }\n+\n+  private def preExecute(\n+      damlSubmission: DamlSubmission): KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      preExecutionResult @ PreExecutionResult(_, successfulLogEntry, newState, _, _, _, _) = keyValueCommitting\n+        .preExecuteSubmission(\n+          defaultConfig = testState.defaultConfig,\n+          submission = damlSubmission,\n+          participantId = testState.participantId,\n+          inputState = damlSubmission.getInputDamlStateList.asScala.map { key =>\n+            {\n+              val damlStateValue = testState.damlState\n+                .get(key)\n+              key -> (damlStateValue -> damlStateValue\n+                .map(_.toByteString)\n+                .getOrElse(FingerprintPlaceholder))\n+            }\n+          }.toMap,\n+        )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that we can always process the log entry\n+      val _ =\n+        KeyValueConsumption.logEntryToUpdate(\n+          entryId,\n+          successfulLogEntry,\n+          recordTimeFromTimeUpdateLogEntry)\n+\n+      entryId -> preExecutionResult\n+    }\n+\n+  private[this] val defaultAdditionalContractDataTy = \"Party\"\n+  private[this] val engine = Engine.DevEngine()\n+  private[this] val keyValueCommitting = new KeyValueCommitting(engine, metrics)\n+  private[this] val keyValueSubmission = new KeyValueSubmission(metrics)\n+\n+  private[this] def createSubmitterInfo(\n+      submitter: Party,\n+      commandId: CommandId,\n+      deduplicationTime: Duration,\n+      testState: KVTestState): SubmitterInfo =\n+    SubmitterInfo(\n+      submitter = submitter,\n+      applicationId = Ref.LedgerString.assertFromString(\"test\"),\n+      commandId = commandId,\n+      deduplicateUntil = testState.recordTime.addMicros(deduplicationTime.toNanos / 1000).toInstant,\n+    )\n+\n+  private[this] def transactionToSubmission(\n+      submissionSeed: Hash,\n+      letDelta: Duration,\n+      testState: KVTestState,\n+      submInfo: SubmitterInfo,\n+      tx: SubmittedTransaction,\n+      txMetaData: Transaction.Metadata): DamlSubmission = {\n+    keyValueSubmission.transactionToSubmission(\n+      submitterInfo = submInfo,\n+      meta = TransactionMeta(\n+        ledgerEffectiveTime = testState.recordTime.addMicros(letDelta.toNanos / 1000),\n+        workflowId = None,\n+        submissionTime = txMetaData.submissionTime,\n+        submissionSeed = submissionSeed,\n+        optUsedPackages = Some(txMetaData.usedPackages),\n+        optNodeSeeds = None,\n+        optByKeyNodes = None,\n+      ),\n+      tx = tx\n+    )\n+  }"
  },
  {
    "id" : "79866dc6-9f95-4d1f-9626-e1a11356f09a",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "a6776a42-8df7-4024-8d77-207da307301c",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      participantId: ParticipantId): DamlSubmission =\r\n```",
        "createdAt" : "2020-07-13T16:38:11Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "48a9b5c1-d49b-44c1-ac3f-9b71333e0c73",
        "parentId" : "a6776a42-8df7-4024-8d77-207da307301c",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T07:18:20Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,143 @@ object KVTest {\n       }\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)\n+\n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry\n+      val _ = KeyValueConsumption.logEntryToUpdate(entryId, logEntry)\n+\n+      entryId -> logEntry\n+    }\n+\n+  private def preExecute(\n+      damlSubmission: DamlSubmission): KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      preExecutionResult @ PreExecutionResult(_, successfulLogEntry, newState, _, _, _, _) = keyValueCommitting\n+        .preExecuteSubmission(\n+          defaultConfig = testState.defaultConfig,\n+          submission = damlSubmission,\n+          participantId = testState.participantId,\n+          inputState = damlSubmission.getInputDamlStateList.asScala.map { key =>\n+            {\n+              val damlStateValue = testState.damlState\n+                .get(key)\n+              key -> (damlStateValue -> damlStateValue\n+                .map(_.toByteString)\n+                .getOrElse(FingerprintPlaceholder))\n+            }\n+          }.toMap,\n+        )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that we can always process the log entry\n+      val _ =\n+        KeyValueConsumption.logEntryToUpdate(\n+          entryId,\n+          successfulLogEntry,\n+          recordTimeFromTimeUpdateLogEntry)\n+\n+      entryId -> preExecutionResult\n+    }\n+\n+  private[this] val defaultAdditionalContractDataTy = \"Party\"\n+  private[this] val engine = Engine.DevEngine()\n+  private[this] val keyValueCommitting = new KeyValueCommitting(engine, metrics)\n+  private[this] val keyValueSubmission = new KeyValueSubmission(metrics)\n+\n+  private[this] def createSubmitterInfo(\n+      submitter: Party,\n+      commandId: CommandId,\n+      deduplicationTime: Duration,\n+      testState: KVTestState): SubmitterInfo =\n+    SubmitterInfo(\n+      submitter = submitter,\n+      applicationId = Ref.LedgerString.assertFromString(\"test\"),\n+      commandId = commandId,\n+      deduplicateUntil = testState.recordTime.addMicros(deduplicationTime.toNanos / 1000).toInstant,\n+    )\n+\n+  private[this] def transactionToSubmission(\n+      submissionSeed: Hash,\n+      letDelta: Duration,\n+      testState: KVTestState,\n+      submInfo: SubmitterInfo,\n+      tx: SubmittedTransaction,\n+      txMetaData: Transaction.Metadata): DamlSubmission = {\n+    keyValueSubmission.transactionToSubmission(\n+      submitterInfo = submInfo,\n+      meta = TransactionMeta(\n+        ledgerEffectiveTime = testState.recordTime.addMicros(letDelta.toNanos / 1000),\n+        workflowId = None,\n+        submissionTime = txMetaData.submissionTime,\n+        submissionSeed = submissionSeed,\n+        optUsedPackages = Some(txMetaData.usedPackages),\n+        optNodeSeeds = None,\n+        optByKeyNodes = None,\n+      ),\n+      tx = tx\n+    )\n+  }\n+\n+  private[this] def createPartySubmission(\n+      subId: String,\n+      hint: String,\n+      participantId: ParticipantId): DamlSubmission = {"
  },
  {
    "id" : "b5bfa7fe-be0c-43ab-b648-8f5a537bec79",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "c04738b8-0a6c-4f21-a085-7031bca66d39",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-13T16:38:18Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a932d74c-4f04-4f3e-851f-8008b97ccbf0",
        "parentId" : "c04738b8-0a6c-4f21-a085-7031bca66d39",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T07:18:14Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,143 @@ object KVTest {\n       }\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)\n+\n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry\n+      val _ = KeyValueConsumption.logEntryToUpdate(entryId, logEntry)\n+\n+      entryId -> logEntry\n+    }\n+\n+  private def preExecute(\n+      damlSubmission: DamlSubmission): KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      preExecutionResult @ PreExecutionResult(_, successfulLogEntry, newState, _, _, _, _) = keyValueCommitting\n+        .preExecuteSubmission(\n+          defaultConfig = testState.defaultConfig,\n+          submission = damlSubmission,\n+          participantId = testState.participantId,\n+          inputState = damlSubmission.getInputDamlStateList.asScala.map { key =>\n+            {\n+              val damlStateValue = testState.damlState\n+                .get(key)\n+              key -> (damlStateValue -> damlStateValue\n+                .map(_.toByteString)\n+                .getOrElse(FingerprintPlaceholder))\n+            }\n+          }.toMap,\n+        )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that we can always process the log entry\n+      val _ =\n+        KeyValueConsumption.logEntryToUpdate(\n+          entryId,\n+          successfulLogEntry,\n+          recordTimeFromTimeUpdateLogEntry)\n+\n+      entryId -> preExecutionResult\n+    }\n+\n+  private[this] val defaultAdditionalContractDataTy = \"Party\"\n+  private[this] val engine = Engine.DevEngine()\n+  private[this] val keyValueCommitting = new KeyValueCommitting(engine, metrics)\n+  private[this] val keyValueSubmission = new KeyValueSubmission(metrics)\n+\n+  private[this] def createSubmitterInfo(\n+      submitter: Party,\n+      commandId: CommandId,\n+      deduplicationTime: Duration,\n+      testState: KVTestState): SubmitterInfo =\n+    SubmitterInfo(\n+      submitter = submitter,\n+      applicationId = Ref.LedgerString.assertFromString(\"test\"),\n+      commandId = commandId,\n+      deduplicateUntil = testState.recordTime.addMicros(deduplicationTime.toNanos / 1000).toInstant,\n+    )\n+\n+  private[this] def transactionToSubmission(\n+      submissionSeed: Hash,\n+      letDelta: Duration,\n+      testState: KVTestState,\n+      submInfo: SubmitterInfo,\n+      tx: SubmittedTransaction,\n+      txMetaData: Transaction.Metadata): DamlSubmission = {\n+    keyValueSubmission.transactionToSubmission(\n+      submitterInfo = submInfo,\n+      meta = TransactionMeta(\n+        ledgerEffectiveTime = testState.recordTime.addMicros(letDelta.toNanos / 1000),\n+        workflowId = None,\n+        submissionTime = txMetaData.submissionTime,\n+        submissionSeed = submissionSeed,\n+        optUsedPackages = Some(txMetaData.usedPackages),\n+        optNodeSeeds = None,\n+        optByKeyNodes = None,\n+      ),\n+      tx = tx\n+    )\n+  }\n+\n+  private[this] def createPartySubmission(\n+      subId: String,\n+      hint: String,\n+      participantId: ParticipantId): DamlSubmission = {\n+    keyValueSubmission.partyToSubmission(\n+      Ref.LedgerString.assertFromString(subId),\n+      Some(hint),\n+      None,\n+      participantId)\n+  }"
  },
  {
    "id" : "7e6212d6-8625-4c96-a1b7-ce3dd090363f",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "db0d3c69-73be-442b-b0a4-e81da3d65c2f",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please verify that the rejection log entry can also be processed.",
        "createdAt" : "2020-07-13T16:39:24Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5c0a7dd9-abef-4e1b-ba0d-1a9fa40668b1",
        "parentId" : "db0d3c69-73be-442b-b0a4-e81da3d65c2f",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T07:18:10Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : 316,
    "diffHunk" : "@@ -276,4 +257,143 @@ object KVTest {\n       }\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)\n+\n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry\n+      val _ = KeyValueConsumption.logEntryToUpdate(entryId, logEntry)\n+\n+      entryId -> logEntry\n+    }\n+\n+  private def preExecute(\n+      damlSubmission: DamlSubmission): KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      preExecutionResult @ PreExecutionResult(_, successfulLogEntry, newState, _, _, _, _) = keyValueCommitting\n+        .preExecuteSubmission(\n+          defaultConfig = testState.defaultConfig,\n+          submission = damlSubmission,\n+          participantId = testState.participantId,\n+          inputState = damlSubmission.getInputDamlStateList.asScala.map { key =>\n+            {\n+              val damlStateValue = testState.damlState\n+                .get(key)\n+              key -> (damlStateValue -> damlStateValue\n+                .map(_.toByteString)\n+                .getOrElse(FingerprintPlaceholder))\n+            }\n+          }.toMap,\n+        )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that we can always process the log entry\n+      val _ =\n+        KeyValueConsumption.logEntryToUpdate(\n+          entryId,\n+          successfulLogEntry,\n+          recordTimeFromTimeUpdateLogEntry)\n+"
  },
  {
    "id" : "54431005-ee46-46f5-9e42-c5f8b217e22d",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "7aa009fe-9742-415e-b26c-d87e3d09ff71",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "It would be worth checking here that the keys in the read-set are a subset of the input keys.",
        "createdAt" : "2020-07-13T16:40:59Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aef80d12-e0df-47cc-bdf7-a8792605b785",
        "parentId" : "7aa009fe-9742-415e-b26c-d87e3d09ff71",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T07:18:03Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : 316,
    "diffHunk" : "@@ -276,4 +257,143 @@ object KVTest {\n       }\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)\n+\n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry\n+      val _ = KeyValueConsumption.logEntryToUpdate(entryId, logEntry)\n+\n+      entryId -> logEntry\n+    }\n+\n+  private def preExecute(\n+      damlSubmission: DamlSubmission): KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      preExecutionResult @ PreExecutionResult(_, successfulLogEntry, newState, _, _, _, _) = keyValueCommitting\n+        .preExecuteSubmission(\n+          defaultConfig = testState.defaultConfig,\n+          submission = damlSubmission,\n+          participantId = testState.participantId,\n+          inputState = damlSubmission.getInputDamlStateList.asScala.map { key =>\n+            {\n+              val damlStateValue = testState.damlState\n+                .get(key)\n+              key -> (damlStateValue -> damlStateValue\n+                .map(_.toByteString)\n+                .getOrElse(FingerprintPlaceholder))\n+            }\n+          }.toMap,\n+        )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that we can always process the log entry\n+      val _ =\n+        KeyValueConsumption.logEntryToUpdate(\n+          entryId,\n+          successfulLogEntry,\n+          recordTimeFromTimeUpdateLogEntry)\n+"
  },
  {
    "id" : "7edbc6aa-5b8e-4c2b-9fa4-a68c16b89d67",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "eaa3d239-8947-4fbd-937b-4d26721a59cc",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n  private val MinMaxRecordTimeDelta: Duration = Duration.ofSeconds(1)\r\n```",
        "createdAt" : "2020-07-13T16:50:45Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "17a9ce47-ab65-44ba-9ee7-0399810dc997",
        "parentId" : "eaa3d239-8947-4fbd-937b-4d26721a59cc",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T07:17:39Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,143 @@ object KVTest {\n       }\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)"
  },
  {
    "id" : "3224f46f-9779-4bf5-929d-b7391f83dfee",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "6309658f-58a1-41f8-b8a4-cbc397c82a02",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "For consistency you might want to remove all occurrences of `mrtDelta` parameter to `minMaxRecordTimeDelta`.",
        "createdAt" : "2020-07-14T08:19:03Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7800fb55-b298-4b57-8d2c-6c32306f8999",
        "parentId" : "6309658f-58a1-41f8-b8a4-cbc397c82a02",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T09:12:15Z",
        "updatedAt" : "2020-07-14T09:12:15Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -199,59 +172,63 @@ object KVTest {\n       submitter: Party,\n       submissionSeed: crypto.Hash,\n       cmds: Command*,\n-  ): KVTest[(SubmittedTransaction, Tx.Metadata)] =\n-    runCommand(submitter, submissionSeed, defaultAdditionalContractDataTy, cmds: _*)\n+  ): KVTest[(SubmittedTransaction, Transaction.Metadata)] =\n+    runCommand(submitter, submissionSeed, DefaultAdditionalContractDataTy, cmds: _*)\n \n   def submitTransaction(\n       submitter: Party,\n-      transaction: (SubmittedTransaction, Tx.Metadata),\n+      transaction: (SubmittedTransaction, Transaction.Metadata),\n       submissionSeed: crypto.Hash,\n       letDelta: Duration = Duration.ZERO,\n       commandId: CommandId = randomLedgerString,\n       deduplicationTime: Duration = Duration.ofDays(1)): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n     for {\n       testState <- get[KVTestState]\n-      submInfo = SubmitterInfo(\n-        submitter = submitter,\n-        applicationId = Ref.LedgerString.assertFromString(\"test\"),\n-        commandId = commandId,\n-        deduplicateUntil =\n-          testState.recordTime.addMicros(deduplicationTime.toNanos / 1000).toInstant,\n-      )\n+      submInfo = createSubmitterInfo(submitter, commandId, deduplicationTime, testState)\n       (tx, txMetaData) = transaction\n-      subm = keyValueSubmission.transactionToSubmission(\n-        submitterInfo = submInfo,\n-        meta = TransactionMeta(\n-          ledgerEffectiveTime = testState.recordTime.addMicros(letDelta.toNanos / 1000),\n-          workflowId = None,\n-          submissionTime = txMetaData.submissionTime,\n-          submissionSeed = submissionSeed,\n-          optUsedPackages = Some(txMetaData.usedPackages),\n-          optNodeSeeds = None,\n-          optByKeyNodes = None,\n-        ),\n-        tx = tx\n-      )\n+      subm = transactionToSubmission(submissionSeed, letDelta, testState, submInfo, tx, txMetaData)\n       result <- submit(subm)\n     } yield result\n \n-  val minMRTDelta: Duration = Duration.ofSeconds(1)\n+  def preExecuteTransaction(\n+      submitter: Party,\n+      transaction: (SubmittedTransaction, Transaction.Metadata),\n+      submissionSeed: crypto.Hash,\n+      letDelta: Duration = Duration.ZERO,\n+      commandId: CommandId = randomLedgerString,\n+      deduplicationTime: Duration = Duration.ofDays(1))\n+    : KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      submInfo = createSubmitterInfo(submitter, commandId, deduplicationTime, testState)\n+      (tx, txMetaData) = transaction\n+      subm = transactionToSubmission(submissionSeed, letDelta, testState, submInfo, tx, txMetaData)\n+      result <- preExecute(subm)\n+    } yield result\n \n   def submitConfig(\n       configModify: Configuration => Configuration,\n       submissionId: SubmissionId = randomLedgerString,\n-      mrtDelta: Duration = minMRTDelta\n+      mrtDelta: Duration = MinMaxRecordTimeDelta"
  },
  {
    "id" : "cbe218bf-6a8e-4fe4-a553-b9b9a9d17d38",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "0387f98c-fc68-4fba-b9aa-ed05069d248c",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "To improve readability, please move this transformation logic into a helper function.",
        "createdAt" : "2020-07-14T08:19:59Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b43401ad-13a6-4e58-b0cc-42fe8b0bf0fd",
        "parentId" : "0387f98c-fc68-4fba-b9aa-ed05069d248c",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T09:12:03Z",
        "updatedAt" : "2020-07-14T09:12:04Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,152 @@ object KVTest {\n       }\n     } yield result\n \n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry\n+      val _ = KeyValueConsumption.logEntryToUpdate(entryId, logEntry)\n+\n+      entryId -> logEntry\n+    }\n+\n+  private def preExecute(\n+      damlSubmission: DamlSubmission): KVTest[(DamlLogEntryId, PreExecutionResult)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      inputKeys = damlSubmission.getInputDamlStateList.asScala\n+      preExecutionResult @ PreExecutionResult(\n+        readSet,\n+        successfulLogEntry,\n+        newState,\n+        outOfTimeBoundsLogEntry,\n+        _,\n+        _,\n+        _) = keyValueCommitting\n+        .preExecuteSubmission(\n+          defaultConfig = testState.defaultConfig,\n+          submission = damlSubmission,\n+          participantId = testState.participantId,\n+          inputState = inputKeys.map { key =>"
  },
  {
    "id" : "f356e96b-f0ea-46e6-a52d-2770e4816e81",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "d7cf1a56-c64b-408a-8e2a-dd8a77fd4ba6",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      // Verify that we can always process the log entry.\r\n```",
        "createdAt" : "2020-07-14T08:23:20Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,152 @@ object KVTest {\n       }\n     } yield result\n \n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)\n+\n+  private def submit(submission: DamlSubmission): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+    for {\n+      testState <- get[KVTestState]\n+      entryId <- freshEntryId\n+      (logEntry, newState) = keyValueCommitting.processSubmission(\n+        entryId = entryId,\n+        recordTime = testState.recordTime,\n+        defaultConfig = testState.defaultConfig,\n+        submission = submission,\n+        participantId = testState.participantId,\n+        inputState = submission.getInputDamlStateList.asScala.map { key =>\n+          key -> testState.damlState.get(key)\n+        }.toMap,\n+      )\n+      _ <- addDamlState(newState)\n+    } yield {\n+      // Verify that all state touched matches with \"submissionOutputs\".\n+      assert(\n+        newState.keySet subsetOf keyValueCommitting.submissionOutputs(submission)\n+      )\n+      // Verify that we can always process the log entry"
  },
  {
    "id" : "fd45767a-ea87-4a96-8f5c-6c02eb7eb307",
    "prId" : 6671,
    "comments" : [
      {
        "id" : "b4eb368d-594e-4475-8989-0bf762f4bf81",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please move this next to the `val`s where it's being used (i.e., `keyValueCommitting`, etc.).",
        "createdAt" : "2020-07-14T08:24:16Z",
        "updatedAt" : "2020-07-14T09:10:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1973a63a-9bf9-4e79-9ed4-b18743def632",
        "parentId" : "b4eb368d-594e-4475-8989-0bf762f4bf81",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-14T09:11:43Z",
        "updatedAt" : "2020-07-14T09:11:43Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "86586b48939830545d9f47df569ddbd0dd9fdc46",
    "line" : null,
    "diffHunk" : "@@ -276,4 +257,152 @@ object KVTest {\n       }\n     } yield result\n \n+  private[kvutils] val metrics = new Metrics(new MetricRegistry)"
  },
  {
    "id" : "8f2ac619-3774-452d-855d-eae6072e3dea",
    "prId" : 5216,
    "comments" : [
      {
        "id" : "e3c1d494-e755-4f36-95ce-02337ddd1460",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "what was this needed for? configuration? Any thoughts on how we should handle timing out other submission types?",
        "createdAt" : "2020-03-27T14:17:15Z",
        "updatedAt" : "2020-03-27T15:08:38Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0b0254d5-7f28-4c40-9219-bfd96c3d0e07",
        "parentId" : "e3c1d494-e755-4f36-95ce-02337ddd1460",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Right now:\r\n- Only the config change request still has an MRT, party allocations and package uploads don't have any kind of timeout.\r\n- There is no limit to how large the user can set the MRT to.\r\n- The submission should be rejected by the ledger if record time > MRT.\r\n\r\nI'm not sure how much value this has in practice however:\r\n- We're going to remove heartbeats, and record times are not monotonically increasing anymore. So the user will not know *exactly* when the the request timed out.\r\n- The config change request has a generation number that can be used to prevent race conditions.\r\n- I would imagine that the ledger config is only changed very infrequently (if at all), and only by a small set of trusted admins.\r\n\r\nSo maybe we should remove the MRT on config change requests? @dajmaki @gerolf-da ",
        "createdAt" : "2020-03-27T15:08:15Z",
        "updatedAt" : "2020-03-27T15:08:38Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "06ac8e1f40676caa1f52730059d896e20643c665",
    "line" : 13,
    "diffHunk" : "@@ -237,6 +235,8 @@ object KVTest {\n       result <- submit(subm)\n     } yield result\n \n+  val minMRTDelta: Duration = Duration.ofSeconds(1)"
  },
  {
    "id" : "ed853f7d-7f52-4b9d-a4e2-47f1f3a8d908",
    "prId" : 5100,
    "comments" : [
      {
        "id" : "216a1e60-5480-4af9-a9be-a48a39212432",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "we can probably remove this as well and furthermore remove `maxRecordTime` from https://github.com/digital-asset/daml/blob/f67c32b002fd28a68e6cfd279ec1782db4a07336/ledger/participant-state/kvutils/src/main/scala/com/daml/ledger/participant/state/kvutils/KeyValueSubmission.scala#L121-L122",
        "createdAt" : "2020-03-20T17:40:01Z",
        "updatedAt" : "2020-03-25T08:01:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d421ae1a437d89063df1c3e40078f52885762eaf",
    "line" : null,
    "diffHunk" : "@@ -236,7 +234,7 @@ object KVTest {\n   def submitConfig(\n       configModify: Configuration => Configuration,\n       submissionId: SubmissionId = randomLedgerString,\n-      mrtDelta: Duration = minMRTDelta\n+      mrtDelta: Duration = minMRTDelta,"
  },
  {
    "id" : "0e364b4c-a883-43f8-ad93-69f2880fde23",
    "prId" : 4722,
    "comments" : [
      {
        "id" : "02c88959-5bc4-4ca4-a3ad-9bbc548460dc",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Gonna change `maxRecordTime` to an `Instant` too? 🙃 ",
        "createdAt" : "2020-02-27T13:11:51Z",
        "updatedAt" : "2020-03-09T16:23:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ecd5f47ac6267722864002b678eeaa67142ff5cd",
    "line" : null,
    "diffHunk" : "@@ -199,14 +199,16 @@ object KVTest {\n       tx: SubmittedTransaction,\n       mrtDelta: Duration = minMRTDelta,\n       letDelta: Duration = Duration.ZERO,\n-      commandId: CommandId = randomLedgerString): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n+      commandId: CommandId = randomLedgerString,\n+      ttlDelta: Duration = Duration.ofDays(1L)): KVTest[(DamlLogEntryId, DamlLogEntry)] =\n     for {\n       testState <- get[KVTestState]\n       submInfo = SubmitterInfo(\n         submitter = submitter,\n         applicationId = Ref.LedgerString.assertFromString(\"test\"),\n         commandId = commandId,\n-        maxRecordTime = testState.recordTime.addMicros(mrtDelta.toNanos / 1000)\n+        maxRecordTime = testState.recordTime.addMicros(mrtDelta.toNanos / 1000),\n+        ttl = testState.recordTime.addMicros(ttlDelta.toNanos / 1000).toInstant,"
  }
]