[
  {
    "id" : "690aab5e-ea52-4108-b4dd-222b4c8fbdc7",
    "prId" : 7063,
    "comments" : [
      {
        "id" : "081fed58-33e7-4663-8b8d-411dac2e64c6",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "I'd consider being a bit more audacious and:\r\n\r\n- Removing the execution context from the constructor.\r\n- Perhaps even removing `validate` that seems to be used in tests only (and possibly replacing it with a local or shared test utility) or pass the execution context there too.",
        "createdAt" : "2020-08-10T07:18:52Z",
        "updatedAt" : "2020-08-10T07:49:53Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "db433602-5612-4e06-ac7e-2c70208cae02",
        "parentId" : "081fed58-33e7-4663-8b8d-411dac2e64c6",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'd like to do that but didn't want to break compatibility. If you're happy for me to do so, I'm on it.",
        "createdAt" : "2020-08-10T07:49:36Z",
        "updatedAt" : "2020-08-10T07:49:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f0f6c86-0766-4dc6-bfd7-bda0ca577e3d",
        "parentId" : "081fed58-33e7-4663-8b8d-411dac2e64c6",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Looking into this, this means a larger breaking change, adding `implicit executionContext` to all methods of `LedgerStateAccess` and `LedgerStateOperations`.\r\n\r\nI think this is a good idea, personally, but it would break source compatibility for implementors, and so I don't want to do it here. I'm happy to look at it separately.",
        "createdAt" : "2020-08-10T07:59:06Z",
        "updatedAt" : "2020-08-10T07:59:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3219611b-c175-4c1a-8318-d2a0a6d6895d",
        "parentId" : "081fed58-33e7-4663-8b8d-411dac2e64c6",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Yes you're right, better to evaluate separately.",
        "createdAt" : "2020-08-10T08:17:44Z",
        "updatedAt" : "2020-08-10T08:17:45Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "18d594e5fd16fa8e21875d091137dd6808a8611b",
    "line" : 16,
    "diffHunk" : "@@ -75,15 +75,18 @@ class SubmissionValidator[LogResult] private[validator] (\n       participantId: ParticipantId,\n   ): Future[Either[ValidationFailed, LogResult]] =\n     newLoggingContext { implicit loggingContext =>\n-      validateAndCommitWithLoggingContext(envelope, correlationId, recordTime, participantId)\n+      validateAndCommitWithContext(envelope, correlationId, recordTime, participantId)\n     }\n \n-  private[validator] def validateAndCommitWithLoggingContext(\n+  private[validator] def validateAndCommitWithContext(\n       envelope: Bytes,\n       correlationId: String,\n       recordTime: Timestamp,\n       participantId: ParticipantId,\n-  )(implicit loggingContext: LoggingContext): Future[Either[ValidationFailed, LogResult]] =\n+  )(\n+      implicit executionContext: ExecutionContext,"
  },
  {
    "id" : "45690e8a-fc7e-41eb-a2c5-1cec0fce4351",
    "prId" : 6428,
    "comments" : [
      {
        "id" : "78119e1e-ee9f-4178-8b36-13978a0b7f90",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please remove this. The `Engine` instance is already passed to the below factory method hence you only need to change the default parameter value.",
        "createdAt" : "2020-06-19T14:21:06Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d79f615f-b5d5-48f8-b205-b7d4e349cdbf",
        "parentId" : "78119e1e-ee9f-4178-8b36-13978a0b7f90",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch. I take care of that. ",
        "createdAt" : "2020-06-19T15:02:34Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2832ff8457fca90adb26dc3d71314a458f268fd",
    "line" : null,
    "diffHunk" : "@@ -293,17 +293,22 @@ class SubmissionValidator[LogResult] private[validator] (\n }\n \n object SubmissionValidator {\n+\n   type RawKeyValuePairs = Seq[(Bytes, Bytes)]\n \n   type StateMap = Map[DamlStateKey, DamlStateValue]\n   type LogEntryAndState = (DamlLogEntry, StateMap)\n \n+  // FIXME: https://github.com/digital-asset/daml/issues/5164\n+  // This should be made configurable\n+  private[this] val engineConfig = Engine.DevConfig"
  },
  {
    "id" : "a85f9831-3ea1-4470-b74c-33860f29ad34",
    "prId" : 5728,
    "comments" : [
      {
        "id" : "bd90b355-0838-48a1-8c2f-a1c54315d4f1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@miklos-da, @mziolekda: Instead of allocating the `Engine` object here, it is passed in so that it can be shared between ledger api server and kv committer.",
        "createdAt" : "2020-04-29T11:31:29Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "844a9b82-275b-4774-8f26-7cd02865fb1b",
        "parentId" : "bd90b355-0838-48a1-8c2f-a1c54315d4f1",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Sounds good.",
        "createdAt" : "2020-04-30T08:20:52Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : 4,
    "diffHunk" : "@@ -312,16 +312,16 @@ object SubmissionValidator {\n   type StateMap = Map[DamlStateKey, DamlStateValue]\n   type LogEntryAndState = (DamlLogEntry, StateMap)\n \n-  private lazy val engine = Engine()"
  },
  {
    "id" : "c339882d-60b9-4884-9368-e329622bbc39",
    "prId" : 5728,
    "comments" : [
      {
        "id" : "4b595c51-2453-46af-9dd2-0418c41c11de",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I'd prefer this to be added with a default parameter e.g. before `stateValueCache` parameter in this factory method. That way implementors already using `SubmissionValidator` but not wanting to share an `Engine` instance do not need to modify their code to compile after this change.",
        "createdAt" : "2020-04-30T08:26:15Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9e5f3514-ffa7-40a6-8be1-1e855b2c3980",
        "parentId" : "4b595c51-2453-46af-9dd2-0418c41c11de",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in feafc56.",
        "createdAt" : "2020-04-30T08:49:58Z",
        "updatedAt" : "2020-04-30T13:47:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4ee9cefa20fdce93a350b26379d23a1c3164e4fe",
    "line" : null,
    "diffHunk" : "@@ -312,16 +312,16 @@ object SubmissionValidator {\n   type StateMap = Map[DamlStateKey, DamlStateValue]\n   type LogEntryAndState = (DamlLogEntry, StateMap)\n \n-  private lazy val engine = Engine()\n-\n   def create[LogResult](\n+      engine: Engine,"
  },
  {
    "id" : "618ec1bd-6146-46b3-930d-cadb2ffe73b7",
    "prId" : 5426,
    "comments" : [
      {
        "id" : "bc8763dc-2ba0-4771-a20b-83cb834350a5",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Would it be possible to inject this cache instance, please? I understand that with a maximum weight there will be no caching effectively. Also, we may want to have more sophisticated caching logic applied such as one only caching packages, etc.",
        "createdAt" : "2020-04-03T15:33:27Z",
        "updatedAt" : "2020-04-06T15:24:56Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3d02b4d5980332a10e8ba6b26dda8c844e1a6e87",
    "line" : null,
    "diffHunk" : "@@ -46,14 +48,23 @@ class SubmissionValidator[LogResult](\n         Map[DamlStateKey, Option[DamlStateValue]],\n     ) => LogEntryAndState,\n     allocateLogEntryId: () => DamlLogEntryId,\n-    checkForMissingInputs: Boolean = false,\n+    checkForMissingInputs: Boolean,\n+    maximumStateValueCacheSize: Long,\n     metricRegistry: MetricRegistry,\n )(implicit executionContext: ExecutionContext) {\n \n   private val logger = ContextualizedLogger.get(getClass)\n \n   private val timedLedgerStateAccess = new TimedLedgerStateAccess(ledgerStateAccess)\n \n+  private val stateValueCache = CacheBuilder"
  },
  {
    "id" : "980370c2-087a-432c-aeca-91971c0f93e6",
    "prId" : 5426,
    "comments" : [
      {
        "id" : "6af0fccc-8b14-4a44-aa30-ab566490d70a",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "You can probably spare a couple of `L`s here",
        "createdAt" : "2020-04-03T16:43:38Z",
        "updatedAt" : "2020-04-06T15:24:56Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eb2f5a61-809d-41f7-ac7e-6ebab57ee5fa",
        "parentId" : "6af0fccc-8b14-4a44-aa30-ab566490d70a",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Tried that; WartRemover hated it. 😞 ",
        "createdAt" : "2020-04-06T07:13:08Z",
        "updatedAt" : "2020-04-06T15:24:56Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3d02b4d5980332a10e8ba6b26dda8c844e1a6e87",
    "line" : null,
    "diffHunk" : "@@ -303,16 +318,20 @@ object SubmissionValidator {\n \n   private lazy val engine = Engine()\n \n+  val DefaultMaximumStateValueCacheSize: Long = 64L * 1024L * 1024L"
  },
  {
    "id" : "fe885a54-6c49-404b-8444-8dbbc2d8cd5e",
    "prId" : 5292,
    "comments" : [
      {
        "id" : "059629b4-54d4-4d4a-a550-b0461c07c173",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Shouldn't these be `acquire_transaction_lock` and `release_transaction_lock` instead? I.e., acquiring or releasing a transaction doesn't sound right.",
        "createdAt" : "2020-03-31T08:28:35Z",
        "updatedAt" : "2020-03-31T09:06:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "794ba7fd-4533-4c3b-b0f8-3c2feb0d30a3",
        "parentId" : "059629b4-54d4-4d4a-a550-b0461c07c173",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "@miklos-da I think @SamirTalwar-DA wanted to call the metric in a way that is independent from the actual acquisition mechanism and I tend to agree.",
        "createdAt" : "2020-03-31T08:53:58Z",
        "updatedAt" : "2020-03-31T09:06:03Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d06a0fd-242e-4dc6-a325-668bc454b1d9",
        "parentId" : "059629b4-54d4-4d4a-a550-b0461c07c173",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done. 🙂 ",
        "createdAt" : "2020-03-31T09:05:09Z",
        "updatedAt" : "2020-03-31T09:06:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7a1bd7a8dcd5f6bad150e17165cd9c8b0347fe4d",
    "line" : null,
    "diffHunk" : "@@ -215,23 +223,55 @@ class SubmissionValidator[LogResult](\n               logger.error(\"Unexpected failure during submission validation.\", exception)\n               Success(Left(ValidationError(exception.getLocalizedMessage)))\n           }\n-        }\n       case _ =>\n         Future.successful(\n           Left(ValidationError(s\"Failed to parse submission, correlationId=$correlationId\")))\n     }\n \n   private def flattenInputStates(\n-      inputs: Map[DamlStateKey, Option[DamlStateValue]]): Map[DamlStateKey, DamlStateValue] =\n+      inputs: Map[DamlStateKey, Option[DamlStateValue]]\n+  ): Map[DamlStateKey, DamlStateValue] =\n     inputs.collect {\n       case (key, Some(value)) => key -> value\n     }\n \n-  object Metrics {\n+  private final class TimedLedgerStateAccess(delegate: LedgerStateAccess[LogResult])\n+      extends LedgerStateAccess[LogResult] {\n+    override def inTransaction[T](\n+        body: LedgerStateOperations[LogResult] => Future[T]\n+    ): Future[T] = {\n+      val acquireStopped = new AtomicBoolean(false)\n+      val acquireTimer = Metrics.acquireTransaction.time()\n+      delegate\n+        .inTransaction { operations =>\n+          if (acquireStopped.compareAndSet(false, true)) {\n+            acquireTimer.stop()\n+          }\n+          body(operations)\n+            .transform(result => Success((result, Metrics.releaseTransaction.time())))\n+        }\n+        .transform {\n+          case Success((result, releaseTimer)) =>\n+            releaseTimer.stop()\n+            result\n+          case Failure(exception) =>\n+            if (acquireStopped.compareAndSet(false, true)) {\n+              acquireTimer.stop()\n+            }\n+            Failure(exception)\n+        }\n+    }\n+  }\n+\n+  private object Metrics {\n     private val prefix = MetricRegistry.name(\"daml\", \"kvutils\", \"submission\", \"validator\")\n \n     val openEnvelope: Timer =\n       metricRegistry.timer(MetricRegistry.name(prefix, \"open_envelope\"))\n+    val acquireTransaction: Timer =\n+      metricRegistry.timer(MetricRegistry.name(prefix, \"acquire_transaction\"))"
  },
  {
    "id" : "da4b003e-f628-4f6d-a5f0-db76556ed5dc",
    "prId" : 5292,
    "comments" : [
      {
        "id" : "1d2ab9be-0c1b-4372-8b81-826054940b19",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "@SamirTalwar-DA I guess that if the failure case stops the time, then the inTransaction one won't anymore; on the other hand the inTransaction body might stop it, the transaction might still fail later and then you need to make sure it's not already stopped in the failure halding code (in order not to record a false later time). I think this is the reason why you need to atomic flag but regardless pls. document it in a comment.",
        "createdAt" : "2020-03-31T08:45:33Z",
        "updatedAt" : "2020-03-31T09:06:03Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8b61cc6c-ab97-42d2-9429-d154aba4be9e",
        "parentId" : "1d2ab9be-0c1b-4372-8b81-826054940b19",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yes, good call. I'll also make it a separate timer.",
        "createdAt" : "2020-03-31T08:59:53Z",
        "updatedAt" : "2020-03-31T09:06:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03b1407b-cc40-4516-b2e5-f39d0b7da8da",
        "parentId" : "1d2ab9be-0c1b-4372-8b81-826054940b19",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Even better indeed",
        "createdAt" : "2020-03-31T10:01:01Z",
        "updatedAt" : "2020-03-31T10:01:01Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7a1bd7a8dcd5f6bad150e17165cd9c8b0347fe4d",
    "line" : null,
    "diffHunk" : "@@ -215,23 +223,55 @@ class SubmissionValidator[LogResult](\n               logger.error(\"Unexpected failure during submission validation.\", exception)\n               Success(Left(ValidationError(exception.getLocalizedMessage)))\n           }\n-        }\n       case _ =>\n         Future.successful(\n           Left(ValidationError(s\"Failed to parse submission, correlationId=$correlationId\")))\n     }\n \n   private def flattenInputStates(\n-      inputs: Map[DamlStateKey, Option[DamlStateValue]]): Map[DamlStateKey, DamlStateValue] =\n+      inputs: Map[DamlStateKey, Option[DamlStateValue]]\n+  ): Map[DamlStateKey, DamlStateValue] =\n     inputs.collect {\n       case (key, Some(value)) => key -> value\n     }\n \n-  object Metrics {\n+  private final class TimedLedgerStateAccess(delegate: LedgerStateAccess[LogResult])\n+      extends LedgerStateAccess[LogResult] {\n+    override def inTransaction[T](\n+        body: LedgerStateOperations[LogResult] => Future[T]\n+    ): Future[T] = {\n+      val acquireStopped = new AtomicBoolean(false)"
  },
  {
    "id" : "c9a2d0e5-460e-4e98-bdbf-c4ee2fe34d3f",
    "prId" : 4964,
    "comments" : [
      {
        "id" : "a09dbad6-2b6a-47e4-b2af-a8bf73b85e70",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Has this a chance to happen or only if it is a bug? If so we should probably log an error",
        "createdAt" : "2020-03-12T17:37:50Z",
        "updatedAt" : "2020-03-26T15:34:58Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "150be0a7-428b-4152-972c-1ba26efc721f",
        "parentId" : "a09dbad6-2b6a-47e4-b2af-a8bf73b85e70",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "It would be an implementation error so logging an error is appropriate here.",
        "createdAt" : "2020-03-16T09:32:10Z",
        "updatedAt" : "2020-03-26T15:34:58Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8e6cc5c5-a4eb-4c7f-aaf3-234b47757017",
        "parentId" : "a09dbad6-2b6a-47e4-b2af-a8bf73b85e70",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "This is here only temporarily until the validator implementation lands in another PR.",
        "createdAt" : "2020-03-23T10:10:27Z",
        "updatedAt" : "2020-03-26T15:34:58Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6940f7eb-8a0b-4b6b-bfd0-a3925eadbd16",
        "parentId" : "a09dbad6-2b6a-47e4-b2af-a8bf73b85e70",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I'd like to revisit my previous statement: `SubmissionValidator` should work here for a batch as well, e.g., validating each submission serially (i.e., just recursively calling `runValidation`, possibly stopping after one recursive call). The parallel validator can do something more clever independent from this.",
        "createdAt" : "2020-03-25T16:46:54Z",
        "updatedAt" : "2020-03-26T15:34:58Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2e1d5cd7fd70ebf4c50cfbce8cda42b260c81dd5",
    "line" : null,
    "diffHunk" : "@@ -122,6 +122,10 @@ class SubmissionValidator[LogResult](\n       ) => Future[T],\n   )(implicit logCtx: LoggingContext): Future[Either[ValidationFailed, T]] =\n     Envelope.open(envelope) match {\n+      case Right(_: Envelope.BatchMessage) =>\n+        Future.successful(\n+          Left(ValidationFailed.ValidationError(\"Validation of batches is not supported.\")))"
  },
  {
    "id" : "5fce8a87-fcb2-4160-9839-845f51d5d2c7",
    "prId" : 4835,
    "comments" : [
      {
        "id" : "912d7230-7a24-4397-9fed-7ba7baeaca7f",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Can you remove the curly braces to simplify, please?",
        "createdAt" : "2020-03-06T12:24:21Z",
        "updatedAt" : "2020-03-06T12:34:32Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "976a7b69-51cf-4bd1-a12f-2ba9683aede6",
        "parentId" : "912d7230-7a24-4397-9fed-7ba7baeaca7f",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-06T12:34:35Z",
        "updatedAt" : "2020-03-06T12:34:35Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b113b34f2c654c983ef94193c40e48de6eae8139",
    "line" : null,
    "diffHunk" : "@@ -231,5 +231,9 @@ object SubmissionValidator {\n     Envelope.enclose(value).toByteArray\n \n   private[validator] def bytesToStateValue(value: RawBytes): DamlStateValue =\n-    Envelope.openStateValue(value).right.get\n+    Envelope\n+      .openStateValue(value)\n+      .fold(message => {"
  },
  {
    "id" : "43982ebe-b635-4d09-ba86-37e27317ea32",
    "prId" : 4755,
    "comments" : [
      {
        "id" : "ff40bf4f-24c3-40a4-a20d-e101e175fd70",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "@miklos-da how public of an API is the SubmissionValidator? Will we use this directly or still wrap it with something? If it's the public API for integrations then isn't it a problem to require use of our internal logging here?",
        "createdAt" : "2020-02-28T13:48:20Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13571723-b1b3-4178-9d6b-70ee5df170d0",
        "parentId" : "ff40bf4f-24c3-40a4-a20d-e101e175fd70",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good point. We can construct the logging context inside the `SubmissionValidator` if necessary to hide it from API consumers; this is basically the same as using slf4j directly.",
        "createdAt" : "2020-02-28T13:55:24Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "813ea651-d1e2-43de-b167-074d9dcb6811",
        "parentId" : "ff40bf4f-24c3-40a4-a20d-e101e175fd70",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "`ValidatingCommitter` also exposes a dependency on `LoggingContext`. I'm going to remove it from the interface but still pass it through to the `SubmissionValidator.validateAndCommit` via a package-private method called `SubmissionValidator.validateAndCommitWithLoggingContext`. Does this make sense to do?",
        "createdAt" : "2020-02-28T14:59:21Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ee1dcd91-767d-48ed-a3f3-0a6fa620dd2f",
        "parentId" : "ff40bf4f-24c3-40a4-a20d-e101e175fd70",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, that sounds like a good approach. `SubmissionValidator` is on the public API hence depending on `LoggingContext` is not a good idea here.",
        "createdAt" : "2020-03-02T09:45:56Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7a9c6395-4e37-436c-9950-ab41ed8083c4",
        "parentId" : "ff40bf4f-24c3-40a4-a20d-e101e175fd70",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, that seems like a good approach. `SubmissionValidator` is on the public API hence we should avoid requiring a `LoggingContext` in order to use it.",
        "createdAt" : "2020-03-02T12:28:23Z",
        "updatedAt" : "2020-03-02T18:11:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d36fdaa30a004657bd518f427ba4d9695681aa0",
    "line" : null,
    "diffHunk" : "@@ -40,7 +41,9 @@ class SubmissionValidator[LogResult](\n     ) => LogEntryAndState,\n     allocateLogEntryId: () => DamlLogEntryId,\n     checkForMissingInputs: Boolean = false,\n-)(implicit executionContext: ExecutionContext) {\n+)(implicit executionContext: ExecutionContext, logCtx: LoggingContext) {"
  },
  {
    "id" : "3bd855f6-017c-45af-8395-31b4aa09fa7c",
    "prId" : 4437,
    "comments" : [
      {
        "id" : "ee9e7d61-f2c9-4322-9990-15470c161dd6",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "We might want to run multiple validators in one process, e.g. for testing purposes. Right now sharing the engines is not a big issue as they only share the compiled packages, but later on we’ll surely add metrics etc. which shouldn’t be shared. Consider not making the engine a singleton. Otoh, we can refactor when we need to.",
        "createdAt" : "2020-02-07T08:09:55Z",
        "updatedAt" : "2020-02-10T12:53:39Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4396059e-cb58-4607-b80e-1761219d4f25",
        "parentId" : "ee9e7d61-f2c9-4322-9990-15470c161dd6",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "That's a good point. Let's leave this for a later PR if that's fine with you -- i.e., we may want to add a `processSubmission` wrapper that works with multiple `Engine` instances running on separate threads.",
        "createdAt" : "2020-02-07T10:32:58Z",
        "updatedAt" : "2020-02-10T12:53:39Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c35914fa-e0ee-450c-a633-8a995a96c855",
        "parentId" : "ee9e7d61-f2c9-4322-9990-15470c161dd6",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "SGTM",
        "createdAt" : "2020-02-07T10:35:17Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b53e6c80e9907f181e0a6a6cfde60e0d2b6a3c21",
    "line" : 178,
    "diffHunk" : "@@ -0,0 +1,214 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.validator\n+\n+import java.util.UUID\n+\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.kvutils.api.LedgerReader\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueCommitting}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.ledger.validator.SubmissionValidator.LogEntryAndState\n+import com.daml.ledger.validator.ValidationResult.{\n+  MissingInputState,\n+  SubmissionValidated,\n+  TransformedSubmission,\n+  ValidationError,\n+  ValidationFailed,\n+  ValidationResult\n+}\n+import com.digitalasset.daml.lf.data.Time.Timestamp\n+import com.digitalasset.daml.lf.engine.Engine\n+import com.google.protobuf.ByteString\n+\n+import scala.collection.JavaConverters._\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.util.Try\n+\n+// Orchestrates validation, transforming and committing data for key-value ledgers.\n+class SubmissionValidator(\n+    ledgerStateAccess: LedgerStateAccess,\n+    processSubmission: (\n+        DamlLogEntryId,\n+        Timestamp,\n+        DamlSubmission,\n+        Map[DamlStateKey, Option[DamlStateValue]]) => LogEntryAndState,\n+    allocateLogEntryId: () => DamlLogEntryId)(implicit executionContext: ExecutionContext) {\n+\n+  import SubmissionValidator._\n+\n+  def validate(\n+      envelope: RawBytes,\n+      correlationId: String,\n+      recordTime: Timestamp): Future[ValidationResult] =\n+    runValidation(envelope, correlationId, recordTime, (_, _, _, _) => ()).map {\n+      case Left(failure) => failure\n+      case Right(_) => SubmissionValidated\n+    }\n+\n+  def validateAndCommit(\n+      envelope: RawBytes,\n+      correlationId: String,\n+      recordTime: Timestamp): Future[ValidationResult] =\n+    runValidation(envelope, correlationId, recordTime, commit).map {\n+      case Left(failure) => failure\n+      case Right(_) => SubmissionValidated\n+    }\n+\n+  def validateAndTransform[T](\n+      envelope: RawBytes,\n+      correlationId: String,\n+      recordTime: Timestamp,\n+      transform: (DamlLogEntryId, StateMap, LogEntryAndState) => T)\n+    : Future[Either[ValidationFailed, TransformedSubmission[T]]] = {\n+    def applyTransformation(\n+        logEntryId: DamlLogEntryId,\n+        inputStates: StateMap,\n+        logEntryAndState: LogEntryAndState,\n+        stateOperations: LedgerStateOperations): T =\n+      transform(logEntryId, inputStates, logEntryAndState)\n+\n+    runValidation(envelope, correlationId, recordTime, applyTransformation)\n+  }\n+\n+  private def commit(\n+      logEntryId: DamlLogEntryId,\n+      ignored: StateMap,\n+      logEntryAndState: LogEntryAndState,\n+      stateOperations: LedgerStateOperations): Unit = {\n+    val (rawLogEntry, rawStateUpdates) = serializeProcessedSubmission(logEntryAndState)\n+    Future\n+      .sequence(\n+        Seq(\n+          stateOperations.appendToLog(logEntryId.toByteArray, rawLogEntry),\n+          if (rawStateUpdates.nonEmpty) {\n+            stateOperations.writeState(rawStateUpdates)\n+          } else {\n+            Future.unit\n+          }\n+        )\n+      )\n+      .foreach(_ => ())\n+  }\n+\n+  private def runValidation[T](\n+      envelope: RawBytes,\n+      correlationId: String,\n+      recordTime: Timestamp,\n+      postProcessResult: (DamlLogEntryId, StateMap, LogEntryAndState, LedgerStateOperations) => T)\n+    : Future[Either[ValidationFailed, TransformedSubmission[T]]] =\n+    Envelope.open(envelope) match {\n+      case Right(Envelope.SubmissionMessage(submission)) =>\n+        val declaredInputs = submission.getInputDamlStateList.asScala\n+        ledgerStateAccess.inTransaction { stateOperations =>\n+          for {\n+            readStateInputs <- Future.sequence(\n+              declaredInputs.map(\n+                key =>\n+                  stateOperations\n+                    .readState(keyToBytes(key))\n+                    .map { stateValue =>\n+                      key -> stateValue.map(bytesToStateValue)\n+                  }\n+              )\n+            )\n+            damlLogEntryId = allocateLogEntryId()\n+            readInputs: Map[DamlStateKey, Option[DamlStateValue]] = readStateInputs.toMap\n+            missingInputs = declaredInputs -- readInputs.filter {\n+              case (_, value) => value.isDefined\n+            }.keySet\n+          } yield {\n+            if (missingInputs.nonEmpty) {\n+              Left(MissingInputState(missingInputs.map(keyToBytes)))\n+            } else {\n+              Try {\n+                val (logEntry, damlStateUpdates) =\n+                  processSubmission(damlLogEntryId, recordTime, submission, readInputs)\n+                postProcessResult(\n+                  damlLogEntryId,\n+                  flattenInputStates(readInputs),\n+                  (logEntry, damlStateUpdates),\n+                  stateOperations)\n+              }.fold(\n+                exception => Left(ValidationError(exception.getLocalizedMessage)),\n+                result => Right(TransformedSubmission(result)))\n+            }\n+          }\n+        }\n+      case _ =>\n+        Future.successful(\n+          Left(ValidationError(s\"Failed to parse submission, correlationId=$correlationId\")))\n+    }\n+\n+  private def flattenInputStates(\n+      inputs: Map[DamlStateKey, Option[DamlStateValue]]): Map[DamlStateKey, DamlStateValue] =\n+    inputs.collect {\n+      case (key, Some(value)) => key -> value\n+    }\n+}\n+\n+object SubmissionValidator {\n+  type RawBytes = Array[Byte]\n+  type RawKeyValuePairs = Seq[(RawBytes, RawBytes)]\n+\n+  type StateMap = Map[DamlStateKey, DamlStateValue]\n+  type LogEntryAndState = (DamlLogEntry, StateMap)\n+\n+  def create(\n+      ledgerStateAccess: LedgerStateAccess,\n+      allocateNextLogEntryId: () => DamlLogEntryId = () => allocateRandomLogEntryId())(\n+      implicit executionContext: ExecutionContext): SubmissionValidator = {\n+    val participantId: ParticipantId =\n+      ParticipantId.assertFromString(ledgerStateAccess.participantId)\n+    new SubmissionValidator(\n+      ledgerStateAccess,\n+      processSubmission(participantId),\n+      allocateNextLogEntryId)\n+  }\n+\n+  def allocateRandomLogEntryId(): DamlLogEntryId =\n+    DamlLogEntryId.newBuilder\n+      .setEntryId(ByteString.copyFromUtf8(UUID.randomUUID().toString))\n+      .build()\n+\n+  private lazy val engine = Engine()"
  },
  {
    "id" : "0a91cb1a-fc07-46d8-88cd-2cc7c2ac89a9",
    "prId" : 4437,
    "comments" : [
      {
        "id" : "da7d9a1f-330f-4521-8f40-96511cf76f31",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Lets scaladoc this",
        "createdAt" : "2020-02-07T08:24:02Z",
        "updatedAt" : "2020-02-10T12:53:39Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7701a3f0-43cc-40f1-bd17-0ee980e515b8",
        "parentId" : "da7d9a1f-330f-4521-8f40-96511cf76f31",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-02-07T10:34:54Z",
        "updatedAt" : "2020-02-10T12:53:39Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b53e6c80e9907f181e0a6a6cfde60e0d2b6a3c21",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,214 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.validator\n+\n+import java.util.UUID\n+\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.kvutils.api.LedgerReader\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueCommitting}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.ledger.validator.SubmissionValidator.LogEntryAndState\n+import com.daml.ledger.validator.ValidationResult.{\n+  MissingInputState,\n+  SubmissionValidated,\n+  TransformedSubmission,\n+  ValidationError,\n+  ValidationFailed,\n+  ValidationResult\n+}\n+import com.digitalasset.daml.lf.data.Time.Timestamp\n+import com.digitalasset.daml.lf.engine.Engine\n+import com.google.protobuf.ByteString\n+\n+import scala.collection.JavaConverters._\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.util.Try\n+\n+// Orchestrates validation, transforming and committing data for key-value ledgers."
  }
]