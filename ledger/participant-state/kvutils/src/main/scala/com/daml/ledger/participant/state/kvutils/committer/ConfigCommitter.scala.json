[
  {
    "id" : "d7c136a8-a932-49b3-918b-6c815269ed30",
    "prId" : 6630,
    "comments" : [
      {
        "id" : "792ab5bb-9061-4d3d-ab15-3626c7774d56",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Code that manages its own metric(s) should decide if/when/how to measure rather than told what to do from the caller. What does this case correspond to? If it's `false` during preexecution, it could be renamed e.g. `preExecute` (and negated).",
        "createdAt" : "2020-07-08T14:51:35Z",
        "updatedAt" : "2020-07-09T10:04:48Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bc170d1a-2086-4b0f-bd28-c12e8eb8d5b0",
        "parentId" : "792ab5bb-9061-4d3d-ab15-3626c7774d56",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Well, that would make it even more confusing. The parameter `incrementMetric` has been introduced to allow reusing the code for building rejection log entries. I'll see if I can refactor this.",
        "createdAt" : "2020-07-09T09:19:56Z",
        "updatedAt" : "2020-07-09T10:04:48Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "30f59a7ea813c8683703e913a307efff5574108f",
    "line" : null,
    "diffHunk" : "@@ -167,18 +167,25 @@ private[kvutils] class ConfigCommitter(\n         .build\n     )\n \n-    val logEntry = buildLogEntryWithOptionalRecordTime(\n+    val successLogEntry = buildLogEntryWithOptionalRecordTime(\n       ctx.getRecordTime,\n       _.setConfigurationEntry(configurationEntry))\n-    StepStop(logEntry)\n+    if (ctx.preExecute) {\n+      ctx.outOfTimeBoundsLogEntry = Some(\n+        buildRejectionLogEntry(ctx, result.submission, identity, incrementMetric = false))\n+    }\n+    StepStop(successLogEntry)\n   }\n \n   private def buildRejectionLogEntry(\n       ctx: CommitContext,\n       submission: DamlConfigurationSubmission,\n       addErrorDetails: DamlConfigurationRejectionEntry.Builder => DamlConfigurationRejectionEntry.Builder,\n+      incrementMetric: Boolean = true,"
  },
  {
    "id" : "4d376057-444c-4ad8-b2e2-0dbff4d40638",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "ef4eabe1-a8cf-4211-a697-2f87d2e0167f",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "That comment is misleading as this branch will also be triggered in case of normal execution when record time is before maximum record time.",
        "createdAt" : "2020-07-03T15:57:04Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : null,
    "diffHunk" : "@@ -51,7 +51,8 @@ private[kvutils] class ConfigCommitter(\n               .setMaximumRecordTime(buildTimestamp(maximumRecordTime))\n           )\n         ))\n-    } else {\n+    } else { // Pre-execution: propagate the time bounds and defer the checks to post-execution\n+      ctx.maximumRecordTime = Some(maximumRecordTime.toInstant)"
  },
  {
    "id" : "550e2132-8590-45b4-b35e-a1354d92bf3e",
    "prId" : 6538,
    "comments" : [
      {
        "id" : "a353c610-5796-449d-aa16-4d0209f4634a",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Why is that needed and what's the connection with this PR's topic? There are similar occurrences in other committers too.",
        "createdAt" : "2020-07-01T08:42:52Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f6384fc0-d330-4e46-9f4c-e1e4ac40df47",
        "parentId" : "a353c610-5796-449d-aa16-4d0209f4634a",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "In #6526  I accidentally removed generating the empty dedup value. In case of a `oneof` protobuf type we need to have a value set (even if it's empty) -- hence these changes.",
        "createdAt" : "2020-07-01T12:43:41Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7258586a-10a6-4601-ab9b-48f1ecd449d7",
        "parentId" : "a353c610-5796-449d-aa16-4d0209f4634a",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "OK, ideally we should have that in a separate PR but I understand it's not worth the hassle, unless there's an SDK release with this issue though.",
        "createdAt" : "2020-07-01T13:31:14Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "10eb1d75-61e8-4f9a-a6df-49549e80ca33",
        "parentId" : "a353c610-5796-449d-aa16-4d0209f4634a",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes. protobuf allows setting at most one value in a `oneof` so unless our code tries to read a value the serialization/deserialization should work. However, we could remove these empty dedup messages altogether in a separate PR.",
        "createdAt" : "2020-07-01T13:38:32Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : 74,
    "diffHunk" : "@@ -158,15 +158,15 @@ private[kvutils] class ConfigCommitter(\n \n     ctx.set(\n       configDedupKey(ctx.getParticipantId, result.submission.getSubmissionId),\n-      DamlStateValue.newBuilder.build\n-    )\n-\n-    StepStop(\n-      DamlLogEntry.newBuilder\n-        .setRecordTime(buildTimestamp(ctx.getRecordTime))\n-        .setConfigurationEntry(configurationEntry)\n+      DamlStateValue.newBuilder\n+        .setSubmissionDedup(DamlSubmissionDedupValue.newBuilder)"
  },
  {
    "id" : "0e1304d8-d5f5-4a95-a81e-9cd7c0f68b02",
    "prId" : 3847,
    "comments" : [
      {
        "id" : "ccacf6d2-00ad-42e2-8d68-868e6f11f745",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "shouldn't this be trace log?",
        "createdAt" : "2019-12-17T12:18:27Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0efe0041-f822-4c85-9767-da40da4f9a68",
        "parentId" : "ccacf6d2-00ad-42e2-8d68-868e6f11f745",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Removed altogether. It was for debugging",
        "createdAt" : "2019-12-17T16:20:50Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c9a07f89574f1c170c540c240010fa88a826ce2f",
    "line" : null,
    "diffHunk" : "@@ -98,25 +98,41 @@ private[kvutils] case class ConfigCommitter(\n             buildRejectionLogEntry(\n               ctx,\n               result.submission,\n-              _.setInvalidConfiguration(\n-                DamlConfigurationRejectionEntry.InvalidConfiguration.newBuilder\n-                  .setError(err)))),\n+              _.setInvalidConfiguration(Invalid.newBuilder\n+                .setDetails(err)))),\n         config =>\n           if (config.generation != (1 + result.currentConfig._2.generation))\n             StepStop(\n               buildRejectionLogEntry(\n                 ctx,\n                 result.submission,\n-                _.setGenerationMismatch(\n-                  DamlConfigurationRejectionEntry.GenerationMismatch.newBuilder\n-                    .setExpectedGeneration(1 + result.currentConfig._2.generation))\n+                _.setGenerationMismatch(GenerationMismatch.newBuilder\n+                  .setExpectedGeneration(1 + result.currentConfig._2.generation))\n               )\n             )\n           else\n             StepContinue(result)\n       )\n   }\n \n+  private val deduplicateSubmission: Step = (ctx, result) => {\n+    val submissionKey = configDedupKey(ctx.getParticipantId, result.submission.getSubmissionId)\n+    if (ctx.get(submissionKey).isEmpty) {\n+      logger.info(s\"Accepting submissionId ${result.submission.getSubmissionId}\")"
  },
  {
    "id" : "406cd418-e806-4f8c-aefb-c336d247f7d6",
    "prId" : 3847,
    "comments" : [
      {
        "id" : "3b434083-5d3f-4c88-9c4c-0e1940a955af",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "make this a constant.",
        "createdAt" : "2019-12-17T12:18:53Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1138673f-b2fd-496c-94f1-f5e6800a1fec",
        "parentId" : "3b434083-5d3f-4c88-9c4c-0e1940a955af",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Not sure I follow, this is a constant, and its application is wrapped in a function",
        "createdAt" : "2019-12-17T16:17:29Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cc660adb-b8e6-4e2b-bf24-4bae3e9cea1c",
        "parentId" : "3b434083-5d3f-4c88-9c4c-0e1940a955af",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Meant that only compute this value once (e.g. `val dedupValue = DamlStateValue.newBuilder`). This doesn't make sense anymore as we have the record time there. ",
        "createdAt" : "2019-12-17T18:01:14Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c9a07f89574f1c170c540c240010fa88a826ce2f",
    "line" : 80,
    "diffHunk" : "@@ -136,6 +152,13 @@ private[kvutils] case class ConfigCommitter(\n         .build\n     )\n \n+    ctx.set(\n+      configDedupKey(ctx.getParticipantId, result.submission.getSubmissionId),\n+      DamlStateValue.newBuilder"
  },
  {
    "id" : "e44a5a38-faed-4e5c-b0c8-eb292ed8f6aa",
    "prId" : 3780,
    "comments" : [
      {
        "id" : "32fddfb3-002a-4e51-b18f-f6f400c0c8e0",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "make this `DamlConfigurationSubmission` as we're not really using the builder to gradually build up the result.",
        "createdAt" : "2019-12-09T10:27:33Z",
        "updatedAt" : "2019-12-10T08:35:01Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "485c0c8b47042f401b12c0c13992bc13ed2ea4dd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.committer\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.kvutils.committing.Common.getCurrentConfiguration\n+import com.daml.ledger.participant.state.v1.Configuration\n+\n+private[kvutils] object ConfigCommitter {\n+  case class Result(\n+      builder: DamlConfigurationEntry.Builder,"
  },
  {
    "id" : "1a974b01-1261-4816-aee4-5ff876fefe1a",
    "prId" : 3780,
    "comments" : [
      {
        "id" : "51c630cb-9ae8-499b-8c81-6bf3cf5f383b",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "consider already in this PR pulling the checkTtl and authorizeSubmission to be built into Committer (we'll of course need to specify how to build the timeout/participant not authorized results).",
        "createdAt" : "2019-12-09T10:31:44Z",
        "updatedAt" : "2019-12-10T08:35:01Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "68ab1b8d-f288-4dea-aa02-cb4d3f72921f",
        "parentId" : "51c630cb-9ae8-499b-8c81-6bf3cf5f383b",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Haven't done that one. The commonalities are still too hard to spot through the thicket of diverging abstractions.",
        "createdAt" : "2019-12-10T07:24:08Z",
        "updatedAt" : "2019-12-10T08:35:01Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "485c0c8b47042f401b12c0c13992bc13ed2ea4dd",
    "line" : 30,
    "diffHunk" : "@@ -0,0 +1,181 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.committer\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.kvutils.committing.Common.getCurrentConfiguration\n+import com.daml.ledger.participant.state.v1.Configuration\n+\n+private[kvutils] object ConfigCommitter {\n+  case class Result(\n+      builder: DamlConfigurationEntry.Builder,\n+      currentConfig: (Option[DamlConfigurationEntry], Configuration))\n+}\n+\n+private[kvutils] case class ConfigCommitter(\n+    defaultConfig: Configuration\n+) extends Committer[DamlConfigurationSubmission, ConfigCommitter.Result] {\n+\n+  private object Metrics {\n+    // kvutils.ConfigCommitter.*\n+    val accepts = metricsRegistry.counter(\"accepts\")\n+    val rejections = metricsRegistry.counter(\"rejections\")\n+  }\n+\n+  private def rejectionTraceLog(\n+      msg: String,\n+      configurationEntry: DamlConfigurationEntry.Builder): Unit =\n+    logger.trace(\n+      s\"Configuration rejected, $msg, correlationId=${configurationEntry.getSubmissionId}\")\n+\n+  private val checkTtl: Step = (ctx, result) => {"
  }
]