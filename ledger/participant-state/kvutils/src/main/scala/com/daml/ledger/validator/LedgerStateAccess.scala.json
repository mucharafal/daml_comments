[
  {
    "id" : "7d02aa55-a8ab-479f-86e0-0edc4c805d38",
    "prId" : 7071,
    "comments" : [
      {
        "id" : "045c8d1f-8068-4fe0-866f-ff644286ab8c",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Can you add a wrapper class extending this `LedgerStateOperations` that is compatible with the old API so that updating to the latest DAML SDK can be done with a small change, please? This would be important for Java integrations such as Fabric, Besu, etc. Obviously, we will want to deprecate that helper class later.",
        "createdAt" : "2020-08-17T10:03:26Z",
        "updatedAt" : "2020-08-17T13:06:21Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b76a36d4-e2ab-42a4-aff6-bf077fde7010",
        "parentId" : "045c8d1f-8068-4fe0-866f-ff644286ab8c",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This should be good to go as `LedgerStateAccess.v1_4` and `LedgerStateOperations.v1_4`. Can you take a look please?",
        "createdAt" : "2020-08-17T13:07:49Z",
        "updatedAt" : "2020-08-17T13:07:50Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dc5b7131-cf74-47e5-8e09-24890f0c0c10",
        "parentId" : "045c8d1f-8068-4fe0-866f-ff644286ab8c",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Gonna assume you're happy. ðŸ™‚ ",
        "createdAt" : "2020-08-18T11:50:00Z",
        "updatedAt" : "2020-08-18T11:50:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e9ee9cfaa064ba5ff5e30a2cb4389c7caaf47c71",
    "line" : 73,
    "diffHunk" : "@@ -34,58 +36,74 @@ trait LedgerStateOperations[LogResult] {\n \n   /**\n     * Reads value of a single key from the backing store.\n-    * @param key  key to look up data for\n+    *\n+    * @param key key to look up data for\n     * @return value corresponding to requested key or None in case it does not exist\n     */\n-  def readState(key: Key): Future[Option[Value]]\n+  def readState(key: Key)(implicit executionContext: ExecutionContext): Future[Option[Value]]"
  },
  {
    "id" : "c5c5eaf0-f928-47cf-b564-a0a1bd3fcfa1",
    "prId" : 7063,
    "comments" : [
      {
        "id" : "a48c7e89-a49e-426f-bd15-7d7635dd637d",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "I'm not sure why you're removing the possibility to configure the execution context for the ledger state externally and even less why the execution context has to be a direct one. Can you elaborate?",
        "createdAt" : "2020-08-10T07:23:02Z",
        "updatedAt" : "2020-08-10T07:49:53Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f8600ec2-20fc-4817-8315-d693be998873",
        "parentId" : "a48c7e89-a49e-426f-bd15-7d7635dd637d",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This is not for actually reading the state; that gets the execution context from the underlying implementation. (Remind me to rant about why futures are broken in Scala one day.)\r\n\r\nThis is just specifying the context for the `.map(_.head)` operation. The direct execution context basically says \"use whatever context you used for the previous operation\" (similar to [`parasitic` from Scala 2.13](http://www.scala-lang.org/api/2.13.3/scala/concurrent/ExecutionContext$$parasitic$.html), but less nuanced; however, the docs there still apply).\r\n\r\nThis means that we don't need to provide an execution context to the `BatchingLedgerStateOperations` class, because it'll re-use whatever the underlying implementation uses.",
        "createdAt" : "2020-08-10T07:45:16Z",
        "updatedAt" : "2020-08-10T07:49:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3facaee0-0d4e-4b00-9f41-33246d756e01",
        "parentId" : "a48c7e89-a49e-426f-bd15-7d7635dd637d",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Right, I see now it is applied to `map`.",
        "createdAt" : "2020-08-10T08:16:21Z",
        "updatedAt" : "2020-08-10T08:16:21Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4efa1f56-709d-4218-bbfe-6bb8427e1513",
        "parentId" : "a48c7e89-a49e-426f-bd15-7d7635dd637d",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Note that there is some non-determinism in the `DirectExecutionContext` (see this discussion on [StackOverflow](https://stackoverflow.com/questions/61792512/non-determinism-of-synchronous-execution-contexts-a-k-a-parasitic)).",
        "createdAt" : "2020-08-17T07:40:58Z",
        "updatedAt" : "2020-08-17T07:40:58Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1779f4e7-9c0b-4542-acf3-1902d7ba9481",
        "parentId" : "a48c7e89-a49e-426f-bd15-7d7635dd637d",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Absolutely, but I think in this case it's all good.",
        "createdAt" : "2020-08-17T07:52:00Z",
        "updatedAt" : "2020-08-17T07:52:01Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "18d594e5fd16fa8e21875d091137dd6808a8611b",
    "line" : 17,
    "diffHunk" : "@@ -66,10 +67,9 @@ trait LedgerStateOperations[LogResult] {\n /**\n   * Convenience class for implementing read and write operations on a backing store that supports batched operations.\n   */\n-abstract class BatchingLedgerStateOperations[LogResult](implicit executionContext: ExecutionContext)\n-    extends LedgerStateOperations[LogResult] {\n+abstract class BatchingLedgerStateOperations[LogResult] extends LedgerStateOperations[LogResult] {\n   override final def readState(key: Key): Future[Option[Value]] =\n-    readState(Seq(key)).map(_.head)\n+    readState(Seq(key)).map(_.head)(DirectExecutionContext)"
  },
  {
    "id" : "b6d261c8-ae8d-4ed8-804e-da4564313d03",
    "prId" : 5032,
    "comments" : [
      {
        "id" : "4010908a-dd2c-4a78-8c7c-1a22307e9252",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  * Provides default implementations for non-batching read and write operations based on non-batched operations on the\r\n```",
        "createdAt" : "2020-03-17T11:05:42Z",
        "updatedAt" : "2020-03-17T15:06:50Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "69f4c004-553a-404f-8a8a-95fceeb5b741",
        "parentId" : "4010908a-dd2c-4a78-8c7c-1a22307e9252",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "See above comment.",
        "createdAt" : "2020-03-17T12:30:15Z",
        "updatedAt" : "2020-03-17T15:06:50Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "521dd0423d5ee3532dbcc1c9bd5d8c90a495bcf6",
    "line" : null,
    "diffHunk" : "@@ -65,7 +72,9 @@ abstract class BatchingLedgerStateOperations[LogResult](implicit executionContex\n }\n \n /**\n-  * Implements batching read and write operations on the backing store based on non-batched implementations.\n+  * Provides default implementations for batching read and write operations based on non-batched operations on the"
  },
  {
    "id" : "e0b691cb-9174-47e1-b304-5ab122cfca26",
    "prId" : 5032,
    "comments" : [
      {
        "id" : "2c816929-5723-471b-9090-cdd2b4566ef8",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  * Provides default implementations for batching read and write operations based on batched operations on the\r\n```",
        "createdAt" : "2020-03-17T11:05:51Z",
        "updatedAt" : "2020-03-17T15:06:50Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d8a9d63-3961-44c4-bd2c-97c42ccd5e5b",
        "parentId" : "2c816929-5723-471b-9090-cdd2b4566ef8",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Reworded this -- the point is you need to extend `BatchingLedgerStateOperations` if you support batched operations, otherwise you should extend `NonBatchingLedgerStateOperations`.",
        "createdAt" : "2020-03-17T12:22:46Z",
        "updatedAt" : "2020-03-17T15:06:50Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "521dd0423d5ee3532dbcc1c9bd5d8c90a495bcf6",
    "line" : null,
    "diffHunk" : "@@ -48,12 +52,15 @@ trait LedgerStateOperations[LogResult] {\n   /**\n     * Writes a single log entry to the backing store.  The implementation may return Future.failed in case the key\n     * (i.e., the log entry ID) already exists.\n+    * @return  offset of the latest log entry\n     */\n   def appendToLog(key: Key, value: Value): Future[LogResult]\n }\n \n /**\n-  * Implements non-batching read and write operations on the backing store based on batched implementations.\n+  * Provides default implementations for non-batching read and write operations based on batched operations on the"
  },
  {
    "id" : "77c0e92b-af0f-493b-b08d-c91be2eba560",
    "prId" : 4532,
    "comments" : [
      {
        "id" : "3d28a925-6d6d-443b-9da0-d804c77e1bb0",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Thanks for these improvements!",
        "createdAt" : "2020-02-14T16:40:20Z",
        "updatedAt" : "2020-02-15T15:45:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "68d515d40507c5874ecc55d80ce5abcafc53a013",
    "line" : 23,
    "diffHunk" : "@@ -55,25 +55,30 @@ trait LedgerStateOperations {\n   */\n abstract class BatchingLedgerStateOperations(implicit executionContext: ExecutionContext)\n     extends LedgerStateOperations {\n-  override def readState(key: Key): Future[Option[Value]] =\n+  override final def readState(key: Key): Future[Option[Value]] ="
  },
  {
    "id" : "64a4101c-67a6-4811-aaea-aa61be3003b7",
    "prId" : 4437,
    "comments" : [
      {
        "id" : "3029f87a-3418-4009-b647-e50ec2d4292e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we get some type aliases in here so I don't have to think so hard?\r\n\r\nPerhaps:\r\n\r\n```scala\r\ntype Key = Array[Byte]\r\ntype Value = Option[Array[Byte]]\r\n\r\n// ...\r\n\r\ndef readState(key: Key): Future[Value]\r\ndef readState(keys: Seq[Key]): Future[Seq[Value]]\r\n```",
        "createdAt" : "2020-02-07T12:34:02Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "56760b4f-53d1-4190-9185-d74686870ad5",
        "parentId" : "3029f87a-3418-4009-b647-e50ec2d4292e",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "And perhaps some Scaladoc, especially for pointing out that the batching read _must_ return values in the same order as the keys.",
        "createdAt" : "2020-02-07T12:34:30Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eedffe06-e175-47a2-b28e-72a22f3b3135",
        "parentId" : "3029f87a-3418-4009-b647-e50ec2d4292e",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Or you could have `readState` return a `Future[Map[Key, Value]]`, which you're constructing anyway; it'd probably be just as easy for the implementer to handle this and then they don't have to worry about order.",
        "createdAt" : "2020-02-07T12:36:03Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "327ccb74-b022-4bb2-aa6a-dc110658bc1d",
        "parentId" : "3029f87a-3418-4009-b647-e50ec2d4292e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Good point -- added Key & Value types.",
        "createdAt" : "2020-02-07T18:14:25Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8dd416b2-3623-445e-b927-95ecbc92289e",
        "parentId" : "3029f87a-3418-4009-b647-e50ec2d4292e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I'll change the signature of `readState` to return a `Map` instead of a `Seq` in a separate PR.",
        "createdAt" : "2020-02-07T18:15:07Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d0f9f3c1-c206-4246-b3b6-0847b639a643",
        "parentId" : "3029f87a-3418-4009-b647-e50ec2d4292e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Added a bit of Scaladocs -- @SamirTalwar-DA please let me know what you think.",
        "createdAt" : "2020-02-10T11:54:46Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b53e6c80e9907f181e0a6a6cfde60e0d2b6a3c21",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,44 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.validator\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+trait LedgerStateAccess {\n+  def inTransaction[T](body: LedgerStateOperations => Future[T]): Future[T]\n+\n+  def participantId: String\n+}\n+\n+trait LedgerStateOperations {\n+  def readState(key: Array[Byte]): Future[Option[Array[Byte]]]\n+  def readState(keys: Seq[Array[Byte]]): Future[Seq[Option[Array[Byte]]]]"
  },
  {
    "id" : "cda81788-9a17-44dc-8679-0b3d24a92641",
    "prId" : 4437,
    "comments" : [
      {
        "id" : "6dca0178-9fb8-479b-83a6-31fb16e7fce2",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * @return ID of the participant accessing the backing store.\r\n```",
        "createdAt" : "2020-02-10T11:57:55Z",
        "updatedAt" : "2020-02-10T12:53:40Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b53e6c80e9907f181e0a6a6cfde60e0d2b6a3c21",
    "line" : null,
    "diffHunk" : "@@ -6,36 +6,76 @@ package com.daml.ledger.validator\n import scala.concurrent.{ExecutionContext, Future}\n \n trait LedgerStateAccess {\n+\n+  /**\n+    * Performs read and write operations on the backing store in a single atomic transaction.\n+    * @param body  operations to perform\n+    * @tparam T type of result returned after execution\n+    */\n   def inTransaction[T](body: LedgerStateOperations => Future[T]): Future[T]\n \n+  /**\n+    * @return  participant's ID from which the backing store is being accessed from"
  }
]