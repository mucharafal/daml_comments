[
  {
    "id" : "7b62801e-05ef-40b7-ab50-6fb884d8ee88",
    "prId" : 3806,
    "comments" : [
      {
        "id" : "92198e05-6677-4bda-a37e-f3a318735cdf",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor, but the commenting here looks a bit wonky.",
        "createdAt" : "2019-12-12T16:15:03Z",
        "updatedAt" : "2019-12-12T17:11:45Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "251fd5fc053893266c997d1d7451a1f25479df7b",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +397,401 @@    Ref.Party.assertFromString(s\"party-${UUID.randomUUID().toString.take(8)}\")\n\n  /*\n  /** Upload DAML-LF packages to the ledger */\n"
  },
  {
    "id" : "c1284874-5675-4153-8c43-0a9b616cd652",
    "prId" : 3744,
    "comments" : [
      {
        "id" : "70adcb0f-e4e5-4b06-9492-9024403ce878",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Perhaps wrap earlier.",
        "createdAt" : "2019-12-05T10:53:17Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fdb6fd12-2971-4ff6-ac52-a91b339524f9",
        "parentId" : "70adcb0f-e4e5-4b06-9492-9024403ce878",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I'll leave that for @dajmaki to judge.",
        "createdAt" : "2019-12-05T11:05:15Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d8204b7c377ce994002fb11ce1227c245747b3d0",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +330,334 @@\n  /** Helper for [[dispatcher]] to fetch [[com.daml.ledger.participant.state.kvutils.DamlKvutils.DamlLogEntry]] from the\n    * state and convert it into [[com.daml.ledger.participant.state.v1.Update]].\n    */\n  private def getUpdate(idx: Int, state: State): List[Update] = {"
  },
  {
    "id" : "3317e100-dde9-4b8c-abe9-6acbf042e9dc",
    "prId" : 1553,
    "comments" : [
      {
        "id" : "ef87007e-996a-4b32-9970-6377ea6e8fd4",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I'd be interested in seeing how the Sawtooth implementation of this logic ends up looking like and whether we can abstract it out and use it for other implementations as well.",
        "createdAt" : "2019-06-28T12:53:09Z",
        "updatedAt" : "2019-07-01T09:03:27Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b89ec3eec97b94cea04cfd27c4bf94180ecef4ca",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +143,147 @@    * with asynchronous responses delivered within the log entries.\n    */\n  class ResponseMatcher extends Actor {\n    var partyRequests: Map[String, CompletableFuture[PartyAllocationResult]] = Map.empty\n    var packageRequests: Map[String, CompletableFuture[UploadPackagesResult]] = Map.empty"
  },
  {
    "id" : "ce9672fa-babc-42d4-a257-771bbe4d023d",
    "prId" : 637,
    "comments" : [
      {
        "id" : "b3f5964a-8c80-4533-9e34-f77466e0dec3",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Add comment explaining that both DamlLogentryId entries and DamlStateKey entries are stored in this map.",
        "createdAt" : "2019-04-26T12:56:18Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@      // The store is mutated by applying [[DamlSubmission]]s. The store can\n      // be reconstructed from scratch by replaying [[State.commits]].\n      store: Map[ByteString, ByteString],\n      // Current ledger configuration.\n      config: Configuration"
  },
  {
    "id" : "888770ae-21aa-4e37-a62b-42a9ed2de734",
    "prId" : 637,
    "comments" : [
      {
        "id" : "a32afa05-e856-42b2-89d1-989f07f75187",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "add warning log message here",
        "createdAt" : "2019-04-26T12:58:43Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +137,141 @@        if (state.store.contains(entryId.getEntryId)) {\n          // The entry identifier already in use, drop the message and let the\n          // client retry submission.\n          logger.warn(s\"CommitActor: duplicate entry identifier in commit message, ignoring.\")\n        } else {"
  },
  {
    "id" : "91bd7f0c-1b71-495e-93be-c4d8963748b7",
    "prId" : 637,
    "comments" : [
      {
        "id" : "a6b26dce-9a5c-4b7c-8c10-7e6608f6ab8f",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "add appropriate debug log messages that allow tracing how validation etc. progresses",
        "createdAt" : "2019-04-26T13:00:11Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@          logger.trace(\n            s\"CommitActor: processing submission ${KeyValueCommitting.prettyEntryId(entryId)}...\")\n          // Process the submission to produce the log entry and the state updates.\n          val (logEntry, damlStateUpdates) = KeyValueCommitting.processSubmission(\n            engine,"
  },
  {
    "id" : "f5e5d5fe-9b10-463c-9883-3d9cdf2f7e95",
    "prId" : 637,
    "comments" : [
      {
        "id" : "93d5cde2-a924-4f40-a976-4cbd0ea9f9c1",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "The way this is written it seems to me that we MUST re-validate the read input values on the update here! Otherwise, we are racy!",
        "createdAt" : "2019-04-26T13:01:33Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "58042240-a5d8-4f78-a610-b891738152cc",
        "parentId" : "93d5cde2-a924-4f40-a976-4cbd0ea9f9c1",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Or explain why we are not in case the actor guards us. I don't understand the 'atomically' in that case though? Is it wrt readers only seeing properly updated state?",
        "createdAt" : "2019-04-26T13:02:26Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7a54e3b5-dad7-41d9-be62-a90a604662ce",
        "parentId" : "93d5cde2-a924-4f40-a976-4cbd0ea9f9c1",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "The actor processes the messages completely sequentially and this line is the only place where the state is swapped.\r\natomically refers to the fact that we swap the reference to a new copy of the state. I'll definitely add some more comments about what's the idea here. Definitely not entirely happy about the construction. Could wrap stateRef into AtomicReference and do a compare and swap to switch it, but it seems rather pointless with one writer.",
        "createdAt" : "2019-04-26T14:25:55Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +167,171 @@\n          // Update the state.\n          stateRef = state.copy(\n            recordTime = newRecordTime,\n            commitLog = state.commitLog :+ commit,"
  },
  {
    "id" : "940ca72c-4725-4636-8790-11a55bc8d9c4",
    "prId" : 637,
    "comments" : [
      {
        "id" : "f7eccf58-4634-47dd-a361-af4f7ef6ddc4",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "extend comments on what's happening -- I'm assuming this should be the example that explains how to implement the participant-state interfaces using the kvutils.",
        "createdAt" : "2019-04-26T13:05:50Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 291,
    "diffHunk" : "@@ -1,1 +289,293 @@      transactionMeta: TransactionMeta,\n      transaction: SubmittedTransaction): Unit = {\n\n    // Construct a [[DamlSubmission]] message using the key-value utilities.\n    // [[DamlSubmission]] contains the serialized transaction and metadata such as"
  }
]