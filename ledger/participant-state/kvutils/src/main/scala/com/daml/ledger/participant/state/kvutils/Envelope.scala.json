[
  {
    "id" : "86275746-1cc0-43c1-8949-a51bf97bb7f9",
    "prId" : 7380,
    "comments" : [
      {
        "id" : "cf64191d-4302-4efd-9006-a4715ad91f72",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "We should probably close even if this fails.\r\n\r\n```suggestion\r\n    val decompressed = try {\r\n      ByteString.readFrom(gzipIn)\r\n    } finally {\r\n      gzipIn.close()\r\n    }\r\n```\r\n\r\nAnd the same above.",
        "createdAt" : "2020-09-11T12:37:03Z",
        "updatedAt" : "2020-09-11T12:37:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1209b4f4-f9f0-4834-aeaa-eb82e41ce4a6",
        "parentId" : "cf64191d-4302-4efd-9006-a4715ad91f72",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Good point -- addressed in #7384.",
        "createdAt" : "2020-09-11T13:14:57Z",
        "updatedAt" : "2020-09-11T13:14:57Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "da7d5a3c5971d6a0b7829a9aeeaafac4f1e629e5",
    "line" : 18,
    "diffHunk" : "@@ -132,17 +132,19 @@ object Envelope {\n       case msg => Left(s\"Expected state value, got ${msg.getClass}\")\n     }\n \n-  private def compress(payload: ByteString): ByteString = {\n+  private[kvutils] def compress(payload: ByteString): ByteString = {\n     val out = ByteString.newOutput\n     val gzipOut = new GZIPOutputStream(out)\n     gzipOut.write(payload.toByteArray)\n     gzipOut.close()\n     out.toByteString\n   }\n \n-  private def decompress(payload: ByteString): ByteString = {\n+  private[kvutils] def decompress(payload: ByteString): ByteString = {\n     val gzipIn = new GZIPInputStream(payload.newInput)\n-    ByteString.readFrom(gzipIn)\n+    val decompressed = ByteString.readFrom(gzipIn)\n+    gzipIn.close()"
  },
  {
    "id" : "863042ea-e810-4f6c-806a-8b498cab836c",
    "prId" : 6992,
    "comments" : [
      {
        "id" : "b5943207-0ebd-4c66-b60a-8747c2c17354",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "This default might be unused for now but I think it's meaningful.",
        "createdAt" : "2020-08-05T09:11:55Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6dfc1596-c2d5-4e5b-8fe3-25230d85f460",
        "parentId" : "b5943207-0ebd-4c66-b60a-8747c2c17354",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Is it meaningful enough to be silenced with a regex matching the error and a comment?",
        "createdAt" : "2020-08-05T14:27:22Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "91c9c2f7-2522-4131-b0bd-fc3557b00e26",
        "parentId" : "b5943207-0ebd-4c66-b60a-8747c2c17354",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "114c1a2f3bbc4734e1dc103e89528a790894cfcc",
        "createdAt" : "2020-08-05T14:47:32Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cc1e4ab3-3cba-4e85-8a23-977e99ee0d6d",
        "parentId" : "b5943207-0ebd-4c66-b60a-8747c2c17354",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Maybe not worth a silencing annotation, unless a specific use for it is planned soon; in that case I'd also remove the comment. @miklos-da what do you think?",
        "createdAt" : "2020-08-05T14:54:04Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "92691641-6824-4b72-b714-e03500380252",
        "parentId" : "b5943207-0ebd-4c66-b60a-8747c2c17354",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I agree with @fabiotudone-da. I.e., let's remove the comment and set it to a default that we define as a constant explicitly everywhere we call this function. We'll definitely use it with different values once we get to storage optimization (i.e., compressing only large enough values).",
        "createdAt" : "2020-08-06T15:19:33Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7fbb3eeb-2263-4712-a038-6264a3770851",
        "parentId" : "b5943207-0ebd-4c66-b60a-8747c2c17354",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "4666d04ce7a5dc19ce3b8a8b1a8e625aa07570e0 ",
        "createdAt" : "2020-08-06T15:33:48Z",
        "updatedAt" : "2020-08-06T15:33:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4666d04ce7a5dc19ce3b8a8b1a8e625aa07570e0",
    "line" : 10,
    "diffHunk" : "@@ -29,7 +29,7 @@ object Envelope {\n   private def enclose(\n       kind: Proto.Envelope.MessageKind,\n       bytes: ByteString,\n-      compression: Boolean = true): ByteString =\n+      compression: Boolean): ByteString ="
  },
  {
    "id" : "e16bcc79-e262-48ff-a381-1fdb0451d4c1",
    "prId" : 4964,
    "comments" : [
      {
        "id" : "46367709-c902-4592-8d23-c3360f4625a1",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`SubmissionBatchMessage` (i.e., batch is too generic). Also, this would follow the pattern with `Proto.DamlSubmission` -> `SubmissionMessage` (this would be `Proto.DamlSubmissionBatch` -> `SubmissionBatchMessage`).",
        "createdAt" : "2020-03-16T09:22:21Z",
        "updatedAt" : "2020-03-26T15:34:58Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2e1d5cd7fd70ebf4c50cfbce8cda42b260c81dd5",
    "line" : null,
    "diffHunk" : "@@ -24,6 +24,8 @@ object Envelope {\n \n   final case class StateValueMessage(value: Proto.DamlStateValue) extends Message\n \n+  final case class BatchMessage(value: Proto.DamlSubmissionBatch) extends Message"
  },
  {
    "id" : "68a633d1-1bb7-4f29-ab95-9eb9f3a42a66",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "8e51108b-e407-46d0-ba9a-fddc874e93a7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Perhaps you could pull the `Try(â€¦).toEither.left.map(_.getMessage)` pattern into a helper.",
        "createdAt" : "2019-12-23T09:07:33Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "971dbf73-a148-44df-bbdc-4a662c9df79a",
        "parentId" : "8e51108b-e407-46d0-ba9a-fddc874e93a7",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Changed accordingly.",
        "createdAt" : "2020-01-07T13:53:04Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 22,
    "diffHunk" : "@@ -52,8 +52,14 @@ object Envelope {\n     enclose(Proto.Envelope.MessageKind.STATE_VALUE, stateValue.toByteString, compression)\n \n   def open(envelopeBytes: ByteString): Either[String, Message] =\n+    openWithParser(() => Proto.Envelope.parseFrom(envelopeBytes))\n+\n+  def open(envelopeBytes: Array[Byte]): Either[String, Message] =\n+    openWithParser(() => Proto.Envelope.parseFrom(envelopeBytes))\n+\n+  private def openWithParser(parseEnvelope: () => Proto.Envelope): Either[String, Message] =\n     for {\n-      envelope <- Try(Proto.Envelope.parseFrom(envelopeBytes)).toEither.left.map(_.getMessage)\n+      envelope <- Try(parseEnvelope()).toEither.left.map(_.getMessage)"
  },
  {
    "id" : "bfff631b-bd30-438f-87c0-ba65613400fb",
    "prId" : 2709,
    "comments" : [
      {
        "id" : "ee917a90-ec4f-4142-9e22-6b331185d960",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Don't we need a builder for uncompressed envelopes?",
        "createdAt" : "2019-08-29T17:53:08Z",
        "updatedAt" : "2019-08-30T09:07:16Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "70158bc1-9f90-4485-a19a-21a72127d3c3",
        "parentId" : "ee917a90-ec4f-4142-9e22-6b331185d960",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Sure, if we want to produce them. I guess I might as well add the uncompresswd variants for symmetry. Might be useful when one knows it doesnâ€™t make sense to compress.",
        "createdAt" : "2019-08-29T18:38:44Z",
        "updatedAt" : "2019-08-30T09:07:16Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90d4369b88d99264ab1b3ae279623efad136b8af",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils\n+\n+import java.util.zip.{GZIPInputStream, GZIPOutputStream}\n+import com.google.protobuf.ByteString\n+import scala.util.Try\n+import com.daml.ledger.participant.state.kvutils.{DamlKvutils => Proto}\n+\n+/** Envelope is a wrapping for \"top-level\" kvutils messages that provides\n+  * versioning and compression and should be used when storing or transmitting\n+  * kvutils messages.\n+  */\n+object Envelope {\n+\n+  sealed trait Message extends Product with Serializable\n+\n+  final case class SubmissionMessage(submission: Proto.DamlSubmission) extends Message\n+\n+  final case class LogEntryMessage(logEntry: Proto.DamlLogEntry) extends Message\n+\n+  final case class StateValueMessage(value: Proto.DamlStateValue) extends Message\n+\n+  val kvutilsVersion: Long = 1\n+\n+  private def newBuilderFor(kind: Proto.Envelope.MessageKind): Proto.Envelope.Builder ="
  }
]