[
  {
    "id" : "0386a82e-9c7d-4ff3-87a0-509bfbe849ef",
    "prId" : 7515,
    "comments" : [
      {
        "id" : "2fb51126-2f69-418a-a113-73518a2f2813",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Is this unit-tested anywhere? Perhaps not so important as we are going to have proper (i.e. non-reordering) integrity checks with this one.",
        "createdAt" : "2020-09-29T14:17:10Z",
        "updatedAt" : "2020-09-29T14:19:19Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3fa4878c-b081-4e8e-8494-ac5e0dbb0bf6",
        "parentId" : "2fb51126-2f69-418a-a113-73518a2f2813",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yes; the spec file had a test for serial commits which I merged into the other tests.",
        "createdAt" : "2020-09-29T14:21:41Z",
        "updatedAt" : "2020-09-29T14:21:41Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6bd769ee-4f6b-4273-bd51-3c33529a2450",
        "parentId" : "2fb51126-2f69-418a-a113-73518a2f2813",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "(And it's also tested by the integrity check tests.)",
        "createdAt" : "2020-09-29T14:24:37Z",
        "updatedAt" : "2020-09-29T14:24:37Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2a03714d44102a50f8583de03c250ad3d4108d69",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +305,309 @@      }\n      // Commit the results. This must be done serially to ensure a deterministic set of writes.\n      .mapAsync[Outputs6](1) {\n        case ValidatedSubmission(\n            correlatedSubmission,"
  },
  {
    "id" : "d5a9396e-c549-4752-b489-97473a9d0922",
    "prId" : 7215,
    "comments" : [
      {
        "id" : "23be6a28-4e1c-4047-abb4-1a0f166c7c9a",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`submissionAggregator`",
        "createdAt" : "2020-08-31T13:34:42Z",
        "updatedAt" : "2020-08-31T13:34:43Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0020dd8e089d897ae22c94ce2643c7d7f6073b04",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +115,119 @@  )(implicit materializer: Materializer, executionContext: ExecutionContext): Future[Unit] =\n    withCorrelationIdLogged(correlationId) { implicit loggingContext =>\n      val exporterAggregator = ledgerDataExporter.addSubmission(\n        participantId,\n        correlationId,"
  },
  {
    "id" : "5efca8a2-c08d-421b-bd54-1fc6710a175e",
    "prId" : 7215,
    "comments" : [
      {
        "id" : "19ddaf65-8bad-49c1-8e3a-4da82b6d4df8",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`writeSetBuilder`",
        "createdAt" : "2020-08-31T13:34:59Z",
        "updatedAt" : "2020-08-31T13:34:59Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0020dd8e089d897ae22c94ce2643c7d7f6073b04",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +223,227 @@      inputState: DamlInputState,\n      logEntryAndState: LogEntryAndState,\n      exporterWriteSet: SubmissionAggregator.WriteSetBuilder,\n  )\n"
  },
  {
    "id" : "a94f5cb7-615b-4b6e-9156-088b8a469674",
    "prId" : 7215,
    "comments" : [
      {
        "id" : "ac5ea113-91fb-463d-b106-0bc8d4af09fd",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`submissionAggregator`",
        "createdAt" : "2020-08-31T13:35:09Z",
        "updatedAt" : "2020-08-31T13:35:09Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0020dd8e089d897ae22c94ce2643c7d7f6073b04",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +250,254 @@      damlLedgerStateReader: DamlLedgerStateReader,\n      commitStrategy: CommitStrategy[CommitResult],\n      exporterAggregator: SubmissionAggregator,\n  )(\n      implicit materializer: Materializer,"
  },
  {
    "id" : "0ab03edf-2dcb-4a77-a9f9-e3fc23e92e2c",
    "prId" : 7215,
    "comments" : [
      {
        "id" : "8488dca9-73da-4d10-8564-bf5ad036086e",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`writeSetBuilder`",
        "createdAt" : "2020-08-31T13:35:23Z",
        "updatedAt" : "2020-08-31T13:35:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0020dd8e089d897ae22c94ce2643c7d7f6073b04",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +346,350 @@      correlatedSubmission: CorrelatedSubmission,\n      inputState: DamlInputState,\n      exporterWriteSet: SubmissionAggregator.WriteSetBuilder,\n  )(implicit executionContext: ExecutionContext): Future[ValidatedSubmission] =\n    withSubmissionLoggingContext(correlatedSubmission) { _ =>"
  },
  {
    "id" : "73501b67-f3e3-4a33-a725-bba0353be875",
    "prId" : 7215,
    "comments" : [
      {
        "id" : "84baf0da-ed79-4bf4-bbbd-50e29c57316a",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`writeSetBuilder`",
        "createdAt" : "2020-08-31T13:35:32Z",
        "updatedAt" : "2020-08-31T13:35:32Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0020dd8e089d897ae22c94ce2643c7d7f6073b04",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +371,375 @@      logEntryAndState: LogEntryAndState,\n      invalidatedKeys: mutable.Set[DamlStateKey],\n      exporterWriteSet: SubmissionAggregator.WriteSetBuilder,\n  ): scala.collection.immutable.Iterable[ValidatedSubmission] = {\n    val (logEntry, outputState) = logEntryAndState"
  },
  {
    "id" : "717c2ace-a994-490d-a2a7-683c8836ad5c",
    "prId" : 7215,
    "comments" : [
      {
        "id" : "37c4733a-3ab0-4eee-9204-c8797e035d2a",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`writeSetBuilder`",
        "createdAt" : "2020-08-31T13:35:41Z",
        "updatedAt" : "2020-08-31T13:35:41Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0020dd8e089d897ae22c94ce2643c7d7f6073b04",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +410,414 @@      logEntryAndState: LogEntryAndState,\n      commitStrategy: CommitStrategy[CommitResult],\n      exporterWriteSet: SubmissionAggregator.WriteSetBuilder,\n  )(implicit executionContext: ExecutionContext): Future[Unit] = {\n    val (logEntry, outputState) = logEntryAndState"
  },
  {
    "id" : "89def627-21bd-4135-b216-38b114b7bcfe",
    "prId" : 6992,
    "comments" : [
      {
        "id" : "b575168a-8edb-4bdd-a7b9-9a648ded7935",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "With the additional implication that this `withSubmissionLoggingContext` call also does nothing, and can be removed.",
        "createdAt" : "2020-08-04T19:23:32Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6a4d7901-6bda-430a-b17f-68a48813c953",
        "parentId" : "b575168a-8edb-4bdd-a7b9-9a648ded7935",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yup. This worries me, because it means we're not logging.\r\n\r\n@miklos-da, is this supposed to be logging somewhere?",
        "createdAt" : "2020-08-05T08:00:46Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "89e0ce4c-3f07-4f40-a83c-57b20daa10e7",
        "parentId" : "b575168a-8edb-4bdd-a7b9-9a648ded7935",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Currently this uses a non-contextual logger but I believe this is preparation for contextual logging where the context is the correlation ID; if this is not the case (or if the usage of contextual logging is not coming shortly) then I'd remove it for now. @miklos-da can probably elaborate.",
        "createdAt" : "2020-08-05T09:20:43Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "85817f39-a64a-4e66-8562-2826d1deceeb",
        "parentId" : "b575168a-8edb-4bdd-a7b9-9a648ded7935",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Also considered in sandbox: https://github.com/digital-asset/daml/pull/7035/files#r465983041",
        "createdAt" : "2020-08-05T20:25:35Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c9e70210-c1cc-4a3c-912b-b24132bbe595",
        "parentId" : "b575168a-8edb-4bdd-a7b9-9a648ded7935",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "We just used this bit to add a correlation ID to all log events transparently, i.e., not requiring a previous context. Threading a logging context through the stack is to be done later.",
        "createdAt" : "2020-08-06T15:16:45Z",
        "updatedAt" : "2020-08-06T15:33:42Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4666d04ce7a5dc19ce3b8a8b1a8e625aa07570e0",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +393,397 @@      implicit executionContext: ExecutionContext): Future[Unit] = {\n    val (logEntry, outputState) = logEntryAndState\n    withSubmissionLoggingContext(correlatedSubmission) { _ =>\n      Timed.timedAndTrackedFuture(\n        metrics.commit,"
  },
  {
    "id" : "6b00a6de-3f42-4e85-9bb8-ef47babad9e7",
    "prId" : 6004,
    "comments" : [
      {
        "id" : "47e88981-31d8-4c51-bebb-877c76f232e3",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "This gets a `CommitResult`, but that is then discarded. If we were to propagate this outwards, we can use this in the `InMemoryLedgerStateOperations` instead of getting the `log.size` again.",
        "createdAt" : "2020-05-20T07:22:20Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f7798e7c-101b-4fe8-9038-96315a1464da",
        "parentId" : "47e88981-31d8-4c51-bebb-877c76f232e3",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, that's intentional because this way we don't have to deal with multiple `CommitResult`s. I'm happy to add this in a separate PR, though, e.g., by taking the max of the `CommitResult`s and returning that instead of `Unit`. Does that work for you?",
        "createdAt" : "2020-05-20T08:54:50Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "30c6dc83-42df-404e-b5f9-75a0814550d6",
        "parentId" : "47e88981-31d8-4c51-bebb-877c76f232e3",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Sounds good. I expect writing an API for some kind of reduce function will be quite a considerable change.",
        "createdAt" : "2020-05-20T10:56:47Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5b17565-e38d-485a-a488-7ab97b0abace",
        "parentId" : "47e88981-31d8-4c51-bebb-877c76f232e3",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Agreed. To avoid that I'd first go with adding some default reduce function (e.g., max as the log offsets should be monotonically increasing anyway) and in case something else is needed one can handle that as part of the `CommitStrategy` and/or `LedgerWriter` implementation. For production ledgers the signaling mechanism is not necessarily tied to the validation logic as in case of the in-memory or SQL ledgers (e.g., the participant will be notified of new blocks after they have been committed which drives the dispatcher instead of the validation logic in a post-commit step).",
        "createdAt" : "2020-05-20T11:11:16Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "84954152-2896-4551-bb46-5714b7dcbcb0",
        "parentId" : "47e88981-31d8-4c51-bebb-877c76f232e3",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You may not be able to do that; you don't know anything about `CommitStrategy`. But it doesn't matter for now.",
        "createdAt" : "2020-05-20T13:05:02Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "330140ed-227f-4216-ae6e-8b8a14367ed6",
        "parentId" : "47e88981-31d8-4c51-bebb-877c76f232e3",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yeah, that's right, however, I was describing from the consumer's side, i.e., as you can pass in a separate `CommitStrategy` instance for each `validateAndCommit` call you can simply collect the log results and do something with them once the validation is finished.",
        "createdAt" : "2020-05-20T13:15:24Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : 400,
    "diffHunk" : "@@ -1,1 +398,402 @@            inputState,\n            outputState)\n          .map(_ => ())\n      )\n    }"
  },
  {
    "id" : "e447cda2-1c7e-450f-8a88-bb9e03626fd2",
    "prId" : 6004,
    "comments" : [
      {
        "id" : "2a17b205-3893-449f-a16e-1dcaddfc1cbd",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "No way to avoid this copy?",
        "createdAt" : "2020-05-22T15:42:47Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0da99d1f-c44d-452a-b75c-d421e208ef91",
        "parentId" : "2a17b205-3893-449f-a16e-1dcaddfc1cbd",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "It's possible but didn't seem to be worth doing, i.e., the log entry ID has fixed length (64 bytes) whereas the submission may be significantly larger (and we don't copy that). `ByteString` does not have a public implementation that would allow working off of a mutable byte array.",
        "createdAt" : "2020-05-25T09:37:08Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@      .map(\"%02x\" format _)\n      .mkString\n    val prefixedHash = ByteString.copyFromUtf8(LogEntryIdPrefix + hash)\n    DamlLogEntryId.newBuilder\n      .setEntryId(prefixedHash)"
  },
  {
    "id" : "8e229842-ecef-4970-9352-fb0b1d3b8f55",
    "prId" : 6004,
    "comments" : [
      {
        "id" : "4f652be8-4346-4a6c-bb5a-42dffda242f2",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Should this be immediately (= upon call) or asynchronously (i.e. upon scheduling) determined? It is used in the subsequent future that performs the validation in a Future.",
        "createdAt" : "2020-05-22T15:44:52Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6e3738a6-9494-4bbd-9b77-11d969d6d73a",
        "parentId" : "4f652be8-4346-4a6c-bb5a-42dffda242f2",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "See comment https://github.com/digital-asset/daml/pull/6004#discussion_r429840574",
        "createdAt" : "2020-05-25T09:48:55Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +128,132 @@  )(implicit materializer: Materializer, executionContext: ExecutionContext): Future[Unit] =\n    withCorrelationIdLogged(correlationId) { implicit logCtx =>\n      val recordTime = Time.Timestamp.assertFromInstant(recordTimeInstant)\n      Timed.future(\n        Metrics.validateAndCommit, {"
  },
  {
    "id" : "b3e08b6c-807f-4f4d-8d65-b3c599ef9bcf",
    "prId" : 6004,
    "comments" : [
      {
        "id" : "408a8d44-a556-46bf-b429-3cb1fc26eef7",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "What's the performance impact of using `mapAsyncUnordered` VS. `mapAsync` in the validator? If not significant, we could use the latter and be fairer with submissions (i.e. earlier arrived ones have more chances of no conflicts and less risk of being dropped).",
        "createdAt" : "2020-05-22T16:45:27Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5765ed4a-28b7-46f4-be8f-d17c3fcdc33c",
        "parentId" : "408a8d44-a556-46bf-b429-3cb1fc26eef7",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "`mapAsyncUnordered` allows simple submissions in the batch to go through the pipeline fast even if there are a few slower submissions being processed at the same time. We reorder submissions before conflict detection anyway.",
        "createdAt" : "2020-05-25T10:43:52Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +189,193 @@          .map(cs => cs.getCorrelationId -> cs.getSubmission))\n        .to)\n      .mapAsyncUnordered(params.cpuParallelism) {\n        _.mapFuture {\n          case (correlationId, submissionEnvelope) =>"
  }
]