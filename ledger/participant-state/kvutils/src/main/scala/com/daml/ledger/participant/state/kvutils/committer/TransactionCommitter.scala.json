[
  {
    "id" : "06164bad-2c73-40e1-ae17-36764e0015e8",
    "prId" : 7617,
    "comments" : [
      {
        "id" : "b36e706f-4325-4ae2-83ea-a4c0dea3935a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This looks horrible. Can't we do something like this?\r\n```suggestion\r\n            (_, exe: Node.NodeExercises))\r\n```\r\nWe have the same in many other places too. We should clean this up a bit in a separate PR. I'm happy to do it myself.",
        "createdAt" : "2020-10-09T14:03:23Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8eff06bc-9550-419d-99b0-c9a7f3100598",
        "parentId" : "b36e706f-4325-4ae2-83ea-a4c0dea3935a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "In this case you have to write something like: \r\n\r\n```(_, exe: Node.NodeExercises[_, ContractId, VersionnedValue[ContractId]))```\r\nor using type alias \r\n```(_, exe: Node.NodeExercises.WithTxValue[_, ContractId]))```\r\n\r\nI really dislike matching with parametric types.  \r\nBut if you whish I will do the \"cleanup\".",
        "createdAt" : "2020-10-12T08:49:21Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e3470ea8-75c3-4c90-9766-e5113ebd9c61",
        "parentId" : "b36e706f-4325-4ae2-83ea-a4c0dea3935a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we do the following?\r\n```scala\r\n(_, exe: Node.Exercises[_, _, _])\r\n```\r\nI mean, we don't really care about the actual type arguments, do we?",
        "createdAt" : "2020-10-12T09:00:51Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dbbcb948-a957-4090-b9ef-df1ac259ffa4",
        "parentId" : "b36e706f-4325-4ae2-83ea-a4c0dea3935a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I suspect in some place this broks the type inference. \r\nIn this case, it seems to compile. However, this definitively broke the type inference of Intellij :-(\r\n",
        "createdAt" : "2020-10-12T09:20:23Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a6fc1a75-51e5-4838-a586-5ee339e70f14",
        "parentId" : "b36e706f-4325-4ae2-83ea-a4c0dea3935a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's weird that it breaks (IntelliJ's) type inference. The pattern `Node.NodeExercises(_, _, _, _, _, _, _, _, _, _, _, _, _, _)` doesn't make any statements about types whatsoever. Anyway, let's not touch this then for now.",
        "createdAt" : "2020-10-12T09:39:11Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "028bbced28b92a3143f68f3f65bf48954cba4025",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +282,286 @@        case (\n            (allUnique, existingKeys),\n            (_, exe @ Node.NodeExercises(_, _, _, _, _, _, _, _, _, _, _, _, _, _)))\n            if exe.key.isDefined && exe.consuming =>\n          val stateKey = Conversions.globalKeyToStateKey("
  },
  {
    "id" : "0a50e377-694b-417a-a38b-729168a2771b",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "640071bb-4b5d-4c76-951c-69ad75b21fd9",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "If you are pattern matching on an `Option` always have `case Some(_)` and `case None`. Otherwise, you could just keep the `.map` + `.getOrElse` that was used here.",
        "createdAt" : "2020-07-03T09:17:30Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "95074147-a213-4451-b6be-85b20cce23d3",
        "parentId" : "640071bb-4b5d-4c76-951c-69ad75b21fd9",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Yes, made the `None` branch explicit as also suggested by @andreaslochbihler-da.",
        "createdAt" : "2020-07-03T15:27:19Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +156,160 @@      val timeModel = config.timeModel\n\n      commitContext.getRecordTime match {\n        case Some(recordTime) =>\n          val givenLedgerTime = transactionEntry.ledgerEffectiveTime.toInstant"
  },
  {
    "id" : "60ecf4c4-0b31-4e04-8c1a-f39d6f8b15a9",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "5930ae83-b3f5-41a7-9514-0bda508ebb13",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "For readability just calculating the max of these mins should be simpler either via `.map` + `.getOrElse` for the optional one or branching on the optional one or putting in place of it something like epoch start which won't be the maximum. Here we are calling `.flatten` on a `List` that will surely have 2 values.",
        "createdAt" : "2020-07-03T15:54:18Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "89553080-d173-4e95-9b5a-fc10fb4dcec5",
        "parentId" : "5930ae83-b3f5-41a7-9514-0bda508ebb13",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Will probably move this logic into `TimeModel` later.",
        "createdAt" : "2020-07-06T15:19:58Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +638,642 @@      timeModel: TimeModel): Instant =\n    List(\n      maybeDeduplicateUntil\n        .map(_.plus(Timestamp.Resolution)), // DeduplicateUntil defines a rejection window, endpoints inclusive\n      Some(timeModel.minRecordTime(ledgerTime)),"
  },
  {
    "id" : "1a69af88-2ad6-45c7-a701-db5a4e11e547",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "9feb2999-ff9f-47c3-b569-539dd0bef55f",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "I don't have any context (and the new `CommitContext.minimumRecordTime` property doesn't seem to be used anywhere) - what exactly is the minimum record time, and why does it depend on the submission time and the command deduplication time window?",
        "createdAt" : "2020-07-06T18:44:34Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e42cf4d5-0f0c-4edd-84dc-fe7ed0ede5cc",
        "parentId" : "9feb2999-ff9f-47c3-b569-539dd0bef55f",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "This property will be read by `KeyValueCommitting.dryRun` for pre-execution (see #6592 ). In case of pre-execution we are delaying the time-bound checks to post-execution as the record time will be only known then. Hence, we have to keep track of the time-bounds that are influenced by submission time and command deduplication time window in case of transactions. In the post-execution phase we only check the current record time against the time-bounds determined by the `Commiter`s.",
        "createdAt" : "2020-07-07T08:20:58Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +632,636 @@\n  @SuppressWarnings(Array(\"org.wartremover.warts.Option2Iterable\"))\n  private def transactionMinRecordTime(\n      submissionTime: Instant,\n      ledgerTime: Instant,"
  },
  {
    "id" : "c2361c75-f8cc-484c-9f03-d0b1bcddb55a",
    "prId" : 6591,
    "comments" : [
      {
        "id" : "8744319e-472c-456f-bcee-f6a54dabcb48",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The time model only describes a relation between the ledger time and the record time, the use of submission time here looks suspicious.",
        "createdAt" : "2020-07-06T18:46:28Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac3415e5-98d1-41cc-a75f-8b5d7630c495",
        "parentId" : "8744319e-472c-456f-bcee-f6a54dabcb48",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "As explained above, for pre-execution we need to ensure that the submission is still valid at the record time determined at post-execution hence the use of submission time here (we verify submission time against record time normally as part of the validation steps performed by `TransactionCommitter` in case of normal execution).",
        "createdAt" : "2020-07-07T09:20:54Z",
        "updatedAt" : "2020-07-07T09:21:34Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a7eb3434-6648-4555-9bea-9d8e43cbb025",
        "parentId" : "8744319e-472c-456f-bcee-f6a54dabcb48",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Ok, I see - the validity of submission time is somewhat loosly defined by https://github.com/digital-asset/daml/blob/master/daml-lf/spec/contract-id.rst#submission-time, and you chose to use the ledger time model bounds for submission time check. ",
        "createdAt" : "2020-07-07T12:15:12Z",
        "updatedAt" : "2020-07-07T12:15:13Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a393529f-1986-4f20-a558-fffe8296303f",
        "parentId" : "8744319e-472c-456f-bcee-f6a54dabcb48",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Exactly!",
        "createdAt" : "2020-07-07T13:31:34Z",
        "updatedAt" : "2020-07-07T13:31:35Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69acdd932ebffbf0a5f1f579bdea8256ed94439f",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +641,645 @@        .map(_.plus(Timestamp.Resolution)), // DeduplicateUntil defines a rejection window, endpoints inclusive\n      Some(timeModel.minRecordTime(ledgerTime)),\n      Some(timeModel.minRecordTime(submissionTime))\n    ).flatten.max\n"
  },
  {
    "id" : "83865d10-5616-4f74-9556-8bb325ee3484",
    "prId" : 6538,
    "comments" : [
      {
        "id" : "1a947402-fa6e-44bd-a2d4-aed3a52d950a",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Note that `import com.daml.ledger.participant.state.kvutils.committer.TransactionCommitter._` above seems to have become unused.",
        "createdAt" : "2020-07-01T09:13:34Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8518224-b1a1-4b58-9115-56490aa5e327",
        "parentId" : "1a947402-fa6e-44bd-a2d4-aed3a52d950a",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Removed.",
        "createdAt" : "2020-07-01T12:48:07Z",
        "updatedAt" : "2020-07-01T13:47:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fcd13b1e8abafa8318221497401dd1746cfe5e2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +79,83 @@    isVisible && isActive\n  }\n\n  /** Reject duplicate commands\n    */"
  },
  {
    "id" : "b7866a30-434e-492c-98c8-de91a5447220",
    "prId" : 5901,
    "comments" : [
      {
        "id" : "f54446d7-1b1f-413f-a2b4-768e9625b45e",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Can this be shortened?",
        "createdAt" : "2020-05-08T07:18:01Z",
        "updatedAt" : "2020-05-08T18:45:01Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "35f3f7c4-9bc5-4ca4-8483-14bd81917289",
        "parentId" : "f54446d7-1b1f-413f-a2b4-768e9625b45e",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I find it quite handy because one can see the full metric patch.",
        "createdAt" : "2020-05-08T07:35:14Z",
        "updatedAt" : "2020-05-08T18:45:01Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f6d51a60-0bfb-4b88-9f14-444ebfd6b764",
        "parentId" : "f54446d7-1b1f-413f-a2b4-768e9625b45e",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "True, I was thinking about aliasing with a shorter but still meaningful name such as `commitInterpreterTime`, the long name would only be a click away. Disavantage: not one click away on Github so, on second thought, I withdraw it.",
        "createdAt" : "2020-05-08T07:48:52Z",
        "updatedAt" : "2020-05-08T18:45:01Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ee7ac8b5c8db2514f0b159448d9f9104133666c7",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +169,173 @@  private def validateModelConformance: Step =\n    (commitContext, transactionEntry) =>\n      metrics.daml.kvutils.committer.transaction.interpretTimer.time(() => {\n        // Pull all keys from referenced contracts. We require this for 'fetchByKey' calls\n        // which are not evidenced in the transaction itself and hence the contract key state is"
  }
]