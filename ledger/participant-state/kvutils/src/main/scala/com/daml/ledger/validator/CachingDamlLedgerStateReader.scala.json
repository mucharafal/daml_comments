[
  {
    "id" : "b0cea5d3-dfde-4918-9926-d3ac4da3a017",
    "prId" : 6111,
    "comments" : [
      {
        "id" : "db2f6848-ab9f-4488-9e85-531f37ab30dd",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "A chain like this would probably benefit from a `.view`.\r\n\r\n```suggestion\r\n      .view\r\n      .map(key => key -> cache.getIfPresent(key))\r\n```",
        "createdAt" : "2020-05-27T09:28:19Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94d047fb-a94d-4dfc-baab-2fa4a0ead2ec",
        "parentId" : "db2f6848-ab9f-4488-9e85-531f37ab30dd",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Good point -- changed accordingly.",
        "createdAt" : "2020-05-27T10:10:10Z",
        "updatedAt" : "2020-05-28T08:28:21Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4eaa7219a57e7cae32f14958b2c32423ade3c9d3",
    "line" : null,
    "diffHunk" : "@@ -37,9 +36,12 @@ class CachingDamlLedgerStateReader(\n \n   override def readState(keys: Seq[DamlStateKey]): Future[Seq[Option[DamlStateValue]]] = {\n     this.synchronized { readSet ++= keys }\n-    val cachedValues = cache.getAllPresent(keys.asJava).asScala.map {\n-      case (key, value) => key -> Some(value)\n-    }\n+    val cachedValues = keys\n+      .map { key =>\n+        key -> cache.getIfPresent(key)\n+      }"
  }
]