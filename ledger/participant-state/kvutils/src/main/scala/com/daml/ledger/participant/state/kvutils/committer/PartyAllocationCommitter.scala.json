[
  {
    "id" : "9f63b78e-1d89-4c76-8f93-f6eb70814c46",
    "prId" : 6630,
    "comments" : [
      {
        "id" : "bd41f343-9a28-483e-9460-207d5919159c",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "It is not too apparent that the record time is always `None` here; I'd consider specializing into e.g. `buildPreExecutionOutOfBoundsLogEntry`.",
        "createdAt" : "2020-07-09T06:42:39Z",
        "updatedAt" : "2020-07-09T10:04:48Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "92df1973-a2c0-4ac9-a659-48f25118a18a",
        "parentId" : "bd41f343-9a28-483e-9460-207d5919159c",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Added a separate method for setting out-of-time-bounds log entry.",
        "createdAt" : "2020-07-09T09:31:48Z",
        "updatedAt" : "2020-07-09T10:04:48Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "30f59a7ea813c8683703e913a307efff5574108f",
    "line" : null,
    "diffHunk" : "@@ -118,18 +118,25 @@ private[kvutils] class PartyAllocationCommitter(\n         .build\n     )\n \n-    val logEntry = buildLogEntryWithOptionalRecordTime(\n+    val successLogEntry = buildLogEntryWithOptionalRecordTime(\n       ctx.getRecordTime,\n       _.setPartyAllocationEntry(partyAllocationEntry))\n-    StepStop(logEntry)\n+    if (ctx.preExecute) {\n+      ctx.outOfTimeBoundsLogEntry = Some(\n+        buildRejectionLogEntry(ctx, partyAllocationEntry, identity, incrementMetric = false))"
  },
  {
    "id" : "1aa7204d-6545-4d25-abeb-a98f8c704d96",
    "prId" : 5161,
    "comments" : [
      {
        "id" : "92e60036-4d5f-4e7d-8a31-641616f0e0a5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n      partyAllocationEntry: DamlPartyAllocationEntry.Builder,\r\n```\r\n:smile: ",
        "createdAt" : "2020-03-24T14:16:18Z",
        "updatedAt" : "2020-03-24T18:23:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dbe4529bcf0b7b72c7efb26360c5cc3c817ddf85",
    "line" : null,
    "diffHunk" : "@@ -3,26 +3,29 @@\n \n package com.daml.ledger.participant.state.kvutils.committer\n \n-import com.codahale.metrics.Counter\n+import com.codahale.metrics.{Counter, MetricRegistry}\n import com.daml.ledger.participant.state.kvutils.Conversions.{\n   buildTimestamp,\n   partyAllocationDedupKey\n }\n import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n import com.digitalasset.daml.lf.data.Ref\n \n-private[kvutils] case object PartyAllocationCommitter\n-    extends Committer[DamlPartyAllocationEntry, DamlPartyAllocationEntry.Builder] {\n+private[kvutils] class PartyAllocationCommitter(\n+    override protected val metricRegistry: MetricRegistry,\n+) extends Committer[DamlPartyAllocationEntry, DamlPartyAllocationEntry.Builder] {\n+\n+  override protected val committerName = \"party_allocation\"\n \n   private object Metrics {\n-    // kvutils.PartyAllocationCommitter.*\n-    val accepts: Counter = metricsRegistry.counter(metricsName(\"accepts\"))\n-    val rejections: Counter = metricsRegistry.counter(metricsName(\"rejections\"))\n+    val accepts: Counter = metricRegistry.counter(metricsName(\"accepts\"))\n+    val rejections: Counter = metricRegistry.counter(metricsName(\"rejections\"))\n   }\n \n   private def rejectionTraceLog(\n       msg: String,\n-      partyAllocationEntry: DamlPartyAllocationEntry.Builder): Unit =\n+      partyAllocationEntry: DamlPartyAllocationEntry.Builder"
  },
  {
    "id" : "e82cadd0-bf69-4769-ba89-a2f10c850f42",
    "prId" : 3888,
    "comments" : [
      {
        "id" : "089c609b-996e-4a2c-9407-400c6e66630a",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`party_allocation`",
        "createdAt" : "2019-12-18T12:47:24Z",
        "updatedAt" : "2019-12-18T12:57:32Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "44447cb6-be16-4f36-b6b1-b35250a2325f",
        "parentId" : "089c609b-996e-4a2c-9407-400c6e66630a",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-12-18T12:58:40Z",
        "updatedAt" : "2019-12-18T12:58:40Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b3f8ca00f4b0a6155052c48ac1ddd953df935889",
    "line" : null,
    "diffHunk" : "@@ -161,4 +161,6 @@ private[kvutils] case object PartyAllocationCommitter\n     \"buildLogEntry\" -> buildLogEntry\n   )\n \n+  override lazy val committerName = \"partyAllocation\""
  },
  {
    "id" : "8117e8d0-8261-4224-a32c-4ac6252d4edc",
    "prId" : 3847,
    "comments" : [
      {
        "id" : "93275b75-22aa-4e8f-a860-0dd73b593ce6",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "make into constant",
        "createdAt" : "2019-12-17T12:19:30Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "68eecea0-7a71-47d3-9a48-54de10cea30a",
        "parentId" : "93275b75-22aa-4e8f-a860-0dd73b593ce6",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Same as above",
        "createdAt" : "2019-12-17T16:18:11Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c9a07f89574f1c170c540c240010fa88a826ce2f",
    "line" : 73,
    "diffHunk" : "@@ -93,6 +112,13 @@ private[kvutils] case object PartyAllocationCommitter\n         .build\n     )\n \n+    ctx.set(\n+      partyAllocationDedupKey(ctx.getParticipantId, partyAllocationEntry.getSubmissionId),\n+      DamlStateValue.newBuilder"
  },
  {
    "id" : "8857117d-4181-47d9-b438-684f32621402",
    "prId" : 3701,
    "comments" : [
      {
        "id" : "3155963b-b33a-4b87-9da7-29a2c37a352a",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "here the implementation goes wrong: if `partyKey` isn't listed as an input we cannot distinguish between it actually being unallocated and submitter cheating. I will fix this here and in PackageCommitter.",
        "createdAt" : "2019-12-04T10:56:21Z",
        "updatedAt" : "2019-12-04T12:47:49Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8eb17918b3460de8d54a0e9129d083b7f46e95bd",
    "line" : 64,
    "diffHunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.committer\n+\n+import com.codahale.metrics.Counter\n+import com.daml.ledger.participant.state.kvutils.Conversions.buildTimestamp\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.kvutils.Pretty\n+import com.digitalasset.daml.lf.data.Ref\n+\n+private[kvutils] case object PartyAllocationCommitter\n+    extends Committer[DamlPartyAllocationEntry, DamlPartyAllocationEntry.Builder] {\n+\n+  private object Metrics {\n+    // kvutils.PartyAllocationCommitter.*\n+    val accepts: Counter = metricsRegistry.counter(metricsName(\"accepts\"))\n+    val rejections: Counter = metricsRegistry.counter(metricsName(\"rejections\"))\n+  }\n+\n+  private def rejectionTraceLog(\n+      msg: String,\n+      ctx: CommitContext,\n+      partyAllocationEntry: DamlPartyAllocationEntry.Builder): Unit =\n+    logger.trace(\n+      s\"Party allocation rejected, $msg, entryId=${Pretty.prettyEntryId(ctx.getEntryId)}, submId=${partyAllocationEntry.getSubmissionId}\")\n+\n+  private val authorizeSubmission: Step = (ctx, partyAllocationEntry) => {\n+    if (ctx.getParticipantId == partyAllocationEntry.getParticipantId)\n+      StepContinue(partyAllocationEntry)\n+    else {\n+      val msg =\n+        s\"participant id ${partyAllocationEntry.getParticipantId} did not match authenticated participant id ${ctx.getParticipantId}\"\n+      rejectionTraceLog(msg, ctx, partyAllocationEntry)\n+      StepStop(\n+        buildRejectionLogEntry(\n+          ctx,\n+          partyAllocationEntry,\n+          _.setParticipantNotAuthorized(\n+            DamlPartyAllocationRejectionEntry.ParticipantNotAuthorized.newBuilder\n+              .setDetails(msg))))\n+    }\n+  }\n+\n+  private val validateParty: Step = (ctx, partyAllocationEntry) => {\n+    val party = partyAllocationEntry.getParty\n+    if (Ref.Party.fromString(party).isRight)\n+      StepContinue(partyAllocationEntry)\n+    else {\n+      val msg = s\"party string '${party}' invalid\"\n+      rejectionTraceLog(msg, ctx, partyAllocationEntry)\n+      StepStop(\n+        buildRejectionLogEntry(\n+          ctx,\n+          partyAllocationEntry,\n+          _.setInvalidName(DamlPartyAllocationRejectionEntry.InvalidName.newBuilder\n+            .setDetails(msg))))\n+    }\n+  }\n+\n+  private val deduplicate: Step = (ctx, partyAllocationEntry) => {\n+    val party = partyAllocationEntry.getParty\n+    val partyKey = DamlStateKey.newBuilder.setParty(party).build\n+    if (ctx.get(partyKey).isEmpty)"
  },
  {
    "id" : "c0b2c1f1-7b2c-4c91-9798-dfddd99eb86b",
    "prId" : 3701,
    "comments" : [
      {
        "id" : "3f19f22f-2e11-4647-ad12-8c3010bf9676",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "just heads up: I want the metrics registry to be passed from outside once we refactor the whole API. We'd allocate one \"top-level\" committer that gets the engine, metrics registry etc. things passed to it.",
        "createdAt" : "2019-12-04T10:57:55Z",
        "updatedAt" : "2019-12-04T12:47:49Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8eb17918b3460de8d54a0e9129d083b7f46e95bd",
    "line" : 15,
    "diffHunk" : "@@ -0,0 +1,135 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.committer\n+\n+import com.codahale.metrics.Counter\n+import com.daml.ledger.participant.state.kvutils.Conversions.buildTimestamp\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.kvutils.Pretty\n+import com.digitalasset.daml.lf.data.Ref\n+\n+private[kvutils] case object PartyAllocationCommitter\n+    extends Committer[DamlPartyAllocationEntry, DamlPartyAllocationEntry.Builder] {\n+\n+  private object Metrics {"
  }
]