[
  {
    "id" : "2adb7c54-f912-4517-b852-726f72834e41",
    "prId" : 3065,
    "comments" : [
      {
        "id" : "593ff3cd-5b2f-4d69-9a2a-e6c9b54806d3",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Would it make sense to prefix this with something like the participant id?",
        "createdAt" : "2019-10-03T08:34:37Z",
        "updatedAt" : "2019-10-03T08:35:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "724f6cd7-ce0c-480b-9968-b93f9beba04e",
        "parentId" : "593ff3cd-5b2f-4d69-9a2a-e6c9b54806d3",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Not possible with current design where we process requests from many different participants and committers.",
        "createdAt" : "2019-10-03T09:38:37Z",
        "updatedAt" : "2019-10-03T09:38:38Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f93e0502-2fa7-4731-bc3f-bbf1a66688f5",
        "parentId" : "593ff3cd-5b2f-4d69-9a2a-e6c9b54806d3",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Could you elaborate? How can the same kvutils instance (as in the jvm object) be used in multiple participants? We can call it something else, if the name `participantId` is the issue. Anyway, not blocking or major on my side. Just trying to understand :)",
        "createdAt" : "2019-10-03T09:47:58Z",
        "updatedAt" : "2019-10-03T09:47:58Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e56cb01f-6c2e-4f9d-a9d4-acce666c6b14",
        "parentId" : "593ff3cd-5b2f-4d69-9a2a-e6c9b54806d3",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "This code is not used by participants. It is used by the committer to process a submission from a participant. We also use the same validator instance for multiple committers in development. But yes, it might make sense to include an identifier in the registry name for aggregation (though I guess that can also be solved at the point in which the metrics are collected).",
        "createdAt" : "2019-10-03T12:34:04Z",
        "updatedAt" : "2019-10-03T12:34:04Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2f01ac85d811524ea061ca8561b9e2eebfaca389",
    "line" : 141,
    "diffHunk" : "@@ -138,8 +108,53 @@ private[kvutils] case class ProcessPackageUpload(\n     )\n   }\n \n+  private val preload: Runnable = () => {\n+    val ctx = Metrics.preloadTimer.time()\n+    try {\n+      logger.trace(\"Preloading engine...\")\n+      val loadedPackages = engine.compiledPackages().packageIds\n+      val packages: Map[Ref.PackageId, Ast.Package] = Metrics.decodeTimer.time { () =>\n+        archives\n+          .filterNot(\n+            a =>\n+              Ref.PackageId\n+                .fromString(a.getHash)\n+                .fold(_ => false, loadedPackages.contains))\n+          .map { archive =>\n+            Decode.readArchiveAndVersion(archive)._1\n+          }\n+          .toMap\n+      }\n+      packages.headOption.foreach {\n+        case (pkgId, pkg) =>\n+          engine\n+            .preloadPackage(pkgId, pkg)\n+            .consume(\n+              _ => sys.error(\"Unexpected request to PCS in preloadPackage\"),\n+              pkgId => packages.get(pkgId),\n+              _ => sys.error(\"Unexpected request to keys in preloadPackage\")\n+            )\n+      }\n+      logger.trace(s\"Preload complete.\")\n+    } catch {\n+      case scala.util.control.NonFatal(e) =>\n+        logger.error(\"preload exception: $err\")\n+    } finally {\n+      val _ = ctx.stop()\n+    }\n+  }\n }\n \n-object ProcessPackageUpload {\n-  val serialContext = ExecutionContext.fromExecutor(Executors.newSingleThreadExecutor())\n+private[kvutils] object ProcessPackageUpload {\n+  private[committing] val serialContext =\n+    ExecutionContext.fromExecutor(Executors.newSingleThreadExecutor())\n+\n+  private[committing] object Metrics {\n+    private val registry = metrics.SharedMetricRegistries.getOrCreate(\"kvutils\")"
  },
  {
    "id" : "1c1a56f2-2952-4a9b-a5a5-2cee44e9488b",
    "prId" : 2924,
    "comments" : [
      {
        "id" : "935ebba9-b4e6-400e-8057-9c548f15ff78",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This executor and its thread will keep on living until the JVM shuts down. This is probably not a problem, but if you only need to run one task on a separate thread you may want to consider either shutting down the executor once its done, using a simple `Thread` and create a `Future` using a `Promise` based on that thread or alternatively run a simple execution context that uses a single thread and deploys the runnable onto that, without pooling.",
        "createdAt" : "2019-09-17T08:55:33Z",
        "updatedAt" : "2019-09-17T10:53:39Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7e1c217c-9a84-4f16-90d2-80981c4a843c",
        "parentId" : "935ebba9-b4e6-400e-8057-9c548f15ff78",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "What I need is all pre-loads to happen on the same single thread. Pre-loads can happen any time and they come in clusters. Doing them serially conserves resources and allows proper recognition of duplicates.",
        "createdAt" : "2019-09-17T10:49:10Z",
        "updatedAt" : "2019-09-17T10:53:39Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "697b15e41cd60705b8f46b66250e58e380642387",
    "line" : 114,
    "diffHunk" : "@@ -133,3 +138,7 @@ private[kvutils] case class ProcessPackageUpload(\n   }\n \n }\n+\n+object ProcessPackageUpload{\n+  val serialContext = ExecutionContext.fromExecutor(Executors.newSingleThreadExecutor())"
  }
]