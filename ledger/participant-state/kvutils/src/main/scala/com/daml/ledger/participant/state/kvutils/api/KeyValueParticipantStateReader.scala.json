[
  {
    "id" : "7a56d7a2-bd5c-41f6-ba1e-e965fb378dfa",
    "prId" : 6793,
    "comments" : [
      {
        "id" : "064c3168-45b6-427d-a7c7-38a56ad00322",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      timeUpdatesProvider: TimeUpdatesProvider = TimeUpdatesProvider.ReasonableDefault)(\r\n```",
        "createdAt" : "2020-08-04T09:14:25Z",
        "updatedAt" : "2020-08-05T07:01:01Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "039ccab2-8020-4af4-87f1-4fff72db5a26",
        "parentId" : "064c3168-45b6-427d-a7c7-38a56ad00322",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-08-04T12:32:30Z",
        "updatedAt" : "2020-08-05T07:01:01Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b29591138330b767e0e3a5dc19bca73b14d0522c",
    "line" : null,
    "diffHunk" : "@@ -76,9 +79,16 @@ class KeyValueParticipantStateReader private[api] (\n }\n \n object KeyValueParticipantStateReader {\n-  def apply(reader: LedgerReader, metrics: Metrics)(\n+  def apply(\n+      reader: LedgerReader,\n+      metrics: Metrics,\n+      timeUpdateProvider: TimeUpdatesProvider = TimeUpdatesProvider.ReasonableDefault)("
  },
  {
    "id" : "330db648-c3c3-4d1c-bcfc-95a37794ab1d",
    "prId" : 6793,
    "comments" : [
      {
        "id" : "c6e946ee-fe01-417f-b03d-ce7b7c831c2d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      timeUpdatesProvider)\r\n```",
        "createdAt" : "2020-08-04T09:14:33Z",
        "updatedAt" : "2020-08-05T07:01:01Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8264e83d-f8bf-4bf2-a96d-6f448587dc3d",
        "parentId" : "c6e946ee-fe01-417f-b03d-ce7b7c831c2d",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-08-04T12:30:19Z",
        "updatedAt" : "2020-08-05T07:01:01Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b29591138330b767e0e3a5dc19bca73b14d0522c",
    "line" : null,
    "diffHunk" : "@@ -76,9 +79,16 @@ class KeyValueParticipantStateReader private[api] (\n }\n \n object KeyValueParticipantStateReader {\n-  def apply(reader: LedgerReader, metrics: Metrics)(\n+  def apply(\n+      reader: LedgerReader,\n+      metrics: Metrics,\n+      timeUpdateProvider: TimeUpdatesProvider = TimeUpdatesProvider.ReasonableDefault)(\n       implicit materializer: Materializer): KeyValueParticipantStateReader =\n-    new KeyValueParticipantStateReader(reader, metrics, KeyValueConsumption.logEntryToUpdate)\n+    new KeyValueParticipantStateReader(\n+      reader,\n+      metrics,\n+      KeyValueConsumption.logEntryToUpdate,\n+      timeUpdateProvider)"
  },
  {
    "id" : "2e0c1a40-61f4-4c4d-8c2d-8f6c1b7b6a69",
    "prId" : 6677,
    "comments" : [
      {
        "id" : "1af4a84c-8cef-4219-9098-f898facbcbde",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "This will not work. KeyValueParticipantStateReader acts as a bridge of the two offset notions: the source's notion with a scalar offset and the indexer's that uses the composite offset (a triple of high/middle/low). \r\n\r\nThe offset we are given as an argument of this function is a composite, we need to strip the higher elements before passing it on.",
        "createdAt" : "2020-07-10T09:18:03Z",
        "updatedAt" : "2020-07-10T16:19:31Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f6bb9edf-79b9-4c12-9acb-7c222fa97d6c",
        "parentId" : "1af4a84c-8cef-4219-9098-f898facbcbde",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, indeed -- added more docs around what offsets are expected and changed this specific part to drop only the lowest index (the highest two are expected to be populated by the underlying reader).",
        "createdAt" : "2020-07-10T11:38:28Z",
        "updatedAt" : "2020-07-10T16:19:31Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "93567fa1261cb2dac8a33580d48fe38394806a15",
    "line" : null,
    "diffHunk" : "@@ -8,20 +8,22 @@ import akka.stream.Materializer\n import akka.stream.scaladsl.Source\n import com.daml.ledger.api.health.HealthStatus\n import com.daml.ledger.participant.state.kvutils.DamlKvutils.DamlLogEntryId\n-import com.daml.ledger.participant.state.kvutils.{Envelope, KVOffset, KeyValueConsumption}\n+import com.daml.ledger.participant.state.kvutils.{Envelope, OffsetBuilder, KeyValueConsumption}\n import com.daml.ledger.participant.state.v1._\n import com.daml.lf.data.Time\n import com.daml.metrics.{Metrics, Timed}\n \n class KeyValueParticipantStateReader(reader: LedgerReader, metrics: Metrics)(\n     implicit materializer: Materializer)\n     extends ReadService {\n+  import KeyValueParticipantStateReader.offsetForUpdate\n+\n   override def getLedgerInitialConditions(): Source[LedgerInitialConditions, NotUsed] =\n     Source.single(createLedgerInitialConditions())\n \n   override def stateUpdates(beginAfter: Option[Offset]): Source[(Offset, Update), NotUsed] = {\n     Source\n-      .single(beginAfter.map(KVOffset.onlyKeepHighestIndex))\n+      .single(beginAfter)"
  },
  {
    "id" : "0e0a8f8b-1e54-4e4a-af09-75508f513a3e",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "7ac72143-ea83-4f83-a4ef-d7482131e059",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "This should probably delegate to `reader.currentHealth()`.",
        "createdAt" : "2019-12-23T09:12:53Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "08d8adac-7596-4e0e-aef7-e2f74f4c2ba1",
        "parentId" : "7ac72143-ea83-4f83-a4ef-d7482131e059",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Changed.",
        "createdAt" : "2020-01-06T10:03:32Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,57 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueConsumption}\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy}\n+\n+class KeyValueParticipantStateReader(reader: LedgerReader)(implicit materializer: Materializer)\n+    extends ReadService {\n+  override def getLedgerInitialConditions(): Source[LedgerInitialConditions, NotUsed] =\n+    Source.single(createLedgerInitialConditions())\n+\n+  override def stateUpdates(beginAfter: Option[Offset]): Source[(Offset, Update), NotUsed] =\n+    reader\n+      .events(toReaderOffset(beginAfter))\n+      .flatMapConcat { record =>\n+        val updates = Envelope.open(record.envelope) match {\n+          case Right(Envelope.LogEntryMessage(logEntry)) =>\n+            KeyValueConsumption\n+              .logEntryToUpdate(record.entryId, logEntry)\n+              .zipWithIndex\n+              .map {\n+                case (entry, index) =>\n+                  (toReturnedOffset(index, record.offset), entry)\n+              }\n+          case _ => Seq.empty\n+        }\n+        Source.fromIterator(() => updates.iterator)\n+      }\n+      .filter {\n+        case (offset, _) => beginAfter.forall(offset > _)\n+      }\n+\n+  override def currentHealth(): HealthStatus = Healthy"
  },
  {
    "id" : "c72a70a0-c086-41a6-895c-133f19c0b577",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "ad340071-d4dd-4fce-acf8-967876a4ae30",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Why is `KeyValueParticipantStateWriter` closeable but this isn't?",
        "createdAt" : "2019-12-23T11:01:23Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6d4b83ad-1ac9-4441-83f1-d341cfb462aa",
        "parentId" : "ad340071-d4dd-4fce-acf8-967876a4ae30",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Fixed that -- now all of `LedgerReader`, `LedgerWriter` and their wrapping classes are closeable.",
        "createdAt" : "2020-01-06T17:22:17Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueConsumption}\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy}\n+\n+class KeyValueParticipantStateReader(reader: LedgerReader)(implicit materializer: Materializer)"
  },
  {
    "id" : "867aec5e-4daa-4e72-ba7d-edca10c54c2c",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "299961fc-0fc9-4f3e-8e2a-1a9a63f7ae0b",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Should we just throw here? If we get other data than log entries we have a bug.",
        "createdAt" : "2020-01-06T09:22:42Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d4254aa9-bf90-4f5c-a9ba-8f9a81967c7b",
        "parentId" : "299961fc-0fc9-4f3e-8e2a-1a9a63f7ae0b",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If I'm not interpreting this code wrong, `Envelop.open` returns a `Try`, so instead of throwing in a branch of the `match` clause it's enough to apply the above code in a `map`.",
        "createdAt" : "2020-01-06T16:15:15Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "315a3a1d-922c-4b93-a671-25d4403c0fdf",
        "parentId" : "299961fc-0fc9-4f3e-8e2a-1a9a63f7ae0b",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Changed it to throw in case of an invalid log entry.",
        "createdAt" : "2020-01-07T11:02:57Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueConsumption}\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy}\n+\n+class KeyValueParticipantStateReader(reader: LedgerReader)(implicit materializer: Materializer)\n+    extends ReadService {\n+  override def getLedgerInitialConditions(): Source[LedgerInitialConditions, NotUsed] =\n+    Source.single(createLedgerInitialConditions())\n+\n+  override def stateUpdates(beginAfter: Option[Offset]): Source[(Offset, Update), NotUsed] =\n+    reader\n+      .events(toReaderOffset(beginAfter))\n+      .flatMapConcat { record =>\n+        val updates = Envelope.open(record.envelope) match {\n+          case Right(Envelope.LogEntryMessage(logEntry)) =>\n+            KeyValueConsumption\n+              .logEntryToUpdate(record.entryId, logEntry)\n+              .zipWithIndex\n+              .map {\n+                case (entry, index) =>\n+                  (toReturnedOffset(index, record.offset), entry)\n+              }\n+          case _ => Seq.empty"
  },
  {
    "id" : "3a090d5c-4b8d-433f-9d85-10cf33fad608",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "dfe3b0c1-1bb0-40eb-9c1a-2bcac3c25015",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Why do we need to filter again? Shouldn't this be already handled by line 21?",
        "createdAt" : "2020-01-06T13:08:44Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca88a1da-9db7-42b2-ab42-b2820152dce2",
        "parentId" : "dfe3b0c1-1bb0-40eb-9c1a-2bcac3c25015",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "This needs to be done as the `LedgerReader` implementation may not support filtering.",
        "createdAt" : "2020-01-06T15:32:05Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 43,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueConsumption}\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy}\n+\n+class KeyValueParticipantStateReader(reader: LedgerReader)(implicit materializer: Materializer)\n+    extends ReadService {\n+  override def getLedgerInitialConditions(): Source[LedgerInitialConditions, NotUsed] =\n+    Source.single(createLedgerInitialConditions())\n+\n+  override def stateUpdates(beginAfter: Option[Offset]): Source[(Offset, Update), NotUsed] =\n+    reader\n+      .events(toReaderOffset(beginAfter))\n+      .flatMapConcat { record =>\n+        val updates = Envelope.open(record.envelope) match {\n+          case Right(Envelope.LogEntryMessage(logEntry)) =>\n+            KeyValueConsumption\n+              .logEntryToUpdate(record.entryId, logEntry)\n+              .zipWithIndex\n+              .map {\n+                case (entry, index) =>\n+                  (toReturnedOffset(index, record.offset), entry)\n+              }\n+          case _ => Seq.empty\n+        }\n+        Source.fromIterator(() => updates.iterator)\n+      }\n+      .filter {\n+        case (offset, _) => beginAfter.forall(offset > _)"
  },
  {
    "id" : "7ab71174-dac1-453f-a094-b504f170fa1f",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "cc2f3390-94f7-473f-bfbf-fd5e9ebf5b62",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "You can use `mapConcat` to not have to use `Source.fromIterator`.",
        "createdAt" : "2020-01-06T13:11:03Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f683104-64c9-485c-94f3-50969434065f",
        "parentId" : "cc2f3390-94f7-473f-bfbf-fd5e9ebf5b62",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "We may generate 1 or more records from a single event hence `flatMapConcat`.",
        "createdAt" : "2020-01-06T15:32:45Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 23,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueConsumption}\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy}\n+\n+class KeyValueParticipantStateReader(reader: LedgerReader)(implicit materializer: Materializer)\n+    extends ReadService {\n+  override def getLedgerInitialConditions(): Source[LedgerInitialConditions, NotUsed] =\n+    Source.single(createLedgerInitialConditions())\n+\n+  override def stateUpdates(beginAfter: Option[Offset]): Source[(Offset, Update), NotUsed] =\n+    reader\n+      .events(toReaderOffset(beginAfter))\n+      .flatMapConcat { record =>"
  },
  {
    "id" : "40f49a80-9ed1-4cdf-b4aa-f81397ce7046",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "b9e48d63-cba3-4382-bf02-4889c994b72e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Aren't you filtering out events before `beginAfter` above? Is this code not necessary or am I missing something?",
        "createdAt" : "2020-01-06T16:16:43Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "da13f878-0402-41b7-82cd-dd2c04d6fcc8",
        "parentId" : "b9e48d63-cba3-4382-bf02-4889c994b72e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "The underlying reader implementation (`LedgerReader.events`) may not do filtering hence we ensure that here.",
        "createdAt" : "2020-01-06T17:18:57Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 43,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.kvutils.{Envelope, KeyValueConsumption}\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy}\n+\n+class KeyValueParticipantStateReader(reader: LedgerReader)(implicit materializer: Materializer)\n+    extends ReadService {\n+  override def getLedgerInitialConditions(): Source[LedgerInitialConditions, NotUsed] =\n+    Source.single(createLedgerInitialConditions())\n+\n+  override def stateUpdates(beginAfter: Option[Offset]): Source[(Offset, Update), NotUsed] =\n+    reader\n+      .events(toReaderOffset(beginAfter))\n+      .flatMapConcat { record =>\n+        val updates = Envelope.open(record.envelope) match {\n+          case Right(Envelope.LogEntryMessage(logEntry)) =>\n+            KeyValueConsumption\n+              .logEntryToUpdate(record.entryId, logEntry)\n+              .zipWithIndex\n+              .map {\n+                case (entry, index) =>\n+                  (toReturnedOffset(index, record.offset), entry)\n+              }\n+          case _ => Seq.empty\n+        }\n+        Source.fromIterator(() => updates.iterator)\n+      }\n+      .filter {\n+        case (offset, _) => beginAfter.forall(offset > _)"
  }
]