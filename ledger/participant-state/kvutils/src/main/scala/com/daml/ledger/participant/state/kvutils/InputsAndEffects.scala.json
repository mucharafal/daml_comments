[
  {
    "id" : "19bfdd72-91e0-40a0-af13-bcda66806acf",
    "prId" : 6143,
    "comments" : [
      {
        "id" : "77f2d4be-4a71-456d-8094-5e05672de0c4",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "At the point where `computeInputs` is called, the transaction isn't committed yet. Correct, @miklos-da?",
        "createdAt" : "2020-05-28T13:31:13Z",
        "updatedAt" : "2020-06-08T14:24:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89af6d420800adee764159fb1c3073fae07859e9",
    "line" : null,
    "diffHunk" : "@@ -44,7 +43,7 @@ private[kvutils] object InputsAndEffects {\n     * and packages.\n     */\n   def computeInputs(\n-      tx: Transaction.Transaction,\n+      tx: CommittedTransaction,"
  },
  {
    "id" : "069bf7ee-a4f0-4451-9753-ff877b4cc14e",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "37afcf0d-8ce4-4d5a-9e7a-69760a28fd98",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "preferably throw a kvutils `Err` here instead as the caller assumes only those are expected.",
        "createdAt" : "2020-02-27T13:44:53Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0eb3c269-d401-4b7b-8c88-62512334c4a5",
        "parentId" : "37afcf0d-8ce4-4d5a-9e7a-69760a28fd98",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done.",
        "createdAt" : "2020-02-27T18:32:17Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -106,57 +102,50 @@ private[kvutils] object InputsAndEffects {\n   }\n \n   /** Compute the effects of a DAML transaction, that is, the created and consumed contracts. */\n-  def computeEffects(entryId: DamlLogEntryId, tx: SubmittedTransaction): Effects = {\n+  def computeEffects(entryId: DamlLogEntryId, tx: Transaction.AbsTransaction): Effects = {\n     // TODO(JM): Skip transient contracts in createdContracts/updateContractKeys. E.g. rewrite this to\n     // fold bottom up (with reversed roots!) and skip creates of archived contracts.\n     tx.fold(Effects.empty) {\n       case (effects, (nodeId, node)) =>\n         node match {\n-          case fetch: NodeFetch[ContractId] =>\n+          case fetch @ NodeFetch(_, _, _, _, _, _) =>\n             effects\n-          case create: NodeCreate[ContractId, VersionedValue[ContractId]] =>\n+          case create @ NodeCreate(_, _, _, _, _, _, _) =>\n             effects.copy(\n-              createdContracts =\n-                relativeContractIdToStateKey(entryId, create.coid.asInstanceOf[RelativeContractId]) -> create\n-                  :: effects.createdContracts,\n+              createdContracts = contractIdToStateKey(create.coid) -> create :: effects.createdContracts,\n               updatedContractKeys = create.key\n                 .fold(effects.updatedContractKeys)(\n                   keyWithMaintainers =>\n-                    effects.updatedContractKeys +\n+                    effects.updatedContractKeys.updated(\n                       (globalKeyToStateKey(\n                         GlobalKey(\n                           create.coinst.template,\n-                          forceNoContractIds(keyWithMaintainers.key.value))) ->\n-                        DamlContractKeyState.newBuilder\n-                          .setContractId(encodeRelativeContractId(\n-                            entryId,\n-                            create.coid.asInstanceOf[RelativeContractId]))\n-                          .build))\n+                          // FIXME: We probably should not crash here."
  },
  {
    "id" : "1ed0e2db-b49d-4529-8747-dbe7915389c6",
    "prId" : 637,
    "comments" : [
      {
        "id" : "26e54159-baf3-449f-ab45-a959c8a5c129",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "add note that contract-keys are missing for now; and link to issue in BETA milestone.\r\n\r\nALSO: make sure that there is a hard-failure and an error log entry in case a contract-key is used.",
        "createdAt" : "2019-04-26T13:23:25Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 26,
    "diffHunk" : "@@ -0,0 +1,107 @@\n+package com.daml.ledger.participant.state.kvutils\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions.{\n+  absoluteContractIdToLogEntryId,\n+  absoluteContractIdToStateKey,\n+  relativeContractIdToStateKey\n+}\n+import com.daml.ledger.participant.state.v1.SubmittedTransaction\n+import com.digitalasset.daml.lf.transaction.GenTransaction\n+import com.digitalasset.daml.lf.transaction.Node.{\n+  NodeCreate,\n+  NodeExercises,\n+  NodeFetch,\n+  NodeLookupByKey\n+}\n+import com.digitalasset.daml.lf.value.Value.{AbsoluteContractId, ContractId, RelativeContractId}\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+\n+private[kvutils] object InputsAndEffects {\n+\n+  /** The effects of the transaction, that is what contracts\n+    * were consumed and created, and what contract keys were updated."
  },
  {
    "id" : "a48de218-8476-40a5-83ca-36e006ad683c",
    "prId" : 637,
    "comments" : [
      {
        "id" : "be3cce6a-7947-47a2-9ec3-84a8020b8b38",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "bail hard! Rather bail than silently succeed. Always log!",
        "createdAt" : "2019-04-26T13:24:02Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bef6bf0e-a437-4a18-977f-94be0f5e013a",
        "parentId" : "be3cce6a-7947-47a2-9ec3-84a8020b8b38",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "good point, thanks!",
        "createdAt" : "2019-04-26T13:49:17Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi M채ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,107 @@\n+package com.daml.ledger.participant.state.kvutils\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions.{\n+  absoluteContractIdToLogEntryId,\n+  absoluteContractIdToStateKey,\n+  relativeContractIdToStateKey\n+}\n+import com.daml.ledger.participant.state.v1.SubmittedTransaction\n+import com.digitalasset.daml.lf.transaction.GenTransaction\n+import com.digitalasset.daml.lf.transaction.Node.{\n+  NodeCreate,\n+  NodeExercises,\n+  NodeFetch,\n+  NodeLookupByKey\n+}\n+import com.digitalasset.daml.lf.value.Value.{AbsoluteContractId, ContractId, RelativeContractId}\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+\n+private[kvutils] object InputsAndEffects {\n+\n+  /** The effects of the transaction, that is what contracts\n+    * were consumed and created, and what contract keys were updated.\n+    */\n+  final case class Effects(\n+      /** The contracts consumed by this transaction.\n+        * When committing the transaction these contracts must be marked consumed.\n+        * A contract should be marked consumed when the transaction is committed,\n+        * regardless of the ledger effective time of the transaction (e.g. a transaction\n+        * with an earlier ledger effective time that gets committed later would find the\n+        * contract inactive).\n+        */\n+      consumedContracts: List[DamlStateKey],\n+      /** The contracts created by this transaction.\n+        * When the transaction is committed, keys marking the activeness of these\n+        * contracts should be created. The key should be a combination of the transaction\n+        * id and the relative contract id (that is, the node index).\n+        */\n+      createdContracts: List[DamlStateKey]\n+  )\n+\n+  def computeInputs(tx: SubmittedTransaction): (List[DamlLogEntryId], List[DamlStateKey]) = {\n+    // FIXME(JM): Get referenced packages from the transaction (once they're added to it)\n+    def addInput(inputs: List[DamlLogEntryId], coid: ContractId): List[DamlLogEntryId] =\n+      coid match {\n+        case acoid: AbsoluteContractId =>\n+          absoluteContractIdToLogEntryId(acoid)._1 :: inputs\n+        case _ =>\n+          inputs\n+      }\n+\n+    tx.fold(GenTransaction.TopDown, (List.empty[DamlLogEntryId], List.empty[DamlStateKey])) {\n+      case ((logEntryInputs, stateInputs), (nodeId, node)) =>\n+        node match {\n+          case fetch: NodeFetch[ContractId] =>\n+            (addInput(logEntryInputs, fetch.coid), stateInputs)\n+          case create: NodeCreate[_, _] =>\n+            (logEntryInputs, stateInputs)\n+          case exe: NodeExercises[_, ContractId, _] =>\n+            (\n+              addInput(logEntryInputs, exe.targetCoid),\n+              (exe.consuming, exe.targetCoid) match {\n+                case (true, acoid: AbsoluteContractId) =>\n+                  absoluteContractIdToStateKey(acoid) :: stateInputs\n+                case _ =>\n+                  stateInputs\n+              }\n+            )\n+          case l: NodeLookupByKey[_, _] =>\n+            // FIXME(JM): track fetched keys"
  }
]