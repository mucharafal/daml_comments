[
  {
    "id" : "d2a4b161-b8f9-49b0-a8fb-a48d41d337fa",
    "prId" : 3553,
    "comments" : [
      {
        "id" : "823e0f37-435b-466e-86ab-048f6a9b07c4",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "There's a much shorter and imho clearer way to write this: `currentConfigEntry.forall(_.getParticipantId == participantId)`",
        "createdAt" : "2019-11-25T08:18:05Z",
        "updatedAt" : "2019-11-27T14:09:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04d3118b43225ee033b4c9bba93102cdc650df6a",
    "line" : null,
    "diffHunk" : "@@ -41,136 +41,147 @@ private[kvutils] case class ProcessConfigSubmission(\n     )\n   }\n \n-  private def checkTtl(): Commit[Unit] = delay {\n+  private val checkTtl: Commit[Unit] = delay {\n     // Check the maximum record time against the record time of the commit.\n     // This mechanism allows the submitter to detect lost submissions and retry\n     // with a submitter controlled rate.\n     val maxRecordTime = parseTimestamp(configSubmission.getMaximumRecordTime)\n     if (recordTime > maxRecordTime) {\n       logger.warn(\n         s\"Rejected configuration submission. The submission timed out ($recordTime > $maxRecordTime)\")\n-      rejectTimedOut\n+      reject(\n+        _.setTimedOut(\n+          DamlConfigurationRejectionEntry.TimedOut.newBuilder\n+            .setMaximumRecordTime(configSubmission.getMaximumRecordTime)\n+        ))\n     } else {\n       pass\n     }\n   }\n \n-  private def authorizeSubmission(): Commit[Unit] = delay {\n+  private val authorizeSubmission: Commit[Unit] = delay {\n     // Submission is authorized when:\n-    //   1) The authorized participant is unset\n-    //   2) The authorized participant matches the submitting participant.\n+    //      the provided participant id matches source participant id\n+    //  AND (\n+    //      there exists no current configuration\n+    //   OR the current configuration's participant matches the submitting participant.\n+    //  )\n+    val submittingParticipantId = configSubmission.getParticipantId\n+    val wellFormed = participantId == submittingParticipantId\n+\n     val authorized =\n-      currentConfig.authorizedParticipantId\n-        .fold(true)(authPid => authPid == participantId)\n+      currentConfigEntry.fold(true) {"
  }
]