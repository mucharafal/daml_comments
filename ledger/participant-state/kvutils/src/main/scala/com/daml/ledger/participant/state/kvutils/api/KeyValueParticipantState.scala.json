[
  {
    "id" : "41e0f201-42a4-4fba-9ed1-74656d3861d5",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "09b0f140-9e73-498f-a300-de10a7af678f",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      estimatedInterpretationCost: Long,\r\n    ): CompletionStage[SubmissionResult] =\r\n```",
        "createdAt" : "2020-06-29T07:39:16Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : null,
    "diffHunk" : "@@ -47,8 +47,13 @@ class KeyValueParticipantState(\n   override def submitTransaction(\n       submitterInfo: SubmitterInfo,\n       transactionMeta: TransactionMeta,\n-      transaction: SubmittedTransaction): CompletionStage[SubmissionResult] =\n-    writerAdapter.submitTransaction(submitterInfo, transactionMeta, transaction)\n+      transaction: SubmittedTransaction,\n+      estimatedInterpretationCost: Long): CompletionStage[SubmissionResult] ="
  },
  {
    "id" : "f57f4d15-d8ec-4b1f-9bef-4a5d7248058a",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "5f561997-d968-463c-abed-ff4e59f40c7a",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      estimatedInterpretationCost,\r\n    )\r\n```",
        "createdAt" : "2020-06-29T07:39:23Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : null,
    "diffHunk" : "@@ -47,8 +47,13 @@ class KeyValueParticipantState(\n   override def submitTransaction(\n       submitterInfo: SubmitterInfo,\n       transactionMeta: TransactionMeta,\n-      transaction: SubmittedTransaction): CompletionStage[SubmissionResult] =\n-    writerAdapter.submitTransaction(submitterInfo, transactionMeta, transaction)\n+      transaction: SubmittedTransaction,\n+      estimatedInterpretationCost: Long): CompletionStage[SubmissionResult] =\n+    writerAdapter.submitTransaction(\n+      submitterInfo,\n+      transactionMeta,\n+      transaction,\n+      estimatedInterpretationCost)"
  },
  {
    "id" : "17c4006f-603b-4d89-8768-8fa08d206f03",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "15741a78-e87f-46dc-96a5-b12f4e5a0239",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Perhaps pull this up into `HealthStatus` itself.\r\n\r\n```scala\r\nreader.checkHealth() + writer.checkHealth()\r\n```\r\n\r\nThen in `HealthStatus`:\r\n\r\n```scala\r\ndef +(other: HealthStatus): HealthStatus = (this, other) match {\r\n  case (Healthy, Healthy) => Healthy\r\n  case _ => Unhealthy\r\n}\r\n```\r\n\r\nNot sure about the use of the `+` operator but it feels kind of OK to me.",
        "createdAt" : "2019-12-23T09:12:01Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d070eecb-4ea3-4a41-b38e-841c398a944c",
        "parentId" : "15741a78-e87f-46dc-96a5-b12f4e5a0239",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Great idea! Moved the combination logic into `HealthStatus.and`.",
        "createdAt" : "2020-01-06T10:14:58Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import java.util.concurrent.CompletionStage\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.daml_lf_dev.DamlLf\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy, Unhealthy}\n+\n+class KeyValueParticipantState(reader: LedgerReader, writer: LedgerWriter)(\n+    implicit materializer: Materializer)\n+    extends ReadService\n+    with WriteService\n+    with AutoCloseable {\n+  private val readerAdaptor = new KeyValueParticipantStateReader(reader)\n+  private val writerAdaptor =\n+    new KeyValueParticipantStateWriter(writer)(materializer.executionContext)\n+\n+  override def getLedgerInitialConditions(): Source[LedgerInitialConditions, NotUsed] =\n+    readerAdaptor.getLedgerInitialConditions()\n+\n+  override def stateUpdates(beginAfter: Option[Offset]): Source[(Offset, Update), NotUsed] =\n+    readerAdaptor.stateUpdates(beginAfter)\n+\n+  override def submitTransaction(\n+      submitterInfo: SubmitterInfo,\n+      transactionMeta: TransactionMeta,\n+      transaction: SubmittedTransaction): CompletionStage[SubmissionResult] =\n+    writerAdaptor.submitTransaction(submitterInfo, transactionMeta, transaction)\n+\n+  override def submitConfiguration(\n+      maxRecordTime: Time.Timestamp,\n+      submissionId: SubmissionId,\n+      config: Configuration): CompletionStage[SubmissionResult] =\n+    writerAdaptor.submitConfiguration(maxRecordTime, submissionId, config)\n+\n+  override def uploadPackages(\n+      submissionId: SubmissionId,\n+      archives: List[DamlLf.Archive],\n+      sourceDescription: Option[String]): CompletionStage[SubmissionResult] =\n+    writerAdaptor.uploadPackages(submissionId, archives, sourceDescription)\n+\n+  override def allocateParty(\n+      hint: Option[Party],\n+      displayName: Option[String],\n+      submissionId: SubmissionId): CompletionStage[SubmissionResult] =\n+    writerAdaptor.allocateParty(hint, displayName, submissionId)\n+\n+  override def currentHealth(): HealthStatus =\n+    if (Seq(reader.checkHealth(), writer.checkHealth()).forall(_ == Healthy)) {\n+      Healthy\n+    } else {\n+      Unhealthy\n+    }"
  },
  {
    "id" : "7309e5e9-44b5-4fee-a328-6da2e09b0b50",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "861e74bf-28d6-4b5f-8364-d999ef0b52bb",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Maybe worth having a look if the work done by @SamirTalwar in #3871 can be ported here, replacing `AutoCloseable` with the safer `Resource`/`ResourceOwner` monadic construct.",
        "createdAt" : "2020-01-06T15:55:24Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7294ff8e-46ba-478c-8929-b59ca018a21f",
        "parentId" : "861e74bf-28d6-4b5f-8364-d999ef0b52bb",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Agreed regarding the need to have a consistent resource management approach across our code base. We may want to consider adopting one of the existing automatic resource management libraries such as https://github.com/tmoschou/arm4s",
        "createdAt" : "2020-01-06T17:16:11Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : 21,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import java.util.concurrent.CompletionStage\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.daml_lf_dev.DamlLf\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy, Unhealthy}\n+\n+class KeyValueParticipantState(reader: LedgerReader, writer: LedgerWriter)(\n+    implicit materializer: Materializer)\n+    extends ReadService\n+    with WriteService\n+    with AutoCloseable {"
  },
  {
    "id" : "684ee818-4718-4ccc-afbb-222abd877782",
    "prId" : 3923,
    "comments" : [
      {
        "id" : "789d0aec-689c-42e2-8540-63da97aac7e1",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor, but shouldn't these be named \"adapters\"?",
        "createdAt" : "2020-01-06T16:10:21Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7be832fb-7caf-49f0-86b3-c5fc91941b0a",
        "parentId" : "789d0aec-689c-42e2-8540-63da97aac7e1",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "You're right -- corrected.",
        "createdAt" : "2020-01-06T17:40:03Z",
        "updatedAt" : "2020-01-10T10:31:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c820159bc8cad55858939f177705f0a8bab0fd13",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.api\n+\n+import java.util.concurrent.CompletionStage\n+\n+import akka.NotUsed\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.Source\n+import com.daml.ledger.participant.state.v1._\n+import com.digitalasset.daml.lf.data.Time\n+import com.digitalasset.daml_lf_dev.DamlLf\n+import com.digitalasset.ledger.api.health.{HealthStatus, Healthy, Unhealthy}\n+\n+class KeyValueParticipantState(reader: LedgerReader, writer: LedgerWriter)(\n+    implicit materializer: Materializer)\n+    extends ReadService\n+    with WriteService\n+    with AutoCloseable {\n+  private val readerAdaptor = new KeyValueParticipantStateReader(reader)"
  }
]