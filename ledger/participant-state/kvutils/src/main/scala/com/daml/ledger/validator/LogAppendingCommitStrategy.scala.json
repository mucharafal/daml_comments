[
  {
    "id" : "7558a3ec-8679-4110-8a19-b9a4160bff48",
    "prId" : 7520,
    "comments" : [
      {
        "id" : "11daa6f1-6a93-4c2d-889c-cf295b26c596",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Wouldn't `Future.traverse` yield the same?",
        "createdAt" : "2020-09-30T10:04:30Z",
        "updatedAt" : "2020-09-30T10:04:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e043a8b0-9037-43a7-a1fb-811c1c0ea52e",
        "parentId" : "11daa6f1-6a93-4c2d-889c-cf295b26c596",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yes, sort of, in a dynamic language. `Future.sequence` (or `Future.traverse(…)(identity)`) would have the same behavior, but we'd have to pass in a `Seq[Future[A]]` in and get a `Future[Seq[A]]` out. Because these values have different types, we'd end up with `Future[Seq[Any]]` (or something equally unsafe, such as `Future[Seq[Any with Product with Serializable]]`.\r\n\r\nWe need something that works on tuples, not sequences.\r\n\r\nAs the comment says, Cats and Scalaz both support doing something like this, but I'm too much of an `implicit` newbie to figure out how. (I tried. It was ugly.)",
        "createdAt" : "2020-09-30T10:35:54Z",
        "updatedAt" : "2020-09-30T10:35:55Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2fc69e7-b763-4ea9-8f56-6879a602de86",
        "parentId" : "11daa6f1-6a93-4c2d-889c-cf295b26c596",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Makes sense -- thanks for the additional color on your design choice.",
        "createdAt" : "2020-09-30T10:39:03Z",
        "updatedAt" : "2020-09-30T10:39:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9bcfa0b5dff7d50532edc1db6ae29cef89340c99",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +37,41 @@        Future(Envelope.enclose(entry)),\n      )\n      (_, _, index) <- inParallel(\n        if (serializedKeyValuePairs.nonEmpty) {\n          ledgerStateOperations.writeState(serializedKeyValuePairs)"
  },
  {
    "id" : "7859371f-2761-4852-bc2a-8ce342a80004",
    "prId" : 7515,
    "comments" : [
      {
        "id" : "32c0bfb0-8ccd-4239-8045-14639cbc92d3",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "You might want to add a note to `CommitStrategy` that we expect deterministic write-sets from its implementations.",
        "createdAt" : "2020-09-29T15:10:19Z",
        "updatedAt" : "2020-09-29T15:10:19Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eb78c1f7-9987-47b5-b29c-dbe5b758ddbf",
        "parentId" : "32c0bfb0-8ccd-4239-8045-14639cbc92d3",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Half-cooked but maybe meaningful: how about considering (not for this PR) changing a raw write set type from `Seq[(Key, Value)]` to `SortedSet`?",
        "createdAt" : "2020-09-29T15:34:01Z",
        "updatedAt" : "2020-09-29T15:34:01Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8dd3122b-c5a7-42cb-9173-b2f81176eae7",
        "parentId" : "32c0bfb0-8ccd-4239-8045-14639cbc92d3",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Hmmm… it doesn't really need to be a `Set`. I'd be happy with a `SortedMap` but it's quite a change.",
        "createdAt" : "2020-09-29T19:14:55Z",
        "updatedAt" : "2020-09-29T19:14:55Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2a03714d44102a50f8583de03c250ad3d4108d69",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +18,22 @@import scala.concurrent.{ExecutionContext, Future}\n\nclass LogAppendingCommitStrategy[Index](\n    ledgerStateOperations: LedgerStateOperations[Index],\n    keySerializationStrategy: StateKeySerializationStrategy,"
  },
  {
    "id" : "3906d878-f42d-44ea-8d42-82595fdd84db",
    "prId" : 7515,
    "comments" : [
      {
        "id" : "81c1b4bb-3129-4719-8384-dd3142836feb",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please note that we'll be doing some CPU intensive operations outside of a `Future` here (i.e., compressing values).",
        "createdAt" : "2020-09-29T15:12:45Z",
        "updatedAt" : "2020-09-29T15:12:45Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9d1f96de-fc7d-45b4-8327-55547341c1dd",
        "parentId" : "81c1b4bb-3129-4719-8384-dd3142836feb",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "True; it should become `Future { ... }` rather than `Future.successful` as it was before though.",
        "createdAt" : "2020-09-29T15:35:42Z",
        "updatedAt" : "2020-09-29T15:36:40Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9966a827-8fff-428a-8b5a-26662cfcf883",
        "parentId" : "81c1b4bb-3129-4719-8384-dd3142836feb",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yeah, I agree that this is broken but I think it's out of scope. It was broken before.",
        "createdAt" : "2020-09-29T17:05:15Z",
        "updatedAt" : "2020-09-29T17:05:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2a03714d44102a50f8583de03c250ad3d4108d69",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +32,36 @@      exporterWriteSet: Option[SubmissionAggregator.WriteSetBuilder] = None,\n  ): Future[Index] = {\n    val serializedKeyValuePairs: SortedMap[Key, Value] =\n      outputState\n        .map {"
  }
]