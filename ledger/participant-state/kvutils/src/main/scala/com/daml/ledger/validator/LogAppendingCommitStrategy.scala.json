[
  {
    "id" : "c290e97f-06c5-469b-8ffd-115b0e674f15",
    "prId" : 7520,
    "comments" : [
      {
        "id" : "1bf641ff-dbe1-408a-b20f-ffa804c644d4",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Wouldn't `Future.traverse` yield the same?",
        "createdAt" : "2020-09-30T10:04:30Z",
        "updatedAt" : "2020-09-30T10:04:30Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c2a50907-8fca-48f7-8f1d-51e3bf86ae2e",
        "parentId" : "1bf641ff-dbe1-408a-b20f-ffa804c644d4",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yes, sort of, in a dynamic language. `Future.sequence` (or `Future.traverse(…)(identity)`) would have the same behavior, but we'd have to pass in a `Seq[Future[A]]` in and get a `Future[Seq[A]]` out. Because these values have different types, we'd end up with `Future[Seq[Any]]` (or something equally unsafe, such as `Future[Seq[Any with Product with Serializable]]`.\r\n\r\nWe need something that works on tuples, not sequences.\r\n\r\nAs the comment says, Cats and Scalaz both support doing something like this, but I'm too much of an `implicit` newbie to figure out how. (I tried. It was ugly.)",
        "createdAt" : "2020-09-30T10:35:54Z",
        "updatedAt" : "2020-09-30T10:35:55Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ea2c4035-0ae2-463a-b628-32e386478904",
        "parentId" : "1bf641ff-dbe1-408a-b20f-ffa804c644d4",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Makes sense -- thanks for the additional color on your design choice.",
        "createdAt" : "2020-09-30T10:39:03Z",
        "updatedAt" : "2020-09-30T10:39:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9bcfa0b5dff7d50532edc1db6ae29cef89340c99",
    "line" : 55,
    "diffHunk" : "@@ -9,48 +9,46 @@ import com.daml.ledger.participant.state.kvutils.DamlKvutils.{\n   DamlStateKey,\n   DamlStateValue\n }\n+import com.daml.ledger.participant.state.kvutils.Envelope\n import com.daml.ledger.participant.state.kvutils.export.SubmissionAggregator\n-import com.daml.ledger.participant.state.kvutils.{Envelope, `Bytes Ordering`}\n import com.daml.ledger.participant.state.v1.ParticipantId\n-import com.daml.ledger.validator.LedgerStateOperations.{Key, Value}\n \n-import scala.collection.{SortedMap, breakOut}\n import scala.concurrent.{ExecutionContext, Future}\n \n class LogAppendingCommitStrategy[Index](\n     ledgerStateOperations: LedgerStateOperations[Index],\n     keySerializationStrategy: StateKeySerializationStrategy,\n )(implicit executionContext: ExecutionContext)\n     extends CommitStrategy[Index] {\n+  private val stateSerializationStrategy = new StateSerializationStrategy(keySerializationStrategy)\n+\n   override def commit(\n       participantId: ParticipantId,\n       correlationId: String,\n       entryId: DamlLogEntryId,\n       entry: DamlLogEntry,\n       inputState: Map[DamlStateKey, Option[DamlStateValue]],\n       outputState: Map[DamlStateKey, DamlStateValue],\n-      exporterWriteSet: Option[SubmissionAggregator.WriteSetBuilder] = None,\n-  ): Future[Index] = {\n-    val serializedKeyValuePairs: SortedMap[Key, Value] =\n-      outputState\n-        .map {\n-          case (key, value) =>\n-            (keySerializationStrategy.serializeStateKey(key), Envelope.enclose(value))\n-        }(breakOut)\n-    exporterWriteSet.foreach {\n-      _ ++= serializedKeyValuePairs\n-    }\n+      writeSetBuilder: Option[SubmissionAggregator.WriteSetBuilder] = None,\n+  ): Future[Index] =\n     for {\n-      _ <- if (serializedKeyValuePairs.nonEmpty) {\n-        ledgerStateOperations.writeState(serializedKeyValuePairs)\n-      } else {\n-        Future.unit\n-      }\n-      envelopedLogEntry = Envelope.enclose(entry)\n-      _ = exporterWriteSet.foreach {\n-        _ += entryId.toByteString -> envelopedLogEntry\n-      }\n-      index <- ledgerStateOperations.appendToLog(entryId.toByteString, envelopedLogEntry)\n+      (serializedKeyValuePairs, envelopedLogEntry) <- inParallel(\n+        Future(stateSerializationStrategy.serializeState(outputState)),\n+        Future(Envelope.enclose(entry)),\n+      )\n+      (_, _, index) <- inParallel("
  },
  {
    "id" : "29572e0c-5d9c-43fd-a944-1d3fe483bd0c",
    "prId" : 7515,
    "comments" : [
      {
        "id" : "4eca8be7-04df-4e67-9882-cc35e92734e0",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "You might want to add a note to `CommitStrategy` that we expect deterministic write-sets from its implementations.",
        "createdAt" : "2020-09-29T15:10:19Z",
        "updatedAt" : "2020-09-29T15:10:19Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2b96fbd6-cce5-490e-a7c0-f1fc8e286b41",
        "parentId" : "4eca8be7-04df-4e67-9882-cc35e92734e0",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Half-cooked but maybe meaningful: how about considering (not for this PR) changing a raw write set type from `Seq[(Key, Value)]` to `SortedSet`?",
        "createdAt" : "2020-09-29T15:34:01Z",
        "updatedAt" : "2020-09-29T15:34:01Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "62ff0863-a1d5-4cd5-b5d4-a93f9f162d0c",
        "parentId" : "4eca8be7-04df-4e67-9882-cc35e92734e0",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Hmmm… it doesn't really need to be a `Set`. I'd be happy with a `SortedMap` but it's quite a change.",
        "createdAt" : "2020-09-29T19:14:55Z",
        "updatedAt" : "2020-09-29T19:14:55Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2a03714d44102a50f8583de03c250ad3d4108d69",
    "line" : 14,
    "diffHunk" : "@@ -9,11 +9,12 @@ import com.daml.ledger.participant.state.kvutils.DamlKvutils.{\n   DamlStateKey,\n   DamlStateValue\n }\n-import com.daml.ledger.participant.state.kvutils.Envelope\n import com.daml.ledger.participant.state.kvutils.export.SubmissionAggregator\n+import com.daml.ledger.participant.state.kvutils.{Envelope, `Bytes Ordering`}\n import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.ledger.validator.LedgerStateOperations.{Key, Value}\n \n-import scala.collection.breakOut\n+import scala.collection.{SortedMap, breakOut}\n import scala.concurrent.{ExecutionContext, Future}\n \n class LogAppendingCommitStrategy[Index]("
  },
  {
    "id" : "70156bda-929d-49bc-97f4-406e6120ebdb",
    "prId" : 7515,
    "comments" : [
      {
        "id" : "438e2a56-18b2-48ba-b12c-243651a43233",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please note that we'll be doing some CPU intensive operations outside of a `Future` here (i.e., compressing values).",
        "createdAt" : "2020-09-29T15:12:45Z",
        "updatedAt" : "2020-09-29T15:12:45Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d628bfbb-8e76-4e6f-b765-03cce48be7ff",
        "parentId" : "438e2a56-18b2-48ba-b12c-243651a43233",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "True; it should become `Future { ... }` rather than `Future.successful` as it was before though.",
        "createdAt" : "2020-09-29T15:35:42Z",
        "updatedAt" : "2020-09-29T15:36:40Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a700c4d-6001-4068-bc6c-25344cbd4065",
        "parentId" : "438e2a56-18b2-48ba-b12c-243651a43233",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yeah, I agree that this is broken but I think it's out of scope. It was broken before.",
        "createdAt" : "2020-09-29T17:05:15Z",
        "updatedAt" : "2020-09-29T17:05:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2a03714d44102a50f8583de03c250ad3d4108d69",
    "line" : 21,
    "diffHunk" : "@@ -29,28 +30,27 @@ class LogAppendingCommitStrategy[Index](\n       inputState: Map[DamlStateKey, Option[DamlStateValue]],\n       outputState: Map[DamlStateKey, DamlStateValue],\n       exporterWriteSet: Option[SubmissionAggregator.WriteSetBuilder] = None,\n-  ): Future[Index] =\n+  ): Future[Index] = {\n+    val serializedKeyValuePairs: SortedMap[Key, Value] ="
  },
  {
    "id" : "35173314-082c-4858-b3da-155ecb267aae",
    "prId" : 6418,
    "comments" : [
      {
        "id" : "984e0fa8-d5d8-437e-b8dc-2ca8054f0f67",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Why not just use `_ =` here and below?",
        "createdAt" : "2020-06-19T13:54:43Z",
        "updatedAt" : "2020-06-19T14:58:32Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f3467c55-9a3b-4336-bc56-e74b09d8a304",
        "parentId" : "984e0fa8-d5d8-437e-b8dc-2ca8054f0f67",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Changed accordingly.",
        "createdAt" : "2020-06-19T14:05:28Z",
        "updatedAt" : "2020-06-19T14:58:32Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "490d65c5a89e0cb3616ebb60abf97db64841a1c6",
    "line" : null,
    "diffHunk" : "@@ -32,15 +34,21 @@ class LogAppendingCommitStrategy[Index](\n         case (key, value) =>\n           (keySerializationStrategy.serializeStateKey(key), Envelope.enclose(value))\n       }(breakOut))\n+      _ <- Future.successful(\n+        ledgerDataExporter.addToWriteSet(correlationId, serializedKeyValuePairs))"
  },
  {
    "id" : "df655577-3245-4a8f-87e7-744b1ec5783c",
    "prId" : 6004,
    "comments" : [
      {
        "id" : "8fa72b50-226d-4fcc-bbba-093e45bad2e5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The future returned by `writeState` needs to be \"join\" or flatmapped with the future returned by `appendToLog`.",
        "createdAt" : "2020-05-19T09:38:11Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a23a202b-33dd-42c3-a24f-2d3345f4cc15",
        "parentId" : "8fa72b50-226d-4fcc-bbba-093e45bad2e5",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Yes, changed accordingly.",
        "createdAt" : "2020-05-19T13:10:31Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.validator\n+\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils.{\n+  DamlLogEntry,\n+  DamlLogEntryId,\n+  DamlStateKey,\n+  DamlStateValue\n+}\n+import com.daml.ledger.participant.state.kvutils.Envelope\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+\n+import scala.collection.breakOut\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+class LogAppendingCommitStrategy[Index](\n+    ledgerStateOperations: LedgerStateOperations[Index],\n+    keySerializationStrategy: StateKeySerializationStrategy)(\n+    implicit executionContext: ExecutionContext)\n+    extends CommitStrategy[Index] {\n+  override def commit(\n+      participantId: ParticipantId,\n+      correlationId: String,\n+      entryId: DamlLogEntryId,\n+      entry: DamlLogEntry,\n+      inputState: Map[DamlStateKey, Option[DamlStateValue]],\n+      outputState: Map[DamlStateKey, DamlStateValue]): Future[Index] = {\n+    ledgerStateOperations.writeState(outputState.map {\n+      case (key, value) =>\n+        (keySerializationStrategy.serializeStateKey(key), Envelope.enclose(value))\n+    }(breakOut))"
  }
]