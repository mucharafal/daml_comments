[
  {
    "id" : "6e4b702b-c5b9-4a52-9ec8-06cbb7e1cc41",
    "prId" : 7215,
    "comments" : [
      {
        "id" : "425fe441-8ff6-4898-a58e-d3314e3986b8",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "This is used by depending projects (in general, I'd prefer separate PRs for deletion/refactoring of public definitions not strictly connected to this PR's purpose).",
        "createdAt" : "2020-08-25T10:33:51Z",
        "updatedAt" : "2020-08-25T15:02:13Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "300014c8-b6ac-45ee-b3d1-e813f9b704af",
        "parentId" : "425fe441-8ff6-4898-a58e-d3314e3986b8",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Aha, sorry, I thought it was unused. I will revert it.",
        "createdAt" : "2020-08-25T11:15:53Z",
        "updatedAt" : "2020-08-25T15:02:13Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6b6bdf3a-75d1-4544-b9ae-10c4baa19455",
        "parentId" : "425fe441-8ff6-4898-a58e-d3314e3986b8",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Turns out it is unused. ðŸ™‚ \r\n\r\nBTW, I deleted it because the alternative was to push the `ledgerDataExporter` property into the parameters list, which seemed like an unnecessary change given that it's, well, not used anywhere.",
        "createdAt" : "2020-08-25T14:21:58Z",
        "updatedAt" : "2020-08-25T15:02:13Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0020dd8e089d897ae22c94ce2643c7d7f6073b04",
    "line" : 72,
    "diffHunk" : "@@ -69,48 +65,25 @@ object BatchedSubmissionValidatorFactory {\n       stateCache: Cache[DamlStateKey, DamlStateValue],\n       cacheUpdatePolicy: CacheUpdatePolicy,\n       keySerializationStrategy: StateKeySerializationStrategy = DefaultStateKeySerializationStrategy,\n-      ledgerDataExporter: LedgerDataExporter = LedgerDataExporter())(\n-      implicit executionContext: ExecutionContext)\n+  )(implicit executionContext: ExecutionContext)\n     : (DamlLedgerStateReader with QueryableReadSet, CommitStrategy[LogResult]) = {\n     val ledgerStateReader = new CachingDamlLedgerStateReader(\n       stateCache,\n       cacheUpdatePolicy.shouldCacheOnRead,\n       keySerializationStrategy,\n       DamlLedgerStateReader.from(\n         new LedgerStateReaderAdapter[LogResult](ledgerStateOperations),\n-        keySerializationStrategy)\n+        keySerializationStrategy,\n+      ),\n     )\n     val commitStrategy = new CachingCommitStrategy(\n       stateCache,\n       cacheUpdatePolicy.shouldCacheOnWrite,\n       new LogAppendingCommitStrategy[LogResult](\n         ledgerStateOperations,\n         keySerializationStrategy,\n-        ledgerDataExporter)\n+      )\n     )\n     (ledgerStateReader, commitStrategy)\n   }\n-\n-  case class CachingEnabledComponents[LogResult]("
  },
  {
    "id" : "e7eac922-8476-46ea-a5c1-8ab1f88cbf63",
    "prId" : 6004,
    "comments" : [
      {
        "id" : "312a9ebf-2583-4666-b943-ee496e9e5bfe",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "The criteria you're using to decide constructor VS factory VS apply is unclear to me, can you elaborate?",
        "createdAt" : "2020-05-22T16:09:59Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f750ae8f-cf76-4ef7-8a45-7559f9a4c6ea",
        "parentId" : "312a9ebf-2583-4666-b943-ee496e9e5bfe",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Prefer factory methods over `apply` in case multiple components need to be instantiated. Internal code (such as the above) uses constructors directly unless using `apply` has less maintenance.\r\nDo you have any specific suggestions in mind?",
        "createdAt" : "2020-05-25T10:49:39Z",
        "updatedAt" : "2020-05-25T16:06:53Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5039a2c00da681659f3cc8423f9ddfc9d993996",
    "line" : 52,
    "diffHunk" : "@@ -0,0 +1,85 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.validator.batch\n+\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils.{DamlStateKey, DamlStateValue}\n+import com.daml.ledger.validator.LedgerStateOperations.{Key, Value}\n+import com.daml.ledger.validator.{\n+  CachingCommitStrategy,\n+  CachingDamlLedgerStateReader,\n+  CommitStrategy,\n+  DamlLedgerStateReader,\n+  DefaultStateKeySerializationStrategy,\n+  LedgerStateOperations,\n+  LedgerStateReader,\n+  LogAppendingCommitStrategy,\n+  QueryableReadSet,\n+  StateKeySerializationStrategy\n+}\n+import com.daml.lf.engine.Engine\n+import com.daml.metrics.Metrics\n+import com.github.benmanes.caffeine.cache.Cache\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+object BatchedSubmissionValidatorFactory {\n+  class LedgerStateReaderAdapter[LogResult](delegate: LedgerStateOperations[LogResult])\n+      extends LedgerStateReader {\n+    override def read(keys: Seq[Key]): Future[Seq[Option[Value]]] = delegate.readState(keys)\n+  }\n+\n+  def readerAndCommitStrategyFrom[LogResult](\n+      ledgerStateOperations: LedgerStateOperations[LogResult],\n+      keySerializationStrategy: StateKeySerializationStrategy = DefaultStateKeySerializationStrategy)(\n+      implicit executionContext: ExecutionContext)\n+    : (DamlLedgerStateReader, CommitStrategy[LogResult]) = {\n+    val ledgerStateReader = DamlLedgerStateReader.from(\n+      new LedgerStateReaderAdapter[LogResult](ledgerStateOperations),\n+      keySerializationStrategy)\n+    val commitStrategy =\n+      new LogAppendingCommitStrategy[LogResult](ledgerStateOperations, keySerializationStrategy)\n+    (ledgerStateReader, commitStrategy)\n+  }\n+\n+  def cachingReaderAndCommitStrategyFrom[LogResult](\n+      ledgerStateOperations: LedgerStateOperations[LogResult],\n+      stateCache: Cache[DamlStateKey, DamlStateValue],\n+      keySerializationStrategy: StateKeySerializationStrategy = DefaultStateKeySerializationStrategy)(\n+      implicit executionContext: ExecutionContext)\n+    : (DamlLedgerStateReader with QueryableReadSet, CommitStrategy[LogResult]) = {\n+    val ledgerStateReader = new CachingDamlLedgerStateReader(\n+      stateCache,"
  }
]