[
  {
    "id" : "550ebce8-009c-4e7c-992f-178d0b59d4e0",
    "prId" : 2393,
    "comments" : [
      {
        "id" : "fa822646-bf4d-457a-96b3-1b63ddc08782",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Can we get comments on each of these building blocks? Right now only a handful are commented",
        "createdAt" : "2019-08-05T10:36:34Z",
        "updatedAt" : "2019-08-05T13:38:29Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9d33f528-5479-4f05-9378-bf9f87cc8eba",
        "parentId" : "fa822646-bf4d-457a-96b3-1b63ddc08782",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "done.",
        "createdAt" : "2019-08-05T13:38:51Z",
        "updatedAt" : "2019-08-05T13:38:51Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1510e7700c4deccf7c15bb64862ad7bde712f49f",
    "line" : 61,
    "diffHunk" : "@@ -0,0 +1,97 @@\n+package com.daml.ledger.participant.state.kvutils.committing\n+\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils.{\n+  DamlLogEntry,\n+  DamlStateKey,\n+  DamlStateValue\n+}\n+import com.daml.ledger.participant.state.kvutils.KeyValueCommitting.Err\n+\n+object Common {\n+  type DamlStateMap = Map[DamlStateKey, DamlStateValue]\n+\n+  /** A monadic computation that represents the process of committing which accumulates\n+    * ledger state and finishes with the final state and a log entry.\n+    * This is essentially State + Except.\n+    */\n+  final case class Commit[A](run: DamlStateMap => Either[CommitDone, (A, DamlStateMap)]) {\n+    def flatMap[A1 >: A](f: A => Commit[A1]): Commit[A1] =\n+      Commit { state =>\n+        run(state) match {\n+          case Left(done) => Left(done)\n+          case Right((x, state2)) =>\n+            f(x).run(state2)\n+        }\n+      }\n+  }\n+\n+  /** The terminal state for the commit computation. */\n+  final case class CommitDone(logEntry: DamlLogEntry, state: DamlStateMap)\n+\n+  object Commit {\n+\n+    /** Sequence commit actions which produces no intermediate values. */\n+    def sequence[A](act: Commit[Unit], acts: Commit[Unit]*): Commit[Unit] = {\n+      def go(\n+          state: DamlStateMap,\n+          act: Commit[Unit],\n+          rest: Seq[Commit[Unit]]\n+      ): Either[CommitDone, (Unit, DamlStateMap)] = {\n+        act.run(state) match {\n+          case Left(done) =>\n+            Left(done)\n+          case Right(((), state2)) =>\n+            rest match {\n+              case a +: as =>\n+                go(state2, a, as)\n+              case _ =>\n+                Right(() -> state2)\n+            }\n+        }\n+      }\n+      Commit { state0 =>\n+        go(state0, act, acts)\n+      }\n+    }\n+\n+    def run(act: Commit[Unit]): (DamlLogEntry, DamlStateMap) ="
  }
]