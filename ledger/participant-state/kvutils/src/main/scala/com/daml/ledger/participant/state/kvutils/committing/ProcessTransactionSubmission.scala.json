[
  {
    "id" : "1838cf34-74f2-4d8b-b041-9398dbea729d",
    "prId" : 5815,
    "comments" : [
      {
        "id" : "ce492625-3592-4497-b8a0-3fa7022e91c9",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Could we say that it is the party on behalf of which we are submitting is unknown?",
        "createdAt" : "2020-05-04T06:03:00Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "35e61c3b-b3e9-47c3-bbfc-763b14251d65",
        "parentId" : "ce492625-3592-4497-b8a0-3fa7022e91c9",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "Text changed to s\"Submitting party '${transactionEntry.submitter}' not known\" as advised below.",
        "createdAt" : "2020-05-04T09:25:00Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4f79124066af85f3ee832b964b57bafe3f460ad2",
    "line" : null,
    "diffHunk" : "@@ -158,7 +158,10 @@ private[kvutils] class ProcessTransactionSubmission(\n       case None =>\n         reject(\n           recordTime,\n-          buildRejectionLogEntry(transactionEntry, RejectionReason.PartyNotKnownOnLedger))\n+          buildRejectionLogEntry(\n+            transactionEntry,\n+            RejectionReason.PartyNotKnownOnLedger(\n+              s\"Party not known '${transactionEntry.submitter}'\")))"
  },
  {
    "id" : "7f8fde99-fd21-4e77-abe8-e70b72b6826d",
    "prId" : 5815,
    "comments" : [
      {
        "id" : "c302d897-b248-4f5b-bcee-f77b7258ac01",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "```suggestion\r\n          RejectionReason.Inconsistent(\"Causal monotonicity violated\")))\r\n```",
        "createdAt" : "2020-05-04T06:04:14Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "37354065-f739-4d73-b031-fe3a7104a24b",
        "parentId" : "c302d897-b248-4f5b-bcee-f77b7258ac01",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please apply this change as well for consistency.",
        "createdAt" : "2020-05-04T09:38:21Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4f79124066af85f3ee832b964b57bafe3f460ad2",
    "line" : null,
    "diffHunk" : "@@ -315,7 +318,11 @@ private[kvutils] class ProcessTransactionSubmission(\n     if (causalKeyMonotonicity)\n       pass\n     else\n-      reject(recordTime, buildRejectionLogEntry(transactionEntry, RejectionReason.Inconsistent))\n+      reject(\n+        recordTime,\n+        buildRejectionLogEntry(\n+          transactionEntry,\n+          RejectionReason.Inconsistent(\"Causal Monotonicity Violated\")))"
  },
  {
    "id" : "a6fc3a21-cb31-4775-b714-80543de390d8",
    "prId" : 5815,
    "comments" : [
      {
        "id" : "dc8fe559-3e6b-4e23-b3de-510ebf07fc4e",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "It would be lovely to know which party is unknown. It would help troubleshooting tremendously.",
        "createdAt" : "2020-05-04T06:05:14Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e24fd93a-e3a7-42fb-808a-9b1f3475f3a8",
        "parentId" : "dc8fe559-3e6b-4e23-b3de-510ebf07fc4e",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "Yes that would be nice.  The idea behind this change is that all ledger providers can provide better feedback.  In this case I'd rather leave it to the kvutils maintainers to decide the best message.",
        "createdAt" : "2020-05-04T09:21:28Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05bb1009-5197-448b-87b4-8cc830ba6daa",
        "parentId" : "dc8fe559-3e6b-4e23-b3de-510ebf07fc4e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I'm fine with that, we may want to address this in a separate PR.",
        "createdAt" : "2020-05-04T09:40:16Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4f79124066af85f3ee832b964b57bafe3f460ad2",
    "line" : 33,
    "diffHunk" : "@@ -341,7 +348,9 @@ private[kvutils] class ProcessTransactionSubmission(\n       else\n         reject(\n           recordTime,\n-          buildRejectionLogEntry(transactionEntry, RejectionReason.PartyNotKnownOnLedger)\n+          buildRejectionLogEntry(\n+            transactionEntry,\n+            RejectionReason.PartyNotKnownOnLedger(\"Not all parties known\"))"
  },
  {
    "id" : "5075d762-4f88-41c6-b3a2-df639b41fc81",
    "prId" : 5815,
    "comments" : [
      {
        "id" : "c51b1d80-2c0e-4935-98bc-fe82fbe073cf",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n              s\"Submitting party '${transactionEntry.submitter}' not known\")))\r\n```",
        "createdAt" : "2020-05-04T09:08:45Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "243c734a-f553-4f3d-ad10-67796e904cb3",
        "parentId" : "c51b1d80-2c0e-4935-98bc-fe82fbe073cf",
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-05-04T09:17:39Z",
        "updatedAt" : "2020-05-04T10:58:15Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4f79124066af85f3ee832b964b57bafe3f460ad2",
    "line" : null,
    "diffHunk" : "@@ -158,7 +158,10 @@ private[kvutils] class ProcessTransactionSubmission(\n       case None =>\n         reject(\n           recordTime,\n-          buildRejectionLogEntry(transactionEntry, RejectionReason.PartyNotKnownOnLedger))\n+          buildRejectionLogEntry(\n+            transactionEntry,\n+            RejectionReason.PartyNotKnownOnLedger(\n+              s\"Party not known '${transactionEntry.submitter}'\")))"
  },
  {
    "id" : "3eb3b5ac-d9c7-4959-9e1e-100f76a3b96b",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "e4deef37-545d-4775-a8f1-3d5eb2b5c960",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I don't think it helps if we keep history in the code as a comment. Please move this into the issue that will be associated to the merge of this change.",
        "createdAt" : "2020-04-20T08:36:58Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "465e947f-40b4-480e-b780-91b8f555b86c",
        "parentId" : "e4deef37-545d-4775-a8f1-3d5eb2b5c960",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in 14a595f.",
        "createdAt" : "2020-04-22T08:29:26Z",
        "updatedAt" : "2020-04-22T08:29:27Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : null,
    "diffHunk" : "@@ -426,11 +445,17 @@ private[kvutils] class ProcessTransactionSubmission(\n     val stateKey = contractIdToStateKey(coid)\n     for {\n       // Fetch the state of the contract so that activeness and visibility can be checked.\n-      contractState <- inputState.get(stateKey).flatMap(_.map(_.getContractState)).orElse {\n-        logger.warn(\n-          s\"Lookup contract failed, contractId=$coid correlationId=${transactionEntry.commandId}\")\n-        throw Err.MissingInputState(stateKey)\n-      }\n+      contractState <- inputState.get(stateKey).flatMap(_.map(_.getContractState))\n+      // PREVIOUSLY: we aborted the validation if the input state for the contract id wasn't loaded,"
  },
  {
    "id" : "644b209c-3ee4-422e-9005-83a3b0977d50",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "f1b2992c-6ad4-4c5c-94a1-2ebeba91679d",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Could you shortly elaborate (in the comment perhaps) on the causal monotonicity definition? I read \"all keys of contracts that are inputs of a transaction must NOT be active after the ledger effective time of that transaction\". Is that correct and why is that (e.g. I'm thinking of non-consuming)?",
        "createdAt" : "2020-04-20T12:24:09Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bb27a2ff-0463-430a-b521-a47ed65494f3",
        "parentId" : "f1b2992c-6ad4-4c5c-94a1-2ebeba91679d",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Also, I agree about correctness-first but I think it's also important to design with performance in mind. What's your take on that, i.e. how would you model the additional load required by the check and how did you plan for performance to be improved later (if at all needed / possible)?",
        "createdAt" : "2020-04-20T12:30:12Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "273b1716-9657-4574-95cb-b3e2032041d6",
        "parentId" : "f1b2992c-6ad4-4c5c-94a1-2ebeba91679d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The `active_at` field depicts the `ledger_effective_time` of the transaction that created the contract with that particular key. The causal monotonicity requirement defines that all contracts that are an input to a transaction must be active at a ledger effective time <= the ledger effective time as the transaction under validation.",
        "createdAt" : "2020-04-20T12:48:37Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b248e796-905e-41c2-9dd2-3c27f1cd7b8a",
        "parentId" : "f1b2992c-6ad4-4c5c-94a1-2ebeba91679d",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "> The `active_at` field depicts the `ledger_effective_time` of the transaction that created the contract with that particular key. The causal monotonicity requirement defines that all contracts that are an input to a transaction must be active at a ledger effective time <= the ledger effective time as the transaction under validation.\r\n\r\nOK, why not calling it `ledger_effective_time`?",
        "createdAt" : "2020-04-20T12:51:36Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7c0830a6-33fd-45f7-976a-6434d82640a3",
        "parentId" : "f1b2992c-6ad4-4c5c-94a1-2ebeba91679d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This is in line with https://github.com/digital-asset/daml/blob/8e94c7af251eee175363b8b7f45e481a0aca90f7/ledger/participant-state/kvutils/src/main/protobuf/daml_kvutils.proto#L388-L390",
        "createdAt" : "2020-04-20T13:49:09Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c531ce25-c755-41e3-a4a0-98b492093414",
        "parentId" : "f1b2992c-6ad4-4c5c-94a1-2ebeba91679d",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "For clarity I'd still note that it's the `ledger_effective_time` of the transaction that created the contract, at least in the comment of both protos (but agreed, maybe not in this PR).",
        "createdAt" : "2020-04-20T13:59:30Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d85e4872-8655-49c8-871a-bed12a44bca8",
        "parentId" : "f1b2992c-6ad4-4c5c-94a1-2ebeba91679d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I added comments to both fields in 14a595f.",
        "createdAt" : "2020-04-22T08:29:48Z",
        "updatedAt" : "2020-04-22T08:29:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : 87,
    "diffHunk" : "@@ -271,15 +271,29 @@ private[kvutils] class ProcessTransactionSubmission(\n         }\n         ._1\n \n-      r <- if (allUnique)\n+      _ <- if (allUnique)\n         pass\n       else\n         reject(\n           recordTime,\n           buildRejectionLogEntry(\n             transactionEntry,\n             RejectionReason.Disputed(\"DuplicateKey: Contract Key not unique\")))\n-    } yield r\n+\n+      // LookupByKey nodes themselves don't actually fetch the contract.\n+      // Therefore we need to do an additional check on all contract keys\n+      // that the referred contract satisfies the causal monotonicity invariant.\n+      causalKeyMonotonicity = startingKeys.forall { key =>\n+        val state = damlState(key)\n+        val keyActiveAt =\n+          Conversions.parseTimestamp(state.getContractKeyState.getActiveAt).toInstant\n+        !keyActiveAt.isAfter(transactionEntry.ledgerEffectiveTime.toInstant)\n+      }"
  },
  {
    "id" : "4371759d-0c56-4b70-93a4-1b2acd8d249d",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "af0e208d-c834-4f09-abb8-fd5ca2e5bdb5",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "To improve readability, can you move this into a helper function, please? This function is already too long.",
        "createdAt" : "2020-04-20T16:30:36Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "553d26c7-55f3-495a-a311-8d35f952721c",
        "parentId" : "af0e208d-c834-4f09-abb8-fd5ca2e5bdb5",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in 14a595f.",
        "createdAt" : "2020-04-22T08:29:13Z",
        "updatedAt" : "2020-04-22T08:29:13Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : null,
    "diffHunk" : "@@ -271,15 +271,29 @@ private[kvutils] class ProcessTransactionSubmission(\n         }\n         ._1\n \n-      r <- if (allUnique)\n+      _ <- if (allUnique)\n         pass\n       else\n         reject(\n           recordTime,\n           buildRejectionLogEntry(\n             transactionEntry,\n             RejectionReason.Disputed(\"DuplicateKey: Contract Key not unique\")))\n-    } yield r\n+\n+      // LookupByKey nodes themselves don't actually fetch the contract.\n+      // Therefore we need to do an additional check on all contract keys\n+      // that the referred contract satisfies the causal monotonicity invariant.\n+      causalKeyMonotonicity = startingKeys.forall { key =>"
  },
  {
    "id" : "ac6561c3-56a0-4285-9177-b740599b272b",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "08f07479-580a-4273-a75c-8a05c2d2b4f2",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "To improve readability, please move this into a helper function like `updateContractKeyWithContractKeyState(...)`.",
        "createdAt" : "2020-04-20T16:32:43Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6b48fe4a-c9f8-453f-a0f4-5844810e3492",
        "parentId" : "08f07479-580a-4273-a75c-8a05c2d2b4f2",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in 14a595f.",
        "createdAt" : "2020-04-22T08:29:03Z",
        "updatedAt" : "2020-04-22T08:29:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : null,
    "diffHunk" : "@@ -400,7 +414,12 @@ private[kvutils] class ProcessTransactionSubmission(\n           key ->\n             DamlStateValue.newBuilder\n               .setContractKeyState(\n-                DamlContractKeyState.newBuilder.setContractId(contractKeyState.fold(\"\")(_.coid))\n+                contractKeyState"
  },
  {
    "id" : "8e92b92d-4610-4bc8-94ed-fac144e16b26",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "217018cf-37e0-44f1-8788-5f927af997c8",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please move the explanation to above the `contractState` definition -- the `if` clause should be right after the variable definition (otherwise the connection is not immediately clear between the filter clause and what it filters).",
        "createdAt" : "2020-04-20T16:36:46Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c429d07d-40b9-41f5-8f28-256c4031f779",
        "parentId" : "217018cf-37e0-44f1-8788-5f927af997c8",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in 14a595f.",
        "createdAt" : "2020-04-22T08:28:58Z",
        "updatedAt" : "2020-04-22T08:28:59Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : 201,
    "diffHunk" : "@@ -426,11 +445,17 @@ private[kvutils] class ProcessTransactionSubmission(\n     val stateKey = contractIdToStateKey(coid)\n     for {\n       // Fetch the state of the contract so that activeness and visibility can be checked.\n-      contractState <- inputState.get(stateKey).flatMap(_.map(_.getContractState)).orElse {\n-        logger.warn(\n-          s\"Lookup contract failed, contractId=$coid correlationId=${transactionEntry.commandId}\")\n-        throw Err.MissingInputState(stateKey)\n-      }\n+      contractState <- inputState.get(stateKey).flatMap(_.map(_.getContractState))\n+      // PREVIOUSLY: we aborted the validation if the input state for the contract id wasn't loaded,\n+      // because it hinted at a missing input declaration. however, this only worked due to a bug\n+      // in lookupKey.\n+      //\n+      // NOW: There is the possibility that the reinterpretation of the transaction yields a different\n+      // result in a LookupByKey than the original transaction. This means that we might not have loaded\n+      // the contract state data for the contractId pointed to by that contractKey.\n+      // This is not a problem because after the transaction reinterpretation, we compare the original\n+      // transaction with the reintrepreted one, and the LookupByKey node will not match.\n+      // Additionally, all contract keys are checked to uphold causal monotonicity.\n       if contractIsActiveAndVisibleToSubmitter(transactionEntry, contractState)"
  },
  {
    "id" : "f1d93231-fbab-42b1-8867-e52e25d27525",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "08935c70-d492-4721-b639-b62850c35dff",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Can you remove this nested `.flatMap` logic, please? I.e., you could rewrite it with for comprehension for better readability.",
        "createdAt" : "2020-04-20T16:45:52Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b9dc4510-038c-4cf5-9c74-9febeb56b1bc",
        "parentId" : "08935c70-d492-4721-b639-b62850c35dff",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed in 14a595f.",
        "createdAt" : "2020-04-22T08:28:53Z",
        "updatedAt" : "2020-04-22T08:28:53Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : null,
    "diffHunk" : "@@ -486,14 +511,20 @@ private[kvutils] class ProcessTransactionSubmission(\n       .get(stateKey)\n       .flatMap {"
  },
  {
    "id" : "0983113f-d36c-46dd-836a-e596f0f5001c",
    "prId" : 5608,
    "comments" : [
      {
        "id" : "cf890c93-6e16-46e9-aee2-2975dd386bbd",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "The name of this function does not imply that we would be checking whether the contract is active or not, hence this explanation feels out of context. Is there a better place where this explanation could go?",
        "createdAt" : "2020-04-20T16:48:17Z",
        "updatedAt" : "2020-04-22T08:28:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "af107b3d-e98c-4cee-9e29-504cddf94344",
        "parentId" : "cf890c93-6e16-46e9-aee2-2975dd386bbd",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Unfortunately I don't have a better place. I think this is the best place for the time being.",
        "createdAt" : "2020-04-22T08:34:19Z",
        "updatedAt" : "2020-04-22T08:34:19Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36137ce4-c699-43fb-9f8f-0d23207e0679",
        "parentId" : "cf890c93-6e16-46e9-aee2-2975dd386bbd",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "OK",
        "createdAt" : "2020-04-23T07:29:51Z",
        "updatedAt" : "2020-04-23T07:29:51Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "14a595f3821f329c479056c81f9a9413d0109715",
    "line" : null,
    "diffHunk" : "@@ -486,14 +511,20 @@ private[kvutils] class ProcessTransactionSubmission(\n       .get(stateKey)\n       .flatMap {\n         _.flatMap { value =>\n-          for {\n-            contractId <- Some(value.getContractKeyState.getContractId)\n-              .filter(_.nonEmpty)\n-              .map(decodeContractId)\n-            contractStateKey = contractIdToStateKey(contractId)\n-            contractState <- inputState.get(contractStateKey).flatMap(_.map(_.getContractState))\n-            if contractIsActiveAndVisibleToSubmitter(transactionEntry, contractState)\n-          } yield contractId\n+          // we cannot check whether the contract is active or not, because we might not have loaded it earlier."
  },
  {
    "id" : "ea99f539-e477-42b5-9c65-17b6b626f3ac",
    "prId" : 5393,
    "comments" : [
      {
        "id" : "8760a7e4-d360-45a8-ad90-0246559653b4",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "use `pass`",
        "createdAt" : "2020-04-06T15:50:00Z",
        "updatedAt" : "2020-04-06T21:06:06Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f49d72d97c5936a50cb883659dd2caeda6205402",
    "line" : null,
    "diffHunk" : "@@ -103,15 +102,7 @@ private[kvutils] class ProcessTransactionSubmission(\n     get(dedupKey).flatMap { dedupEntry =>\n       val submissionTime = if (inStaticTimeMode) Instant.now() else recordTime.toInstant\n       if (dedupEntry.forall(isAfterDeduplicationTime(submissionTime, _))) {\n-        Commit.set(\n-          dedupKey ->\n-            DamlStateValue.newBuilder\n-              .setCommandDedup(\n-                DamlCommandDedupValue.newBuilder\n-                  .setRecordTime(buildTimestamp(recordTime))\n-                  .setDeduplicatedUntil(transactionEntry.submitterInfo.getDeduplicateUntil)\n-                  .build)\n-              .build)\n+        pure(())"
  },
  {
    "id" : "e5a0e261-420a-4593-8896-499d6fc9ce9a",
    "prId" : 5242,
    "comments" : [
      {
        "id" : "ad611a0b-dd32-489d-9738-53e7cb83c56a",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Yes, we must always use record time, local clock should not be trusted (within kvutils)) and this would be non-deterministic with distributed validators.",
        "createdAt" : "2020-03-27T11:22:58Z",
        "updatedAt" : "2020-04-02T17:56:41Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7c12d806-cee7-429f-b13c-568c182cf493",
        "parentId" : "ad611a0b-dd32-489d-9738-53e7cb83c56a",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thought so, thanks.",
        "createdAt" : "2020-03-27T12:03:35Z",
        "updatedAt" : "2020-04-02T17:56:41Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "64c508cfb374ce5826a0006b0a54b5ecfea275ab",
    "line" : null,
    "diffHunk" : "@@ -86,13 +88,20 @@ private[kvutils] class ProcessTransactionSubmission(\n   ): Commit[Unit] = {\n     val dedupKey = commandDedupKey(transactionEntry.submitterInfo)\n     get(dedupKey).flatMap { dedupEntry =>\n-      if (dedupEntry.isEmpty) {\n+      def isAfterDeduplicationTime(stateValue: DamlStateValue): Boolean = {\n+        lazy val cmdDedup = stateValue.getCommandDedup\n+        lazy val dedupTime = parseTimestamp(cmdDedup.getDeduplicationTime).toInstant\n+        !stateValue.hasCommandDedup || !cmdDedup.hasDeduplicationTime || dedupTime.isBefore(\n+          Instant.now()) // should this use record time instead?"
  },
  {
    "id" : "bfb1f969-dd3d-4b5f-bd7b-7e859089fe5f",
    "prId" : 5242,
    "comments" : [
      {
        "id" : "d136478d-19e9-4ffa-bf31-20bf69dd0394",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please move this function out of here to improve readability and make it testable.",
        "createdAt" : "2020-03-30T08:42:37Z",
        "updatedAt" : "2020-04-02T17:56:41Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dcb473fc-215c-4d8c-af03-fb37286a65f1",
        "parentId" : "d136478d-19e9-4ffa-bf31-20bf69dd0394",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed. See latest commit.",
        "createdAt" : "2020-04-02T17:50:53Z",
        "updatedAt" : "2020-04-02T17:56:41Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "64c508cfb374ce5826a0006b0a54b5ecfea275ab",
    "line" : null,
    "diffHunk" : "@@ -86,13 +86,20 @@ private[kvutils] class ProcessTransactionSubmission(\n   ): Commit[Unit] = {\n     val dedupKey = commandDedupKey(transactionEntry.submitterInfo)\n     get(dedupKey).flatMap { dedupEntry =>\n-      if (dedupEntry.isEmpty) {\n+      def isAfterDeduplicationTime(stateValue: DamlStateValue): Boolean = {"
  },
  {
    "id" : "1ff1dd1f-7477-4b6f-bfb7-92f5c6cdfa45",
    "prId" : 5242,
    "comments" : [
      {
        "id" : "48b3f775-1b9b-4127-84c4-bee81db2825d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Using `lazy val` obfuscates the fact that these values are optional. To make it easier to read, please break the if statement up, e.g.:\r\n```scala\r\n  if (stateValue.hasCommandDedup && cmdDedup.hasDeduplicatedUntil) {\r\n    val dedupTime = ...\r\n    dedupTime.isBefore(recordTime.toInstant)\r\n  } else {\r\n    false\r\n  }\r\n```",
        "createdAt" : "2020-03-30T08:45:12Z",
        "updatedAt" : "2020-04-02T17:56:41Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "467929ac-34f1-4455-9816-9ed08094af82",
        "parentId" : "48b3f775-1b9b-4127-84c4-bee81db2825d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Fixed. See latest commit.",
        "createdAt" : "2020-04-02T17:50:41Z",
        "updatedAt" : "2020-04-02T17:56:41Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "64c508cfb374ce5826a0006b0a54b5ecfea275ab",
    "line" : null,
    "diffHunk" : "@@ -86,13 +86,20 @@ private[kvutils] class ProcessTransactionSubmission(\n   ): Commit[Unit] = {\n     val dedupKey = commandDedupKey(transactionEntry.submitterInfo)\n     get(dedupKey).flatMap { dedupEntry =>\n-      if (dedupEntry.isEmpty) {\n+      def isAfterDeduplicationTime(stateValue: DamlStateValue): Boolean = {\n+        lazy val cmdDedup = stateValue.getCommandDedup"
  },
  {
    "id" : "95101bc2-e49b-46cd-a136-0d5c47a96c3b",
    "prId" : 5161,
    "comments" : [
      {
        "id" : "9c9e1f76-312e-4058-a4ce-43f4627906ca",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Good call, thanks.",
        "createdAt" : "2020-03-24T14:15:53Z",
        "updatedAt" : "2020-03-24T18:23:13Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dbe4529bcf0b7b72c7efb26360c5cc3c817ddf85",
    "line" : 14,
    "diffHunk" : "@@ -26,9 +25,10 @@ import org.slf4j.{Logger, LoggerFactory}\n \n import scala.collection.JavaConverters._\n \n-private[kvutils] case class ProcessTransactionSubmission("
  },
  {
    "id" : "d88051ec-02ec-4be7-a7fb-caefe7dd67a2",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "d5be0c52-d4bf-434d-87a4-734c60a9eab6",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "we can drop the `forceNoContractIds` as the GlobalKey constructor hashes it, which will throw if there's contract ids.",
        "createdAt" : "2020-02-27T13:48:42Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f93c47ea-5498-41c3-87f4-2ca473575c3a",
        "parentId" : "d5be0c52-d4bf-434d-87a4-734c60a9eab6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-02-27T18:34:27Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : 60,
    "diffHunk" : "@@ -175,25 +180,23 @@ private[kvutils] case class ProcessTransactionSubmission(\n     for {\n       damlState <- getDamlState\n       startingKeys = damlState.collect {\n-        case (k, v) if k.hasContractKey && v.getContractKeyState.hasContractId => k\n+        case (k, v) if k.hasContractKey && v.getContractKeyState.nonEmpty => k\n       }.toSet\n \n       allUnique = relTx\n         .fold((true, startingKeys)) {\n           case (\n               (allUnique, existingKeys),\n-              (_nodeId, exe: NodeExercises[_, _, VersionedValue[ContractId]]))\n+              (_nodeId, exe @ Node.NodeExercises(_, _, _, _, _, _, _, _, _, _, _, _, _, _)))\n               if exe.key.isDefined && exe.consuming =>\n             val stateKey = Conversions.globalKeyToStateKey(\n-              GlobalKey(exe.templateId, Conversions.forceNoContractIds(exe.key.get.key.value)))\n+              Node.GlobalKey(exe.templateId, Conversions.forceNoContractIds(exe.key.get.key.value)))"
  },
  {
    "id" : "f43e92ff-691a-4f73-82fe-c8d65818b089",
    "prId" : 3811,
    "comments" : [
      {
        "id" : "9a871890-efa4-4985-bfcc-3b1a72847997",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "To improve readability you might want to create a helper function for this:\r\n```scala\r\nimport com.daml.ledger.participant.state.kvutils.CorrelationIdHelper.fromTransactionEntry\r\n...\r\nlogger.trace(s\"Transaction accepted, correlationId=${fromTransactionEntry(txEntry)}\")\r\n...\r\n```",
        "createdAt" : "2019-12-11T10:09:26Z",
        "updatedAt" : "2019-12-11T10:10:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cdfe5c62-2621-4090-b1bc-43e064d7a14c",
        "parentId" : "9a871890-efa4-4985-bfcc-3b1a72847997",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I'd rather have a logger that implicitly inserts the correlationId's into the log messages so we cannot forget them.\r\nSince we have this requirement for all committers it might be worth making it part of that interface. We'll just need a way for the `Committer` to extract the correlationId (and other information that goes into every log message) from the actual implementation.\r\n\r\n@miklos-da since you'll likely look into porting ProcessTransactionSubmission to the new abstraction, could you rethink how we do logging in a clean way?",
        "createdAt" : "2019-12-11T10:23:38Z",
        "updatedAt" : "2019-12-11T10:23:45Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "472494fc-6ad5-4a6d-8023-b7be022c0d4f",
        "parentId" : "9a871890-efa4-4985-bfcc-3b1a72847997",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Agreed on transparently adding context information to logs -- will come up with a proposal.",
        "createdAt" : "2019-12-11T11:18:21Z",
        "updatedAt" : "2019-12-11T11:28:15Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "561993529dbc4e148f7a091eb4cfd2d40ef559d8",
    "line" : 30,
    "diffHunk" : "@@ -281,6 +274,8 @@ private[kvutils] case class ProcessTransactionSubmission(\n       }),\n       delay {\n         Metrics.accepts.inc()\n+        logger.trace(\n+          s\"Transaction accepted, correlationId=${txEntry.getSubmitterInfo.getCommandId}\")"
  }
]