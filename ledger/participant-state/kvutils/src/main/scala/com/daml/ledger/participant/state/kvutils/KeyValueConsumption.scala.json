[
  {
    "id" : "453eddd4-65a7-4a9b-90bd-65a13602eb32",
    "prId" : 6568,
    "comments" : [
      {
        "id" : "407cc70e-e992-47c7-b2a1-8c3bb9792e2a",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Up for discussion whether we want to override the record time in the log entry with the record time for the update. My preference would be to have the record time from the log entry take precedence over the record time for the update. This way, we could selectively set the record time to the pre-execution time in some rejection log entries. (It's not really feasible in Concord, but we could do this in DAML-on-SQL if we wanted to; not sure that it would buy us anything in the end.)",
        "createdAt" : "2020-07-02T07:26:12Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dff63d20-33ff-40f8-b19f-9db764781277",
        "parentId" : "407cc70e-e992-47c7-b2a1-8c3bb9792e2a",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "As discussed, changed it to always take the record time from the log entry whenever available.",
        "createdAt" : "2020-07-02T08:48:31Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e115010b9d46239fedf65c99bcc15a46b7e8acd4",
    "line" : 58,
    "diffHunk" : "@@ -173,11 +179,24 @@ object KeyValueConsumption {\n       case DamlLogEntry.PayloadCase.TRANSACTION_REJECTION_ENTRY =>\n         transactionRejectionEntryToUpdate(recordTime, entry.getTransactionRejectionEntry)\n \n+      case DamlLogEntry.PayloadCase.OUT_OF_TIME_BOUNDS_ENTRY =>\n+        outOfTimeBoundsEntryToUpdate(recordTime, entry.getOutOfTimeBoundsEntry).toList\n+\n       case DamlLogEntry.PayloadCase.PAYLOAD_NOT_SET =>\n         throw Err.InternalError(\"logEntryToUpdate: PAYLOAD_NOT_SET!\")\n     }\n   }\n \n+  private def resolveRecordTimeOrThrow(\n+      recordTimeForUpdate: Option[Timestamp],\n+      recordTimeFromLogEntry: Option[Timestamp]): Timestamp =\n+    (recordTimeForUpdate, recordTimeFromLogEntry) match {"
  },
  {
    "id" : "c1065c75-920f-40da-96ff-defe4895624a",
    "prId" : 6568,
    "comments" : [
      {
        "id" : "f8e7deea-e830-4e6e-b573-ab739b1a1ada",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "According to the Ledger Time model, `min_skew` and `max_skew` should be inclusive. So you'd want `<` here rather than `<=`.",
        "createdAt" : "2020-07-02T07:28:53Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "08d7f638-df63-47d1-8ee9-78aaac6907b0",
        "parentId" : "f8e7deea-e830-4e6e-b573-ab739b1a1ada",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Fixed.",
        "createdAt" : "2020-07-02T08:38:02Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e115010b9d46239fedf65c99bcc15a46b7e8acd4",
    "line" : null,
    "diffHunk" : "@@ -243,6 +262,86 @@ object KeyValueConsumption {\n     )\n   }\n \n+  private[kvutils] def outOfTimeBoundsEntryToUpdate(\n+      recordTime: Timestamp,\n+      outOfTimeBoundsEntry: DamlOutOfTimeBoundsEntry): Option[Update] = {\n+    val wrappedLogEntry = outOfTimeBoundsEntry.getEntry\n+    val duplicateUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasDuplicateUntil,\n+      outOfTimeBoundsEntry.getDuplicateUntil)\n+    val tooEarlyUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooEarlyUntil,\n+      outOfTimeBoundsEntry.getTooEarlyUntil)\n+    val tooLateFromMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooLateFrom,\n+      outOfTimeBoundsEntry.getTooLateFrom)\n+    val deduplicated = duplicateUntilMaybe.exists(recordTime <= _)\n+    val tooEarly = tooEarlyUntilMaybe.exists(recordTime <= _)"
  },
  {
    "id" : "731da27d-c254-45d6-a560-b8f39c5fad15",
    "prId" : 6568,
    "comments" : [
      {
        "id" : "cff3675c-d26f-48a4-84d4-9efb3811d41e",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Right. AFAIK the ledger API server will get confused when it receives different updates for the same command ID. This will likely change in the future, but for now this seems to be the right behaviour.",
        "createdAt" : "2020-07-02T07:32:08Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "996236a0-e7f6-488d-b2c6-b2c3c4345697",
        "parentId" : "cff3675c-d26f-48a4-84d4-9efb3811d41e",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "OK, thanks for the confirmation.",
        "createdAt" : "2020-07-02T08:42:55Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e115010b9d46239fedf65c99bcc15a46b7e8acd4",
    "line" : 99,
    "diffHunk" : "@@ -243,6 +262,86 @@ object KeyValueConsumption {\n     )\n   }\n \n+  private[kvutils] def outOfTimeBoundsEntryToUpdate(\n+      recordTime: Timestamp,\n+      outOfTimeBoundsEntry: DamlOutOfTimeBoundsEntry): Option[Update] = {\n+    val wrappedLogEntry = outOfTimeBoundsEntry.getEntry\n+    val duplicateUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasDuplicateUntil,\n+      outOfTimeBoundsEntry.getDuplicateUntil)\n+    val tooEarlyUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooEarlyUntil,\n+      outOfTimeBoundsEntry.getTooEarlyUntil)\n+    val tooLateFromMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooLateFrom,\n+      outOfTimeBoundsEntry.getTooLateFrom)\n+    val deduplicated = duplicateUntilMaybe.exists(recordTime <= _)\n+    val tooEarly = tooEarlyUntilMaybe.exists(recordTime <= _)\n+    val tooLate = tooLateFromMaybe.exists(recordTime > _)\n+    val invalidLedgerTime = tooEarly || tooLate\n+\n+    wrappedLogEntry.getPayloadCase match {\n+      case _ if deduplicated =>\n+        // We don't emit updates for deduplicated submissions.\n+        None"
  },
  {
    "id" : "ed2fc070-c2c9-407e-a625-bff1f4114b0e",
    "prId" : 6568,
    "comments" : [
      {
        "id" : "6f9d72b6-7856-4f90-aef8-ade7ee3b9d08",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "`invalidLedgerTime` is a bit too specific of a name, as ledger time is only defined for transaction submissions. Maybe rename this to `invalidRecordTime`?",
        "createdAt" : "2020-07-02T07:34:34Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a2911153-9dd1-4719-b813-e1a7f2ea2753",
        "parentId" : "6f9d72b6-7856-4f90-aef8-ade7ee3b9d08",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Renamed.",
        "createdAt" : "2020-07-02T08:38:13Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e115010b9d46239fedf65c99bcc15a46b7e8acd4",
    "line" : null,
    "diffHunk" : "@@ -243,6 +262,86 @@ object KeyValueConsumption {\n     )\n   }\n \n+  private[kvutils] def outOfTimeBoundsEntryToUpdate(\n+      recordTime: Timestamp,\n+      outOfTimeBoundsEntry: DamlOutOfTimeBoundsEntry): Option[Update] = {\n+    val wrappedLogEntry = outOfTimeBoundsEntry.getEntry\n+    val duplicateUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasDuplicateUntil,\n+      outOfTimeBoundsEntry.getDuplicateUntil)\n+    val tooEarlyUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooEarlyUntil,\n+      outOfTimeBoundsEntry.getTooEarlyUntil)\n+    val tooLateFromMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooLateFrom,\n+      outOfTimeBoundsEntry.getTooLateFrom)\n+    val deduplicated = duplicateUntilMaybe.exists(recordTime <= _)\n+    val tooEarly = tooEarlyUntilMaybe.exists(recordTime <= _)\n+    val tooLate = tooLateFromMaybe.exists(recordTime > _)\n+    val invalidLedgerTime = tooEarly || tooLate"
  },
  {
    "id" : "c538d1d0-67e5-45bc-9e49-a0fd12afc7b8",
    "prId" : 6568,
    "comments" : [
      {
        "id" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "I wonder whether we should log at INFO or DEBUG here that we've dropped the out-of-time-bounds rejection. I don't expect that this case should happen, so I suggest to at least record in the log that this has happened.",
        "createdAt" : "2020-07-02T07:37:13Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d2134fe9-6549-4688-bada-49a07606e807",
        "parentId" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Good point -- added at `INFO` level.",
        "createdAt" : "2020-07-02T08:41:51Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34627814-3e6e-42d4-983d-950600495ffc",
        "parentId" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Shouldn't we rather fail if we don't expect this case to be valid (i.e., seeing it would mean a bug)?",
        "createdAt" : "2020-07-02T10:11:20Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "84ad0750-2cc4-4b97-9b9c-e63391d4ea5c",
        "parentId" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "It'll have the same effect, i.e., the ledger API server won't stop and you'll have something in the log. However, explicitly logging something will probably yield easier to consume information than an exception caught somewhere.",
        "createdAt" : "2020-07-02T13:32:16Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1a5eda76-6f45-4ffb-9ce9-eaaf77beb02c",
        "parentId" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "I meant I'd rather crash if we see unexpected behavior, so that we can't possibly overlook it.",
        "createdAt" : "2020-07-02T13:47:00Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "94697daa-9893-4417-8638-a5969366b9e2",
        "parentId" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "In order to avoid overlooking such an issue you just need to set up the right monitoring. I.e., in my view the difference between 'crashing' and logging that we've dropped the out-of-time-bounds rejection is that in case of the previous the ledger API server will be restarted automagically whereas in the latter case it doesn't need to be restarted (you'll have the same information in the logs).",
        "createdAt" : "2020-07-02T16:23:17Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d5d47667-ae63-4317-87af-9fd45e50e49d",
        "parentId" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Yes, if we only catch a bug in production (or any stage with auto-restart) then we need the right monitoring to raise some big red flag, that's why I wonder if a crash (or an exception log) is more amenable to that than an `INFO` log. Maybe raising to `ERROR` at least?",
        "createdAt" : "2020-07-02T16:28:49Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d40b98c0-caa4-4ce7-89e1-936b634503f1",
        "parentId" : "1df471a6-3fd5-494c-8684-f5ffed4a6bc6",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Raised to `ERROR`.",
        "createdAt" : "2020-07-03T12:26:07Z",
        "updatedAt" : "2020-07-03T12:26:07Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e115010b9d46239fedf65c99bcc15a46b7e8acd4",
    "line" : 145,
    "diffHunk" : "@@ -243,6 +262,86 @@ object KeyValueConsumption {\n     )\n   }\n \n+  private[kvutils] def outOfTimeBoundsEntryToUpdate(\n+      recordTime: Timestamp,\n+      outOfTimeBoundsEntry: DamlOutOfTimeBoundsEntry): Option[Update] = {\n+    val wrappedLogEntry = outOfTimeBoundsEntry.getEntry\n+    val duplicateUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasDuplicateUntil,\n+      outOfTimeBoundsEntry.getDuplicateUntil)\n+    val tooEarlyUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooEarlyUntil,\n+      outOfTimeBoundsEntry.getTooEarlyUntil)\n+    val tooLateFromMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooLateFrom,\n+      outOfTimeBoundsEntry.getTooLateFrom)\n+    val deduplicated = duplicateUntilMaybe.exists(recordTime <= _)\n+    val tooEarly = tooEarlyUntilMaybe.exists(recordTime <= _)\n+    val tooLate = tooLateFromMaybe.exists(recordTime > _)\n+    val invalidLedgerTime = tooEarly || tooLate\n+\n+    wrappedLogEntry.getPayloadCase match {\n+      case _ if deduplicated =>\n+        // We don't emit updates for deduplicated submissions.\n+        None\n+\n+      case DamlLogEntry.PayloadCase.TRANSACTION_REJECTION_ENTRY if invalidLedgerTime =>\n+        val transactionRejectionEntry = wrappedLogEntry.getTransactionRejectionEntry\n+        val reason = (tooEarlyUntilMaybe, tooLateFromMaybe) match {\n+          case (Some(lowerBound), Some(upperBound)) =>\n+            s\"Record time $recordTime outside of range [$lowerBound, $upperBound]\"\n+          case _ =>\n+            \"Ledger time outside of valid range\"\n+        }\n+        val rejectionReason = RejectionReason.InvalidLedgerTime(reason)\n+        Some(\n+          Update.CommandRejected(\n+            recordTime = recordTime,\n+            submitterInfo = parseSubmitterInfo(transactionRejectionEntry.getSubmitterInfo),\n+            reason = rejectionReason\n+          )\n+        )\n+\n+      case DamlLogEntry.PayloadCase.CONFIGURATION_REJECTION_ENTRY if invalidLedgerTime =>\n+        val configurationRejectionEntry = wrappedLogEntry.getConfigurationRejectionEntry\n+        val reason = tooLateFromMaybe\n+          .map { maximumRecordTime =>\n+            s\"Configuration change timed out: $maximumRecordTime < $recordTime\"\n+          }\n+          .getOrElse(\"Configuration change timed out\")\n+        Some(\n+          Update.ConfigurationChangeRejected(\n+            recordTime,\n+            SubmissionId.assertFromString(configurationRejectionEntry.getSubmissionId),\n+            ParticipantId.assertFromString(configurationRejectionEntry.getParticipantId),\n+            Configuration.decode(configurationRejectionEntry.getConfiguration).right.get,\n+            reason\n+          )\n+        )\n+\n+      case DamlLogEntry.PayloadCase.TRANSACTION_REJECTION_ENTRY |\n+          DamlLogEntry.PayloadCase.PACKAGE_UPLOAD_REJECTION_ENTRY |\n+          DamlLogEntry.PayloadCase.CONFIGURATION_REJECTION_ENTRY |\n+          DamlLogEntry.PayloadCase.PARTY_ALLOCATION_REJECTION_ENTRY =>\n+        None"
  },
  {
    "id" : "3dbf7cc3-ab5c-485b-9f12-f0d11e5079f4",
    "prId" : 6568,
    "comments" : [
      {
        "id" : "24808bc4-71e4-47f4-8b69-233012735415",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "If the single-bound cases are valid ones (as it seems from the tests), I think we should produce better messages here; if not, this is a bug and the tests should be changed accordingly.",
        "createdAt" : "2020-07-02T10:05:06Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1109d9a8-9d79-4bb3-b643-e99924454a06",
        "parentId" : "24808bc4-71e4-47f4-8b69-233012735415",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Added specific reasons for single-bound cases.",
        "createdAt" : "2020-07-02T13:28:09Z",
        "updatedAt" : "2020-07-03T08:21:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e115010b9d46239fedf65c99bcc15a46b7e8acd4",
    "line" : null,
    "diffHunk" : "@@ -243,6 +265,88 @@ object KeyValueConsumption {\n     )\n   }\n \n+  private[kvutils] def outOfTimeBoundsEntryToUpdate(\n+      recordTime: Timestamp,\n+      outOfTimeBoundsEntry: DamlOutOfTimeBoundsEntry): Option[Update] = {\n+    val wrappedLogEntry = outOfTimeBoundsEntry.getEntry\n+    val duplicateUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasDuplicateUntil,\n+      outOfTimeBoundsEntry.getDuplicateUntil)\n+    val tooEarlyUntilMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooEarlyUntil,\n+      outOfTimeBoundsEntry.getTooEarlyUntil)\n+    val tooLateFromMaybe = parseOptionalTimestamp(\n+      outOfTimeBoundsEntry.hasTooLateFrom,\n+      outOfTimeBoundsEntry.getTooLateFrom)\n+    val deduplicated = duplicateUntilMaybe.exists(recordTime <= _)\n+    val tooEarly = tooEarlyUntilMaybe.exists(recordTime < _)\n+    val tooLate = tooLateFromMaybe.exists(recordTime > _)\n+    val invalidRecordTime = tooEarly || tooLate\n+\n+    wrappedLogEntry.getPayloadCase match {\n+      case _ if deduplicated =>\n+        // We don't emit updates for deduplicated submissions.\n+        None\n+\n+      case DamlLogEntry.PayloadCase.TRANSACTION_REJECTION_ENTRY if invalidRecordTime =>\n+        val transactionRejectionEntry = wrappedLogEntry.getTransactionRejectionEntry\n+        val reason = (tooEarlyUntilMaybe, tooLateFromMaybe) match {\n+          case (Some(lowerBound), Some(upperBound)) =>\n+            s\"Record time $recordTime outside of range [$lowerBound, $upperBound]\"\n+          case _ =>\n+            \"Ledger time outside of valid range\""
  },
  {
    "id" : "cc1346df-07e3-4496-8066-4c70eb900441",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "c58df2fc-34b0-445f-b96a-66a46edac73b",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "rename `relTx`.",
        "createdAt" : "2020-02-27T13:45:26Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5039f61-4072-46b7-a56b-1f80b4031d17",
        "parentId" : "c58df2fc-34b0-445f-b96a-66a46edac73b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "renamed",
        "createdAt" : "2020-02-27T18:18:34Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -229,20 +229,15 @@ object KeyValueConsumption {\n         workflowId = Some(txEntry.getWorkflowId)\n           .filter(_.nonEmpty)\n           .map(parseLedgerString(\"WorkflowId\")),\n+        submissionSeed = parseOptHash(txEntry.getSubmissionSeed)\n       ),\n-      transaction = makeCommittedTransaction(entryId, relTx),\n+      transaction = relTx,"
  },
  {
    "id" : "d528314a-c852-49fa-b592-151ba10171f3",
    "prId" : 4533,
    "comments" : [
      {
        "id" : "5a08ad85-99cc-410a-9802-2281dc008ec1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This isn't used anywhere, right?",
        "createdAt" : "2020-02-17T09:27:06Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e8956b2c-5080-45e2-acdc-3d8f4ea375f0",
        "parentId" : "5a08ad85-99cc-410a-9802-2281dc008ec1",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Indeed. It is now gone.",
        "createdAt" : "2020-02-17T09:47:47Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69e42150daf521f93631ef81bea5b8b2314d7beb",
    "line" : null,
    "diffHunk" : "@@ -254,6 +256,12 @@ object KeyValueConsumption {\n       .fromString(s)\n       .fold(err => throw Err.DecodeError(what, s\"Cannot parse '$s': $err\"), identity)\n \n+  @throws(classOf[Err])\n+  private def parseHash(what: String)(s: ByteString): crypto.Hash ="
  },
  {
    "id" : "839058e7-820b-42f7-bbc9-1e29774e78ce",
    "prId" : 4533,
    "comments" : [
      {
        "id" : "e859a60a-0e2a-4eee-ac38-9bee53a28cb4",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Duplicate comment line.",
        "createdAt" : "2020-02-17T12:09:13Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fb42b9fb-65f2-44fb-91ab-4fb33ffbd845",
        "parentId" : "e859a60a-0e2a-4eee-ac38-9bee53a28cb4",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right it is not store in the transaction. :-S \r\n\r\nThis is work in progress and this seed should be store somewhere by the ledger implementation. ",
        "createdAt" : "2020-02-17T12:33:12Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69e42150daf521f93631ef81bea5b8b2314d7beb",
    "line" : null,
    "diffHunk" : "@@ -242,6 +241,7 @@ object KeyValueConsumption {\n       txId: DamlLogEntryId,\n       tx: SubmittedTransaction): CommittedTransaction =\n     /* Assign absolute contract ids */\n+    /* Assign absolute contract ids */"
  },
  {
    "id" : "0c5bacaa-e64b-4b56-968d-b2d7ea28a9ee",
    "prId" : 3966,
    "comments" : [
      {
        "id" : "de8686d3-245b-475d-aa8e-7bf78aab56ef",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Can you add a unit test case for this, please?",
        "createdAt" : "2020-01-07T17:10:17Z",
        "updatedAt" : "2020-01-08T13:43:42Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e31b0512-a9fd-4f4a-a408-2ae52839acd4",
        "parentId" : "de8686d3-245b-475d-aa8e-7bf78aab56ef",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Added.",
        "createdAt" : "2020-01-08T09:57:16Z",
        "updatedAt" : "2020-01-08T13:43:42Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9df0c47c64a4fc5c7b0d6d4122fd6aaafaee5498",
    "line" : 5,
    "diffHunk" : "@@ -221,7 +221,8 @@ object KeyValueConsumption {\n       BaseEncoding.base16.encode(entryId.toByteArray)\n     )\n     Update.TransactionAccepted(\n-      optSubmitterInfo = Some(parseSubmitterInfo(txEntry.getSubmitterInfo)),\n+      optSubmitterInfo ="
  },
  {
    "id" : "6158c5e1-ab08-405b-9844-f0a5dc5706ec",
    "prId" : 3847,
    "comments" : [
      {
        "id" : "46ec97ec-6201-42da-aea3-7b01f0470c20",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`def wrap(reason: String) = ...` is a bit cleaner :)",
        "createdAt" : "2019-12-13T16:21:50Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c9a07f89574f1c170c540c240010fa88a826ce2f",
    "line" : null,
    "diffHunk" : "@@ -53,20 +52,24 @@ object KeyValueConsumption {\n \n       case DamlLogEntry.PayloadCase.PACKAGE_UPLOAD_REJECTION_ENTRY =>\n         val pur = entry.getPackageUploadRejectionEntry\n-        List(\n-          Update.PublicPackageUploadRejected(\n-            parseLedgerString(\"SubmissionId\")(pur.getSubmissionId),\n-            recordTime,\n-            pur.getReasonCase match {\n-              case DamlPackageUploadRejectionEntry.ReasonCase.INVALID_PACKAGE =>\n-                s\"Invalid package, details=${pur.getInvalidPackage.getDetails}\"\n-              case DamlPackageUploadRejectionEntry.ReasonCase.PARTICIPANT_NOT_AUTHORIZED =>\n-                s\"Participant is not authorized to upload packages\"\n-              case DamlPackageUploadRejectionEntry.ReasonCase.REASON_NOT_SET =>\n-                sys.error(\"logEntryToUpdate: DamlPackageUploadRejectionEntry.REASON_NOT_SET!\")\n-            }\n-          )\n-        )\n+        def wrap = { reason: String =>"
  },
  {
    "id" : "ad056ff0-fcec-45fa-8e2b-4191eb61399b",
    "prId" : 3847,
    "comments" : [
      {
        "id" : "b7c9c80b-13cf-4495-806e-0af357a847ba",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`def wrap(reason: String) = ...`",
        "createdAt" : "2019-12-13T16:22:46Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c9a07f89574f1c170c540c240010fa88a826ce2f",
    "line" : null,
    "diffHunk" : "@@ -88,26 +91,25 @@ object KeyValueConsumption {\n         val rejection = entry.getPartyAllocationRejectionEntry\n         val participantId = parseLedgerString(\"ParticipantId\")(rejection.getParticipantId)\n         val submissionId = parseLedgerString(\"SubmissionId\")(rejection.getSubmissionId)\n+        def wrap = { reason: String =>"
  },
  {
    "id" : "6142a93b-5e58-407b-a7b2-73e2367495b2",
    "prId" : 3847,
    "comments" : [
      {
        "id" : "75b2cb22-d831-4de6-9a00-aed875a20998",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`def wrap(reason: String) = ...`",
        "createdAt" : "2019-12-13T16:23:06Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c9a07f89574f1c170c540c240010fa88a826ce2f",
    "line" : null,
    "diffHunk" : "@@ -139,33 +141,38 @@ object KeyValueConsumption {\n           parseLedgerString(\"ParticipantId\")(rejection.getParticipantId)\n         val submissionId =\n           parseLedgerString(\"SubmissionId\")(rejection.getSubmissionId)\n-        List(\n-          Update.ConfigurationChangeRejected(\n-            recordTime = recordTime,\n-            submissionId = submissionId,\n-            participantId = participantId,\n-            proposedConfiguration = proposedConfig,\n-            rejectionReason = rejection.getReasonCase match {\n-              case DamlConfigurationRejectionEntry.ReasonCase.GENERATION_MISMATCH =>\n-                s\"Generation mismatch: ${proposedConfig.generation} != ${rejection.getGenerationMismatch.getExpectedGeneration}\"\n-              case DamlConfigurationRejectionEntry.ReasonCase.INVALID_CONFIGURATION =>\n-                s\"Invalid configuration: ${rejection.getInvalidConfiguration.getError}\"\n-              case DamlConfigurationRejectionEntry.ReasonCase.PARTICIPANT_NOT_AUTHORIZED =>\n-                s\"Participant not authorized to modify configuration\"\n-              case DamlConfigurationRejectionEntry.ReasonCase.TIMED_OUT =>\n-                val timedOut = rejection.getTimedOut\n-                val mrt = Conversions.parseTimestamp(timedOut.getMaximumRecordTime)\n-                val rt = Conversions.parseTimestamp(timedOut.getRecordTime)\n-                s\"Configuration change request timed out: $mrt > $rt\"\n-              case DamlConfigurationRejectionEntry.ReasonCase.REASON_NOT_SET =>\n-                \"Unknown reason\"\n-            }\n-          ))\n+        def wrap = { reason: String =>"
  },
  {
    "id" : "993d5463-880d-4d6b-a6c9-99216fa0e650",
    "prId" : 3847,
    "comments" : [
      {
        "id" : "798c1a60-a1d1-4a0f-970e-f1d34f452aba",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`def wrap(reason: RejectionReason) = ...`",
        "createdAt" : "2019-12-13T16:23:42Z",
        "updatedAt" : "2019-12-17T18:52:24Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c9a07f89574f1c170c540c240010fa88a826ce2f",
    "line" : null,
    "diffHunk" : "@@ -174,32 +181,38 @@ object KeyValueConsumption {\n \n   private def transactionRejectionEntryToUpdate(\n       recordTime: Timestamp,\n-      rejEntry: DamlTransactionRejectionEntry): Update.CommandRejected =\n-    Update.CommandRejected(\n-      recordTime = recordTime,\n-      submitterInfo = parseSubmitterInfo(rejEntry.getSubmitterInfo),\n-      reason = rejEntry.getReasonCase match {\n-        case DamlTransactionRejectionEntry.ReasonCase.DISPUTED =>\n-          RejectionReason.Disputed(rejEntry.getDisputed.getDetails)\n-        case DamlTransactionRejectionEntry.ReasonCase.INCONSISTENT =>\n-          RejectionReason.Inconsistent\n-        case DamlTransactionRejectionEntry.ReasonCase.RESOURCES_EXHAUSTED =>\n-          RejectionReason.ResourcesExhausted\n-        case DamlTransactionRejectionEntry.ReasonCase.MAXIMUM_RECORD_TIME_EXCEEDED =>\n-          RejectionReason.MaximumRecordTimeExceeded\n-        case DamlTransactionRejectionEntry.ReasonCase.DUPLICATE_COMMAND =>\n-          RejectionReason.DuplicateCommand\n-        case DamlTransactionRejectionEntry.ReasonCase.PARTY_NOT_KNOWN_ON_LEDGER =>\n-          RejectionReason.PartyNotKnownOnLedger\n-        case DamlTransactionRejectionEntry.ReasonCase.SUBMITTER_CANNOT_ACT_VIA_PARTICIPANT =>\n+      rejEntry: DamlTransactionRejectionEntry): List[Update] = {\n+    def wrap = { reason: RejectionReason =>"
  },
  {
    "id" : "e5c42921-8fec-4226-b72e-538e5b2ba839",
    "prId" : 3811,
    "comments" : [
      {
        "id" : "fef0ae2e-9827-4938-aac9-be2e5de3cde0",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "You mean returning a `RejectionReason` and not bailing out with an exception?",
        "createdAt" : "2019-12-11T09:59:44Z",
        "updatedAt" : "2019-12-11T10:10:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9b7cf254-6a9d-4918-bf98-05462a50438b",
        "parentId" : "fef0ae2e-9827-4938-aac9-be2e5de3cde0",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Yes, I find a crash a tall price to pay for missing error reason",
        "createdAt" : "2019-12-11T10:56:13Z",
        "updatedAt" : "2019-12-11T10:56:13Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b2c249ad-b9d4-47bf-8cd4-80773e5bc23c",
        "parentId" : "fef0ae2e-9827-4938-aac9-be2e5de3cde0",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Makes sense. Do you want to add that new enum value to `RejectionReason` then?",
        "createdAt" : "2019-12-11T11:15:59Z",
        "updatedAt" : "2019-12-11T11:28:15Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "561993529dbc4e148f7a091eb4cfd2d40ef559d8",
    "line" : 13,
    "diffHunk" : "@@ -240,6 +240,7 @@ object KeyValueConsumption {\n             rejEntry.getSubmitterCannotActViaParticipant.getDetails\n           )\n         case DamlTransactionRejectionEntry.ReasonCase.REASON_NOT_SET =>\n+          //TODO: Replace with \"Unknown reason\" error code or something similar"
  },
  {
    "id" : "ca77d0f7-fd81-4f49-a6b2-d976f08647ce",
    "prId" : 3756,
    "comments" : [
      {
        "id" : "86661b8e-6324-4061-8b43-1454ed82e107",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "It's nice, that you have managed to invert the ledger-api-domain <- participant-state dependency! I didn't realize it all hinged on that single PartyDetails class",
        "createdAt" : "2019-12-06T08:50:15Z",
        "updatedAt" : "2019-12-13T17:13:57Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e6e626a81c096637c202b8d3ca5d09dfa4e41393",
    "line" : null,
    "diffHunk" : "@@ -165,14 +164,12 @@ object KeyValueConsumption {\n             PartyAllocationResponse(\n               entry.getPartyAllocationEntry.getSubmissionId,\n               PartyAllocationResult.Ok(\n-                PartyDetails(\n-                  parseParty(entry.getPartyAllocationEntry.getParty),\n-                  if (entry.getPartyAllocationEntry.getDisplayName.isEmpty)\n-                    None\n-                  else\n-                    Some(entry.getPartyAllocationEntry.getDisplayName),\n-                  entry.getPartyAllocationEntry.getParticipantId == participantId\n-                )\n+                parseParty(entry.getPartyAllocationEntry.getParty),"
  },
  {
    "id" : "4b75aafd-5af8-41e0-8988-ddafff8253c7",
    "prId" : 3744,
    "comments" : [
      {
        "id" : "4f90312c-f6ee-46cf-b2c7-efcca7af1494",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Probably an artifact of spinning off another branch, but asking just to make sure: why are the Brian's initials here?",
        "createdAt" : "2019-12-05T10:44:20Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2771abad-b5d4-44fe-bb1b-4a6cc685e166",
        "parentId" : "4f90312c-f6ee-46cf-b2c7-efcca7af1494",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Because the change is taken from Brian's original PR.",
        "createdAt" : "2019-12-05T12:02:52Z",
        "updatedAt" : "2019-12-05T15:56:33Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d8204b7c377ce994002fb11ce1227c245747b3d0",
    "line" : 32,
    "diffHunk" : "@@ -38,6 +37,7 @@ object KeyValueConsumption {\n     * @param entry: The log entry.\n     * @return [[Update]]s constructed from log entry.\n     */\n+  // TODO(BH): add participantId to ensure participant id matches in DamlLogEntry"
  },
  {
    "id" : "2b60f561-5a8e-4470-9e51-79626c7731c6",
    "prId" : 3553,
    "comments" : [
      {
        "id" : "737ea5e6-c4af-410d-a207-2152e9a52366",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "hashtag yolo",
        "createdAt" : "2019-11-25T08:24:00Z",
        "updatedAt" : "2019-11-27T14:09:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2badf359-3a9d-41d5-8109-c988793711fd",
        "parentId" : "737ea5e6-c4af-410d-a207-2152e9a52366",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "thanks, will address my FIXME and make the function fail properly. Do you think `Try[List[Update]]` is a reasonable API for this?",
        "createdAt" : "2019-11-25T09:49:38Z",
        "updatedAt" : "2019-11-27T14:09:02Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a4d26dc8-2d12-47a8-833a-01bf9a0af079",
        "parentId" : "737ea5e6-c4af-410d-a207-2152e9a52366",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "hm, `Either[String, List[Update]]` seems to fit it better.",
        "createdAt" : "2019-11-25T10:10:11Z",
        "updatedAt" : "2019-11-27T14:09:02Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04d3118b43225ee033b4c9bba93102cdc650df6a",
    "line" : null,
    "diffHunk" : "@@ -76,18 +77,28 @@ object KeyValueConsumption {\n \n       case DamlLogEntry.PayloadCase.CONFIGURATION_ENTRY =>\n         val configEntry = entry.getConfigurationEntry\n-        val newConfig = parseDamlConfiguration(configEntry.getConfiguration).get\n-        List(Update.ConfigurationChanged(configEntry.getSubmissionId, newConfig))\n+        val newConfig = Configuration.decode(configEntry.getConfiguration).right.get"
  },
  {
    "id" : "1222e04c-a26f-422b-a894-4142f8c24862",
    "prId" : 3553,
    "comments" : [
      {
        "id" : "fe65c854-1741-4faf-ba5d-255111e83732",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  /** Construct participant-state [[Update]]s from a [[DamlLogEntry]].\r\n```",
        "createdAt" : "2019-11-26T20:24:09Z",
        "updatedAt" : "2019-11-27T14:09:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04d3118b43225ee033b4c9bba93102cdc650df6a",
    "line" : null,
    "diffHunk" : "@@ -30,16 +29,17 @@ object KeyValueConsumption {\n   def packDamlLogEntry(entry: DamlStateKey): ByteString = entry.toByteString\n   def unpackDamlLogEntry(bytes: ByteString): DamlLogEntry = DamlLogEntry.parseFrom(bytes)\n \n-  /** Construct a participant-state [[Update]] from a [[DamlLogEntry]].\n+  /** Construct a participant-state [[Update]]s from a [[DamlLogEntry]]."
  },
  {
    "id" : "ccf797b7-7ea0-450f-bb25-1e523083ae7e",
    "prId" : 2031,
    "comments" : [
      {
        "id" : "c375d233-d0ec-4a0c-a0d7-e6c296b0cb68",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: instead of doing `toList` and then `map` you can do both things at once by passing `scala.collection.breakOut` as the implicit parameter. More info [here](https://docs.scala-lang.org/tutorials/FAQ/breakout.html).",
        "createdAt" : "2019-07-08T08:33:34Z",
        "updatedAt" : "2019-07-08T09:59:14Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3e5e769a-6970-4110-b121-9c8c4629a77f",
        "parentId" : "c375d233-d0ec-4a0c-a0d7-e6c296b0cb68",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-08T10:00:28Z",
        "updatedAt" : "2019-07-08T10:00:28Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "907e868fd50d46831470c159b0eda4e8e24c2377",
    "line" : null,
    "diffHunk" : "@@ -37,28 +37,28 @@ object KeyValueConsumption {\n     * @param entry: The log entry.\n     * @return [[Update]] constructed from log entry.\n     */\n-  def logEntryToUpdate(entryId: DamlLogEntryId, entry: DamlLogEntry): Option[Update] = {\n+  def logEntryToUpdate(entryId: DamlLogEntryId, entry: DamlLogEntry): List[Update] = {\n \n     val recordTime = parseTimestamp(entry.getRecordTime)\n \n     entry.getPayloadCase match {\n       case DamlLogEntry.PayloadCase.PACKAGE_UPLOAD_ENTRY =>\n-        Some(\n-          Update.PublicPackagesUploaded(\n-            entry.getPackageUploadEntry.getArchivesList.asScala.toList,\n+        entry.getPackageUploadEntry.getArchivesList.asScala.toList.map { archive =>"
  },
  {
    "id" : "0483d40c-7bc7-4bef-bf13-ed8612dc9c97",
    "prId" : 637,
    "comments" : [
      {
        "id" : "1e92d2a9-1b25-4715-910c-b60e2b638ece",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "s/rej/rejection",
        "createdAt" : "2019-04-26T13:38:03Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,114 @@\n+package com.daml.ledger.participant.state.kvutils\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.v1.{\n+  CommittedTransaction,\n+  RejectionReason,\n+  SubmittedTransaction,\n+  TransactionMeta,\n+  Update\n+}\n+import com.digitalasset.daml.lf.data.Time.Timestamp\n+import com.google.common.io.BaseEncoding\n+import com.google.protobuf.ByteString\n+\n+object KeyValueConsumption {\n+\n+  def packDamlLogEntry(entry: DamlStateKey): ByteString = entry.toByteString\n+  def unpackDamlLogEntry(bytes: ByteString): DamlLogEntry = DamlLogEntry.parseFrom(bytes)\n+\n+  /** Construct a participant-state [[Update]] from a [[DamlLogEntry]].\n+    *\n+    * This method is expected to be used to implement [[com.daml.ledger.participant.state.v1.ReadService.stateUpdates]].\n+    *\n+    * @param entryId: The log entry identifier.\n+    * @param entry: The log entry.\n+    * @return [[[Update]] constructed from log entry.\n+    */\n+  def logEntryToUpdate(entryId: DamlLogEntryId, entry: DamlLogEntry): Update = {\n+\n+    val recordTime = parseTimestamp(entry.getRecordTime)\n+\n+    entry.getPayloadCase match {\n+      case DamlLogEntry.PayloadCase.ARCHIVE =>\n+        Update.PublicPackageUploaded(entry.getArchive)\n+\n+      case DamlLogEntry.PayloadCase.TRANSACTION_ENTRY =>\n+        txEntryToUpdate(entryId, entry.getTransactionEntry, recordTime)\n+\n+      case DamlLogEntry.PayloadCase.CONFIGURATION_ENTRY =>\n+        Update.ConfigurationChanged(parseDamlConfigurationEntry(entry.getConfigurationEntry))\n+\n+      case DamlLogEntry.PayloadCase.REJECTION_ENTRY =>\n+        rejEntryToUpdate(entryId, entry.getRejectionEntry, recordTime)\n+\n+      case DamlLogEntry.PayloadCase.PAYLOAD_NOT_SET =>\n+        throw new RuntimeException(\"entryToUpdate: Payload is not set!\")\n+    }\n+  }\n+\n+  private def rejEntryToUpdate("
  },
  {
    "id" : "8323daa1-7d2d-43f5-a84c-a17834075419",
    "prId" : 637,
    "comments" : [
      {
        "id" : "36496711-c761-4106-8495-5979913f0462",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "explain purpose of this singleton object",
        "createdAt" : "2019-04-26T13:39:10Z",
        "updatedAt" : "2019-04-29T09:35:03Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d5b2167d99861a69fd3366ab5fb08acc35514642",
    "line" : 22,
    "diffHunk" : "@@ -0,0 +1,114 @@\n+package com.daml.ledger.participant.state.kvutils\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.DamlKvutils._\n+import com.daml.ledger.participant.state.v1.{\n+  CommittedTransaction,\n+  RejectionReason,\n+  SubmittedTransaction,\n+  TransactionMeta,\n+  Update\n+}\n+import com.digitalasset.daml.lf.data.Time.Timestamp\n+import com.google.common.io.BaseEncoding\n+import com.google.protobuf.ByteString\n+\n+object KeyValueConsumption {"
  }
]