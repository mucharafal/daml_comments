[
  {
    "id" : "0a43293e-a5d7-4700-ae0d-2bff4da635e9",
    "prId" : 6711,
    "comments" : [
      {
        "id" : "bbef771d-6774-4738-a3e0-dff4cadc1047",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Why not just getting the values?",
        "createdAt" : "2020-07-14T08:38:05Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ee6b2718-d7d7-4d38-a3e9-c67f8bb241e0",
        "parentId" : "bbef771d-6774-4738-a3e0-dff4cadc1047",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "What do you mean? The cache stores values in a bit different way than we need it in the output.",
        "createdAt" : "2020-07-14T10:13:34Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e6145fdda1728eb9dd00d6dc94b3e0058872bbb2",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@    } else {\n      Future {\n        keys.map(cachedValues(_))\n      }\n    }"
  },
  {
    "id" : "f2ceb6ae-b2f1-4f78-a104-48ee74bdea31",
    "prId" : 6711,
    "comments" : [
      {
        "id" : "2e365547-1460-4979-b60a-2e73f0bc2546",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "add an assertion here on the `keysToRead` being of equal length as `readStateValues`, as `zip` otherwise silently drops them.",
        "createdAt" : "2020-07-14T09:33:09Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a898511a-ab69-43c5-9ab4-f5a76f988a56",
        "parentId" : "2e365547-1460-4979-b60a-2e73f0bc2546",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Added.",
        "createdAt" : "2020-07-14T10:21:51Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e6145fdda1728eb9dd00d6dc94b3e0058872bbb2",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@        .map { readStateValues =>\n          assert(keysToRead.size == readStateValues.size)\n          val readValues = keysToRead.zip(readStateValues).toMap\n          readValues.collect {\n            case (key, (Some(value), fingerprint)) if shouldCache(key) =>"
  },
  {
    "id" : "e09a5dba-3133-4a7a-93cf-fda2e2896ddd",
    "prId" : 6711,
    "comments" : [
      {
        "id" : "73cbb487-6920-4bfa-9d94-45185c56174a",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "I'd suggest caching `Option [DamlStateValue]` as this is the lookup function provided by `DamlLedgerStateReaderWithFingerprints`. It even slightly simplifies the code below.",
        "createdAt" : "2020-07-14T09:38:55Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "70cb0195-3a15-44c3-87aa-b1b83bf3560b",
        "parentId" : "73cbb487-6920-4bfa-9d94-45185c56174a",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "You will then probably want to switch from `readValues` to `readResults`",
        "createdAt" : "2020-07-14T09:39:31Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0a4d2d33-9de9-4eec-b7c4-2fa88da842c3",
        "parentId" : "73cbb487-6920-4bfa-9d94-45185c56174a",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "We only want to store values that are available in the cache (hence we don't store an option). A simplification that I can see is switching to `Option[(DamlStateValue, Fingerprint)]` from `(Option[DamlStateValue], Fingerprint)` as we'll have the same fingerprint for empty values anyway hence wouldn't need to store such fingerprints unnecessarily (and this would also simplify the code below).\r\nWhat do you think?",
        "createdAt" : "2020-07-14T10:28:15Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "129f9e99-285e-4a26-8da7-95a1adf9d0e5",
        "parentId" : "73cbb487-6920-4bfa-9d94-45185c56174a",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "I'd be wary about making assumptions about the fingerprints of reading `None`. Underlying implementations might use the same fingerprint or they might not. As an example think about a key-value store that uses the last-modified-time of a value was as the fingerprint (assuming every transaction is committed at a different time). In that case, a `None` value might be due to the key never having been written, or it might be due to the key having been deleted in some transaction.\r\n\r\nMentally, the model I'm using is that we are caching results of lookups from the backing store; and these lookups can return `Option[DamlStateValue]`. This allows the non-existence of a key to mean something as well.",
        "createdAt" : "2020-07-14T11:17:07Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "504ec81c-cce7-4d04-afe6-80929dc0150c",
        "parentId" : "73cbb487-6920-4bfa-9d94-45185c56174a",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Makes sense, however, this design has one con: we will cache failed lookups for immutable objects such as party allocations and package uploads. This way the committer node will have all submissions fail that depend on a yet to be uploaded party or package. I.e., if the party allocation required for a submission is being processed after the submission itself on a committer node then the committer won't be able to process the submission till the cache entry expires for the failed party lookup. Do you think we should handle this corner case?",
        "createdAt" : "2020-07-14T14:03:58Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "731871d2-f5d4-4891-bc06-4d4305ffdfc5",
        "parentId" : "73cbb487-6920-4bfa-9d94-45185c56174a",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "OK. I see. What we are saying is that only positive lookups for immutable keys are to be cached. That makes sense, as they are immutable in an append-only fashion. Not immutable by default.\r\n\r\nThanks for raising this. If you could add a comment as to why we only cache positive lookups that would be helpful",
        "createdAt" : "2020-07-14T17:00:49Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "96adf803-a308-4e96-80ae-c357ed7cf417",
        "parentId" : "73cbb487-6920-4bfa-9d94-45185c56174a",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-07-15T08:15:00Z",
        "updatedAt" : "2020-07-15T08:15:00Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e6145fdda1728eb9dd00d6dc94b3e0058872bbb2",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@  */\nclass CachingDamlLedgerStateReaderWithFingerprints(\n    val cache: Cache[DamlStateKey, (DamlStateValue, Fingerprint)],\n    shouldCache: DamlStateKey => Boolean,\n    keySerializationStrategy: StateKeySerializationStrategy,"
  },
  {
    "id" : "311724fc-6c80-4f30-ae0d-13a4e8739847",
    "prId" : 6711,
    "comments" : [
      {
        "id" : "0ef4c329-727d-4942-b5e2-c8ee50f67099",
        "parentId" : null,
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "```suggestion\r\n        cachedValues.values.toSeq\r\n```\r\n\r\nAlthough probably it won't make much of a difference.",
        "createdAt" : "2020-07-14T10:28:49Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "66779a5e-05d4-4be6-b339-cd88e3bccdd7",
        "parentId" : "0ef4c329-727d-4942-b5e2-c8ee50f67099",
        "author" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "body" : "Perhaps a bit more readable though, as it implies that the values in there are exactly the ones needed.",
        "createdAt" : "2020-07-14T10:31:41Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "fabiotudone-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/59609563?u=a3a8ac844c9aacd1d1bd319a77d1d0ac60d701a3&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6d2721a-3196-412b-90c7-28ef3acfb932",
        "parentId" : "0ef4c329-727d-4942-b5e2-c8ee50f67099",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "We cannot do this as the order of the returned keys may not be the same as the input keys. The contract for the `LedgerReader` interface requires identical ordering hence we need to look up the keys in their original order and construct the output list.",
        "createdAt" : "2020-07-14T10:35:36Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "382ecde4-364c-4409-92fd-e1b480ba1822",
        "parentId" : "0ef4c329-727d-4942-b5e2-c8ee50f67099",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Added a test case as well so that this requirement is captured.",
        "createdAt" : "2020-07-14T14:04:23Z",
        "updatedAt" : "2020-07-15T08:11:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e6145fdda1728eb9dd00d6dc94b3e0058872bbb2",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@    } else {\n      Future {\n        keys.map(cachedValues(_))\n      }\n    }"
  }
]