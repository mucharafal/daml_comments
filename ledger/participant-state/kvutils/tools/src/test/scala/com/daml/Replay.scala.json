[
  {
    "id" : "559b960f-352d-48df-bac5-bbe54c5eb42d",
    "prId" : 6661,
    "comments" : [
      {
        "id" : "3aefef1f-60ad-4c5f-ae50-8ea510f24b9e",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Please move this into a separate class -- this class has already 200+ lines.",
        "createdAt" : "2020-07-09T08:52:10Z",
        "updatedAt" : "2020-07-14T10:54:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cd147cffdcefde3f65d15b11c9eaea3040a0b737",
    "line" : null,
    "diffHunk" : "@@ -223,4 +256,111 @@ object Replay {\n \n   }\n \n+  def adapt(pkgs: Map[Ref.PackageId, Ast.Package], benchMarkState: BenchMarkState): BenchMarkState =\n+    new Adapter(pkgs).adapt(benchMarkState)\n+\n+  private[this] final class Adapter(pkgs: Map[Ref.PackageId, Ast.Package]) {"
  },
  {
    "id" : "217675a4-a679-488a-81fb-9be04207db5b",
    "prId" : 6661,
    "comments" : [
      {
        "id" : "e7fc4f44-71af-4165-96c9-2ac511002793",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      val result = engine\r\n```",
        "createdAt" : "2020-07-09T08:53:01Z",
        "updatedAt" : "2020-07-14T10:54:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cd147cffdcefde3f65d15b11c9eaea3040a0b737",
    "line" : 138,
    "diffHunk" : "@@ -104,21 +122,32 @@ object Replay {\n \n   private def unexpectedError = sys.error(\"Unexpected Error\")\n \n-  def loadDar(darFile: Path): Engine = {\n+  private def loadDar(darFile: Path): Map[Ref.PackageId, Ast.Package] = {\n     println(s\"%%% loading dar file $darFile ...\")\n-    lazy val dar = UniversalArchiveReader().readFile(darFile.toFile).get\n-    lazy val packages = dar.all.map {\n-      case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\n-    }.toMap\n+    UniversalArchiveReader()\n+      .readFile(darFile.toFile)\n+      .get\n+      .all\n+      .map {\n+        case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\n+      }\n+      .toMap\n+  }\n+\n+  private def compile(pkgs: Map[Ref.PackageId, Ast.Package]): Engine = {\n+    println(s\"%%% compile ${pkgs.size} packages ...\")\n     val engine = new Engine(Engine.DevConfig)\n-    val r = engine\n-      .preloadPackage(dar.main._1, packages(dar.main._1))\n-      .consume(_ => unexpectedError, packages.get, _ => unexpectedError)\n-    assert(r.isRight)\n+    AstUtil.dependenciesInTopologicalOrder(pkgs.keys.toList, pkgs).foreach { pkgId =>\n+      val r = engine"
  },
  {
    "id" : "413bf546-d3ac-4faf-9e41-40f4c60fb9e3",
    "prId" : 6661,
    "comments" : [
      {
        "id" : "21227f44-090a-4e9f-ae58-6328707cb6d8",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```packages``` or ```loadedPackages```?",
        "createdAt" : "2020-07-09T08:53:42Z",
        "updatedAt" : "2020-07-14T10:54:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cd147cffdcefde3f65d15b11c9eaea3040a0b737",
    "line" : null,
    "diffHunk" : "@@ -37,23 +40,32 @@ final case class TxEntry(\n final case class BenchMarkState(\n     name: String,\n     transaction: TxEntry,\n-    contracts: ContractId => Option[Tx.ContractInst[ContractId]],\n-    contractKeys: GlobalKey => Option[ContractId],\n+    contracts: Map[ContractId, Tx.ContractInst[ContractId]],\n+    contractKeys: Map[GlobalKey, ContractId],\n )\n \n @State(Scope.Benchmark)\n class Replay {\n \n   @Param(Array())\n+  // choiceName of the exercise to benchmark\n+  // format: \"ModuleName:TemplateName:ChoiceName\"\n   var choiceName: String = _\n \n   @Param(Array())\n+  // path of the darFile\n   var darFile: String = _\n \n   @Param(Array())\n+  // path of the ledger export\n   var ledgerFile: String = _\n \n-  private var engineDarFile: Option[String] = None\n+  @Param(Array(\"false\"))\n+  // if 'true' try to adapt the benchmark to the dar\n+  var adapt: Boolean = _\n+\n+  private var readDarFile: Option[String] = None\n+  private var pkgs: Map[Ref.PackageId, Ast.Package] = _"
  },
  {
    "id" : "30a8b826-22f4-4225-94c6-c297fa133f23",
    "prId" : 6661,
    "comments" : [
      {
        "id" : "15425921-d63b-4672-aab1-e1cdd9a7b6d5",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```BenchmarkState```",
        "createdAt" : "2020-07-09T08:54:49Z",
        "updatedAt" : "2020-07-14T10:54:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cd147cffdcefde3f65d15b11c9eaea3040a0b737",
    "line" : null,
    "diffHunk" : "@@ -37,23 +40,32 @@ final case class TxEntry(\n final case class BenchMarkState(\n     name: String,\n     transaction: TxEntry,\n-    contracts: ContractId => Option[Tx.ContractInst[ContractId]],\n-    contractKeys: GlobalKey => Option[ContractId],\n+    contracts: Map[ContractId, Tx.ContractInst[ContractId]],\n+    contractKeys: Map[GlobalKey, ContractId],\n )\n \n @State(Scope.Benchmark)\n class Replay {\n \n   @Param(Array())\n+  // choiceName of the exercise to benchmark\n+  // format: \"ModuleName:TemplateName:ChoiceName\"\n   var choiceName: String = _\n \n   @Param(Array())\n+  // path of the darFile\n   var darFile: String = _\n \n   @Param(Array())\n+  // path of the ledger export\n   var ledgerFile: String = _\n \n-  private var engineDarFile: Option[String] = None\n+  @Param(Array(\"false\"))\n+  // if 'true' try to adapt the benchmark to the dar\n+  var adapt: Boolean = _\n+\n+  private var readDarFile: Option[String] = None\n+  private var pkgs: Map[Ref.PackageId, Ast.Package] = _\n   private var engine: Engine = _\n   private var benchmarksFile: Option[String] = None\n   private var benchmarks: Map[String, BenchMarkState] = _"
  },
  {
    "id" : "3f39e664-906d-4c5b-981b-2c55148c8a69",
    "prId" : 6661,
    "comments" : [
      {
        "id" : "d3bca23a-70a3-43d8-94f7-67c39eb9fc84",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n  private[this] final class Adapter(packages: Map[Ref.PackageId, Ast.Package]) {\r\n```",
        "createdAt" : "2020-07-09T08:56:19Z",
        "updatedAt" : "2020-07-14T10:54:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cd147cffdcefde3f65d15b11c9eaea3040a0b737",
    "line" : null,
    "diffHunk" : "@@ -223,4 +256,111 @@ object Replay {\n \n   }\n \n+  def adapt(pkgs: Map[Ref.PackageId, Ast.Package], benchMarkState: BenchMarkState): BenchMarkState =\n+    new Adapter(pkgs).adapt(benchMarkState)\n+\n+  private[this] final class Adapter(pkgs: Map[Ref.PackageId, Ast.Package]) {"
  },
  {
    "id" : "00aa949e-b0f2-4edc-9fa9-b892049b0b82",
    "prId" : 6661,
    "comments" : [
      {
        "id" : "d506eec0-5a02-4a53-a756-0f3ac72da7df",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "It would make sense to move this class into a separate package, e.g. to under `com.daml.replay`.",
        "createdAt" : "2020-07-09T09:01:03Z",
        "updatedAt" : "2020-07-14T10:54:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cd147cffdcefde3f65d15b11c9eaea3040a0b737",
    "line" : 1,
    "diffHunk" : "@@ -17,14 +17,17 @@ import com.daml.lf.archive.{Decode, UniversalArchiveReader}\n import com.daml.lf.crypto"
  },
  {
    "id" : "709b5cdf-d75c-476e-85a9-1a4cbfb1295a",
    "prId" : 6661,
    "comments" : [
      {
        "id" : "54b50a00-3f87-45dd-8736-88de075e3415",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "How does the below code drop the versions?",
        "createdAt" : "2020-07-09T09:04:33Z",
        "updatedAt" : "2020-07-14T10:54:23Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cd147cffdcefde3f65d15b11c9eaea3040a0b737",
    "line" : null,
    "diffHunk" : "@@ -223,4 +256,111 @@ object Replay {\n \n   }\n \n+  def adapt(pkgs: Map[Ref.PackageId, Ast.Package], benchMarkState: BenchMarkState): BenchMarkState =\n+    new Adapter(pkgs).adapt(benchMarkState)\n+\n+  private[this] final class Adapter(pkgs: Map[Ref.PackageId, Ast.Package]) {\n+\n+    def adapt(state: BenchMarkState): BenchMarkState =\n+      state.copy(\n+        transaction = state.transaction.copy(tx = adapt(state.transaction.tx)),\n+        contracts = state.contracts.transform((_, v) => adapt(v)),\n+        contractKeys = state.contractKeys.iterator.map { case (k, v) => adapt(k) -> v }.toMap,\n+      )\n+\n+    private[this] def adapt(tx: Tx.Transaction): Tx.SubmittedTransaction =\n+      tx.foldWithPathState(new TxBuilder, Option.empty[Tx.NodeId])(\n+          (builder, parent, _, node) =>\n+            (builder, Some(parent.fold(builder.add(adapt(node)))(builder.add(adapt(node), _))))\n+        )\n+        .buildSubmitted()\n+\n+    // drop version and children\n+    private[this] def adapt(node: Tx.Node): Node.GenNode[Tx.NodeId, ContractId, Value[ContractId]] ="
  },
  {
    "id" : "de86ba09-4532-49df-aca5-bbd6fe62e933",
    "prId" : 6464,
    "comments" : [
      {
        "id" : "93dd8e87-21da-4827-a130-6c847477a854",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\nfinal case class TxEntry(\r\n```\r\n\r\n&c.",
        "createdAt" : "2020-07-07T12:14:30Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d3013cba-d0d2-4fea-863c-f36c8a0ac5fd",
        "parentId" : "93dd8e87-21da-4827-a130-6c847477a854",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-07-07T14:09:29Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e4534ddfd19654c1da5ce2930793a4eaa7a12cf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.test\n+\n+import java.io.DataInputStream\n+import java.lang.System.err.println\n+import java.nio.file.{Files, Path, Paths}\n+import java.util.concurrent.TimeUnit\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.export.FileBasedLedgerDataExporter.SubmissionInfo\n+import com.daml.ledger.participant.state.kvutils.export.Serialization\n+import com.daml.ledger.participant.state.kvutils.{Envelope, DamlKvutils => Proto}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.lf.archive.{Decode, UniversalArchiveReader}\n+import com.daml.lf.data._\n+import com.daml.lf.engine.Engine\n+import com.daml.lf.transaction.Node.GlobalKey\n+import com.daml.lf.transaction.{Node, Transaction => Tx, TransactionCoder => TxCoder}\n+import com.daml.lf.value.Value.ContractId\n+import com.daml.lf.value.{Value, ValueCoder => ValCoder}\n+import com.daml.lf.{crypto, data}\n+import com.google.protobuf.ByteString\n+import org.openjdk.jmh.annotations._\n+\n+import scala.collection.JavaConverters._\n+\n+case class TxEntry("
  },
  {
    "id" : "2f071e80-d949-4ef9-af31-a38186283cd8",
    "prId" : 6464,
    "comments" : [
      {
        "id" : "90d5b923-6746-4e24-9a58-67d659beafc8",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It would be safer to `match` here.",
        "createdAt" : "2020-07-07T12:16:23Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8a159d03-c10f-4e25-8a5c-34bd99100ee1",
        "parentId" : "90d5b923-6746-4e24-9a58-67d659beafc8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n",
        "createdAt" : "2020-07-07T14:10:03Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e4534ddfd19654c1da5ce2930793a4eaa7a12cf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.test\n+\n+import java.io.DataInputStream\n+import java.lang.System.err.println\n+import java.nio.file.{Files, Path, Paths}\n+import java.util.concurrent.TimeUnit\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.export.FileBasedLedgerDataExporter.SubmissionInfo\n+import com.daml.ledger.participant.state.kvutils.export.Serialization\n+import com.daml.ledger.participant.state.kvutils.{Envelope, DamlKvutils => Proto}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.lf.archive.{Decode, UniversalArchiveReader}\n+import com.daml.lf.data._\n+import com.daml.lf.engine.Engine\n+import com.daml.lf.transaction.Node.GlobalKey\n+import com.daml.lf.transaction.{Node, Transaction => Tx, TransactionCoder => TxCoder}\n+import com.daml.lf.value.Value.ContractId\n+import com.daml.lf.value.{Value, ValueCoder => ValCoder}\n+import com.daml.lf.{crypto, data}\n+import com.google.protobuf.ByteString\n+import org.openjdk.jmh.annotations._\n+\n+import scala.collection.JavaConverters._\n+\n+case class TxEntry(\n+    tx: Tx.SubmittedTransaction,\n+    participantId: ParticipantId,\n+    ledgerTime: Time.Timestamp,\n+    submissionTime: Time.Timestamp,\n+    submissionSeed: crypto.Hash,\n+)\n+\n+case class BenchMarkSate(\n+    name: String,\n+    transaction: TxEntry,\n+    contracts: ContractId => Option[Tx.ContractInst[ContractId]],\n+    contractKeys: GlobalKey => Option[ContractId],\n+)\n+\n+@State(Scope.Benchmark)\n+class Replay {\n+\n+  @Param(Array())\n+  var choiceName: String = _\n+\n+  @Param(Array())\n+  var darFile: String = _\n+\n+  @Param(Array())\n+  var ledgerFile: String = _\n+\n+  private var engineDarFile: Option[String] = None\n+  private var engine: Engine = _\n+  private var benchmarksFile: Option[String] = None\n+  private var benchmarks: Map[String, BenchMarkSate] = _\n+  private var benchmark: BenchMarkSate = _\n+\n+  @Benchmark @BenchmarkMode(Array(Mode.AverageTime)) @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  def bench() = {\n+    engine\n+      .replay(\n+        benchmark.transaction.tx,\n+        benchmark.transaction.ledgerTime,\n+        benchmark.transaction.participantId,\n+        benchmark.transaction.submissionTime,\n+        benchmark.transaction.submissionSeed,\n+      )\n+      .consume(benchmark.contracts, _ => Replay.unexpectedError, benchmark.contractKeys)\n+  }\n+\n+  @Setup(Level.Trial)\n+  def init() = {\n+    if (!engineDarFile.contains(darFile)) {\n+      engine = Replay.loadDar(Paths.get(darFile))\n+      engineDarFile = Some(darFile)\n+    }\n+    if (!benchmarksFile.contains(ledgerFile)) {\n+      benchmarks = Replay.loadBenchmarks(Paths.get(ledgerFile))\n+      benchmarksFile = Some(ledgerFile)\n+    }\n+\n+    benchmark = benchmarks(choiceName)\n+    // before running the bench, we validate the transaction first to be sure everything is fine.\n+    val r = engine\n+      .validate(\n+        benchmark.transaction.tx,\n+        benchmark.transaction.ledgerTime,\n+        benchmark.transaction.participantId,\n+        benchmark.transaction.submissionTime,\n+        benchmark.transaction.submissionSeed,\n+      )\n+      .consume(benchmark.contracts, _ => Replay.unexpectedError, benchmark.contractKeys)\n+    assert(r.isRight)\n+  }\n+\n+}\n+\n+object Replay {\n+\n+  private def unexpectedError = sys.error(\"Unexpected Error\")\n+\n+  def loadDar(darFile: Path): Engine = {\n+    println(s\"%%% loading dar file $darFile ...\")\n+    lazy val dar = UniversalArchiveReader().readFile(darFile.toFile).get\n+    lazy val packages = dar.all.map {\n+      case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\n+    }.toMap\n+    val engine = new Engine(Engine.DevConfig)\n+    val r = engine\n+      .preloadPackage(dar.main._1, packages(dar.main._1))\n+      .consume(_ => unexpectedError, packages.get, _ => unexpectedError)\n+      .left\n+      .map(_.msg)\n+    data.assertRight(r)\n+    engine\n+  }\n+\n+  private def exportEntries(file: Path): Stream[SubmissionInfo] = {\n+    val ledgerExportStream = new DataInputStream(Files.newInputStream(file))\n+\n+    def go: Stream[SubmissionInfo] =\n+      if (ledgerExportStream.available() > 0)\n+        Serialization.readEntry(ledgerExportStream)._1 #:: go\n+      else {\n+        ledgerExportStream.close()\n+        Stream.empty\n+      }\n+\n+    go\n+  }\n+\n+  private def decodeSubmission(participantId: ParticipantId, submission: Proto.DamlSubmission) = {\n+    if (submission.getPayloadCase == Proto.DamlSubmission.PayloadCase.TRANSACTION_ENTRY) {"
  },
  {
    "id" : "87bc8963-69b7-4757-8540-ae609cae8c3c",
    "prId" : 6464,
    "comments" : [
      {
        "id" : "42fff7a9-c420-471c-a753-9407d8f8b01a",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    val createsNodes: Seq[Node.NodeCreate.WithTxValue[ContractId]] =\r\n```\r\n\r\n&c.",
        "createdAt" : "2020-07-07T12:19:35Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82aa1301-d40b-4b1e-8197-b37a69089faa",
        "parentId" : "42fff7a9-c420-471c-a753-9407d8f8b01a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-07-07T14:10:11Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e4534ddfd19654c1da5ce2930793a4eaa7a12cf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.test\n+\n+import java.io.DataInputStream\n+import java.lang.System.err.println\n+import java.nio.file.{Files, Path, Paths}\n+import java.util.concurrent.TimeUnit\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.export.FileBasedLedgerDataExporter.SubmissionInfo\n+import com.daml.ledger.participant.state.kvutils.export.Serialization\n+import com.daml.ledger.participant.state.kvutils.{Envelope, DamlKvutils => Proto}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.lf.archive.{Decode, UniversalArchiveReader}\n+import com.daml.lf.data._\n+import com.daml.lf.engine.Engine\n+import com.daml.lf.transaction.Node.GlobalKey\n+import com.daml.lf.transaction.{Node, Transaction => Tx, TransactionCoder => TxCoder}\n+import com.daml.lf.value.Value.ContractId\n+import com.daml.lf.value.{Value, ValueCoder => ValCoder}\n+import com.daml.lf.{crypto, data}\n+import com.google.protobuf.ByteString\n+import org.openjdk.jmh.annotations._\n+\n+import scala.collection.JavaConverters._\n+\n+case class TxEntry(\n+    tx: Tx.SubmittedTransaction,\n+    participantId: ParticipantId,\n+    ledgerTime: Time.Timestamp,\n+    submissionTime: Time.Timestamp,\n+    submissionSeed: crypto.Hash,\n+)\n+\n+case class BenchMarkSate(\n+    name: String,\n+    transaction: TxEntry,\n+    contracts: ContractId => Option[Tx.ContractInst[ContractId]],\n+    contractKeys: GlobalKey => Option[ContractId],\n+)\n+\n+@State(Scope.Benchmark)\n+class Replay {\n+\n+  @Param(Array())\n+  var choiceName: String = _\n+\n+  @Param(Array())\n+  var darFile: String = _\n+\n+  @Param(Array())\n+  var ledgerFile: String = _\n+\n+  private var engineDarFile: Option[String] = None\n+  private var engine: Engine = _\n+  private var benchmarksFile: Option[String] = None\n+  private var benchmarks: Map[String, BenchMarkSate] = _\n+  private var benchmark: BenchMarkSate = _\n+\n+  @Benchmark @BenchmarkMode(Array(Mode.AverageTime)) @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  def bench() = {\n+    engine\n+      .replay(\n+        benchmark.transaction.tx,\n+        benchmark.transaction.ledgerTime,\n+        benchmark.transaction.participantId,\n+        benchmark.transaction.submissionTime,\n+        benchmark.transaction.submissionSeed,\n+      )\n+      .consume(benchmark.contracts, _ => Replay.unexpectedError, benchmark.contractKeys)\n+  }\n+\n+  @Setup(Level.Trial)\n+  def init() = {\n+    if (!engineDarFile.contains(darFile)) {\n+      engine = Replay.loadDar(Paths.get(darFile))\n+      engineDarFile = Some(darFile)\n+    }\n+    if (!benchmarksFile.contains(ledgerFile)) {\n+      benchmarks = Replay.loadBenchmarks(Paths.get(ledgerFile))\n+      benchmarksFile = Some(ledgerFile)\n+    }\n+\n+    benchmark = benchmarks(choiceName)\n+    // before running the bench, we validate the transaction first to be sure everything is fine.\n+    val r = engine\n+      .validate(\n+        benchmark.transaction.tx,\n+        benchmark.transaction.ledgerTime,\n+        benchmark.transaction.participantId,\n+        benchmark.transaction.submissionTime,\n+        benchmark.transaction.submissionSeed,\n+      )\n+      .consume(benchmark.contracts, _ => Replay.unexpectedError, benchmark.contractKeys)\n+    assert(r.isRight)\n+  }\n+\n+}\n+\n+object Replay {\n+\n+  private def unexpectedError = sys.error(\"Unexpected Error\")\n+\n+  def loadDar(darFile: Path): Engine = {\n+    println(s\"%%% loading dar file $darFile ...\")\n+    lazy val dar = UniversalArchiveReader().readFile(darFile.toFile).get\n+    lazy val packages = dar.all.map {\n+      case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\n+    }.toMap\n+    val engine = new Engine(Engine.DevConfig)\n+    val r = engine\n+      .preloadPackage(dar.main._1, packages(dar.main._1))\n+      .consume(_ => unexpectedError, packages.get, _ => unexpectedError)\n+      .left\n+      .map(_.msg)\n+    data.assertRight(r)\n+    engine\n+  }\n+\n+  private def exportEntries(file: Path): Stream[SubmissionInfo] = {\n+    val ledgerExportStream = new DataInputStream(Files.newInputStream(file))\n+\n+    def go: Stream[SubmissionInfo] =\n+      if (ledgerExportStream.available() > 0)\n+        Serialization.readEntry(ledgerExportStream)._1 #:: go\n+      else {\n+        ledgerExportStream.close()\n+        Stream.empty\n+      }\n+\n+    go\n+  }\n+\n+  private def decodeSubmission(participantId: ParticipantId, submission: Proto.DamlSubmission) = {\n+    if (submission.getPayloadCase == Proto.DamlSubmission.PayloadCase.TRANSACTION_ENTRY) {\n+      val entry = submission.getTransactionEntry\n+      val tx = TxCoder\n+        .decodeTransaction(\n+          TxCoder.NidDecoder,\n+          ValCoder.CidDecoder,\n+          submission.getTransactionEntry.getTransaction)\n+        .fold(err => sys.error(err.toString), Tx.SubmittedTransaction(_))\n+      Stream(\n+        TxEntry(\n+          tx = tx,\n+          participantId = participantId,\n+          ledgerTime = parseTimestamp(entry.getLedgerEffectiveTime),\n+          submissionTime = parseTimestamp(entry.getSubmissionTime),\n+          submissionSeed = parseHash(entry.getSubmissionSeed)\n+        ))\n+    } else\n+      Stream.empty\n+  }\n+\n+  private def decodeEnvelope(participantId: ParticipantId, envelope: ByteString): Stream[TxEntry] =\n+    assertRight(Envelope.open(envelope)) match {\n+      case Envelope.SubmissionMessage(submission) =>\n+        decodeSubmission(participantId, submission)\n+      case Envelope.SubmissionBatchMessage(batch) =>\n+        batch.getSubmissionsList.asScala.toStream\n+          .map(_.getSubmission)\n+          .flatMap(decodeEnvelope(participantId, _))\n+      case Envelope.LogEntryMessage(_) | Envelope.StateValueMessage(_) =>\n+        Stream.empty\n+    }\n+\n+  private def decodeSubmissionInfo(submissionInfo: SubmissionInfo) =\n+    decodeEnvelope(submissionInfo.participantId, submissionInfo.submissionEnvelope)\n+\n+  def loadBenchmarks(dumpFile: Path): Map[String, BenchMarkSate] = {\n+    println(s\"%%% load ledger export file  $dumpFile...\")\n+    val transactions = exportEntries(dumpFile).flatMap(decodeSubmissionInfo)\n+    if (transactions.isEmpty) sys.error(\"no transaction find\")\n+\n+    val createsNodes: Seq[Node.NodeCreate[ContractId, Tx.Value[ContractId]]] ="
  },
  {
    "id" : "c61b0028-8a11-47ca-aa6f-c26b16cf2211",
    "prId" : 6464,
    "comments" : [
      {
        "id" : "4167489f-0125-4a9c-ad14-6b6b4723e5e7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "What does it mean to use an empty array as a `@Param`? Does this run anything at all?\r\n\r\nI would have thought that the cross product of `Array.empty` × _anything_ would be `Array.empty`.",
        "createdAt" : "2020-07-07T12:36:13Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6a0cea65-3929-4de8-b37f-69d1fe048c11",
        "parentId" : "4167489f-0125-4a9c-ad14-6b6b4723e5e7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This instruments the code such that you can use the `JMH` command line with \r\n`-p ledgerFile=ledger.export` (See the \"usage\" in the description). \r\nUsing an empty Array, is just a way to specify there is no default value, (I do not see any reasonable default value). In other words, it obliges you to use the command line parameter \"-p \". \r\n",
        "createdAt" : "2020-07-07T13:59:52Z",
        "updatedAt" : "2020-07-07T20:33:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5c1c8802-6545-4246-ad7b-c660afabe6a5",
        "parentId" : "4167489f-0125-4a9c-ad14-6b6b4723e5e7",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "That's great, thanks for the explanation.",
        "createdAt" : "2020-07-07T15:18:42Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e4534ddfd19654c1da5ce2930793a4eaa7a12cf",
    "line" : 47,
    "diffHunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.test\n+\n+import java.io.DataInputStream\n+import java.lang.System.err.println\n+import java.nio.file.{Files, Path, Paths}\n+import java.util.concurrent.TimeUnit\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.export.FileBasedLedgerDataExporter.SubmissionInfo\n+import com.daml.ledger.participant.state.kvutils.export.Serialization\n+import com.daml.ledger.participant.state.kvutils.{Envelope, DamlKvutils => Proto}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.lf.archive.{Decode, UniversalArchiveReader}\n+import com.daml.lf.data._\n+import com.daml.lf.engine.Engine\n+import com.daml.lf.transaction.Node.GlobalKey\n+import com.daml.lf.transaction.{Node, Transaction => Tx, TransactionCoder => TxCoder}\n+import com.daml.lf.value.Value.ContractId\n+import com.daml.lf.value.{Value, ValueCoder => ValCoder}\n+import com.daml.lf.{crypto, data}\n+import com.google.protobuf.ByteString\n+import org.openjdk.jmh.annotations._\n+\n+import scala.collection.JavaConverters._\n+\n+case class TxEntry(\n+    tx: Tx.SubmittedTransaction,\n+    participantId: ParticipantId,\n+    ledgerTime: Time.Timestamp,\n+    submissionTime: Time.Timestamp,\n+    submissionSeed: crypto.Hash,\n+)\n+\n+case class BenchMarkSate(\n+    name: String,\n+    transaction: TxEntry,\n+    contracts: ContractId => Option[Tx.ContractInst[ContractId]],\n+    contractKeys: GlobalKey => Option[ContractId],\n+)\n+\n+@State(Scope.Benchmark)\n+class Replay {\n+\n+  @Param(Array())"
  },
  {
    "id" : "596da774-929a-4a09-b487-fdaac60c372c",
    "prId" : 6464,
    "comments" : [
      {
        "id" : "04d438f9-b002-4a68-90cb-54ffcb665ffa",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You're missing a \"t\", and I think the \"m\" should be lowercase.\r\n\r\n```suggestion\r\nfinal case class BenchmarkState(\r\n```",
        "createdAt" : "2020-07-07T15:19:21Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "232cb499-b05b-4a2b-b6af-12ec358137b9",
        "parentId" : "04d438f9-b002-4a68-90cb-54ffcb665ffa",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "good catch.",
        "createdAt" : "2020-07-07T20:11:50Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e4534ddfd19654c1da5ce2930793a4eaa7a12cf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,226 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.participant.state.kvutils.test\n+\n+import java.io.DataInputStream\n+import java.lang.System.err.println\n+import java.nio.file.{Files, Path, Paths}\n+import java.util.concurrent.TimeUnit\n+\n+import com.daml.ledger.participant.state.kvutils.Conversions._\n+import com.daml.ledger.participant.state.kvutils.export.FileBasedLedgerDataExporter.SubmissionInfo\n+import com.daml.ledger.participant.state.kvutils.export.Serialization\n+import com.daml.ledger.participant.state.kvutils.{Envelope, DamlKvutils => Proto}\n+import com.daml.ledger.participant.state.v1.ParticipantId\n+import com.daml.lf.archive.{Decode, UniversalArchiveReader}\n+import com.daml.lf.crypto\n+import com.daml.lf.data._\n+import com.daml.lf.engine.Engine\n+import com.daml.lf.transaction.Node.GlobalKey\n+import com.daml.lf.transaction.{Node, Transaction => Tx, TransactionCoder => TxCoder}\n+import com.daml.lf.value.Value.ContractId\n+import com.daml.lf.value.{Value, ValueCoder => ValCoder}\n+import com.google.protobuf.ByteString\n+import org.openjdk.jmh.annotations._\n+\n+import scala.collection.JavaConverters._\n+\n+final case class TxEntry(\n+    tx: Tx.SubmittedTransaction,\n+    participantId: ParticipantId,\n+    ledgerTime: Time.Timestamp,\n+    submissionTime: Time.Timestamp,\n+    submissionSeed: crypto.Hash,\n+)\n+\n+final case class BenchMarkSate("
  }
]