[
  {
    "id" : "4eff2f78-cc92-4d7a-8f5c-398fb0c6e4c6",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "c4d551fa-cc21-4cf5-a2d3-ac6531f696b6",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Comma and newline.",
        "createdAt" : "2020-07-31T10:01:45Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -92,70 +99,84 @@ private[platform] class MeteredReadOnlyLedger(ledger: ReadOnlyLedger, metrics: M\n   override def lookupTransactionTreeById(\n       transactionId: TransactionId,\n       requestingParties: Set[Party],\n-  ): Future[Option[GetTransactionResponse]] =\n+  )(implicit loggingContext: LoggingContext): Future[Option[GetTransactionResponse]] =\n     Timed.future(\n       metrics.daml.index.lookupTransactionTreeById,\n       ledger.lookupTransactionTreeById(transactionId, requestingParties),\n     )\n \n   override def lookupMaximumLedgerTime(\n       contractIds: Set[ContractId],\n-  ): Future[Option[Instant]] =\n+  )(implicit loggingContext: LoggingContext): Future[Option[Instant]] =\n     Timed.future(\n       metrics.daml.index.lookupMaximumLedgerTime,\n       ledger.lookupMaximumLedgerTime(contractIds))\n \n-  override def getParties(parties: Seq[Party]): Future[List[PartyDetails]] =\n+  override def getParties(parties: Seq[Party])(\n+      implicit loggingContext: LoggingContext,\n+  ): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.getParties, ledger.getParties(parties))\n \n-  override def listKnownParties(): Future[List[PartyDetails]] =\n+  override def listKnownParties()(\n+      implicit loggingContext: LoggingContext): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.listKnownParties, ledger.listKnownParties())\n \n-  override def partyEntries(startExclusive: Offset): Source[(Offset, PartyLedgerEntry), NotUsed] =\n+  override def partyEntries(startExclusive: Offset)(\n+      implicit loggingContext: LoggingContext): Source[(Offset, PartyLedgerEntry), NotUsed] =\n     ledger.partyEntries(startExclusive)\n \n-  override def listLfPackages(): Future[Map[PackageId, PackageDetails]] =\n+  override def listLfPackages()(\n+      implicit loggingContext: LoggingContext): Future[Map[PackageId, PackageDetails]] =\n     Timed.future(metrics.daml.index.listLfPackages, ledger.listLfPackages())\n \n-  override def getLfArchive(packageId: PackageId): Future[Option[Archive]] =\n+  override def getLfArchive(packageId: PackageId)(\n+      implicit loggingContext: LoggingContext): Future[Option[Archive]] ="
  },
  {
    "id" : "624970dc-c5d1-4917-9f0b-d017eb9da524",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "a69ce1a2-2e52-4866-9a0e-40f56caf3b62",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Comma and newline.",
        "createdAt" : "2020-07-31T10:01:57Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -92,70 +99,84 @@ private[platform] class MeteredReadOnlyLedger(ledger: ReadOnlyLedger, metrics: M\n   override def lookupTransactionTreeById(\n       transactionId: TransactionId,\n       requestingParties: Set[Party],\n-  ): Future[Option[GetTransactionResponse]] =\n+  )(implicit loggingContext: LoggingContext): Future[Option[GetTransactionResponse]] =\n     Timed.future(\n       metrics.daml.index.lookupTransactionTreeById,\n       ledger.lookupTransactionTreeById(transactionId, requestingParties),\n     )\n \n   override def lookupMaximumLedgerTime(\n       contractIds: Set[ContractId],\n-  ): Future[Option[Instant]] =\n+  )(implicit loggingContext: LoggingContext): Future[Option[Instant]] =\n     Timed.future(\n       metrics.daml.index.lookupMaximumLedgerTime,\n       ledger.lookupMaximumLedgerTime(contractIds))\n \n-  override def getParties(parties: Seq[Party]): Future[List[PartyDetails]] =\n+  override def getParties(parties: Seq[Party])(\n+      implicit loggingContext: LoggingContext,\n+  ): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.getParties, ledger.getParties(parties))\n \n-  override def listKnownParties(): Future[List[PartyDetails]] =\n+  override def listKnownParties()(\n+      implicit loggingContext: LoggingContext): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.listKnownParties, ledger.listKnownParties())\n \n-  override def partyEntries(startExclusive: Offset): Source[(Offset, PartyLedgerEntry), NotUsed] =\n+  override def partyEntries(startExclusive: Offset)(\n+      implicit loggingContext: LoggingContext): Source[(Offset, PartyLedgerEntry), NotUsed] =\n     ledger.partyEntries(startExclusive)\n \n-  override def listLfPackages(): Future[Map[PackageId, PackageDetails]] =\n+  override def listLfPackages()(\n+      implicit loggingContext: LoggingContext): Future[Map[PackageId, PackageDetails]] =\n     Timed.future(metrics.daml.index.listLfPackages, ledger.listLfPackages())\n \n-  override def getLfArchive(packageId: PackageId): Future[Option[Archive]] =\n+  override def getLfArchive(packageId: PackageId)(\n+      implicit loggingContext: LoggingContext): Future[Option[Archive]] =\n     Timed.future(metrics.daml.index.getLfArchive, ledger.getLfArchive(packageId))\n \n-  override def getLfPackage(packageId: PackageId): Future[Option[Ast.Package]] =\n+  override def getLfPackage(packageId: PackageId)(\n+      implicit loggingContext: LoggingContext): Future[Option[Ast.Package]] ="
  }
]