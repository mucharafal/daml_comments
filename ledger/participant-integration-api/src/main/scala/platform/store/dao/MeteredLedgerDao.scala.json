[
  {
    "id" : "e824bb2c-5926-4f78-b2db-7001cca995e1",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "5fedffe8-3b43-43a7-aa92-0d030a1906e4",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Comma and newline.",
        "createdAt" : "2020-07-31T10:10:57Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -36,67 +37,78 @@ private[platform] class MeteredLedgerReadDao(ledgerDao: LedgerReadDao, metrics:\n \n   override def currentHealth(): HealthStatus = ledgerDao.currentHealth()\n \n-  override def lookupLedgerId(): Future[Option[LedgerId]] =\n+  override def lookupLedgerId()(implicit loggingContext: LoggingContext): Future[Option[LedgerId]] =\n     Timed.future(metrics.daml.index.db.lookupLedgerId, ledgerDao.lookupLedgerId())\n \n-  override def lookupLedgerEnd(): Future[Offset] =\n+  override def lookupLedgerEnd()(implicit loggingContext: LoggingContext): Future[Offset] =\n     Timed.future(metrics.daml.index.db.lookupLedgerEnd, ledgerDao.lookupLedgerEnd())\n \n-  override def lookupInitialLedgerEnd(): Future[Option[Offset]] =\n+  override def lookupInitialLedgerEnd()(\n+      implicit loggingContext: LoggingContext): Future[Option[Offset]] =\n     Timed.future(metrics.daml.index.db.lookupLedgerEnd, ledgerDao.lookupInitialLedgerEnd())\n \n   override def lookupActiveOrDivulgedContract(\n       contractId: Value.ContractId,\n-      forParty: Party): Future[Option[ContractInst[Value.VersionedValue[ContractId]]]] =\n+      forParty: Party,\n+  )(implicit loggingContext: LoggingContext)\n+    : Future[Option[ContractInst[Value.VersionedValue[ContractId]]]] =\n     Timed.future(\n       metrics.daml.index.db.lookupActiveContract,\n       ledgerDao.lookupActiveOrDivulgedContract(contractId, forParty))\n \n   override def lookupMaximumLedgerTime(\n       contractIds: Set[ContractId],\n-  ): Future[Option[Instant]] =\n+  )(implicit loggingContext: LoggingContext): Future[Option[Instant]] =\n     Timed.future(\n       metrics.daml.index.db.lookupMaximumLedgerTime,\n       ledgerDao.lookupMaximumLedgerTime(contractIds))\n \n   override def transactionsReader: TransactionsReader = ledgerDao.transactionsReader\n \n-  override def lookupKey(key: GlobalKey, forParty: Party): Future[Option[Value.ContractId]] =\n+  override def lookupKey(key: GlobalKey, forParty: Party)(\n+      implicit loggingContext: LoggingContext): Future[Option[Value.ContractId]] =\n     Timed.future(metrics.daml.index.db.lookupKey, ledgerDao.lookupKey(key, forParty))\n \n-  override def getParties(parties: Seq[Party]): Future[List[PartyDetails]] =\n+  override def getParties(parties: Seq[Party])(\n+      implicit loggingContext: LoggingContext): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.db.getParties, ledgerDao.getParties(parties))\n \n-  override def listKnownParties(): Future[List[PartyDetails]] =\n+  override def listKnownParties()(\n+      implicit loggingContext: LoggingContext): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.db.listKnownParties, ledgerDao.listKnownParties())\n \n   override def getPartyEntries(\n       startExclusive: Offset,\n       endInclusive: Offset\n-  ): Source[(Offset, PartyLedgerEntry), NotUsed] =\n+  )(implicit loggingContext: LoggingContext): Source[(Offset, PartyLedgerEntry), NotUsed] =\n     ledgerDao.getPartyEntries(startExclusive, endInclusive)\n \n-  override def listLfPackages: Future[Map[PackageId, PackageDetails]] =\n+  override def listLfPackages()(\n+      implicit loggingContext: LoggingContext): Future[Map[PackageId, PackageDetails]] =\n     Timed.future(metrics.daml.index.db.listLfPackages, ledgerDao.listLfPackages)\n \n-  override def getLfArchive(packageId: PackageId): Future[Option[Archive]] =\n+  override def getLfArchive(packageId: PackageId)(\n+      implicit loggingContext: LoggingContext): Future[Option[Archive]] ="
  },
  {
    "id" : "230e525b-2870-4262-9888-bb45e121d28b",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "4576f100-fae7-492d-8e41-f875ebf33079",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Comma and newline.",
        "createdAt" : "2020-07-31T10:11:14Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -36,67 +37,78 @@ private[platform] class MeteredLedgerReadDao(ledgerDao: LedgerReadDao, metrics:\n \n   override def currentHealth(): HealthStatus = ledgerDao.currentHealth()\n \n-  override def lookupLedgerId(): Future[Option[LedgerId]] =\n+  override def lookupLedgerId()(implicit loggingContext: LoggingContext): Future[Option[LedgerId]] =\n     Timed.future(metrics.daml.index.db.lookupLedgerId, ledgerDao.lookupLedgerId())\n \n-  override def lookupLedgerEnd(): Future[Offset] =\n+  override def lookupLedgerEnd()(implicit loggingContext: LoggingContext): Future[Offset] =\n     Timed.future(metrics.daml.index.db.lookupLedgerEnd, ledgerDao.lookupLedgerEnd())\n \n-  override def lookupInitialLedgerEnd(): Future[Option[Offset]] =\n+  override def lookupInitialLedgerEnd()(\n+      implicit loggingContext: LoggingContext): Future[Option[Offset]] =\n     Timed.future(metrics.daml.index.db.lookupLedgerEnd, ledgerDao.lookupInitialLedgerEnd())\n \n   override def lookupActiveOrDivulgedContract(\n       contractId: Value.ContractId,\n-      forParty: Party): Future[Option[ContractInst[Value.VersionedValue[ContractId]]]] =\n+      forParty: Party,\n+  )(implicit loggingContext: LoggingContext)\n+    : Future[Option[ContractInst[Value.VersionedValue[ContractId]]]] =\n     Timed.future(\n       metrics.daml.index.db.lookupActiveContract,\n       ledgerDao.lookupActiveOrDivulgedContract(contractId, forParty))\n \n   override def lookupMaximumLedgerTime(\n       contractIds: Set[ContractId],\n-  ): Future[Option[Instant]] =\n+  )(implicit loggingContext: LoggingContext): Future[Option[Instant]] =\n     Timed.future(\n       metrics.daml.index.db.lookupMaximumLedgerTime,\n       ledgerDao.lookupMaximumLedgerTime(contractIds))\n \n   override def transactionsReader: TransactionsReader = ledgerDao.transactionsReader\n \n-  override def lookupKey(key: GlobalKey, forParty: Party): Future[Option[Value.ContractId]] =\n+  override def lookupKey(key: GlobalKey, forParty: Party)(\n+      implicit loggingContext: LoggingContext): Future[Option[Value.ContractId]] =\n     Timed.future(metrics.daml.index.db.lookupKey, ledgerDao.lookupKey(key, forParty))\n \n-  override def getParties(parties: Seq[Party]): Future[List[PartyDetails]] =\n+  override def getParties(parties: Seq[Party])(\n+      implicit loggingContext: LoggingContext): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.db.getParties, ledgerDao.getParties(parties))\n \n-  override def listKnownParties(): Future[List[PartyDetails]] =\n+  override def listKnownParties()(\n+      implicit loggingContext: LoggingContext): Future[List[PartyDetails]] =\n     Timed.future(metrics.daml.index.db.listKnownParties, ledgerDao.listKnownParties())\n \n   override def getPartyEntries(\n       startExclusive: Offset,\n       endInclusive: Offset\n-  ): Source[(Offset, PartyLedgerEntry), NotUsed] =\n+  )(implicit loggingContext: LoggingContext): Source[(Offset, PartyLedgerEntry), NotUsed] =\n     ledgerDao.getPartyEntries(startExclusive, endInclusive)\n \n-  override def listLfPackages: Future[Map[PackageId, PackageDetails]] =\n+  override def listLfPackages()(\n+      implicit loggingContext: LoggingContext): Future[Map[PackageId, PackageDetails]] =\n     Timed.future(metrics.daml.index.db.listLfPackages, ledgerDao.listLfPackages)\n \n-  override def getLfArchive(packageId: PackageId): Future[Option[Archive]] =\n+  override def getLfArchive(packageId: PackageId)(\n+      implicit loggingContext: LoggingContext): Future[Option[Archive]] =\n     Timed.future(metrics.daml.index.db.getLfArchive, ledgerDao.getLfArchive(packageId))\n \n   override def getPackageEntries(\n       startExclusive: Offset,\n-      endInclusive: Offset): Source[(Offset, PackageLedgerEntry), NotUsed] =\n+      endInclusive: Offset,\n+  )(implicit loggingContext: LoggingContext): Source[(Offset, PackageLedgerEntry), NotUsed] =\n     ledgerDao.getPackageEntries(startExclusive, endInclusive)\n \n   /** Looks up the current ledger configuration, if it has been set. */\n-  override def lookupLedgerConfiguration(): Future[Option[(Offset, Configuration)]] =\n+  override def lookupLedgerConfiguration()(\n+      implicit loggingContext: LoggingContext): Future[Option[(Offset, Configuration)]] ="
  },
  {
    "id" : "0c422072-4d58-46cc-b52c-2994cd3e1616",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "dfa7f287-8a62-453e-85dd-35767cc14e05",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Comma and newline.",
        "createdAt" : "2020-07-31T10:11:28Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -105,17 +117,20 @@ private[platform] class MeteredLedgerReadDao(ledgerDao: LedgerReadDao, metrics:\n       commandId: CommandId,\n       submitter: Ref.Party,\n       submittedAt: Instant,\n-      deduplicateUntil: Instant): Future[CommandDeduplicationResult] =\n+      deduplicateUntil: Instant,\n+  )(implicit loggingContext: LoggingContext): Future[CommandDeduplicationResult] =\n     Timed.future(\n       metrics.daml.index.db.deduplicateCommand,\n       ledgerDao.deduplicateCommand(commandId, submitter, submittedAt, deduplicateUntil))\n \n-  override def removeExpiredDeduplicationData(currentTime: Instant): Future[Unit] =\n+  override def removeExpiredDeduplicationData(currentTime: Instant)(\n+      implicit loggingContext: LoggingContext): Future[Unit] ="
  },
  {
    "id" : "34296935-bafe-44ba-9313-b6f998d0f5e5",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "124b5b0e-32bb-4550-b135-d63201fcc25e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Comma and newline.",
        "createdAt" : "2020-07-31T10:11:41Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -105,17 +117,20 @@ private[platform] class MeteredLedgerReadDao(ledgerDao: LedgerReadDao, metrics:\n       commandId: CommandId,\n       submitter: Ref.Party,\n       submittedAt: Instant,\n-      deduplicateUntil: Instant): Future[CommandDeduplicationResult] =\n+      deduplicateUntil: Instant,\n+  )(implicit loggingContext: LoggingContext): Future[CommandDeduplicationResult] =\n     Timed.future(\n       metrics.daml.index.db.deduplicateCommand,\n       ledgerDao.deduplicateCommand(commandId, submitter, submittedAt, deduplicateUntil))\n \n-  override def removeExpiredDeduplicationData(currentTime: Instant): Future[Unit] =\n+  override def removeExpiredDeduplicationData(currentTime: Instant)(\n+      implicit loggingContext: LoggingContext): Future[Unit] =\n     Timed.future(\n       metrics.daml.index.db.removeExpiredDeduplicationData,\n       ledgerDao.removeExpiredDeduplicationData(currentTime))\n \n-  override def stopDeduplicatingCommand(commandId: CommandId, submitter: Party): Future[Unit] =\n+  override def stopDeduplicatingCommand(commandId: CommandId, submitter: Party)(\n+      implicit loggingContext: LoggingContext): Future[Unit] ="
  }
]