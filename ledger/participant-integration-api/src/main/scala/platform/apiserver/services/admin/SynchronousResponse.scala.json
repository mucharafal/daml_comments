[
  {
    "id" : "8667d03b-5b78-47f7-a134-28c993ba9803",
    "prId" : 7171,
    "comments" : [
      {
        "id" : "2d4b159e-89c8-4645-9bc9-84baebaef919",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Would it be better to have the execution context passed in as an implicit parameter?",
        "createdAt" : "2020-08-18T17:46:05Z",
        "updatedAt" : "2020-08-19T07:06:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94a98ca4-27f2-4c8e-9e8c-7d58ff5a66ee",
        "parentId" : "2d4b159e-89c8-4645-9bc9-84baebaef919",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yeah, good idea.",
        "createdAt" : "2020-08-18T18:13:37Z",
        "updatedAt" : "2020-08-19T07:06:52Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d7cea368c8d7395d980eaa682c00046a92e2a22e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.platform.apiserver.services.admin\n+\n+import akka.stream.Materializer\n+import akka.stream.scaladsl.{Sink, Source}\n+import com.daml.dec.DirectExecutionContext\n+import com.daml.platform.server.api.validation.ErrorFactories\n+\n+import scala.concurrent.duration.FiniteDuration\n+import scala.concurrent.{Future, TimeoutException}\n+\n+object SynchronousResponse {\n+\n+  def pollUntilPersisted[T](\n+      source: Source[T, _],\n+      timeToLive: FiniteDuration,\n+  )(implicit materializer: Materializer): Future[T] =\n+    source\n+      .completionTimeout(timeToLive)\n+      .runWith(Sink.head)\n+      .recoverWith {\n+        case _: TimeoutException =>\n+          Future.failed(ErrorFactories.aborted(\"Request timed out\"))\n+      }(DirectExecutionContext)"
  }
]