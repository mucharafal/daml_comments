[
  {
    "id" : "0e6fc8dd-b986-4de5-8087-c2e3fd3d2d18",
    "prId" : 7430,
    "comments" : [
      {
        "id" : "cb617fa7-3c57-4ea2-8084-45e73f0073ad",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Do any of those streams need to be explicitly closed?",
        "createdAt" : "2020-09-17T15:52:43Z",
        "updatedAt" : "2020-09-18T14:38:37Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f1adad72-d5e3-478f-926d-72f50e875785",
        "parentId" : "cb617fa7-3c57-4ea2-8084-45e73f0073ad",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good question. It seems that `DarReader#readArchive` close the stream given in argument.\r\n\r\n```scala\r\n\r\n  /** Reads an archive from a ZipInputStream. The stream will be closed by this function! */\r\n  def readArchive(\r\n      name: String,\r\n      darStream: ZipInputStream,\r\n      entrySizeThreshold: Int = EntrySizeThreshold,\r\n  ): Try[Dar[A]] = ...\r\n```",
        "createdAt" : "2020-09-17T16:04:37Z",
        "updatedAt" : "2020-09-18T14:38:37Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e489af38d29d2a55fd0ec4762f661ccb54731bd",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +97,101 @@        SubmissionId.assertFromString(request.submissionId)\n\n    val stream = new ZipInputStream(new ByteArrayInputStream(request.darFile.toByteArray))\n\n    val response = for {"
  }
]