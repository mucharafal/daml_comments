[
  {
    "id" : "dbee1f3e-d1f4-4cb6-b9c0-f9235e5305e8",
    "prId" : 3286,
    "comments" : [
      {
        "id" : "cb2d77eb-01db-4f15-a4a3-43f31a5e42ee",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "These methods are easier to use than before, but we might need to refactor them once more when we add the feature that the Authorizer fills in missing request information.",
        "createdAt" : "2019-10-30T10:34:40Z",
        "updatedAt" : "2019-10-31T15:48:18Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e329a855-12aa-4de7-8174-f90d3729599a",
        "parentId" : "cb2d77eb-01db-4f15-a4a3-43f31a5e42ee",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'll be more than happy to find a way to make this work. Hopefully the component that checks claims and the one that fills in information from the claims to the request can be pulled apart.",
        "createdAt" : "2019-10-30T17:29:54Z",
        "updatedAt" : "2019-10-31T15:48:18Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "20a4635add5f912c6e6c5fd78e06de61846a1171",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@    wrapStream(c => c.notExpired(now()) && c.isPublic, call)\n\n  def requirePublicClaims[Req, Res](call: Req => Future[Res]): Req => Future[Res] =\n    wrapSingleCall(c => c.notExpired(now()) && c.isPublic, call)\n"
  }
]