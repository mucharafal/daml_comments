[
  {
    "id" : "0424bdb1-1738-4b93-aa36-536047bc1a0a",
    "prId" : 4485,
    "comments" : [
      {
        "id" : "be1f71f7-fe5d-4b00-b51d-8a92699bb3f6",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This assumes that the AuthService returns empty claims if the request is not authenticated (missing/invalid token). That leaves the AuthService no way to signal that the user was authenticated, but has no authorization (not even for the public services).\r\n\r\nThis is not a big issue, but we should add a corresponding comment to the docs of `AuthService.decodeMetadata`.",
        "createdAt" : "2020-02-12T20:55:54Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "80237c15-e593-4c21-bfd5-c2151a1ac1a9",
        "parentId" : "be1f71f7-fe5d-4b00-b51d-8a92699bb3f6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I thought you needed at least `ClaimPublic` to access public services.",
        "createdAt" : "2020-02-13T08:04:55Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87ec2b30-391f-44f4-96cf-4ea88a334ae4",
        "parentId" : "be1f71f7-fe5d-4b00-b51d-8a92699bb3f6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If that wasn't the case then I have no idea why the tests are green. :smile: ",
        "createdAt" : "2020-02-13T08:05:54Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "378f57ee-1331-4437-8f4a-5b61acfc4f4a",
        "parentId" : "be1f71f7-fe5d-4b00-b51d-8a92699bb3f6",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "> I thought you needed at least ClaimPublic to access public services.\r\n\r\nThat is correct. The sandbox AuthService will always include at least a `ClaimPublic` for any valid token, but this might not be the case for other AuthService implementations.\r\n\r\nThat's why I thought we should add a note at rc/main/scala/com/digitalasset/ledger/api/auth/AuthService.scala#L26, something like:\r\n\r\n```scala\r\n/**\r\nReturn empty [[Claims]] to reject requests with a UNAUTHENTICATED error status.\r\nReturn [[Claims]] with only a single [[ClaimPublic]] claim to reject all non-public requests with a PERMISSION_DENIED status.\r\nReturn a failed future to reject requests with an INTERNAL error status.\r\n*/\r\n```",
        "createdAt" : "2020-02-17T10:00:46Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "faa3641f-90da-43d5-861f-8d226f5e16bd",
        "parentId" : "be1f71f7-fe5d-4b00-b51d-8a92699bb3f6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Will do, thanks!",
        "createdAt" : "2020-02-17T10:16:14Z",
        "updatedAt" : "2020-02-17T10:18:01Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e560e58a-9765-450f-9244-9998cf964360",
        "parentId" : "be1f71f7-fe5d-4b00-b51d-8a92699bb3f6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/4485/commits/90490b862b1cef7095149d345f5792399fe9ce05\r\nThank you for the clarification!",
        "createdAt" : "2020-02-17T10:18:20Z",
        "updatedAt" : "2020-02-17T10:18:21Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "90490b862b1cef7095149d345f5792399fe9ce05",
    "line" : 31,
    "diffHunk" : "@@ -47,6 +49,14 @@ final class AuthorizationInterceptor(protected val authService: AuthService, ec:\n       FutureConverters\n         .toScala(authService.decodeMetadata(headers))\n         .onComplete {\n+          case Failure(exception) =>\n+            logger.warn(s\"Failed to get claims from request metadata: ${exception.getMessage}\")\n+            call.close(internalAuthenticationError, new Metadata())\n+            new ServerCall.Listener[Nothing]() {}\n+          case Success(Claims.empty) =>\n+            logger.debug(s\"Auth metadata decoded into empty claims, returning UNAUTHENTICATED\")\n+            call.close(Status.UNAUTHENTICATED, new Metadata())\n+            new ServerCall.Listener[Nothing]() {}"
  }
]