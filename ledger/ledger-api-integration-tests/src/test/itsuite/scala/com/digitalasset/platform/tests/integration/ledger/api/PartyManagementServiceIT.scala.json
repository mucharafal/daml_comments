[
  {
    "id" : "dc6c0e11-5d61-4376-afa7-bfd7d5cbfcf4",
    "prId" : 2040,
    "comments" : [
      {
        "id" : "78fd3521-5d81-4af3-bb39-e015e405a1de",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Party allocation may fail with `UNIMPLEMENTED` or `INVALID_ARGUMENT`, see https://github.com/digital-asset/daml/blob/master/ledger-api/grpc-definitions/com/digitalasset/ledger/api/v1/admin/party_management_service.proto#L47. \r\n\r\nThis removed code was responsible for checking that the ledger behaves sensibly in case it returns a gRPC error for `allocateParty`. Are we ok with this test only succeeding for ledgers where `allocatedParty` always succeeds? Could we potentially amend the protobuf description, e.g., to specify that the call may not be rejected because of a missing hint, or because of a malformed description?",
        "createdAt" : "2019-07-09T09:14:24Z",
        "updatedAt" : "2019-07-09T16:08:02Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e0514ed-3157-4631-bfc8-5ec3a2938521",
        "parentId" : "78fd3521-5d81-4af3-bb39-e015e405a1de",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I see. I mostly re-worked the tests within this draft PR because the test was actually failing due to a specific issue I wanted to single out. I would say that we want to check that either all calls return successfully or that all calls return `UNIMPLEMENTED`. It would be probably be best if we could somehow signal the latter situation via a different cue, e.g. a cancelled test.",
        "createdAt" : "2019-07-09T10:40:15Z",
        "updatedAt" : "2019-07-09T16:08:02Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1e810200-9fff-4b63-93ad-8a1769e61f49",
        "parentId" : "78fd3521-5d81-4af3-bb39-e015e405a1de",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/2040/commits/d487cd9a5775aff2e47dd2219b2f9e3859b97677",
        "createdAt" : "2019-07-09T11:59:00Z",
        "updatedAt" : "2019-07-09T16:08:02Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0f1390e92212a18c776376045f349f93a4b1e4a7",
    "line" : 118,
    "diffHunk" : "@@ -163,48 +162,16 @@ class PartyManagementServiceIT\n \n       \"create unique party names when allocating many parties\" in allFixtures { c =>\n         val client = partyManagementClient(c.partyManagementService)\n+        def allocateParty(i: Int) = client.allocateParty(None, Some(s\"Test party $i\"))\n         val N = 100\n-\n         for {\n           initialParties <- client.listKnownParties()\n-          // Note: The following call concurrently creates N parties\n-          resultEs <- Future.traverse(1 to N)(i =>\n-            withGrpcError(client.allocateParty(None, Some(s\"Test party $i\"))))\n+          results <- Future.traverse(1 to N)(allocateParty)\n           finalParties <- client.listKnownParties()\n         } yield {\n-"
  },
  {
    "id" : "40d6d35e-cb0d-44f4-93e0-b8afe95f2618",
    "prId" : 1452,
    "comments" : [
      {
        "id" : "02e0656b-9749-4696-83ee-f8844e892050",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This assertion will not hold when running the test against a long running ledger (as in DAML-on-X). Maybe the only assertion you can make is that the party is not contained in `initialParties` but IS contained in `finalParties`.",
        "createdAt" : "2019-05-29T15:08:25Z",
        "updatedAt" : "2019-06-07T21:22:35Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4853e625-b1f8-4cb9-8c11-3c63eae01e79",
        "parentId" : "02e0656b-9749-4696-83ee-f8844e892050",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Good point, this test is not very good. And in addition to the above, it also needs to be able to deal with ledgers that reject the call to allocate a party.",
        "createdAt" : "2019-05-29T15:23:27Z",
        "updatedAt" : "2019-06-07T21:22:35Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21be6910a5debd0672b0db0815d8993c33b21e53",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,74 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.tests.integration.ledger.api\n+\n+import com.digitalasset.ledger.api.testing.utils.{\n+  AkkaBeforeAndAfterAll,\n+  SuiteResourceManagementAroundAll\n+}\n+import com.digitalasset.ledger.api.v1.admin.party_management_service.PartyManagementServiceGrpc.PartyManagementService\n+import com.digitalasset.ledger.client.services.admin.PartyManagementClient\n+import com.digitalasset.platform.apitesting.MultiLedgerFixture\n+import com.digitalasset.platform.esf.TestExecutionSequencerFactory\n+import org.scalatest._\n+import org.scalatest.concurrent.AsyncTimeLimitedTests\n+import org.scalatest.time.Span\n+import org.scalatest.time.SpanSugar._\n+import scalaz.syntax.tag._\n+\n+@SuppressWarnings(\n+  Array(\n+    \"org.wartremover.warts.Any\",\n+    \"org.wartremover.warts.Option2Iterable\",\n+    \"org.wartremover.warts.StringPlusAny\"\n+  ))\n+class PartyManagementServiceIT\n+    extends AsyncWordSpec\n+    with AkkaBeforeAndAfterAll\n+    with MultiLedgerFixture\n+    with SuiteResourceManagementAroundAll\n+    with AsyncTimeLimitedTests\n+    with TestExecutionSequencerFactory\n+    with Matchers\n+    with Inside\n+    with OptionValues {\n+\n+  override def timeLimit: Span = 15.seconds\n+\n+  override protected def config: Config = Config.default\n+\n+  private def partyManagementClient(stub: PartyManagementService): PartyManagementClient = {\n+    new PartyManagementClient(stub)\n+  }\n+\n+  \"Party Management Service\" when {\n+\n+    \"returning the participant ID\" should {\n+      \"succeed\" in allFixtures { c =>\n+        partyManagementClient(c.partyManagementService)\n+          .getParticipantId()\n+          .map(id => id.unwrap.isEmpty shouldBe false)\n+\n+      }\n+    }\n+\n+    \"allocating parties\" should {\n+      \"list the new party\" in allFixtures { c =>\n+        val client = partyManagementClient(c.partyManagementService)\n+\n+        for {\n+          initialParties <- client.listKnownParties()\n+          result <- client.allocateParty(Some(\"party\"), Some(\"hint\"))\n+          finalParties <- client.listKnownParties()\n+        } yield {\n+          initialParties.length shouldBe 0"
  },
  {
    "id" : "9a377c9e-017d-4bc7-814d-37f769fb84e8",
    "prId" : 1452,
    "comments" : [
      {
        "id" : "b1938e29-dba4-401d-8ece-d86076ab98b0",
        "parentId" : null,
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Could we also have tests\r\n- for missing hint \r\n- for duplicate party names\r\n- for presence and correctness of displayName",
        "createdAt" : "2019-06-07T08:17:47Z",
        "updatedAt" : "2019-06-07T21:22:35Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a092ec64-f972-48d7-866a-7c506cef9746",
        "parentId" : "b1938e29-dba4-401d-8ece-d86076ab98b0",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Improved the IT to:\r\n- Allocate a party with and without a hint\r\n- Allocate a party with and without a display name\r\n- Check the correctness of displayName\r\n- Concurrently allocate 100 new parties, checking whether they all get unique names\r\n- Deal with implementations that return `UNIMPLEMENTED` or `INVALID_ARGUMENT`",
        "createdAt" : "2019-06-07T21:43:07Z",
        "updatedAt" : "2019-06-07T21:43:07Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "21be6910a5debd0672b0db0815d8993c33b21e53",
    "line" : 109,
    "diffHunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.tests.integration.ledger.api\n+\n+import java.util.UUID\n+\n+import com.digitalasset.daml.lf.data.Ref\n+import com.digitalasset.ledger.api.testing.utils.{\n+  AkkaBeforeAndAfterAll,\n+  SuiteResourceManagementAroundAll\n+}\n+import com.digitalasset.ledger.api.v1.admin.party_management_service.PartyManagementServiceGrpc.PartyManagementService\n+import com.digitalasset.ledger.client.services.admin.PartyManagementClient\n+import com.digitalasset.platform.apitesting.MultiLedgerFixture\n+import com.digitalasset.platform.esf.TestExecutionSequencerFactory\n+import org.scalatest._\n+import org.scalatest.concurrent.AsyncTimeLimitedTests\n+import org.scalatest.time.Span\n+import org.scalatest.time.SpanSugar._\n+import scalaz.syntax.tag._\n+\n+@SuppressWarnings(\n+  Array(\n+    \"org.wartremover.warts.Any\",\n+    \"org.wartremover.warts.Option2Iterable\",\n+    \"org.wartremover.warts.StringPlusAny\"\n+  ))\n+class PartyManagementServiceIT\n+    extends AsyncWordSpec\n+    with AkkaBeforeAndAfterAll\n+    with MultiLedgerFixture\n+    with SuiteResourceManagementAroundAll\n+    with AsyncTimeLimitedTests\n+    with TestExecutionSequencerFactory\n+    with Matchers\n+    with Inside\n+    with OptionValues {\n+\n+  override def timeLimit: Span = 15.seconds\n+\n+  override protected def config: Config = Config.default\n+\n+  private def partyManagementClient(stub: PartyManagementService): PartyManagementClient = {\n+    new PartyManagementClient(stub)\n+  }\n+\n+  \"Party Management Service\" when {\n+\n+    \"returning the participant ID\" should {\n+      \"succeed\" in allFixtures { c =>\n+        partyManagementClient(c.partyManagementService)\n+          .getParticipantId()\n+          .map(id => id.unwrap.isEmpty shouldBe false)\n+\n+      }\n+    }\n+\n+    \"allocating parties\" should {"
  }
]