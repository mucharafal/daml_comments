[
  {
    "id" : "8ae41c87-ad2b-49f9-8a97-ed0d20eca43c",
    "prId" : 2241,
    "comments" : [
      {
        "id" : "5d66ffe1-07f9-4a6f-a1b1-8737a616a9a9",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "EXTREEEME!",
        "createdAt" : "2019-07-22T21:02:20Z",
        "updatedAt" : "2019-07-23T07:33:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ca70c52bca9ee552644a904bd17c3cccec9c63ad",
    "line" : 41,
    "diffHunk" : "@@ -1,51 +0,0 @@\n-// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n-// SPDX-License-Identifier: Apache-2.0\n-\n-package com.digitalasset.platform.tests.integration.ledger.api.commands\n-\n-import com.digitalasset.ledger.api.testing.utils.MockMessages.submitRequest\n-import com.digitalasset.ledger.api.testing.utils.{\n-  AkkaBeforeAndAfterAll,\n-  SuiteResourceManagementAroundAll\n-}\n-import com.digitalasset.ledger.api.v1.command_submission_service.{\n-  CommandSubmissionServiceGrpc,\n-  SubmitRequest\n-}\n-import com.digitalasset.platform.apitesting.MultiLedgerFixture\n-import io.grpc.Channel\n-import org.scalatest.concurrent.AsyncTimeLimitedTests\n-import org.scalatest.time.Span\n-import org.scalatest.time.SpanSugar._\n-import org.scalatest.{AsyncWordSpec, Matchers, OptionValues}\n-\n-import scalaz.syntax.tag._\n-\n-class CommandSubmissionServiceIT\n-    extends AsyncWordSpec\n-    with SuiteResourceManagementAroundAll\n-    with AkkaBeforeAndAfterAll\n-    with MultiLedgerFixture\n-    with AsyncTimeLimitedTests\n-    with Matchers\n-    with OptionValues {\n-\n-  override def timeLimit: Span = scaled(5.seconds)\n-\n-  override protected def config: Config = Config.default\n-\n-  private def client(channel: Channel) = CommandSubmissionServiceGrpc.stub(channel)\n-\n-  \"Command Submission Service\" when {\n-\n-    \"commands arrive with extreme TTLs\" should {"
  }
]