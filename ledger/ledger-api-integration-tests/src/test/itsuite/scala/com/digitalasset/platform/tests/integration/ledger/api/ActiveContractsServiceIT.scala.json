[
  {
    "id" : "877d9fb1-e6ba-45ef-a544-85b53246eac0",
    "prId" : 2241,
    "comments" : [
      {
        "id" : "db56786f-a963-4096-97ae-32c857d84034",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Seems quite a change from the previous semantics, is this wanted?",
        "createdAt" : "2019-07-22T20:58:28Z",
        "updatedAt" : "2019-07-23T07:33:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5cab39a-8d9a-4675-b055-8fba19f8f322",
        "parentId" : "db56786f-a963-4096-97ae-32c857d84034",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thanks. Reverted to the old check in 68935e3a3.",
        "createdAt" : "2019-07-23T07:33:59Z",
        "updatedAt" : "2019-07-23T07:34:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca70c52bca9ee552644a904bd17c3cccec9c63ad",
    "line" : null,
    "diffHunk" : "@@ -224,41 +236,46 @@ class ActiveContractsServiceIT\n         def extractOffset(snapshot: Seq[GetActiveContractsResponse]) =\n           snapshot.last.offset\n \n+        val wfid1 = testIds.testWorkflowId(\"workflow1\")\n+        val wfid2 = testIds.testWorkflowId(\"workflow2\")\n         val resultsF = for {\n           _ <- submitRequest(\n             ctx,\n-            testCommands.toWait(\n-              testCommands.buildRequest(\n-                ctx.ledgerId,\n-                \"commandId1\",\n-                Seq(testCommands.createWithOperator(templateIds.dummy, \"Alice\")),\n-                \"Alice\")))\n+            testCommands.buildRequest(\n+              ctx.ledgerId,\n+              commandId = uniqueCmdId,\n+              Seq(testCommands.createWithOperator(templateIds.dummy, \"Alice\")),\n+              \"Alice\",\n+              workflowId = wfid1)\n+          )\n           responses1 <- waitForActiveContracts(\n             ctx.acsService,\n             ctx.ledgerId,\n+            Set(wfid1),\n             Map(\"Alice\" -> Filters(None)),\n             1)\n           offset = extractOffset(responses1)\n           _ <- submitRequest(\n             ctx,\n-            testCommands.toWait(\n-              testCommands.buildRequest(\n-                ctx.ledgerId,\n-                \"commandId2\",\n-                Seq(testCommands.createWithOperator(templateIds.dummyWithParam, \"Alice\")),\n-                \"Alice\"))\n+            testCommands.buildRequest(\n+              ctx.ledgerId,\n+              commandId = uniqueCmdId,\n+              Seq(testCommands.createWithOperator(templateIds.dummyWithParam, \"Alice\")),\n+              \"Alice\",\n+              workflowId = wfid2)\n           )\n           responses2 <- transactionClient(ctx)\n             .getTransactions(\n               LedgerOffset(Absolute(offset)),\n               None,\n               TransactionFilter(Map(\"Alice\" -> Filters(None))))\n+            .filter(_.workflowId == wfid2)\n             .take(1)\n             .runWith(Sink.seq)\n         } yield responses2\n \n         resultsF map { responses =>\n-          responses.head.commandId should equal(\"commandId2\")\n+          responses.head.workflowId shouldEqual wfid2"
  },
  {
    "id" : "6d8fee1e-b516-4763-b841-7e1b1c9501ca",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "653a5d91-0597-4254-bd86-dbcec615c420",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "```suggestion\r\n          domain.LedgerId(s\"not${context.ledgerId.unwrap}\"),\r\n```",
        "createdAt" : "2019-05-31T12:16:47Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "53b46b45-757f-426d-bf0d-4bfb61580f88",
        "parentId" : "653a5d91-0597-4254-bd86-dbcec615c420",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "it's better to use the macro style for string concatenation. I see it occurs in other places, please change those too.",
        "createdAt" : "2019-05-31T12:17:05Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "636720b2-758a-4d29-9277-16bbadb7560c",
        "parentId" : "653a5d91-0597-4254-bd86-dbcec615c420",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "Done everywhere.",
        "createdAt" : "2019-05-31T12:26:35Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : null,
    "diffHunk" : "@@ -102,15 +96,17 @@ class ActiveContractsServiceIT\n       case ce @ CreatedEvent(_, _, Some(`template`), _, _, _) => ce\n     }.size should equal(occurrence)\n \n-  def threeCommands(ledgerId: String, commandId: String): SubmitAndWaitRequest =\n+  def threeCommands(ledgerId: domain.LedgerId, commandId: String): SubmitAndWaitRequest =\n     super.dummyCommands(ledgerId, commandId, \"Alice\").toWait\n \n   private def filter = TransactionFilter(Map(config.parties.head -> Filters()))\n \n   \"Active Contract Set Service\" when {\n     \"asked for active contracts\" should {\n       \"fail with the expected status on a ledger Id mismatch\" in allFixtures { context =>\n-        client(context, UUID.randomUUID().toString)\n+        new ActiveContractSetClient(\n+          domain.LedgerId(\"not\" + context.ledgerId.unwrap),"
  }
]