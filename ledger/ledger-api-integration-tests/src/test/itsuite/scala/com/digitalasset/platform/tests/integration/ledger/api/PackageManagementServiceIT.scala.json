[
  {
    "id" : "d7dd4900-caab-4d11-88d1-9c569351c27b",
    "prId" : 1610,
    "comments" : [
      {
        "id" : "126ce8cc-f23a-48e7-be6a-2dbdd6d802af",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I don't think we should make assumptions as to which packages are already available on the ledger at the time of the test run. Eventually this test is probably intended to run against running ledgers, where this assertion might not hold.\r\n\r\n@dajmaki: If I understand how we intend to test X ledgers correctly, this test will probably only succeed on the first run, and fail subsequently, because the test package has already been deployed on the first run of the test?",
        "createdAt" : "2019-06-13T08:25:49Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6711f670-c4c0-4fd5-b917-a71b9b9f1fd5",
        "parentId" : "126ce8cc-f23a-48e7-be6a-2dbdd6d802af",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "I have changed the test to not make any assertions about the initial state of the ledger, and to be independent of already uploaded packages.",
        "createdAt" : "2019-06-14T13:26:40Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e866b02c0df2f20dcee08439e1105fe577f0609",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,117 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.tests.integration.ledger.api\n+\n+import java.nio.file.{Files, Paths}\n+\n+import com.digitalasset.ledger.api.testing.utils.{\n+  AkkaBeforeAndAfterAll,\n+  IsStatusException,\n+  SuiteResourceManagementAroundAll\n+}\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageDetails\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageManagementServiceGrpc.PackageManagementService\n+import com.digitalasset.ledger.api.v1.commands.CreateCommand\n+import com.digitalasset.ledger.api.v1.transaction_filter.{Filters, TransactionFilter}\n+import com.digitalasset.ledger.api.v1.value.{Identifier, Record, RecordField}\n+import com.digitalasset.ledger.client.services.admin.PackageManagementClient\n+import com.digitalasset.platform.apitesting.LedgerContextExtensions._\n+import com.digitalasset.platform.apitesting.MultiLedgerFixture\n+import com.digitalasset.platform.participant.util.ValueConversions._\n+import com.google.protobuf.ByteString\n+import io.grpc.Status\n+import org.scalatest.{AsyncFreeSpec, Matchers}\n+import org.scalatest.Inspectors._\n+import org.scalatest.concurrent.AsyncTimeLimitedTests\n+\n+class PackageManagementServiceIT\n+    extends AsyncFreeSpec\n+    with AkkaBeforeAndAfterAll\n+    with MultiLedgerFixture\n+    with SuiteResourceManagementAroundAll\n+    with AsyncTimeLimitedTests\n+    with Matchers {\n+  override protected def config: Config = Config.default.copy(darFiles = Nil)\n+\n+  private def packageManagementService(stub: PackageManagementService): PackageManagementClient =\n+    new PackageManagementClient(stub)\n+\n+  /**\n+    * Given a list of DAML-LF packages, guesses the package ID of the test package.\n+    * Note: the test DAR file contains 3 packages: the test package, stdlib, and daml-prim.\n+    * The test package should be by far the smallest one, so we just sort the packages by size\n+    * to avoid having to parse and inspect package details.\n+    */\n+  private def findTestPackageId(packages: Seq[PackageDetails]): String =\n+    packages\n+      .sortBy(_.packageSize)\n+      .headOption\n+      .getOrElse(fail(\"List of packages is empty\"))\n+      .packageId\n+\n+  \"should accept packages\" in allFixtures { ctx =>\n+    val darFile = Files.readAllBytes(Paths.get(\"ledger/sandbox/Test.dar\"))\n+    val client = packageManagementService(ctx.packageManagementService)\n+    for {\n+      initialPackages <- client.listKnownPackages()\n+      _ <- client.uploadDarFile(ByteString.copyFrom(darFile))\n+      finalPackages <- client.listKnownPackages()\n+    } yield {\n+      initialPackages should have size 0"
  },
  {
    "id" : "9fedf450-c21e-43f1-a71d-2be09b1e3700",
    "prId" : 1610,
    "comments" : [
      {
        "id" : "741cfb21-e7e6-43a1-b902-86da291d5dd4",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Same here. I think the only assumption we can make is that `initialPackages` doesn't contain the test package, but `finalPackages` does.",
        "createdAt" : "2019-06-13T08:27:55Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e866b02c0df2f20dcee08439e1105fe577f0609",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,117 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.tests.integration.ledger.api\n+\n+import java.nio.file.{Files, Paths}\n+\n+import com.digitalasset.ledger.api.testing.utils.{\n+  AkkaBeforeAndAfterAll,\n+  IsStatusException,\n+  SuiteResourceManagementAroundAll\n+}\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageDetails\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageManagementServiceGrpc.PackageManagementService\n+import com.digitalasset.ledger.api.v1.commands.CreateCommand\n+import com.digitalasset.ledger.api.v1.transaction_filter.{Filters, TransactionFilter}\n+import com.digitalasset.ledger.api.v1.value.{Identifier, Record, RecordField}\n+import com.digitalasset.ledger.client.services.admin.PackageManagementClient\n+import com.digitalasset.platform.apitesting.LedgerContextExtensions._\n+import com.digitalasset.platform.apitesting.MultiLedgerFixture\n+import com.digitalasset.platform.participant.util.ValueConversions._\n+import com.google.protobuf.ByteString\n+import io.grpc.Status\n+import org.scalatest.{AsyncFreeSpec, Matchers}\n+import org.scalatest.Inspectors._\n+import org.scalatest.concurrent.AsyncTimeLimitedTests\n+\n+class PackageManagementServiceIT\n+    extends AsyncFreeSpec\n+    with AkkaBeforeAndAfterAll\n+    with MultiLedgerFixture\n+    with SuiteResourceManagementAroundAll\n+    with AsyncTimeLimitedTests\n+    with Matchers {\n+  override protected def config: Config = Config.default.copy(darFiles = Nil)\n+\n+  private def packageManagementService(stub: PackageManagementService): PackageManagementClient =\n+    new PackageManagementClient(stub)\n+\n+  /**\n+    * Given a list of DAML-LF packages, guesses the package ID of the test package.\n+    * Note: the test DAR file contains 3 packages: the test package, stdlib, and daml-prim.\n+    * The test package should be by far the smallest one, so we just sort the packages by size\n+    * to avoid having to parse and inspect package details.\n+    */\n+  private def findTestPackageId(packages: Seq[PackageDetails]): String =\n+    packages\n+      .sortBy(_.packageSize)\n+      .headOption\n+      .getOrElse(fail(\"List of packages is empty\"))\n+      .packageId\n+\n+  \"should accept packages\" in allFixtures { ctx =>\n+    val darFile = Files.readAllBytes(Paths.get(\"ledger/sandbox/Test.dar\"))\n+    val client = packageManagementService(ctx.packageManagementService)\n+    for {\n+      initialPackages <- client.listKnownPackages()\n+      _ <- client.uploadDarFile(ByteString.copyFrom(darFile))\n+      finalPackages <- client.listKnownPackages()\n+    } yield {\n+      initialPackages should have size 0\n+      finalPackages should have size 3 // package, stdlib, daml-prim"
  },
  {
    "id" : "e2bcdce7-a655-4a73-8914-29d6e252b167",
    "prId" : 1610,
    "comments" : [
      {
        "id" : "054d8474-1b4c-40c8-95e0-a3fb690107bd",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Unfortunately this method of detecting the \"test\" package won't work on ledgers that are not in our control (i.e. any running X implementation that this test is run against).",
        "createdAt" : "2019-06-13T08:29:56Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e866b02c0df2f20dcee08439e1105fe577f0609",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,117 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.tests.integration.ledger.api\n+\n+import java.nio.file.{Files, Paths}\n+\n+import com.digitalasset.ledger.api.testing.utils.{\n+  AkkaBeforeAndAfterAll,\n+  IsStatusException,\n+  SuiteResourceManagementAroundAll\n+}\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageDetails\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageManagementServiceGrpc.PackageManagementService\n+import com.digitalasset.ledger.api.v1.commands.CreateCommand\n+import com.digitalasset.ledger.api.v1.transaction_filter.{Filters, TransactionFilter}\n+import com.digitalasset.ledger.api.v1.value.{Identifier, Record, RecordField}\n+import com.digitalasset.ledger.client.services.admin.PackageManagementClient\n+import com.digitalasset.platform.apitesting.LedgerContextExtensions._\n+import com.digitalasset.platform.apitesting.MultiLedgerFixture\n+import com.digitalasset.platform.participant.util.ValueConversions._\n+import com.google.protobuf.ByteString\n+import io.grpc.Status\n+import org.scalatest.{AsyncFreeSpec, Matchers}\n+import org.scalatest.Inspectors._\n+import org.scalatest.concurrent.AsyncTimeLimitedTests\n+\n+class PackageManagementServiceIT\n+    extends AsyncFreeSpec\n+    with AkkaBeforeAndAfterAll\n+    with MultiLedgerFixture\n+    with SuiteResourceManagementAroundAll\n+    with AsyncTimeLimitedTests\n+    with Matchers {\n+  override protected def config: Config = Config.default.copy(darFiles = Nil)\n+\n+  private def packageManagementService(stub: PackageManagementService): PackageManagementClient =\n+    new PackageManagementClient(stub)\n+\n+  /**\n+    * Given a list of DAML-LF packages, guesses the package ID of the test package.\n+    * Note: the test DAR file contains 3 packages: the test package, stdlib, and daml-prim.\n+    * The test package should be by far the smallest one, so we just sort the packages by size\n+    * to avoid having to parse and inspect package details.\n+    */\n+  private def findTestPackageId(packages: Seq[PackageDetails]): String ="
  },
  {
    "id" : "e98dfc3f-4b98-4ff5-8615-51c8ae260415",
    "prId" : 1610,
    "comments" : [
      {
        "id" : "b4b877ad-3906-4969-b7c1-d0c32b702fb7",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Similar to [`TransactionServiceIT`](https://github.com/digital-asset/daml/blob/master/ledger/ledger-api-integration-tests/src/test/itsuite/scala/com/digitalasset/platform/tests/integration/ledger/api/TransactionServiceIT.scala#L82), we should start using a randomly generated run-suffix for command ids to allow running the test suite multiple times against the same running ledger. Unfortunately this is currently a very manual process of adding the `runSuffix` to all command IDs. Ideally we can do this behind the scenes by a uniform way of sending commands in tests, but alas we don't have that yet.",
        "createdAt" : "2019-06-13T08:33:06Z",
        "updatedAt" : "2019-06-19T11:34:16Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e866b02c0df2f20dcee08439e1105fe577f0609",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,117 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.platform.tests.integration.ledger.api\n+\n+import java.nio.file.{Files, Paths}\n+\n+import com.digitalasset.ledger.api.testing.utils.{\n+  AkkaBeforeAndAfterAll,\n+  IsStatusException,\n+  SuiteResourceManagementAroundAll\n+}\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageDetails\n+import com.digitalasset.ledger.api.v1.admin.package_management_service.PackageManagementServiceGrpc.PackageManagementService\n+import com.digitalasset.ledger.api.v1.commands.CreateCommand\n+import com.digitalasset.ledger.api.v1.transaction_filter.{Filters, TransactionFilter}\n+import com.digitalasset.ledger.api.v1.value.{Identifier, Record, RecordField}\n+import com.digitalasset.ledger.client.services.admin.PackageManagementClient\n+import com.digitalasset.platform.apitesting.LedgerContextExtensions._\n+import com.digitalasset.platform.apitesting.MultiLedgerFixture\n+import com.digitalasset.platform.participant.util.ValueConversions._\n+import com.google.protobuf.ByteString\n+import io.grpc.Status\n+import org.scalatest.{AsyncFreeSpec, Matchers}\n+import org.scalatest.Inspectors._\n+import org.scalatest.concurrent.AsyncTimeLimitedTests\n+\n+class PackageManagementServiceIT\n+    extends AsyncFreeSpec\n+    with AkkaBeforeAndAfterAll\n+    with MultiLedgerFixture\n+    with SuiteResourceManagementAroundAll\n+    with AsyncTimeLimitedTests\n+    with Matchers {\n+  override protected def config: Config = Config.default.copy(darFiles = Nil)\n+\n+  private def packageManagementService(stub: PackageManagementService): PackageManagementClient =\n+    new PackageManagementClient(stub)\n+\n+  /**\n+    * Given a list of DAML-LF packages, guesses the package ID of the test package.\n+    * Note: the test DAR file contains 3 packages: the test package, stdlib, and daml-prim.\n+    * The test package should be by far the smallest one, so we just sort the packages by size\n+    * to avoid having to parse and inspect package details.\n+    */\n+  private def findTestPackageId(packages: Seq[PackageDetails]): String =\n+    packages\n+      .sortBy(_.packageSize)\n+      .headOption\n+      .getOrElse(fail(\"List of packages is empty\"))\n+      .packageId\n+\n+  \"should accept packages\" in allFixtures { ctx =>\n+    val darFile = Files.readAllBytes(Paths.get(\"ledger/sandbox/Test.dar\"))\n+    val client = packageManagementService(ctx.packageManagementService)\n+    for {\n+      initialPackages <- client.listKnownPackages()\n+      _ <- client.uploadDarFile(ByteString.copyFrom(darFile))\n+      finalPackages <- client.listKnownPackages()\n+    } yield {\n+      initialPackages should have size 0\n+      finalPackages should have size 3 // package, stdlib, daml-prim\n+      forAll(finalPackages) { p =>\n+        p.packageSize > 0 shouldBe true\n+      }\n+    }\n+  }\n+\n+  \"should accept duplicate packages\" in allFixtures { ctx =>\n+    val darFile = Files.readAllBytes(Paths.get(\"ledger/sandbox/Test.dar\"))\n+    val client = packageManagementService(ctx.packageManagementService)\n+    for {\n+      _ <- client.uploadDarFile(ByteString.copyFrom(darFile))\n+      initialPackages <- client.listKnownPackages()\n+      _ <- client.uploadDarFile(ByteString.copyFrom(darFile))\n+      finalPackages <- client.listKnownPackages()\n+    } yield {\n+      initialPackages shouldBe finalPackages\n+    }\n+  }\n+\n+  \"fail with the expected status on an invalid upload\" in allFixtures { ctx =>\n+    packageManagementService(ctx.packageManagementService)\n+      .uploadDarFile(ByteString.EMPTY)\n+      .failed map { ex =>\n+      IsStatusException(Status.INVALID_ARGUMENT.getCode)(ex)\n+    }\n+  }\n+\n+  \"should accept commands using the uploaded package\" in allFixtures { ctx =>\n+    val darFile = Files.readAllBytes(Paths.get(\"ledger/sandbox/Test.dar\"))\n+    val party = \"operator\"\n+    val createArg = Record(fields = List(RecordField(\"operator\", party.asParty)))\n+    def createCmd(packageId: String) =\n+      CreateCommand(Some(Identifier(packageId, \"\", \"Test\", \"Dummy\")), Some(createArg)).wrap\n+    val filter = TransactionFilter(Map(party -> Filters.defaultInstance))\n+    val client = packageManagementService(ctx.packageManagementService)\n+\n+    for {\n+      _ <- client.uploadDarFile(ByteString.copyFrom(darFile))\n+      packages <- client.listKnownPackages()\n+      packageId = findTestPackageId(packages)\n+      createTx <- ctx.testingHelpers.submitAndListenForSingleResultOfCommand(\n+        ctx.testingHelpers\n+          .submitRequestWithId(\"create\")"
  }
]