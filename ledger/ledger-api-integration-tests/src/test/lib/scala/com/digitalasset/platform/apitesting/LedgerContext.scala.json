[
  {
    "id" : "faa40a75-80c2-4317-875b-05c9b543d4b6",
    "prId" : 3187,
    "comments" : [
      {
        "id" : "c608dbe0-acb7-4e6f-b00d-a0fd6af9465d",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n        metadata.put(auth, s\"Bearer $headerValue\")\r\n```\r\nShould it not be like this?",
        "createdAt" : "2019-10-16T13:54:46Z",
        "updatedAt" : "2019-10-17T09:25:40Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b38b375e-2111-4429-ad6c-e12c47f8d8c8",
        "parentId" : "c608dbe0-acb7-4e6f-b00d-a0fd6af9465d",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "`AuthServiceStatic` does not require the `Bearer` prefix. To use the above change, I'd need to change\r\n```\r\nAuthServiceStatic({\r\n  case \"Alice\" => Claims(...)\r\n})\r\n```\r\nto\r\n```\r\nAuthServiceStatic({\r\n  case \"Bearer Alice\" => Claims(...)\r\n})\r\n```\r\n(at the top of the same file)\r\n\r\nUsing an authorization type (\"Basic\" or \"Bearer\") does not seem to be strictly necessary (https://tools.ietf.org/html/rfc7235#section-4.2), but I'll change it anyway.",
        "createdAt" : "2019-10-16T14:05:16Z",
        "updatedAt" : "2019-10-17T09:25:40Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "65a5065c51e4501f7ea27dddccafbd13acfad00c",
    "line" : 42,
    "diffHunk" : "@@ -75,6 +76,38 @@ trait LedgerContext {\n     * */\n   def reset()(implicit system: ActorSystem, mat: Materializer): Future[LedgerContext]\n \n+  /**\n+    *  Return a copy of the current ledger context, where all gRPC calls use the given call credentials.\n+    *  Use for tests that need to override call credentials on a per-test basis.\n+    *  @return the new LedgerContext\n+    */\n+  def withCallCredentials(credentials: CallCredentials): LedgerContext\n+\n+  /**\n+    *  Return a copy of the current ledger context, where all gRPC calls use the given Authorization header.\n+    *  Use for tests that need to override call credentials on a per-test basis.\n+    *  @return the new LedgerContext\n+    */\n+  def withAuthorizationHeader(headerValue: String): LedgerContext = {\n+    val auth = Metadata.Key.of(\"Authorization\", Metadata.ASCII_STRING_MARSHALLER)\n+\n+    val callCredentials = new CallCredentials {\n+      override def applyRequestMetadata(\n+          requestInfo: CallCredentials.RequestInfo,\n+          appExecutor: Executor,\n+          applier: CallCredentials.MetadataApplier): Unit = {\n+        val metadata = new Metadata\n+        metadata.put(auth, headerValue)"
  },
  {
    "id" : "99279bb3-ac37-439b-8891-6e3ca436a19d",
    "prId" : 1434,
    "comments" : [
      {
        "id" : "599392b2-2444-4a75-8917-7103f6ff9f04",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "wrong concurrency semantics. I mentioned this already in #1400. Why do you have it in this PR too?",
        "createdAt" : "2019-05-29T07:42:35Z",
        "updatedAt" : "2019-06-06T11:04:18Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d930602-a745-4b86-8e8e-f4b2ca2840a5",
        "parentId" : "599392b2-2444-4a75-8917-7103f6ff9f04",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "One PR depends on another, so one is the subset of another. I will send them as non-draft PRs one by one.",
        "createdAt" : "2019-05-29T08:17:41Z",
        "updatedAt" : "2019-06-06T11:04:18Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cca8d0b7a85789e1d998980512199715f3dba9e7",
    "line" : null,
    "diffHunk" : "@@ -169,15 +178,39 @@ object LedgerContext {\n \n     require(esf != null, \"ExecutionSequencerFactory must not be null.\")\n \n-    def ledgerId: String =\n+    var cachedLedgerId: Option[domain.LedgerId] = None\n+\n+    def ledgerId: domain.LedgerId =\n       configuredLedgerId match {\n-        case LedgerIdMode.Static(id) => id.unwrap\n+        case LedgerIdMode.Static(id) => id\n         case LedgerIdMode.Dynamic() =>\n-          LedgerIdentityServiceGrpc\n-            .blockingStub(channel)\n-            .getLedgerIdentity(GetLedgerIdentityRequest())\n-            .ledgerId\n+          cachedLedgerId.synchronized {"
  },
  {
    "id" : "837f6238-9d89-48b0-b55d-85ed754ab6f8",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "84a519ea-cfbf-44d8-9a74-1bfde84c97c5",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "make it `private`",
        "createdAt" : "2019-05-27T15:54:49Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cda78841-b5ab-4782-bc68-bfd73860c6d1",
        "parentId" : "84a519ea-cfbf-44d8-9a74-1bfde84c97c5",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-05-29T10:47:08Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : null,
    "diffHunk" : "@@ -169,15 +175,39 @@ object LedgerContext {\n \n     require(esf != null, \"ExecutionSequencerFactory must not be null.\")\n \n-    def ledgerId: String =\n+    var cachedLedgerId: Option[domain.LedgerId] = None"
  },
  {
    "id" : "7d16c432-f9d8-4200-8f1c-5e291ecc589f",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "19ed0991-0d39-4c7b-806e-c0228de7b934",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "this is wrong. You are using the very object as a lock what you are changing!",
        "createdAt" : "2019-05-27T15:57:19Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7bff043c-3d6a-4e20-9091-f9efa786c97f",
        "parentId" : "19ed0991-0d39-4c7b-806e-c0228de7b934",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-05-29T10:47:13Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : null,
    "diffHunk" : "@@ -169,15 +175,39 @@ object LedgerContext {\n \n     require(esf != null, \"ExecutionSequencerFactory must not be null.\")\n \n-    def ledgerId: String =\n+    var cachedLedgerId: Option[domain.LedgerId] = None\n+\n+    def ledgerId: domain.LedgerId =\n       configuredLedgerId match {\n-        case LedgerIdMode.Static(id) => id.unwrap\n+        case LedgerIdMode.Static(id) => id\n         case LedgerIdMode.Dynamic() =>\n-          LedgerIdentityServiceGrpc\n-            .blockingStub(channel)\n-            .getLedgerIdentity(GetLedgerIdentityRequest())\n-            .ledgerId\n+          cachedLedgerId.synchronized {"
  },
  {
    "id" : "c185c18d-7732-4ac5-868d-ba62acdcda23",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "c24a7d8b-3dd7-491d-8712-443681e9b3fb",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "same problem as above",
        "createdAt" : "2019-05-27T15:58:55Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : null,
    "diffHunk" : "@@ -169,15 +175,39 @@ object LedgerContext {\n \n     require(esf != null, \"ExecutionSequencerFactory must not be null.\")\n \n-    def ledgerId: String =\n+    var cachedLedgerId: Option[domain.LedgerId] = None\n+\n+    def ledgerId: domain.LedgerId =\n       configuredLedgerId match {\n-        case LedgerIdMode.Static(id) => id.unwrap\n+        case LedgerIdMode.Static(id) => id\n         case LedgerIdMode.Dynamic() =>\n-          LedgerIdentityServiceGrpc\n-            .blockingStub(channel)\n-            .getLedgerIdentity(GetLedgerIdentityRequest())\n-            .ledgerId\n+          cachedLedgerId.synchronized {\n+            cachedLedgerId match {\n+              case Some(id) =>\n+                id\n+              case None =>\n+                val id =\n+                  domain.LedgerId(\n+                  LedgerIdentityServiceGrpc\n+                    .blockingStub(channel)\n+                    .getLedgerIdentity(GetLedgerIdentityRequest())\n+                    .ledgerId)\n+                cachedLedgerId = Some(id)\n+                id\n+            }\n+          }\n+      }\n+\n+    override def invalidateCaches(): Unit = {\n+      cachedLedgerId.synchronized {"
  },
  {
    "id" : "030a1cb9-eb50-4d86-8e4d-4daa4323108b",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "4cf957a2-993d-410d-ae05-e865c0008bfe",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "making a blocking call while holding a lock is not a good idea in general. I'd rather have an async behaviour and cache the `Promise` instead stored in an `AtomicRefence`",
        "createdAt" : "2019-05-27T16:01:19Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : null,
    "diffHunk" : "@@ -169,15 +175,39 @@ object LedgerContext {\n \n     require(esf != null, \"ExecutionSequencerFactory must not be null.\")\n \n-    def ledgerId: String =\n+    var cachedLedgerId: Option[domain.LedgerId] = None\n+\n+    def ledgerId: domain.LedgerId =\n       configuredLedgerId match {\n-        case LedgerIdMode.Static(id) => id.unwrap\n+        case LedgerIdMode.Static(id) => id\n         case LedgerIdMode.Dynamic() =>\n-          LedgerIdentityServiceGrpc\n-            .blockingStub(channel)\n-            .getLedgerIdentity(GetLedgerIdentityRequest())\n-            .ledgerId\n+          cachedLedgerId.synchronized {\n+            cachedLedgerId match {\n+              case Some(id) =>\n+                id\n+              case None =>\n+                val id =\n+                  domain.LedgerId(\n+                  LedgerIdentityServiceGrpc\n+                    .blockingStub(channel)"
  },
  {
    "id" : "ed49e6d5-f29e-4a46-9544-9385df0b5779",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "f62c11a6-0b21-4079-9b1a-4e03db2899a4",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "we should drop this I think and just write: `val ledgerId ..` instead. There is no caching anymore here, just initialisation",
        "createdAt" : "2019-05-31T12:25:29Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "831dbc3b-a14d-4f03-bf40-404db25d5472",
        "parentId" : "f62c11a6-0b21-4079-9b1a-4e03db2899a4",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "Ah, good to know that overriding `def` with `val` is fine!",
        "createdAt" : "2019-05-31T13:01:52Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : null,
    "diffHunk" : "@@ -169,16 +151,49 @@ object LedgerContext {\n \n     require(esf != null, \"ExecutionSequencerFactory must not be null.\")\n \n-    def ledgerId: String =\n+    private val logger = LoggerFactory.getLogger(this.getClass)\n+\n+    val cachedLedgerId: domain.LedgerId ="
  },
  {
    "id" : "4c8671c0-ef16-4061-898b-8a06f1379e35",
    "prId" : 1400,
    "comments" : [
      {
        "id" : "e644ffed-e8eb-4f43-ab80-4a1a5c2ad36c",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "👍 ",
        "createdAt" : "2019-05-31T12:26:16Z",
        "updatedAt" : "2019-06-03T08:59:27Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "455e80a9ff9a1491c4764e344c9b5378f22b3abb",
    "line" : 170,
    "diffHunk" : "@@ -169,16 +151,49 @@ object LedgerContext {\n \n     require(esf != null, \"ExecutionSequencerFactory must not be null.\")\n \n-    def ledgerId: String =\n+    private val logger = LoggerFactory.getLogger(this.getClass)\n+\n+    val cachedLedgerId: domain.LedgerId =\n       configuredLedgerId match {\n-        case LedgerIdMode.Static(id) => id.unwrap\n+        case LedgerIdMode.Static(id) => id\n         case LedgerIdMode.Dynamic() =>\n-          LedgerIdentityServiceGrpc\n-            .blockingStub(channel)\n-            .getLedgerIdentity(GetLedgerIdentityRequest())\n-            .ledgerId\n+          domain.LedgerId(\n+            LedgerIdentityServiceGrpc\n+              .blockingStub(channel)\n+              .getLedgerIdentity(GetLedgerIdentityRequest())\n+              .ledgerId)\n       }\n \n+    def ledgerId: domain.LedgerId = cachedLedgerId\n+\n+    final def reset()(implicit system: ActorSystem, mat: Materializer): Future[LedgerContext] = {\n+      implicit val ec: ExecutionContext = mat.executionContext\n+      def waitForNewLedger(retries: Int): Future[domain.LedgerId] =\n+        if (retries <= 0)\n+          Future.failed(new RuntimeException(\"waitForNewLedger: out of retries\"))\n+        else {\n+          ledgerIdentityService\n+            .getLedgerIdentity(GetLedgerIdentityRequest())\n+            .flatMap { resp =>\n+              Future.successful(domain.LedgerId(resp.ledgerId))\n+            }\n+            .recoverWith {\n+              case _: StatusRuntimeException =>\n+                logger.debug(\n+                  \"waitForNewLedger: retrying identity request in 1 second. {} retries remain\",\n+                  retries - 1)\n+                pattern.after(1.seconds, system.scheduler)(waitForNewLedger(retries - 1))\n+              case t: Throwable =>\n+                logger.warn(\"waitForNewLedger: failed to reconnect!\")\n+                throw t\n+            }\n+        }\n+      for {\n+        _ <- resetService.reset(ResetRequest(ledgerId.unwrap))\n+        newLedgerId <- waitForNewLedger(10)\n+      } yield SingleChannelContext(channel, LedgerIdMode.Static(newLedgerId), packageIds)"
  }
]