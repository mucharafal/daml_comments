[
  {
    "id" : "62d9bb2e-8baf-470b-8919-ef8f8d0c7942",
    "prId" : 1171,
    "comments" : [
      {
        "id" : "bb547c24-c15b-4cff-aa36-ae20c80ba629",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "üëç ",
        "createdAt" : "2019-05-16T08:12:24Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0375ea95bfb713575e4b4fa54cb2011cbc90f244",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +59,63 @@  def createRemoteApiProxyResource(config: PlatformApplications.Config)(\n      implicit esf: ExecutionSequencerFactory): Resource[LedgerContext.SingleChannelContext] = {\n    require(config.remoteApiEndpoint.isDefined, \"config.remoteApiEndpoint has to be set\")\n    val endpoint = config.remoteApiEndpoint.get\n    val packageIds = config.darFiles.map(getPackageIdOrThrow)"
  },
  {
    "id" : "9fc649fe-b5dc-483d-8d9b-388053fd9414",
    "prId" : 1171,
    "comments" : [
      {
        "id" : "9feddee8-458c-4427-b232-eacf086b93c6",
        "parentId" : null,
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "you could assert on the `host` and `port` too",
        "createdAt" : "2019-05-20T15:27:09Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0653b136-6dab-48e9-8e01-99fd91339ea1",
        "parentId" : "9feddee8-458c-4427-b232-eacf086b93c6",
        "author" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "body" : "Why? They are not `Option[*]`, hence should have meaningful values. In worst case we'd have 0 as port and empty string as host, which will just make it fail at runtime.",
        "createdAt" : "2019-05-22T08:48:27Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gleber-da",
          "name" : "gleber",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/34243031?u=682c8d513afbef14cd3f71d93040a37500b5b2d0&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "19b1984d-f55d-4154-9f07-4fe1ec93efe1",
        "parentId" : "9feddee8-458c-4427-b232-eacf086b93c6",
        "author" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "body" : "`host` can be empty and `port` can be negative. It's nit-picking, I just thought I mention it.",
        "createdAt" : "2019-05-27T14:38:38Z",
        "updatedAt" : "2019-05-28T09:31:39Z",
        "lastEditedBy" : {
          "login" : "gabor-aranyossy",
          "name" : "Gabor Aranyossy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/29858875?u=03b5eca13ed32e74056ee216f2def12e249bcfed&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0375ea95bfb713575e4b4fa54cb2011cbc90f244",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +59,63 @@  def createRemoteApiProxyResource(config: PlatformApplications.Config)(\n      implicit esf: ExecutionSequencerFactory): Resource[LedgerContext.SingleChannelContext] = {\n    require(config.remoteApiEndpoint.isDefined, \"config.remoteApiEndpoint has to be set\")\n    val endpoint = config.remoteApiEndpoint.get\n    val packageIds = config.darFiles.map(getPackageIdOrThrow)"
  }
]