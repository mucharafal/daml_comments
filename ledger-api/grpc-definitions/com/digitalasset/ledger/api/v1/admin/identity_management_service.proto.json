[
  {
    "id" : "42816ba5-52b8-4e46-a02d-3714387f6067",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "b51e632c-b85a-4e78-ac53-e465cf9d1e73",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "I'd suggest to remove this; and add specific comments on the methods that not every implementation has to implement. We would like to end up in a state where all implementations of DAML Ledgers have a uniform admin interface.",
        "createdAt" : "2019-05-23T06:38:09Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a28269bc-4ba4-467e-b596-9f2dd2dd4011",
        "parentId" : "b51e632c-b85a-4e78-ac53-e465cf9d1e73",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK",
        "createdAt" : "2019-05-23T10:44:40Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x"
  },
  {
    "id" : "a31934e3-3c22-4481-936e-ad4b5f722111",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "32c2b6da-d3f3-4dc3-ab6e-f5bc9dabc0eb",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "I'd suggest to store the identifier in the DB. This way it is persistent.",
        "createdAt" : "2019-05-23T06:38:50Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9c8bd9c3-b4ff-4f98-ad06-69646f826a29",
        "parentId" : "32c2b6da-d3f3-4dc3-ab6e-f5bc9dabc0eb",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "You can't escape from supplying it on command line. There are two problems here: on first start database doesn't even have a schema nor the participant identifier, you need to get the latter from elsewhere. Second problem is that you could imagine a database that is shared in which case you need to find your tables/partition/endpoint and best way to do it is by own name.",
        "createdAt" : "2019-05-23T10:48:05Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time"
  },
  {
    "id" : "104ba895-01e3-4919-afb0-140ba6fa5da3",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "ac1c226b-74fe-4859-8ab1-c74fd6b25612",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Consider replacing`daml-on-sawtooth` with `daml-on-kv-ledger`.",
        "createdAt" : "2019-05-23T06:39:12Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e90f0c09-ac5b-4fe8-9d83-13c778e3d758",
        "parentId" : "ac1c226b-74fe-4859-8ab1-c74fd6b25612",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK",
        "createdAt" : "2019-05-23T10:49:15Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above"
  },
  {
    "id" : "a0a5ed51-c66a-49bd-9fd4-dd4bf4dca02e",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "03ca8dda-e2dd-4fa0-851c-4f7c7488bd5b",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "... of the participant that one is connected to.",
        "createdAt" : "2019-05-23T06:39:29Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe15286c-7e88-4c41-9a28-7f718916348c",
        "parentId" : "03ca8dda-e2dd-4fa0-851c-4f7c7488bd5b",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK, will use the term \"backing participant\"",
        "createdAt" : "2019-05-23T10:50:20Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier"
  },
  {
    "id" : "4a2af798-9a73-46fd-8ff4-0ac992b21861",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "5f466f77-7cb5-4822-a1e1-a01c3e271605",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Also explain what error codes can be throw. Here:\r\n\r\nThis method is expected to succeed provided the backing participant is healthy.",
        "createdAt" : "2019-05-23T06:39:59Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ab8f4ac9-663e-431d-b65b-b99d73794d14",
        "parentId" : "5f466f77-7cb5-4822-a1e1-a01c3e271605",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK",
        "createdAt" : "2019-05-23T10:52:51Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns"
  },
  {
    "id" : "d0cef887-f4ea-4363-bb88-96375581eead",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "9bb29a3d-d537-4036-877f-b54520fc57ab",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Good call. We can remove that. The party listing takes care of it.",
        "createdAt" : "2019-05-23T06:40:58Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0b49c279-9ec3-4614-b211-3a63c2a36f0c",
        "parentId" : "9bb29a3d-d537-4036-877f-b54520fc57ab",
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "I would also remove that. Participant is a \"synchronisation\" concern. Applications don't care about participants. They care about their participant and all the parties on the system, but not about other participants.",
        "createdAt" : "2019-05-23T07:35:15Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f0a5ca05-214b-4543-8745-b646dd239218",
        "parentId" : "9bb29a3d-d537-4036-877f-b54520fc57ab",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Gone",
        "createdAt" : "2019-05-23T10:53:42Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns"
  },
  {
    "id" : "97e8773f-fd3c-4fa4-96f6-c70a2787f527",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "88f962a0-967d-4b2a-a812-ce000e398d82",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "good call: replace with 'ListHostedParties'\r\n\r\nthere will be a use-case for listing parties known elsewhere, as applications should be able to understand whether they can run a workflow or not. Not needed in this round though.",
        "createdAt" : "2019-05-23T06:45:57Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aa76a27c-2baf-4596-bbeb-57d173655918",
        "parentId" : "88f962a0-967d-4b2a-a812-ce000e398d82",
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "@meiersi-da i disagree with this. i think we need to add this now. right now, we are spraying party names all over config files (navigator etc.). we should keep hosted parties and just add a flag / search criteria where we can restrict the view to local parties.",
        "createdAt" : "2019-05-23T07:00:07Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cc2fbbdc-66d6-49fd-9186-613cb54e5485",
        "parentId" : "88f962a0-967d-4b2a-a812-ce000e398d82",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "I think it is better to limit ourselves to local parties. Canton's obsession with GDPR would anyway mean that this service would not be capable of submitting meaningful party info to power navigator GUI's. You would need a much richer interface to discern between parties for which only the scrambled identifiers are known, vs those who have revealed their true id.",
        "createdAt" : "2019-05-23T12:45:23Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties"
  },
  {
    "id" : "b6288068-acbf-47a6-8970-41ce170e08a6",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "81f5dc04-574e-4a18-bef9-5becac1b86dc",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Let's not use the backing participant identifier. The KVutils will maintain the proper mapping to implement the uniqueness check as in the daml-on-sql case. This way more freedom is provided, and better demos can be done.",
        "createdAt" : "2019-05-23T06:47:09Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c1ba0275-c972-4bb9-92ec-eee6a87ccea6",
        "parentId" : "81f5dc04-574e-4a18-bef9-5becac1b86dc",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK, I will update the partners about this change. I should work with the validators making sure no duplicates or appropriation of used parties by another participant is happening.",
        "createdAt" : "2019-05-23T10:57:42Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant"
  },
  {
    "id" : "e3550215-ab31-4ddb-a30b-54b913a39037",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "3389b44f-d7e2-4406-b18d-967ecb4a0340",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Move this comment to the request itself.",
        "createdAt" : "2019-05-23T06:47:30Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "65a8611e-bd3a-456e-9dce-c7f5fa838b18",
        "parentId" : "3389b44f-d7e2-4406-b18d-967ecb4a0340",
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "I would suggest the following: Drop the term party_id, as it is unspecific. Parties are written to contracts. Hence, the thing which is written must be a _stable identifier_ that can never change, as otherwise we need to rewrite all contracts. Because of that, we need something in addition of the stable identifier: a key-value data set with one mandatory field: `common_name` or something like that. ",
        "createdAt" : "2019-05-23T07:32:15Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8796203e-cb82-437f-9f03-f7b9e37b2ebc",
        "parentId" : "3389b44f-d7e2-4406-b18d-967ecb4a0340",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Let's move this discussion to the item below, where the record structure is visible. I am moving the comment down according to Simon's suggestion.",
        "createdAt" : "2019-05-23T12:40:46Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing"
  },
  {
    "id" : "668cb148-1856-4ce5-8125-98f6ecea2ad5",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "656a6b1d-e711-4c30-8c12-914ee6bfde29",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "I'd vote to remove the ledger_id from all api calls. This complicates interaction with this API with little benefit.\r\n\r\nThe benefit of protecting from connecting to the wrong ledger will be provided as well if not better by the authentication system that @mziolekda is putting in place. ",
        "createdAt" : "2019-05-23T06:48:45Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9abf6301-98b8-4623-a642-c65fa06c1e18",
        "parentId" : "656a6b1d-e711-4c30-8c12-914ee6bfde29",
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "I wouldn't remove ledger_id as it is present in the entire ledger-api definition. So just for the sake of conformance with the ledger-api, it should remain there. ",
        "createdAt" : "2019-05-23T07:33:56Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "373910b4-0f9a-4d13-b9d1-2b043cf2213e",
        "parentId" : "656a6b1d-e711-4c30-8c12-914ee6bfde29",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "Let's discuss. I also vote for keeping for consistency sake.",
        "createdAt" : "2019-05-23T12:41:28Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing\n+  // human readable party name, privileges, organization etc.\n+  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);\n+}\n+\n+message GetParticipantIdRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;"
  },
  {
    "id" : "5ace25b0-9b3f-4608-9764-457ce6b4fa9d",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "929bb6b4-c974-4735-8529-44d12e0f2943",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Why not inline the `participant_id` into the response?",
        "createdAt" : "2019-05-23T06:49:03Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd860296-f151-418c-86ae-7de5db7e2e01",
        "parentId" : "929bb6b4-c974-4735-8529-44d12e0f2943",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK",
        "createdAt" : "2019-05-23T12:46:32Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing\n+  // human readable party name, privileges, organization etc.\n+  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);\n+}\n+\n+message GetParticipantIdRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message GetParticipantIdResponse {\n+  ParticipantDetails participant_details = 1;"
  },
  {
    "id" : "a5e8c324-796a-4089-a989-6411bd6d2c4a",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "648e321b-9b1e-4bf6-8557-3db1596ca197",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Add comment: // Identifier of the participant, which SHOULD be globally unique.",
        "createdAt" : "2019-05-23T06:49:32Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b967363a-2af9-4428-bb7f-8b39fd34f515",
        "parentId" : "648e321b-9b1e-4bf6-8557-3db1596ca197",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK",
        "createdAt" : "2019-05-23T12:47:24Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing\n+  // human readable party name, privileges, organization etc.\n+  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);\n+}\n+\n+message GetParticipantIdRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message GetParticipantIdResponse {\n+  ParticipantDetails participant_details = 1;\n+}\n+\n+message ParticipantDetails {\n+\n+  string participant_id = 1;"
  },
  {
    "id" : "cef90bec-27f1-49b4-a1c9-a151dbddca0a",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "4cb4424d-34a0-4cd0-8525-1a95ab663213",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "rename to `allocated_party_id`",
        "createdAt" : "2019-05-23T06:50:05Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7504882a-5e94-4474-b1f4-81a0ebdf8144",
        "parentId" : "4cb4424d-34a0-4cd0-8525-1a95ab663213",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "changed to \"party\" for consistency reasons",
        "createdAt" : "2019-05-23T13:38:27Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing\n+  // human readable party name, privileges, organization etc.\n+  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);\n+}\n+\n+message GetParticipantIdRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message GetParticipantIdResponse {\n+  ParticipantDetails participant_details = 1;\n+}\n+\n+message ParticipantDetails {\n+\n+  string participant_id = 1;\n+}\n+\n+message ListKnownParticipantsRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownParticipantsResponse {\n+  repeated ParticipantDetails participant_details = 1;\n+}\n+\n+message ListKnownPartiesRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownPartiesResponse {\n+\n+  // The details of all DAML parties hosted by the participant.\n+  // Required\n+  repeated PartyDetails party_details = 1;\n+}\n+\n+message PartyDetails {\n+\n+  // The ID of a DAML party hosted by the participant.\n+  // Required\n+  string party_id = 1;\n+\n+  // Future extension: include metadata fields. There will be two categories\n+  // of such fields: common and implementation specific.\n+  // CommonMetadata common_metadata = 2;\n+  // bytes implementation_metadata = 3;\n+  \n+  // Canton-specific meta-data would contain the following:\n+  // string domain = 2;\n+  // string participant = 3;\n+  // com.digitalasset.canton.identity.v0.ParticipantPrivilege privilege = 4;\n+  // com.digitalasset.canton.identity.v0.TrustLevel trustLevel = 5;\n+}\n+\n+message AllocatePartyRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+\n+  // Party to be added to the participant.\n+  // Required\n+  string party_id_suggestion = 2;\n+}\n+\n+message AllocatePartyResponse {\n+\n+  // Actual participant id assigned by the backing participant\n+  // Required\n+  string party_id = 2;"
  },
  {
    "id" : "f7726504-fe0e-47a2-814a-6061f9092138",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "38e2789b-e885-4fd6-af84-e6bfd3b63e9e",
        "parentId" : null,
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "Identity Management Service is a broad term. Looks like it will just be Party management. ",
        "createdAt" : "2019-05-23T06:58:54Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dc30ac92-e1d3-4a7c-9a7d-204ff4cfc7e1",
        "parentId" : "38e2789b-e885-4fd6-af84-e6bfd3b63e9e",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Agree with changing the name.",
        "createdAt" : "2019-05-23T09:36:07Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2b8a9449-1565-4867-b1da-c09233bcb649",
        "parentId" : "38e2789b-e885-4fd6-af84-e6bfd3b63e9e",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK",
        "createdAt" : "2019-05-23T10:44:51Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {"
  },
  {
    "id" : "0de7593f-a63d-48ef-9be6-fa17ee68181c",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "1dd883a8-15ec-45a1-af0a-7e23bab7962e",
        "parentId" : null,
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "As said, please don't use party_id but extend this with more meaningful information. I think assuming that we can get away with a string is just not a good idea.",
        "createdAt" : "2019-05-23T07:36:38Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dfea954d-719a-49bd-8f77-4384414bdd20",
        "parentId" : "1dd883a8-15ec-45a1-af0a-7e23bab7962e",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Can't answer to your above comment wrt party id. So answering here, which is related.\r\n\r\nWhat do you think about the following approach:\r\n```\r\nmessage PartyDetails {\r\n  // Stable identifier for this party. Will never change and is not necessarily human readable.\r\n  string party_id \r\n  // Human readable name for that party\r\n  string display_name\r\n}\r\n```\r\nI'm a bit wary of adding free-form attribute sets, as their format tends to get fixed over time without much control over the end result. Can be convinced of adding something like the following though:  \r\n```\r\nmap<string, string> party_attributes\r\n```\r\n@daravep what do you think?",
        "createdAt" : "2019-05-23T09:43:30Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7e30366a-8ad1-4b55-8053-da9515be95c0",
        "parentId" : "1dd883a8-15ec-45a1-af0a-7e23bab7962e",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "@daravep, I don't understand what you mean when you say \"please don't use party_id\". I surely must be able to get hold of the one and only stable identifier that I can use over the ledger api and for which I can issue access tokens. Do you mean, don't use party_id alone?",
        "createdAt" : "2019-05-23T10:39:02Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd9a8679-e584-4e16-b177-9fb776ce4930",
        "parentId" : "1dd883a8-15ec-45a1-af0a-7e23bab7962e",
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "Yes, I mean don't use `party_id` as a term and don't use it alone. I think that it simplifies the underlying problem too much. At the end, what we have is a \"stable identifier\" and a \"volatile human readable identifier\". ",
        "createdAt" : "2019-05-23T10:59:36Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c50a4447-ddf8-4ab3-8e66-c202c5167ac9",
        "parentId" : "1dd883a8-15ec-45a1-af0a-7e23bab7962e",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "How about Simon's idea, that addresses you concern doesn't it? I have checked elsewhere in our api's and it seems that we use the term \"party\" to describe the same semantic entity elsewhere:\r\nhttps://github.com/digital-asset/daml/blob/af1bf0cd6735dd0d1faf2fe76e91f344409c2f23/ledger-api/grpc-definitions/com/digitalasset/ledger/api/v1/commands.proto#L40\r\nand here:\r\nhttps://github.com/digital-asset/daml/blob/f9839a7e4cc6daaf36cafbf469610bb555292f33/ledger-api/grpc-definitions/com/digitalasset/ledger/api/v1/value.proto#L50",
        "createdAt" : "2019-05-23T12:54:03Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing\n+  // human readable party name, privileges, organization etc.\n+  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);\n+}\n+\n+message GetParticipantIdRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message GetParticipantIdResponse {\n+  ParticipantDetails participant_details = 1;\n+}\n+\n+message ParticipantDetails {\n+\n+  string participant_id = 1;\n+}\n+\n+message ListKnownParticipantsRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownParticipantsResponse {\n+  repeated ParticipantDetails participant_details = 1;\n+}\n+\n+message ListKnownPartiesRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownPartiesResponse {\n+\n+  // The details of all DAML parties hosted by the participant.\n+  // Required\n+  repeated PartyDetails party_details = 1;\n+}\n+\n+message PartyDetails {\n+\n+  // The ID of a DAML party hosted by the participant.\n+  // Required\n+  string party_id = 1;"
  },
  {
    "id" : "a8be142b-5e0a-402b-a692-dac71c1f89ec",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "66e282f8-a2bb-42a3-928a-24a854d104a1",
        "parentId" : null,
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "my suggestion is that you provide the system \"party metadata\" and the system replies with a \"stable identifier\". I.e. like in SQL:\r\n```\r\nCREATE TABLE parties (id INT NOT NULL AUTO_INCREMENT, name_verbose VARCHAR(255), metadata ..., UNIQUE KEY(name_verbose)) \r\nINSERT INTO parties (name, address) -> yields you the auto_increment INT ID. \r\n```",
        "createdAt" : "2019-05-23T07:40:03Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e871bab3-5092-495e-b638-e9d0537e7e48",
        "parentId" : "66e282f8-a2bb-42a3-928a-24a854d104a1",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "I agree with the direction. The problem we have right now is though that our demos and tools like Navigator do rely on the stable party identifier being human readable. So I would like to keep this functionality.\r\n\r\nWhat about making the suggestion optional? This way we could support both modes of operation.",
        "createdAt" : "2019-05-23T09:46:00Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "808d6c23-455a-4197-93e6-61db4c604517",
        "parentId" : "66e282f8-a2bb-42a3-928a-24a854d104a1",
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "@meiersi-da yes, so nobody says that `addParty :: Text -> Text` can not just be `id`. But I think we need to set the direction now. We have oversimplified the term `Party`. Think about the following:\r\n\r\nCompany Schweizerische Bankgesellschaft is known as `SBG`. They are mentioned in all the contracts as `SBG`. Now they officially change their legal name to `UBS`. What do you do with the contracts? You need to be able to change the name without having to rewrite all the contracts. ",
        "createdAt" : "2019-05-23T11:02:46Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d4550ea-48bd-47dc-ad51-cf562cf693c7",
        "parentId" : "66e282f8-a2bb-42a3-928a-24a854d104a1",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "I think metadata might be the way to go long term, but since common_name/display_name is always going to be there, to just lift it to the top level:\r\n```\r\nmessage AllocatePartyRequest {\r\n   string ledger_id = 1;\r\n   string common_name = 2;\r\n}\r\nmessage AllocatePartyResponse {\r\n   string party = 1; //stable identifier, called party for consistency with other api's\r\n   string common_name = 2;\r\n}\r\n```",
        "createdAt" : "2019-05-23T13:02:27Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing\n+  // human readable party name, privileges, organization etc.\n+  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);\n+}\n+\n+message GetParticipantIdRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message GetParticipantIdResponse {\n+  ParticipantDetails participant_details = 1;\n+}\n+\n+message ParticipantDetails {\n+\n+  string participant_id = 1;\n+}\n+\n+message ListKnownParticipantsRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownParticipantsResponse {\n+  repeated ParticipantDetails participant_details = 1;\n+}\n+\n+message ListKnownPartiesRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownPartiesResponse {\n+\n+  // The details of all DAML parties hosted by the participant.\n+  // Required\n+  repeated PartyDetails party_details = 1;\n+}\n+\n+message PartyDetails {\n+\n+  // The ID of a DAML party hosted by the participant.\n+  // Required\n+  string party_id = 1;\n+\n+  // Future extension: include metadata fields. There will be two categories\n+  // of such fields: common and implementation specific.\n+  // CommonMetadata common_metadata = 2;\n+  // bytes implementation_metadata = 3;\n+  \n+  // Canton-specific meta-data would contain the following:\n+  // string domain = 2;\n+  // string participant = 3;\n+  // com.digitalasset.canton.identity.v0.ParticipantPrivilege privilege = 4;\n+  // com.digitalasset.canton.identity.v0.TrustLevel trustLevel = 5;\n+}\n+\n+message AllocatePartyRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+\n+  // Party to be added to the participant.\n+  // Required\n+  string party_id_suggestion = 2;"
  },
  {
    "id" : "9b0e3211-b7e6-4a31-a9d8-a04b1db96c4d",
    "prId" : 1264,
    "comments" : [
      {
        "id" : "3c714027-ac55-49ae-8be7-2d0c9f341609",
        "parentId" : null,
        "author" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "body" : "what's the semantic to signal failure? ",
        "createdAt" : "2019-05-23T07:40:37Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "daravep",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/14316769?u=ecf84cb9190107a561ee4bec759072fdefd73269&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e808043-e22a-4597-875d-d7ef7794997d",
        "parentId" : "3c714027-ac55-49ae-8be7-2d0c9f341609",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "gRPC error code is what I'd expect. We'll have to add comments though that explains which ones to expect.",
        "createdAt" : "2019-05-23T09:46:24Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "898cca00-8883-42f9-b4ab-39310759c318",
        "parentId" : "3c714027-ac55-49ae-8be7-2d0c9f341609",
        "author" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "body" : "OK",
        "createdAt" : "2019-05-23T13:38:01Z",
        "updatedAt" : "2019-05-23T20:06:44Z",
        "lastEditedBy" : {
          "login" : "mziolekda",
          "name" : "mziolekda",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/28315767?u=bfa7fd34d88616828ab02abda54fea595b0fde29&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "949c69703c60436cb3be1de6cb82043c45186fbf",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+syntax = \"proto3\";\n+\n+package com.digitalasset.ledger.api.v1.admin;\n+\n+option java_outer_classname = \"PartyManagementServiceOuterClass\";\n+option java_package = \"com.digitalasset.ledger.api.v1.admin\";\n+\n+// Status: experimental interface, will change before it is deemed production\n+// ready\n+\n+// Inspect the identity management state of a ledger participant and modify the\n+// parts that are modifiable. We use 'backing participant' to refer to this\n+// specific participant in the methods of this API.\n+// It is not mandatory to implement this interface on a specific daml-on-x\n+// implementation or to implement it in its entirety\n+service IdentityManagementService {\n+\n+  // Return the identifier of the backing participant.\n+  // All horizontally scaled replicas should return the same id.\n+  // daml-on-sql: returns an identifier supplied on command line at launch time\n+  // daml-on-sawtooth: as above\n+  // canton: returns globally unique identifier\n+  rpc GetParticipantId (GetParticipantIdRequest) returns\n+    (GetParticipantIdResponse);\n+\n+  // List the participants known by the backing participant.\n+  // TODO: Check what the use case is for listing all participants\n+  // Admin tooling in daml-on-sawtooth knows the topology from other sources\n+  // daml-on-sql knows only one participant. Suggest to remove it\n+  rpc ListKnownParticipants (ListKnownParticipantsRequest) returns\n+    (ListKnownParticipantsResponse);\n+\n+  // List the parties known by the backing participant.\n+  // The list returned contains parties whose ledger access is facilitated by\n+  // backing participant and teh ones maintained elsewhere\n+  // TODO: Check what the use case is for listing non-local parties\n+  rpc ListKnownParties (ListKnownPartiesRequest) returns\n+    (ListKnownPartiesResponse);\n+\n+  // Adds a new party to the set managed by the backing participant.\n+  // Caller specifies a party identifier suggestion, the actual identifier\n+  // allocated might be different and is implementation specific.\n+  // daml-on-sql: suggestion's uniqueness is checked and call rejected if the\n+  // identifier is already present\n+  // daml-on-sawtooth: suggestion is prefixed with backing participant\n+  // identifier and the composite is tested for uniqueness\n+  // canton: completely different globally unique identifier is allocated.\n+  // Behind the scenes calls to an internal protocol are made. As that protocol\n+  // is richer than the the surface protocol, the arguments take implicit values\n+  // Future extension: augment the request with additional meta-data containing\n+  // human readable party name, privileges, organization etc.\n+  rpc AllocateParty (AllocatePartyRequest) returns (AllocatePartyResponse);\n+}\n+\n+message GetParticipantIdRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message GetParticipantIdResponse {\n+  ParticipantDetails participant_details = 1;\n+}\n+\n+message ParticipantDetails {\n+\n+  string participant_id = 1;\n+}\n+\n+message ListKnownParticipantsRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownParticipantsResponse {\n+  repeated ParticipantDetails participant_details = 1;\n+}\n+\n+message ListKnownPartiesRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+}\n+\n+message ListKnownPartiesResponse {\n+\n+  // The details of all DAML parties hosted by the participant.\n+  // Required\n+  repeated PartyDetails party_details = 1;\n+}\n+\n+message PartyDetails {\n+\n+  // The ID of a DAML party hosted by the participant.\n+  // Required\n+  string party_id = 1;\n+\n+  // Future extension: include metadata fields. There will be two categories\n+  // of such fields: common and implementation specific.\n+  // CommonMetadata common_metadata = 2;\n+  // bytes implementation_metadata = 3;\n+  \n+  // Canton-specific meta-data would contain the following:\n+  // string domain = 2;\n+  // string participant = 3;\n+  // com.digitalasset.canton.identity.v0.ParticipantPrivilege privilege = 4;\n+  // com.digitalasset.canton.identity.v0.TrustLevel trustLevel = 5;\n+}\n+\n+message AllocatePartyRequest {\n+\n+  // Must correspond to the ledger ID reported by the Ledger Identification\n+  // Service.\n+  // Required\n+  string ledger_id = 1;\n+\n+  // Party to be added to the participant.\n+  // Required\n+  string party_id_suggestion = 2;\n+}\n+\n+message AllocatePartyResponse {"
  }
]