[
  {
    "id" : "59357615-8159-4116-8c11-27ebb5d6f8f3",
    "prId" : 2574,
    "comments" : [
      {
        "id" : "c5d2c95d-1581-4f98-b6f1-d6fa594f790c",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Is that a legal path? `{cc}` points to a file. If I try\r\n```\r\ntouch foo\r\nls foo/..\r\n```\r\nI get \"not a directory\".",
        "createdAt" : "2019-08-16T12:22:28Z",
        "updatedAt" : "2019-08-16T13:36:56Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d8798b7c-ef97-426d-b064-828f56180095",
        "parentId" : "c5d2c95d-1581-4f98-b6f1-d6fa594f790c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That is a very good point, confusingly it seems to work …",
        "createdAt" : "2019-08-16T12:24:18Z",
        "updatedAt" : "2019-08-16T13:36:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9dec9c93-59ec-42d5-8693-78b193904e8a",
        "parentId" : "c5d2c95d-1581-4f98-b6f1-d6fa594f790c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Switched to `paths.dirname(cc)` which seems less stupid.",
        "createdAt" : "2019-08-16T12:55:55Z",
        "updatedAt" : "2019-08-16T13:36:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b35f8917566a0027f423a5decfd5f49f5a51818",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,45 @@\n+diff --git a/haskell/c2hs.bzl b/haskell/c2hs.bzl\n+index f4f9f42..9aa9a8c 100644\n+--- a/haskell/c2hs.bzl\n++++ b/haskell/c2hs.bzl\n+@@ -39,6 +39,7 @@ def _c2hs_library_impl(ctx):\n+     args.add(\"-C-includeghcversion.h\")\n+     args.add_all([\"-C\" + x for x in cc.cpp_flags])\n+     args.add_all([\"-C\" + x for x in cc.include_args])\n++    args.add_all(ctx.attr.extra_args)\n+ \n+     dep_chi_files = [\n+         dep[C2hsLibraryInfo].chi_file\n+@@ -68,12 +69,23 @@ def _c2hs_library_impl(ctx):\n+             set.to_depset(version_macro_headers),\n+         ]),\n+         outputs = [hs_file, chi_file],\n+-        command = \"\"\"\n++        command =\n++        # cpp (called via c2hs) gets very unhappy if the mingw bin dir is\n++        # not in PATH so we add it to PATH explicitely.\n++        (\n++        \"\"\"\n++        export PATH=$PATH:{cc}/.."
  },
  {
    "id" : "ca84c1d1-40be-48e2-8bb6-efc44b347cfa",
    "prId" : 2574,
    "comments" : [
      {
        "id" : "d055347f-21d9-4f4e-bf32-51dd9e0b3c3c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "@aherrmann-da I need `c2hs` to be a target for this to work but I couldn’t figure out how I could then get the path from the target so as a hacky workaround I added `c2hs_exe` which points to the file and `c2hs` which points to the target to the toolchain. What’s the non-hacky way to accomplish this?",
        "createdAt" : "2019-08-16T12:51:27Z",
        "updatedAt" : "2019-08-16T13:36:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eb402a90-3bf7-4b81-ab4d-07974cb861b6",
        "parentId" : "d055347f-21d9-4f4e-bf32-51dd9e0b3c3c",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, the information that it's a single executable file is unfortunately lost once you only have the `Target`. The separate `c2hs_exe` seems like a good solution. I've essentially done the same [with the cc_wrapper](https://github.com/tweag/rules_haskell/pull/1039/files#diff-bd788ee16d6ba21ea60c42efea01aba3R163-R166).",
        "createdAt" : "2019-08-16T13:14:46Z",
        "updatedAt" : "2019-08-16T13:36:56Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b35f8917566a0027f423a5decfd5f49f5a51818",
    "line" : 25,
    "diffHunk" : "@@ -0,0 +1,87 @@\n+diff --git a/haskell/c2hs.bzl b/haskell/c2hs.bzl\n+index f4f9f42..f45bc21 100644\n+--- a/haskell/c2hs.bzl\n++++ b/haskell/c2hs.bzl\n+@@ -22,6 +22,7 @@ def _c2hs_library_impl(ctx):\n+     cc = cc_interop_info(ctx)\n+     args = hs.actions.args()\n+     c2hs = ctx.toolchains[\"@rules_haskell//haskell/c2hs:toolchain\"].c2hs\n++    c2hs_exe = ctx.toolchains[\"@rules_haskell//haskell/c2hs:toolchain\"].c2hs_exe\n+ \n+     if len(ctx.files.srcs) != 1:\n+         fail(\"srcs field should contain exactly one file.\")\n+@@ -39,6 +40,7 @@ def _c2hs_library_impl(ctx):\n+     args.add(\"-C-includeghcversion.h\")\n+     args.add_all([\"-C\" + x for x in cc.cpp_flags])\n+     args.add_all([\"-C\" + x for x in cc.include_args])\n++    args.add_all(ctx.attr.extra_args)\n+ \n+     dep_chi_files = [\n+         dep[C2hsLibraryInfo].chi_file\n+@@ -59,22 +61,36 @@ def _c2hs_library_impl(ctx):\n+         (version_macro_headers, version_macro_flags) = version_macro_includes(dep_info)\n+         args.add_all([\"-C\" + x for x in version_macro_flags])\n+ \n++    (inputs, input_manifests) = ctx.resolve_tools(tools = [c2hs])"
  }
]