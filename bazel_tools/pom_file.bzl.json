[
  {
    "id" : "b4c87a0c-9786-4f10-a8cf-b3557b0a1685",
    "prId" : 3253,
    "comments" : [
      {
        "id" : "182eb943-9257-49a6-ac13-cef68af9aca5",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Good riddance.",
        "createdAt" : "2019-10-25T18:40:36Z",
        "updatedAt" : "2019-10-28T09:30:00Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5a3e943-ae34-4e15-9955-42333058c411",
        "parentId" : "182eb943-9257-49a6-ac13-cef68af9aca5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It would be good to diff the generated pom files to make sure no unexpected changes arise due to the switch to `rules_jvm_external`.",
        "createdAt" : "2019-10-25T19:30:33Z",
        "updatedAt" : "2019-10-28T09:30:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "14ea1ff1-999c-44d8-b1de-b0be4ecce111",
        "parentId" : "182eb943-9257-49a6-ac13-cef68af9aca5",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "The difference is that those previously implicit dependencies are now also listed explicitly. E.g.\r\n``` diff\r\n--- ../da-master/bazel-out/k8-opt/bin/language-support/scala/codegen/codegen-main_pom.xml       2019-10-25 16:59:55.575607910 +0200\r\n+++ bazel-out/k8-opt/bin/language-support/scala/codegen/codegen-main_pom.xml    2019-10-25 14:16:23.039977152 +0200\r\n@@ -45,6 +45,14 @@\r\n       </exclusions>\r\n     </dependency>\r\n     <dependency>\r\n+      <groupId>ch.qos.logback</groupId>\r\n+      <artifactId>logback-core</artifactId>\r\n+      <version>1.2.3</version>\r\n+      <exclusions>\r\n+\r\n+      </exclusions>\r\n+    </dependency>\r\n+    <dependency>\r\n       <groupId>com.daml</groupId>\r\n       <artifactId>codegen-common_2.12</artifactId>\r\n       <version>100.13.31</version>\r\n@@ -83,6 +91,14 @@\r\n       <exclusions>\r\n\r\n       </exclusions>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.slf4j</groupId>\r\n+      <artifactId>slf4j-api</artifactId>\r\n+      <version>1.7.26</version>\r\n+      <exclusions>\r\n+\r\n+      </exclusions>\r\n     </dependency>\r\n   </dependencies>\r\n </project>\r\n```\r\nApart from that, there is no difference.",
        "createdAt" : "2019-10-28T08:40:27Z",
        "updatedAt" : "2019-10-28T09:30:00Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1eae954bb7e621fe37eef6d536d9adc7f73b76ff",
    "line" : 4,
    "diffHunk" : "@@ -55,18 +55,7 @@ def _collect_maven_info_impl(_target, ctx):\n     exports = getattr(ctx.rule.attr, \"exports\", [])\n     jars = getattr(ctx.rule.attr, \"jars\", [])\n \n-    # We need to detect targets generated by bazel-deps to avoid propagating transitive dependencies"
  },
  {
    "id" : "cda040fc-f271-42d7-af19-58bed57eba40",
    "prId" : 374,
    "comments" : [
      {
        "id" : "f102574b-aec3-473a-b5cf-42160e9b4fe5",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "~could these be `elif`s?~\r\n\r\nActually, maybe this could be shortened a bit using a `dict` of workspace names mapping to maven coordinates.",
        "createdAt" : "2019-04-11T08:25:09Z",
        "updatedAt" : "2019-04-11T09:00:26Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e382945-a417-4759-a994-01cb475f1c19",
        "parentId" : "f102574b-aec3-473a-b5cf-42160e9b4fe5",
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "Good idea, changed!",
        "createdAt" : "2019-04-11T09:00:33Z",
        "updatedAt" : "2019-04-11T09:00:33Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4c517667-ee73-49ed-a18c-54f7cb785ae2",
        "parentId" : "f102574b-aec3-473a-b5cf-42160e9b4fe5",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2019-04-11T10:10:52Z",
        "updatedAt" : "2019-04-11T10:10:52Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d549ce6b7954a3e56ce7900aafb1204ed31731a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,221 @@\n+# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+# These rules are similar to the rules in bazel_common.\n+# However, our requirements are different in a few ways so we have our own version for now:\n+# 1. We only include immediate dependencies not all transitive dependencies.\n+# 2. We support Scala.\n+# 3. We produce full pom files instead of only the dependency section.\n+# 4. We have some special options to deal with our specific setup.\n+\n+MavenInfo = provider(\n+    fields = {\n+        \"maven_coordinates\": \"\"\"\n+        The Maven coordinates of this target or the one wrapped by it.\n+        \"\"\",\n+        \"maven_dependencies\": \"\"\"\n+        The Maven coordinates of the direct dependencies of this target.\n+        \"\"\",\n+    },\n+)\n+\n+_EMPTY_MAVEN_INFO = MavenInfo(\n+    maven_coordinates = None,\n+    maven_dependencies = depset(),\n+)\n+\n+_MAVEN_COORDINATES_PREFIX = \"maven_coordinates=\"\n+\n+_SCALA_VERSION = \"2.12\"\n+\n+def _maven_coordinates(targets):\n+    return [target[MavenInfo].maven_coordinates for target in targets if MavenInfo in target and target[MavenInfo].maven_coordinates]\n+\n+def jar_version(name):\n+    return name.rsplit(\"-\", 1)[1].rsplit(\".\", 1)[0]\n+\n+def _collect_maven_info_impl(_target, ctx):\n+    tags = getattr(ctx.rule.attr, \"tags\", [])\n+    deps = getattr(ctx.rule.attr, \"deps\", [])\n+    exports = getattr(ctx.rule.attr, \"exports\", [])\n+    jars = getattr(ctx.rule.attr, \"jars\", [])\n+\n+    # We need to detect targets generated by bazel-deps to avoid propagating transitive dependencies\n+    # in that case. This is slightly tricky as bazel-deps generates a java_import that has the tag we care about\n+    # and then a java_library that has the java_import in exports but also the immediate dependencies.\n+    # We detect these targets by looking for a jar:jar export.\n+    bazel_deps_reexport = []\n+    if ctx.rule.kind == \"java_import\" or ctx.rule.kind == \"java_library\":\n+        for e in exports:\n+            if e.label.name == \"jar\" and e.label.package == \"jar\":\n+                if MavenInfo not in e:\n+                    fail(\"Expected maven info for jar dependency: {}\".format(e.label))\n+                return [e[MavenInfo]]\n+    elif ctx.rule.kind == \"scala_import\":\n+        if len(jars) != 1:\n+            fail(\"Expected exactly one jar in a scala_import\")\n+        jar = jars[0]\n+\n+        # The following four lines corresponds to the replacements section in dependencies.yaml.\n+        if jar.label.workspace_name == \"io_bazel_rules_scala_scala_compiler\":\n+            return [MavenInfo(\n+                maven_coordinates = \"org.scala-lang:scala-compiler_{}:{}\".format(_SCALA_VERSION, jar_version(jar.label.name)),\n+                maven_dependencies = [],\n+            )]\n+        if jar.label.workspace_name == \"io_bazel_rules_scala_scala_library\":"
  },
  {
    "id" : "fcafc285-9da9-4d3b-869e-a74e81323bdc",
    "prId" : 374,
    "comments" : [
      {
        "id" : "4ef9aba1-83ee-456f-9047-65b1bb876d7b",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "It's more than four lines.\r\n\r\nAlso, since this needs to be kept in sync with `dependencies.yaml`, there should also be a comment in the relevant section in `dependencies.yaml` so that people know to keep these in sync.\r\n\r\nWould be even better if it didn't need to be kept in sync manually, but I don't know if there's a good way to do that.\r\n",
        "createdAt" : "2019-04-11T08:27:34Z",
        "updatedAt" : "2019-04-11T09:00:26Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2c3c76b6-f7a5-4e88-ad62-bff66e7f2200",
        "parentId" : "4ef9aba1-83ee-456f-9047-65b1bb876d7b",
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "I added a comment to `dependencies.yaml`. I don’t see a way to avoid keeping them in sync without patching `bazel-deps` and given that we might move to `rules_jvm_external` I don’t want to invest the time into that atm.",
        "createdAt" : "2019-04-11T09:02:04Z",
        "updatedAt" : "2019-04-11T09:02:04Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d549ce6b7954a3e56ce7900aafb1204ed31731a",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,221 @@\n+# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+# These rules are similar to the rules in bazel_common.\n+# However, our requirements are different in a few ways so we have our own version for now:\n+# 1. We only include immediate dependencies not all transitive dependencies.\n+# 2. We support Scala.\n+# 3. We produce full pom files instead of only the dependency section.\n+# 4. We have some special options to deal with our specific setup.\n+\n+MavenInfo = provider(\n+    fields = {\n+        \"maven_coordinates\": \"\"\"\n+        The Maven coordinates of this target or the one wrapped by it.\n+        \"\"\",\n+        \"maven_dependencies\": \"\"\"\n+        The Maven coordinates of the direct dependencies of this target.\n+        \"\"\",\n+    },\n+)\n+\n+_EMPTY_MAVEN_INFO = MavenInfo(\n+    maven_coordinates = None,\n+    maven_dependencies = depset(),\n+)\n+\n+_MAVEN_COORDINATES_PREFIX = \"maven_coordinates=\"\n+\n+_SCALA_VERSION = \"2.12\"\n+\n+def _maven_coordinates(targets):\n+    return [target[MavenInfo].maven_coordinates for target in targets if MavenInfo in target and target[MavenInfo].maven_coordinates]\n+\n+def jar_version(name):\n+    return name.rsplit(\"-\", 1)[1].rsplit(\".\", 1)[0]\n+\n+def _collect_maven_info_impl(_target, ctx):\n+    tags = getattr(ctx.rule.attr, \"tags\", [])\n+    deps = getattr(ctx.rule.attr, \"deps\", [])\n+    exports = getattr(ctx.rule.attr, \"exports\", [])\n+    jars = getattr(ctx.rule.attr, \"jars\", [])\n+\n+    # We need to detect targets generated by bazel-deps to avoid propagating transitive dependencies\n+    # in that case. This is slightly tricky as bazel-deps generates a java_import that has the tag we care about\n+    # and then a java_library that has the java_import in exports but also the immediate dependencies.\n+    # We detect these targets by looking for a jar:jar export.\n+    bazel_deps_reexport = []\n+    if ctx.rule.kind == \"java_import\" or ctx.rule.kind == \"java_library\":\n+        for e in exports:\n+            if e.label.name == \"jar\" and e.label.package == \"jar\":\n+                if MavenInfo not in e:\n+                    fail(\"Expected maven info for jar dependency: {}\".format(e.label))\n+                return [e[MavenInfo]]\n+    elif ctx.rule.kind == \"scala_import\":\n+        if len(jars) != 1:\n+            fail(\"Expected exactly one jar in a scala_import\")\n+        jar = jars[0]\n+\n+        # The following four lines corresponds to the replacements section in dependencies.yaml."
  }
]