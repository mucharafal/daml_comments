[
  {
    "id" : "57e3ca5e-477f-4b11-b50e-c6989cbff01b",
    "prId" : 4513,
    "comments" : [
      {
        "id" : "7b579b1d-7836-40c3-bf6b-1dea58290fcf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just to make sure I understand the implications of this correctly:\r\n\r\n* Everything that currently depends on `//:VERSION` and embeds it in some form will default to embedding `0.0.0` instead.\r\n* If I want to reproduce a release commit build, it is not sufficient to checkout the commit. I have to set the environment variable.\r\n* In a release build everything that embeds the version number will get the the version number specified in `LATEST`.\r\n* `daml-sdk-head` will embed `0.0.0` whereas before it embedded things from `LATEST`.\r\n\r\nMy two main worries here are:\r\n\r\n1. Caching will get significantly worse for release builds.\r\n2. If there are issues relating to the version number (I’m particularly thinking of `damlc`, `daml-stdlib` and cross-SDK dependencies here. I’m not _aware_ of anything that should go wrong but this is finicky), we will not catch them until we do a release build which actually changes the version number used in the build.\r\n\r\nI don’t have a great answer for either of those. I’d feel a bit more comfortable about 2 if we ran tests on release builds with the version number set but that also means release builds will basically rebuild and retest the world (I believe both sandbox and damlc embed the version number). Still seems better than catching the issue due to manual testing.\r\n\r\nThe only other idea that I have is to continue for now to embed the SDK version from `LATEST` if the environment variable is not set. That at least seems to reduce the number of moving parts compared to the current SDK release process and should help with 1 and partially with 2 although it doesn’t quite match up.",
        "createdAt" : "2020-02-19T10:46:40Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "17778cfb-ccaa-4cbf-a807-3f84ab57713a",
        "parentId" : "7b579b1d-7836-40c3-bf6b-1dea58290fcf",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "> Just to make sure I understand the implications of this correctly:\r\n> \r\n> * Everything that currently depends on `//:VERSION` and embeds it in some form will default to embedding `0.0.0` instead.\r\n\r\nYes.\r\n\r\n> * If I want to reproduce a release commit build, it is not sufficient to checkout the commit. I have to set the environment variable.\r\n\r\nYes.\r\n\r\n> * In a release build everything that embeds the version number will get the the version number specified in `LATEST`.\r\n\r\nWith the exception of Maven artifacts, which get a +100, and some GHC-internal things which (for snapshot builds) get a slightly simplified version string.\r\n\r\nThis is not magic though, this is CI setting the env var based on the LATEST file of the release commit (the one triggering the release) while building the source commit (the one whose SHA is in the LATEST file in the release commit).\r\n\r\nSo if LATEST says `abc 0.1.2`, CI is doing\r\n\r\n```\r\ngit checkout abc\r\nDAML_SDK_RELEASE_VERSION=0.1.2 bazel build //...\r\n```\r\n\r\n> * `daml-sdk-head` will embed `0.0.0` whereas before it embedded things from `LATEST`.\r\n\r\n`daml-sdk-head always had `0.0.0`. It used to take artifacts built with `VERSION` and then \"manually\" patching them to change their version number before embedding them in the tarball. Now it builds the tarball directly from artifacts built as `0.0.0`.\r\n\r\n> My two main worries here are:\r\n> \r\n> 1. Caching will get significantly worse for release builds.\r\n\r\nRelease builds were already specifically builds that changed the VERSION file, so this is not getting worse in any way that I can see.\r\n\r\n> 2. If there are issues relating to the version number (I’m particularly thinking of `damlc`, `daml-stdlib` and cross-SDK dependencies here. I’m not _aware_ of anything that should go wrong but this is finicky), we will not catch them until we do a release build which actually changes the version number used in the build.\r\n\r\nTrue, and thanks for raising. I will change the CI configuration to run those tests against the release PR (rather than not run them at all, which is what this PR currently does).\r\n\r\n> \r\n> I don’t have a great answer for either of those. I’d feel a bit more comfortable about 2 if we ran tests on release builds with the version number set but that also means release builds will basically rebuild and retest the world (I believe both sandbox and damlc embed the version number). Still seems better than catching the issue due to manual testing.\r\n\r\nI agree. Though I strongly suspect that if our tests break on a version change like that, it's going to be a false positive, i.e. a wrong assumption in the test rather than an error in the binary produced.\r\n\r\n> \r\n> The only other idea that I have is to continue for now to embed the SDK version from `LATEST` if the environment variable is not set. That at least seems to reduce the number of moving parts compared to the current SDK release process and should help with 1 and partially with 2 although it doesn’t quite match up.\r\n\r\nI don't think that solves anything, really. It would not change anything to 1; the only difference for 2 is that currently we do effectively run the test suite with the env var set on the release PR (so, again, adding this here would not make it worse, AFAICT).",
        "createdAt" : "2020-02-19T13:10:06Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81246bd2733ace93653cb663dca5a0cdaf7c11e9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@    # Generates a simple Bazel file that just sets a bunch of Bazel variables,\n    # so they can be used in our main Bazel BUILD files.\n    semver = ctx.os.environ.get(\"DAML_SDK_RELEASE_VERSION\", default = \"0.0.0\")\n    if semver.find(\"-snapshot.\") > 0:\n        ghc = semver[:-9].replace(\"-snapshot.\", \".\")"
  }
]