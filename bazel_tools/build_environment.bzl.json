[
  {
    "id" : "0cd6cdcf-609a-4e58-96c5-eecfa89e8441",
    "prId" : 7717,
    "comments" : [
      {
        "id" : "b29751e5-b660-41ca-bee5-75772c731294",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I suggest using `in`.\r\n\r\n```suggestion\r\nvalid_figures = \"0123456789\"\r\ndef is_figure(c):\r\n    return c in valid_figures\r\n```\r\n",
        "createdAt" : "2020-10-16T13:34:27Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "18a0e04b-02ae-4f45-adbb-ce9096bc049d",
        "parentId" : "b29751e5-b660-41ca-bee5-75772c731294",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "And perhaps \"digit\" instead of \"figure\".",
        "createdAt" : "2020-10-16T13:39:23Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8bdc21a3b71d34cde90c47f4790277d8b1843bdd",
    "line" : null,
    "diffHunk" : "@@ -1,6 +1,15 @@\n # Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n+def is_figure(c):\n+    return c == \"0\" or c == \"1\" or c == \"2\" or c == \"3\" or c == \"4\" or c == \"5\" or c == \"6\" or c == \"7\" or c == \"8\" or c == \"9\""
  },
  {
    "id" : "a8cd95f0-161e-4a9a-9bfc-4c9ea72f66a1",
    "prId" : 7717,
    "comments" : [
      {
        "id" : "abeea674-a368-4b3e-ba52-81524f57504e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n            if segment.isdigit():\r\n```\r\nand remove all the stuff above.",
        "createdAt" : "2020-10-16T13:35:30Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb1e0c8a-f660-4d73-8fd5-fae2ad57cbee",
        "parentId" : "abeea674-a368-4b3e-ba52-81524f57504e",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Oh, missed that.",
        "createdAt" : "2020-10-16T13:49:57Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8bdc21a3b71d34cde90c47f4790277d8b1843bdd",
    "line" : null,
    "diffHunk" : "@@ -12,11 +21,17 @@ def _impl(ctx):\n     # Generates a simple Bazel file that just sets a bunch of Bazel variables,\n     # so they can be used in our main Bazel BUILD files.\n     semver = ctx.os.environ.get(\"DAML_SDK_RELEASE_VERSION\", default = \"0.0.0\")\n-    if semver.find(\"-snapshot.\") > 0:\n-        ghc = semver[:-9].replace(\"-snapshot.\", \".\")\n+    if semver.find(\"-\") > 0:\n+        ghc_list = []\n+        for segment in semver.replace(\"-\", \".\").split(\".\"):\n+            if is_number(segment):"
  },
  {
    "id" : "6414276f-5050-4f73-bc75-ac46d6db9847",
    "prId" : 7717,
    "comments" : [
      {
        "id" : "a0f62372-15fb-46c0-93d6-48f3146285fd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        ghc = \".\".join(ghc_list)\r\n```",
        "createdAt" : "2020-10-16T13:39:18Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b6069e0f-7463-485c-ba1e-cedbe16069dd",
        "parentId" : "a0f62372-15fb-46c0-93d6-48f3146285fd",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I was looking for a method on list. ðŸ¤¦ ",
        "createdAt" : "2020-10-16T13:50:20Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9f3fbf4d-3431-43a1-a672-f536a748ab50",
        "parentId" : "a0f62372-15fb-46c0-93d6-48f3146285fd",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "IMO Python is the only language that does this \"correctly\". :stuck_out_tongue: ",
        "createdAt" : "2020-10-16T13:54:39Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8bdc21a3b71d34cde90c47f4790277d8b1843bdd",
    "line" : null,
    "diffHunk" : "@@ -12,11 +21,17 @@ def _impl(ctx):\n     # Generates a simple Bazel file that just sets a bunch of Bazel variables,\n     # so they can be used in our main Bazel BUILD files.\n     semver = ctx.os.environ.get(\"DAML_SDK_RELEASE_VERSION\", default = \"0.0.0\")\n-    if semver.find(\"-snapshot.\") > 0:\n-        ghc = semver[:-9].replace(\"-snapshot.\", \".\")\n+    if semver.find(\"-\") > 0:\n+        ghc_list = []\n+        for segment in semver.replace(\"-\", \".\").split(\".\"):\n+            if is_number(segment):\n+                ghc_list.append(segment)\n+        ghc = ghc_list[0]\n+        for elem in ghc_list[1:]:\n+            ghc = ghc + \".\" + elem"
  },
  {
    "id" : "f81b1008-0592-442e-b6a0-77039863363d",
    "prId" : 7717,
    "comments" : [
      {
        "id" : "50c30805-18cf-49c1-9951-73564418e647",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You can use `all` here.\r\n\r\n```suggestion\r\ndef is_number(s):\r\n    return all([is_figure(c) for c in s.elems()])\r\n```",
        "createdAt" : "2020-10-16T13:40:13Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "28860677-9bdc-4e3c-bb9d-fdb219379775",
        "parentId" : "50c30805-18cf-49c1-9951-73564418e647",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I was looking for `map` and was really sad not to find it. I did not even think of comprehension. I guess my Python is getting very rusty at this point.",
        "createdAt" : "2020-10-16T13:51:59Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e0979856-d109-4deb-966c-e693363e38d3",
        "parentId" : "50c30805-18cf-49c1-9951-73564418e647",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Ah well. @cocreature's solution is much better. :grinning: ",
        "createdAt" : "2020-10-16T13:54:05Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b0d1972-d4ac-436b-8230-9f4fa3de674c",
        "parentId" : "50c30805-18cf-49c1-9951-73564418e647",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Actually I think I can one-up that.",
        "createdAt" : "2020-10-16T13:59:23Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8bdc21a3b71d34cde90c47f4790277d8b1843bdd",
    "line" : null,
    "diffHunk" : "@@ -1,6 +1,15 @@\n # Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n+def is_figure(c):\n+    return c == \"0\" or c == \"1\" or c == \"2\" or c == \"3\" or c == \"4\" or c == \"5\" or c == \"6\" or c == \"7\" or c == \"8\" or c == \"9\"\n+\n+def is_number(s):\n+    for c in s.elems():\n+        if not is_figure(c):\n+            return False\n+    return True"
  },
  {
    "id" : "e9aaa4c6-7d7e-4ce5-b1fe-6cd5c74f563a",
    "prId" : 7717,
    "comments" : [
      {
        "id" : "229efa81-eccb-4a51-ac48-f912fb2ef480",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n        ghc_list = [segment for segment in semver.replace(\"-\", \".\").split(\".\") if is_number(segment)]\r\n        ghc = \".\".join(ghc_list)\r\n```",
        "createdAt" : "2020-10-16T13:46:23Z",
        "updatedAt" : "2020-10-16T14:13:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8bdc21a3b71d34cde90c47f4790277d8b1843bdd",
    "line" : null,
    "diffHunk" : "@@ -12,11 +21,17 @@ def _impl(ctx):\n     # Generates a simple Bazel file that just sets a bunch of Bazel variables,\n     # so they can be used in our main Bazel BUILD files.\n     semver = ctx.os.environ.get(\"DAML_SDK_RELEASE_VERSION\", default = \"0.0.0\")\n-    if semver.find(\"-snapshot.\") > 0:\n-        ghc = semver[:-9].replace(\"-snapshot.\", \".\")\n+    if semver.find(\"-\") > 0:\n+        ghc_list = []\n+        for segment in semver.replace(\"-\", \".\").split(\".\"):\n+            if is_number(segment):\n+                ghc_list.append(segment)\n+        ghc = ghc_list[0]\n+        for elem in ghc_list[1:]:\n+            ghc = ghc + \".\" + elem"
  },
  {
    "id" : "2dfd386a-357b-4478-8674-cd579c31612f",
    "prId" : 5272,
    "comments" : [
      {
        "id" : "6da757b5-f750-46dc-873e-9eb8d3e518e4",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This did not spark joy.",
        "createdAt" : "2020-03-31T10:43:51Z",
        "updatedAt" : "2020-04-01T06:51:55Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "79f414f0-2667-49c2-9a44-3d1c74d35c33",
        "parentId" : "6da757b5-f750-46dc-873e-9eb8d3e518e4",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Removing it did though âœ¨ ",
        "createdAt" : "2020-03-31T10:57:23Z",
        "updatedAt" : "2020-04-01T06:51:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89330f7b27582cdb0a66d5353de307e46c5e2267",
    "line" : 5,
    "diffHunk" : "@@ -16,8 +16,6 @@ def _impl(ctx):\n         ghc = semver[:-9].replace(\"-snapshot.\", \".\")\n     else:\n         ghc = semver\n-    major = semver[0:semver.find(\".\")]\n-    mvn = str(int(major) + 100) + semver[semver.find(\".\"):]"
  },
  {
    "id" : "769536c6-59b1-4cbe-9a0a-05efe42eb937",
    "prId" : 4513,
    "comments" : [
      {
        "id" : "97090128-0439-401a-9d57-fee17e3b8608",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If we get to multi-digit major versions we are going to jump from `109` to `1010` which seems at the very least a bit odd.",
        "createdAt" : "2020-02-19T09:56:26Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3e1dc98a-3fa9-4119-8af1-0e1e2d9a3ba7",
        "parentId" : "97090128-0439-401a-9d57-fee17e3b8608",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I think we really should aim to fix this discrepancy before we reach 1.0, but I'll update this to parse the number and do +100 so we're safe.",
        "createdAt" : "2020-02-19T12:31:30Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bcd54e56-1085-4a45-ba81-7c50a87bff52",
        "parentId" : "97090128-0439-401a-9d57-fee17e3b8608",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Iâ€™m also fine with keeping it for now, maybe just add a TODO.",
        "createdAt" : "2020-02-19T15:13:42Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81246bd2733ace93653cb663dca5a0cdaf7c11e9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,42 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def _impl(ctx):\n+    # Generates an empty BUILD file, because we do not need to build anything.\n+    ctx.file(\n+        \"BUILD\",\n+        content = \"\",\n+        executable = False,\n+    )\n+\n+    # Generates a simple Bazel file that just sets a bunch of Bazel variables,\n+    # so they can be used in our main Bazel BUILD files.\n+    semver = ctx.os.environ.get(\"DAML_SDK_RELEASE_VERSION\", default = \"0.0.0\")\n+    if semver.find(\"-alpha.\") > 0:\n+        ghc = semver[:-9].replace(\"-alpha.\", \".\")\n+    else:\n+        ghc = semver\n+    ctx.file(\n+        \"configuration.bzl\",\n+        content =\n+            \"\"\"\n+npm_version = \"{NPM_VERSION}\"\n+mvn_version = \"{MVN_VERSION}\"\n+ghc_version = \"{GHC_VERSION}\"\n+sdk_version = \"{SDK_VERSION}\"\n+\"\"\".format(\n+                SDK_VERSION = semver,\n+                NPM_VERSION = semver,\n+                MVN_VERSION = \"10\" + semver,"
  },
  {
    "id" : "37bdfc4f-2894-4345-a9db-59b9475ebdfc",
    "prId" : 4513,
    "comments" : [
      {
        "id" : "8097b0cb-6fda-4e71-b507-9ce45bb8f3c5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just to make sure I understand the implications of this correctly:\r\n\r\n* Everything that currently depends on `//:VERSION` and embeds it in some form will default to embedding `0.0.0` instead.\r\n* If I want to reproduce a release commit build, it is not sufficient to checkout the commit. I have to set the environment variable.\r\n* In a release build everything that embeds the version number will get the the version number specified in `LATEST`.\r\n* `daml-sdk-head` will embed `0.0.0` whereas before it embedded things from `LATEST`.\r\n\r\nMy two main worries here are:\r\n\r\n1. Caching will get significantly worse for release builds.\r\n2. If there are issues relating to the version number (Iâ€™m particularly thinking of `damlc`, `daml-stdlib` and cross-SDK dependencies here. Iâ€™m not _aware_ of anything that should go wrong but this is finicky), we will not catch them until we do a release build which actually changes the version number used in the build.\r\n\r\nI donâ€™t have a great answer for either of those. Iâ€™d feel a bit more comfortable about 2 if we ran tests on release builds with the version number set but that also means release builds will basically rebuild and retest the world (I believe both sandbox and damlc embed the version number). Still seems better than catching the issue due to manual testing.\r\n\r\nThe only other idea that I have is to continue for now to embed the SDK version from `LATEST` if the environment variable is not set. That at least seems to reduce the number of moving parts compared to the current SDK release process and should help with 1 and partially with 2 although it doesnâ€™t quite match up.",
        "createdAt" : "2020-02-19T10:46:40Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "08b23975-f4ac-49ad-bce8-d6927ee720b0",
        "parentId" : "8097b0cb-6fda-4e71-b507-9ce45bb8f3c5",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "> Just to make sure I understand the implications of this correctly:\r\n> \r\n> * Everything that currently depends on `//:VERSION` and embeds it in some form will default to embedding `0.0.0` instead.\r\n\r\nYes.\r\n\r\n> * If I want to reproduce a release commit build, it is not sufficient to checkout the commit. I have to set the environment variable.\r\n\r\nYes.\r\n\r\n> * In a release build everything that embeds the version number will get the the version number specified in `LATEST`.\r\n\r\nWith the exception of Maven artifacts, which get a +100, and some GHC-internal things which (for snapshot builds) get a slightly simplified version string.\r\n\r\nThis is not magic though, this is CI setting the env var based on the LATEST file of the release commit (the one triggering the release) while building the source commit (the one whose SHA is in the LATEST file in the release commit).\r\n\r\nSo if LATEST says `abc 0.1.2`, CI is doing\r\n\r\n```\r\ngit checkout abc\r\nDAML_SDK_RELEASE_VERSION=0.1.2 bazel build //...\r\n```\r\n\r\n> * `daml-sdk-head` will embed `0.0.0` whereas before it embedded things from `LATEST`.\r\n\r\n`daml-sdk-head always had `0.0.0`. It used to take artifacts built with `VERSION` and then \"manually\" patching them to change their version number before embedding them in the tarball. Now it builds the tarball directly from artifacts built as `0.0.0`.\r\n\r\n> My two main worries here are:\r\n> \r\n> 1. Caching will get significantly worse for release builds.\r\n\r\nRelease builds were already specifically builds that changed the VERSION file, so this is not getting worse in any way that I can see.\r\n\r\n> 2. If there are issues relating to the version number (Iâ€™m particularly thinking of `damlc`, `daml-stdlib` and cross-SDK dependencies here. Iâ€™m not _aware_ of anything that should go wrong but this is finicky), we will not catch them until we do a release build which actually changes the version number used in the build.\r\n\r\nTrue, and thanks for raising. I will change the CI configuration to run those tests against the release PR (rather than not run them at all, which is what this PR currently does).\r\n\r\n> \r\n> I donâ€™t have a great answer for either of those. Iâ€™d feel a bit more comfortable about 2 if we ran tests on release builds with the version number set but that also means release builds will basically rebuild and retest the world (I believe both sandbox and damlc embed the version number). Still seems better than catching the issue due to manual testing.\r\n\r\nI agree. Though I strongly suspect that if our tests break on a version change like that, it's going to be a false positive, i.e. a wrong assumption in the test rather than an error in the binary produced.\r\n\r\n> \r\n> The only other idea that I have is to continue for now to embed the SDK version from `LATEST` if the environment variable is not set. That at least seems to reduce the number of moving parts compared to the current SDK release process and should help with 1 and partially with 2 although it doesnâ€™t quite match up.\r\n\r\nI don't think that solves anything, really. It would not change anything to 1; the only difference for 2 is that currently we do effectively run the test suite with the env var set on the release PR (so, again, adding this here would not make it worse, AFAICT).",
        "createdAt" : "2020-02-19T13:10:06Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81246bd2733ace93653cb663dca5a0cdaf7c11e9",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,42 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+def _impl(ctx):\n+    # Generates an empty BUILD file, because we do not need to build anything.\n+    ctx.file(\n+        \"BUILD\",\n+        content = \"\",\n+        executable = False,\n+    )\n+\n+    # Generates a simple Bazel file that just sets a bunch of Bazel variables,\n+    # so they can be used in our main Bazel BUILD files.\n+    semver = ctx.os.environ.get(\"DAML_SDK_RELEASE_VERSION\", default = \"0.0.0\")"
  }
]