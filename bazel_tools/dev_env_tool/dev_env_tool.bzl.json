[
  {
    "id" : "1c4fae04-8a89-4160-aabc-1c28170d2d86",
    "prId" : 5919,
    "comments" : [
      {
        "id" : "4721f88a-eaa7-4c72-a228-21092ac7694d",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "[`string_list_dict`](https://docs.bazel.build/versions/master/skylark/lib/attr.html#string_list_dict) would be a good alternative to all this string splitting logic. It could use the `tool` as the key.",
        "createdAt" : "2020-05-12T10:19:44Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4949fcc6-e111-4918-8673-b4a796e763b3",
        "parentId" : "4721f88a-eaa7-4c72-a228-21092ac7694d",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good idea! I was looking for a list of list of strings, but couldn't find it.",
        "createdAt" : "2020-05-12T12:29:22Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ca525ecf-c235-4978-91b0-0997ad522a27",
        "parentId" : "4721f88a-eaa7-4c72-a228-21092ac7694d",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done. That's much nicer, thanks!",
        "createdAt" : "2020-05-13T10:05:19Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d5ba9fce-ec3d-4f42-80ef-468219fa4134",
        "parentId" : "4721f88a-eaa7-4c72-a228-21092ac7694d",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Thanks, yes looks much better.",
        "createdAt" : "2020-05-13T12:04:48Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f7e8bff0eb68cdffcfcee20ae1cf05195f1fa5c4",
    "line" : null,
    "diffHunk" : "@@ -4,31 +4,48 @@\n load(\"@bazel_tools//tools/cpp:lib_cc_configure.bzl\", \"get_cpu_value\")\n load(\"@rules_sh//sh:posix.bzl\", \"posix\")\n \n-def _create_build_content(rule_name, tools, win_paths, nix_paths):\n+def _create_build_content(rule_name, is_windows, tools, tool_dependencies, win_paths, nix_paths):\n     content = \"\"\"\n # DO NOT EDIT: automatically generated BUILD file for dev_env_tool.bzl: {rule_name}\n+\n package(default_visibility = [\"//visibility:public\"])\n \n filegroup(\n     name = \"all\",\n     srcs = glob([\"**\"]),\n )\n-        \"\"\".format(rule_name = rule_name)\n+\"\"\".format(rule_name = rule_name)\n \n     for i in range(0, len(tools)):\n-        content += \"\"\"\n+        if is_windows:\n+            content += \"\"\"\n filegroup(\n     name = \"{tool}\",\n-    srcs = select({{\n-        \":windows\": [\"{win_path}\"],\n-        \"//conditions:default\": [\"{nix_path}\"],\n-    }}),\n+    srcs = [\"{path}\"],\n+)\n+\n+sh_binary(\n+    name = \"{tool}.exe\",\n+    srcs = [\":{tool}\"],\n+    data = {dependencies},\n+)\n+\"\"\".format(\n+                tool = tools[i],\n+                dependencies = [\":{}.exe\".format(dep.strip()) for dep in tool_dependencies[i].split(\",\") if dep.strip()] if i < len(tool_dependencies) else [],\n+                path = win_paths[i],\n+            )\n+        else:\n+            content += \"\"\"\n+sh_binary(\n+    name = \"{tool}\",\n+    srcs = [\"{path}\"],\n+    data = {dependencies},\n )\n-            \"\"\".format(\n-            tool = tools[i],\n-            win_path = win_paths[i],\n-            nix_path = nix_paths[i],\n-        )\n+\"\"\".format(\n+                tool = tools[i],\n+                dependencies = [\":{}\".format(dep.strip()) for dep in tool_dependencies[i].split(\",\") if dep.strip()] if i < len(tool_dependencies) else [],"
  },
  {
    "id" : "f520d45f-d081-4f70-8234-e971e5c8e959",
    "prId" : 5919,
    "comments" : [
      {
        "id" : "650670e8-108d-429c-83c9-fcfded6034b3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t understand all those changes. `bazel run @postgresql_dev_env//:pg_ctl -- --help` seems to work just fine for me locally? Is this only about Windows? If so, we don’t actually seem to be using this on Windows.",
        "createdAt" : "2020-05-12T11:17:31Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "26995d17-7a88-4153-9971-f95eb6b990fe",
        "parentId" : "650670e8-108d-429c-83c9-fcfded6034b3",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "That's odd. If I run that command on `master`, I get:\r\n\r\n```\r\n$ bazel run @postgresql_dev_env//:pg_ctl -- --help\r\nINFO: Invocation ID: d52bb82b-794b-4612-8d97-2cb1ffc196ab\r\nERROR: Cannot run target @postgresql_dev_env//:pg_ctl: Not executable\r\n```\r\n\r\nCan you please double-check you were on the `master` branch?",
        "createdAt" : "2020-05-12T14:48:42Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a78d82c1-ea4d-4df2-b348-0569c732fa31",
        "parentId" : "650670e8-108d-429c-83c9-fcfded6034b3",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh you’re right, I ran `bazel run @postgresql_nix//:bin/pg_ctl` which does work but I guess fixing dev-env is sensible even if we do not use this on Windows atm.",
        "createdAt" : "2020-05-12T14:50:31Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "96127a1b-de13-496e-ba7a-9ae0e344c2ff",
        "parentId" : "650670e8-108d-429c-83c9-fcfded6034b3",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Planning on making it work on Windows in this PR too; just haven't got around to it yet.",
        "createdAt" : "2020-05-12T15:40:06Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f7e8bff0eb68cdffcfcee20ae1cf05195f1fa5c4",
    "line" : 16,
    "diffHunk" : "@@ -4,31 +4,48 @@\n load(\"@bazel_tools//tools/cpp:lib_cc_configure.bzl\", \"get_cpu_value\")\n load(\"@rules_sh//sh:posix.bzl\", \"posix\")\n \n-def _create_build_content(rule_name, tools, win_paths, nix_paths):\n+def _create_build_content(rule_name, is_windows, tools, tool_dependencies, win_paths, nix_paths):\n     content = \"\"\"\n # DO NOT EDIT: automatically generated BUILD file for dev_env_tool.bzl: {rule_name}\n+\n package(default_visibility = [\"//visibility:public\"])\n \n filegroup(\n     name = \"all\",\n     srcs = glob([\"**\"]),\n )\n-        \"\"\".format(rule_name = rule_name)\n+\"\"\".format(rule_name = rule_name)"
  },
  {
    "id" : "ac1f3244-7115-473a-877d-0a0662b567de",
    "prId" : 5919,
    "comments" : [
      {
        "id" : "da83cdcc-6944-44af-8bed-a9d6b1432927",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "This hard-codes that all `tool_dependencies` should end on `.exe` on Windows. That's a bit confusing, `tool_dependencies` sounds like it could be any kind of runtime dependencies, including data files. ",
        "createdAt" : "2020-05-12T11:24:17Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5ddacb33-5b54-4a93-be7a-03f5aac2a19c",
        "parentId" : "da83cdcc-6944-44af-8bed-a9d6b1432927",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good point. I want to say \"tools that this tool depends on\", but that's a bit long-winded. Got a better name?",
        "createdAt" : "2020-05-12T12:29:11Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e9f7553a-a9df-4e7b-b2e1-1ca28d79f634",
        "parentId" : "da83cdcc-6944-44af-8bed-a9d6b1432927",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Hmm, hard to say, maybe `tool_binaries`, or `extra_tools`. If in doubt a [`doc` attribute](https://docs.bazel.build/versions/master/skylark/lib/attr.html#label_list.doc) would also help to clarify this.",
        "createdAt" : "2020-05-12T13:39:26Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cc96e011-d1cd-4234-9e84-8c55b0c5c3de",
        "parentId" : "da83cdcc-6944-44af-8bed-a9d6b1432927",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Going with `required_tools`. 🙂 ",
        "createdAt" : "2020-05-13T08:34:52Z",
        "updatedAt" : "2020-05-13T16:07:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f7e8bff0eb68cdffcfcee20ae1cf05195f1fa5c4",
    "line" : null,
    "diffHunk" : "@@ -4,31 +4,48 @@\n load(\"@bazel_tools//tools/cpp:lib_cc_configure.bzl\", \"get_cpu_value\")\n load(\"@rules_sh//sh:posix.bzl\", \"posix\")\n \n-def _create_build_content(rule_name, tools, win_paths, nix_paths):\n+def _create_build_content(rule_name, is_windows, tools, tool_dependencies, win_paths, nix_paths):\n     content = \"\"\"\n # DO NOT EDIT: automatically generated BUILD file for dev_env_tool.bzl: {rule_name}\n+\n package(default_visibility = [\"//visibility:public\"])\n \n filegroup(\n     name = \"all\",\n     srcs = glob([\"**\"]),\n )\n-        \"\"\".format(rule_name = rule_name)\n+\"\"\".format(rule_name = rule_name)\n \n     for i in range(0, len(tools)):\n-        content += \"\"\"\n+        if is_windows:\n+            content += \"\"\"\n filegroup(\n     name = \"{tool}\",\n-    srcs = select({{\n-        \":windows\": [\"{win_path}\"],\n-        \"//conditions:default\": [\"{nix_path}\"],\n-    }}),\n+    srcs = [\"{path}\"],\n+)\n+\n+sh_binary(\n+    name = \"{tool}.exe\",\n+    srcs = [\":{tool}\"],\n+    data = {dependencies},\n+)\n+\"\"\".format(\n+                tool = tools[i],\n+                dependencies = [\":{}.exe\".format(dep.strip()) for dep in tool_dependencies[i].split(\",\") if dep.strip()] if i < len(tool_dependencies) else [],"
  },
  {
    "id" : "6e08d9c0-b9a3-4b79-9d2a-515ab2bf7596",
    "prId" : 3377,
    "comments" : [
      {
        "id" : "37523555-95c5-4d9a-a466-7f90676e4ed4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t understand how we can get here if `source` is a file. `find -type f file` will return the file afaik so it should be nonempty in this case. What am I missing?",
        "createdAt" : "2019-11-07T14:10:13Z",
        "updatedAt" : "2019-11-07T16:21:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "14f19719-b3d0-445c-b3d7-0bfd2986e272",
        "parentId" : "37523555-95c5-4d9a-a466-7f90676e4ed4",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "That's a side-effect of `-printf \"%P\"`. This tells `find` to print the path relative to the starting-point. If the starting point is a file, then it prints no output.\r\n\r\nHowever, turns out that BSD find does not support `-printf` and we have to do manual string mangling to get relative paths anyway, so this is gone now.",
        "createdAt" : "2019-11-07T14:19:07Z",
        "updatedAt" : "2019-11-07T16:21:47Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cafff0f2-f59c-40cf-b68c-3ebfbe332bcb",
        "parentId" : "37523555-95c5-4d9a-a466-7f90676e4ed4",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks for the explanation!",
        "createdAt" : "2019-11-07T14:26:55Z",
        "updatedAt" : "2019-11-07T16:21:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81cc93fb-1057-47c3-abb5-9740cbf08406",
        "parentId" : "37523555-95c5-4d9a-a466-7f90676e4ed4",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "You could maybe run `find .` with the current working directory as `root`. This should make it easier.\r\n\r\n```python\r\n>>> root = os.path.join(os.getcwd(), 'bazel_tools')\r\n>>> root\r\n'/Users/samirtalwar/src/digital-asset/daml/bazel_tools'\r\n>>> found = subprocess.run(['find', '.', '-type', 'd'], cwd=root, stdout=subprocess.PIPE, encoding='utf-8').stdout.strip().split('\\n')\r\n>>> found\r\n['.', './packaging', './client_server_test', './client_server_test/runner', './client_server_test/tests', './docs', './runfiles', './runfiles/src', './runfiles/src/main', './runfiles/src/main/scala', './runfiles/src/main/scala/com', './runfiles/src/main/scala/com/digitalasset', './runfiles/src/main/scala/com/digitalasset/daml', './runfiles/src/main/scala/com/digitalasset/daml/bazeltools', './java_testing', './dev_env_package']\r\n>>> [os.path.normpath(d) for d in found]\r\n['.', 'packaging', 'client_server_test', 'client_server_test/runner', 'client_server_test/tests', 'docs', 'runfiles', 'runfiles/src', 'runfiles/src/main', 'runfiles/src/main/scala', 'runfiles/src/main/scala/com', 'runfiles/src/main/scala/com/digitalasset', 'runfiles/src/main/scala/com/digitalasset/daml', 'runfiles/src/main/scala/com/digitalasset/daml/bazeltools', 'java_testing', 'dev_env_package']\r\n",
        "createdAt" : "2019-11-07T14:37:02Z",
        "updatedAt" : "2019-11-07T16:21:47Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a60260f9-e30a-4386-a9a7-6d751a2761c2",
        "parentId" : "37523555-95c5-4d9a-a466-7f90676e4ed4",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I guess you can't use `os.path` in Bazel (though I have no real clue) but hopefully it'll still make it cleaner?",
        "createdAt" : "2019-11-07T14:39:34Z",
        "updatedAt" : "2019-11-07T16:21:47Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6e8a0212-aed5-4509-a09a-38466b9e0432",
        "parentId" : "37523555-95c5-4d9a-a466-7f90676e4ed4",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "@SamirTalwar Yes, that would be a nice simplification. Sadly, I haven't found a way to make it work in Bazel. [`repository_ctx.execute`](https://docs.bazel.build/versions/master/skylark/lib/repository_ctx.html#execute) does allow to change the working directory. But, if `root` is a file, which is e.g. the case with `@tar_dev_env`, then this will fail. The `repository_ctx` API does not provide an easy way to distinguish between files and directories, so we can't just branch. ",
        "createdAt" : "2019-11-07T14:56:17Z",
        "updatedAt" : "2019-11-07T16:21:47Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "63a35cde-4463-4dcb-8a94-c663272941fa",
        "parentId" : "37523555-95c5-4d9a-a466-7f90676e4ed4",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Aha, I didn't expect that. Thanks for clarifying. 😄 ",
        "createdAt" : "2019-11-07T14:57:07Z",
        "updatedAt" : "2019-11-07T16:21:47Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "11f77c9e08e64af922cbaa0035b9702cc6f41d58",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,140 @@\n+# Copyright (c) 2019 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+load(\"@bazel_tools//tools/cpp:lib_cc_configure.bzl\", \"get_cpu_value\")\n+\n+def _create_build_content(rule_name, tools, win_paths, nix_paths):\n+    content = \"\"\"\n+# DO NOT EDIT: automatically generated BUILD file for dev_env_tool.bzl: {rule_name}\n+package(default_visibility = [\"//visibility:public\"])\n+\n+filegroup(\n+    name = \"all\",\n+    srcs = glob([\"**\"]),\n+)\n+        \"\"\".format(rule_name = rule_name)\n+\n+    for i in range(0, len(tools)):\n+        content += \"\"\"\n+filegroup(\n+    name = \"{tool}\",\n+    srcs = select({{\n+        \":windows\": [\"{win_path}\"],\n+        \"//conditions:default\": [\"{nix_path}\"],\n+    }}),\n+)\n+            \"\"\".format(\n+            tool = tools[i],\n+            win_path = win_paths[i],\n+            nix_path = nix_paths[i],\n+        )\n+\n+    content += \"\"\"\n+config_setting(\n+    name = \"windows\",\n+    values = {\"cpu\": \"x64_windows\"},\n+    visibility = [\"//visibility:private\"],\n+)\n+\"\"\"\n+\n+    return content\n+\n+def _dadew_where(ctx, ps):\n+    ps = ctx.which(\"powershell\")\n+    ps_result = ctx.execute([ps, \"-Command\", \"dadew enable; dadew where\"], quiet = True)\n+\n+    if ps_result.return_code != 0:\n+        fail(\"Failed to obtain dadew location.\\nExit code %d.\\n%s\\n%s\" %\n+             (ps_result.return_code, ps_result.stdout, ps_result.stderr))\n+\n+    return ps_result.stdout.splitlines()[0]\n+\n+def _dadew_tool_home(dadew, tool):\n+    return \"%s\\\\scoop\\\\apps\\%s\\\\current\" % (dadew, tool)\n+\n+def _find_files_recursive(ctx, find, root):\n+    find_result = ctx.execute([find, \"-L\", root, \"-type\", \"f\", \"-printf\", \"%P\\\\0\"])\n+\n+    if find_result.return_code != 0:\n+        fail(\"Failed to list files contained in '%s':\\nExit code %d\\n%s\\n%s.\" %\n+             (root, find_result.return_code, find_result.stdout, find_result.stderr))\n+\n+    return [f for f in find_result.stdout.split(\"\\0\") if f]\n+\n+def _symlink_files_recursive(ctx, find, source, dest):\n+    files = _find_files_recursive(ctx, find, source)\n+    for f in files:\n+        ctx.symlink(\"%s/%s\" % (source, f), \"%s/%s\" % (dest, f))\n+    if not files:\n+        # If no files where found source might be an empty directory or a file."
  }
]