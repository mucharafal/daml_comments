[
  {
    "id" : "488af2ad-29d2-40ca-90f4-9ec0aef60cbb",
    "prId" : 6884,
    "comments" : [
      {
        "id" : "e69a2489-bacd-4cca-a382-40baa140b606",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Due to https://github.com/NixOS/nixpkgs/issues/94222 `readlink -f` doesn't work on MacOS within `ctx.actions.run`.",
        "createdAt" : "2020-07-30T10:00:06Z",
        "updatedAt" : "2020-08-05T14:02:53Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "19f57f0075be4b6776ef77d0a7374fd6831b28dd",
    "line" : 25,
    "diffHunk" : "@@ -16,17 +16,60 @@\n # On Windows we only handle statically linked binaries\n # (Haskell binaries are linked statically on Windows) so we\n # just copy the binary and the resources and create a tarball from that.\n+\n+# Copy-pasted from the Bazel Bash runfiles library v2.\n+set -uo pipefail; f=bazel_tools/tools/bash/runfiles/runfiles.bash\n+source \"${RUNFILES_DIR:-/dev/null}/$f\" 2>/dev/null || \\\n+  source \"$(grep -sm1 \"^$f \" \"${RUNFILES_MANIFEST_FILE:-/dev/null}\" | cut -f2- -d' ')\" 2>/dev/null || \\\n+  source \"$0.runfiles/$f\" 2>/dev/null || \\\n+  source \"$(grep -sm1 \"^$f \" \"$0.runfiles_manifest\" | cut -f2- -d' ')\" 2>/dev/null || \\\n+  source \"$(grep -sm1 \"^$f \" \"$0.exe.runfiles_manifest\" | cut -f2- -d' ')\" 2>/dev/null || \\\n+  { echo>&2 \"ERROR: cannot find $f\"; exit 1; }; f=; set -e\n+# --- end runfiles.bash initialization v2 ---\n+\n+case \"$(uname -s)\" in\n+  Darwin)\n+    abspath() { python -c 'import os.path, sys; sys.stdout.write(os.path.abspath(sys.argv[1]))' \"$@\"; }\n+    canonicalpath() { python -c 'import os.path, sys; sys.stdout.write(os.path.realpath(sys.argv[1]))' \"$@\"; }\n+    ;;\n+  *)\n+    abspath() { realpath -s \"$@\"; }\n+    canonicalpath() { readlink -f \"$@\"; }\n+    ;;\n+esac"
  },
  {
    "id" : "c327ebbb-2ea5-4365-92a2-4d9ca9680bc7",
    "prId" : 3093,
    "comments" : [
      {
        "id" : "a455788e-baa3-47e6-8246-6eb55b50bf80",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This was already broken before but we didnâ€™t hit it. `loader_path` needs to be resolved relative to the library not the executable.",
        "createdAt" : "2019-10-11T14:14:51Z",
        "updatedAt" : "2019-10-11T14:43:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "48b99fc80d44ff6b71bc4aa0c5e439eead0e8188",
    "line" : 8,
    "diffHunk" : "@@ -116,14 +116,16 @@ elif [[ \"$(uname -s)\" == \"Darwin\" ]]; then\n   cp $SRC $WORKDIR/$NAME/$NAME\n   chmod u+w $WORKDIR/$NAME/$NAME\n   function copy_deps() {\n-    local from=$1\n-    local needed=\"$(/usr/bin/otool -L \"$from\" | sed -n -e '1d' -e 's/^\\s*\\([^ ]*\\).*$/\\1/p')\"\n-    loader_path=\"$ORIGIN\"\n-    local rpaths=\"$(/usr/bin/otool -l $from | sed -n '/cmd LC_RPATH/{n;n;p;}' | sed -n -e 's/^.*path \\([^ ]*\\).*$/\\1/p' | sed -e \"s|@loader_path|$loader_path|\")\"\n+    local from_original=$(readlink -f $1)"
  }
]