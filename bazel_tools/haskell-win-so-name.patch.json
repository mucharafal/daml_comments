[
  {
    "id" : "3b8174e3-8603-4e11-a1dd-2021079a181c",
    "prId" : 237,
    "comments" : [
      {
        "id" : "300e342a-bf81-470d-83fc-2d9410ee893a",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "Looks like you forgot to update this comment.",
        "createdAt" : "2019-04-05T06:33:23Z",
        "updatedAt" : "2019-04-05T08:55:34Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4fb54e37-1522-4e4f-b04b-0db5456b8972",
        "parentId" : "300e342a-bf81-470d-83fc-2d9410ee893a",
        "author" : {
          "login" : "nmattia-da",
          "name" : "Nicolas Mattia",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/44666606?v=4"
        },
        "body" : "Thanks.",
        "createdAt" : "2019-04-05T08:56:55Z",
        "updatedAt" : "2019-04-05T08:56:56Z",
        "lastEditedBy" : {
          "login" : "nmattia-da",
          "name" : "Nicolas Mattia",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/44666606?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "991707e8d2c47b371c5090937a842828f215aa30",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,78 @@\n+This fixes the name of Haskell shared objects on Windows. By default Bazel's\n+cc_library generates '.so' files, whereas GHC expects a `.dll` (or a few other\n+extensions, non of which are `.so`):\n+https://github.com/ghc/ghc/blob/51fd357119b357c52e990ccce9059c423cc49406/rts/linker/PEi386.c#L684\n+\n+Drop this patch when this issue is closed:\n+https://github.com/tweag/rules_haskell/issues/811\n+\n+diff --git a/haskell/private/path_utils.bzl b/haskell/private/path_utils.bzl\n+index e0af527..9b61fd2 100644\n+--- a/haskell/private/path_utils.bzl\n++++ b/haskell/private/path_utils.bzl\n+@@ -160,6 +160,39 @@ def darwin_convert_to_dylibs(hs, libs):\n+             new_libs.append(lib)\n+     return new_libs\n+ \n++def windows_convert_to_dlls(hs, libs):\n++    \"\"\"Convert .so dynamic libraries to .dll.\n++\n++    Bazel's cc_library rule will create .so files for dynamic libraries even\n++    on Windows. GHC's builtin linker, which is used during compilation, GHCi,\n++    or doctests, hard-codes the assumption that all dynamic libraries on Windows\n++    end on .dll. This function serves as an adaptor and produces symlinks\n++    from a .dll version to the .so version for every dynamic library\n++    dependencies that does not end on .dll.\n++\n++    Args:\n++      hs: Haskell context.\n++      libs: List of library files dynamic or static.\n++\n++    Returns:\n++      List of library files where all dynamic libraries end on .dll.\n++    \"\"\"\n++    lib_prefix = \"_dlls\"\n++    new_libs = []\n++    for lib in libs:\n++        if is_shared_library(lib) and lib.extension != \"dll\":\n++            dll_name = paths.join(\n++                target_unique_name(hs, lib_prefix),\n++                lib.dirname,\n++                \"lib\" + get_lib_name(lib) + \".dll\",\n++            )\n++            dll = hs.actions.declare_file(dll_name)\n++            ln(hs, lib, dll)\n++            new_libs.append(dll)\n++        else:\n++            new_libs.append(lib)\n++    return new_libs\n++\n+ def get_lib_name(lib):\n+     \"\"\"Return name of library by dropping extension and \"lib\" prefix.\n+ \n+diff --git a/haskell/private/providers.bzl b/haskell/private/providers.bzl\n+index bc35217..d9d55dd 100644\n+--- a/haskell/private/providers.bzl\n++++ b/haskell/private/providers.bzl\n+@@ -1,6 +1,7 @@\n+ load(\n+     \":private/path_utils.bzl\",\n+     \"darwin_convert_to_dylibs\",\n++    \"windows_convert_to_dlls\",\n+     \"is_shared_library\",\n+     \"make_path\",\n+ )\n+@@ -144,6 +145,13 @@ def get_libs_for_ghc_linker(hs, transitive_cc_dependencies, path_prefix = None):\n+ \n+         # Additionally ghc 8.4 requires library_deps here although 8.6 does not\n+         ld_library_deps = library_deps + _ld_library_deps\n++\n++    if hs.toolchain.is_windows:\n++        # GHC's builtin linker requires .dylib files on MacOS."
  }
]