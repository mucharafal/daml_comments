[
  {
    "id" : "f8bab8b4-7b30-480c-b31e-46c9162d97a4",
    "prId" : 7668,
    "comments" : [
      {
        "id" : "9459728f-a32d-421a-bde1-47997c01b306",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "My `hiding` you mean we donâ€™t pass it along? Do you know why we even have this field then?",
        "createdAt" : "2020-10-13T13:56:30Z",
        "updatedAt" : "2020-10-13T14:56:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "021a080b-e218-4275-8537-0d0e3dcace89",
        "parentId" : "9459728f-a32d-421a-bde1-47997c01b306",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "It's there to make sure it doesn't end up in `kwargs`.",
        "createdAt" : "2020-10-13T14:32:02Z",
        "updatedAt" : "2020-10-13T14:56:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "53c3e95515c391f64a3dcf73065154f763e9a435",
    "line" : 20,
    "diffHunk" : "@@ -173,11 +176,24 @@ def _set_jvm_flags(\n     })\n     return result\n \n-def _wrap_rule(rule, name = \"\", scalacopts = [], plugins = [], generated_srcs = [], **kwargs):\n+def _wrap_rule(\n+        rule,\n+        name = \"\",\n+        scalacopts = [],\n+        plugins = [],\n+        generated_srcs = [],  # hiding from the underlying rule"
  },
  {
    "id" : "e6ced054-8b03-48e0-a9e4-cc2c249c2ee1",
    "prId" : 6907,
    "comments" : [
      {
        "id" : "3cfced13-b31b-419e-ab83-f62f0da429e1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this no longer true or do you just not consider it important enough of a reason to disable it everywhere? Very happy to enable it so just curious.",
        "createdAt" : "2020-07-29T06:34:36Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7e65f7f1-9c1d-44e5-a52b-9838584daefb",
        "parentId" : "3cfced13-b31b-419e-ab83-f62f0da429e1",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This `for` issue still exists, though more is required to encounter it than simply making a binding. I have included in this PR `silent` annotations for all `1` cases in the codebase where we trigger this issue.\r\n\r\nI think these sorts of things are a big problem if you don't have `silent`, and become significantly less so when you do.",
        "createdAt" : "2020-08-06T18:55:29Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0be6183109e0ca2416eea13d320bcf30594c3988",
    "line" : 4,
    "diffHunk" : "@@ -71,9 +71,7 @@ common_scalacopts = [\n     # Gives a warning for functions declared as returning Unit, but the body returns a value\n     \"-Ywarn-value-discard\",\n     \"-Ywarn-unused-import\",\n-    # unfortunately give false warning for the `(a, b) = someTuple`"
  },
  {
    "id" : "0a463592-70c0-40ef-9282-f6580e3d7302",
    "prId" : 6907,
    "comments" : [
      {
        "id" : "a976a0c4-60b3-4a81-9418-2b7cccafffc8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Are we keeping `lf_scalacopts` around for a reason?",
        "createdAt" : "2020-08-07T07:11:34Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a690912a-f069-4b87-80fe-0d8ccf576145",
        "parentId" : "a976a0c4-60b3-4a81-9418-2b7cccafffc8",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It turned out to be very useful, since it made it possible to fully migrate part of the codebase to the flag (in fact, I wish there were more partitions of the codebase with cross-project scalacopts sets like this one), it would be a hassle to remove, and it would be a hassle to restore.\r\n\r\nRemoving it would be like saying about a Scala build that supported cross-version builds \"well, we support the latest Scala version, and it's not like they're ever going to release a new Scala version, right?\"",
        "createdAt" : "2020-08-07T14:50:52Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0be6183109e0ca2416eea13d320bcf30594c3988",
    "line" : 16,
    "diffHunk" : "@@ -135,7 +133,6 @@ plugin_scalacopts = [\n # []\n # ^ means nothing to remove\n lf_scalacopts = [\n-    \"-Ywarn-unused\",\n ]"
  },
  {
    "id" : "bdaf332c-c361-4383-9650-c16ac04f7e8d",
    "prId" : 6798,
    "comments" : [
      {
        "id" : "b4e9e1b9-d78a-4131-b3ed-88abe71fa737",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This is fixed by scala/scala#5969 for 2.13, so we can remove it if we're 2.13 only.",
        "createdAt" : "2020-07-20T18:00:37Z",
        "updatedAt" : "2020-07-20T21:32:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1feae964e369a010d8d4c69a9c522908e3c5354f",
    "line" : 13,
    "diffHunk" : "@@ -49,6 +49,16 @@ common_scalacopts = [\n     \"-Xfatal-warnings\",\n     # catch missing string interpolators\n     \"-Xlint:missing-interpolator\",\n+    \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly"
  },
  {
    "id" : "0cc22db8-a796-420d-bdba-2eea44cfb2fb",
    "prId" : 6798,
    "comments" : [
      {
        "id" : "410817f3-c5fe-4513-a436-a0c2c97bcb03",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Continuing the saga of #6116 and #6132.",
        "createdAt" : "2020-07-20T18:59:51Z",
        "updatedAt" : "2020-07-20T21:32:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1feae964e369a010d8d4c69a9c522908e3c5354f",
    "line" : null,
    "diffHunk" : "@@ -49,6 +51,17 @@ common_scalacopts = [\n     \"-Xfatal-warnings\",\n     # catch missing string interpolators\n     \"-Xlint:missing-interpolator\",\n+    \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly\n+    \"-Xlint:constant\",  # / 0\n+    \"-Xlint:doc-detached\",  # floating Scaladoc comment\n+    \"-Xlint:inaccessible\",  # method uses invisible types\n+    \"-Xlint:infer-any\",  # less through but less buggy version of the Any wart"
  },
  {
    "id" : "a1e35b87-0b97-4458-96eb-8178265499b7",
    "prId" : 6798,
    "comments" : [
      {
        "id" : "14e7276d-77ce-405e-af56-25a53df59d68",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "What does \"/ 0\" mean?",
        "createdAt" : "2020-07-21T07:30:38Z",
        "updatedAt" : "2020-07-21T07:38:09Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "679a4bb5-f121-42e2-9476-cc7ac0ce3904",
        "parentId" : "14e7276d-77ce-405e-af56-25a53df59d68",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Divide by 0.",
        "createdAt" : "2020-07-21T12:17:32Z",
        "updatedAt" : "2020-07-21T12:17:32Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7a0cbfdc-4410-4d27-a1d4-89bbe6fee7ea",
        "parentId" : "14e7276d-77ce-405e-af56-25a53df59d68",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I had guessed that much. It doesn't tell me what the linting rule does though. ðŸ˜›\r\n\r\nAfter reading the definition of `-Xlint:constant`, I guess this catches cases where we divide by `0` that only use constants? Still not sure though.",
        "createdAt" : "2020-07-21T12:23:49Z",
        "updatedAt" : "2020-07-21T12:23:49Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1feae964e369a010d8d4c69a9c522908e3c5354f",
    "line" : 14,
    "diffHunk" : "@@ -49,6 +51,16 @@ common_scalacopts = [\n     \"-Xfatal-warnings\",\n     # catch missing string interpolators\n     \"-Xlint:missing-interpolator\",\n+    \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly\n+    \"-Xlint:constant\",  # / 0"
  },
  {
    "id" : "61c6f600-ed0c-49e6-9e7f-7f9e27f5ada9",
    "prId" : 6469,
    "comments" : [
      {
        "id" : "7bba31ac-5356-4693-9931-32779b6cb541",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "These comments are not backwards.",
        "createdAt" : "2020-06-23T22:21:04Z",
        "updatedAt" : "2020-06-24T18:15:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8d8e1301-9b9b-48fe-92a6-841b4b8a6b40",
        "parentId" : "7bba31ac-5356-4693-9931-32779b6cb541",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "If you had to comment your comment, probably it's a sign the comments by themselves are not sufficient. Adding more details could make it easier on the readers without having to know about (or remember) this PR. If it's too verbose, a simple pointer to a URL with an understandable explanation is probably good enough.",
        "createdAt" : "2020-06-24T06:36:22Z",
        "updatedAt" : "2020-06-24T18:15:15Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1aeaca9f-c8d2-4fde-9242-49a78b35eff9",
        "parentId" : "7bba31ac-5356-4693-9931-32779b6cb541",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I looked when you were asking about this before, but there was nothing coherent I could link to. I'll just put a description in the comments.",
        "createdAt" : "2020-06-24T15:41:54Z",
        "updatedAt" : "2020-06-24T18:15:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ddb32ce5-3d19-48f4-af2e-9612f5befe7d",
        "parentId" : "7bba31ac-5356-4693-9931-32779b6cb541",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "e5cb754f850371244684cecb16121839495dc0b0",
        "createdAt" : "2020-06-24T18:03:07Z",
        "updatedAt" : "2020-06-24T18:15:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e9f85e23ff1161af7fbc16f25932387c256b3ea",
    "line" : null,
    "diffHunk" : "@@ -38,6 +38,8 @@ common_scalacopts = [\n     # warn if using deprecated stuff\n     \"-deprecation\",\n     \"-Xfuture\",\n+    \"-Xsource:2.13\",  # fix typechecker bugs\n+    \"-Ypartial-unification\",  # behave more like Scala 2.13"
  },
  {
    "id" : "648bb1b3-fd6a-48d5-af46-b3bfeeafbe16",
    "prId" : 6132,
    "comments" : [
      {
        "id" : "0931fd68-3a61-46a8-b7c7-919a5b65cf02",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Commenting out is proper here; note the context.",
        "createdAt" : "2020-05-27T23:02:29Z",
        "updatedAt" : "2020-05-28T15:50:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "536eb664628c309b96aa8e7f89021dd38e8665a9",
    "line" : 5,
    "diffHunk" : "@@ -72,7 +72,7 @@ plugin_scalacopts = [\n     \"-Xplugin-require:wartremover\",\n \n     # This lists all wartremover linting passes.\n-    \"-P:wartremover:traverser:org.wartremover.warts.Any\",\n+    # \"-P:wartremover:traverser:org.wartremover.warts.Any\","
  },
  {
    "id" : "6cc010ff-9e78-4a19-9ee3-406c3395d05b",
    "prId" : 5350,
    "comments" : [
      {
        "id" : "b2c9ed50-c379-41c1-ae7f-0a7a80f695bd",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Probably keeping the docstring makes sense: it links the documentation for the underlying rule and explains why that would be important.",
        "createdAt" : "2020-04-01T16:11:45Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d58a5da2-0082-4af0-9215-cfa1d796bec5",
        "parentId" : "b2c9ed50-c379-41c1-ae7f-0a7a80f695bd",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I also deleted the function that went with this docstring. ðŸ™‚ ",
        "createdAt" : "2020-04-01T16:13:30Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8016ee647a873afe69c33eb471b3298b1d3b812b",
    "line" : 123,
    "diffHunk" : "@@ -442,30 +482,20 @@ def da_scala_library_suite(name, **kwargs):\n \n     [rules_scala_library_suite_docs]: https://github.com/bazelbuild/rules_scala/blob/master/docs/scala_library_suite.md\n     \"\"\"\n-    _wrap_rule(scala_library_suite, name, **kwargs)\n-    _create_scala_source_jar(name = name, **kwargs)\n-    _create_scaladoc_jar(name = name, **kwargs)\n-\n-    if \"tags\" in kwargs:\n-        for tag in kwargs[\"tags\"]:\n+    arguments = {}\n+    arguments.update(kwargs)\n+    arguments = _set_compile_jvm_flags(arguments)\n+    _wrap_rule(scala_library_suite, name, **arguments)\n+    _create_scala_source_jar(name = name, **arguments)\n+    _create_scaladoc_jar(name = name, **arguments)\n+\n+    if \"tags\" in arguments:\n+        for tag in arguments[\"tags\"]:\n             if tag.startswith(\"maven_coordinates=\"):\n                 fail(\"Usage of maven_coordinates in da_scala_library_suite is NOT supported\", \"tags\")\n                 break\n \n-def da_scala_macro_library(**kwargs):\n-    \"\"\"\n-    Define a Scala library that contains macros.\n-\n-    Applies common Scala options defined in `bazel_tools/scala.bzl`.\n-    And forwards to `scala_macro_library` from `rules_scala`.\n-    Refer to the [`rules_scala` documentation][rules_scala_docs].\n-\n-    [rules_scala_docs]: https://github.com/bazelbuild/rules_scala#scala_library\n-    \"\"\"\n-    _wrap_rule(scala_macro_library, **kwargs)\n-    _create_scala_source_jar(**kwargs)\n-\n-def da_scala_binary(name, unused_dependency_checker_mode = \"error\", **kwargs):\n+def da_scala_binary(name, initial_heap_size = default_initial_heap_size, max_heap_size = default_max_heap_size, **kwargs):"
  },
  {
    "id" : "5145029e-5c61-4805-b235-31f8fd2b218b",
    "prId" : 3486,
    "comments" : [
      {
        "id" : "aec25730-95f7-452f-80ac-d92e7e6bf9d1",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Unfortunately, this won't work. [`scala_library_suite`](https://github.com/bazelbuild/rules_scala/blob/f1e689c2426c1522d7c8ca69ac8cbc1a714b6d02/scala/private/rules/scala_library.bzl#L168-L191) doesn't forward `tags` to the one final collection `scala_library`, but instead to the many individual `scala_library` in the suite.\r\n\r\nWe'd either need to patch `scala_library_suite` to allow setting tags on the collection library, or replicate the [name sanitizing logic](https://github.com/bazelbuild/rules_scala/blob/f1e689c2426c1522d7c8ca69ac8cbc1a714b6d02/scala/private/rules/scala_library.bzl#L176) here and generate a `pom_file` for every individual library. \r\nHowever, I think it's fair to not support `pom_file` on `da_scala_library_suite` for now. As there's no use-case for it, yet. However, it would be good to throw an error in case somebody tries to use it.\r\n\r\n",
        "createdAt" : "2019-11-15T14:56:09Z",
        "updatedAt" : "2019-11-15T15:03:57Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "354a5284-0f62-4aae-99c1-291344edf009",
        "parentId" : "aec25730-95f7-452f-80ac-d92e7e6bf9d1",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Like this? https://github.com/digital-asset/daml/pull/3486/commits/b39b1f48544f24bbbc6bbb09e36ddb0ab938c69d",
        "createdAt" : "2019-11-15T15:04:16Z",
        "updatedAt" : "2019-11-15T15:04:16Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0fcbe0d7-2508-4e76-b1d7-0f160ad9017a",
        "parentId" : "aec25730-95f7-452f-80ac-d92e7e6bf9d1",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, thank you!",
        "createdAt" : "2019-11-15T15:07:37Z",
        "updatedAt" : "2019-11-15T15:07:37Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d3f0c88b-e514-4c69-b8dd-befe2b2eb933",
        "parentId" : "aec25730-95f7-452f-80ac-d92e7e6bf9d1",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "No, thank you!",
        "createdAt" : "2019-11-15T15:13:51Z",
        "updatedAt" : "2019-11-15T15:13:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b39b1f48544f24bbbc6bbb09e36ddb0ab938c69d",
    "line" : null,
    "diffHunk" : "@@ -414,6 +415,29 @@ def da_scala_library(name, **kwargs):\n                 )\n                 break\n \n+def da_scala_library_suite(name, **kwargs):\n+    \"\"\"\n+    Define a suite of Scala libraries as a single target.\n+\n+    Applies common Scala options defined in `bazel_tools/scala.bzl`.\n+    And forwards to `scala_library_suite` from `rules_scala`.\n+    Refer to the [`rules_scala` documentation][rules_scala_library_suite_docs].\n+\n+    [rules_scala_library_suite_docs]: https://github.com/bazelbuild/rules_scala/blob/master/docs/scala_library_suite.md\n+    \"\"\"\n+    _wrap_rule(scala_library_suite, name, **kwargs)\n+    _create_scala_source_jar(name = name, **kwargs)\n+    _create_scaladoc_jar(name = name, **kwargs)\n+\n+    if \"tags\" in kwargs:\n+        for tag in kwargs[\"tags\"]:\n+            if tag.startswith(\"maven_coordinates=\"):\n+                pom_file(\n+                    name = name + \"_pom\",\n+                    target = \":\" + name,\n+                )\n+                break"
  },
  {
    "id" : "4defe427-f773-4dc7-8dad-89d43feafa9d",
    "prId" : 1602,
    "comments" : [
      {
        "id" : "8cd41631-3156-487e-b701-ec54709254e5",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I'm not sure this does the right thing.\r\n- Why `inputs = ctx.files.srcs`. As I understand it, this is only ever acting on individual sources, so `inputs = [src]` seems like what you'd want.\r\n- `outputs = [tmpsrcdir]`: Have you tested this with multiple `.srcjar` `srcs`? I'd expect it to fail, because you'd end up with multiple actions producing the same output.\r\n- `if src.is_source`: [Returns true if this is a source file, i.e. it is not generated](https://docs.bazel.build/versions/master/skylark/lib/File.html#is_source). It seems like this would fail for generated `.scala` files, or non-generated `.srcjar` files. Maybe it's better to test `if src.extension == \"srcjar\"`?",
        "createdAt" : "2019-06-12T12:47:16Z",
        "updatedAt" : "2019-06-12T12:49:06Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0ce56e8a-63b7-4234-819a-fbd429b0870f",
        "parentId" : "8cd41631-3156-487e-b701-ec54709254e5",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thanks @aherrmann-da.\r\n@nicholassmith-da, could you take care of it in another PR please?",
        "createdAt" : "2019-06-12T12:58:07Z",
        "updatedAt" : "2019-06-12T12:58:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "efd07d52-95f8-407a-aa0d-9a48a232f0ee",
        "parentId" : "8cd41631-3156-487e-b701-ec54709254e5",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "I'll create a scenario to check with multiple ```.srcjar``` sources.\r\n\r\nMy hypothesis is that the ```is_source``` returns false for anything that is read from 'outside' of the Bazel platform and false for all files that are targets. Using the extension is of course fine assuming that all rules that package generated sources do use the ```.srcjar``` extension.\r\n\r\nWDYT?",
        "createdAt" : "2019-06-12T13:31:17Z",
        "updatedAt" : "2019-06-12T13:31:17Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "630a9d67-05fa-46e8-9e22-44a82c96a88d",
        "parentId" : "8cd41631-3156-487e-b701-ec54709254e5",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, what I meant was if you'd have a generated `.scala` file. E.g.\r\n```\r\ngenrule(\r\n  name = \"example\",\r\n  outs = [\"Example.scala\"],\r\n  cmd = \"echo XYZ > $(OUTS)\",\r\n)\r\n```\r\nthen `is_source` should be `False` for it, as it's generated, but it's not a `.srcjar`. Similarly, if for whatever reason we'd check in a `.srcjar` into version control and refer to it in `srcs` then `is_source` would return `True` on it even though it's a `.srcjar`. Right now this is probably a purely theoretical issue, as no such case seems to exist in the daml repo.\r\n\r\nIndeed, relying on the file extension makes the assumption that the file extension is set correctly. ",
        "createdAt" : "2019-06-12T14:32:09Z",
        "updatedAt" : "2019-06-12T14:32:09Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d1e12b90aca06189a9f1b3274a9185a81362e56d",
    "line" : 35,
    "diffHunk" : "@@ -141,27 +141,59 @@ def _strip_path_upto(path, upto):\n         return []\n \n def _scala_source_jar_impl(ctx):\n-    zipper_args = [\n-        \"%s=%s\" % (new_path, src.path)\n-        for src in ctx.files.srcs\n-        for new_path in _strip_path_upto(src.path, ctx.attr.strip_upto)\n-    ]\n-    zipper_args_file = ctx.actions.declare_file(\n-        ctx.label.name + \".zipper_args\",\n-    )\n-\n     manifest_file = ctx.actions.declare_file(\n         ctx.label.name + \"_MANIFEST.MF\",\n-        sibling = zipper_args_file,\n     )\n     ctx.actions.write(manifest_file, \"Manifest-Version: 1.0\\n\")\n-    zipper_args += [\"META-INF/MANIFEST.MF=\" + manifest_file.path + \"\\n\"]\n \n-    ctx.actions.write(zipper_args_file, \"\\n\".join(zipper_args))\n+    zipper_args_file = ctx.actions.declare_file(\n+        ctx.label.name + \".zipper_args\",\n+        sibling = manifest_file,\n+    )\n+    tmpsrcdir = None\n+\n+    zipper_args = [\"META-INF/MANIFEST.MF=\" + manifest_file.path]\n+    for src in ctx.files.srcs:\n+        if src.is_source:\n+            for new_path in _strip_path_upto(src.path, ctx.attr.strip_upto):\n+                zipper_args.append(\"%s=%s\" % (new_path, src.path))\n+        else:\n+            if not tmpsrcdir:\n+                tmpsrcdir = ctx.actions.declare_directory(ctx.label.name + \"_tmpdir\")\n+            ctx.actions.run("
  },
  {
    "id" : "f02e33cc-05f8-4d2c-b9e4-289c88fe2414",
    "prId" : 1341,
    "comments" : [
      {
        "id" : "5b1ff3ef-a89f-41d7-a3a6-80a659f4129d",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "IIRC you mentioned this part is based on a similar piece of code in some other rule set? Could you add a comment pointing there for reference?",
        "createdAt" : "2019-05-27T08:28:29Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4342a7bb-af55-4352-a03d-82cce3bdbd19",
        "parentId" : "5b1ff3ef-a89f-41d7-a3a6-80a659f4129d",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-05-27T08:59:24Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 14,
    "diffHunk" : "@@ -201,6 +201,121 @@ def _create_scala_source_jar(**kwargs):\n             srcs = kwargs[\"srcs\"],\n         )\n \n+def _scaladoc_jar_impl(ctx):\n+    srcFiles = [\n+        src.path\n+        for src in ctx.files.srcs\n+    ]\n+    pluginPaths = []\n+    for p in ctx.attr.plugins:\n+        if hasattr(p, \"path\"):"
  },
  {
    "id" : "f447fec1-73b3-4514-a3d1-63c3533ddc83",
    "prId" : 1341,
    "comments" : [
      {
        "id" : "c9b0d619-a5b0-4f2e-b86b-a7e07ff27313",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "In `transitive_deps` below you had to switch from `.java` to `[JavaInfo]`, right? Do plugins still have `.java`, or should this part also be switched to use `[JavaInfo]`?",
        "createdAt" : "2019-05-27T08:30:27Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "383944ee-f3b1-4c53-b9fe-1f1016b3dc43",
        "parentId" : "c9b0d619-a5b0-4f2e-b86b-a7e07ff27313",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "The plugins here will be pure java plugins. This could was lifted from 'rules_scala' so I'm inclined to leave it.",
        "createdAt" : "2019-05-27T09:00:33Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5014c281-139b-4b1d-b27a-8e8993f11752",
        "parentId" : "c9b0d619-a5b0-4f2e-b86b-a7e07ff27313",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Makes sense. Thanks for clarifying.",
        "createdAt" : "2019-05-27T09:05:31Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 18,
    "diffHunk" : "@@ -201,6 +201,121 @@ def _create_scala_source_jar(**kwargs):\n             srcs = kwargs[\"srcs\"],\n         )\n \n+def _scaladoc_jar_impl(ctx):\n+    srcFiles = [\n+        src.path\n+        for src in ctx.files.srcs\n+    ]\n+    pluginPaths = []\n+    for p in ctx.attr.plugins:\n+        if hasattr(p, \"path\"):\n+            pluginPaths.append(p)\n+        elif hasattr(p, \"scala\"):\n+            pluginPaths.extend([j.class_jar for j in p.scala.outputs.jars])\n+        elif hasattr(p, \"java\"):"
  },
  {
    "id" : "c11f3036-44ef-473e-a0d6-45f852c2e0bd",
    "prId" : 1341,
    "comments" : [
      {
        "id" : "65ede19a-0289-4f1b-bbce-3ce77228fe20",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "You can avoid building potentially large strings in Starlark by using [`Args` objects](https://docs.bazel.build/versions/master/skylark/lib/Args.html). E.g.\r\n```\r\nargs = ctx.actions.args()\r\nargs.add_all([\"-d\", outdir.path])\r\nargs.add(\"-classpath\")\r\nargs.add_joined(classpath, join_with=\":\")\r\nargs.add_joined(pluginPaths, join_with=\",\", format_joined=\"-Xplugins:%s\")\r\n...\r\n\r\nctx.actions.run(\r\n    ...\r\n    arguments = [args],\r\n    ...\r\n```",
        "createdAt" : "2019-05-27T08:40:46Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "07f23595-b4d3-4927-91ff-2ec22f76ed8b",
        "parentId" : "65ede19a-0289-4f1b-bbce-3ce77228fe20",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Good idea.",
        "createdAt" : "2019-05-27T09:21:17Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : null,
    "diffHunk" : "@@ -201,6 +201,121 @@ def _create_scala_source_jar(**kwargs):\n             srcs = kwargs[\"srcs\"],\n         )\n \n+def _scaladoc_jar_impl(ctx):\n+    srcFiles = [\n+        src.path\n+        for src in ctx.files.srcs\n+    ]\n+    pluginPaths = []\n+    for p in ctx.attr.plugins:\n+        if hasattr(p, \"path\"):\n+            pluginPaths.append(p)\n+        elif hasattr(p, \"scala\"):\n+            pluginPaths.extend([j.class_jar for j in p.scala.outputs.jars])\n+        elif hasattr(p, \"java\"):\n+            pluginPaths.extend([j.class_jar for j in p.java.outputs.jars])\n+            # support http_file pointed at a jar. http_jar uses ijar,\n+            # which breaks scala macros\n+\n+        elif hasattr(p, \"files\"):\n+            pluginPaths.extend([f for f in p.files if \"-sources.jar\" not in f.basename])\n+\n+    transitive_deps = [dep[JavaInfo].transitive_deps for dep in ctx.attr.deps]\n+    classpath = depset([], transitive = transitive_deps).to_list()\n+\n+    outdir = ctx.actions.declare_directory(ctx.label.name + \"_scaladoc_tmpdir\")\n+\n+    ctx.actions.run(\n+        executable = ctx.executable._scaladoc,\n+        inputs = ctx.files.srcs + classpath + pluginPaths,\n+        outputs = [outdir],\n+        arguments = [\n+            \"-d\",\n+            outdir.path,\n+            \"-classpath\","
  },
  {
    "id" : "b45c48d1-557f-42dc-848d-23398f46ab6d",
    "prId" : 1341,
    "comments" : [
      {
        "id" : "66ac903e-6fc1-4fa1-99db-a2663d5b0cbd",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I think it would be better to have the loop set a boolean, and then conditionally call `scaladoc_jar` outside the `for src ...` loop. Currently I find it a bit hard to read. It took me a while to realize that you don't call `scaladoc_jar` for each source file. E.g.\r\n\r\n```\r\ncreate_scaladoc = False\r\nfor src in kwargs[\"srcs\"]:\r\n    if src.endswith(\".scala\"):\r\n        create_scaladoc = True\r\n        break\r\nif create_scaladoc:\r\n    ...\r\n```",
        "createdAt" : "2019-05-27T08:48:19Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ef94ea5-a61b-40e9-a868-c383b5a08633",
        "parentId" : "66ac903e-6fc1-4fa1-99db-a2663d5b0cbd",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Also a good idea. Implemented.",
        "createdAt" : "2019-05-27T09:29:08Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 112,
    "diffHunk" : "@@ -201,6 +201,121 @@ def _create_scala_source_jar(**kwargs):\n             srcs = kwargs[\"srcs\"],\n         )\n \n+def _scaladoc_jar_impl(ctx):\n+    srcFiles = [\n+        src.path\n+        for src in ctx.files.srcs\n+    ]\n+    pluginPaths = []\n+    for p in ctx.attr.plugins:\n+        if hasattr(p, \"path\"):\n+            pluginPaths.append(p)\n+        elif hasattr(p, \"scala\"):\n+            pluginPaths.extend([j.class_jar for j in p.scala.outputs.jars])\n+        elif hasattr(p, \"java\"):\n+            pluginPaths.extend([j.class_jar for j in p.java.outputs.jars])\n+            # support http_file pointed at a jar. http_jar uses ijar,\n+            # which breaks scala macros\n+\n+        elif hasattr(p, \"files\"):\n+            pluginPaths.extend([f for f in p.files if \"-sources.jar\" not in f.basename])\n+\n+    transitive_deps = [dep[JavaInfo].transitive_deps for dep in ctx.attr.deps]\n+    classpath = depset([], transitive = transitive_deps).to_list()\n+\n+    outdir = ctx.actions.declare_directory(ctx.label.name + \"_scaladoc_tmpdir\")\n+\n+    ctx.actions.run(\n+        executable = ctx.executable._scaladoc,\n+        inputs = ctx.files.srcs + classpath + pluginPaths,\n+        outputs = [outdir],\n+        arguments = [\n+            \"-d\",\n+            outdir.path,\n+            \"-classpath\",\n+            \":\".join([jar.path for jar in classpath]),\n+            \"-Xplugin:%s\" % \",\".join([jar.path for jar in pluginPaths]),\n+            \"-doc-title\",\n+            ctx.attr.doctitle,\n+            \"-no-link-warnings\",\n+        ] + common_scalacopts + srcFiles,\n+        mnemonic = \"ScaladocGen\",\n+    )\n+\n+    # since we only have the output directory of the scaladoc generation we need to find\n+    # all the files below sources_out and add them to the zipper args file\n+    zipper_args_file = ctx.actions.declare_file(ctx.label.name + \".zipper_args\")\n+    ctx.actions.run_shell(\n+        mnemonic = \"ScaladocFindOutputFiles\",\n+        outputs = [zipper_args_file],\n+        inputs = [outdir],\n+        command = \"find -L {src_path} -type f | sed -E 's#^{src_path}/(.*)$#\\\\1={src_path}/\\\\1#' | sort > {args_file}\".format(\n+            src_path = outdir.path,\n+            args_file = zipper_args_file.path,\n+        ),\n+        progress_message = \"find_scaladoc_output_files %s\" % zipper_args_file.path,\n+        use_default_shell_env = True,\n+    )\n+\n+    ctx.actions.run(\n+        executable = ctx.executable._zipper,\n+        inputs = ctx.files.srcs + classpath + [outdir, zipper_args_file],\n+        outputs = [ctx.outputs.out],\n+        arguments = [\"c\", ctx.outputs.out.path, \"@\" + zipper_args_file.path],\n+        mnemonic = \"ScaladocJar\",\n+    )\n+\n+scaladoc_jar = rule(\n+    implementation = _scaladoc_jar_impl,\n+    attrs = {\n+        \"deps\": attr.label_list(),\n+        \"doctitle\": attr.string(default = \"\"),\n+        \"plugins\": attr.label_list(default = []),\n+        \"srcs\": attr.label_list(allow_files = True),\n+        \"_zipper\": attr.label(\n+            default = Label(\"@bazel_tools//tools/zip:zipper\"),\n+            cfg = \"host\",\n+            executable = True,\n+            allow_files = True,\n+        ),\n+        \"_scaladoc\": attr.label(\n+            default = Label(\"@scala_nix//:bin/scaladoc\"),\n+            cfg = \"host\",\n+            executable = True,\n+            allow_files = True,\n+        ),\n+    },\n+    outputs = {\n+        \"out\": \"%{name}.jar\",\n+    },\n+)\n+\"\"\"\n+Generates a Scaladoc jar path/to/target/<name>.jar.\n+\n+Arguments:\n+  srcs: source files to process\n+  deps: targets that contain references to other types referenced in Scaladoc.\n+  doctitle: title for Scalaadoc's index.html. Typically the name of the library\n+\"\"\"\n+\n+def _create_scaladoc_jar(**kwargs):\n+    # Try to not create empty scaladoc jars and limit execution to Linux and MacOS\n+    # Detect an actual scala source file rather than a srcjar or other label\n+    if len(kwargs[\"srcs\"]) > 0 and is_windows == False:\n+        for src in kwargs[\"srcs\"]:\n+            if src.endswith(\".scala\"):\n+                plugins = []\n+                if \"plugins\" in kwargs:\n+                    plugins = kwargs[\"plugins\"]\n+\n+                scaladoc_jar(\n+                    name = kwargs[\"name\"] + \"_scaladoc\",\n+                    deps = kwargs[\"deps\"],\n+                    plugins = plugins,\n+                    srcs = kwargs[\"srcs\"],\n+                )\n+                break"
  }
]