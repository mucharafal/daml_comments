[
  {
    "id" : "dd44db96-f8ff-434d-8799-c3060f68b52a",
    "prId" : 7668,
    "comments" : [
      {
        "id" : "7ea78cac-806b-4641-943e-3e3695b14d01",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "My `hiding` you mean we donâ€™t pass it along? Do you know why we even have this field then?",
        "createdAt" : "2020-10-13T13:56:30Z",
        "updatedAt" : "2020-10-13T14:56:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b2e40697-cc81-4a7c-b9fc-f3c7c11cd8d2",
        "parentId" : "7ea78cac-806b-4641-943e-3e3695b14d01",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "It's there to make sure it doesn't end up in `kwargs`.",
        "createdAt" : "2020-10-13T14:32:02Z",
        "updatedAt" : "2020-10-13T14:56:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "53c3e95515c391f64a3dcf73065154f763e9a435",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +182,186 @@        scalacopts = [],\n        plugins = [],\n        generated_srcs = [],  # hiding from the underlying rule\n        deps = [],\n        silent_annotations = False,"
  },
  {
    "id" : "ce73e3b9-badb-48fd-9f0b-ac39ffd813dc",
    "prId" : 6907,
    "comments" : [
      {
        "id" : "80d46406-5d35-4dfc-afe3-f947a71e4263",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Are we keeping `lf_scalacopts` around for a reason?",
        "createdAt" : "2020-08-07T07:11:34Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ab844152-4d74-4ae8-a17a-3c78370b40aa",
        "parentId" : "80d46406-5d35-4dfc-afe3-f947a71e4263",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It turned out to be very useful, since it made it possible to fully migrate part of the codebase to the flag (in fact, I wish there were more partitions of the codebase with cross-project scalacopts sets like this one), it would be a hassle to remove, and it would be a hassle to restore.\r\n\r\nRemoving it would be like saying about a Scala build that supported cross-version builds \"well, we support the latest Scala version, and it's not like they're ever going to release a new Scala version, right?\"",
        "createdAt" : "2020-08-07T14:50:52Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0be6183109e0ca2416eea13d320bcf30594c3988",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +134,138 @@# ^ means nothing to remove\nlf_scalacopts = [\n]\n\ndefault_compile_arguments = {"
  },
  {
    "id" : "c819b2bb-a0bb-49eb-8310-bf214309d3fd",
    "prId" : 6798,
    "comments" : [
      {
        "id" : "053b910f-3cab-48de-ae13-9e5f004a5742",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This is fixed by scala/scala#5969 for 2.13, so we can remove it if we're 2.13 only.",
        "createdAt" : "2020-07-20T18:00:37Z",
        "updatedAt" : "2020-07-20T21:32:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1feae964e369a010d8d4c69a9c522908e3c5354f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +52,56 @@    # catch missing string interpolators\n    \"-Xlint:missing-interpolator\",\n    \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly\n    \"-Xlint:constant\",  # / 0\n    \"-Xlint:inaccessible\",  # method uses invisible types"
  },
  {
    "id" : "c314dbd8-02d0-4ef6-a8a9-ca7da0e493ee",
    "prId" : 6798,
    "comments" : [
      {
        "id" : "d3b994ef-523d-4d0e-817f-fb2822c5ac50",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "What does \"/ 0\" mean?",
        "createdAt" : "2020-07-21T07:30:38Z",
        "updatedAt" : "2020-07-21T07:38:09Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1bfc951c-d194-4d97-8b9e-2f9ba6436b4f",
        "parentId" : "d3b994ef-523d-4d0e-817f-fb2822c5ac50",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Divide by 0.",
        "createdAt" : "2020-07-21T12:17:32Z",
        "updatedAt" : "2020-07-21T12:17:32Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4d1cf77d-725d-400f-a3ea-ae778054ab41",
        "parentId" : "d3b994ef-523d-4d0e-817f-fb2822c5ac50",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I had guessed that much. It doesn't tell me what the linting rule does though. ðŸ˜›\r\n\r\nAfter reading the definition of `-Xlint:constant`, I guess this catches cases where we divide by `0` that only use constants? Still not sure though.",
        "createdAt" : "2020-07-21T12:23:49Z",
        "updatedAt" : "2020-07-21T12:23:49Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1feae964e369a010d8d4c69a9c522908e3c5354f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +53,57 @@    \"-Xlint:missing-interpolator\",\n    \"-Xlint:by-name-right-associative\",  # will never be by-name if used correctly\n    \"-Xlint:constant\",  # / 0\n    \"-Xlint:inaccessible\",  # method uses invisible types\n    \"-Xlint:infer-any\",  # less thorough but less buggy version of the Any wart"
  },
  {
    "id" : "4012681a-2982-45ad-8195-f1cad831031e",
    "prId" : 6132,
    "comments" : [
      {
        "id" : "3aeea45b-3fda-4343-9cfb-25b12377a2da",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Commenting out is proper here; note the context.",
        "createdAt" : "2020-05-27T23:02:29Z",
        "updatedAt" : "2020-05-28T15:50:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "536eb664628c309b96aa8e7f89021dd38e8665a9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +73,77 @@\n    # This lists all wartremover linting passes.\n    # \"-P:wartremover:traverser:org.wartremover.warts.Any\",\n    \"-P:wartremover:traverser:org.wartremover.warts.AnyVal\",\n    \"-P:wartremover:traverser:org.wartremover.warts.ArrayEquals\","
  },
  {
    "id" : "f888ba5c-fc41-4cab-af4b-af00cb15fb0b",
    "prId" : 5350,
    "comments" : [
      {
        "id" : "4a41fdf2-87c3-491e-a79c-e4d5d4a83956",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Probably keeping the docstring makes sense: it links the documentation for the underlying rule and explains why that would be important.",
        "createdAt" : "2020-04-01T16:11:45Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ce52f1e-588d-41cb-b6e6-178803a5024e",
        "parentId" : "4a41fdf2-87c3-491e-a79c-e4d5d4a83956",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I also deleted the function that went with this docstring. ðŸ™‚ ",
        "createdAt" : "2020-04-01T16:13:30Z",
        "updatedAt" : "2020-04-01T18:31:27Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8016ee647a873afe69c33eb471b3298b1d3b812b",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +496,500 @@                break\n\ndef da_scala_binary(name, initial_heap_size = default_initial_heap_size, max_heap_size = default_max_heap_size, **kwargs):\n    \"\"\"\n    Define a Scala executable."
  },
  {
    "id" : "196fc618-b654-456a-b94b-ca6908227746",
    "prId" : 1602,
    "comments" : [
      {
        "id" : "ea48d7f9-787e-4f1d-a5c2-4d7024420be5",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I'm not sure this does the right thing.\r\n- Why `inputs = ctx.files.srcs`. As I understand it, this is only ever acting on individual sources, so `inputs = [src]` seems like what you'd want.\r\n- `outputs = [tmpsrcdir]`: Have you tested this with multiple `.srcjar` `srcs`? I'd expect it to fail, because you'd end up with multiple actions producing the same output.\r\n- `if src.is_source`: [Returns true if this is a source file, i.e. it is not generated](https://docs.bazel.build/versions/master/skylark/lib/File.html#is_source). It seems like this would fail for generated `.scala` files, or non-generated `.srcjar` files. Maybe it's better to test `if src.extension == \"srcjar\"`?",
        "createdAt" : "2019-06-12T12:47:16Z",
        "updatedAt" : "2019-06-12T12:49:06Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dce95c3a-9ea7-45a7-afd3-39fd1fbee2f2",
        "parentId" : "ea48d7f9-787e-4f1d-a5c2-4d7024420be5",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thanks @aherrmann-da.\r\n@nicholassmith-da, could you take care of it in another PR please?",
        "createdAt" : "2019-06-12T12:58:07Z",
        "updatedAt" : "2019-06-12T12:58:08Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "218b3ced-d1bb-4e8d-99ab-78a1db604b90",
        "parentId" : "ea48d7f9-787e-4f1d-a5c2-4d7024420be5",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "I'll create a scenario to check with multiple ```.srcjar``` sources.\r\n\r\nMy hypothesis is that the ```is_source``` returns false for anything that is read from 'outside' of the Bazel platform and false for all files that are targets. Using the extension is of course fine assuming that all rules that package generated sources do use the ```.srcjar``` extension.\r\n\r\nWDYT?",
        "createdAt" : "2019-06-12T13:31:17Z",
        "updatedAt" : "2019-06-12T13:31:17Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "35b033a6-44eb-4411-80bc-09969dde5b38",
        "parentId" : "ea48d7f9-787e-4f1d-a5c2-4d7024420be5",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, what I meant was if you'd have a generated `.scala` file. E.g.\r\n```\r\ngenrule(\r\n  name = \"example\",\r\n  outs = [\"Example.scala\"],\r\n  cmd = \"echo XYZ > $(OUTS)\",\r\n)\r\n```\r\nthen `is_source` should be `False` for it, as it's generated, but it's not a `.srcjar`. Similarly, if for whatever reason we'd check in a `.srcjar` into version control and refer to it in `srcs` then `is_source` would return `True` on it even though it's a `.srcjar`. Right now this is probably a purely theoretical issue, as no such case seems to exist in the daml repo.\r\n\r\nIndeed, relying on the file extension makes the assumption that the file extension is set correctly. ",
        "createdAt" : "2019-06-12T14:32:09Z",
        "updatedAt" : "2019-06-12T14:32:09Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d1e12b90aca06189a9f1b3274a9185a81362e56d",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +161,165 @@            if not tmpsrcdir:\n                tmpsrcdir = ctx.actions.declare_directory(ctx.label.name + \"_tmpdir\")\n            ctx.actions.run(\n                executable = ctx.executable._zipper,\n                inputs = ctx.files.srcs,"
  },
  {
    "id" : "1fb9b7f4-2d25-4835-8bd0-f8676b25f08d",
    "prId" : 1341,
    "comments" : [
      {
        "id" : "1e967dbf-6958-42b1-a0b7-f24c9b05e621",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "IIRC you mentioned this part is based on a similar piece of code in some other rule set? Could you add a comment pointing there for reference?",
        "createdAt" : "2019-05-27T08:28:29Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "617ed3a1-c554-4bda-b860-465d705ff5da",
        "parentId" : "1e967dbf-6958-42b1-a0b7-f24c9b05e621",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-05-27T08:59:24Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +212,216 @@    pluginPaths = []\n    for p in ctx.attr.plugins:\n        if hasattr(p, \"path\"):\n            pluginPaths.append(p)\n        elif hasattr(p, \"scala\"):"
  },
  {
    "id" : "7e61201d-5eb8-4961-a707-b278c7c0811a",
    "prId" : 1341,
    "comments" : [
      {
        "id" : "8c0bafa8-83e7-4f3c-9ec0-0357168d530c",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "In `transitive_deps` below you had to switch from `.java` to `[JavaInfo]`, right? Do plugins still have `.java`, or should this part also be switched to use `[JavaInfo]`?",
        "createdAt" : "2019-05-27T08:30:27Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2e3b665e-aba9-4e76-849f-874530f3788e",
        "parentId" : "8c0bafa8-83e7-4f3c-9ec0-0357168d530c",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "The plugins here will be pure java plugins. This could was lifted from 'rules_scala' so I'm inclined to leave it.",
        "createdAt" : "2019-05-27T09:00:33Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "285e3c81-de48-4bba-b369-0cba7c82c0c7",
        "parentId" : "8c0bafa8-83e7-4f3c-9ec0-0357168d530c",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Makes sense. Thanks for clarifying.",
        "createdAt" : "2019-05-27T09:05:31Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +216,220 @@        elif hasattr(p, \"scala\"):\n            pluginPaths.extend([j.class_jar for j in p.scala.outputs.jars])\n        elif hasattr(p, \"java\"):\n            pluginPaths.extend([j.class_jar for j in p.java.outputs.jars])\n            # support http_file pointed at a jar. http_jar uses ijar,"
  },
  {
    "id" : "80838f08-7fe4-4c00-a0b4-eec87cef9417",
    "prId" : 1341,
    "comments" : [
      {
        "id" : "26628807-6e58-46f4-a5b9-7eab2aa11995",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I think it would be better to have the loop set a boolean, and then conditionally call `scaladoc_jar` outside the `for src ...` loop. Currently I find it a bit hard to read. It took me a while to realize that you don't call `scaladoc_jar` for each source file. E.g.\r\n\r\n```\r\ncreate_scaladoc = False\r\nfor src in kwargs[\"srcs\"]:\r\n    if src.endswith(\".scala\"):\r\n        create_scaladoc = True\r\n        break\r\nif create_scaladoc:\r\n    ...\r\n```",
        "createdAt" : "2019-05-27T08:48:19Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8ec9efab-613e-4a87-aa6d-2e19361885c4",
        "parentId" : "26628807-6e58-46f4-a5b9-7eab2aa11995",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Also a good idea. Implemented.",
        "createdAt" : "2019-05-27T09:29:08Z",
        "updatedAt" : "2019-05-27T09:30:32Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e26f05f93f18739f81898fd482136da0dae94bc",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +310,314 @@            if src.endswith(\".scala\"):\n                create_scaladoc = True\n                break\n\n    if create_scaladoc:"
  }
]