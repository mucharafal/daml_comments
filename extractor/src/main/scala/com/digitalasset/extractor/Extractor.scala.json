[
  {
    "id" : "5a3d2806-fc92-4ffb-aabe-8417454108b2",
    "prId" : 4586,
    "comments" : [
      {
        "id" : "a39fac40-424a-44c3-85c6-330a45369d27",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  private val parties = config.parties.widen[String].toSet\r\n```",
        "createdAt" : "2020-02-18T19:11:17Z",
        "updatedAt" : "2020-02-19T09:57:39Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1aa09cd7-f828-4822-a3e4-1b609d6c9131",
        "parentId" : "a39fac40-424a-44c3-85c6-330a45369d27",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yay, wartremover:\r\n```\r\n[wartremover:Any] Inferred type containing Any\r\n  private val parties: Set[String]= config.parties.widen[String].toSet\r\n```",
        "createdAt" : "2020-02-19T08:48:54Z",
        "updatedAt" : "2020-02-19T09:57:39Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "24308b9b-ee41-4ff3-a42a-02a78f599f01",
        "parentId" : "a39fac40-424a-44c3-85c6-330a45369d27",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I have no idea where the `Any` is coming from.",
        "createdAt" : "2020-02-19T08:49:27Z",
        "updatedAt" : "2020-02-19T09:57:39Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6afb48c7-6b49-4545-b54b-cbcfca82e5c0",
        "parentId" : "a39fac40-424a-44c3-85c6-330a45369d27",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "My best guess is `ToFunctorOps[({type l[a >: Nothing <: Any] = OneAnd[List, a]})#l, String]`. wartremover/wartremover#463",
        "createdAt" : "2020-02-20T14:52:45Z",
        "updatedAt" : "2020-02-20T15:06:25Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b199ccf9-04c3-4308-b2d2-3177c9a1399d",
        "parentId" : "a39fac40-424a-44c3-85c6-330a45369d27",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Thanks.",
        "createdAt" : "2020-02-21T10:41:45Z",
        "updatedAt" : "2020-02-21T10:41:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b5c7b7079fe5153e8414bbbc44fac97fd697da4b",
    "line" : null,
    "diffHunk" : "@@ -42,6 +46,7 @@ class Extractor[T](config: ExtractorConfig, target: T)(\n     extends StrictLogging {\n \n   private val tokenHolder = config.accessTokenFile.map(new TokenHolder(_))\n+  private val parties = config.parties.toSet.map[String, Set[String]](identity)"
  },
  {
    "id" : "a36f1a7e-881a-43d7-ac62-a9f8dcefb072",
    "prId" : 4586,
    "comments" : [
      {
        "id" : "0239a9a2-ab1b-40e1-815c-d0f4ebeec237",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "There is probably a way to do it statically, without the iteration, using `scalaz.Liskov` or `scalaz.Leibniz`... but I have not fully understood those yet :) so I will leave it for @S11001001 .... but in any case this is a constant.",
        "createdAt" : "2020-02-21T16:11:25Z",
        "updatedAt" : "2020-02-21T16:11:32Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dda0ab2e-3ea4-41dc-8354-ddc58a498293",
        "parentId" : "0239a9a2-ab1b-40e1-815c-d0f4ebeec237",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "ha... I see the above thread.",
        "createdAt" : "2020-02-21T16:12:29Z",
        "updatedAt" : "2020-02-21T16:12:30Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3744ad6a-90ca-4015-8527-1d4675538117",
        "parentId" : "0239a9a2-ab1b-40e1-815c-d0f4ebeec237",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yeah, there is `widen` as suggested by @S11001001 in an earlier comment. But unfortunately it triggers the wartremover `Any` check. Since it's only a single iteration over the parties it's not a big deal, albeit using `widen` would be more elegant of course.",
        "createdAt" : "2020-02-24T07:55:23Z",
        "updatedAt" : "2020-02-24T07:55:24Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b5c7b7079fe5153e8414bbbc44fac97fd697da4b",
    "line" : 19,
    "diffHunk" : "@@ -42,6 +46,7 @@ class Extractor[T](config: ExtractorConfig, target: T)(\n     extends StrictLogging {\n \n   private val tokenHolder = config.accessTokenFile.map(new TokenHolder(_))\n+  private val parties: Set[String] = config.parties.toSet.map[String, Set[String]](identity)"
  },
  {
    "id" : "a8f4f6b3-6a0b-4209-8f64-6533da3cbb45",
    "prId" : 2366,
    "comments" : [
      {
        "id" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This makes it so you don't have to unseal `Target`, which is unsound anyway, and your custom `writerSupplier` can simply take your specific target-that-is-not-a-`Target`.\r\n\r\n```suggestion\r\nclass Extractor[T](config: ExtractorConfig, target: T)(writerSupplier: (ExtractorConfig, T, String) => Writer = Writer(_, _, _)) extends StrictLogging {\r\n```",
        "createdAt" : "2019-08-01T15:38:03Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d240ca34-3a0f-49b9-bf60-b2dbb2cd14e5",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Incidentally, @leo-da do you think this `String` should be `domain.LedgerId` instead, to make this signature more precise?",
        "createdAt" : "2019-08-01T16:19:52Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "abc0a930-f650-4350-9d2d-08617393db79",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "yes, I would prefer `com.digitalasset.ledger.api.domain.LedgerId`. It would definitely make this type more precise:\r\n```\r\n(ExtractorConfig, Target, String) => Writer\r\n```\r\nHowever, PostgreSQLWriter is defined with `String` for ledgerId:\r\n```\r\nclass PostgreSQLWriter(config: ExtractorConfig, target: PostgreSQLTarget, ledgerId: String)\r\n```\r\nI would say we can/should refactor it. But it does not have to be part of this PR.",
        "createdAt" : "2019-08-02T17:51:03Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1ca42e49-84c6-41fa-946c-a1ffef1bb933",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "body" : "Thanks a lot for the review comments.\r\nAbout the new signature, the way default Writer is provided does not compile and I tried a few more combinations but could not find a non-verbose way to provide a default Writer. For now, I have excluded and it and all clients are providing the Writer explicitly. \r\n\r\nFor LedgerId, I will file a follow-up PR for it.",
        "createdAt" : "2019-08-05T01:39:47Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e7c9085d-29c4-4d30-95e8-8a00fe8b97b8",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "body" : "Few other questions, not sure if this is the correct place :\r\n\r\n1. Is the multi-table format still supported? If not, is it ok to remove the code in a new PR?\r\n2. Is there a way to write to a different SQL database without completely re-writing the Writer implementation for it. Can some parts of PostgreSQL implementation be re-used?\r\nCurrent PostgreSQLWriter uses Queries object for all the queries. \r\nIf we rename PostgreSQLWriter to SQLWriter and pass different implementation of Queries based on dialect, then PostgreSQLWriter code can be reused?",
        "createdAt" : "2019-08-05T01:50:55Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9edaf32a-f473-41f1-b627-d87a1891bd71",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> About the new signature, the way default Writer is provided does not compile and I tried a few more combinations but could not find a non-verbose way to provide a default Writer.\r\n\r\nI tested before suggesting and it worked; can you share the compile error?",
        "createdAt" : "2019-08-05T17:01:04Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd38ee80-24d4-4a88-a18e-331fc68aa503",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "body" : "I get this error on compiling\r\n```\r\nextractor/src/main/scala/com/digitalasset/extractor/Extractor.scala:37: error: missing parameter type for expanded function ((x$1: com.digitalasset.extractor.config.ExtractorConfig, x$2: <error>, x$3: String) => Writer(x$1, x$2, x$3))\r\nclass Extractor[T](config: ExtractorConfig, target: T)(writerSupplier: (ExtractorConfig, T, String) => Writer = Writer(_, _, _)) extends StrictLogging {\r\n\r\n```\r\n\r\nThere are three of those, one for each parameter.",
        "createdAt" : "2019-08-05T22:35:01Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "725b89f3-c2d6-45e2-93db-c9713ca8ef22",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "body" : "Hi @S11001001 Please let me know if I am doing something wrong here.",
        "createdAt" : "2019-08-09T07:07:07Z",
        "updatedAt" : "2019-08-09T16:12:35Z",
        "lastEditedBy" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eafcd812-2f17-46d3-b059-6d9981c1c26c",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "My bad, I forgot another important change to make this style work, which the error message pointed out to me; thanks. I pushed a commit to your branch to make this change.",
        "createdAt" : "2019-08-09T16:13:30Z",
        "updatedAt" : "2019-08-09T16:13:30Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dadcd742-fef9-4f81-b377-e2fcd68f0701",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "body" : "Thanks @S11001001 for merging the PR. Can you please answer the questions here, or point me to the right channel?\r\nhttps://github.com/digital-asset/daml/pull/2366#discussion_r310417886",
        "createdAt" : "2019-08-12T08:33:32Z",
        "updatedAt" : "2019-08-12T08:33:32Z",
        "lastEditedBy" : {
          "login" : "amanmanocha",
          "name" : "Aman Manocha",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13315471?u=4f105ba7ea7fdf697409492b2671b2482b0ea259&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0297e311-c2e0-4033-b97d-cbdb281f1926",
        "parentId" : "50eee4c8-d387-430c-af4f-6d34800a348b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> Few other questions, not sure if this is the correct place :\r\n\r\n@amanmanocha Best place for questions is probably #daml-contributors (for questions about this repo's implementation or contributing) or #public (otherwise) on damldriven.slack.com.\r\n\r\n> 1. Is the multi-table format still supported?\r\n\r\nYes.\r\n\r\n> 2. Is there a way to write to a different SQL database without completely re-writing the Writer implementation for it. Can some parts of PostgreSQL implementation be re-used? Current PostgreSQLWriter uses Queries object for all the queries. If we rename PostgreSQLWriter to SQLWriter and pass different implementation of Queries based on dialect, then PostgreSQLWriter code can be reused?\r\n\r\nMy guess is that the abstract interface of `Queries` would be _ad hoc_, and thus unmaintainable locally. If things can be parameterized in a simpler way, then that would probably be fine. I can't say more specifically while keeping this response simple, though.",
        "createdAt" : "2019-08-14T19:02:36Z",
        "updatedAt" : "2019-08-14T19:02:37Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e82b2129f7a33fce1a872a64ffb938b394d66180",
    "line" : null,
    "diffHunk" : "@@ -35,7 +35,7 @@ import Scalaz._\n import com.typesafe.scalalogging.StrictLogging\n import scalaz.syntax.tag._\n \n-class Extractor[T <: Target](config: ExtractorConfig, target: T) extends StrictLogging {\n+class Extractor[T <: Target](config: ExtractorConfig, target:T, writerSupplier: (ExtractorConfig, Target, String) => Writer) extends StrictLogging {"
  },
  {
    "id" : "d4c624ec-98bf-4c35-834d-84dd11d54676",
    "prId" : 1518,
    "comments" : [
      {
        "id" : "defaa22f-6656-444d-9cbd-7dd96b9a9825",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Use `git add -p` and the `s` command to avoid this diff noise.",
        "createdAt" : "2019-06-04T18:41:17Z",
        "updatedAt" : "2019-06-04T19:38:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a6c9043ce0476fb03cfeac4fa8f6a0779141c137",
    "line" : null,
    "diffHunk" : "@@ -19,7 +18,7 @@ import com.digitalasset.extractor.writers.Writer.RefreshPackages\n import com.digitalasset.extractor.helpers.TemplateIds\n import com.digitalasset.extractor.helpers.TransactionTreeTrimmer\n import com.digitalasset.extractor.helpers.FutureUtil.toFuture\n-import com.digitalasset.grpc.adapter.{ExecutionSequencerFactory, AkkaExecutionSequencerPool}\n+import com.digitalasset.grpc.adapter.{AkkaExecutionSequencerPool, ExecutionSequencerFactory}"
  },
  {
    "id" : "0a15198a-30d4-4fa9-98a7-0c6d434c8e8e",
    "prId" : 1361,
    "comments" : [
      {
        "id" : "717a054c-ad13-42c1-900f-e5b4a6628ed4",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The `parties` argument is unused so should be removed. If you want to keep the argument, move the function to the companion.",
        "createdAt" : "2019-05-31T17:09:46Z",
        "updatedAt" : "2019-05-31T17:35:33Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9206c143-8928-496e-b42a-49e81c7519b7",
        "parentId" : "717a054c-ad13-42c1-900f-e5b4a6628ed4",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "my bad, I was actually going to use it :)",
        "createdAt" : "2019-05-31T17:44:14Z",
        "updatedAt" : "2019-05-31T17:44:15Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6fe34391457d4d74e585c4d58a1d06f858bdd053",
    "line" : 71,
    "diffHunk" : "@@ -104,23 +113,35 @@ class Extractor[T <: Target](config: ExtractorConfig, target: T) {\n     system.terminate().map(_ => killSwitch.shutdown())\n   }\n \n-  private def fetchPackages(client: LedgerClient, writer: Writer): Future[Unit] = {\n+  private def fetchPackages(client: LedgerClient, writer: Writer): Future[PackageStore] = {\n     for {\n-      packageStore <- LedgerReader.createPackageStore(client)\n-      _ <- writer.handlePackages(packageStore.valueOr(error => throw new RuntimeException(error)))\n-    } yield ()\n+      packageStoreE <- LedgerReader.createPackageStore(client): Future[String \\/ PackageStore]\n+      packageStore <- toFuture(packageStoreE): Future[PackageStore]\n+      _ <- writer.handlePackages(packageStore)\n+    } yield packageStore\n   }\n \n-  private def selectTransactions: TransactionFilter = {\n+  private def selectTransactions(parties: ExtractorConfig.Parties): TransactionFilter = {"
  }
]