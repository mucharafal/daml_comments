[
  {
    "id" : "c385c6fc-5080-40ab-a29d-407b18e941b0",
    "prId" : 3514,
    "comments" : [
      {
        "id" : "cef03fa5-45a9-4269-9140-eceaeeab573e",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Since we're not actually even trying to recover, how about binding the value of the `Try` and then calling `someTry.failed.foreach(e => ...)`?",
        "createdAt" : "2019-11-19T06:43:06Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "41529610-61d9-4761-8440-ae1940542599",
        "parentId" : "cef03fa5-45a9-4269-9140-eceaeeab573e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'd rather do the following to also go in a direction that covers your other comments.\r\n\r\n```scala\r\n  private def slurpToken(path: Path): Option[String] =\r\n    try {\r\n      logger.info(s\"Reading token from $path...\")\r\n      Option(Files.readAllLines(path).stream.collect(Collectors.joining(\"\\n\")))\r\n    } catch {\r\n      case NonFatal(e) =>\r\n        logger.error(s\"Unable to read token from $path\", e)\r\n        None\r\n    }\r\n```",
        "createdAt" : "2019-11-19T10:14:48Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dbd55be0-ceba-46c1-b867-3c8626a9284b",
        "parentId" : "cef03fa5-45a9-4269-9140-eceaeeab573e",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "üëç ",
        "createdAt" : "2019-11-19T12:22:10Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "976cb0d6-180f-4621-a2a1-bf28f6c0b4a9",
        "parentId" : "cef03fa5-45a9-4269-9140-eceaeeab573e",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3514/commits/461cf6189ae0521d5fb616d54dddc3a3ed3b97f5",
        "createdAt" : "2019-11-19T13:31:15Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bf2fcd17a4a975d9c4508a4a2d5777b00841ee76",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor.helpers\n+\n+import java.nio.file.{Files, Path}\n+import java.util.concurrent.atomic.AtomicReference\n+import java.util.stream.Collectors\n+\n+import org.slf4j.LoggerFactory\n+\n+import scala.util.{Failure, Try}\n+import scala.util.control.NonFatal\n+\n+object TokenHolder {\n+\n+  private val logger = LoggerFactory.getLogger(classOf[TokenHolder])\n+\n+  private def slurpToken(path: Path): Try[String] =\n+    Try {\n+      logger.info(s\"Reading token from $path...\")\n+      Files.readAllLines(path).stream.collect(Collectors.joining(\"\\n\"))\n+    } recoverWith {"
  },
  {
    "id" : "768736d5-4f91-450a-b8da-19f7c4bfeb8a",
    "prId" : 3514,
    "comments" : [
      {
        "id" : "30ad9c34-79f3-4c7b-9b98-10ead7e162cf",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Since the result of `slurpToken` is always converted to an `Option`, the method might as well return the `Option` in the first place.",
        "createdAt" : "2019-11-19T06:45:00Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5a57a8ff-e5f2-4e39-ac13-8b78d3a34deb",
        "parentId" : "30ad9c34-79f3-4c7b-9b98-10ead7e162cf",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Yeah, I wrestled with the internal a bit and ended up with this, your point makes sense, working on it, thanks.",
        "createdAt" : "2019-11-19T10:14:06Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1443632b-f5ce-4956-b870-4ee8bd501cc3",
        "parentId" : "30ad9c34-79f3-4c7b-9b98-10ead7e162cf",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "üëç ",
        "createdAt" : "2019-11-19T12:22:25Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c1591453-0c7d-44c4-89cc-f34bcd493a7b",
        "parentId" : "30ad9c34-79f3-4c7b-9b98-10ead7e162cf",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3514/commits/461cf6189ae0521d5fb616d54dddc3a3ed3b97f5",
        "createdAt" : "2019-11-19T13:31:29Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bf2fcd17a4a975d9c4508a4a2d5777b00841ee76",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor.helpers\n+\n+import java.nio.file.{Files, Path}\n+import java.util.concurrent.atomic.AtomicReference\n+import java.util.stream.Collectors\n+\n+import org.slf4j.LoggerFactory\n+\n+import scala.util.{Failure, Try}\n+import scala.util.control.NonFatal\n+\n+object TokenHolder {\n+\n+  private val logger = LoggerFactory.getLogger(classOf[TokenHolder])\n+\n+  private def slurpToken(path: Path): Try[String] ="
  },
  {
    "id" : "8d6e2967-e03a-4cc1-a9b5-66caaba33331",
    "prId" : 3514,
    "comments" : [
      {
        "id" : "e001a392-7423-45a8-9e00-9d51058e6dad",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Even though we don't do any comparisons or put it as a key in a map or set of some sorts, I'd expect the type to be `AtomicReference[Option[Path]]` instead of `Option[AtomicReference[Try[Path]]]`.",
        "createdAt" : "2019-11-19T06:48:48Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a8424ca5-2137-4fa8-9634-1818bd49c13e",
        "parentId" : "e001a392-7423-45a8-9e00-9d51058e6dad",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "The idea was to make `TokenHolder` handle the fact that the token is optional transparent to the caller but I see your point, I'll refactor this.",
        "createdAt" : "2019-11-19T10:13:36Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e9b4728d-452b-4bfd-8959-e4a25d175aa5",
        "parentId" : "e001a392-7423-45a8-9e00-9d51058e6dad",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ok, I moved the path optionality out of here, the caller will deal with that.",
        "createdAt" : "2019-11-19T10:20:32Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1568dd18-f495-4506-bc46-c77d2e502ff6",
        "parentId" : "e001a392-7423-45a8-9e00-9d51058e6dad",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3514/commits/461cf6189ae0521d5fb616d54dddc3a3ed3b97f5",
        "createdAt" : "2019-11-19T13:31:41Z",
        "updatedAt" : "2019-11-19T14:49:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bf2fcd17a4a975d9c4508a4a2d5777b00841ee76",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,41 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor.helpers\n+\n+import java.nio.file.{Files, Path}\n+import java.util.concurrent.atomic.AtomicReference\n+import java.util.stream.Collectors\n+\n+import org.slf4j.LoggerFactory\n+\n+import scala.util.{Failure, Try}\n+import scala.util.control.NonFatal\n+\n+object TokenHolder {\n+\n+  private val logger = LoggerFactory.getLogger(classOf[TokenHolder])\n+\n+  private def slurpToken(path: Path): Try[String] =\n+    Try {\n+      logger.info(s\"Reading token from $path...\")\n+      Files.readAllLines(path).stream.collect(Collectors.joining(\"\\n\"))\n+    } recoverWith {\n+      case NonFatal(e) =>\n+        logger.error(s\"Unable to read token from $path\", e)\n+        Failure(e)\n+    }\n+\n+}\n+\n+final class TokenHolder(location: Option[Path]) {\n+\n+  import TokenHolder.slurpToken\n+\n+  private[this] val ref = location.map(path => new AtomicReference(slurpToken(path)))"
  }
]