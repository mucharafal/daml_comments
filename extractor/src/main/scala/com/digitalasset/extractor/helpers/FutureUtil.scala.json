[
  {
    "id" : "a72c0045-9cb0-424c-943e-a8d5682bdc69",
    "prId" : 1361,
    "comments" : [
      {
        "id" : "52a47852-6962-4ff7-a5b7-07f6897be58b",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Use `e.shows` instead, comes with `scalaz.syntax.show._`.",
        "createdAt" : "2019-05-31T17:29:18Z",
        "updatedAt" : "2019-05-31T17:35:33Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a06bb7ee-efc4-47a8-a869-0b1df6b7e54a",
        "parentId" : "52a47852-6962-4ff7-a5b7-07f6897be58b",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "why? it is just one extra indirect call :) it would deligate to the `E.shows`?",
        "createdAt" : "2019-05-31T17:45:23Z",
        "updatedAt" : "2019-05-31T17:45:23Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6fe34391457d4d74e585c4d58a1d06f858bdd053",
    "line" : 13,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor.helpers\n+\n+import scalaz.{NonEmptyList, Show, ValidationNel, \\/}\n+import scala.concurrent.Future\n+\n+object FutureUtil {\n+  def toFuture[E: Show, A](a: E \\/ A): Future[A] = {\n+    val E = implicitly[Show[E]]\n+    a.fold(\n+      e => Future.failed(new RuntimeException(E.shows(e))),"
  }
]