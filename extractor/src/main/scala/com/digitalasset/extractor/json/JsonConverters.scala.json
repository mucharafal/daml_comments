[
  {
    "id" : "1546d127-a6ea-4f6d-8749-0be2ebd8561f",
    "prId" : 3121,
    "comments" : [
      {
        "id" : "16cdd52b-224f-4e61-af05-60f30974a48a",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "shouldn't both be set to `true` by default? or is it set this way for backward compatibility? Do we really care about backward compatibility here?",
        "createdAt" : "2019-10-09T17:33:52Z",
        "updatedAt" : "2019-10-10T11:43:34Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "40731b73-273c-445a-83dc-c2f71481a934",
        "parentId" : "16cdd52b-224f-4e61-af05-60f30974a48a",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> shouldn't both be set to `true` by default?\r\n\r\nNo; the reasons true is good in other contexts are bad reasons here; in fact it would be better to make them both false here.\r\n\r\n> is it set this way for backward compatibility?\r\n\r\nYes. \r\n\r\n> Do we really care about backward compatibility here?\r\n\r\nYes.\r\n\r\nI don't know what queries have been written against extractor, so I'm minimizing the change while still accomplishing our goal of encoding unification.",
        "createdAt" : "2019-10-09T22:05:39Z",
        "updatedAt" : "2019-10-10T11:43:34Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "52a470129873a3be85c9b40a992b70fabb5cfb74",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +19,23 @@      extends ApiCodecCompressed[String](\n        encodeDecimalAsString = true,\n        encodeInt64AsString = false\n      ) {\n    import spray.json._, ApiCodecCompressed.JsonImplicits.StringJsonFormat"
  },
  {
    "id" : "ef2a3f74-0103-4303-9037-bc3df35cd7a2",
    "prId" : 1117,
    "comments" : [
      {
        "id" : "1f8a0afc-ad8f-43eb-8e23-3234b18222de",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "cc @bitonic @remyhaemmerle-da @leo-da for JSON-pinions",
        "createdAt" : "2019-05-14T22:38:03Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d9b219f9-3fbc-4fd4-afcd-e67cbb6ff3cb",
        "parentId" : "1f8a0afc-ad8f-43eb-8e23-3234b18222de",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "Yes, i think we should change this to use string representations, as we did with the old JSON-through-LfTypeEncoding. Feel free to change this in the next PR though.",
        "createdAt" : "2019-05-15T10:03:19Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a933c9948d4fd9990fc99ba78d4a2703561922c0",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +108,112 @@\n  // TODO SC this matches the prior behavior of JSON-ing the dates and timestamps\n  // as days-since and micros-since epoch, but maybe we'd like something else?\n  implicit val lfDateEncoder: Encoder[Time.Date] =\n    Encoder[Int].contramap(_.days)"
  },
  {
    "id" : "e087345b-057a-4bd4-b668-ddfa248ac6f1",
    "prId" : 1117,
    "comments" : [
      {
        "id" : "1ac6914e-18b7-4823-9536-e79ffd53b395",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "we convert `record.fields` to sequence twice for no reason, no matter which if/else branch we go... could reuse the value returned by the 1st `toSeq` call.\r\n\r\nI hope we have a test case for a record with one label present `Some(x)`, and one absent `None`. Not sure if `record.fields.toSeq.map(_.asJson).asJson` will do the right thing.",
        "createdAt" : "2019-05-15T16:55:24Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "19d0f7f9-4bd4-48b3-9014-a98f3040b007",
        "parentId" : "1ac6914e-18b7-4823-9536-e79ffd53b395",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> we convert `record.fields` to sequence twice for no reason, no matter which if/else branch we go... could reuse the value returned by the 1st `toSeq` call.\r\n\r\n`toSeq` is ridiculously cheap, little value in combining.\r\n\r\n> I hope we have a test case for a record with one label present `Some(x)`, and one absent `None`.\r\n\r\nNope! I'll add one.",
        "createdAt" : "2019-05-15T17:08:32Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a933c9948d4fd9990fc99ba78d4a2703561922c0",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +28,32 @@\n  implicit val recordEncoder: Encoder[OfCid[V.ValueRecord]] = record =>\n    if (record.fields.toSeq.forall(_._1.isDefined))\n      JsonObject(\n        record.fields.toSeq"
  }
]