[
  {
    "id" : "99605cbe-3e6f-468c-a803-e80ff9b28180",
    "prId" : 1481,
    "comments" : [
      {
        "id" : "913d447a-f90b-47c4-aae4-55efc4215a90",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    Ordering.by(TemplateConfig.unapply).compare(this, that)\r\n```",
        "createdAt" : "2019-05-31T19:44:08Z",
        "updatedAt" : "2019-06-03T14:49:56Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "652f30ce-7956-46cf-8660-4b1cd1a97f23",
        "parentId" : "913d447a-f90b-47c4-aae4-55efc4215a90",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "nope... it will be slower... it will be creating a new instance of the Ordering for ever `compare` call:\r\n```\r\n  def by[T, S](f: T => S)(implicit ord: Ordering[S]): Ordering[T] = new Ordering[T] {\r\n    def compare(x: T, y: T) = ord.compare(f(x), f(y))\r\n    override def lt(x: T, y: T): Boolean = ord.lt(f(x), f(y))\r\n    override def gt(x: T, y: T): Boolean = ord.gt(f(x), f(y))\r\n    override def gteq(x: T, y: T): Boolean = ord.gteq(f(x), f(y))\r\n    override def lteq(x: T, y: T): Boolean = ord.lteq(f(x), f(y))\r\n  }\r\n```",
        "createdAt" : "2019-05-31T20:04:26Z",
        "updatedAt" : "2019-06-03T14:49:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5f5aa72f-fd2b-4a66-b359-233bf7a1fd79",
        "parentId" : "913d447a-f90b-47c4-aae4-55efc4215a90",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Then stash it away somewhere. You've written the contramap application out by hand twice, which risks divergence later.",
        "createdAt" : "2019-05-31T20:22:38Z",
        "updatedAt" : "2019-06-03T14:49:56Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aca50bb5-40cc-4b6c-9a2e-3e4440dfefc8",
        "parentId" : "913d447a-f90b-47c4-aae4-55efc4215a90",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "you lost me. where is it going to diverge if the it is implemented:\r\n```\r\n  override def compare(that: TemplateConfig): Int = {\r\n    val a: (String, String) = (this.moduleName, this.entityName)\r\n    val b: (String, String) = (that.moduleName, that.entityName)\r\n    val O = implicitly[Ordering[(String, String)]]\r\n    O.compare(a, b)\r\n  }\r\n```",
        "createdAt" : "2019-05-31T20:30:25Z",
        "updatedAt" : "2019-06-03T14:49:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "45c73665-c114-4cba-96c7-915a3527a0d0",
        "parentId" : "913d447a-f90b-47c4-aae4-55efc4215a90",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Someone can edit the definition of `a` or `b` in a way inconsistent with the other; I don't have faith in my future self's ability to \"be careful\" about such mistakes.",
        "createdAt" : "2019-05-31T20:47:07Z",
        "updatedAt" : "2019-06-03T14:49:56Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15f2c5b1464e628ace830961aeced4e45bbcccac",
    "line" : null,
    "diffHunk" : "@@ -40,8 +40,12 @@ object ExtractorConfig {\n }\n \n final case class TemplateConfig(moduleName: String, entityName: String)\n-\n-object TemplateConfig {\n-  implicit val templateConfigOrdering: Ordering[TemplateConfig] =\n-    Ordering.by(TemplateConfig.unapply)\n+    extends Ordered[TemplateConfig] {\n+\n+  override def compare(that: TemplateConfig): Int = {\n+    val a: (String, String) = (this.moduleName, this.entityName)\n+    val b: (String, String) = (that.moduleName, that.entityName)\n+    val O = implicitly[Ordering[(String, String)]]\n+    O.compare(a, b)"
  },
  {
    "id" : "3b79ba23-58f8-4278-95dc-32bec3c17116",
    "prId" : 1361,
    "comments" : [
      {
        "id" : "f3037d48-f05c-42de-9764-f2c1d3295821",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\nfinal case class TemplateConfig(moduleName: String, entityName: String) extends Ordered[TemplateConfig]\r\n```\r\n\r\nWhen possible I prefer to use `scala.math.Ordered` over `scala.math.Ordering`.\r\n\r\nSee  [`scala.math.Ordering`](https://www.scala-lang.org/api/2.12.3/scala/math/Ordering.html)\r\n> this trait and scala.math.Ordered both provide this same functionality, but in different ways. A type T can be given a single way to order itself by extending Ordered. Using Ordering, this same type may be sorted in many other ways. ",
        "createdAt" : "2019-05-31T07:24:38Z",
        "updatedAt" : "2019-05-31T07:24:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6fe34391457d4d74e585c4d58a1d06f858bdd053",
    "line" : 13,
    "diffHunk" : "@@ -37,3 +38,10 @@ final case class ExtractorConfig(\n object ExtractorConfig {\n   type Parties = OneAnd[List, Party]\n }\n+\n+final case class TemplateConfig(moduleName: String, entityName: String)"
  }
]