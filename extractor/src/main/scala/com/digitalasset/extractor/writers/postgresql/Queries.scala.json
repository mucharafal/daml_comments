[
  {
    "id" : "a12a846b-7a7a-470f-9743-9bd4793664e8",
    "prId" : 7618,
    "comments" : [
      {
        "id" : "1d115ea1-b2a2-41ff-a97e-88c049859c9c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems like a very confusing API. Postgres requires importing a legacy API? :thinking:\r\n\r\nI guess you have to use oracle if you want the non-legacy API?",
        "createdAt" : "2020-10-16T07:29:25Z",
        "updatedAt" : "2020-10-16T07:38:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8d962e2-80e8-4443-9cd3-38890b5ce804",
        "parentId" : "1d115ea1-b2a2-41ff-a97e-88c049859c9c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "🤷‍♂️ tpolecat/doobie#1236 tpolecat/doobie#1099",
        "createdAt" : "2020-10-16T16:30:22Z",
        "updatedAt" : "2020-10-16T16:30:22Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "96d796cb5ff2cb8b3ea93178d74041537cdd48cd",
    "line" : 4,
    "diffHunk" : "@@ -10,6 +10,9 @@ import com.daml.extractor.Types._\n import com.daml.extractor.ledger.types._\n import doobie._\n import doobie.implicits._\n+// legacy versions required for postgres see https://github.com/tpolecat/doobie/releases/tag/v0.8.8"
  },
  {
    "id" : "ca912fd5-b622-4b02-8bb3-88ca461227c8",
    "prId" : 2937,
    "comments" : [
      {
        "id" : "4f42c1c6-fa1c-4ae7-8400-49911294e909",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I guess we need to remove this assertion once we release daml-lf?",
        "createdAt" : "2019-09-17T15:10:21Z",
        "updatedAt" : "2019-09-18T16:23:11Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "df64a456-dec3-48c1-b9ed-de5831b3be43",
        "parentId" : "4f42c1c6-fa1c-4ae7-8400-49911294e909",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "In order to be able to merge this PR soon, I dropped the change for the extractor.\r\nI will do in a other PR, next week. ",
        "createdAt" : "2019-09-18T15:24:50Z",
        "updatedAt" : "2019-09-18T16:23:11Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5aa2c2df5cec26681a5e56a0e5635d1a63a2fd28",
    "line" : null,
    "diffHunk" : "@@ -303,10 +303,8 @@ object Queries {\n           )\n         case V.ValueInt64(value) => Fragment(\"?\", value)\n         case V.ValueNumeric(value) =>\n-          // FixMe: https://github.com/digital-asset/daml/issues/2289\n-          //  For now all the ValueNumeric should have scale 10\n-          //  Check this code once it is possible to create Numerics with different scale\n-          Fragment(\"?::numeric(38,10)\", value: BigDecimal)\n+          assert(value.scale == 10)"
  },
  {
    "id" : "e05c619c-21c3-4951-8dbc-4c696f7cfaf1",
    "prId" : 2594,
    "comments" : [
      {
        "id" : "e5b26511-a7b1-41de-8140-51b49b066bb9",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Seems like this SQL conversion won't be right anymore?",
        "createdAt" : "2019-08-20T17:26:34Z",
        "updatedAt" : "2019-08-22T14:59:59Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c423f4d3-c738-41ff-9c25-1b5e40a1e89b",
        "parentId" : "e5b26511-a7b1-41de-8140-51b49b066bb9",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Likewise for `MultiTableDataFormat#mapSQLType`.",
        "createdAt" : "2019-08-20T17:29:30Z",
        "updatedAt" : "2019-08-22T14:59:59Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9bd8343d-330b-43c8-9b16-db8221a764c8",
        "parentId" : "e5b26511-a7b1-41de-8140-51b49b066bb9",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We still cannot create Numeric with a scale different from 10.\r\n\r\nAnyway `MultiTableDataFormat#mapSQLType` needs an updated version of the interface reader which will come in a following PR. \r\n\r\nI added a comment to not forget the fixes \r\n\r\n",
        "createdAt" : "2019-08-21T08:13:05Z",
        "updatedAt" : "2019-08-22T14:59:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "285b713ebef9aaf0d6506d3a7272a7263cf505ad",
    "line" : null,
    "diffHunk" : "@@ -302,7 +302,7 @@ object Queries {\n             toJsonString(l)\n           )\n         case V.ValueInt64(value) => Fragment(\"?\", value)\n-        case V.ValueDecimal(value) => Fragment(\"?::numeric(38,10)\", value: BigDecimal)\n+        case V.ValueNumeric(value) => Fragment(\"?::numeric(38,10)\", value: BigDecimal)"
  },
  {
    "id" : "73c58472-a5c7-4f82-90c3-d7f9e7d02d20",
    "prId" : 1917,
    "comments" : [
      {
        "id" : "bd294b9c-69e2-4ae1-bbe6-4071c79c5982",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "We should copy `ValueText`'s semantics instead, not records' or variants'.\r\n\r\n`MultiTableDataFormat#mapSQLType` needs a case under `TypeCon`, which means that the premise of `GenTypeOps#fat` (that the SQL type of an `iface.Type` may be determined given no other context) is now false, and `FullyAppliedType.TypeCon` needs to be extended with the information of whether or not the type is an enum.",
        "createdAt" : "2019-07-01T16:00:28Z",
        "updatedAt" : "2019-07-03T06:20:12Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f744faab38dcc06450aee21a2eab02d0da2d2ced",
    "line" : null,
    "diffHunk" : "@@ -288,9 +288,12 @@ object Queries {\n             \"?::jsonb\",\n             toJsonString(v)\n           )\n+\n         case e @ V.ValueEnum(_, _) =>\n-          // FixMe (RH) https://github.com/digital-asset/daml/issues/105\n-          throw new NotImplementedError(\"Enum types not supported\")\n+          Fragment(\n+            \"?::jsonb\",\n+            toJsonString(e)\n+          )"
  },
  {
    "id" : "3e938427-3643-4bbd-93ad-3396f60eb1a1",
    "prId" : 1117,
    "comments" : [
      {
        "id" : "06325129-d74d-4ae1-a912-686f3316c9b8",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "This can be a constant, don't know if `Fragment.const` is actually heavy or not.",
        "createdAt" : "2019-05-15T16:59:41Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a933c9948d4fd9990fc99ba78d4a2703561922c0",
    "line" : 50,
    "diffHunk" : "@@ -269,54 +268,52 @@ object Queries {\n \n     private def toFragmentNullable(valueSum: LedgerValue): Fragment = {\n       valueSum match {\n-        case LedgerValue.Optional(None) => Fragment.const(\"NULL\")\n-        case LedgerValue.Optional(Some(innerVal)) => toFragment(innerVal)\n+        case V.ValueOptional(None) => Fragment.const(\"NULL\")"
  }
]