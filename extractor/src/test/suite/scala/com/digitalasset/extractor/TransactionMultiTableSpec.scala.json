[
  {
    "id" : "1b6e31f9-3ed0-4a2a-bd45-4d01ccbeb3e1",
    "prId" : 7210,
    "comments" : [
      {
        "id" : "73967115-5486-4165-bd17-23ad360b1ab3",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "How does the comment relate to the check?",
        "createdAt" : "2020-08-24T11:29:47Z",
        "updatedAt" : "2020-08-24T11:36:31Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c4cb7310-19ab-4e83-bcd5-e7c0ade87874",
        "parentId" : "73967115-5486-4165-bd17-23ad360b1ab3",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The naming here is horrible:\r\nThe multitable schema creates one table per schema. `transaction_id2` is transaction id of the second offer contract which is the third contract in total. Iâ€™ve added the `offer` suffix consistently and a few comments which hopefully help.",
        "createdAt" : "2020-08-24T11:37:13Z",
        "updatedAt" : "2020-08-24T11:37:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e92b31f8-a032-4469-a800-810d9cffc5ff",
        "parentId" : "73967115-5486-4165-bd17-23ad360b1ab3",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Thank you for clarifying, makes sense.",
        "createdAt" : "2020-08-24T12:04:11Z",
        "updatedAt" : "2020-08-24T12:04:11Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "41af2cec1c3a7672172b5470dad8265b8018e836",
    "line" : null,
    "diffHunk" : "@@ -63,45 +63,62 @@ class TransactionMultiTableSpec\n   it should \"be transactions with different ids\" in {\n     val transactions = getTransactions\n \n-    transactions.map(_.transaction_id).toSet should have size 2\n-    transactions.map(_.workflow_id).toSet should have size 2\n-    transactions.map(_.seq).toSet should have size 2\n-    transactions.map(_.ledger_offset).toSet should have size 2\n+    transactions.map(_.transaction_id).toSet should have size 3\n+    transactions.map(_.workflow_id).toSet should have size 3\n+    transactions.map(_.seq).toSet should have size 3\n+    transactions.map(_.ledger_offset).toSet should have size 3\n   }\n \n   \"Exercises\" should \"be extracted\" in {\n-    getExercises should have length 1\n+    getExercises should have length 2\n   }\n \n   \"All the data\" should \"represent what went down in the scenario\" in {\n     // `transaction1` created `contract1`, then\n     // `transaction2` created `exercise`, which archived `contract1` and resulted `contract2`\n \n-    val List(transaction1, transaction2) = getTransactions.sortBy(_.seq)\n-    val List(exercise) = getExercises\n-    val List((archived_by_event_id1, transaction_id1, archived_by_transaction_id1)) =\n+    val List(transaction1, transaction2, transaction3) = getTransactions.sortBy(_.seq)\n+    val List(exercise1, exercise2) = getExercises\n+    val List(\n+      (archived_by_event_id1, transaction_id1, archived_by_transaction_id1),\n+      (archived_by_event_id2, transaction_id2, archived_by_transaction_id2)) =\n       getResultList[(Option[String], String, Option[String])](\n         sql\"SELECT _archived_by_event_id, _transaction_id, _archived_by_transaction_id FROM template.transactionexample_rightofuseoffer\")\n-    val List((event_id2, archived_by_event_id2, transaction_id2, archived_by_transaction_id2)) =\n+    val List(\n+      (\n+        event_id_accept,\n+        archived_by_event_id_accept,\n+        transaction_id_accept,\n+        archived_by_transaction_id_accept)) =\n       getResultList[(String, Option[String], String, Option[String])](\n         sql\"SELECT _event_id, _archived_by_event_id, _transaction_id, _archived_by_transaction_id FROM template.transactionexample_rightofuseagreement\")\n \n     // `transaction1` created `contract1`, then\n     transaction_id1 shouldEqual transaction1.transaction_id\n \n-    // `transaction2` created `exercise`\n-    exercise.transaction_id shouldEqual transaction2.transaction_id\n+    // `transaction2` created `exercise1`\n+    exercise1.transaction_id shouldEqual transaction2.transaction_id\n \n-    // `exercised` archived `contract1`\n+    // `exercise1` archived `contract1`\n     archived_by_transaction_id1 shouldEqual Some(transaction2.transaction_id)\n-    archived_by_event_id1 shouldEqual Some(exercise.event_id)\n+    archived_by_event_id1 shouldEqual Some(exercise1.event_id)\n \n     // ... while it resulted in `contract2`\n-    exercise.child_event_ids.asArray.toList.toVector.flatten should contain(event_id2.asJson)\n-    transaction_id2 shouldEqual transaction2.transaction_id\n+    exercise1.child_event_ids.asArray.toList.toVector.flatten should contain(event_id_accept.asJson)\n+    transaction_id_accept shouldEqual transaction2.transaction_id\n     // which is not archived\n-    archived_by_transaction_id2 shouldEqual None\n-    archived_by_event_id2 shouldEqual None\n+    archived_by_transaction_id_accept shouldEqual None\n+    archived_by_event_id_accept shouldEqual None\n+\n+    // `transaction3` created `contract3`; then\n+    transaction_id2 shouldEqual transaction3.transaction_id"
  }
]