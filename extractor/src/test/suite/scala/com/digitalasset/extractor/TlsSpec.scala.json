[
  {
    "id" : "ad9cdbd2-6841-412e-b088-88d2420a0d55",
    "prId" : 3394,
    "comments" : [
      {
        "id" : "dc4e14cd-a27c-4815-9136-70fa0f29ebe2",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Sticking to `Path` (except for `.deleteOnExit`) might make it easier to avoid Apache Commons here.\r\n\r\n```scala\r\n  private def extractCerts: Path = {\r\n    val dir = Files.createTempDirectory(\"TlsIT\")\r\n    dir.toFile.deleteOnExit()\r\n    List(\"server.crt\", \"server.pem\", \"ca.crt\", \"client.crt\", \"client.pem\").foreach { src =>\r\n      val target = path.resolve(src)\r\n      target.toFile.deleteOnExit()\r\n      val stream = getClass.getClassLoader.getResourceAsStream(\"certificates/\" + src)\r\n      Files.copy(stream, target)\r\n    }\r\n    dir\r\n  }\r\n```",
        "createdAt" : "2019-11-08T09:16:39Z",
        "updatedAt" : "2019-11-08T12:02:46Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aceebb26-cec3-4629-9003-dcf1616905b6",
        "parentId" : "dc4e14cd-a27c-4815-9136-70fa0f29ebe2",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Nice, thanks.",
        "createdAt" : "2019-11-08T11:47:32Z",
        "updatedAt" : "2019-11-08T12:02:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0fc5f81c61aa57a873695819d095fb3d3ea9c2d7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor\n+\n+import java.io.File\n+import java.nio.file.{Files, Path}\n+\n+import com.digitalasset.daml.bazeltools.BazelRunfiles._\n+import com.digitalasset.extractor.config.SnapshotEndSetting\n+import com.digitalasset.extractor.services.ExtractorFixture\n+import com.digitalasset.extractor.targets.TextPrintTarget\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.ledger.api.tls.TlsConfiguration\n+import com.digitalasset.platform.sandbox.config.SandboxConfig\n+import org.apache.commons.io.FileUtils\n+import org.scalatest._\n+\n+import scala.concurrent.Await\n+import scala.concurrent.duration._\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+class TlsSpec\n+    extends FlatSpec\n+    with Suite\n+    with SuiteResourceManagementAroundAll\n+    with ExtractorFixture\n+    with Matchers {\n+\n+  override protected def darFile = new File(rlocation(\"extractor/VeryLargeArchive.dar\"))\n+\n+  private def extractCerts: Path = {\n+    val dir = Files.createTempDirectory(\"TlsIT\").toFile\n+    dir.deleteOnExit()\n+    List(\"server.crt\", \"server.pem\", \"ca.crt\", \"client.crt\", \"client.pem\").foreach { src =>\n+      val target = new File(dir, src)\n+      target.deleteOnExit()\n+      val stream = getClass.getClassLoader.getResourceAsStream(\"certificates/\" + src)\n+      FileUtils.copyInputStreamToFile(stream, target)\n+    }\n+    dir.toPath\n+  }"
  },
  {
    "id" : "2023e0cd-4dd7-4a23-9a5d-ed840bda596d",
    "prId" : 3394,
    "comments" : [
      {
        "id" : "877dfd50-1fc9-4c97-8b5a-1bf2b7b10648",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "There's duplication between here and `extractCerts`. Perhaps create these first?",
        "createdAt" : "2019-11-08T09:23:49Z",
        "updatedAt" : "2019-11-08T12:02:46Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0fc5f81c61aa57a873695819d095fb3d3ea9c2d7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor\n+\n+import java.io.File\n+import java.nio.file.{Files, Path}\n+\n+import com.digitalasset.daml.bazeltools.BazelRunfiles._\n+import com.digitalasset.extractor.config.SnapshotEndSetting\n+import com.digitalasset.extractor.services.ExtractorFixture\n+import com.digitalasset.extractor.targets.TextPrintTarget\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.ledger.api.tls.TlsConfiguration\n+import com.digitalasset.platform.sandbox.config.SandboxConfig\n+import org.apache.commons.io.FileUtils\n+import org.scalatest._\n+\n+import scala.concurrent.Await\n+import scala.concurrent.duration._\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+class TlsSpec\n+    extends FlatSpec\n+    with Suite\n+    with SuiteResourceManagementAroundAll\n+    with ExtractorFixture\n+    with Matchers {\n+\n+  override protected def darFile = new File(rlocation(\"extractor/VeryLargeArchive.dar\"))\n+\n+  private def extractCerts: Path = {\n+    val dir = Files.createTempDirectory(\"TlsIT\").toFile\n+    dir.deleteOnExit()\n+    List(\"server.crt\", \"server.pem\", \"ca.crt\", \"client.crt\", \"client.pem\").foreach { src =>\n+      val target = new File(dir, src)\n+      target.deleteOnExit()\n+      val stream = getClass.getClassLoader.getResourceAsStream(\"certificates/\" + src)\n+      FileUtils.copyInputStreamToFile(stream, target)\n+    }\n+    dir.toPath\n+  }\n+\n+  private lazy val certificatesPath = extractCerts\n+  private lazy val certificatesDirPrefix: String = certificatesPath.toString + File.separator\n+\n+  private lazy val serverCertChainFilePath = Some(new File(certificatesDirPrefix, \"server.crt\"))\n+  private lazy val serverPrivateKeyFilePath = Some(new File(certificatesDirPrefix, \"server.pem\"))\n+  private lazy val trustCertCollectionFilePath = Some(new File(certificatesDirPrefix, \"ca.crt\"))\n+  private lazy val clientCertChainFilePath = Some(new File(certificatesDirPrefix, \"client.crt\"))\n+  private lazy val clientPrivateKeyFilePath = Some(new File(certificatesDirPrefix, \"client.pem\"))"
  },
  {
    "id" : "cc7350dc-5a5d-4900-8d64-a96e8be91958",
    "prId" : 3394,
    "comments" : [
      {
        "id" : "1e579afc-618d-4e74-8f06-80ce6cf28475",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Should this be in a `beforeEach`?",
        "createdAt" : "2019-11-08T09:23:58Z",
        "updatedAt" : "2019-11-08T12:02:46Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0fc5f81c61aa57a873695819d095fb3d3ea9c2d7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor\n+\n+import java.io.File\n+import java.nio.file.{Files, Path}\n+\n+import com.digitalasset.daml.bazeltools.BazelRunfiles._\n+import com.digitalasset.extractor.config.SnapshotEndSetting\n+import com.digitalasset.extractor.services.ExtractorFixture\n+import com.digitalasset.extractor.targets.TextPrintTarget\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.ledger.api.tls.TlsConfiguration\n+import com.digitalasset.platform.sandbox.config.SandboxConfig\n+import org.apache.commons.io.FileUtils\n+import org.scalatest._\n+\n+import scala.concurrent.Await\n+import scala.concurrent.duration._\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+class TlsSpec\n+    extends FlatSpec\n+    with Suite\n+    with SuiteResourceManagementAroundAll\n+    with ExtractorFixture\n+    with Matchers {\n+\n+  override protected def darFile = new File(rlocation(\"extractor/VeryLargeArchive.dar\"))\n+\n+  private def extractCerts: Path = {\n+    val dir = Files.createTempDirectory(\"TlsIT\").toFile\n+    dir.deleteOnExit()\n+    List(\"server.crt\", \"server.pem\", \"ca.crt\", \"client.crt\", \"client.pem\").foreach { src =>\n+      val target = new File(dir, src)\n+      target.deleteOnExit()\n+      val stream = getClass.getClassLoader.getResourceAsStream(\"certificates/\" + src)\n+      FileUtils.copyInputStreamToFile(stream, target)\n+    }\n+    dir.toPath\n+  }\n+\n+  private lazy val certificatesPath = extractCerts"
  },
  {
    "id" : "9ced22a0-169b-490a-ad47-8abdb8b01187",
    "prId" : 3394,
    "comments" : [
      {
        "id" : "e7195072-c3f8-410d-8311-ba493366de10",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "There's side effects here, so I'd appreciate a `()`.",
        "createdAt" : "2019-11-08T09:24:20Z",
        "updatedAt" : "2019-11-08T12:02:46Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "14e3579c-40d4-44d4-9c7b-1d68c3403e74",
        "parentId" : "e7195072-c3f8-410d-8311-ba493366de10",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I removed the entire `extractCerts` method. (All this code was copied from another spec in the sandbox tests). Should be cleaner now.",
        "createdAt" : "2019-11-08T11:53:33Z",
        "updatedAt" : "2019-11-08T12:02:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0fc5f81c61aa57a873695819d095fb3d3ea9c2d7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.extractor\n+\n+import java.io.File\n+import java.nio.file.{Files, Path}\n+\n+import com.digitalasset.daml.bazeltools.BazelRunfiles._\n+import com.digitalasset.extractor.config.SnapshotEndSetting\n+import com.digitalasset.extractor.services.ExtractorFixture\n+import com.digitalasset.extractor.targets.TextPrintTarget\n+import com.digitalasset.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import com.digitalasset.ledger.api.tls.TlsConfiguration\n+import com.digitalasset.platform.sandbox.config.SandboxConfig\n+import org.apache.commons.io.FileUtils\n+import org.scalatest._\n+\n+import scala.concurrent.Await\n+import scala.concurrent.duration._\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+class TlsSpec\n+    extends FlatSpec\n+    with Suite\n+    with SuiteResourceManagementAroundAll\n+    with ExtractorFixture\n+    with Matchers {\n+\n+  override protected def darFile = new File(rlocation(\"extractor/VeryLargeArchive.dar\"))\n+\n+  private def extractCerts: Path = {"
  }
]