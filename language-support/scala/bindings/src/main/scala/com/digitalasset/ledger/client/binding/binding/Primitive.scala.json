[
  {
    "id" : "dbc699f1-14cf-41fb-a34a-bad27f939055",
    "prId" : 3522,
    "comments" : [
      {
        "id" : "3422df03-50aa-47d9-bceb-4b12836a5602",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It's fine to permit builtin map key treatment under a rather big *if*: that for all ⊢ₛ τ, e₁: τ, e₂: τ, `e₁ ~ᵥ e₂` ≡ e₁ₛ `==` e₂ₛ, where eₙₛ are the Scala codegen representations of eₙ respectively, and `==` is the builtin Scala equality method.\r\n\r\nMy reading of ~ᵥ tells me this is currently true. However, if it is not, or it becomes untrue (such as by introduction of key comparison based on DAML evaluation), then `imm.Map` cannot be used here for that reason. At the minimum in such a case, you would have to define a typeclass for ~ᵥ (and derive it for generated records and variants as well), and that is assuming that would even work.\r\n\r\n----\r\n\r\nHowever, there's another reason that `imm.Map` may be wrong here. One can currently assume that if you decode a value into Scala codegen, then encode it and submit it as a create or choice argument, it will be equal¹ to the original decoded value. But the spec says \"The keys are returned by first-insertion order\"; that would be scrambled by most choices that fit `imm.Map` here.",
        "createdAt" : "2019-11-19T17:24:18Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "52013dd7-114f-4019-858d-947137b4f5ce",
        "parentId" : "3422df03-50aa-47d9-bceb-4b12836a5602",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "¹ Here I mean in the strongest, substitution sense: the = such that ∀a,b,f: a = b ⇒ f(a) = f(b). That is, after all, the only one that will guarantee that the results of the command would be the same.",
        "createdAt" : "2019-11-19T19:28:33Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c8ede833-56d5-4282-82e2-ee9e6f0d239d",
        "parentId" : "3422df03-50aa-47d9-bceb-4b12836a5602",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thanks @S11001001. You have made a very good point. \r\nI replace the `imm.Map` by `InsertOrdMap`. ",
        "createdAt" : "2019-11-21T22:10:09Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c1362991-8850-4a94-8a63-0ac3202bca12",
        "parentId" : "3422df03-50aa-47d9-bceb-4b12836a5602",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "By the way, your \"big _if_\" is an **important** assumption of the equality we define for map key. \r\n- No user defined equality.\r\n- Equality is reflexive for all serializable values.\r\n\r\nThe equality of `Map`  is still independent of the entries ordering.",
        "createdAt" : "2019-11-21T22:19:46Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "16fc9a85aea14851e9ec58117022ef66e1aee8ab",
    "line" : null,
    "diffHunk" : "@@ -47,9 +47,12 @@ sealed abstract class Primitive {\n   type Optional[+A] = scala.Option[A]\n   val Optional: scala.Option.type = scala.Option\n \n-  type Map[+A] = imm.Map[String, A]\n+  type Map[+V] = imm.Map[String, V]\n   val Map: imm.Map.type = imm.Map\n \n+  type GenMap[K, +V] = imm.Map[K, V]\n+  val GenMap: imm.Map.type = imm.Map"
  },
  {
    "id" : "041ff947-a5f1-44f9-a787-a7b7cdb34b4d",
    "prId" : 3522,
    "comments" : [
      {
        "id" : "fbd313dd-b8c7-407e-b64b-7ce2bd1a327c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  @deprecated(\"Use TextMap\", since = \"0.13.38\")\r\n```\r\n\r\nAnd likewise for the latter; never use `Deprecated` in scala.",
        "createdAt" : "2019-11-22T17:20:40Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f1116398-e18a-4d99-ba23-bd069eed6887",
        "parentId" : "fbd313dd-b8c7-407e-b64b-7ce2bd1a327c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-25T09:47:31Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "16fc9a85aea14851e9ec58117022ef66e1aee8ab",
    "line" : null,
    "diffHunk" : "@@ -47,8 +49,16 @@ sealed abstract class Primitive {\n   type Optional[+A] = scala.Option[A]\n   val Optional: scala.Option.type = scala.Option\n \n-  type Map[+A] = imm.Map[String, A]\n-  val Map: imm.Map.type = imm.Map\n+  type TextMap[+V] = imm.Map[String, V]\n+  val TextMap: imm.Map.type = imm.Map\n+\n+  @Deprecated // Use TextMap"
  },
  {
    "id" : "47bd57d7-b52e-4d7f-ac45-d26293b3b51b",
    "prId" : 2211,
    "comments" : [
      {
        "id" : "be754dc8-0a0c-420d-b14c-0dd72c701b1d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It provides the only static guarantee that this method is visible.\r\n\r\n```suggestion\r\n    override def apply[Tpl <: Template[Tpl]](\r\n```",
        "createdAt" : "2019-07-18T16:40:33Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "514a83bb-3cea-461c-b6a5-ed58d5aa0288",
        "parentId" : "be754dc8-0a0c-420d-b14c-0dd72c701b1d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-07-23T06:47:49Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2898f714d9c97e35ffc61414443bef02239a431c",
    "line" : null,
    "diffHunk" : "@@ -184,29 +160,27 @@ private[client] object OnlyPrimitive extends Primitive {\n   object TemplateId extends TemplateIdApi {\n     // the ledger api still uses names with only dots in them, while QualifiedName.toString\n     // separates the module and the name in the module with colon.\n-    override def apply[Tpl <: Template[Tpl]](\n+    def apply[Tpl <: Template[Tpl]]("
  },
  {
    "id" : "b6c9606b-3369-44c7-a70c-75cb1d001651",
    "prId" : 2211,
    "comments" : [
      {
        "id" : "1a2f6350-7236-419d-a445-6e0f1bbe6895",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    override def unapply[Tpl](t: TemplateId[Tpl]): Some[(String, String, String)] =\r\n```",
        "createdAt" : "2019-07-18T16:40:42Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fa8520f8-67ed-4da8-ab2e-88eb01f21d8e",
        "parentId" : "1a2f6350-7236-419d-a445-6e0f1bbe6895",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-07-23T07:11:10Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2898f714d9c97e35ffc61414443bef02239a431c",
    "line" : null,
    "diffHunk" : "@@ -184,29 +160,27 @@ private[client] object OnlyPrimitive extends Primitive {\n   object TemplateId extends TemplateIdApi {\n     // the ledger api still uses names with only dots in them, while QualifiedName.toString\n     // separates the module and the name in the module with colon.\n-    override def apply[Tpl <: Template[Tpl]](\n+    def apply[Tpl <: Template[Tpl]](\n         packageId: String,\n         moduleName: String,\n         entityName: String): TemplateId[Tpl] =\n       ApiTypes.TemplateId(\n-        rpcvalue.Identifier(\n-          packageId = packageId,\n-          name = s\"$moduleName.$entityName\",\n-          moduleName = moduleName,\n-          entityName = entityName))\n+        rpcvalue\n+          .Identifier(packageId = packageId, moduleName = moduleName, entityName = entityName))\n \n     private[binding] override def substEx[F[_]](fa: F[rpcvalue.Identifier]) =\n       ApiTypes.TemplateId subst fa\n \n-    override def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)] =\n+    def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)] ="
  },
  {
    "id" : "50e544ca-e770-40b8-9a05-1a63e679b595",
    "prId" : 2211,
    "comments" : [
      {
        "id" : "318a7807-31d9-4bb3-aa65-b79849d96b5d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n     def unapply[Tpl](t: TemplateId[Tpl]): Some[(String, String, String)]\r\n```",
        "createdAt" : "2019-07-18T16:41:12Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1fa564aa-eac1-439a-a2b1-9fd768e48722",
        "parentId" : "318a7807-31d9-4bb3-aa65-b79849d96b5d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed.",
        "createdAt" : "2019-07-23T07:08:32Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3180347a-b8bb-4b2e-b390-2497b217516b",
        "parentId" : "318a7807-31d9-4bb3-aa65-b79849d96b5d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "If you don't put `Some` here too it won't be visible.",
        "createdAt" : "2019-07-23T16:52:49Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2898f714d9c97e35ffc61414443bef02239a431c",
    "line" : 18,
    "diffHunk" : "@@ -101,34 +100,11 @@ sealed abstract class Primitive {\n \n     private[binding] def substEx[F[_]](fa: F[rpcvalue.Identifier]): F[TemplateId[_]]\n \n-    /** Package ID, module name, and entity name, unless the underlying\n-      * gRPC Identifier was built with the very old and ambiguous two-argument\n-      * form.  Use [[LegacyTemplateId]] instead if you want to extract\n-      * the two-argument form.\n+    /** Package ID, module name, and entity name.\n       */\n     def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)]"
  },
  {
    "id" : "32d52b85-652a-4271-9b08-52bb51f62175",
    "prId" : 2211,
    "comments" : [
      {
        "id" : "94046a31-f0bf-46bc-bd43-ba261f903347",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n             =>\r\n```",
        "createdAt" : "2019-07-18T16:41:40Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5f0fe387-f9c1-47b8-8e5e-e687f04c2103",
        "parentId" : "94046a31-f0bf-46bc-bd43-ba261f903347",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-07-23T07:11:19Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2898f714d9c97e35ffc61414443bef02239a431c",
    "line" : null,
    "diffHunk" : "@@ -184,29 +160,27 @@ private[client] object OnlyPrimitive extends Primitive {\n   object TemplateId extends TemplateIdApi {\n     // the ledger api still uses names with only dots in them, while QualifiedName.toString\n     // separates the module and the name in the module with colon.\n-    override def apply[Tpl <: Template[Tpl]](\n+    def apply[Tpl <: Template[Tpl]](\n         packageId: String,\n         moduleName: String,\n         entityName: String): TemplateId[Tpl] =\n       ApiTypes.TemplateId(\n-        rpcvalue.Identifier(\n-          packageId = packageId,\n-          name = s\"$moduleName.$entityName\",\n-          moduleName = moduleName,\n-          entityName = entityName))\n+        rpcvalue\n+          .Identifier(packageId = packageId, moduleName = moduleName, entityName = entityName))\n \n     private[binding] override def substEx[F[_]](fa: F[rpcvalue.Identifier]) =\n       ApiTypes.TemplateId subst fa\n \n-    override def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)] =\n+    def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)] =\n       // TODO SC DEL-6727 use this instead with daml-lf value interface\n       // rpcvalue.Identifier unapply t.unwrap\n       t.unwrap match {\n-        case rpcvalue.Identifier(packageId, _, moduleName, entityName)\n+        case rpcvalue.Identifier(packageId, moduleName, entityName)\n             if moduleName.nonEmpty && entityName.nonEmpty =>"
  },
  {
    "id" : "f42803d3-a40b-46a0-9442-f23abecaa1b1",
    "prId" : 2211,
    "comments" : [
      {
        "id" : "63e747fb-3125-4888-bf03-835983604c40",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-07-18T16:41:56Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f636705-a07d-421d-8577-8f340dd00165",
        "parentId" : "63e747fb-3125-4888-bf03-835983604c40",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I see the reasoning behind your suggestion but I'd suggest to keep the default case and throw a telling exception there: `MatchError`s tend to be very vague and it would be easier to understand the issue if the exception had a meaningful message based on the context.",
        "createdAt" : "2019-07-19T08:22:56Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d36cec1-af87-4f10-9e5b-700cb2aa76cc",
        "parentId" : "63e747fb-3125-4888-bf03-835983604c40",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "There is no possibility of a `MatchError` in the set of changes I've suggested. That is to say, the prior case becomes exhaustive when you remove the condition.",
        "createdAt" : "2019-07-19T15:49:49Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fff581cb-dd21-4bcb-9a38-421017bfc0de",
        "parentId" : "63e747fb-3125-4888-bf03-835983604c40",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Now there isn't, which is what makes the situation exceptional. In general, I hardly see good reasons to leave generic `MatchError`s with very error messages leaving a lot to be said being possibly thrown at runtime when a more meaningful and contextualized. If there is not possibility that the match couldn't fail, wouldn't it be possible to simply do something like\r\n\r\n```scala\r\nval unwrapped = t.unwrap\r\nSome((unwrapped.packageId, unwrapped.moduleName, unwrapped.entityName))\r\n```\r\n\r\nSeems more direct and readable.",
        "createdAt" : "2019-07-22T20:57:19Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "332ba910-609a-4c15-b636-4d42a707abcd",
        "parentId" : "63e747fb-3125-4888-bf03-835983604c40",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> Seems more direct and readable.\r\n\r\nYou are right but I can't express that in GH change suggestions :)",
        "createdAt" : "2019-07-23T13:58:45Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dcb6373b-cabd-49a4-84ef-9f010364fdad",
        "parentId" : "63e747fb-3125-4888-bf03-835983604c40",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```scala\r\n val rpcvalue.Identifier(packageId, moduleName, entityName) = t.unwrap\r\n Some((packageId, moduleName, entityName))\r\n```",
        "createdAt" : "2019-07-23T16:36:45Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2898f714d9c97e35ffc61414443bef02239a431c",
    "line" : null,
    "diffHunk" : "@@ -184,29 +160,27 @@ private[client] object OnlyPrimitive extends Primitive {\n   object TemplateId extends TemplateIdApi {\n     // the ledger api still uses names with only dots in them, while QualifiedName.toString\n     // separates the module and the name in the module with colon.\n-    override def apply[Tpl <: Template[Tpl]](\n+    def apply[Tpl <: Template[Tpl]](\n         packageId: String,\n         moduleName: String,\n         entityName: String): TemplateId[Tpl] =\n       ApiTypes.TemplateId(\n-        rpcvalue.Identifier(\n-          packageId = packageId,\n-          name = s\"$moduleName.$entityName\",\n-          moduleName = moduleName,\n-          entityName = entityName))\n+        rpcvalue\n+          .Identifier(packageId = packageId, moduleName = moduleName, entityName = entityName))\n \n     private[binding] override def substEx[F[_]](fa: F[rpcvalue.Identifier]) =\n       ApiTypes.TemplateId subst fa\n \n-    override def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)] =\n+    def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)] =\n       // TODO SC DEL-6727 use this instead with daml-lf value interface\n       // rpcvalue.Identifier unapply t.unwrap\n       t.unwrap match {\n-        case rpcvalue.Identifier(packageId, _, moduleName, entityName)\n+        case rpcvalue.Identifier(packageId, moduleName, entityName)\n             if moduleName.nonEmpty && entityName.nonEmpty =>\n           Some((packageId, moduleName, entityName))\n         case _ => None"
  },
  {
    "id" : "694e7a10-0752-4de4-8184-a2926acd1990",
    "prId" : 2211,
    "comments" : [
      {
        "id" : "123814a9-1f7b-4512-b338-79796e99c151",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "No we don't check anymore that `moduleName` and `entityName` are non-empty.",
        "createdAt" : "2019-07-23T07:57:04Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "75de703a-27d9-4d50-960a-eaad4070b633",
        "parentId" : "123814a9-1f7b-4512-b338-79796e99c151",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "For what I understand, the test was used to check if it is a new/old identifier. ",
        "createdAt" : "2019-07-23T08:17:58Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "324f96aa-51d2-43c8-b72b-4f90acb498e5",
        "parentId" : "123814a9-1f7b-4512-b338-79796e99c151",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Okay, but a templateId is only valid if the individual strings coming from the wire aren't empty. But maybe this is not the place to check this.",
        "createdAt" : "2019-07-23T09:28:39Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ae81d5da-b9b6-4b70-8e68-17f0cb669b90",
        "parentId" : "123814a9-1f7b-4512-b338-79796e99c151",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The check is done inside the ledger API.\r\nWe probably do not need to duplicate the test in Scala binding side.   ",
        "createdAt" : "2019-07-23T16:39:49Z",
        "updatedAt" : "2019-07-23T20:06:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2898f714d9c97e35ffc61414443bef02239a431c",
    "line" : 73,
    "diffHunk" : "@@ -187,26 +163,19 @@ private[client] object OnlyPrimitive extends Primitive {\n     override def apply[Tpl <: Template[Tpl]](\n         packageId: String,\n         moduleName: String,\n-        entityName: String): TemplateId[Tpl] =\n+        entityName: String\n+    ): TemplateId[Tpl] =\n       ApiTypes.TemplateId(\n-        rpcvalue.Identifier(\n-          packageId = packageId,\n-          name = s\"$moduleName.$entityName\",\n-          moduleName = moduleName,\n-          entityName = entityName))\n+        rpcvalue\n+          .Identifier(packageId = packageId, moduleName = moduleName, entityName = entityName))\n \n     private[binding] override def substEx[F[_]](fa: F[rpcvalue.Identifier]) =\n       ApiTypes.TemplateId subst fa\n \n-    override def unapply[Tpl](t: TemplateId[Tpl]): Option[(String, String, String)] =\n-      // TODO SC DEL-6727 use this instead with daml-lf value interface\n-      // rpcvalue.Identifier unapply t.unwrap\n-      t.unwrap match {\n-        case rpcvalue.Identifier(packageId, _, moduleName, entityName)\n-            if moduleName.nonEmpty && entityName.nonEmpty =>\n-          Some((packageId, moduleName, entityName))\n-        case _ => None\n-      }\n+    override def unapply[Tpl](t: TemplateId[Tpl]): Some[(String, String, String)] = {\n+      val rpcvalue.Identifier(packageId, moduleName, entityName) = t.unwrap"
  }
]