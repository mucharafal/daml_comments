[
  {
    "id" : "e016977f-218d-4310-b00c-86d9653297fc",
    "prId" : 3522,
    "comments" : [
      {
        "id" : "76a56c61-cf50-4d73-8eae-580bddabe5c7",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Finally, the choice of `imm.Map` will variously lead to overlapping instances here, which are rejected with a compiler error. And a good thing too, as they would have incompatible implementations, each wrong for the other. So `P.Map` or `P.GenMap` will need a newtype.",
        "createdAt" : "2019-11-19T17:26:09Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3a769758-ba65-4165-b175-8242458c46a3",
        "parentId" : "76a56c61-cf50-4d73-8eae-580bddabe5c7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We still have overlapping instances with `InsertOrdMap` (Since its implement `Map`).  \r\nDo you think I should use `SortedMap` for `P.Map` ?",
        "createdAt" : "2019-11-21T22:14:59Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "52590686-8ea0-4ef6-a0a3-d364f56f43e9",
        "parentId" : "76a56c61-cf50-4d73-8eae-580bddabe5c7",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "No, use an unboxed newtype for `immutable.Map` as the value of `type P.TextMap` instead. ~If you [define `subst`](https://failex.blogspot.com/2017/04/the-high-cost-of-anyval-subclasses.html#markdown-header-when-is-a-label-a-string-when-is-it-not), you can set `val TextMap: ImmutableMapFactory[TextMap] = subst(Map)`.~\r\n\r\nNot sure why I was trying to make your life harder since `object OnlyPrimitive` substs everything automatically; naturally `override val TextMap = Map` will satisfy the abstract signature with no further ritual.",
        "createdAt" : "2019-11-22T17:28:29Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6315292e-6c3d-48a2-8fa4-c9fb7e7bf8aa",
        "parentId" : "76a56c61-cf50-4d73-8eae-580bddabe5c7",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "To make this perfectly smooth will require a few other changes:\r\n\r\n1. add `extends PrimitiveInstances` to `abstract class Primitive`\r\n2. define empty `abstract class PrimitiveInstances`\r\n3. in `object PrimitiveInstances`, define\r\n\r\n```scala\r\nimplicit def TextMapCanBuildFrom[K, V]\r\n    : CanBuildFrom[Primitive.TextMap.Coll, (K, V), Primitive.TextMap[K, V]] = ...\r\n```\r\n\r\nwhere implementation derives from `Primitive.TextMap.canBuildFrom` probably by means of some private member of `OnlyPrimitive`.\r\n\r\n4. use `-Xsource:2.13` where `map` and friends return the wrong type. We document that we expect Scala codegen users to use this option anyway.",
        "createdAt" : "2019-11-22T17:55:03Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cd08c9d8-4fc7-40e9-843d-7f33385a81f0",
        "parentId" : "76a56c61-cf50-4d73-8eae-580bddabe5c7",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`binding` changes in ff923d997a; did not check the remainder of modules.",
        "createdAt" : "2019-11-25T18:00:44Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "16fc9a85aea14851e9ec58117022ef66e1aee8ab",
    "line" : 7,
    "diffHunk" : "@@ -42,6 +42,8 @@ trait ValuePrimitiveEncoding[TC[_]] {\n   implicit def valueOptional[A: TC]: TC[P.Optional[A]]\n \n   implicit def valueMap[A: TC]: TC[P.Map[A]]\n+\n+  implicit def valueGenMap[K: TC, V: TC]: TC[P.GenMap[K, V]]"
  },
  {
    "id" : "5add2fe0-dc05-4d71-97ab-d82904346dc4",
    "prId" : 3522,
    "comments" : [
      {
        "id" : "bff4c835-f3c0-403b-a045-8b84dfceb07d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Why delete this comment?",
        "createdAt" : "2019-11-19T19:22:49Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cd6eb2fe-9fe4-4e8d-9327-3bd95f5518b0",
        "parentId" : "bff4c835-f3c0-403b-a045-8b84dfceb07d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I put i back",
        "createdAt" : "2019-11-21T22:22:48Z",
        "updatedAt" : "2019-12-11T08:37:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "16fc9a85aea14851e9ec58117022ef66e1aee8ab",
    "line" : 21,
    "diffHunk" : "@@ -67,10 +69,7 @@ object ValuePrimitiveEncoding {\n       case ContractId(_) => Some(valueContractId)\n       case Optional(_) => Some(valueOptional(valueText))\n       case Map(_) => Some(valueMap(valueText))\n-      case GenMap(_) =>\n-        // FIXME https://github.com/digital-asset/daml/issues/2256\n-        sys.error(\"GenMap not supported\")\n-      // types that represent non-primitives only"
  }
]