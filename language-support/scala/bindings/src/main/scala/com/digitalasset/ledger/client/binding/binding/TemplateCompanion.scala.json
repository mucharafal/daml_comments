[
  {
    "id" : "9e04ccfb-a05f-4a59-983f-8828adfd495f",
    "prId" : 7031,
    "comments" : [
      {
        "id" : "2889b7ec-323b-40a6-9833-26187ec9503d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is not part of the public API right? so this is not a breaking change",
        "createdAt" : "2020-08-05T18:26:42Z",
        "updatedAt" : "2020-08-05T20:04:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "03f15fb2-c38c-4334-ace7-d0f762cff3fa",
        "parentId" : "2889b7ec-323b-40a6-9833-26187ec9503d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Right.",
        "createdAt" : "2020-08-05T18:40:49Z",
        "updatedAt" : "2020-08-05T20:04:11Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "83f1bedcc0607520926f97b79e80c51fad2fbbf1",
    "line" : 4,
    "diffHunk" : "@@ -81,6 +81,7 @@ abstract class TemplateCompanion[T](implicit isTemplate: T <~< Template[T])\n   }\n \n   protected final def ` exercise`[ExOn, Out](\n+      actor: Primitive.Party,"
  },
  {
    "id" : "0384d0ce-8b07-49b4-a5af-683d5e810435",
    "prId" : 6660,
    "comments" : [
      {
        "id" : "e5bc61ad-a827-47bc-b5ab-a0ab3e80df2b",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "any specific reason why it is `key` and not `Key`? Is it because it is clashing with `final case class Key...`?",
        "createdAt" : "2020-07-09T17:06:17Z",
        "updatedAt" : "2020-07-09T17:06:17Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a706ec5-f95b-49fc-9a34-1799cc623e8d",
        "parentId" : "e5bc61ad-a827-47bc-b5ab-a0ab3e80df2b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Yes, or a module `Key`.",
        "createdAt" : "2020-07-09T17:08:25Z",
        "updatedAt" : "2020-07-09T17:08:25Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f411b10d-fb3a-4712-bad1-60eedf9fafff",
        "parentId" : "e5bc61ad-a827-47bc-b5ab-a0ab3e80df2b",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I see what you mean. No, the `final case class Key` explicitly written here cannot clash with `type Key` that might be written here. But you're allowed to have types or modules named `Key`. That's also why we have `type ContractId` in `TemplateCompanion` instead of the originally planned `type Id`: you're allowed to use `Id` as your own type name, but `ContractId` is reserved so there is no danger of collision.",
        "createdAt" : "2020-07-09T17:12:24Z",
        "updatedAt" : "2020-07-09T17:13:04Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3873568005f1a9f2194e839fa9a92f895e3b1304",
    "line" : 5,
    "diffHunk" : "@@ -37,6 +37,13 @@ abstract class TemplateCompanion[T](implicit isTemplate: T <~< Template[T])\n     */\n   implicit final def `the TemplateCompanion`: this.type = this\n \n+  /** The template's key type, or [[Nothing]] if there is no key type. */\n+  type key"
  }
]