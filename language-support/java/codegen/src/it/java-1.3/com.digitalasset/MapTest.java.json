[
  {
    "id" : "ea78961a-9bab-40c7-abd9-fd77b28e1a8d",
    "prId" : 201,
    "comments" : [
      {
        "id" : "c90ac17c-fe4a-4eee-afa6-9746a0bfd43a",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Not finished.",
        "createdAt" : "2019-04-04T11:59:26Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,43 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset;\n+\n+import com.daml.ledger.javaapi.data.Record;\n+import com.digitalasset.ledger.api.v1.ValueOuterClass;\n+import org.junit.Test;\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.runner.RunWith;\n+import tests.maptest.MapRecord;\n+\n+@RunWith(JUnitPlatform.class)\n+public class MapTest {\n+\n+    @Test\n+    public void mapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value1\"))\n+                                                .build())\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value2\"))\n+                                                .build()\n+                                        )\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapRecord fromValue = MapRecord.fromValue(dataRecord);\n+        // TO BE COMPLETED"
  },
  {
    "id" : "1aa2aace-8444-4cae-a35b-1b049cd1d46a",
    "prId" : 201,
    "comments" : [
      {
        "id" : "37aded2b-638e-4000-b31f-995edaa329cc",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "The value of the outer map should be another `Map` and not a `Record`.",
        "createdAt" : "2019-04-05T09:26:13Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,269 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset;\n+\n+import com.daml.ledger.javaapi.data.Int64;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Text;\n+import com.daml.ledger.javaapi.data.Variant;\n+import com.digitalasset.ledger.api.v1.ValueOuterClass;\n+import org.junit.Test;\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.runner.RunWith;\n+import tests.maptest.MapItem;\n+import tests.maptest.MapItemMapRecord;\n+import tests.maptest.MapRecord;\n+import tests.maptest.mapvariant.ParameterizedVariant;\n+import tests.maptest.mapvariant.RecordVariant;\n+import tests.maptest.mapvariant.TextVariant;\n+import tests.varianttest.variantitem.ParameterizedRecordVariant;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(JUnitPlatform.class)\n+public class MapTest {\n+\n+    @Test\n+    public void mapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value1\"))\n+                                                .build())\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value2\"))\n+                                                .build()\n+                                        )\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Map<String, String> javaMap = new HashMap<>();\n+        javaMap.put(\"key1\", \"value1\");\n+        javaMap.put(\"key2\", \"value2\");\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapRecord fromValue = MapRecord.fromValue(dataRecord);\n+        MapRecord fromConstructor = new MapRecord(javaMap);\n+        MapRecord fromRoundtrip = MapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapItemMapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()"
  },
  {
    "id" : "5c241f30-8410-4532-a41e-c647d6adc053",
    "prId" : 201,
    "comments" : [
      {
        "id" : "e3c05074-8f8a-497a-86ca-298dd3c32150",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Same as above, the value of the outer map should be another `Map` and not a `Record`.",
        "createdAt" : "2019-04-05T09:26:46Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,269 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset;\n+\n+import com.daml.ledger.javaapi.data.Int64;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Text;\n+import com.daml.ledger.javaapi.data.Variant;\n+import com.digitalasset.ledger.api.v1.ValueOuterClass;\n+import org.junit.Test;\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.runner.RunWith;\n+import tests.maptest.MapItem;\n+import tests.maptest.MapItemMapRecord;\n+import tests.maptest.MapRecord;\n+import tests.maptest.mapvariant.ParameterizedVariant;\n+import tests.maptest.mapvariant.RecordVariant;\n+import tests.maptest.mapvariant.TextVariant;\n+import tests.varianttest.variantitem.ParameterizedRecordVariant;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(JUnitPlatform.class)\n+public class MapTest {\n+\n+    @Test\n+    public void mapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value1\"))\n+                                                .build())\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value2\"))\n+                                                .build()\n+                                        )\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Map<String, String> javaMap = new HashMap<>();\n+        javaMap.put(\"key1\", \"value1\");\n+        javaMap.put(\"key2\", \"value2\");\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapRecord fromValue = MapRecord.fromValue(dataRecord);\n+        MapRecord fromConstructor = new MapRecord(javaMap);\n+        MapRecord fromRoundtrip = MapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapItemMapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                        .setLabel(\"mapField\")\n+                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(1L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(2L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                )\n+                                                                                .build())\n+                                                                        .build())\n+                                                                .build())\n+                                                        .build())\n+                                                .build()\n+                                        )\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()"
  },
  {
    "id" : "fb445c1c-e0fe-46f5-90ef-4ab0256f09a1",
    "prId" : 201,
    "comments" : [
      {
        "id" : "e53e5ccc-8a64-42a1-87ef-519a554ddb51",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Replace `?` with `Long`",
        "createdAt" : "2019-04-05T09:29:08Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,269 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset;\n+\n+import com.daml.ledger.javaapi.data.Int64;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Text;\n+import com.daml.ledger.javaapi.data.Variant;\n+import com.digitalasset.ledger.api.v1.ValueOuterClass;\n+import org.junit.Test;\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.runner.RunWith;\n+import tests.maptest.MapItem;\n+import tests.maptest.MapItemMapRecord;\n+import tests.maptest.MapRecord;\n+import tests.maptest.mapvariant.ParameterizedVariant;\n+import tests.maptest.mapvariant.RecordVariant;\n+import tests.maptest.mapvariant.TextVariant;\n+import tests.varianttest.variantitem.ParameterizedRecordVariant;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(JUnitPlatform.class)\n+public class MapTest {\n+\n+    @Test\n+    public void mapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value1\"))\n+                                                .build())\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value2\"))\n+                                                .build()\n+                                        )\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Map<String, String> javaMap = new HashMap<>();\n+        javaMap.put(\"key1\", \"value1\");\n+        javaMap.put(\"key2\", \"value2\");\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapRecord fromValue = MapRecord.fromValue(dataRecord);\n+        MapRecord fromConstructor = new MapRecord(javaMap);\n+        MapRecord fromRoundtrip = MapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapItemMapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                        .setLabel(\"mapField\")\n+                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(1L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(2L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                )\n+                                                                                .build())\n+                                                                        .build())\n+                                                                .build())\n+                                                        .build())\n+                                                .build()\n+                                        )\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                        .setLabel(\"mapField\")\n+                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(3L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(4L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                )\n+                                                                                .build())\n+                                                                        .build())\n+                                                                .build())\n+                                                        .build())\n+                                                .build()\n+                                        ))\n+                                .build())\n+                        .build())\n+                .build();\n+\n+\n+        Map<String, MapItem<Long>> inner1Map = new HashMap<>();\n+        inner1Map.put(\"key1\", new MapItem<Long>(1L));\n+        inner1Map.put(\"key2\", new MapItem<Long>(2L));\n+\n+        Map<String, MapItem<Long>> inner2Map = new HashMap<>();\n+        inner2Map.put(\"key1\", new MapItem<Long>(3L));\n+        inner2Map.put(\"key2\", new MapItem<Long>(4L));\n+\n+        Map<String, Map<String, MapItem<Long>>> javaMap = new HashMap<>();\n+        javaMap.put(\"outerkey1\", inner1Map);\n+        javaMap.put(\"outerkey2\", inner2Map);\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapItemMapRecord fromValue = MapItemMapRecord.fromValue(dataRecord);\n+        MapItemMapRecord fromConstructor = new MapItemMapRecord(javaMap);\n+        MapItemMapRecord fromRoundtrip = MapItemMapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+\n+    }\n+\n+    @Test\n+    public void textMapVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"TextVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setMap(ValueOuterClass.Map.newBuilder()\n+                                .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                        .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                        .setValue(ValueOuterClass.Value.newBuilder().setText(\"value\"))\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        TextVariant<?> fromValue = TextVariant.fromValue(dataVariant, f -> f.asText().orElseThrow(() -> new IllegalArgumentException(\"Expecting Text\")));\n+        TextVariant<?> fromConstructor = new TextVariant<>(Collections.singletonMap(\"key\", \"value\"));\n+        TextVariant<?> fromRoundtrip = TextVariant.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataVariant);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+\n+    }\n+\n+    @Test\n+    public void mapRecordVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"RecordVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                        .setLabel(\"x\")\n+                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                                                .setValue(ValueOuterClass.Value.newBuilder().setInt64(42L))\n+                                                                .build())\n+                                                        .build())\n+                                                .build())\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        RecordVariant<?> fromValue = RecordVariant.fromValue(dataVariant);\n+        RecordVariant<?> fromConstructor = new RecordVariant<>(Collections.singletonMap(\"key\", 42L));\n+        RecordVariant<?> fromRoundtrip = RecordVariant.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataVariant);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapParameterizedVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"ParameterizedVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setMap(ValueOuterClass.Map.newBuilder()\n+                                .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                        .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                        .setValue(ValueOuterClass.Value.newBuilder().setInt64(42L))\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        ParameterizedVariant<?> fromValue = ParameterizedVariant.fromValue(dataVariant,"
  },
  {
    "id" : "38a6bd66-2c83-4d01-8e89-8530008f43f6",
    "prId" : 201,
    "comments" : [
      {
        "id" : "cae77743-d5d7-45c3-94e1-3496efcca337",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "To make it work with `Long` we need to add a `getValue()` after `orElseThrow()`.",
        "createdAt" : "2019-04-05T09:30:55Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,269 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset;\n+\n+import com.daml.ledger.javaapi.data.Int64;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Text;\n+import com.daml.ledger.javaapi.data.Variant;\n+import com.digitalasset.ledger.api.v1.ValueOuterClass;\n+import org.junit.Test;\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.runner.RunWith;\n+import tests.maptest.MapItem;\n+import tests.maptest.MapItemMapRecord;\n+import tests.maptest.MapRecord;\n+import tests.maptest.mapvariant.ParameterizedVariant;\n+import tests.maptest.mapvariant.RecordVariant;\n+import tests.maptest.mapvariant.TextVariant;\n+import tests.varianttest.variantitem.ParameterizedRecordVariant;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(JUnitPlatform.class)\n+public class MapTest {\n+\n+    @Test\n+    public void mapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value1\"))\n+                                                .build())\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value2\"))\n+                                                .build()\n+                                        )\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Map<String, String> javaMap = new HashMap<>();\n+        javaMap.put(\"key1\", \"value1\");\n+        javaMap.put(\"key2\", \"value2\");\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapRecord fromValue = MapRecord.fromValue(dataRecord);\n+        MapRecord fromConstructor = new MapRecord(javaMap);\n+        MapRecord fromRoundtrip = MapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapItemMapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                        .setLabel(\"mapField\")\n+                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(1L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(2L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                )\n+                                                                                .build())\n+                                                                        .build())\n+                                                                .build())\n+                                                        .build())\n+                                                .build()\n+                                        )\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                        .setLabel(\"mapField\")\n+                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(3L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(4L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                )\n+                                                                                .build())\n+                                                                        .build())\n+                                                                .build())\n+                                                        .build())\n+                                                .build()\n+                                        ))\n+                                .build())\n+                        .build())\n+                .build();\n+\n+\n+        Map<String, MapItem<Long>> inner1Map = new HashMap<>();\n+        inner1Map.put(\"key1\", new MapItem<Long>(1L));\n+        inner1Map.put(\"key2\", new MapItem<Long>(2L));\n+\n+        Map<String, MapItem<Long>> inner2Map = new HashMap<>();\n+        inner2Map.put(\"key1\", new MapItem<Long>(3L));\n+        inner2Map.put(\"key2\", new MapItem<Long>(4L));\n+\n+        Map<String, Map<String, MapItem<Long>>> javaMap = new HashMap<>();\n+        javaMap.put(\"outerkey1\", inner1Map);\n+        javaMap.put(\"outerkey2\", inner2Map);\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapItemMapRecord fromValue = MapItemMapRecord.fromValue(dataRecord);\n+        MapItemMapRecord fromConstructor = new MapItemMapRecord(javaMap);\n+        MapItemMapRecord fromRoundtrip = MapItemMapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+\n+    }\n+\n+    @Test\n+    public void textMapVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"TextVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setMap(ValueOuterClass.Map.newBuilder()\n+                                .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                        .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                        .setValue(ValueOuterClass.Value.newBuilder().setText(\"value\"))\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        TextVariant<?> fromValue = TextVariant.fromValue(dataVariant, f -> f.asText().orElseThrow(() -> new IllegalArgumentException(\"Expecting Text\")));\n+        TextVariant<?> fromConstructor = new TextVariant<>(Collections.singletonMap(\"key\", \"value\"));\n+        TextVariant<?> fromRoundtrip = TextVariant.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataVariant);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+\n+    }\n+\n+    @Test\n+    public void mapRecordVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"RecordVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                        .setLabel(\"x\")\n+                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                                                .setValue(ValueOuterClass.Value.newBuilder().setInt64(42L))\n+                                                                .build())\n+                                                        .build())\n+                                                .build())\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        RecordVariant<?> fromValue = RecordVariant.fromValue(dataVariant);\n+        RecordVariant<?> fromConstructor = new RecordVariant<>(Collections.singletonMap(\"key\", 42L));\n+        RecordVariant<?> fromRoundtrip = RecordVariant.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataVariant);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapParameterizedVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"ParameterizedVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setMap(ValueOuterClass.Map.newBuilder()\n+                                .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                        .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                        .setValue(ValueOuterClass.Value.newBuilder().setInt64(42L))\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        ParameterizedVariant<?> fromValue = ParameterizedVariant.fromValue(dataVariant,\n+                f -> f.asInt64().orElseThrow(() -> new IllegalArgumentException(\"Expected Long value\")));"
  },
  {
    "id" : "d663bb3b-fbc1-4e5f-a200-40dda2ab4f16",
    "prId" : 201,
    "comments" : [
      {
        "id" : "e6e84284-c7a4-49b5-a332-e2b03d1ad405",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Add the same assertion with `fromValue` instead of `fromConstructor`.",
        "createdAt" : "2019-04-05T09:31:42Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : 253,
    "diffHunk" : "@@ -0,0 +1,269 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset;\n+\n+import com.daml.ledger.javaapi.data.Int64;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Text;\n+import com.daml.ledger.javaapi.data.Variant;\n+import com.digitalasset.ledger.api.v1.ValueOuterClass;\n+import org.junit.Test;\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.runner.RunWith;\n+import tests.maptest.MapItem;\n+import tests.maptest.MapItemMapRecord;\n+import tests.maptest.MapRecord;\n+import tests.maptest.mapvariant.ParameterizedVariant;\n+import tests.maptest.mapvariant.RecordVariant;\n+import tests.maptest.mapvariant.TextVariant;\n+import tests.varianttest.variantitem.ParameterizedRecordVariant;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(JUnitPlatform.class)\n+public class MapTest {\n+\n+    @Test\n+    public void mapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value1\"))\n+                                                .build())\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder().setText(\"value2\"))\n+                                                .build()\n+                                        )\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Map<String, String> javaMap = new HashMap<>();\n+        javaMap.put(\"key1\", \"value1\");\n+        javaMap.put(\"key2\", \"value2\");\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapRecord fromValue = MapRecord.fromValue(dataRecord);\n+        MapRecord fromConstructor = new MapRecord(javaMap);\n+        MapRecord fromRoundtrip = MapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapItemMapRecordRoundTrip() {\n+\n+        ValueOuterClass.Record protoRecord = ValueOuterClass.Record.newBuilder()\n+                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                        .setLabel(\"mapField\")\n+                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                        .setLabel(\"mapField\")\n+                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(1L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(2L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                )\n+                                                                                .build())\n+                                                                        .build())\n+                                                                .build())\n+                                                        .build())\n+                                                .build()\n+                                        )\n+                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                .setKey(ValueOuterClass.Value.newBuilder()\n+                                                        .setText(\"outerkey1\"))\n+                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                        .setLabel(\"mapField\")\n+                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key1\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(3L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key2\"))\n+                                                                                                .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                                                                                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                                                                                                        .setLabel(\"value\")\n+                                                                                                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                                                                                                .setInt64(4L)\n+                                                                                                                                .build())\n+                                                                                                                        .build())\n+                                                                                                                .build())\n+                                                                                                        .build()\n+                                                                                                ).build())\n+                                                                                )\n+                                                                                .build())\n+                                                                        .build())\n+                                                                .build())\n+                                                        .build())\n+                                                .build()\n+                                        ))\n+                                .build())\n+                        .build())\n+                .build();\n+\n+\n+        Map<String, MapItem<Long>> inner1Map = new HashMap<>();\n+        inner1Map.put(\"key1\", new MapItem<Long>(1L));\n+        inner1Map.put(\"key2\", new MapItem<Long>(2L));\n+\n+        Map<String, MapItem<Long>> inner2Map = new HashMap<>();\n+        inner2Map.put(\"key1\", new MapItem<Long>(3L));\n+        inner2Map.put(\"key2\", new MapItem<Long>(4L));\n+\n+        Map<String, Map<String, MapItem<Long>>> javaMap = new HashMap<>();\n+        javaMap.put(\"outerkey1\", inner1Map);\n+        javaMap.put(\"outerkey2\", inner2Map);\n+\n+        Record dataRecord = Record.fromProto(protoRecord);\n+        MapItemMapRecord fromValue = MapItemMapRecord.fromValue(dataRecord);\n+        MapItemMapRecord fromConstructor = new MapItemMapRecord(javaMap);\n+        MapItemMapRecord fromRoundtrip = MapItemMapRecord.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataRecord);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+\n+    }\n+\n+    @Test\n+    public void textMapVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"TextVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setMap(ValueOuterClass.Map.newBuilder()\n+                                .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                        .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                        .setValue(ValueOuterClass.Value.newBuilder().setText(\"value\"))\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        TextVariant<?> fromValue = TextVariant.fromValue(dataVariant, f -> f.asText().orElseThrow(() -> new IllegalArgumentException(\"Expecting Text\")));\n+        TextVariant<?> fromConstructor = new TextVariant<>(Collections.singletonMap(\"key\", \"value\"));\n+        TextVariant<?> fromRoundtrip = TextVariant.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataVariant);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+\n+    }\n+\n+    @Test\n+    public void mapRecordVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"RecordVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setRecord(ValueOuterClass.Record.newBuilder()\n+                                .addFields(ValueOuterClass.RecordField.newBuilder()\n+                                        .setLabel(\"x\")\n+                                        .setValue(ValueOuterClass.Value.newBuilder()\n+                                                .setMap(ValueOuterClass.Map.newBuilder()\n+                                                        .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                                                .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                                                .setValue(ValueOuterClass.Value.newBuilder().setInt64(42L))\n+                                                                .build())\n+                                                        .build())\n+                                                .build())\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        RecordVariant<?> fromValue = RecordVariant.fromValue(dataVariant);\n+        RecordVariant<?> fromConstructor = new RecordVariant<>(Collections.singletonMap(\"key\", 42L));\n+        RecordVariant<?> fromRoundtrip = RecordVariant.fromValue(fromConstructor.toValue());\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(), dataVariant);\n+        assertEquals(fromConstructor, fromRoundtrip);\n+    }\n+\n+    @Test\n+    public void mapParameterizedVariantRoundtripTest() {\n+\n+        ValueOuterClass.Variant protoVariant = ValueOuterClass.Variant.newBuilder()\n+                .setConstructor(\"ParameterizedVariant\")\n+                .setValue(ValueOuterClass.Value.newBuilder()\n+                        .setMap(ValueOuterClass.Map.newBuilder()\n+                                .addEntries(ValueOuterClass.Map.Entry.newBuilder()\n+                                        .setKey(ValueOuterClass.Value.newBuilder().setText(\"key\"))\n+                                        .setValue(ValueOuterClass.Value.newBuilder().setInt64(42L))\n+                                        .build())\n+                                .build())\n+                        .build())\n+                .build();\n+\n+        Variant dataVariant = Variant.fromProto(protoVariant);\n+        ParameterizedVariant<?> fromValue = ParameterizedVariant.fromValue(dataVariant,\n+                f -> f.asInt64().orElseThrow(() -> new IllegalArgumentException(\"Expected Long value\")));\n+        ParameterizedVariant<Long> fromConstructor = new ParameterizedVariant<>(Collections.singletonMap(\"key\", 42L));\n+\n+        assertEquals(fromValue, fromConstructor);\n+        assertEquals(fromConstructor.toValue(f -> new Int64(f)), dataVariant);"
  },
  {
    "id" : "72a0c502-c3d1-41f8-93ad-ddcddca378c6",
    "prId" : 201,
    "comments" : [
      {
        "id" : "9e96c672-ffee-4f26-8e8d-4fc248211a65",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nimport org.junit.jupiter.api.Test;\r\n```",
        "createdAt" : "2019-04-05T09:45:28Z",
        "updatedAt" : "2019-04-05T15:36:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21391459b2fb820fb587485633d9ecddfb6c3a2e",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,269 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset;\n+\n+import com.daml.ledger.javaapi.data.Int64;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Text;\n+import com.daml.ledger.javaapi.data.Variant;\n+import com.digitalasset.ledger.api.v1.ValueOuterClass;\n+import org.junit.Test;"
  }
]