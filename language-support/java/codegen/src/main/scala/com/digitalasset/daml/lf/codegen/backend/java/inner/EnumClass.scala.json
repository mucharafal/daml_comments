[
  {
    "id" : "a6925176-3877-4c20-af19-11665ea72f05",
    "prId" : 1648,
    "comments" : [
      {
        "id" : "e2ddfd17-876e-44ca-9783-34a62a0aa0ce",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Usually enum constants in Java are all uppercase by convention, with words separated by `_`.",
        "createdAt" : "2019-06-24T08:47:51Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "00838111-2c06-4b4a-8d0c-d5a7f456a9db",
        "parentId" : "e2ddfd17-876e-44ca-9783-34a62a0aa0ce",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "Note that we're free to uppercase. However I wouldn't start automatically adding `_`s...",
        "createdAt" : "2019-06-24T09:27:06Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cb51177a-dc93-44a4-859f-05a488cc76da",
        "parentId" : "e2ddfd17-876e-44ca-9783-34a62a0aa0ce",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I uppercase without `_`. -- it was more painfull that expected ;)\r\n\r\nI found that `_`-separated format nicer, however I see to issues:\r\n\r\n- The code is quite tricky (maybe I could use Guava's [CaseFormat](https://guava.dev/releases/20.0/api/docs/com/google/common/base/CaseFormat.html))\r\n- We can start to have conflict if user starts to use `_` it is daml-lf ids.",
        "createdAt" : "2019-06-24T12:36:45Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2d063aa9-f89b-4c77-9585-e8d6bcb7bc32",
        "parentId" : "e2ddfd17-876e-44ca-9783-34a62a0aa0ce",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yes, let's not do underscore mangling in light of the conflict argument.",
        "createdAt" : "2019-06-25T09:32:06Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f7e1ec573d3081464e92b5d56524c07419651d1d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.codegen.backend.java.inner\n+\n+import com.daml.ledger.javaapi\n+import com.digitalasset.daml.lf.data.Ref.Identifier\n+import com.digitalasset.daml.lf.iface\n+import com.squareup.javapoet._\n+import com.typesafe.scalalogging.StrictLogging\n+import javax.lang.model.element.Modifier\n+\n+private[inner] object EnumClass extends StrictLogging {\n+\n+  def generate(\n+      className: ClassName,\n+      identifier: Identifier,\n+      enum: iface.Enum,\n+  ): TypeSpec = {\n+\n+    logger.info(\"Start\")\n+    val enumType = TypeSpec.enumBuilder(className).addModifiers(Modifier.PUBLIC)\n+    enum.constructors.foreach(enumType.addEnumConstant)"
  },
  {
    "id" : "052d72e2-0f25-4d70-95d6-c99733163e28",
    "prId" : 1648,
    "comments" : [
      {
        "id" : "5c027d38-faed-4e07-9e62-eeaada5d8a9d",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I think it would be more to the style of JavaPoet to initialize the field `__values$` like this:\r\n```scala\r\nval constructorValues = enum.constructors.map(c => CodeBlock.of(\"new $T($S))\", classOf[javaapi.data.DamlEnum], c)).toIterable.asJava\r\nFieldSpec.initializer(CodeBlock.join(constructorValues, \", \"))\r\n```",
        "createdAt" : "2019-06-25T12:55:30Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7f6bcba7-8abe-4b48-b68a-4f2530dc7846",
        "parentId" : "5c027d38-faed-4e07-9e62-eeaada5d8a9d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fyi, you need to use `joining` to have the opening and closing bracket\r\n\r\n```scala\r\nval constructorValues = enum.constructors.map(c => CodeBlock.of(\"new $T($S))\", classOf[javaapi.data.DamlEnum], c)).toIterable.asJava\r\nFieldSpec.initializer(constructorValues.stream().collect(CodeBlock.joining(\", \", \"{\", \"}\")))\r\n```",
        "createdAt" : "2019-06-25T16:31:20Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f2457009-18ae-4d39-a698-6d61571b3929",
        "parentId" : "5c027d38-faed-4e07-9e62-eeaada5d8a9d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed ",
        "createdAt" : "2019-06-26T08:33:13Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c554c58d-ad43-4270-b494-1e6faac03407",
        "parentId" : "5c027d38-faed-4e07-9e62-eeaada5d8a9d",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Ah right, because it's an array initializer. Thanks 👍 ",
        "createdAt" : "2019-06-26T08:35:34Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f7e1ec573d3081464e92b5d56524c07419651d1d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,101 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.codegen.backend.java.inner\n+\n+import com.daml.ledger.javaapi\n+import com.digitalasset.daml.lf.data.Ref.Identifier\n+import com.digitalasset.daml.lf.iface\n+import com.squareup.javapoet._\n+import com.typesafe.scalalogging.StrictLogging\n+import javax.lang.model.element.Modifier\n+\n+private[inner] object EnumClass extends StrictLogging {\n+\n+  def generate(\n+      className: ClassName,\n+      identifier: Identifier,\n+      enum: iface.Enum,\n+  ): TypeSpec = {\n+\n+    logger.info(\"Start\")\n+    val enumType = TypeSpec.enumBuilder(className).addModifiers(Modifier.PUBLIC)\n+    enum.constructors.foreach(c => enumType.addEnumConstant(c.toUpperCase()))\n+    enumType.addField(generateValuesArray(enum))\n+    enumType.addMethod(generateEnumsMapBuilder(enum))\n+    enumType.addField(generateEnumsMap(className))\n+    enumType.addMethod(generateFromValue(className, enum))\n+    enumType.addMethod(generateToValue(className))\n+    logger.debug(\"End\")\n+    enumType.build()\n+  }\n+\n+  private def generateValuesArray(enum: iface.Enum): FieldSpec =\n+    FieldSpec\n+      .builder(ArrayTypeName.of(classOf[javaapi.data.DamlEnum]), \"__values$\")\n+      .addModifiers(Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)\n+      .initializer(CodeBlock.of("
  },
  {
    "id" : "a86e5f41-82e7-4e87-8aef-609a19d0f6f5",
    "prId" : 1648,
    "comments" : [
      {
        "id" : "8e185628-a0c8-4d10-af3b-941583c94f2f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Please wrap this call in `TrackLineage` as `RecordClass`, `TemplateClass` and `VariantClass` do. This is used to give the user the context in which some logging is happening without having to push information down the stack exclusively for logging.",
        "createdAt" : "2019-06-26T09:20:36Z",
        "updatedAt" : "2019-06-26T11:26:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4cf0bee5-6f7d-401c-8919-93a21acaf8b8",
        "parentId" : "8e185628-a0c8-4d10-af3b-941583c94f2f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done.",
        "createdAt" : "2019-06-26T11:26:43Z",
        "updatedAt" : "2019-06-26T11:26:44Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f7e1ec573d3081464e92b5d56524c07419651d1d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,101 @@\n+// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.codegen.backend.java.inner\n+\n+import com.daml.ledger.javaapi\n+import com.digitalasset.daml.lf.data.Ref.Identifier\n+import com.digitalasset.daml.lf.iface\n+import com.squareup.javapoet._\n+import com.typesafe.scalalogging.StrictLogging\n+import javax.lang.model.element.Modifier\n+\n+import scala.collection.JavaConverters._\n+\n+private[inner] object EnumClass extends StrictLogging {\n+\n+  def generate(\n+      className: ClassName,\n+      identifier: Identifier,\n+      enum: iface.Enum,\n+  ): TypeSpec = {\n+\n+    logger.info(\"Start\")"
  }
]