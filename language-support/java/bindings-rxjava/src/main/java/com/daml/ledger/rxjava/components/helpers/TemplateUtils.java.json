[
  {
    "id" : "1f0fdc8b-ef0b-49a6-b145-6809c816c589",
    "prId" : 3098,
    "comments" : [
      {
        "id" : "f3bd84fd-bf31-4d5b-b325-db04093798e7",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n    public static Function<CreatedContract, Template> contractTransformer(\r\n```",
        "createdAt" : "2019-10-03T14:45:43Z",
        "updatedAt" : "2019-10-07T15:02:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8aebc85d130200edea5af1e657de92e61f702cd4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.rxjava.components.helpers;\n+\n+import com.daml.ledger.javaapi.data.Identifier;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Template;\n+import com.daml.ledger.javaapi.data.Value;\n+import com.daml.ledger.rxjava.components.helpers.CreatedContract;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Function;\n+\n+public class TemplateUtils {\n+\n+    /**\n+     * Creates a transform function which is aware of the template types. Useful to be passed to\n+     * Bot.wire.\n+     *\n+     * @param allowedTemplates the list of allowed template types\n+     * @return a transformation function returning a new contract typed as one of the allowed\n+     *     templates\n+     */\n+\n+    public static Function<CreatedContract, Template> contractTransformator("
  },
  {
    "id" : "b54d40da-352f-4009-998c-345477db6028",
    "prId" : 3098,
    "comments" : [
      {
        "id" : "3c4c4264-b8ac-4531-b912-5cc1dde3b432",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "My Java is a bit rusty, but doesn't the lack of a generic argument raise a warning here?",
        "createdAt" : "2019-10-03T14:50:41Z",
        "updatedAt" : "2019-10-07T15:02:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b69db43-35c6-4bc3-900f-079e76828769",
        "parentId" : "3c4c4264-b8ac-4531-b912-5cc1dde3b432",
        "author" : {
          "login" : "richardkapolnai-da",
          "name" : "Richard Kapolnai",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/53859003?u=c5f7df62435454a9c8d1a01b0efb50a2a035eab9&v=4"
        },
        "body" : "I don't see any warning, but I added the generic declaration to be sure.",
        "createdAt" : "2019-10-03T15:13:32Z",
        "updatedAt" : "2019-10-07T15:02:51Z",
        "lastEditedBy" : {
          "login" : "richardkapolnai-da",
          "name" : "Richard Kapolnai",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/53859003?u=c5f7df62435454a9c8d1a01b0efb50a2a035eab9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8aebc85d130200edea5af1e657de92e61f702cd4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.rxjava.components.helpers;\n+\n+import com.daml.ledger.javaapi.data.Identifier;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Template;\n+import com.daml.ledger.javaapi.data.Value;\n+import com.daml.ledger.rxjava.components.helpers.CreatedContract;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Function;\n+\n+public class TemplateUtils {\n+\n+    /**\n+     * Creates a transform function which is aware of the template types. Useful to be passed to\n+     * Bot.wire.\n+     *\n+     * @param allowedTemplates the list of allowed template types\n+     * @return a transformation function returning a new contract typed as one of the allowed\n+     *     templates\n+     */\n+\n+    public static Function<CreatedContract, Template> contractTransformator(\n+            Class<? extends Template>... allowedTemplates) {\n+        return createdContract -> {\n+            Record args = createdContract.getCreateArguments();\n+            for (Class template : allowedTemplates) {"
  },
  {
    "id" : "cf6de375-ca97-45ee-a136-c836ae6d14c6",
    "prId" : 3098,
    "comments" : [
      {
        "id" : "560468d5-aaf7-4d78-a45d-99adda876c7f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would _strongly_ discourage swallowing the root cause, since it can be one of many:\r\n```suggestion\r\n                            \"Argument class \" + template + \" should be derived from Template\", e);\r\n```",
        "createdAt" : "2019-10-03T14:52:39Z",
        "updatedAt" : "2019-10-07T15:02:51Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8aebc85d130200edea5af1e657de92e61f702cd4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.rxjava.components.helpers;\n+\n+import com.daml.ledger.javaapi.data.Identifier;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Template;\n+import com.daml.ledger.javaapi.data.Value;\n+import com.daml.ledger.rxjava.components.helpers.CreatedContract;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Function;\n+\n+public class TemplateUtils {\n+\n+    /**\n+     * Creates a transform function which is aware of the template types. Useful to be passed to\n+     * Bot.wire.\n+     *\n+     * @param allowedTemplates the list of allowed template types\n+     * @return a transformation function returning a new contract typed as one of the allowed\n+     *     templates\n+     */\n+\n+    public static Function<CreatedContract, Template> contractTransformator(\n+            Class<? extends Template>... allowedTemplates) {\n+        return createdContract -> {\n+            Record args = createdContract.getCreateArguments();\n+            for (Class template : allowedTemplates) {\n+                try {\n+                    Identifier templateId = (Identifier) template.getField(\"TEMPLATE_ID\").get(null);\n+                    if (createdContract.getTemplateId().equals(templateId)) {\n+                        return (Template)\n+                            template.getMethod(\"fromValue\", new Class[] {Value.class}).invoke(null, args);\n+                    }\n+                } catch (IllegalAccessException\n+                        | NoSuchFieldException\n+                        | InvocationTargetException\n+                        | NoSuchMethodException e) {\n+                    throw new RuntimeException(\n+                            \"Argument class \" + template + \" should be derived from Template\");"
  },
  {
    "id" : "6ed8939d-e74c-44e2-8b19-b62ceb4322ab",
    "prId" : 3098,
    "comments" : [
      {
        "id" : "1d7b0b55-084d-420b-9bc2-41ac6307332a",
        "parentId" : null,
        "author" : {
          "login" : "bartfaitamas",
          "name" : "B치rtfai Tam치s",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/23925?v=4"
        },
        "body" : "@gerolf-da how hard would it be to generate this code, and instead of using reflection, generate a big `if` statement?",
        "createdAt" : "2019-10-03T15:00:17Z",
        "updatedAt" : "2019-10-07T15:02:51Z",
        "lastEditedBy" : {
          "login" : "bartfaitamas",
          "name" : "B치rtfai Tam치s",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/23925?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12988b01-b69c-4f1f-b5a8-e65aa6d00adc",
        "parentId" : "1d7b0b55-084d-420b-9bc2-41ac6307332a",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "In fact, the java codegen can generate a \"Decoder\" class that does the matching via the template ID and returns a statically known function, so no reflection is needed. See [decoder docs](https://docs.daml.com/app-dev/bindings-java/codegen.html#generate-the-decoder-utility-class) for a bit more information.",
        "createdAt" : "2019-10-08T08:03:49Z",
        "updatedAt" : "2019-10-08T08:03:49Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "00110508-59f6-4fbb-aad3-858114dbf04f",
        "parentId" : "1d7b0b55-084d-420b-9bc2-41ac6307332a",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "But that would have to happen in the user code, as this generic utility does not have access to the statically generated classes.",
        "createdAt" : "2019-10-08T08:04:55Z",
        "updatedAt" : "2019-10-08T08:04:55Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b9504d16-947c-4cf9-baab-f8f45a5c3199",
        "parentId" : "1d7b0b55-084d-420b-9bc2-41ac6307332a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Mmmmh, so we had this already? /cc @richardkapolnai-da ",
        "createdAt" : "2019-10-08T08:10:35Z",
        "updatedAt" : "2019-10-08T08:10:35Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "95715eb4-8639-45e8-9fa1-97f6753e836f",
        "parentId" : "1d7b0b55-084d-420b-9bc2-41ac6307332a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ok, totally my fault for not recognizing this was the decoder (which I actually wrote in the first place :laughing: ). I'll improve the documentation for it.",
        "createdAt" : "2019-10-08T08:14:16Z",
        "updatedAt" : "2019-10-08T08:14:41Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "00f42083-39b2-4c68-980b-1ea3528540bb",
        "parentId" : "1d7b0b55-084d-420b-9bc2-41ac6307332a",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "https://github.com/digital-asset/daml/pull/3124",
        "createdAt" : "2019-10-08T08:53:31Z",
        "updatedAt" : "2019-10-08T08:53:31Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "df3cdf82-3a70-4db9-9468-f6c7a0fdbb0e",
        "parentId" : "1d7b0b55-084d-420b-9bc2-41ac6307332a",
        "author" : {
          "login" : "richardkapolnai-da",
          "name" : "Richard Kapolnai",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/53859003?u=c5f7df62435454a9c8d1a01b0efb50a2a035eab9&v=4"
        },
        "body" : "Funny. I also could have read the docs... :)\r\nHowever, I made a comment on the other PR, the equality is not trivial to me.",
        "createdAt" : "2019-10-08T11:54:34Z",
        "updatedAt" : "2019-10-08T11:54:34Z",
        "lastEditedBy" : {
          "login" : "richardkapolnai-da",
          "name" : "Richard Kapolnai",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/53859003?u=c5f7df62435454a9c8d1a01b0efb50a2a035eab9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8aebc85d130200edea5af1e657de92e61f702cd4",
    "line" : 38,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.rxjava.components.helpers;\n+\n+import com.daml.ledger.javaapi.data.Identifier;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Template;\n+import com.daml.ledger.javaapi.data.Value;\n+import com.daml.ledger.rxjava.components.helpers.CreatedContract;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Function;\n+\n+public class TemplateUtils {\n+\n+    /**\n+     * Creates a transform function which is aware of the template types. Useful to be passed to\n+     * Bot.wire.\n+     *\n+     * @param allowedTemplates the list of allowed template types\n+     * @return a transformation function returning a new contract typed as one of the allowed\n+     *     templates\n+     */\n+\n+    public static Function<CreatedContract, Template> contractTransformator(\n+            Class<? extends Template>... allowedTemplates) {\n+        return createdContract -> {"
  },
  {
    "id" : "49949697-876f-49af-98c1-ed004c1ae9f6",
    "prId" : 3098,
    "comments" : [
      {
        "id" : "82e95ea5-fd3a-4241-b9bb-fe0c6fb000fc",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This way every `CreatedContract` will result in looping through the `allowedTemplates` and running the reflection.\r\nYou can do something like:\r\n\r\n```java\r\npublic static Function<CreatedContract, Template> contractTransformator(\r\n            Class<? extends Template>... allowedTemplates) {\r\n  Map<Identifier, Method>factories = ...;\r\n  for (Class template : allowedTemplates) {\r\n    // do the reflection, and store the \"fromValue\" Method object as value for the \"Identifier\" key\r\n  }\r\n  return createdContract -> {\r\n    if (!factories.contains(createdContract.getTemplateId())) { throw new .... }\r\n    else return factories.get(createdContract.getTemplateId()).invoke(null, args)\r\n  };\r\n```",
        "createdAt" : "2019-10-03T15:01:02Z",
        "updatedAt" : "2019-10-07T15:02:51Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "977aa04f-de2e-4f85-8888-2ff65cb8a4b7",
        "parentId" : "82e95ea5-fd3a-4241-b9bb-fe0c6fb000fc",
        "author" : {
          "login" : "richardkapolnai-da",
          "name" : "Richard Kapolnai",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/53859003?u=c5f7df62435454a9c8d1a01b0efb50a2a035eab9&v=4"
        },
        "body" : "Thanks, great idea, I changed this.",
        "createdAt" : "2019-10-04T15:03:46Z",
        "updatedAt" : "2019-10-07T15:02:51Z",
        "lastEditedBy" : {
          "login" : "richardkapolnai-da",
          "name" : "Richard Kapolnai",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/53859003?u=c5f7df62435454a9c8d1a01b0efb50a2a035eab9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8aebc85d130200edea5af1e657de92e61f702cd4",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,49 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.ledger.rxjava.components.helpers;\n+\n+import com.daml.ledger.javaapi.data.Identifier;\n+import com.daml.ledger.javaapi.data.Record;\n+import com.daml.ledger.javaapi.data.Template;\n+import com.daml.ledger.javaapi.data.Value;\n+import com.daml.ledger.rxjava.components.helpers.CreatedContract;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Function;\n+\n+public class TemplateUtils {\n+\n+    /**\n+     * Creates a transform function which is aware of the template types. Useful to be passed to\n+     * Bot.wire.\n+     *\n+     * @param allowedTemplates the list of allowed template types\n+     * @return a transformation function returning a new contract typed as one of the allowed\n+     *     templates\n+     */\n+\n+    public static Function<CreatedContract, Template> contractTransformator(\n+            Class<? extends Template>... allowedTemplates) {\n+        return createdContract -> {\n+            Record args = createdContract.getCreateArguments();\n+            for (Class template : allowedTemplates) {"
  }
]