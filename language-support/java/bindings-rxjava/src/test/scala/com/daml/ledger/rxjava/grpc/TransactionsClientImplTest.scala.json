[
  {
    "id" : "d8793084-6067-4d40-87a0-343a50c47680",
    "prId" : 3733,
    "comments" : [
      {
        "id" : "a6f71325-8563-4f65-b41c-c3bf10bcd2da",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Instead of enumerating test cases ('case 1', 'case 2', etc.) can we add a descriptive name, please? Looking at the argument lists this seems to be a test case for specifying both start and end offsets, whereas the below one only specifies a start offset when getting transactions.",
        "createdAt" : "2019-12-05T09:09:45Z",
        "updatedAt" : "2019-12-05T09:48:38Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d464b6c3-9ec9-40ea-96fa-ed028d6b1133",
        "parentId" : "a6f71325-8563-4f65-b41c-c3bf10bcd2da",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3733/commits/a577264afd2be0e02604a911a7fa44c2fea02a9a",
        "createdAt" : "2019-12-05T09:48:53Z",
        "updatedAt" : "2019-12-05T09:48:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a577264afd2be0e02604a911a7fa44c2fea02a9a",
    "line" : null,
    "diffHunk" : "@@ -256,26 +263,228 @@ class TransactionClientTest extends FlatSpec with GeneratorDrivenPropertyChecks\n \n   it should \"provide ledger end from the ledger\" in forAll(nonEmptyLedgerContent) {\n     case (ledgerContent, transactions) =>\n-      ledgerServices.withTransactionClient(Observable.fromIterable(ledgerContent.asJava)) {\n+      ledgerServices.withTransactionsClient(Observable.fromIterable(ledgerContent.asJava)) {\n         (transactionClient, _) =>\n           val expectedOffset = new data.LedgerOffset.Absolute(transactions.last.getOffset)\n           transactionClient.getLedgerEnd.blockingGet() shouldBe expectedOffset\n       }\n   }\n \n   it should \"provide LEDGER_BEGIN from empty ledger\" in\n-    ledgerServices.withTransactionClient(Observable.empty()) { (transactionClient, _) =>\n+    ledgerServices.withTransactionsClient(Observable.empty()) { (transactionClient, _) =>\n       transactionClient.getLedgerEnd.blockingGet() shouldBe\n         data.LedgerOffset.LedgerBegin.getInstance()\n     }\n \n   behavior of \"8.15 TransactionClient.getLedgerEnd\"\n \n   it should \"request ledger end with correct ledger ID\" in\n-    ledgerServices.withTransactionClient(Observable.empty()) {\n+    ledgerServices.withTransactionsClient(Observable.empty()) {\n       (transactionClient, transactionService) =>\n         transactionClient.getLedgerEnd.blockingGet()\n         transactionService.lastLedgerEndRequest.get().ledgerId shouldBe ledgerServices.ledgerId\n     }\n \n+  behavior of \"Authentication\"\n+\n+  def toAuthenticatedServer(fn: TransactionsClient => Any): Any =\n+    ledgerServices.withTransactionsClient(Observable.empty(), mockedAuthService) { (client, _) =>\n+      fn(client)\n+    }\n+\n+  it should \"deny access without a token\" in {\n+    withClue(\"getTransactions 1\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(\n+          _.getTransactions(ledgerBegin, ledgerEnd, filterFor(someParty), false)\n+            .timeout(TestConfiguration.timeoutInSeconds, TimeUnit.SECONDS)\n+            .blockingIterable()\n+            .asScala\n+            .size)\n+      }\n+    }\n+    withClue(\"getTransactions 2\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(\n+          _.getTransactions(ledgerBegin, filterFor(someParty), false)\n+            .timeout(TestConfiguration.timeoutInSeconds, TimeUnit.SECONDS)\n+            .blockingIterable()\n+            .asScala\n+            .size)\n+      }\n+    }\n+    withClue(\"getTransactionsTree 1\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(\n+          _.getTransactionsTrees(ledgerBegin, ledgerEnd, filterFor(someParty), false)\n+            .timeout(TestConfiguration.timeoutInSeconds, TimeUnit.SECONDS)\n+            .blockingIterable()\n+            .asScala\n+            .size)\n+      }\n+    }\n+    withClue(\"getTransactionByEventId\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(_.getTransactionByEventId(\"...\", Set(someParty).asJava).blockingGet())\n+      }\n+    }\n+    withClue(\"getTransactionById\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(_.getTransactionById(\"...\", Set(someParty).asJava).blockingGet())\n+      }\n+    }\n+    withClue(\"getFlatTransactionByEventId\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(\n+          _.getFlatTransactionByEventId(\"...\", Set(someParty).asJava).blockingGet())\n+      }\n+    }\n+    withClue(\"getFlatTransactionById\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(_.getFlatTransactionById(\"...\", Set(someParty).asJava).blockingGet())\n+      }\n+    }\n+    withClue(\"getLedgerEnd\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer(_.getLedgerEnd.blockingGet())\n+      }\n+    }\n+  }\n+\n+  it should \"deny access with insufficient authorization\" in {\n+    withClue(\"getTransactions 1\") {"
  }
]