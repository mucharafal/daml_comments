[
  {
    "id" : "83985de1-64d9-412e-9fe9-f0cde5c131b8",
    "prId" : 3721,
    "comments" : [
      {
        "id" : "b37f6351-792f-404d-a238-d38b105af209",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "```suggestion\r\n          _.getTime(somePartyReadWriteToken).blockingFirst()\r\n```\r\nUsing `emptyToken` is better for checking whether empty tokens are handled correctly, using `somePartyReadWriteToken` checks whether this endpoint is admin-only (which it should be).",
        "createdAt" : "2019-12-04T09:52:30Z",
        "updatedAt" : "2019-12-04T09:52:31Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4d989214-0d22-4bb9-bb07-7918a2b5867b",
        "parentId" : "b37f6351-792f-404d-a238-d38b105af209",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`getTime` is public :wink: \r\n```scala\r\n  override def getTime(\r\n      request: GetTimeRequest,\r\n      responseObserver: StreamObserver[GetTimeResponse]): Unit =\r\n    authorizer.requirePublicClaimsOnStream(service.getTime)(request, responseObserver)\r\n```",
        "createdAt" : "2019-12-04T09:53:47Z",
        "updatedAt" : "2019-12-04T09:53:47Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "95d46bd2-4a11-4336-894c-4cd8cc1a1623",
        "parentId" : "b37f6351-792f-404d-a238-d38b105af209",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Disregard the above, the `getTime` call requires public claims only. The information at https://github.com/digital-asset/daml/blob/master/ledger/ledger-api-auth/src/main/scala/com/digitalasset/ledger/api/auth/Claims.scala#L71 should be updated.",
        "createdAt" : "2019-12-04T09:55:01Z",
        "updatedAt" : "2019-12-04T09:55:01Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d2280be5-19e1-4dbf-b3b0-21bb3df34e78",
        "parentId" : "b37f6351-792f-404d-a238-d38b105af209",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I've addressed it in this PR https://github.com/digital-asset/daml/pull/3727",
        "createdAt" : "2019-12-04T10:11:31Z",
        "updatedAt" : "2019-12-04T10:11:31Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d4db8d4c854f2ea1cc3567d424398279664c5b1e",
    "line" : 109,
    "diffHunk" : "@@ -71,14 +83,73 @@ class TimeClientImplTest extends FlatSpec with Matchers with OptionValues with D\n   behavior of \"[9.4] TimeClientImpl.setTime\"\n \n   it should \"return an error without sending a request when the time to set if bigger than the current time\" in {\n-    ledgerServices.withTimeClient(Seq(TimeServiceImpl())) { timeClient =>\n-      val currentTime = Instant.ofEpochSecond(1l, 2l)\n-      intercept[RuntimeException](\n-        timeClient\n-          .setTime(currentTime, currentTime)\n-          .timeout(TestConfiguration.timeoutInSeconds, TimeUnit.SECONDS)\n-          .blockingGet()\n-      )\n+    ledgerServices.withTimeClient(Seq(TimeServiceImpl.createWithRef(Seq.empty, authorizer)._1)) {\n+      timeClient =>\n+        val currentTime = Instant.ofEpochSecond(1l, 2l)\n+        intercept[RuntimeException](\n+          timeClient\n+            .setTime(currentTime, currentTime)\n+            .timeout(TestConfiguration.timeoutInSeconds, TimeUnit.SECONDS)\n+            .blockingGet()\n+        )\n+    }\n+  }\n+\n+  behavior of \"Authorization\"\n+\n+  def toAuthenticatedServer(fn: TimeClient => Any): Any =\n+    ledgerServices.withTimeClient(\n+      Seq(TimeServiceImpl.createWithRef(Seq(genGetTimeResponse), authorizer)._1),\n+      mockedAuthService)(fn)\n+\n+  it should \"deny access without a token\" in {\n+    withClue(\"getTime\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer {\n+          _.getTime().blockingFirst()\n+        }\n+      }\n+    }\n+    withClue(\"setTime\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer { client =>\n+          val t = Instant.now()\n+          client.setTime(t, t.plusSeconds(1)).blockingGet()\n+        }\n+      }\n+    }\n+  }\n+\n+  it should \"deny access with insufficient authorization\" in {\n+    withClue(\"getTime\") {\n+      expectPermissionDenied {\n+        toAuthenticatedServer {\n+          _.getTime(emptyToken).blockingFirst()"
  }
]