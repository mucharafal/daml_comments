[
  {
    "id" : "86f15d6a-7074-4c85-8475-536398831bb1",
    "prId" : 3689,
    "comments" : [
      {
        "id" : "b6ad5d84-8430-498b-85ea-ef59156b985c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "imhoo this would be easier to read as something like\r\n```\r\n++ [\"\"] ++\r\nintercalate [\"\"] $ concatMap (\\(def, ser) -> def ++ ser) defSers\r\n```\r\nIt took me a while to spot why we add a list with an empty string to each definition.",
        "createdAt" : "2019-12-01T11:19:20Z",
        "updatedAt" : "2019-12-01T11:26:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "105008ac1708b448f467614f7fb1a3da9910207d",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +100,104 @@        ,\"const templateId = (entityName: string): daml.TemplateId => ({packageId, moduleName, entityName});\"\n        ] ++\n        concatMap (\\(def, ser) -> [\"\"] ++ def ++ ser) defSers\n  where\n    serDefs = filter (getIsSerializable . dataSerializable) (NM.toList (moduleDataTypes mod))"
  },
  {
    "id" : "015cf014-2af8-4e8f-806e-34c899f967de",
    "prId" : 3689,
    "comments" : [
      {
        "id" : "816e4af6-cb33-402e-af0c-4f8f90042ac2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Manually writing the code for detecting the references seems a bit repetitive and brittle since itâ€™s easy to forget to recurse somewhere. Is there a reason why we cannot throw some traversal at this that takes care of giving us all module references?",
        "createdAt" : "2019-12-01T11:24:05Z",
        "updatedAt" : "2019-12-01T11:26:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "105008ac1708b448f467614f7fb1a3da9910207d",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +173,177 @@  where\n    go = \\case\n        TVar v -> (dup (unTypeVarName v), Set.empty)\n        TUnit -> ((\"{}\", \"daml.Unit\"), Set.empty)\n        TBool -> ((\"boolean\", \"daml.Bool\"), Set.empty)"
  },
  {
    "id" : "c1d3e0c6-0a4d-4645-a395-78069237b3ed",
    "prId" : 3441,
    "comments" : [
      {
        "id" : "3f536acd-4a00-4a20-a398-15ab9eb917cc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Those relative imports make me sad :disappointed: ",
        "createdAt" : "2019-11-19T08:22:50Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bf77109a-c581-454c-9400-a51ff6870b9c",
        "parentId" : "3f536acd-4a00-4a20-a398-15ab9eb917cc",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's apparently how JavaScript imports work. :|",
        "createdAt" : "2019-11-19T08:51:16Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eff993c856bef39dda178c0b0ca7b3cc76f89f26",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@        ,\"import * as daml from '@digitalasset/daml-json-types';\"\n        ,\"import * as jtv from '@mojotech/json-type-validation';\"\n        ,\"import packageId from '\" <> pkgRootPath <> \"/packageId';\"\n        ] ++\n        [\"import * as \" <> modNameStr <> \" from '\" <> pkgRootPath <> \"/\" <> pkgRefStr <> T.intercalate \"/\" (unModuleName modName) <> \"';\""
  },
  {
    "id" : "93b7bcbb-fc19-49be-932a-a22586b69a48",
    "prId" : 3441,
    "comments" : [
      {
        "id" : "6a303eed-054f-4362-8064-236776ac583c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we need to treat nested options specially?",
        "createdAt" : "2019-11-19T08:25:19Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6ff0993-b06f-43a6-b1cf-ec8e40f51995",
        "parentId" : "6a303eed-054f-4362-8064-236776ac583c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "They have a different encoding, see https://docs.daml.com/json-api/lf-value-specification.html#optional. I just realized I'm also off for record fields of type `Optional _`. It's tracked on #3518 now as well.",
        "createdAt" : "2019-11-19T08:57:23Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eff993c856bef39dda178c0b0ca7b3cc76f89f26",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@            in\n            (t' <> \"[]\", \"daml.List(\" <> ser <> \")\")\n        TOptional (TOptional _) -> error \"TODO(MH): nested optionals\"\n        TOptional t ->\n            let (t', ser) = go t"
  }
]