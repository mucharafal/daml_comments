[
  {
    "id" : "17c8d3c4-6f77-4ad0-83c6-6384abf8dc3b",
    "prId" : 4049,
    "comments" : [
      {
        "id" : "a80138e3-7a39-4bea-85ce-ecf30378df9a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why? I think the old API was fine.",
        "createdAt" : "2020-01-15T21:53:12Z",
        "updatedAt" : "2020-01-16T23:31:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4ef18ec9-fc3f-425e-a74d-37e486be1a38",
        "parentId" : "a80138e3-7a39-4bea-85ce-ecf30378df9a",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "because reference can be of `ContractLocator` type:\r\n\r\n```\r\n  sealed abstract class ContractLocator[+LfV] extends Product with Serializable\r\n\r\n  final case class EnrichedContractKey[+LfV](\r\n      templateId: TemplateId.OptionalPkg,\r\n      key: LfV\r\n  ) extends ContractLocator[LfV]\r\n\r\n  final case class EnrichedContractId(\r\n      templateId: Option[TemplateId.OptionalPkg],\r\n      contractId: domain.ContractId\r\n  ) extends ContractLocator[Nothing]\r\n```",
        "createdAt" : "2020-01-15T21:55:58Z",
        "updatedAt" : "2020-01-16T23:31:28Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5e70b7a-b700-4a71-9838-7f65e3e87f88",
        "parentId" : "a80138e3-7a39-4bea-85ce-ecf30378df9a",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "you see it groups `templateId` with `key` and optional `templateId` with `contractId`. That is what I currently have in my domain model, which I am not going to flatten that is for sure (I assumed you wanted to have something similar in TypeScript)... JSON can be flattened, but I think `reference` field kind of makes sense. Again up to you.",
        "createdAt" : "2020-01-15T21:57:47Z",
        "updatedAt" : "2020-01-16T23:31:28Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1cde7848-e03b-4a38-80c3-30a3c1dbab00",
        "parentId" : "a80138e3-7a39-4bea-85ce-ecf30378df9a",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "plus I hate writing JSON formatters manually :), if we have a `reference` field, the formatter can be completely derived. ",
        "createdAt" : "2020-01-15T22:00:14Z",
        "updatedAt" : "2020-01-16T23:31:28Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc1f1004025f4f941b2843d0aa7936355a41fc9c",
    "line" : null,
    "diffHunk" : "@@ -189,8 +189,10 @@ class Ledger {\n    */\n   async exercise<T extends object, C, R>(choice: Choice<T, C, R>, contractId: ContractId<T>, argument: C): Promise<[R , Event<object>[]]> {\n     const payload = {\n-      templateId: choice.template().templateId,\n-      contractId,\n+      reference: {"
  },
  {
    "id" : "a5fb14fe-3b65-4def-b108-4a1e8822879e",
    "prId" : 3895,
    "comments" : [
      {
        "id" : "b099e012-4e02-47b9-8e6c-0db0f8bb5c39",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-12-20T10:28:04Z",
        "updatedAt" : "2019-12-20T12:56:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a63d1a81485323a7fa5c1e1b7822721fa74377e8",
    "line" : null,
    "diffHunk" : "@@ -184,22 +184,29 @@ class Ledger {\n   /**\n    * Exercise a choice on a contract.\n    */\n-  async exercise<T, C>(choice: Choice<T, C>, contractId: ContractId<T>, argument: C): Promise<Event<unknown>[]> {\n+  async exercise<T, C, R>(choice: Choice<T, C, R>, contractId: ContractId<T>, argument: C): Promise<[R , Event<unknown>[]]> {\n     const payload = {\n       templateId: choice.template().templateId,\n       contractId,\n       choice: choice.choiceName,\n       argument,\n     };\n+"
  },
  {
    "id" : "04c9ef70-731a-4303-aa43-78154d727d0e",
    "prId" : 3895,
    "comments" : [
      {
        "id" : "7d175fbb-b474-4c75-94f5-279bab457fad",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This line is too long even for my standards. :)\r\n```suggestion\r\n    const responseDecoder: jtv.Decoder<{exerciseResult: R; contracts: Event<unknown>[]}> = jtv.object({\r\n      exerciseResult: choice.resultDecoder(),\r\n      contracts: jtv.array(decodeEventUnknown()),\r\n    });\r\n```",
        "createdAt" : "2019-12-20T10:30:51Z",
        "updatedAt" : "2019-12-20T12:56:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a63d1a81485323a7fa5c1e1b7822721fa74377e8",
    "line" : null,
    "diffHunk" : "@@ -184,22 +184,29 @@ class Ledger {\n   /**\n    * Exercise a choice on a contract.\n    */\n-  async exercise<T, C>(choice: Choice<T, C>, contractId: ContractId<T>, argument: C): Promise<Event<unknown>[]> {\n+  async exercise<T, C, R>(choice: Choice<T, C, R>, contractId: ContractId<T>, argument: C): Promise<[R , Event<unknown>[]]> {\n     const payload = {\n       templateId: choice.template().templateId,\n       contractId,\n       choice: choice.choiceName,\n       argument,\n     };\n+\n     const json = await this.submit('command/exercise', payload);\n-    return jtv.Result.withException(jtv.array(decodeEventUnknown()).run(json));\n+    console.log (\"exercise json response\" + JSON.stringify(json));\n+    // Decode the server response into a tuple.\n+    const responseDecoder: jtv.Decoder<{exerciseResult: R; contracts: Event<unknown>[]}> = jtv.object ({exerciseResult: choice.resultDecoder(), contracts: jtv.array(decodeEventUnknown())});"
  },
  {
    "id" : "c7a7fd14-9ead-4e00-9d60-6d4f2ead17f7",
    "prId" : 3895,
    "comments" : [
      {
        "id" : "a7cd93ee-921c-4126-af3b-7ad5ac21ee6c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is this a left-over from debugging?\r\n```suggestion\r\n```",
        "createdAt" : "2019-12-20T10:31:42Z",
        "updatedAt" : "2019-12-20T12:56:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a63d1a81485323a7fa5c1e1b7822721fa74377e8",
    "line" : null,
    "diffHunk" : "@@ -184,22 +184,29 @@ class Ledger {\n   /**\n    * Exercise a choice on a contract.\n    */\n-  async exercise<T, C>(choice: Choice<T, C>, contractId: ContractId<T>, argument: C): Promise<Event<unknown>[]> {\n+  async exercise<T, C, R>(choice: Choice<T, C, R>, contractId: ContractId<T>, argument: C): Promise<[R , Event<unknown>[]]> {\n     const payload = {\n       templateId: choice.template().templateId,\n       contractId,\n       choice: choice.choiceName,\n       argument,\n     };\n+\n     const json = await this.submit('command/exercise', payload);\n-    return jtv.Result.withException(jtv.array(decodeEventUnknown()).run(json));\n+    console.log (\"exercise json response\" + JSON.stringify(json));"
  },
  {
    "id" : "c08a111b-7566-4127-9d24-35a4bcbf8a2d",
    "prId" : 3895,
    "comments" : [
      {
        "id" : "868d829a-50cb-4c8e-875a-4566844ea6cc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    const {exerciseResult, contracts} = jtv.Result.withException(responseDecoder.run(json));\r\n```",
        "createdAt" : "2019-12-20T10:32:05Z",
        "updatedAt" : "2019-12-20T12:56:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a63d1a81485323a7fa5c1e1b7822721fa74377e8",
    "line" : null,
    "diffHunk" : "@@ -184,22 +184,29 @@ class Ledger {\n   /**\n    * Exercise a choice on a contract.\n    */\n-  async exercise<T, C>(choice: Choice<T, C>, contractId: ContractId<T>, argument: C): Promise<Event<unknown>[]> {\n+  async exercise<T, C, R>(choice: Choice<T, C, R>, contractId: ContractId<T>, argument: C): Promise<[R , Event<unknown>[]]> {\n     const payload = {\n       templateId: choice.template().templateId,\n       contractId,\n       choice: choice.choiceName,\n       argument,\n     };\n+\n     const json = await this.submit('command/exercise', payload);\n-    return jtv.Result.withException(jtv.array(decodeEventUnknown()).run(json));\n+    console.log (\"exercise json response\" + JSON.stringify(json));\n+    // Decode the server response into a tuple.\n+    const responseDecoder: jtv.Decoder<{exerciseResult: R; contracts: Event<unknown>[]}> = jtv.object ({exerciseResult: choice.resultDecoder(), contracts: jtv.array(decodeEventUnknown())});\n+    const response: {exerciseResult: R; contracts: Event<unknown>[]} = jtv.Result.withException(responseDecoder.run(json));"
  },
  {
    "id" : "08f1d2fc-ac18-4313-99f1-d65dd6fcaf5e",
    "prId" : 3895,
    "comments" : [
      {
        "id" : "49c28c97-75ce-4cea-9ef4-dd6f58083718",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    return [exerciseResult, contracts];\r\n```",
        "createdAt" : "2019-12-20T10:32:34Z",
        "updatedAt" : "2019-12-20T12:56:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a63d1a81485323a7fa5c1e1b7822721fa74377e8",
    "line" : null,
    "diffHunk" : "@@ -184,22 +184,29 @@ class Ledger {\n   /**\n    * Exercise a choice on a contract.\n    */\n-  async exercise<T, C>(choice: Choice<T, C>, contractId: ContractId<T>, argument: C): Promise<Event<unknown>[]> {\n+  async exercise<T, C, R>(choice: Choice<T, C, R>, contractId: ContractId<T>, argument: C): Promise<[R , Event<unknown>[]]> {\n     const payload = {\n       templateId: choice.template().templateId,\n       contractId,\n       choice: choice.choiceName,\n       argument,\n     };\n+\n     const json = await this.submit('command/exercise', payload);\n-    return jtv.Result.withException(jtv.array(decodeEventUnknown()).run(json));\n+    console.log (\"exercise json response\" + JSON.stringify(json));\n+    // Decode the server response into a tuple.\n+    const responseDecoder: jtv.Decoder<{exerciseResult: R; contracts: Event<unknown>[]}> = jtv.object ({exerciseResult: choice.resultDecoder(), contracts: jtv.array(decodeEventUnknown())});\n+    const response: {exerciseResult: R; contracts: Event<unknown>[]} = jtv.Result.withException(responseDecoder.run(json));\n+    const result: [R, Event<unknown>[]] = [response.exerciseResult, response.contracts]; // Unpack record fields into a tuple."
  }
]