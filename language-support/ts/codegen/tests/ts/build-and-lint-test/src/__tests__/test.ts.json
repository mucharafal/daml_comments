[
  {
    "id" : "c3b50274-4995-4b8e-926c-80b1bf25edad",
    "prId" : 7066,
    "comments" : [
      {
        "id" : "529af532-5fd3-4ceb-b42f-11f93dba8cc8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we still have tests for the singular version?",
        "createdAt" : "2020-08-12T07:34:08Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef0422dc9dbfe8749fff1b56b9a06706cecc569",
    "line" : null,
    "diffHunk" : "@@ -126,7 +126,7 @@ describe('decoders for recursive types do not loop', () => {\n test('create + fetch & exercise', async () => {\n   const aliceLedger = new Ledger({token: ALICE_TOKEN, httpBaseUrl: httpBaseUrl()});\n   const bobLedger = new Ledger({token: BOB_TOKEN, httpBaseUrl: httpBaseUrl()});\n-  const aliceRawStream = aliceLedger.streamQuery(buildAndLint.Main.Person, {party: ALICE_PARTY});\n+  const aliceRawStream = aliceLedger.streamQueries(buildAndLint.Main.Person, [{party: ALICE_PARTY}]);"
  },
  {
    "id" : "07b4fc52-3231-4a34-99d7-47914340732b",
    "prId" : 7066,
    "comments" : [
      {
        "id" : "9c8ea560-edcb-4706-99df-cf06054dec22",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Tests are failing about 4/10 times without this. With it I got 40 out of 40 successes. I'm not super happy about it, but this being JS, I don't know of any better way to give the collect callback a chance to run.",
        "createdAt" : "2020-09-08T17:16:45Z",
        "updatedAt" : "2020-09-08T17:16:46Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22d062f2-cee0-4385-984f-fb55f0f53107",
        "parentId" : "9c8ea560-edcb-4706-99df-cf06054dec22",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we make a promise out of the callback and `await` that?",
        "createdAt" : "2020-09-08T17:19:40Z",
        "updatedAt" : "2020-09-08T17:19:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "69114ca1-32d5-4d87-909a-a8b83981fb9a",
        "parentId" : "9c8ea560-edcb-4706-99df-cf06054dec22",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I suppose we could replace the current `collect` mechanism with a multi-delivery promise, and then explicitly `await` each expected message, rather than handling the whole stream as an array.\r\n\r\nSyntactically you'd have a few more method calls and `await` expressions in exchange for this one `sleep`. In terms of runtime behaviour, I believe the test would time out instead of failing, which means that it would be slower for non-timing-related failures and that it will be much more lenient if things get slow.\r\n\r\nI'll let you decide if you think the tradeoff is worth it; I have a small preference for the state it's currently in, but it's not a massive change and I'm willing to open a PR for it if you think that's better.",
        "createdAt" : "2020-09-08T17:34:58Z",
        "updatedAt" : "2020-09-08T17:34:58Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f7032e8e-7d40-4882-9e9b-8d734aa33e59",
        "parentId" : "9c8ea560-edcb-4706-99df-cf06054dec22",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Letâ€™s leave it and if it starts flaking we can reconsider.",
        "createdAt" : "2020-09-08T17:36:14Z",
        "updatedAt" : "2020-09-08T17:36:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef0422dc9dbfe8749fff1b56b9a06706cecc569",
    "line" : 55,
    "diffHunk" : "@@ -312,3 +312,142 @@ test('create + fetch & exercise', async () => {\n   const nonTopLevelContracts = await aliceLedger.query(buildAndLint.Lib.Mod.NonTopLevel);\n   expect(nonTopLevelContracts).toEqual([nonTopLevelContract]);\n });\n+\n+test(\"multi-{key,query} stream\", async () => {\n+  const ledger = new Ledger({token: ALICE_TOKEN, httpBaseUrl: httpBaseUrl()});\n+\n+  function collect<T extends object, K, I extends string, State>(stream: Stream<T, K, I, State>): [State, readonly Event<T, K, I>[]][] {\n+    const res = [] as [State, readonly Event<T, K, I>[]][];\n+    stream.on('change', (state, events) => res.push([state, events]));\n+    return res;\n+  }\n+  async function create(t: string): Promise<void> {\n+    await ledger.create(buildAndLint.Main.Counter, {p: ALICE_PARTY, t, c: \"0\"});\n+  }\n+  async function update(t: string, c: number): Promise<void> {\n+    await ledger.exerciseByKey(buildAndLint.Main.Counter.Change, {_1: ALICE_PARTY, _2: t}, {n: c.toString()});\n+  }\n+  async function archive(t: string): Promise<void> {\n+    await ledger.archiveByKey(buildAndLint.Main.Counter, {_1: ALICE_PARTY, _2: t});\n+  }\n+  function sleep(ms: number): Promise<void> {\n+        return new Promise(resolve => setTimeout(resolve, ms));\n+  }\n+  // Add support for comparison queries\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  const streamQueriesWithComparison = ledger.streamQueries.bind(ledger) as (t: any, qs: any) => any;\n+  const q = streamQueriesWithComparison(\n+    buildAndLint.Main.Counter,\n+    [{p: ALICE_PARTY, t: \"included\"},\n+     {c: {\"%gt\": 5}}]);\n+  const queryResult = collect(q);\n+  const ks = ledger.streamFetchByKeys(\n+    buildAndLint.Main.Counter,\n+    [{_1: ALICE_PARTY, _2: \"included\"},\n+     {_1: ALICE_PARTY, _2: \"byKey\"},\n+     {_1: ALICE_PARTY, _2: \"included\"}]);\n+  const byKeysResult = collect(ks);\n+\n+  await create(\"included\");\n+  await create(\"byKey\");\n+  await create(\"excluded\");\n+\n+  await update(\"excluded\", 10);\n+  await update(\"byKey\", 3);\n+  await update(\"byKey\", 6);\n+  await update(\"excluded\", 3);\n+  await update(\"included\", 2);\n+\n+  await archive(\"included\");\n+  await archive(\"byKey\");\n+\n+  await create(\"included\");\n+\n+  await sleep(500);"
  },
  {
    "id" : "a9d6a6be-e138-4663-8763-7760316d7dc3",
    "prId" : 6905,
    "comments" : [
      {
        "id" : "0a9226f9-9fc2-4391-bf18-fc6914cbb631",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does moving the `waitOn` to the call site actually change anything?",
        "createdAt" : "2020-07-29T11:15:38Z",
        "updatedAt" : "2020-07-29T11:15:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cdc184b9-40ff-4d56-9808-b15cd97d78ea",
        "parentId" : "0a9226f9-9fc2-4391-bf18-fc6914cbb631",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yes, explained in the PR description.",
        "createdAt" : "2020-07-29T11:17:00Z",
        "updatedAt" : "2020-07-29T11:17:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7d818564-c5f0-4cf3-81e8-be9e5d8bbc2b",
        "parentId" : "0a9226f9-9fc2-4391-bf18-fc6914cbb631",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Damn, I always forget to read the PR descriptions. I wish they were at the top of the \"Files changed\" tab as well just to shove them in my face. Thanks for your explanation and your patience. Also, damn global variables! (I'm painfully aware I'm the one who set this up...)",
        "createdAt" : "2020-07-29T11:20:09Z",
        "updatedAt" : "2020-07-29T11:20:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0f27f0a8577c37cd95a02ef5f895eeef3488ce20",
    "line" : 8,
    "diffHunk" : "@@ -44,38 +44,37 @@ const getEnv = (variable: string): string => {\n   return result;\n }\n \n-const spawnJvmAndWaitOn = async (jar: string, args: string[], resource: string, jvmArgs: string[] = []): Promise<ChildProcess> => {\n+const spawnJvm = (jar: string, args: string[], jvmArgs: string[] = []): ChildProcess => {\n   const java = getEnv('JAVA');\n   const proc = spawn(java, [...jvmArgs, '-jar', jar, ...args], {stdio: \"inherit\",});\n-  await waitOn({resources: [resource]})"
  },
  {
    "id" : "19a1b5da-172d-4010-ba51-f24b93f0a895",
    "prId" : 6898,
    "comments" : [
      {
        "id" : "3d011439-0bed-4e99-9e66-1438dc59b2e8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Shouldnâ€™t this pass now?",
        "createdAt" : "2020-07-28T13:30:52Z",
        "updatedAt" : "2020-07-28T13:31:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6d407bf6-e26b-466c-9341-be55b3b09e06",
        "parentId" : "3d011439-0bed-4e99-9e66-1438dc59b2e8",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It should indeed. Good catch. I'll make another PR for that.",
        "createdAt" : "2020-07-28T13:35:59Z",
        "updatedAt" : "2020-07-28T13:36:00Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff32dee2-a5bd-4290-94b6-a86c8c38d998",
        "parentId" : "3d011439-0bed-4e99-9e66-1438dc59b2e8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Now youâ€™re just gaming PR stats :trollface: ",
        "createdAt" : "2020-07-28T13:37:28Z",
        "updatedAt" : "2020-07-28T13:37:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8a93cb23-abda-4802-8423-42095a796751",
        "parentId" : "3d011439-0bed-4e99-9e66-1438dc59b2e8",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm gaming your contribution stats too since code reviews count as well. ðŸ¤« ",
        "createdAt" : "2020-07-28T13:40:00Z",
        "updatedAt" : "2020-07-28T13:40:00Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5dbc137d3934573d4f5719eb87379502e0807f24",
    "line" : 15,
    "diffHunk" : "@@ -121,7 +121,7 @@ describe('decoders for recursive types do not loop', () => {\n   // });"
  },
  {
    "id" : "dda33260-690f-41d6-8747-0bdcf3a848cb",
    "prId" : 5571,
    "comments" : [
      {
        "id" : "8451a34e-14f9-48d3-8069-1cbac836321f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Nice!",
        "createdAt" : "2020-04-16T08:18:09Z",
        "updatedAt" : "2020-04-16T13:08:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "72535d45c1b8ec7a43d469e44a1e26622b509de6",
    "line" : 16,
    "diffHunk" : "@@ -155,8 +155,8 @@ test('create + fetch & exercise', async () => {\n   expect(events).toHaveLength(2);\n   expect(events[0]).toHaveProperty('archived');\n   expect(events[1]).toHaveProperty('created');\n-  const alice5Archived = (events[0] as {archived: ArchiveEvent<buildAndLint.Main.Person>}).archived;\n-  const alice6Contract = (events[1] as {created: CreateEvent<buildAndLint.Main.Person, buildAndLint.Main.Person.Key>}).created;\n+  const alice5Archived = (events[0] as {archived: buildAndLint.Main.Person.ArchiveEvent}).archived;\n+  const alice6Contract = (events[1] as {created: buildAndLint.Main.Person.CreateEvent}).created;"
  },
  {
    "id" : "d13c8583-46f5-4327-9ab7-69897eb2f02e",
    "prId" : 5553,
    "comments" : [
      {
        "id" : "a27c8290-4e73-4c0d-8526-fc65cdcb2b16",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This would have made it a bit terser:\r\n```suggestion\r\nconst httpBaseUrl = (): string => `http://localhost:${jsonApiPort}/`;\r\n```\r\nAnd please add semicolons to the end of lines. It's not strictly necessary but I don't understand the implications of not doing it and am a bit wary hence.",
        "createdAt" : "2020-04-16T08:26:59Z",
        "updatedAt" : "2020-04-16T08:27:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a531fa2e91c8166269e89d49c693ca7b59e6ba22",
    "line" : 19,
    "diffHunk" : "@@ -23,11 +24,11 @@ const ALICE_TOKEN = computeToken(ALICE_PARTY);\n const BOB_PARTY = 'Bob';\n const BOB_TOKEN = computeToken(BOB_PARTY);\n \n-const SANDBOX_PORT = 6865;\n+let sandboxPort: number | undefined = undefined;\n const SANDBOX_PORT_FILE = 'sandbox.port';\n-const JSON_API_PORT = 7575;\n+let jsonApiPort: number | undefined = undefined;\n const JSON_API_PORT_FILE = 'json-api.port';\n-const HTTP_BASE_URL = `http://localhost:${JSON_API_PORT}/`;\n+const httpBaseUrl: () => string = () => `http://localhost:${jsonApiPort}/`"
  },
  {
    "id" : "8d7b491a-c109-4a6b-ae09-0d28875deb53",
    "prId" : 5550,
    "comments" : [
      {
        "id" : "8fd386e7-865a-4cea-ad14-0ebaed66202c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Hardcoding port numbers somewhat defeats the point of using `--port-file`. We should bind to port `0` and then read the port from the file. Fine to leve it for this PR but letâ€™s change that separately.",
        "createdAt" : "2020-04-14T15:42:03Z",
        "updatedAt" : "2020-04-14T15:44:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "64547334-99cc-447c-b3ee-388932fb833d",
        "parentId" : "8fd386e7-865a-4cea-ad14-0ebaed66202c",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Tracking in issue https://github.com/digital-asset/daml/issues/5551",
        "createdAt" : "2020-04-14T16:05:08Z",
        "updatedAt" : "2020-04-14T16:05:08Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "21784d17a48a9bb046c8c2a7f2100c6770449ae0",
    "line" : 3,
    "diffHunk" : "@@ -26,6 +26,7 @@ const BOB_TOKEN = computeToken(BOB_PARTY);\n const SANDBOX_PORT = 6865;\n const SANDBOX_PORT_FILE = 'sandbox.port';\n const JSON_API_PORT = 7575;"
  },
  {
    "id" : "ecefe98b-72f4-4473-b94d-5c9ac69b6ec2",
    "prId" : 4975,
    "comments" : [
      {
        "id" : "eafebb7d-0499-441d-aaf8-b05bfa86daf6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesnâ€™t seem to actually test the difference anywhere. I admittedly donâ€™t understand typescript but afaict one of the main benefits of the new approach is that I can just use `\"Red\"` instead of `Color.Red`. We should add some tests for that!",
        "createdAt" : "2020-03-12T20:23:06Z",
        "updatedAt" : "2020-03-12T21:11:40Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b65cef64-2878-457b-8781-05729cebcc55",
        "parentId" : "eafebb7d-0499-441d-aaf8-b05bfa86daf6",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok, done!",
        "createdAt" : "2020-03-12T20:54:33Z",
        "updatedAt" : "2020-03-12T21:12:15Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3f6f10a59e79f234fa88ceca81c572c611a97f7d",
    "line" : 1,
    "diffHunk" : "@@ -238,6 +238,8 @@ test('create + fetch & exercise', async () => {\n     tuple: {_1: '12', _2: 'mmm'},"
  }
]