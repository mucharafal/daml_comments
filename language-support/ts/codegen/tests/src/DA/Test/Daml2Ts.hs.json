[
  {
    "id" : "e51e9e0a-15a6-42fc-ab38-b8d1b9747cb1",
    "prId" : 5243,
    "comments" : [
      {
        "id" : "24c782ae-11aa-45ef-8724-e01c055373da",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We already have `assertInfixOf` in `DA.Test.Util`. Maybe just add a `msg argument to that instead of duplicating it here?",
        "createdAt" : "2020-03-27T10:49:39Z",
        "updatedAt" : "2020-03-27T10:50:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fe217034-56b4-4ce9-95df-e9cf93d14334",
        "parentId" : "24c782ae-11aa-45ef-8724-e01c055373da",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good catch. Fixed in https://github.com/digital-asset/daml/pull/5245. The actual message is not really important.",
        "createdAt" : "2020-03-27T11:29:35Z",
        "updatedAt" : "2020-03-27T11:29:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a89d638a6d26e87992a2f9238dc3fee338e27ed8",
    "line" : 140,
    "diffHunk" : "@@ -333,3 +292,7 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n     assertFileLines file expectedContent = do\n       actualContent <- T.lines <$> T.readFileUtf8 file\n       assertEqual (\"The content of file '\" ++ file ++ \"' does not match\") expectedContent actualContent\n+\n+    assertIsInfixOf :: String -> String -> String -> IO ()"
  },
  {
    "id" : "6c1c1d66-b074-410f-a4f9-ddb0324065da",
    "prId" : 5218,
    "comments" : [
      {
        "id" : "ac999dab-85a5-4dc8-8100-8d9c843bd801",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "We write once here in the test and use it for all the packages.",
        "createdAt" : "2020-03-26T16:40:01Z",
        "updatedAt" : "2020-03-26T18:18:26Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0abe93a6fc31745849983ecd333eea94a1ba62f5",
    "line" : 53,
    "diffHunk" : "@@ -218,22 +212,38 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n       step \"eslint...\"\n       withCurrentDirectory daml2tsDir $ do\n         pkgs <- (\\\\ [\"package.json\", \"node_modules\"]) <$> listDirectory daml2tsDir\n-        BSL.writeFile \"package.json\" $ encode (\n+        BSL.writeFile \"package.json\" $ encode $\n           object\n             [ \"private\" .= True\n             , \"devDependencies\" .= pkgDevDependencies configConsts\n             , \"workspaces\" .= pkgs\n             , \"name\" .= (\"daml2ts\" :: T.Text)\n             , \"version\" .= (\"0.0.0\" :: T.Text)\n-            ])\n+            ]"
  },
  {
    "id" : "ca39a28a-f093-45a5-921e-af5526ec4679",
    "prId" : 5201,
    "comments" : [
      {
        "id" : "a8034576-90b4-4103-acd4-0e791e186b4a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm surprised this test actually passes. There is no `DAVL.ts` in v5, there's only `DAVL/V5.ts`. Can you please investigate?",
        "createdAt" : "2020-03-26T07:04:55Z",
        "updatedAt" : "2020-03-26T07:06:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "366fda6b-d5b1-4a3a-9c2e-c00953139837",
        "parentId" : "a8034576-90b4-4103-acd4-0e791e186b4a",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Indeed, it's there : https://raw.githubusercontent.com/digital-asset/davl/51d3977be2ab22f7f4434fd4692ca2e17a7cce23/v5/daml/DAVL.daml. I can only suppose that v5 changed in more recent commits?",
        "createdAt" : "2020-03-26T09:12:52Z",
        "updatedAt" : "2020-03-26T09:12:52Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9302811b-bdc6-4995-ba1a-b52d1854c31b",
        "parentId" : "a8034576-90b4-4103-acd4-0e791e186b4a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Oh, that explains it. Thanks. Let's move to a newer version of DAVL in another PR.",
        "createdAt" : "2020-03-26T09:18:26Z",
        "updatedAt" : "2020-03-26T09:18:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e9e78f0e-4da8-4340-bb52-0acb416ec5f0",
        "parentId" : "a8034576-90b4-4103-acd4-0e791e186b4a",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "You got it. I shall take care of it.",
        "createdAt" : "2020-03-26T09:38:57Z",
        "updatedAt" : "2020-03-26T09:38:57Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "11b735477a2393f77f4bc62c52d05aa4017f59d1",
    "line" : 101,
    "diffHunk" : "@@ -174,57 +191,43 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n         buildProject []\n       withCurrentDirectory here $ do\n         step \"daml2ts...\"\n-        writePackageJson\n-        copyDirectory damlTypes \"daml-types\"\n+        setupYarnEnvironment\n         daml2tsProject [groverDar, groverDar] daml2tsDir\n-        assertFileExists (groverTsSrc </> \"Grover.ts\")\n-        assertFileExists (groverTsLib </> \"Grover.js\")\n-        assertFileExists (groverTsLib </> \"Grover.d.ts\")\n+        mapM_ (assertTsFileExists groverTs) [ \"index\", \"Grover\" ]\n \n   , testCaseSteps \"DAVL test\" $ \\step -> withTempDir $ \\here -> do\n       let daml2tsDir = here </> \"daml2ts\"\n       withCurrentDirectory here $ do\n-        copyDirectory damlTypes \"daml-types\"\n         step \"daml2ts...\"\n-        writePackageJson\n+        setupYarnEnvironment\n         callProcessSilent daml2ts $\n           [ davl </> \"davl-v4.dar\"\n           , davl </> \"davl-v5.dar\"\n           , davl </> \"davl-upgrade-v4-v5.dar\" ] ++\n           [\"-o\", daml2tsDir]\n-        assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"src\" </> \"DAVL.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"lib\" </> \"DAVL.js\")\n-        assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"lib\" </> \"DAVL.d.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"src\" </> \"DAVL.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"lib\" </> \"DAVL.js\")\n-        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"lib\" </> \"DAVL.d.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"src\" </> \"Upgrade.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"lib\" </> \"Upgrade.js\")\n-        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"lib\" </> \"Upgrade.d.ts\")\n+        mapM_ (assertTsFileExists (daml2tsDir </> \"davl-0.0.4\")) [ \"index\", \"DAVL\" ]\n+        mapM_ (assertTsFileExists (daml2tsDir </> \"davl-0.0.5\")) [ \"index\", \"DAVL\" ]"
  },
  {
    "id" : "488ae872-8e4c-46e7-91d7-0afaf9ecd07e",
    "prId" : 5201,
    "comments" : [
      {
        "id" : "4c813132-10a9-40e5-927e-665859cef7ef",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      assertFileExists (proj </> \"lib\" </> file <.> \"d.ts\")\r\n```",
        "createdAt" : "2020-03-26T07:05:38Z",
        "updatedAt" : "2020-03-26T07:06:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "11b735477a2393f77f4bc62c52d05aa4017f59d1",
    "line" : 147,
    "diffHunk" : "@@ -262,5 +265,11 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n           , \"resolutions\" .= HMS.fromList ([(\"@daml/types\", \"file:daml-types\")] :: [(T.Text, T.Text)])\n           ]\n \n-    assertFileExists :: FilePath -> IO ()\n-    assertFileExists file = doesFileExist file >>= assertBool (file ++ \" was not created\")\n+    assertTsFileExists :: FilePath -> String -> IO ()\n+    assertTsFileExists proj file = do\n+      assertFileExists (proj </> \"src\" </> file <.> \"ts\")\n+      assertFileExists (proj </> \"lib\" </> file <.> \"js\")\n+      assertFileExists (proj </> \"lib\" </> file <.> \".d.ts\")"
  },
  {
    "id" : "04852e19-1103-4f71-b0ba-fec97ac72e98",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "6cc6e187-f4a4-4252-9021-c9310946ca87",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "We should probably lift these constants to the type of the file for easy maintenance as we do in `TsCodeGenMain.hs`.",
        "createdAt" : "2020-03-25T16:42:33Z",
        "updatedAt" : "2020-03-25T16:45:52Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "709bfdfd-c68a-496b-9cad-cf6db8d7b539",
        "parentId" : "6cc6e187-f4a4-4252-9021-c9310946ca87",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree.",
        "createdAt" : "2020-03-25T17:44:38Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "951c39d9-d96c-4685-80d9-55eb6b3020eb",
        "parentId" : "6cc6e187-f4a4-4252-9021-c9310946ca87",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-25T20:08:03Z",
        "updatedAt" : "2020-03-25T20:08:03Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 155,
    "diffHunk" : "@@ -193,55 +174,65 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n         buildProject []\n       withCurrentDirectory here $ do\n         step \"daml2ts...\"\n-        setupWorkspace\n-        daml2tsProject [groverDar, groverDar] daml2tsDir (here </> \"package.json\")\n+        writePackageJson\n+        copyDirectory damlTypes \"daml-types\"\n+        daml2tsProject [groverDar, groverDar] daml2tsDir\n         assertFileExists (groverTsSrc </> \"Grover.ts\")\n+        assertFileExists (groverTsLib </> \"Grover.js\")\n+        assertFileExists (groverTsLib </> \"Grover.d.ts\")\n         assertFileExists (groverTsSrc </> \"packageId.ts\")\n+        assertFileExists (groverTsLib </> \"packageId.js\")\n+        assertFileExists (groverTsLib </> \"packageId.d.ts\")\n \n   , testCaseSteps \"DAVL test\" $ \\step -> withTempDir $ \\here -> do\n       let daml2tsDir = here </> \"daml2ts\"\n       withCurrentDirectory here $ do\n+        copyDirectory damlTypes \"daml-types\"\n         step \"daml2ts...\"\n-        -- Call daml2ts once without a 'package.json'.\n+        writePackageJson\n         callProcessSilent daml2ts $\n           [ davl </> \"davl-v4.dar\"\n           , davl </> \"davl-v5.dar\"\n           , davl </> \"davl-upgrade-v4-v5.dar\" ] ++\n           [\"-o\", daml2tsDir]\n-        assertFileExists (here </> \"package.json\")\n-        -- Overwrite the 'package.json' that daml2ts generated because\n-        -- we need to adjust module resolution for @daml/types and\n-        -- @daml/ledger.\n-        setupWorkspace\n-        -- Call daml2ts again which will this time update 'package.json'.\n-        callProcessSilent daml2ts $\n-          [ davl </> \"davl-v4.dar\"\n-          , davl </> \"davl-v5.dar\"\n-          , davl </> \"davl-upgrade-v4-v5.dar\" ] ++\n-          [\"-o\", daml2tsDir] -- There's no need to pass '-p\n-                             -- here/package.json' but we could and it would mean the same.\n         assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"src\" </> \"DAVL.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"src\" </> \"DAVL.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"src\" </> \"Upgrade.ts\")\n-        step \"yarn install...\"\n-        yarnProject [\"install\"]\n-        step \"yarn workspaces run build...\"\n-        yarnProject [\"workspaces\", \"run\", \"build\"]\n         assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"lib\" </> \"DAVL.js\")\n+        assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"lib\" </> \"DAVL.d.ts\")\n+        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"src\" </> \"DAVL.ts\")\n         assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"lib\" </> \"DAVL.js\")\n+        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"lib\" </> \"DAVL.d.ts\")\n+        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"src\" </> \"Upgrade.ts\")\n         assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"lib\" </> \"Upgrade.js\")\n-        step \"yarn workspaces run lint...\"\n-        yarnProject [\"workspaces\", \"run\", \"lint\"]\n-     ]\n+        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"lib\" </> \"Upgrade.d.ts\")\n+      step \"eslint...\"\n+      withCurrentDirectory daml2tsDir $ do\n+        pkgs <- (\\\\ [\"package.json\", \"node_modules\"]) <$> listDirectory daml2tsDir"
  },
  {
    "id" : "d632ca29-7bd5-45ac-979a-b98af8b71072",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "3f5dbfe7-126d-4d78-a0a6-50a690b648aa",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Note this.",
        "createdAt" : "2020-03-25T17:09:11Z",
        "updatedAt" : "2020-03-25T17:09:16Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "26aa93e7-e558-4147-bfd7-970be405f25c",
        "parentId" : "3f5dbfe7-126d-4d78-a0a6-50a690b648aa",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Tracking in issue https://github.com/digital-asset/daml/issues/5196",
        "createdAt" : "2020-03-25T19:21:38Z",
        "updatedAt" : "2020-03-25T19:21:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 26,
    "diffHunk" : "@@ -15,18 +15,28 @@ import qualified DA.Daml.LF.Ast.Version as LF\n import DA.Directory\n import Data.Maybe\n import Data.List.Extra\n+import qualified Data.Text.Extended as T\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.HashMap.Strict as HMS\n+import Data.Aeson\n import Test.Tasty\n import Test.Tasty.HUnit\n \n main :: IO ()\n main = do\n     setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    -- We manipulate global state via the working directory and\n+    -- the environment so running tests in parallel will cause trouble.\n+    yarnPath : damlTypesPath : args <- getArgs\n     damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n     daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n-    davl <- locateRunfiles (\"davl\" </> \"released\")\n-    yarnPath : damlTypesPath : args <- getArgs\n     yarn <- locateRunfiles (mainWorkspace </> yarnPath)\n-    damlTypes <- (</> damlTypesPath) <$> getCurrentDirectory\n+    damlTypes <- locateRunfiles (mainWorkspace </> damlTypesPath)\n+    davl <- locateRunfiles (\"davl\" </> \"released\")\n+    -- TODO (SF,2020-03-24): Factor out 'withEnv' from\n+    -- 'DA/DamlAssistant/Tests.hs' into a library function and use it here."
  },
  {
    "id" : "79459896-78d1-4c56-909b-aa9f80c198a6",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "1fe7e99b-602f-49dc-89fb-aa681bbd1176",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why not make\r\n```haskell\r\nsetupWorkspace = do\r\n  copyDirectory\r\n  writePackageJson\r\n```\r\nMaybe under the name `setupYarnEnvironment` or something similar?",
        "createdAt" : "2020-03-25T17:39:46Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "93547b37-1371-492f-8a04-0ef238611b40",
        "parentId" : "1fe7e99b-602f-49dc-89fb-aa681bbd1176",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok",
        "createdAt" : "2020-03-25T19:27:10Z",
        "updatedAt" : "2020-03-25T19:27:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 50,
    "diffHunk" : "@@ -133,47 +143,18 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n         buildProject []\n       withCurrentDirectory here $ do\n         step \"daml2ts...\"\n-        setupWorkspace\n-        (exitCode, _, err) <- readProcessWithExitCode daml2ts ([groverDar, superGroverDar] ++ [\"-o\", daml2tsDir, \"-p\", here </> \"package.json\"]) \"\"\n+        copyDirectory damlTypes \"daml-types\"\n+        writePackageJson"
  },
  {
    "id" : "19ff9887-26ca-4fdc-bf13-23163efcd044",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "5953c6b8-e2b7-4c35-bb2f-b0b24a27b878",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should also check for `index.*`. It might make sense to have a function like\r\n```haskell\r\nassertTsFileExists dir file = do\r\n  assertFileExists (dir </> \"src\" </> file <.> \"ts\")\r\n  assertFileExists (dir </> \"lib\" </> file <.> \"js\")\r\n  assertFileExists (dir </> \"lib\" </> file <.> \"d.ts\")\r\n```\r\nand call\r\n```haskell\r\nmapM_ (assertTsFileExists groverTs) [\"index\", \"Grover\", \"packageId\"]\r\n```\r\nThat would be beneficial below as well.",
        "createdAt" : "2020-03-25T17:43:42Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "79f923f5-46d3-4f02-bf7a-cf5e768982c7",
        "parentId" : "5953c6b8-e2b7-4c35-bb2f-b0b24a27b878",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "This is a very nice idea. Done.",
        "createdAt" : "2020-03-25T20:07:42Z",
        "updatedAt" : "2020-03-25T20:07:43Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 109,
    "diffHunk" : "@@ -193,55 +174,65 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n         buildProject []\n       withCurrentDirectory here $ do\n         step \"daml2ts...\"\n-        setupWorkspace\n-        daml2tsProject [groverDar, groverDar] daml2tsDir (here </> \"package.json\")\n+        writePackageJson\n+        copyDirectory damlTypes \"daml-types\"\n+        daml2tsProject [groverDar, groverDar] daml2tsDir\n         assertFileExists (groverTsSrc </> \"Grover.ts\")\n+        assertFileExists (groverTsLib </> \"Grover.js\")\n+        assertFileExists (groverTsLib </> \"Grover.d.ts\")\n         assertFileExists (groverTsSrc </> \"packageId.ts\")\n+        assertFileExists (groverTsLib </> \"packageId.js\")\n+        assertFileExists (groverTsLib </> \"packageId.d.ts\")"
  },
  {
    "id" : "106f95fc-5ea2-4222-8dcb-77669f1642bf",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "8b41b757-5e19-4861-a2ce-e78293f41cf6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We have the functionality of setting up the yarn environment for tests twice now. Here and way further up. We should factor that out, probably in a followup PR.",
        "createdAt" : "2020-03-25T17:47:33Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d896c10f-9fa0-4073-91a4-de46cf204ff3",
        "parentId" : "8b41b757-5e19-4861-a2ce-e78293f41cf6",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Well yes, we have two occasions to write json:\r\n(1)\r\n```haskell\r\n        BSL.writeFile \"package.json\" $ encode (\r\n          object\r\n            [ \"private\" .= True\r\n            , \"devDependencies\" .= pkgDevDependencies configConsts\r\n            , \"workspaces\" .= pkgs\r\n            , \"name\" .= (\"daml2ts\" :: T.Text)\r\n            , \"version\" .= (\"0.0.0\" :: T.Text)\r\n            ])\r\n```\r\n(2)\r\n```haskell\r\n    writePackageJson :: IO ()\r\n    writePackageJson = BSL.writeFile \"package.json\" $ encode packageJson\r\n      where\r\n        packageJson = object\r\n          [ \"private\" .= True\r\n          , \"workspaces\" .= ([\"daml2ts\"] :: [T.Text])\r\n          , \"resolutions\" .= HMS.fromList ([(\"@daml/types\", \"file:daml-types\")] :: [(T.Text, T.Text)])\r\n          ]\r\n```\r\nAlthough similar, they do have very different contents. Do you still feel this deserves refactoring?",
        "createdAt" : "2020-03-25T20:22:42Z",
        "updatedAt" : "2020-03-25T20:22:42Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "019a7eed-9d5c-4b2d-a7aa-c4f41f1da5e4",
        "parentId" : "8b41b757-5e19-4861-a2ce-e78293f41cf6",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Oh wait! I think you mean we do something similar in the DAML assistant too. Yes, we should definitely factor this out then. I'll put it on the stack with the 2 notes below.",
        "createdAt" : "2020-03-25T20:35:35Z",
        "updatedAt" : "2020-03-25T20:35:35Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 221,
    "diffHunk" : "@@ -278,5 +256,14 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n         [\"  - \" ++ dependency | dependency <- dependencies] ++\n         [\"build-options: [--target=\" <> LF.renderVersion ver <> \"]\" | Just ver <- [mbLfVersion]]\n \n+    writePackageJson :: IO ()\n+    writePackageJson = BSL.writeFile \"package.json\" $ encode packageJson\n+      where\n+        packageJson = object\n+          [ \"private\" .= True\n+          , \"workspaces\" .= ([\"daml2ts\"] :: [T.Text])\n+          , \"resolutions\" .= HMS.fromList ([(\"@daml/types\", \"file:daml-types\")] :: [(T.Text, T.Text)])\n+          ]"
  },
  {
    "id" : "3246901d-c27c-44e2-a428-529b3b60ac88",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "2fa7828d-649e-4505-bc3b-b083a2318be3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I have a suspicion that this only works because we write too much in the `package.json` file for every package. I'm fine with keeping it in there for now and remove it in a followup PR.",
        "createdAt" : "2020-03-25T17:48:38Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d12d11a9-d6c4-4faa-a7ba-a546a8c8c90e",
        "parentId" : "2fa7828d-649e-4505-bc3b-b083a2318be3",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I hope your suspicions are unfounded.\r\n```haskell\r\n\r\n    packageJson :: Value\r\n    packageJson = object\r\n      [ \"name\" .= (\"daml2ts\" :: T.Text)\r\n      , \"version\" .= version\r\n      , \"dependencies\" .= pkgDependencies config\r\n      , \"devDependencies\" .= pkgDevDependencies config\r\n      ]\r\n```\r\nwhere,\r\n```haskell\r\nconfigConsts :: T.Text -> ConfigConsts\r\nconfigConsts sdkVersion = ConfigConsts\r\n  { pkgDependencies = HMS.fromList\r\n      [ (NpmPackageName \"@mojotech/json-type-validation\", NpmPackageVersion \"^3.1.0\")\r\n      , (NpmPackageName \"@daml/types\", NpmPackageVersion sdkVersion)\r\n      ]\r\n  , pkgDevDependencies = HMS.fromList\r\n      [ (NpmPackageName \"typescript\", NpmPackageVersion \"~3.7.3\")\r\n      ]\r\n  , pkgScripts = HMS.fromList\r\n      [ (ScriptName \"build\", Script \"tsc\")\r\n      , (ScriptName \"lint\", Script \"eslint --ext .ts --max-warnings 0 src/\")\r\n      ]\r\n  }\r\n```\r\nLet me know!",
        "createdAt" : "2020-03-25T20:09:57Z",
        "updatedAt" : "2020-03-25T20:09:57Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "573e47b2-70e1-440a-bc72-cd05aecd2d60",
        "parentId" : "2fa7828d-649e-4505-bc3b-b083a2318be3",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Related : I do observe that the `pkgDependencies` are not required for the lint test (in `Daml2ts.hs`). Removing those in this PR.",
        "createdAt" : "2020-03-25T20:14:19Z",
        "updatedAt" : "2020-03-25T20:26:14Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "381a5be4-1ac4-4260-a356-39c4d07ed55f",
        "parentId" : "2fa7828d-649e-4505-bc3b-b083a2318be3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does that mean we can delete `pkgScripts`? Let's do that then! 🔥",
        "createdAt" : "2020-03-25T21:11:25Z",
        "updatedAt" : "2020-03-25T21:11:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eda96d37-4a59-4f58-be08-b1b16c33a142",
        "parentId" : "2fa7828d-649e-4505-bc3b-b083a2318be3",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-03-25T23:22:35Z",
        "updatedAt" : "2020-03-25T23:22:35Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 175,
    "diffHunk" : "@@ -193,55 +174,65 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n         buildProject []\n       withCurrentDirectory here $ do\n         step \"daml2ts...\"\n-        setupWorkspace\n-        daml2tsProject [groverDar, groverDar] daml2tsDir (here </> \"package.json\")\n+        writePackageJson\n+        copyDirectory damlTypes \"daml-types\"\n+        daml2tsProject [groverDar, groverDar] daml2tsDir\n         assertFileExists (groverTsSrc </> \"Grover.ts\")\n+        assertFileExists (groverTsLib </> \"Grover.js\")\n+        assertFileExists (groverTsLib </> \"Grover.d.ts\")\n         assertFileExists (groverTsSrc </> \"packageId.ts\")\n+        assertFileExists (groverTsLib </> \"packageId.js\")\n+        assertFileExists (groverTsLib </> \"packageId.d.ts\")\n \n   , testCaseSteps \"DAVL test\" $ \\step -> withTempDir $ \\here -> do\n       let daml2tsDir = here </> \"daml2ts\"\n       withCurrentDirectory here $ do\n+        copyDirectory damlTypes \"daml-types\"\n         step \"daml2ts...\"\n-        -- Call daml2ts once without a 'package.json'.\n+        writePackageJson\n         callProcessSilent daml2ts $\n           [ davl </> \"davl-v4.dar\"\n           , davl </> \"davl-v5.dar\"\n           , davl </> \"davl-upgrade-v4-v5.dar\" ] ++\n           [\"-o\", daml2tsDir]\n-        assertFileExists (here </> \"package.json\")\n-        -- Overwrite the 'package.json' that daml2ts generated because\n-        -- we need to adjust module resolution for @daml/types and\n-        -- @daml/ledger.\n-        setupWorkspace\n-        -- Call daml2ts again which will this time update 'package.json'.\n-        callProcessSilent daml2ts $\n-          [ davl </> \"davl-v4.dar\"\n-          , davl </> \"davl-v5.dar\"\n-          , davl </> \"davl-upgrade-v4-v5.dar\" ] ++\n-          [\"-o\", daml2tsDir] -- There's no need to pass '-p\n-                             -- here/package.json' but we could and it would mean the same.\n         assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"src\" </> \"DAVL.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"src\" </> \"DAVL.ts\")\n-        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"src\" </> \"Upgrade.ts\")\n-        step \"yarn install...\"\n-        yarnProject [\"install\"]\n-        step \"yarn workspaces run build...\"\n-        yarnProject [\"workspaces\", \"run\", \"build\"]\n         assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"lib\" </> \"DAVL.js\")\n+        assertFileExists (daml2tsDir </> \"davl-0.0.4\" </> \"lib\" </> \"DAVL.d.ts\")\n+        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"src\" </> \"DAVL.ts\")\n         assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"lib\" </> \"DAVL.js\")\n+        assertFileExists (daml2tsDir </> \"davl-0.0.5\" </> \"lib\" </> \"DAVL.d.ts\")\n+        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"src\" </> \"Upgrade.ts\")\n         assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"lib\" </> \"Upgrade.js\")\n-        step \"yarn workspaces run lint...\"\n-        yarnProject [\"workspaces\", \"run\", \"lint\"]\n-     ]\n+        assertFileExists (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"lib\" </> \"Upgrade.d.ts\")\n+      step \"eslint...\"\n+      withCurrentDirectory daml2tsDir $ do\n+        pkgs <- (\\\\ [\"package.json\", \"node_modules\"]) <$> listDirectory daml2tsDir\n+        BSL.writeFile \"package.json\" $ encode (\n+          object\n+            [ \"private\" .= True\n+            , \"devDependencies\" .= HMS.fromList\n+              ([ (\"eslint\", \"^6.7.2\")\n+               , (\"@typescript-eslint/eslint-plugin\", \"2.11.0\")\n+               , (\"@typescript-eslint/parser\", \"2.11.0\")\n+               ] :: [(T.Text, T.Text)]\n+              )\n+            , \"dependencies\" .= HMS.fromList\n+              ([ (\"@daml/types\", \"file:../daml-types\")\n+               , (\"@mojotech/json-type-validation\", \"^3.1.0\")\n+               ] :: [(T.Text, T.Text)])\n+            , \"workspaces\" .= pkgs\n+            , \"name\" .= (\"daml2ts\" :: T.Text)\n+            , \"version\" .= (\"0.0.0\" :: T.Text)\n+            ])\n+        callProcessSilent yarn [\"install\", \"--pure-lockfile\"]\n+        callProcessSilent yarn [\"workspaces\", \"run\", \"lint\"]\n+  ]"
  },
  {
    "id" : "c220fcaf-3385-45fa-bc51-f18220ec6877",
    "prId" : 5127,
    "comments" : [
      {
        "id" : "541e6420-0f61-4cac-ae47-884296a2a0b6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Wouldn't it make more sense to update the tests to reflect the new package ids?",
        "createdAt" : "2020-03-24T09:56:54Z",
        "updatedAt" : "2020-03-24T09:57:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d859aa2f-45c6-4e15-8667-0461b1083fd2",
        "parentId" : "541e6420-0f61-4cac-ae47-884296a2a0b6",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No, this test is verifying the error message you get if you have two packages with different names but the same package id. `daml build` won’t produce such packages anymore with DAML-LF 1.8 since the package name ends up in the metadata  so the package id is actually different. We could manually patch the `MANIFEST.MF` but that doesn’t really solve anything since `daml2ts` should switch to using the package metadata anyway.",
        "createdAt" : "2020-03-24T10:02:09Z",
        "updatedAt" : "2020-03-24T10:02:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b08bb511-7094-4896-ad32-07430bdd879d",
        "parentId" : "541e6420-0f61-4cac-ae47-884296a2a0b6",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I see. That makes sense. Thanks for the explanation.",
        "createdAt" : "2020-03-24T12:20:32Z",
        "updatedAt" : "2020-03-24T12:20:33Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "90ae2e310abee6cb956a5652e6dfda332a9c5023",
    "line" : 31,
    "diffHunk" : "@@ -94,6 +95,8 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n           groverDaml = grover </> \"daml\"\n           groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n       createDirectoryIfMissing True groverDaml\n+      -- Locked to DAML-LF 1.7 since we get different package ids due to\n+      -- package metadata in DAML-LF 1.8."
  },
  {
    "id" : "e1e9e69c-34c9-4544-86df-7aef63c87a8e",
    "prId" : 5098,
    "comments" : [
      {
        "id" : "6c79b653-d00b-4205-b67c-2fa591e3ea02",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "An integration test seems a bit overkill (as opposed to just testing a library function that parses the JSON) but given that you already wrote it let’s just keep it for now.",
        "createdAt" : "2020-03-19T18:34:37Z",
        "updatedAt" : "2020-03-19T18:34:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89312882f256fc1cc54ac6d03a1692bcf561dfb2",
    "line" : 4,
    "diffHunk" : "@@ -134,6 +134,37 @@ tests damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n         (exitCode, _, err) <- readProcessWithExitCode daml2ts ([groverDar, superGroverDar] ++ [\"-o\", daml2tsDir, \"-p\", here </> \"package.json\"]) \"\"\n         assertBool \"A different names for same package error was expected.\" (exitCode /= ExitSuccess && isJust (stripInfix \"Different names ('grover-1.0' and 'super-grover-1.0') for the same package detected\" err))\n \n+  , testCaseSteps \"Bad package.json test\" $ \\step -> withTempDir $ \\here -> do"
  },
  {
    "id" : "78ac270c-2014-4dfd-88b8-70d4a6deff02",
    "prId" : 4799,
    "comments" : [
      {
        "id" : "5e7a5ea4-b397-46c2-9b4c-53de296155c9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is impossible to review, can we please separate refactorings (e.g. factoring out the creation of `daml.yaml` which really should also go into a library since we want it from other tests) from the actual changes that here?",
        "createdAt" : "2020-03-04T08:08:48Z",
        "updatedAt" : "2020-03-04T19:19:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 252,
    "diffHunk" : "@@ -10,498 +10,238 @@ import System.Environment.Blank\n import System.Directory.Extra\n import System.Process\n import System.Exit\n-import DA.Directory\n import DA.Bazel.Runfiles\n import Data.Maybe\n import Data.List.Extra\n import Test.Tasty\n import Test.Tasty.HUnit\n \n-import SdkVersion\n-\n main :: IO ()\n main = do\n     setEnv \"TASTY_NUM_THREADS\" \"1\" True\n     damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n     daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n     davl <- locateRunfiles (\"davl\" </> \"released\")\n-    yarnPath : damlTypes : args <- getArgs\n+    yarnPath : damlTypesPath : args <- getArgs\n     yarn <- locateRunfiles (mainWorkspace </> yarnPath)\n-    withTempDir $ \\rootDir ->\n-      withArgs args (\n-        defaultMain $\n-          withResource\n-          (yarnInstall yarn damlTypes rootDir) (\\_ -> pure ())\n-          (\\_ -> tests rootDir yarn damlc daml2ts davl)\n-        )\n-\n-yarnInstall :: FilePath -> FilePath -> FilePath -> IO ()\n-yarnInstall yarn damlTypes rootDir = do\n-  let here = rootDir </> \"pre-test\"\n-  let dummyTs = here </> \"dummy-ts\"\n-  createDirectoryIfMissing True dummyTs\n-  copyDirectory damlTypes (rootDir </> \"daml-types\")\n-  writePackageConfigs dummyTs\n-  withCurrentDirectory rootDir $ yarnProject' yarn [\"install\"]\n+    damlTypes <- (</> damlTypesPath) <$> getCurrentDirectory\n+    withArgs args (defaultMain $ tests damlTypes yarn damlc daml2ts davl)\n+\n+-- It may help to keep in mind for the following tests, this quick\n+-- refresher on the layout of a simple project:\n+--   grover/\n+--     .daml/dist/grover-1.0.dar\n+--     daml.yaml\n+--     daml/\n+--       Grover.daml\n+--     package.json\n+--     daml2ts/\n+--       grover-1.0/\n+--         package.json\n+--         tsconfig.json\n+--         src/ *.ts\n+--         lib/ *.js\n+--\n+-- At one time we had tests that exhibited this idiom:\n+--   copyDirectory damlTypesDir (here </> \"daml-types\")\n+--   writeRootPackageJson // contains 'daml-types' as a workspace)\n+--   daml2tsProject [darFile] daml2tsDir (here </> \"package.json\")\n+--   yarnProject [\"install\"]\n+--   writeFile \"package.json\" .  replace \"    \\\"daml-types\\\",\" \"\" =<< readFile' \"package.json\"\n+--   yarnProject [\"workspaces\", \"run\", \"build\"]\n+-- In such tests we treat \"@daml/types\" as a yarn workspace for\n+-- dependency resolution, but don't allow it to be included in a 'yarn\n+-- workspaces run build' (which would fail to compile for lack of\n+-- 'index.ts').\n+-- After stripping these tests back to their barest minimum to be\n+-- reasonable with time taken in CI, you don't see it anymore. I leave\n+-- the variable 'damlTypes' and this comment here though to keep it in\n+-- mind should we need it again in future.\n \n tests :: FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> TestTree\n-tests rootDir yarn damlc daml2ts davl = testGroup \"daml2Ts\"\n-  [ testCase \"Pre-test yarn check\" $ do\n-      assertBool \"'node_modules' does not exist\" =<< doesDirectoryExist rootDir\n-      assertBool \"'yarn.lock' does not exist \" =<< doesFileExist (rootDir </> \"yarn.lock\")\n-\n-  , testCaseSteps \"Breathing test\" $ \\step -> do\n-      let here = rootDir </> \"breathing-test\"\n-          grover = here </> \"grover\"\n-          groverDaml = grover </> \"daml\"\n-          groverTs = here </> \"grover-ts\"\n-          groverTsSrc = groverTs </> \"src\"\n-          groverTsLib = groverTs </> \"lib\"\n-          groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n-      createDirectoryIfMissing True groverDaml\n-      createDirectoryIfMissing True groverTs\n-      writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      step \"Generating TypeScript of 'grover'...\"\n-      daml2tsProject [groverDar] (groverTs </> \"src\")\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"packageId.ts\")\n-      step \"Compiling 'grover-ts' to JavaScript... \"\n-      writePackageConfigs groverTs\n-      withCurrentDirectory groverTs $ do\n-        yarnProject [\"run\", \"build\"]\n-        assertBool \"'Grover.js' was not created.\" =<< doesFileExist (groverTsLib </> \"grover-1.0\" </> \"Grover.js\")\n-        step \"Linting 'grover-ts' ... \"\n-        yarnProject [\"run\", \"lint\"]\n-\n-  , testCaseSteps \"Dependency test\" $ \\step -> do\n-      let here = rootDir </> \"dependency-test\"\n-          grover = here </> \"grover\"\n+tests _damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n+  [\n+    testCaseSteps \"Different package, same name test\" $ \\step -> withTempDir $ \\here -> do\n+      let grover = here </> \"grover\"\n           groverDaml = grover </> \"daml\"\n+          daml2tsDir = here </> \"daml2ts\"\n           groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n       createDirectoryIfMissing True groverDaml\n-      writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      let charliesRestaurant = here </> \"charlies-restaurant\"\n-          charliesRestaurantDaml = charliesRestaurant </> \"daml\"\n-          charliesRestaurantTs = here </> \"charlies-restaurant-ts\"\n-          charliesRestaurantTsSrc = charliesRestaurantTs </> \"src\"\n-          charliesRestaurantTsLib = charliesRestaurantTs </> \"lib\"\n-          charliesRestaurantDar = charliesRestaurant </> \".daml\" </> \"dist\" </> \"charlies-restaurant-1.0.dar\"\n-      step \"Creating project 'charlies-restaurant'...\"\n-      createDirectoryIfMissing True charliesRestaurantDaml\n-      createDirectoryIfMissing True charliesRestaurantTs\n-      writeFileUTF8 (charliesRestaurantDaml </> \"CharliesRestaurant.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module CharliesRestaurant where\"\n-        , \"import Grover\"\n-        , \"template CharliesRestaurant\"\n-        , \"  with  puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice CharliesRestaurant_SummonGrover: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        create Grover with puppeteer\"\n-        ]\n-      writeFileUTF8 (charliesRestaurant </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: charlies-restaurant\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [CharliesRestaurant]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        , \"  - \" <> groverDar\n-        ]\n-      buildProject charliesRestaurant []\n-      assertBool \"'charlies-restaurant-1.0.dar' was not created.\" =<< doesFileExist charliesRestaurantDar\n-      step \"Generating TypeScript of 'charlies-restaurant'...\"\n-      daml2tsProject [charliesRestaurantDar] charliesRestaurantTsSrc\n-      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n-      assertBool \"'Grover.ts' was created.\" . not =<< doesFileExist (charliesRestaurantTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n-      removeDirectoryRecursive charliesRestaurantTs\n-      assertBool \"'charlies-restaurant-ts' should not exist.\" . not =<< doesDirectoryExist charliesRestaurantTs\n-      createDirectoryIfMissing True charliesRestaurantTs\n-      assertBool \"'charlies-restaurant-ts' should exist.\" =<< doesDirectoryExist charliesRestaurantTs\n-      daml2tsProject [charliesRestaurantDar, groverDar] charliesRestaurantTsSrc\n-      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"grover-1.0\" </> \"packageId.ts\")\n-      step \"Compiling 'charlies-restaurant-ts' to JavaScript... \"\n-      writePackageConfigs charliesRestaurantTs\n-      withCurrentDirectory charliesRestaurantTs $ do\n-        yarnProject [\"run\", \"build\"]\n-        assertBool \"'Grover.js' was not created.\" =<< doesFileExist (charliesRestaurantTsLib </> \"grover-1.0\" </> \"Grover.js\")\n-        assertBool \"'CharliesRestaurant.js' was not created.\" =<< doesFileExist (charliesRestaurantTsLib </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.js\")\n-        step \"Linting 'charlies-restaurant' ... \"\n-        yarnProject [\"run\", \"lint\"]\n-\n-  , testCaseSteps \"Package name collision test\" $ \\step -> withTempDir $ \\tmpDir -> do\n-      let grover = tmpDir </> \"grover\"\n-          groverDaml = grover </> \"daml\"\n-          groverTs = tmpDir </> \"grover-ts\"\n-          groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n-      createDirectoryIfMissing True groverDaml\n-      createDirectoryIfMissing True groverTs\n-      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      let elmo = tmpDir </> \"elmo\"\n+      withCurrentDirectory grover $ do"
  },
  {
    "id" : "9a733e37-e33d-4e38-9c1c-9c31d67f7dba",
    "prId" : 4799,
    "comments" : [
      {
        "id" : "64e62ac5-1280-4ffd-8bed-680d8d6df96e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesn’t look right, you removed the `exitFailure`at the end.",
        "createdAt" : "2020-03-04T08:28:24Z",
        "updatedAt" : "2020-03-04T19:19:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9aa5c627-1d71-47d7-a1f9-09d66045af29",
        "parentId" : "64e62ac5-1280-4ffd-8bed-680d8d6df96e",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "genuine bug. thank-you.",
        "createdAt" : "2020-03-04T13:58:52Z",
        "updatedAt" : "2020-03-04T19:19:03Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 673,
    "diffHunk" : "@@ -10,498 +10,238 @@ import System.Environment.Blank\n import System.Directory.Extra\n import System.Process\n import System.Exit\n-import DA.Directory\n import DA.Bazel.Runfiles\n import Data.Maybe\n import Data.List.Extra\n import Test.Tasty\n import Test.Tasty.HUnit\n \n-import SdkVersion\n-\n main :: IO ()\n main = do\n     setEnv \"TASTY_NUM_THREADS\" \"1\" True\n     damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n     daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n     davl <- locateRunfiles (\"davl\" </> \"released\")\n-    yarnPath : damlTypes : args <- getArgs\n+    yarnPath : damlTypesPath : args <- getArgs\n     yarn <- locateRunfiles (mainWorkspace </> yarnPath)\n-    withTempDir $ \\rootDir ->\n-      withArgs args (\n-        defaultMain $\n-          withResource\n-          (yarnInstall yarn damlTypes rootDir) (\\_ -> pure ())\n-          (\\_ -> tests rootDir yarn damlc daml2ts davl)\n-        )\n-\n-yarnInstall :: FilePath -> FilePath -> FilePath -> IO ()\n-yarnInstall yarn damlTypes rootDir = do\n-  let here = rootDir </> \"pre-test\"\n-  let dummyTs = here </> \"dummy-ts\"\n-  createDirectoryIfMissing True dummyTs\n-  copyDirectory damlTypes (rootDir </> \"daml-types\")\n-  writePackageConfigs dummyTs\n-  withCurrentDirectory rootDir $ yarnProject' yarn [\"install\"]\n+    damlTypes <- (</> damlTypesPath) <$> getCurrentDirectory\n+    withArgs args (defaultMain $ tests damlTypes yarn damlc daml2ts davl)\n+\n+-- It may help to keep in mind for the following tests, this quick\n+-- refresher on the layout of a simple project:\n+--   grover/\n+--     .daml/dist/grover-1.0.dar\n+--     daml.yaml\n+--     daml/\n+--       Grover.daml\n+--     package.json\n+--     daml2ts/\n+--       grover-1.0/\n+--         package.json\n+--         tsconfig.json\n+--         src/ *.ts\n+--         lib/ *.js\n+--\n+-- At one time we had tests that exhibited this idiom:\n+--   copyDirectory damlTypesDir (here </> \"daml-types\")\n+--   writeRootPackageJson // contains 'daml-types' as a workspace)\n+--   daml2tsProject [darFile] daml2tsDir (here </> \"package.json\")\n+--   yarnProject [\"install\"]\n+--   writeFile \"package.json\" .  replace \"    \\\"daml-types\\\",\" \"\" =<< readFile' \"package.json\"\n+--   yarnProject [\"workspaces\", \"run\", \"build\"]\n+-- In such tests we treat \"@daml/types\" as a yarn workspace for\n+-- dependency resolution, but don't allow it to be included in a 'yarn\n+-- workspaces run build' (which would fail to compile for lack of\n+-- 'index.ts').\n+-- After stripping these tests back to their barest minimum to be\n+-- reasonable with time taken in CI, you don't see it anymore. I leave\n+-- the variable 'damlTypes' and this comment here though to keep it in\n+-- mind should we need it again in future.\n \n tests :: FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> TestTree\n-tests rootDir yarn damlc daml2ts davl = testGroup \"daml2Ts\"\n-  [ testCase \"Pre-test yarn check\" $ do\n-      assertBool \"'node_modules' does not exist\" =<< doesDirectoryExist rootDir\n-      assertBool \"'yarn.lock' does not exist \" =<< doesFileExist (rootDir </> \"yarn.lock\")\n-\n-  , testCaseSteps \"Breathing test\" $ \\step -> do\n-      let here = rootDir </> \"breathing-test\"\n-          grover = here </> \"grover\"\n-          groverDaml = grover </> \"daml\"\n-          groverTs = here </> \"grover-ts\"\n-          groverTsSrc = groverTs </> \"src\"\n-          groverTsLib = groverTs </> \"lib\"\n-          groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n-      createDirectoryIfMissing True groverDaml\n-      createDirectoryIfMissing True groverTs\n-      writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      step \"Generating TypeScript of 'grover'...\"\n-      daml2tsProject [groverDar] (groverTs </> \"src\")\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"packageId.ts\")\n-      step \"Compiling 'grover-ts' to JavaScript... \"\n-      writePackageConfigs groverTs\n-      withCurrentDirectory groverTs $ do\n-        yarnProject [\"run\", \"build\"]\n-        assertBool \"'Grover.js' was not created.\" =<< doesFileExist (groverTsLib </> \"grover-1.0\" </> \"Grover.js\")\n-        step \"Linting 'grover-ts' ... \"\n-        yarnProject [\"run\", \"lint\"]\n-\n-  , testCaseSteps \"Dependency test\" $ \\step -> do\n-      let here = rootDir </> \"dependency-test\"\n-          grover = here </> \"grover\"\n+tests _damlTypes yarn damlc daml2ts davl = testGroup \"daml2ts tests\"\n+  [\n+    testCaseSteps \"Different package, same name test\" $ \\step -> withTempDir $ \\here -> do\n+      let grover = here </> \"grover\"\n           groverDaml = grover </> \"daml\"\n+          daml2tsDir = here </> \"daml2ts\"\n           groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n       createDirectoryIfMissing True groverDaml\n-      writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      let charliesRestaurant = here </> \"charlies-restaurant\"\n-          charliesRestaurantDaml = charliesRestaurant </> \"daml\"\n-          charliesRestaurantTs = here </> \"charlies-restaurant-ts\"\n-          charliesRestaurantTsSrc = charliesRestaurantTs </> \"src\"\n-          charliesRestaurantTsLib = charliesRestaurantTs </> \"lib\"\n-          charliesRestaurantDar = charliesRestaurant </> \".daml\" </> \"dist\" </> \"charlies-restaurant-1.0.dar\"\n-      step \"Creating project 'charlies-restaurant'...\"\n-      createDirectoryIfMissing True charliesRestaurantDaml\n-      createDirectoryIfMissing True charliesRestaurantTs\n-      writeFileUTF8 (charliesRestaurantDaml </> \"CharliesRestaurant.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module CharliesRestaurant where\"\n-        , \"import Grover\"\n-        , \"template CharliesRestaurant\"\n-        , \"  with  puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice CharliesRestaurant_SummonGrover: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        create Grover with puppeteer\"\n-        ]\n-      writeFileUTF8 (charliesRestaurant </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: charlies-restaurant\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [CharliesRestaurant]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        , \"  - \" <> groverDar\n-        ]\n-      buildProject charliesRestaurant []\n-      assertBool \"'charlies-restaurant-1.0.dar' was not created.\" =<< doesFileExist charliesRestaurantDar\n-      step \"Generating TypeScript of 'charlies-restaurant'...\"\n-      daml2tsProject [charliesRestaurantDar] charliesRestaurantTsSrc\n-      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n-      assertBool \"'Grover.ts' was created.\" . not =<< doesFileExist (charliesRestaurantTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n-      removeDirectoryRecursive charliesRestaurantTs\n-      assertBool \"'charlies-restaurant-ts' should not exist.\" . not =<< doesDirectoryExist charliesRestaurantTs\n-      createDirectoryIfMissing True charliesRestaurantTs\n-      assertBool \"'charlies-restaurant-ts' should exist.\" =<< doesDirectoryExist charliesRestaurantTs\n-      daml2tsProject [charliesRestaurantDar, groverDar] charliesRestaurantTsSrc\n-      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"grover-1.0\" </> \"packageId.ts\")\n-      step \"Compiling 'charlies-restaurant-ts' to JavaScript... \"\n-      writePackageConfigs charliesRestaurantTs\n-      withCurrentDirectory charliesRestaurantTs $ do\n-        yarnProject [\"run\", \"build\"]\n-        assertBool \"'Grover.js' was not created.\" =<< doesFileExist (charliesRestaurantTsLib </> \"grover-1.0\" </> \"Grover.js\")\n-        assertBool \"'CharliesRestaurant.js' was not created.\" =<< doesFileExist (charliesRestaurantTsLib </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.js\")\n-        step \"Linting 'charlies-restaurant' ... \"\n-        yarnProject [\"run\", \"lint\"]\n-\n-  , testCaseSteps \"Package name collision test\" $ \\step -> withTempDir $ \\tmpDir -> do\n-      let grover = tmpDir </> \"grover\"\n-          groverDaml = grover </> \"daml\"\n-          groverTs = tmpDir </> \"grover-ts\"\n-          groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n-      createDirectoryIfMissing True groverDaml\n-      createDirectoryIfMissing True groverTs\n-      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      let elmo = tmpDir </> \"elmo\"\n+      withCurrentDirectory grover $ do\n+        writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+          [ \"module Grover where\"\n+          , \"template Grover\"\n+          , \"  with puppeteer : Party\"\n+          , \"  where\"\n+          , \"    signatory puppeteer\"\n+          , \"    choice Grover_GoSuper: ContractId Grover\"\n+          , \"      controller puppeteer\"\n+          , \"      do\"\n+          , \"        return self\"\n+          ]\n+        writeDamlYaml \"grover\" [\"Grover\"] [\"daml-prim\", \"daml-stdlib\"]\n+        step \"daml build...\"\n+        buildProject []\n+        assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      let elmo = here </> \"elmo\"\n           elmoDaml = elmo </> \"daml\"\n-          elmoTs = tmpDir </> \"elmo-ts\"\n           elmoDar = elmo </> \".daml\" </> \"dist\" </> \"elmo-1.0.dar\"\n-      step \"Creating project 'elmo'...\"\n       createDirectoryIfMissing True elmoDaml\n-      createDirectoryIfMissing True elmoTs\n-      writeFileUTF8 (elmoDaml </> \"Elmo.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Elmo where\"\n-        , \"template Elmo\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        ]\n-      writeFileUTF8 (elmo </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\" -- Note this!\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Elmo]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject elmo [\"-o\", \".daml\" </> \"dist\" </> \"elmo-1.0.dar\"]\n-      assertBool \"elmo-1.0.dar was not created.\" =<< doesFileExist elmoDar\n-      step \"Generating TypeScript of 'grover' and 'elmo'...\"\n-      (exitCode, _, err) <- readProcessWithExitCode daml2ts ([groverDar, elmoDar] ++ [\"-o\", elmoTs]) \"\"\n-      assertBool \"A name collision error was expected.\" (exitCode /= ExitSuccess && isJust (stripInfix \"Duplicate name 'grover-1.0' for different packages detected\" err))\n-\n-  , testCaseSteps \"Different names for the same package test\" $ \\step -> withTempDir $ \\tmpDir -> do\n-      let grover = tmpDir </> \"grover\"\n+      withCurrentDirectory elmo $ do\n+        writeFileUTF8 (elmoDaml </> \"Elmo.daml\") $ unlines\n+          [ \"module Elmo where\"\n+          , \"template Elmo\"\n+          , \"  with puppeteer : Party\"\n+          , \"  where\"\n+          , \"    signatory puppeteer\"\n+          ]\n+        writeDamlYaml \"grover\" [\"Elmo\"] [\"daml-prim\", \"daml-stdlib\"]\n+        step \"daml build...\"\n+        buildProject [\"-o\", \".daml\" </> \"dist\" </> \"elmo-1.0.dar\"]\n+        assertBool \"elmo-1.0.dar was not created.\" =<< doesFileExist elmoDar\n+        step \"daml2ts...\"\n+        writeRootPackageJson\n+        (exitCode, _, err) <- readProcessWithExitCode daml2ts ([groverDar, elmoDar] ++ [\"-o\", daml2tsDir, \"-p\", here </> \"package.json\"]) \"\"\n+        assertBool \"A duplicate name for different packages error was expected.\" (exitCode /= ExitSuccess && isJust (stripInfix \"Duplicate name 'grover-1.0' for different packages detected\" err))\n+\n+  , testCaseSteps \"Different name, same package test\" $ \\step -> withTempDir $ \\here -> do\n+      let daml2tsDir = here </> \"daml2ts\"\n+      let grover = here </> \"grover\"\n           groverDaml = grover </> \"daml\"\n           groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n       createDirectoryIfMissing True groverDaml\n-      writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      let superGrover = tmpDir </> \"super-grover\"\n+      withCurrentDirectory grover $ do\n+        writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n+          [ \"module Grover where\"\n+          , \"template Grover\"\n+          , \"  with puppeteer : Party\"\n+          , \"  where\"\n+          , \"    signatory puppeteer\"\n+          , \"    choice Grover_GoSuper: ContractId Grover\"\n+          , \"      controller puppeteer\"\n+          , \"      do\"\n+          , \"        return self\"\n+          ]\n+        writeDamlYaml \"grover\" [\"Grover\"] [\"daml-prim\", \"daml-stdlib\"]\n+        step \"daml build...\"\n+        buildProject []\n+        assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      let superGrover = here </> \"super-grover\"\n           superGroverDaml = superGrover </> \"daml\"\n           superGroverDar = superGrover </> \".daml\" </> \"dist\" </> \"super-grover-1.0.dar\"\n-      step \"Creating project 'superGrover'...\"\n       createDirectoryIfMissing True superGroverDaml\n-      writeFileUTF8 (superGroverDaml </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (superGrover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: super-grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject superGrover []\n-      assertBool \"super-grover-1.0.dar was not created.\" =<< doesFileExist superGroverDar\n-      step \"Generating TypeScript of 'grover' and 'super-grover'...\"\n-      let charliesRestaurantTs = tmpDir </> \"charlies-restaurant-ts\"\n-      createDirectoryIfMissing True charliesRestaurantTs\n-      (exitCode, _, err) <- readProcessWithExitCode daml2ts ([groverDar, superGroverDar] ++ [\"-o\", charliesRestaurantTs]) \"\"\n-      assertBool \"An error resulting from the same name for different packages was expected.\" (exitCode /= ExitSuccess && isJust (stripInfix \"Different names ('grover-1.0' and 'super-grover-1.0') for the same package detected\" err))\n-\n-  , testCaseSteps \"Same package, same name test\" $ \\step -> do\n-      let here = rootDir </> \"duplicate-package-test\"\n-          grover = here </> \"grover\"\n+      withCurrentDirectory superGrover $ do\n+        writeFileUTF8 (superGroverDaml </> \"Grover.daml\") $ unlines\n+          [ \"module Grover where\"\n+          , \"template Grover\"\n+          , \"  with puppeteer : Party\"\n+          , \"  where\"\n+          , \"    signatory puppeteer\"\n+          , \"    choice Grover_GoSuper: ContractId Grover\"\n+          , \"      controller puppeteer\"\n+          , \"      do\"\n+          , \"        return self\"\n+          ]\n+        writeDamlYaml \"super-grover\" [\"Grover\"] [\"daml-prim\", \"daml-stdlib\"]\n+        step \"daml build...\"\n+        buildProject []\n+        assertBool \"super-grover-1.0.dar was not created.\" =<< doesFileExist superGroverDar\n+      withCurrentDirectory here $ do\n+        step \"daml2ts...\"\n+        writeRootPackageJson\n+        (exitCode, _, err) <- readProcessWithExitCode daml2ts ([groverDar, superGroverDar] ++ [\"-o\", daml2tsDir, \"-p\", here </> \"package.json\"]) \"\"\n+        assertBool \"A different names for same package error was expected.\" (exitCode /= ExitSuccess && isJust (stripInfix \"Different names ('grover-1.0' and 'super-grover-1.0') for the same package detected\" err))\n+\n+  , testCaseSteps \"Same package, same name test\" $ \\step -> withTempDir $ \\here -> do\n+      let grover = here </> \"grover\"\n           groverDaml = grover </> \"daml\"\n+          daml2tsDir = here </> \"daml2ts\"\n+          groverTs =  daml2tsDir </> \"grover-1.0\"\n+          groverTsSrc = groverTs </> \"src\"\n           groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n-      step \"Creating project 'grover'...\"\n       createDirectoryIfMissing True groverDaml\n-      writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Grover where\"\n-        , \"template Grover\"\n-        , \"  with puppeteer : Party\"\n-        , \"  where\"\n-        , \"    signatory puppeteer\"\n-        , \"    choice Grover_GoSuper: ContractId Grover\"\n-        , \"      controller puppeteer\"\n-        , \"      do\"\n-        , \"        return self\"\n-        ]\n-      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n-        [ \"sdk-version: \" <> sdkVersion\n-        , \"name: grover\"\n-        , \"version: \\\"1.0\\\"\"\n-        , \"source: daml\"\n-        , \"exposed-modules: [Grover]\"\n-        , \"dependencies:\"\n-        , \"  - daml-prim\"\n-        , \"  - daml-stdlib\"\n-        ]\n-      buildProject grover []\n-      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n-      step \"Generating TypeScript of 'grover' and 'grover'...\"\n-      let charliesRestaurantTs = here </> \"charlies-restaurant-ts\"\n-          charliesRestaurantTsSrc = charliesRestaurantTs </> \"src\"\n-          charliesRestaurantTsLib = charliesRestaurantTs </> \"lib\"\n-      createDirectoryIfMissing True charliesRestaurantTs\n-      daml2tsProject [groverDar, groverDar] charliesRestaurantTsSrc\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (charliesRestaurantTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n-      step \"Compiling 'charlies-restaurant-ts' to JavaScript... \"\n-      writePackageConfigs charliesRestaurantTs\n-      withCurrentDirectory charliesRestaurantTs $ do\n-        yarnProject [\"run\", \"build\"]\n-        assertBool \"'Grover.js' was not created.\" =<< doesFileExist (charliesRestaurantTsLib </> \"grover-1.0\" </> \"Grover.js\")\n-        step \"Linting 'charlies-restaurant' ... \"\n-        yarnProject [\"run\", \"lint\"]\n-\n-  , testCaseSteps \"DAVL test\" $ \\step -> do\n-      let here = rootDir </> \"davl-test\"\n-          davlTs = here </> \"davl-ts\"\n-          davlTsSrc = davlTs </> \"src\"\n-          davlTsLib = davlTs </> \"lib\"\n-      createDirectoryIfMissing True davlTs\n-      step \"Generating TypeScript of davl...\"\n-      daml2tsProject [ davl </> \"davl-v4.dar\", davl </> \"davl-v5.dar\", davl </> \"davl-upgrade-v4-v5.dar\" ] (davlTs </> \"src\")\n-      assertBool \"davl-0.0.4/DAVL.ts was not created.\" =<< doesFileExist (davlTsSrc </> \"davl-0.0.4\" </> \"DAVL.ts\")\n-      assertBool \"davl-0.0.5/DAVL.ts was not created.\" =<< doesFileExist (davlTsSrc </> \"davl-0.0.5\" </> \"DAVL.ts\")\n-      assertBool \"davl-upgrade-v4-v5-0.0.5/Upgrade.ts was not created.\" =<< doesFileExist (davlTsSrc </> \"davl-upgrade-v4-v5-0.0.5\" </> \"Upgrade.ts\")\n-      step \"Compiling 'davl-ts' to JavaScript... \"\n-      writePackageConfigs davlTs\n-      withCurrentDirectory davlTs $ do\n-        yarnProject [\"run\", \"build\"]\n-        assertBool \"'davl-0.0.4/DAVL.js' was not created.\" =<< doesFileExist (davlTsLib </> \"davl-0.0.4\" </> \"DAVL.js\")\n-        assertBool \"'davl-0.0.5/DAVL.js' was not created.\" =<< doesFileExist (davlTsLib </> \"davl-0.0.5\" </> \"DAVL.js\")\n-        assertBool \"'davl-upgrade-v4-v5-0.0.5/Upgrade.js' was not created.\" =<< doesFileExist (davlTsLib </> \"davl-upgrade-v4-v5-0.0.5\" </> \"Upgrade.js\")\n-        step \"Linting 'davl' ... \"\n-        yarnProject [\"run\", \"lint\"]\n+      withCurrentDirectory grover $ do\n+        writeFileUTF8 (groverDaml </> \"Grover.daml\") $ unlines\n+          [ \"module Grover where\"\n+          , \"template Grover\"\n+          , \"  with puppeteer : Party\"\n+          , \"  where\"\n+          , \"    signatory puppeteer\"\n+          , \"    choice Grover_GoSuper: ContractId Grover\"\n+          , \"      controller puppeteer\"\n+          , \"      do\"\n+          , \"        return self\"\n+          ]\n+        writeDamlYaml \"grover\" [\"Grover\"] [\"daml-prim\", \"daml-stdlib\"]\n+        step \"daml build...\"\n+        buildProject []\n+        assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      withCurrentDirectory here $ do\n+        step \"daml2ts...\"\n+        writeRootPackageJson\n+        daml2tsProject [groverDar, groverDar] daml2tsDir (here </> \"package.json\")\n+        assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"Grover.ts\")\n+        assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"packageId.ts\")\n+\n+  , testCaseSteps \"DAVL test\" $ \\step -> withTempDir $ \\here -> do\n+      let daml2tsDir = here </> \"daml2ts\"\n+      withCurrentDirectory here $ do\n+        step \"daml2ts...\"\n+        -- In this test, '@daml/types-0.13.51' comes from the npm\n+        -- package registry.\n+        writeRootPackageJson\n+        callProcessSilent daml2ts $\n+          [ davl </> \"davl-v4.dar\"\n+          , davl </> \"davl-v5.dar\"\n+          , davl </> \"davl-upgrade-v4-v5.dar\" ] ++\n+          [\"-o\", daml2tsDir, \"-p\", here </> \"package.json\", \"--daml-types-version\", \"0.13.51\"]\n+        assertBool \"davl-0.0.4/src/DAVL.ts was not created.\" =<< doesFileExist (daml2tsDir </> \"davl-0.0.4\" </> \"src\" </> \"DAVL.ts\")\n+        assertBool \"davl-0.0.5/src/DAVL.ts was not created.\" =<< doesFileExist (daml2tsDir </> \"davl-0.0.5\" </> \"src\" </> \"DAVL.ts\")\n+        assertBool \"davl-upgrade-v4-v5-0.0.5/src/Upgrade.ts was not created.\" =<< doesFileExist (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"src\" </> \"Upgrade.ts\")\n+        step \"yarn install...\"\n+        yarnProject [\"install\"]\n+        step \"yarn workspaces run build...\"\n+        yarnProject [\"workspaces\", \"run\", \"build\"]\n+        assertBool \"'davl-0.0.4/lib/DAVL.js' was not created.\" =<< doesFileExist (daml2tsDir </> \"davl-0.0.4\" </> \"lib\" </> \"DAVL.js\")\n+        assertBool \"'davl-0.0.5/lib/DAVL.js' was not created.\" =<< doesFileExist (daml2tsDir </> \"davl-0.0.5\" </> \"lib\" </> \"DAVL.js\")\n+        assertBool \"'davl-upgrade-v4-v5-0.0.5/lib/Upgrade.js' was not created.\" =<< doesFileExist (daml2tsDir </> \"davl-upgrade-v4-v5-0.0.5\" </> \"lib\" </> \"Upgrade.js\")\n+        step \"yarn workspaces run lint...\"\n+        yarnProject [\"workspaces\", \"run\", \"lint\"]\n      ]\n   where\n-    buildProject' :: FilePath -> FilePath -> [String] -> IO ()\n-    buildProject' damlc dir args = withCurrentDirectory dir $ callProcessSilent damlc ([\"build\"] ++ args)\n-    buildProject = buildProject' damlc\n-\n-    daml2tsProject' :: FilePath -> [FilePath] -> FilePath -> IO ()\n-    daml2tsProject' daml2ts dars outDir = callProcessSilent daml2ts $ dars ++ [\"-o\", outDir]\n-    daml2tsProject = daml2tsProject' daml2ts\n-\n-    yarnProject = yarnProject' yarn\n-\n-yarnProject' :: FilePath -> [String] -> IO ()\n-yarnProject' yarn args = callProcessSilent yarn args\n-\n--- | Only displays stdout and stderr on errors\n-callProcessSilent :: FilePath -> [String] -> IO ()\n-callProcessSilent cmd args = do\n-    (exitCode, out, err) <- readProcessWithExitCode cmd args \"\"\n-    unless (exitCode == ExitSuccess) $ do\n-      hPutStrLn stderr $ \"Failure: Command \\\"\" <> cmd <> \" \" <> unwords args <> \"\\\" exited with \" <> show exitCode\n-      hPutStrLn stderr $ unlines [\"stdout:\", out]\n-      hPutStrLn stderr $ unlines [\"stderr: \", err]\n-      exitFailure\n-\n-writePackageConfigs :: FilePath -> IO ()\n-writePackageConfigs dir = do\n-  -- e.g. /path/to/root/pre-test/dummy-ts\n-  --        tsDir = dummy-ts\n-  --        testDir = pre-test\n-  --        rootDir = /path/to/root\n-  --        workspace = pre-test/dummy-ts\n-  let tsDir = takeFileName dir\n-      testDir = takeFileName (takeDirectory dir)\n-      rootDir = takeDirectory (takeDirectory dir)\n-      workspace = testDir <> \"/\" <> tsDir\n-  writeTsConfig dir\n-  writeEsLintConfig dir\n-  writePackageJson dir\n-  -- The existence of 'package.json' at root level is critical to\n-  -- making our scheme of doing 'yarn install' just once work.\n-  writeRootPackageJson rootDir workspace\n-\n-  where\n-    writeTsConfig :: FilePath -> IO ()\n-    writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n-        [ \"{\"\n-        , \"  \\\"compilerOptions\\\": {\"\n-        , \"    \\\"target\\\": \\\"es5\\\",\"\n-        , \"    \\\"lib\\\": [\"\n-        , \"      \\\"es2015\\\"\"\n-        , \"     ],\"\n-        , \"    \\\"strict\\\": true,\"\n-        , \"    \\\"noUnusedLocals\\\": true,\"\n-        , \"    \\\"noUnusedParameters\\\": false,\"\n-        , \"    \\\"noImplicitReturns\\\": true,\"\n-        , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n-        , \"    \\\"outDir\\\": \\\"lib\\\",\"\n-        , \"    \\\"module\\\": \\\"commonjs\\\",\"\n-        , \"    \\\"declaration\\\": true,\"\n-        , \"    \\\"sourceMap\\\": true\"\n-        , \"    },\"\n-        , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n-        , \"}\"\n-        ]\n-\n-    writeEsLintConfig :: FilePath -> IO ()\n-    writeEsLintConfig dir = writeFileUTF8 (dir </> \".eslintrc.json\") $ unlines\n-      [ \"{\"\n-      , \"  \\\"parser\\\": \\\"@typescript-eslint/parser\\\",\"\n-      , \"  \\\"parserOptions\\\": {\"\n-      , \"    \\\"project\\\": \\\"./tsconfig.json\\\"\"\n-      , \"  },\"\n-      , \"  \\\"plugins\\\": [\"\n-      , \"    \\\"@typescript-eslint\\\"\"\n-      , \"  ],\"\n-      , \"  \\\"extends\\\": [\"\n-      , \"    \\\"eslint:recommended\\\",\"\n-      , \"    \\\"plugin:@typescript-eslint/eslint-recommended\\\",\"\n-      , \"    \\\"plugin:@typescript-eslint/recommended\\\",\"\n-      , \"    \\\"plugin:@typescript-eslint/recommended-requiring-type-checking\\\"\"\n-      , \"  ],\"\n-      , \"  \\\"rules\\\": {\"\n-      , \"    \\\"@typescript-eslint/explicit-function-return-type\\\": \\\"off\\\",\"\n-      , \"    \\\"@typescript-eslint/no-inferrable-types\\\": \\\"off\\\"\"\n-      , \"  }\"\n-      , \"}\"\n-      ]\n-\n-    writePackageJson :: FilePath -> IO ()\n-    writePackageJson dir = let name = takeFileName dir in writeFileUTF8 (dir </> \"package.json\") $ unlines\n-            [\"{\"\n-            , \"  \\\"private\\\": true,\"\n-            , \"  \\\"name\\\": \\\"@daml2ts/\" <> name <> \"\\\",\"\n-            , \"  \\\"version\\\": \\\"\" <> sdkVersion <> \"\\\",\"\n-            , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n-            , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n-            , \"  \\\"dependencies\\\": {\"\n-            , \"    \\\"@daml/types\\\": \\\"\" <> sdkVersion <> \"\\\",\"\n-            , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n-            , \"  },\"\n-            , \"  \\\"scripts\\\": {\"\n-            , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n-            , \"    \\\"lint\\\": \\\"eslint --ext .ts src/ --max-warnings 0\\\"\"\n-            , \"  },\"\n-            , \"  \\\"devDependencies\\\": {\"\n-            , \"    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^2.11.0\\\",\"\n-            , \"    \\\"@typescript-eslint/parser\\\": \\\"^2.11.0\\\",\"\n-            , \"    \\\"eslint\\\": \\\"^6.7.2\\\",\"\n-            , \"    \\\"typescript\\\": \\\"~3.7.3\\\"\"\n-            , \"  }\"\n-            , \"}\"\n-            ]\n-\n-    writeRootPackageJson :: FilePath -> String -> IO ()\n-    writeRootPackageJson rootDir workspace =\n-       writeFileUTF8 (rootDir </> \"package.json\") $ unlines\n+    buildProject :: [String] -> IO ()\n+    buildProject args = callProcessSilent damlc ([\"build\"] ++ args)\n+\n+    daml2tsProject :: [FilePath] -> FilePath -> FilePath -> IO ()\n+    daml2tsProject dars outDir packageJson = callProcessSilent daml2ts $ dars ++ [\"-o\", outDir, \"-p\", packageJson]\n+\n+    yarnProject :: [String] -> IO ()\n+    yarnProject args = callProcessSilent yarn args\n+\n+    callProcessSilent :: FilePath -> [String] -> IO ()\n+    callProcessSilent cmd args = do\n+        (exitCode, out, err) <- readProcessWithExitCode cmd args \"\"\n+        unless (exitCode == ExitSuccess) $ do\n+          hPutStrLn stderr $ \"Failure: Command \\\"\" <> cmd <> \" \" <> unwords args <> \"\\\" exited with \" <> show exitCode\n+          hPutStrLn stderr $ unlines [\"stdout:\", out]\n+          hPutStrLn stderr $ unlines [\"stderr: \", err]"
  },
  {
    "id" : "4692c858-7bdd-4dc4-92b0-70aa7a17471d",
    "prId" : 4688,
    "comments" : [
      {
        "id" : "f7029483-4538-43d1-a021-8aeaf368a0ac",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We already have `copyDirectory` in `DA.Daml.Project.Util` which contrary this function should work properly if the directory structure is nested (presumably that’s not the case now but that’s easy to change accidentally). `daml-project-config` is a bit of a weird place for it to live so feel free to move it to `da-hs-base` or something.",
        "createdAt" : "2020-02-25T13:09:04Z",
        "updatedAt" : "2020-02-25T13:29:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "abec9658-b71b-466d-96bc-cf1cb766578f",
        "parentId" : "f7029483-4538-43d1-a021-8aeaf368a0ac",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@shayne-fletcher Can you please take care of that in a follow-up PR?",
        "createdAt" : "2020-02-25T13:11:14Z",
        "updatedAt" : "2020-02-25T13:29:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e7d12ff7-783f-49d9-95cf-b5017916c376",
        "parentId" : "f7029483-4538-43d1-a021-8aeaf368a0ac",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "@hurryabit Sure thing.",
        "createdAt" : "2020-02-25T13:18:41Z",
        "updatedAt" : "2020-02-25T13:29:12Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4dca90686a128314706aebbfc49167494289ec4a",
    "line" : 27,
    "diffHunk" : "@@ -24,23 +24,29 @@ main = do\n     damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n     daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n     davl <- locateRunfiles (\"davl\" </> \"released\")\n-    yarnPath : args <- getArgs\n+    yarnPath : damlTypes : args <- getArgs\n     yarn <- locateRunfiles (mainWorkspace </> yarnPath)\n     withTempDir $ \\rootDir ->\n       withArgs args (\n         defaultMain $\n           withResource\n-          (yarnInstall yarn rootDir) (\\_ -> pure ())\n+          (yarnInstall yarn damlTypes rootDir) (\\_ -> pure ())\n           (\\_ -> tests rootDir yarn damlc daml2ts davl)\n         )\n \n-yarnInstall :: FilePath -> FilePath -> IO ()\n-yarnInstall yarn rootDir = do\n+yarnInstall :: FilePath -> FilePath -> FilePath -> IO ()\n+yarnInstall yarn damlTypes rootDir = do\n   let here = rootDir </> \"pre-test\"\n   let dummyTs = here </> \"dummy-ts\"\n   createDirectoryIfMissing True dummyTs\n+  copyDirectory damlTypes (rootDir </> \"daml-types\")\n   writePackageConfigs dummyTs\n   withCurrentDirectory rootDir $ yarnProject' yarn [\"install\"]\n+  where\n+    copyDirectory from to = do"
  },
  {
    "id" : "51e71d9c-a6c6-4a7a-a5bc-1af06df248cd",
    "prId" : 4676,
    "comments" : [
      {
        "id" : "15c311bf-9b47-4a9e-b862-25103d60b883",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Ultimately, we need to depend on `0.0.0-SNAPSHOT` here and include the library in a way similar to the `build-and-lint` test.",
        "createdAt" : "2020-02-24T18:01:29Z",
        "updatedAt" : "2020-02-24T18:51:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "84fa2322-8529-4eef-b42b-35bacd4968b6",
        "parentId" : "15c311bf-9b47-4a9e-b862-25103d60b883",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Not sure about this. Let's discuss.",
        "createdAt" : "2020-02-24T18:53:23Z",
        "updatedAt" : "2020-02-24T18:53:23Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a7ac867-553a-4dc8-b936-a2daf9ccd560",
        "parentId" : "15c311bf-9b47-4a9e-b862-25103d60b883",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "If that discussion hasn't happened yet, I'd like to participate.",
        "createdAt" : "2020-02-25T09:09:59Z",
        "updatedAt" : "2020-02-25T09:09:59Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2dff4188-7125-42d2-8468-aa6d059bb5d1",
        "parentId" : "15c311bf-9b47-4a9e-b862-25103d60b883",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't there's a lot to discuss. Here's my proposal on how to fix the issue: https://github.com/digital-asset/daml/pull/4688",
        "createdAt" : "2020-02-25T13:09:26Z",
        "updatedAt" : "2020-02-25T13:09:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df2dd894a6a254c34571bf3d97b86e3f39121069",
    "line" : 423,
    "diffHunk" : "@@ -386,83 +399,102 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n \n-writeTsConfig :: FilePath -> IO ()\n-writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n-    [ \"{\"\n-    , \"  \\\"compilerOptions\\\": {\"\n-    , \"    \\\"target\\\": \\\"es5\\\",\"\n-    , \"    \\\"lib\\\": [\"\n-    , \"      \\\"dom\\\",\"\n-    , \"      \\\"es2015\\\"\"\n-    , \"     ],\"\n-    , \"    \\\"strict\\\": true,\"\n-    , \"    \\\"noUnusedLocals\\\": true,\"\n-    , \"    \\\"noUnusedParameters\\\": false,\"\n-    , \"    \\\"noImplicitReturns\\\": true,\"\n-    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n-    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n-    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n-    , \"    \\\"declaration\\\": true,\"\n-    , \"    \\\"sourceMap\\\": true\"\n-    , \"    },\"\n-    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n-    , \"}\"\n-    ]\n+writePackageConfigs :: FilePath -> IO ()\n+writePackageConfigs dir = do\n+  -- e.g. /path/to/root/pre-test/dummy-ts\n+  --        tsDir = dummy-ts\n+  --        testDir = pre-test\n+  --        rootDir = /path/to/root\n+  --        workspace = pre-test/dummy-ts\n+  let tsDir = takeFileName dir\n+      testDir = takeFileName (takeDirectory dir)\n+      rootDir = takeDirectory (takeDirectory dir)\n+      workspace = testDir <> \"/\" <> tsDir\n+  writeTsConfig dir\n+  writeEsLintConfig dir\n+  writePackageJson dir\n+  -- The existence of 'package.json' at root level is critical to\n+  -- making our scheme of doing 'yarn install' just once work.\n+  writeRootPackageJson rootDir workspace\n \n-writePackageJson :: FilePath -> String -> IO ()\n-writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n-        [\"{\"\n-        , \"  \\\"private\\\": true,\"\n-        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n-        , \"  \\\"version\\\": \\\"0.13.53\\\",\"\n-        , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n-        , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n-        , \"  \\\"dependencies\\\": {\"\n-        , \"    \\\"@daml/types\\\": \\\"0.13.53\\\",\"\n-        , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n-        , \"  },\"\n-        , \"  \\\"scripts\\\": {\"\n-        , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n-        , \"    \\\"build:watch\\\": \\\"tsc --build --watch\\\",\"\n-        , \"    \\\"test\\\": \\\"true\\\",\"\n-        , \"    \\\"lint\\\": \\\"eslint --ext .js,.ts src/ --max-warnings 0\\\"\"\n-        , \"  },\"\n-        , \"  \\\"eslintConfig\\\": {\"\n-        , \"    \\\"extends\\\": [\"\n-        , \"      \\\"eslint:recommended\\\",\"\n-        , \"      \\\"plugin:@typescript-eslint/eslint-recommended\\\",\"\n-        , \"      \\\"plugin:@typescript-eslint/recommended\\\",\"\n-        , \"      \\\"plugin:@typescript-eslint/recommended-requiring-type-checking\\\"\"\n-        , \"    ],\"\n-        , \"    \\\"parser\\\": \\\"@typescript-eslint/parser\\\",\"\n-        , \"    \\\"parserOptions\\\": {\"\n-        , \"      \\\"project\\\": \\\"./tsconfig.json\\\"\"\n+  where\n+    writeTsConfig :: FilePath -> IO ()\n+    writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+        [ \"{\"\n+        , \"  \\\"compilerOptions\\\": {\"\n+        , \"    \\\"target\\\": \\\"es5\\\",\"\n+        , \"    \\\"lib\\\": [\"\n+        , \"      \\\"es2015\\\"\"\n+        , \"     ],\"\n+        , \"    \\\"strict\\\": true,\"\n+        , \"    \\\"noUnusedLocals\\\": true,\"\n+        , \"    \\\"noUnusedParameters\\\": false,\"\n+        , \"    \\\"noImplicitReturns\\\": true,\"\n+        , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+        , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+        , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+        , \"    \\\"declaration\\\": true,\"\n+        , \"    \\\"sourceMap\\\": true\"\n         , \"    },\"\n-        , \"    \\\"plugins\\\": [\"\n-        , \"      \\\"@typescript-eslint\\\"\"\n-        , \"    ],\"\n-        , \"    \\\"rules\\\": {\"\n-        , \"      \\\"@typescript-eslint/no-floating-promises\\\": \\\"error\\\",\"\n-        , \"      \\\"@typescript-eslint/explicit-function-return-type\\\": \\\"off\\\",\"\n-        , \"      \\\"@typescript-eslint/no-inferrable-types\\\": \\\"off\\\"\"\n-        , \"    }\"\n-        , \"  },\"\n-        , \"  \\\"devDependencies\\\": {\"\n-        , \"    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^2.11.0\\\",\"\n-        , \"    \\\"@typescript-eslint/parser\\\": \\\"^2.11.0\\\",\"\n-        , \"    \\\"eslint\\\": \\\"^6.7.2\\\",\"\n-        , \"    \\\"typescript\\\": \\\"~3.7.3\\\"\"\n-        , \"  }\"\n+        , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n         , \"}\"\n         ]\n \n-writeRootPackageJson :: FilePath -> String -> IO ()\n-writeRootPackageJson rootDir workspace =\n-   writeFileUTF8 (rootDir </> \"package.json\") $ unlines\n-     [ \"{\"\n-     , \"  \\\"private\\\": true,\"\n-     , \"  \\\"workspaces\\\": [\"\n-     , \"    \\\"\" <> workspace <> \"\\\"\"\n-     , \"  ]\"\n-     , \"}\"\n-     ]\n+    writeEsLintConfig :: FilePath -> IO ()\n+    writeEsLintConfig dir = writeFileUTF8 (dir </> \".eslintrc.json\") $ unlines\n+      [ \"{\"\n+      , \"  \\\"parser\\\": \\\"@typescript-eslint/parser\\\",\"\n+      , \"  \\\"parserOptions\\\": {\"\n+      , \"    \\\"project\\\": \\\"./tsconfig.json\\\"\"\n+      , \"  },\"\n+      , \"  \\\"plugins\\\": [\"\n+      , \"    \\\"@typescript-eslint\\\"\"\n+      , \"  ],\"\n+      , \"  \\\"extends\\\": [\"\n+      , \"    \\\"eslint:recommended\\\",\"\n+      , \"    \\\"plugin:@typescript-eslint/eslint-recommended\\\",\"\n+      , \"    \\\"plugin:@typescript-eslint/recommended\\\",\"\n+      , \"    \\\"plugin:@typescript-eslint/recommended-requiring-type-checking\\\"\"\n+      , \"  ],\"\n+      , \"  \\\"rules\\\": {\"\n+      , \"    \\\"@typescript-eslint/explicit-function-return-type\\\": \\\"off\\\",\"\n+      , \"    \\\"@typescript-eslint/no-inferrable-types\\\": \\\"off\\\"\"\n+      , \"  }\"\n+      , \"}\"\n+      ]\n+\n+    writePackageJson :: FilePath -> IO ()\n+    writePackageJson dir = let name = takeFileName dir in writeFileUTF8 (dir </> \"package.json\") $ unlines\n+            [\"{\"\n+            , \"  \\\"private\\\": true,\"\n+            , \"  \\\"name\\\": \\\"@daml2ts/\" <> name <> \"\\\",\"\n+            , \"  \\\"version\\\": \\\"\" <> sdkVersion <> \"\\\",\"\n+            , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n+            , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n+            , \"  \\\"dependencies\\\": {\"\n+            , \"    \\\"@daml/types\\\": \\\"\" <> sdkVersion <> \"\\\",\""
  },
  {
    "id" : "eab65e15-eee9-4b60-ad2a-9684244cc5e0",
    "prId" : 4676,
    "comments" : [
      {
        "id" : "b8e6a586-5e1b-49d5-9caa-90bc9b3206c4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suggest we do something like\r\n```haskell\r\nwithCurrentDirectory groverTs $ do\r\n  yarnProject [\"run\", \"build\"]\r\n  assertBool ...\r\n  step ...\r\n  yarnProject [\"run\", \"lint\"]\r\n```\r\nto remove some duplication.",
        "createdAt" : "2020-02-24T18:05:52Z",
        "updatedAt" : "2020-02-24T18:51:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3a19d64f-a452-4dd1-9675-30d09f7e0a4a",
        "parentId" : "b8e6a586-5e1b-49d5-9caa-90bc9b3206c4",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yep, ok!",
        "createdAt" : "2020-02-24T18:47:59Z",
        "updatedAt" : "2020-02-24T18:51:53Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "df2dd894a6a254c34571bf3d97b86e3f39121069",
    "line" : null,
    "diffHunk" : "@@ -85,22 +85,23 @@ tests rootDir yarn damlc daml2ts davl = testGroup \"daml2Ts\"\n       assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n       step \"Generating TypeScript of 'grover'...\"\n       daml2tsProject [groverDar] (groverTs </> \"src\")\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"src\" </> \"grover-1.0\" </> \"Grover.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"src\" </> \"grover-1.0\" </> \"packageId.ts\")\n+      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"packageId.ts\")\n       step \"Compiling 'grover-ts' to JavaScript... \"\n-      writeTsConfig groverTs\n-      writePackageJson groverTs \"@breathing-test/grover\"\n-      writeRootPackageJson rootDir \"breathing-test/grover-ts\"\n-      withCurrentDirectory rootDir $ yarnProject [\"workspaces\", \"run\", \"build\"]\n-      assertBool \"'Grover.js' was not created.\" =<< doesFileExist (groverTs </> \"lib\" </> \"grover-1.0\" </> \"Grover.js\")\n+      writePackageConfigs groverTs\n+      withCurrentDirectory groverTs $ yarnProject [\"run\", \"build\"]"
  },
  {
    "id" : "d74b7f10-a7d5-40b6-b15a-011f05a8c021",
    "prId" : 4676,
    "comments" : [
      {
        "id" : "e1e8c81d-72b8-404b-bc51-1a57c81392b6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What do you think about putting the calls to `step` and `yarnProject` into a function `yarnLint`. This combination appears quite a few times.",
        "createdAt" : "2020-02-24T18:06:38Z",
        "updatedAt" : "2020-02-24T18:51:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4d1e95e3-20f1-4dea-8074-97c83886d2aa",
        "parentId" : "e1e8c81d-72b8-404b-bc51-1a57c81392b6",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I think it's ameliorated by the earlier suggestion of making better use of `withCurrentDirectory`.",
        "createdAt" : "2020-02-24T18:48:49Z",
        "updatedAt" : "2020-02-24T18:51:53Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "df2dd894a6a254c34571bf3d97b86e3f39121069",
    "line" : null,
    "diffHunk" : "@@ -85,22 +85,23 @@ tests rootDir yarn damlc daml2ts davl = testGroup \"daml2Ts\"\n       assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n       step \"Generating TypeScript of 'grover'...\"\n       daml2tsProject [groverDar] (groverTs </> \"src\")\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"src\" </> \"grover-1.0\" </> \"Grover.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"src\" </> \"grover-1.0\" </> \"packageId.ts\")\n+      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTsSrc </> \"grover-1.0\" </> \"packageId.ts\")\n       step \"Compiling 'grover-ts' to JavaScript... \"\n-      writeTsConfig groverTs\n-      writePackageJson groverTs \"@breathing-test/grover\"\n-      writeRootPackageJson rootDir \"breathing-test/grover-ts\"\n-      withCurrentDirectory rootDir $ yarnProject [\"workspaces\", \"run\", \"build\"]\n-      assertBool \"'Grover.js' was not created.\" =<< doesFileExist (groverTs </> \"lib\" </> \"grover-1.0\" </> \"Grover.js\")\n+      writePackageConfigs groverTs\n+      withCurrentDirectory groverTs $ yarnProject [\"run\", \"build\"]\n+      assertBool \"'Grover.js' was not created.\" =<< doesFileExist (groverTsLib </> \"grover-1.0\" </> \"Grover.js\")\n+      step \"Linting 'grover-ts' ... \"\n+      withCurrentDirectory groverTs $ yarnProject [\"run\", \"lint\"]"
  },
  {
    "id" : "fe9f4fec-34fb-4182-94ee-4edf072c31dc",
    "prId" : 4676,
    "comments" : [
      {
        "id" : "16d4301a-2751-4fa6-b967-22c1203dec80",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n            , \"    \\\"lint\\\": \\\"eslint --ext .ts src/ --max-warnings 0\\\"\"\r\n```\r\nWe don't want to lint the `.js` files. We might need to call `yarn lint` before `yarn build` in order to avoid `yarn lint` lint falling over the `.js` files in `lib/`.",
        "createdAt" : "2020-02-24T18:08:51Z",
        "updatedAt" : "2020-02-24T18:51:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "45c0a40b-a54b-49d4-94b5-fd583e881a2e",
        "parentId" : "16d4301a-2751-4fa6-b967-22c1203dec80",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Removing the `.js`.",
        "createdAt" : "2020-02-24T18:49:46Z",
        "updatedAt" : "2020-02-24T18:51:53Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "df2dd894a6a254c34571bf3d97b86e3f39121069",
    "line" : null,
    "diffHunk" : "@@ -386,83 +399,102 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n \n-writeTsConfig :: FilePath -> IO ()\n-writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n-    [ \"{\"\n-    , \"  \\\"compilerOptions\\\": {\"\n-    , \"    \\\"target\\\": \\\"es5\\\",\"\n-    , \"    \\\"lib\\\": [\"\n-    , \"      \\\"dom\\\",\"\n-    , \"      \\\"es2015\\\"\"\n-    , \"     ],\"\n-    , \"    \\\"strict\\\": true,\"\n-    , \"    \\\"noUnusedLocals\\\": true,\"\n-    , \"    \\\"noUnusedParameters\\\": false,\"\n-    , \"    \\\"noImplicitReturns\\\": true,\"\n-    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n-    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n-    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n-    , \"    \\\"declaration\\\": true,\"\n-    , \"    \\\"sourceMap\\\": true\"\n-    , \"    },\"\n-    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n-    , \"}\"\n-    ]\n+writePackageConfigs :: FilePath -> IO ()\n+writePackageConfigs dir = do\n+  -- e.g. /path/to/root/pre-test/dummy-ts\n+  --        tsDir = dummy-ts\n+  --        testDir = pre-test\n+  --        rootDir = /path/to/root\n+  --        workspace = pre-test/dummy-ts\n+  let tsDir = takeFileName dir\n+      testDir = takeFileName (takeDirectory dir)\n+      rootDir = takeDirectory (takeDirectory dir)\n+      workspace = testDir <> \"/\" <> tsDir\n+  writeTsConfig dir\n+  writeEsLintConfig dir\n+  writePackageJson dir\n+  -- The existence of 'package.json' at root level is critical to\n+  -- making our scheme of doing 'yarn install' just once work.\n+  writeRootPackageJson rootDir workspace\n \n-writePackageJson :: FilePath -> String -> IO ()\n-writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n-        [\"{\"\n-        , \"  \\\"private\\\": true,\"\n-        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n-        , \"  \\\"version\\\": \\\"0.13.53\\\",\"\n-        , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n-        , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n-        , \"  \\\"dependencies\\\": {\"\n-        , \"    \\\"@daml/types\\\": \\\"0.13.53\\\",\"\n-        , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n-        , \"  },\"\n-        , \"  \\\"scripts\\\": {\"\n-        , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n-        , \"    \\\"build:watch\\\": \\\"tsc --build --watch\\\",\"\n-        , \"    \\\"test\\\": \\\"true\\\",\"\n-        , \"    \\\"lint\\\": \\\"eslint --ext .js,.ts src/ --max-warnings 0\\\"\"\n-        , \"  },\"\n-        , \"  \\\"eslintConfig\\\": {\"\n-        , \"    \\\"extends\\\": [\"\n-        , \"      \\\"eslint:recommended\\\",\"\n-        , \"      \\\"plugin:@typescript-eslint/eslint-recommended\\\",\"\n-        , \"      \\\"plugin:@typescript-eslint/recommended\\\",\"\n-        , \"      \\\"plugin:@typescript-eslint/recommended-requiring-type-checking\\\"\"\n-        , \"    ],\"\n-        , \"    \\\"parser\\\": \\\"@typescript-eslint/parser\\\",\"\n-        , \"    \\\"parserOptions\\\": {\"\n-        , \"      \\\"project\\\": \\\"./tsconfig.json\\\"\"\n+  where\n+    writeTsConfig :: FilePath -> IO ()\n+    writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+        [ \"{\"\n+        , \"  \\\"compilerOptions\\\": {\"\n+        , \"    \\\"target\\\": \\\"es5\\\",\"\n+        , \"    \\\"lib\\\": [\"\n+        , \"      \\\"es2015\\\"\"\n+        , \"     ],\"\n+        , \"    \\\"strict\\\": true,\"\n+        , \"    \\\"noUnusedLocals\\\": true,\"\n+        , \"    \\\"noUnusedParameters\\\": false,\"\n+        , \"    \\\"noImplicitReturns\\\": true,\"\n+        , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+        , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+        , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+        , \"    \\\"declaration\\\": true,\"\n+        , \"    \\\"sourceMap\\\": true\"\n         , \"    },\"\n-        , \"    \\\"plugins\\\": [\"\n-        , \"      \\\"@typescript-eslint\\\"\"\n-        , \"    ],\"\n-        , \"    \\\"rules\\\": {\"\n-        , \"      \\\"@typescript-eslint/no-floating-promises\\\": \\\"error\\\",\"\n-        , \"      \\\"@typescript-eslint/explicit-function-return-type\\\": \\\"off\\\",\"\n-        , \"      \\\"@typescript-eslint/no-inferrable-types\\\": \\\"off\\\"\"\n-        , \"    }\"\n-        , \"  },\"\n-        , \"  \\\"devDependencies\\\": {\"\n-        , \"    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^2.11.0\\\",\"\n-        , \"    \\\"@typescript-eslint/parser\\\": \\\"^2.11.0\\\",\"\n-        , \"    \\\"eslint\\\": \\\"^6.7.2\\\",\"\n-        , \"    \\\"typescript\\\": \\\"~3.7.3\\\"\"\n-        , \"  }\"\n+        , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n         , \"}\"\n         ]\n \n-writeRootPackageJson :: FilePath -> String -> IO ()\n-writeRootPackageJson rootDir workspace =\n-   writeFileUTF8 (rootDir </> \"package.json\") $ unlines\n-     [ \"{\"\n-     , \"  \\\"private\\\": true,\"\n-     , \"  \\\"workspaces\\\": [\"\n-     , \"    \\\"\" <> workspace <> \"\\\"\"\n-     , \"  ]\"\n-     , \"}\"\n-     ]\n+    writeEsLintConfig :: FilePath -> IO ()\n+    writeEsLintConfig dir = writeFileUTF8 (dir </> \".eslintrc.json\") $ unlines\n+      [ \"{\"\n+      , \"  \\\"parser\\\": \\\"@typescript-eslint/parser\\\",\"\n+      , \"  \\\"parserOptions\\\": {\"\n+      , \"    \\\"project\\\": \\\"./tsconfig.json\\\"\"\n+      , \"  },\"\n+      , \"  \\\"plugins\\\": [\"\n+      , \"    \\\"@typescript-eslint\\\"\"\n+      , \"  ],\"\n+      , \"  \\\"extends\\\": [\"\n+      , \"    \\\"eslint:recommended\\\",\"\n+      , \"    \\\"plugin:@typescript-eslint/eslint-recommended\\\",\"\n+      , \"    \\\"plugin:@typescript-eslint/recommended\\\",\"\n+      , \"    \\\"plugin:@typescript-eslint/recommended-requiring-type-checking\\\"\"\n+      , \"  ],\"\n+      , \"  \\\"rules\\\": {\"\n+      , \"    \\\"@typescript-eslint/explicit-function-return-type\\\": \\\"off\\\",\"\n+      , \"    \\\"@typescript-eslint/no-inferrable-types\\\": \\\"off\\\"\"\n+      , \"  }\"\n+      , \"}\"\n+      ]\n+\n+    writePackageJson :: FilePath -> IO ()\n+    writePackageJson dir = let name = takeFileName dir in writeFileUTF8 (dir </> \"package.json\") $ unlines\n+            [\"{\"\n+            , \"  \\\"private\\\": true,\"\n+            , \"  \\\"name\\\": \\\"@daml2ts/\" <> name <> \"\\\",\"\n+            , \"  \\\"version\\\": \\\"\" <> sdkVersion <> \"\\\",\"\n+            , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n+            , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n+            , \"  \\\"dependencies\\\": {\"\n+            , \"    \\\"@daml/types\\\": \\\"\" <> sdkVersion <> \"\\\",\"\n+            , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n+            , \"  },\"\n+            , \"  \\\"scripts\\\": {\"\n+            , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n+            , \"    \\\"lint\\\": \\\"eslint --ext .js,.ts src/ --max-warnings 0\\\"\""
  },
  {
    "id" : "0c008413-826f-4927-93f2-4007058a33ae",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "6f1a3279-59c4-4395-a06a-a5465b422d8b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why not use one temp dir per test? seems easier to manage and avoids accidentally ending up with colliding directories",
        "createdAt" : "2020-02-21T18:22:51Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "184f262f-6e8d-49bc-b821-e609d555edf7",
        "parentId" : "6f1a3279-59c4-4395-a06a-a5465b422d8b",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "It was phrased earlier as one temp dir per test but it's like this now to cache yarn dependencies between tests by sticking everything under a common root.",
        "createdAt" : "2020-02-21T18:32:53Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d4ada1a0-35b8-4a75-b5df-1eb1ad09af2e",
        "parentId" : "6f1a3279-59c4-4395-a06a-a5465b422d8b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense, maybe add a comment?",
        "createdAt" : "2020-02-21T18:39:40Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2757eadc-6dd0-44ef-b32b-95a400cfbdab",
        "parentId" : "6f1a3279-59c4-4395-a06a-a5465b422d8b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You could also move the creation of the tempdir in the tasty resource as I suggested below.",
        "createdAt" : "2020-02-21T18:40:11Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : null,
    "diffHunk" : "@@ -24,13 +24,17 @@ main = do\n     damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n     daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n     davl <- locateRunfiles (\"davl\" </> \"released\")\n-    defaultMain $ tests damlc daml2ts davl\n+    yarnPath : args <- getArgs\n+    yarn <- locateRunfiles (mainWorkspace </> yarnPath)\n+    withTempDir $ \\rootDir -> do"
  },
  {
    "id" : "4f2bb01e-e0e5-4a9b-a699-5c726f15b867",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "204f9682-d226-4c50-8c00-690a5d26dfd8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we need all of this? I would expect that `devDependencies` don’t matter and probably a lot of the scripts also don’t matter.",
        "createdAt" : "2020-02-21T18:23:41Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "db780478-e110-4a30-afd7-3c50e92d009f",
        "parentId" : "204f9682-d226-4c50-8c00-690a5d26dfd8",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I haven't attempted to trim it. I just followed Martin's suggestion and imported it wholesale from davl",
        "createdAt" : "2020-02-21T18:33:47Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9db1ad1b-f48e-46a7-878c-e1258661f876",
        "parentId" : "204f9682-d226-4c50-8c00-690a5d26dfd8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Sounds reasonable, then let’s keep it.",
        "createdAt" : "2020-02-21T18:40:22Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eb95424b-3b1f-44df-89f4-26f102d21ae3",
        "parentId" : "204f9682-d226-4c50-8c00-690a5d26dfd8",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suggest we run the linter here too. This way we gain some confidence we generate good TS.",
        "createdAt" : "2020-02-24T08:34:43Z",
        "updatedAt" : "2020-02-24T08:42:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ec9d6db-b1ce-4c6e-8678-716b84a3203b",
        "parentId" : "204f9682-d226-4c50-8c00-690a5d26dfd8",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should also consider moving the linter config in a separate file, I think it's called `.eslintrc.json`.",
        "createdAt" : "2020-02-24T08:38:21Z",
        "updatedAt" : "2020-02-24T08:42:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "93aeb175-b7aa-45e8-803c-56015f12c83d",
        "parentId" : "204f9682-d226-4c50-8c00-690a5d26dfd8",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@shayne-fletcher Here's a PR demoing the target state on DAVL: https://github.com/digital-asset/davl/pull/202",
        "createdAt" : "2020-02-24T11:34:13Z",
        "updatedAt" : "2020-02-24T11:34:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 232,
    "diffHunk" : "@@ -325,3 +369,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\"\n+    , \"      \\\"es2015\\\"\"\n+    , \"     ],\"\n+    , \"    \\\"strict\\\": true,\"\n+    , \"    \\\"noUnusedLocals\\\": true,\"\n+    , \"    \\\"noUnusedParameters\\\": false,\"\n+    , \"    \\\"noImplicitReturns\\\": true,\"\n+    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+    , \"    \\\"declaration\\\": true,\"\n+    , \"    \\\"sourceMap\\\": true\"\n+    , \"    },\"\n+    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n+    , \"}\"\n+    ]\n+\n+writePackageJson :: FilePath -> String -> IO ()\n+writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n+        [\"{\"\n+        , \"  \\\"private\\\": true,\"\n+        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n+        , \"  \\\"version\\\": \\\"0.13.53\\\",\"\n+        , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n+        , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n+        , \"  \\\"dependencies\\\": {\"\n+        , \"    \\\"@daml/types\\\": \\\"0.13.53\\\",\"\n+        , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n+        , \"  },\"\n+        , \"  \\\"scripts\\\": {\"\n+        , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n+        , \"    \\\"build:watch\\\": \\\"tsc --build --watch\\\",\"\n+        , \"    \\\"test\\\": \\\"true\\\",\"\n+        , \"    \\\"lint\\\": \\\"eslint --ext .js,.ts src/ --max-warnings 0\\\"\"\n+        , \"  },\"\n+        , \"  \\\"eslintConfig\\\": {\""
  },
  {
    "id" : "d9f0e0c0-41ef-447d-87d0-7a483f81a397",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "47d6472f-64fd-4f39-99ef-dc016daa4905",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "once per what? once per test? once for all tests? If it’s once for all tests I would move it out of this test otherwise this is going to break if you filter out tests with `-p`.",
        "createdAt" : "2020-02-21T18:25:54Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "842f05e2-91fb-4e2a-a9d6-8aac42845db4",
        "parentId" : "47d6472f-64fd-4f39-99ef-dc016daa4905",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "The idea is to `yarn install` just once for all tests. I think, will have to play, this requires of course a config file exists for it do read dependencies from. I'll see what I can do about moving it out.\r\n",
        "createdAt" : "2020-02-21T18:35:28Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "76c3ae96-7045-4df7-894c-74da3432e590",
        "parentId" : "47d6472f-64fd-4f39-99ef-dc016daa4905",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense, I would factor this out into a tasty resource then. Then it will only be run once but it will be guaranteed to run even if you filter out tests.",
        "createdAt" : "2020-02-21T18:39:12Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "93ee85e3-cbbd-4db1-bce7-850f0d442862",
        "parentId" : "47d6472f-64fd-4f39-99ef-dc016daa4905",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "We did some work on this. It's better now.",
        "createdAt" : "2020-02-21T19:32:21Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : null,
    "diffHunk" : "@@ -60,12 +64,21 @@ tests damlc daml2ts davl = testGroup \"daml2Ts\"\n       buildProject grover []\n       assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n       step \"Generating TypeScript of 'grover'...\"\n-      daml2tsProject [groverDar] groverTs\n-      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"Grover.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"packageId.ts\")\n+      daml2tsProject [groverDar] (groverTs </> \"src\")\n+      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"src\" </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"src\" </> \"grover-1.0\" </> \"packageId.ts\")\n+      step \"Compiling 'grover-ts' to JavaScript... \"\n+      writeTsConfig groverTs\n+      writePackageJson groverTs \"@breathing-test/grover\"\n+      -- Invoke 'yarn install'. We only need to do this once."
  },
  {
    "id" : "51826d9f-d357-47b0-8bd4-272096a1685e",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "55a06c4d-1cb5-4533-a73e-4c7fe92dbc17",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n      assertBool \"'Grover.ts' was created.\" . not =<< doesFileExist (charliesRestaurantTs </> \"src\" </> \"grover-1.0\" </> \"Grover.ts\")\r\n```\r\n```suggestion\r\n      assertBool \"'Grover.ts' was  not created.\" . not =<< doesFileExist (charliesRestaurantTs </> \"src\" </> \"grover-1.0\" </> \"Grover.ts\")\r\n```",
        "createdAt" : "2020-02-21T18:26:14Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e85df02c-271b-4ef2-8135-3fe965ac9842",
        "parentId" : "55a06c4d-1cb5-4533-a73e-4c7fe92dbc17",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "No, it's right as is I think. The logic is reversed. We are testing that the file has not been created. This is because the `Grover.dar` has not been included so `Grover.ts` is under it's package name, not the main-package name `grover-1.0` at this point.",
        "createdAt" : "2020-02-21T18:32:05Z",
        "updatedAt" : "2020-02-22T00:57:51Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 92,
    "diffHunk" : "@@ -126,19 +139,27 @@ tests damlc daml2ts davl = testGroup \"daml2Ts\"\n       buildProject charliesRestaurant []\n       assertBool \"'charlies-restaurant-1.0.dar' was not created.\" =<< doesFileExist charliesRestaurantDar\n       step \"Generating TypeScript of 'charlies-restaurant'...\"\n-      daml2tsProject [charliesRestaurantDar] charliesRestaurantTs\n-      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n-      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n-      assertBool \"'Grover.ts' was created.\" . not =<< doesFileExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      daml2tsProject [charliesRestaurantDar] (charliesRestaurantTs </> \"src\")\n+      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"src\" </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"src\" </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n+      assertBool \"'Grover.ts' was created.\" . not =<< doesFileExist (charliesRestaurantTs </> \"src\" </> \"grover-1.0\" </> \"Grover.ts\")"
  },
  {
    "id" : "371b95a6-b33e-44d2-9095-bbb2093fc77a",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "15a6e752-4d07-4f89-a7d1-e2e9712c9820",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'd be interested to see if we can remove this. The generated code should not use anything from the `dom`, not even `console`.",
        "createdAt" : "2020-02-24T08:32:41Z",
        "updatedAt" : "2020-02-24T08:42:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "02f8359f-ec1a-4cf0-9473-f7676eec2c15",
        "parentId" : "15a6e752-4d07-4f89-a7d1-e2e9712c9820",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Appears we can. Removed.",
        "createdAt" : "2020-02-24T14:47:00Z",
        "updatedAt" : "2020-02-24T14:47:00Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 197,
    "diffHunk" : "@@ -325,3 +385,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\""
  },
  {
    "id" : "321d1d3a-b605-4504-b2fc-2277184493d9",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "45fa4b7f-5380-4982-b113-f192c2eac12d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That should be the version of the current SDK.",
        "createdAt" : "2020-02-24T08:36:32Z",
        "updatedAt" : "2020-02-24T08:42:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "683e6940-4cd8-46f2-ab6f-924224e10d24",
        "parentId" : "45fa4b7f-5380-4982-b113-f192c2eac12d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Well spotted.",
        "createdAt" : "2020-02-24T14:41:51Z",
        "updatedAt" : "2020-02-24T14:41:52Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 219,
    "diffHunk" : "@@ -325,3 +385,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\"\n+    , \"      \\\"es2015\\\"\"\n+    , \"     ],\"\n+    , \"    \\\"strict\\\": true,\"\n+    , \"    \\\"noUnusedLocals\\\": true,\"\n+    , \"    \\\"noUnusedParameters\\\": false,\"\n+    , \"    \\\"noImplicitReturns\\\": true,\"\n+    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+    , \"    \\\"declaration\\\": true,\"\n+    , \"    \\\"sourceMap\\\": true\"\n+    , \"    },\"\n+    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n+    , \"}\"\n+    ]\n+\n+writePackageJson :: FilePath -> String -> IO ()\n+writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n+        [\"{\"\n+        , \"  \\\"private\\\": true,\"\n+        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n+        , \"  \\\"version\\\": \\\"0.13.53\\\",\""
  },
  {
    "id" : "5a8cef1b-355b-4a06-9d67-f0efb9b9b105",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "8c550e32-4ab0-4532-bfd7-b407a224ae03",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We don't want to compile in watch mode here.",
        "createdAt" : "2020-02-24T08:36:57Z",
        "updatedAt" : "2020-02-24T08:42:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6a9d4ff-6b9b-461b-82b2-1f5b3c3004ec",
        "parentId" : "8c550e32-4ab0-4532-bfd7-b407a224ae03",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yep. Removing.",
        "createdAt" : "2020-02-24T14:43:34Z",
        "updatedAt" : "2020-02-24T14:43:34Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 228,
    "diffHunk" : "@@ -325,3 +385,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\"\n+    , \"      \\\"es2015\\\"\"\n+    , \"     ],\"\n+    , \"    \\\"strict\\\": true,\"\n+    , \"    \\\"noUnusedLocals\\\": true,\"\n+    , \"    \\\"noUnusedParameters\\\": false,\"\n+    , \"    \\\"noImplicitReturns\\\": true,\"\n+    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+    , \"    \\\"declaration\\\": true,\"\n+    , \"    \\\"sourceMap\\\": true\"\n+    , \"    },\"\n+    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n+    , \"}\"\n+    ]\n+\n+writePackageJson :: FilePath -> String -> IO ()\n+writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n+        [\"{\"\n+        , \"  \\\"private\\\": true,\"\n+        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n+        , \"  \\\"version\\\": \\\"0.13.53\\\",\"\n+        , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n+        , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n+        , \"  \\\"dependencies\\\": {\"\n+        , \"    \\\"@daml/types\\\": \\\"0.13.53\\\",\"\n+        , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n+        , \"  },\"\n+        , \"  \\\"scripts\\\": {\"\n+        , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n+        , \"    \\\"build:watch\\\": \\\"tsc --build --watch\\\",\""
  },
  {
    "id" : "97bc766d-f61d-4cf7-85de-ee2b5d38d4ad",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "5df70d1a-051b-43de-b7a7-53bfd4147a63",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We don't need this here.",
        "createdAt" : "2020-02-24T08:37:26Z",
        "updatedAt" : "2020-02-24T08:42:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "969b1cef-1497-49cb-8c78-4a3b10cb8227",
        "parentId" : "5df70d1a-051b-43de-b7a7-53bfd4147a63",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Removing.",
        "createdAt" : "2020-02-24T14:44:14Z",
        "updatedAt" : "2020-02-24T14:44:14Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 229,
    "diffHunk" : "@@ -325,3 +385,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\"\n+    , \"      \\\"es2015\\\"\"\n+    , \"     ],\"\n+    , \"    \\\"strict\\\": true,\"\n+    , \"    \\\"noUnusedLocals\\\": true,\"\n+    , \"    \\\"noUnusedParameters\\\": false,\"\n+    , \"    \\\"noImplicitReturns\\\": true,\"\n+    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+    , \"    \\\"declaration\\\": true,\"\n+    , \"    \\\"sourceMap\\\": true\"\n+    , \"    },\"\n+    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n+    , \"}\"\n+    ]\n+\n+writePackageJson :: FilePath -> String -> IO ()\n+writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n+        [\"{\"\n+        , \"  \\\"private\\\": true,\"\n+        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n+        , \"  \\\"version\\\": \\\"0.13.53\\\",\"\n+        , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n+        , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n+        , \"  \\\"dependencies\\\": {\"\n+        , \"    \\\"@daml/types\\\": \\\"0.13.53\\\",\"\n+        , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n+        , \"  },\"\n+        , \"  \\\"scripts\\\": {\"\n+        , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n+        , \"    \\\"build:watch\\\": \\\"tsc --build --watch\\\",\"\n+        , \"    \\\"test\\\": \\\"true\\\",\""
  },
  {
    "id" : "b874b89e-7329-44d8-ae48-09cefa02d2cc",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "09b55232-e8f2-433f-8cf9-907c08a7620f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That should be the current SDK version too.",
        "createdAt" : "2020-02-24T08:37:47Z",
        "updatedAt" : "2020-02-24T08:42:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d67999a0-327d-427d-b9a5-5ec38bcdf43f",
        "parentId" : "09b55232-e8f2-433f-8cf9-907c08a7620f",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Again, well spotted.",
        "createdAt" : "2020-02-24T14:42:09Z",
        "updatedAt" : "2020-02-24T14:42:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "28c779ae-e96a-4ac4-b896-817910333bf7",
        "parentId" : "09b55232-e8f2-433f-8cf9-907c08a7620f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Actually, we might need `0.0.0-SNAPSHOT` here in order to use `@daml/types` from `HEAD`.  The `build-and-list` test should demonstrate how to depend on these.",
        "createdAt" : "2020-02-24T16:45:25Z",
        "updatedAt" : "2020-02-24T16:45:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 223,
    "diffHunk" : "@@ -325,3 +385,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\"\n+    , \"      \\\"es2015\\\"\"\n+    , \"     ],\"\n+    , \"    \\\"strict\\\": true,\"\n+    , \"    \\\"noUnusedLocals\\\": true,\"\n+    , \"    \\\"noUnusedParameters\\\": false,\"\n+    , \"    \\\"noImplicitReturns\\\": true,\"\n+    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+    , \"    \\\"declaration\\\": true,\"\n+    , \"    \\\"sourceMap\\\": true\"\n+    , \"    },\"\n+    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n+    , \"}\"\n+    ]\n+\n+writePackageJson :: FilePath -> String -> IO ()\n+writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n+        [\"{\"\n+        , \"  \\\"private\\\": true,\"\n+        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n+        , \"  \\\"version\\\": \\\"0.13.53\\\",\"\n+        , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n+        , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n+        , \"  \\\"dependencies\\\": {\"\n+        , \"    \\\"@daml/types\\\": \\\"0.13.53\\\",\""
  },
  {
    "id" : "bd8b5f2c-8ca3-4583-8ce5-8fbd05621c6c",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "c26a62c9-c08c-4b84-8ec2-cc2df39fa196",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What do we need this one for?",
        "createdAt" : "2020-02-24T08:39:03Z",
        "updatedAt" : "2020-02-24T08:42:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8ba3bfac-64a2-4a40-8818-aad565a80525",
        "parentId" : "c26a62c9-c08c-4b84-8ec2-cc2df39fa196",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "We don't. Removing.",
        "createdAt" : "2020-02-24T14:23:27Z",
        "updatedAt" : "2020-02-24T14:23:27Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6db5881d-706b-472b-aef7-65f8d6cee289",
        "parentId" : "c26a62c9-c08c-4b84-8ec2-cc2df39fa196",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Actually, turns out we do. Need to write one for the `yarn install` step to work but otherwise don't if we `cd x&& yarn build`.",
        "createdAt" : "2020-02-24T14:29:23Z",
        "updatedAt" : "2020-02-24T14:29:24Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ecf801df-aae9-4872-bbd3-2195839f6dda",
        "parentId" : "c26a62c9-c08c-4b84-8ec2-cc2df39fa196",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "It turns out we really, really do in order to make our scheme of `yarn install` run once work.",
        "createdAt" : "2020-02-24T16:07:18Z",
        "updatedAt" : "2020-02-24T17:47:09Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b2afeb37-8822-423c-bc6d-8b1d90d08954",
        "parentId" : "c26a62c9-c08c-4b84-8ec2-cc2df39fa196",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is there a way to depend on the \"global\" `node_modules` directory we maintain with bazel? @aherrmann do you know the answer?\r\nIf there is, we might get away without using workspaces. If we have to use workspaces, I'd prefer to call `yarn build` and `yarn lint` from the directory containing the generated code rather than calling the `yarn workspaces run ...` versions, which also run over the `@dummy/dummy` package.",
        "createdAt" : "2020-02-24T16:48:18Z",
        "updatedAt" : "2020-02-24T16:48:18Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2050dd22-6f09-4b6c-a3e1-bf5e8fcb101c",
        "parentId" : "c26a62c9-c08c-4b84-8ec2-cc2df39fa196",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "@hurryabit You can depend on `\"@language_support_ts_deps//:node_modules\"` to put them into the sandbox. I'm not sure if there is a way to point yarn to another `node_modules` folder, if not you could create a symlink to put it in the right place.\r\n\r\nAlternatively, you could turn the `yarn lint` call into it's own `eslint_test` target. However, that would require some larger refactoring of this PR.",
        "createdAt" : "2020-02-25T08:42:36Z",
        "updatedAt" : "2020-02-25T08:42:36Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 262,
    "diffHunk" : "@@ -325,3 +385,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\"\n+    , \"      \\\"es2015\\\"\"\n+    , \"     ],\"\n+    , \"    \\\"strict\\\": true,\"\n+    , \"    \\\"noUnusedLocals\\\": true,\"\n+    , \"    \\\"noUnusedParameters\\\": false,\"\n+    , \"    \\\"noImplicitReturns\\\": true,\"\n+    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+    , \"    \\\"declaration\\\": true,\"\n+    , \"    \\\"sourceMap\\\": true\"\n+    , \"    },\"\n+    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n+    , \"}\"\n+    ]\n+\n+writePackageJson :: FilePath -> String -> IO ()\n+writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n+        [\"{\"\n+        , \"  \\\"private\\\": true,\"\n+        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\"\n+        , \"  \\\"version\\\": \\\"0.13.53\\\",\"\n+        , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n+        , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n+        , \"  \\\"dependencies\\\": {\"\n+        , \"    \\\"@daml/types\\\": \\\"0.13.53\\\",\"\n+        , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\"\n+        , \"  },\"\n+        , \"  \\\"scripts\\\": {\"\n+        , \"    \\\"build\\\": \\\"tsc --build\\\",\"\n+        , \"    \\\"build:watch\\\": \\\"tsc --build --watch\\\",\"\n+        , \"    \\\"test\\\": \\\"true\\\",\"\n+        , \"    \\\"lint\\\": \\\"eslint --ext .js,.ts src/ --max-warnings 0\\\"\"\n+        , \"  },\"\n+        , \"  \\\"eslintConfig\\\": {\"\n+        , \"    \\\"extends\\\": [\"\n+        , \"      \\\"eslint:recommended\\\",\"\n+        , \"      \\\"plugin:@typescript-eslint/eslint-recommended\\\",\"\n+        , \"      \\\"plugin:@typescript-eslint/recommended\\\",\"\n+        , \"      \\\"plugin:@typescript-eslint/recommended-requiring-type-checking\\\"\"\n+        , \"    ],\"\n+        , \"    \\\"parser\\\": \\\"@typescript-eslint/parser\\\",\"\n+        , \"    \\\"parserOptions\\\": {\"\n+        , \"      \\\"project\\\": \\\"./tsconfig.json\\\"\"\n+        , \"    },\"\n+        , \"    \\\"plugins\\\": [\"\n+        , \"      \\\"@typescript-eslint\\\"\"\n+        , \"    ],\"\n+        , \"    \\\"rules\\\": {\"\n+        , \"      \\\"@typescript-eslint/no-floating-promises\\\": \\\"error\\\",\"\n+        , \"      \\\"@typescript-eslint/explicit-function-return-type\\\": \\\"off\\\",\"\n+        , \"      \\\"@typescript-eslint/no-inferrable-types\\\": \\\"off\\\"\"\n+        , \"    }\"\n+        , \"  },\"\n+        , \"  \\\"devDependencies\\\": {\"\n+        , \"    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^2.11.0\\\",\"\n+        , \"    \\\"@typescript-eslint/parser\\\": \\\"^2.11.0\\\",\"\n+        , \"    \\\"eslint\\\": \\\"^6.7.2\\\",\"\n+        , \"    \\\"typescript\\\": \\\"~3.7.3\\\"\"\n+        , \"  }\"\n+        , \"}\"\n+        ]\n+\n+writeRootPackageJson :: FilePath -> String -> IO ()\n+writeRootPackageJson rootDir workspace ="
  },
  {
    "id" : "981e2510-df81-405e-93fd-3cba45d2da41",
    "prId" : 4658,
    "comments" : [
      {
        "id" : "9242b270-a378-4507-8541-5e330d628fba",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        , \"  \\\"name\\\": \\\"@daml2ts/\" <> name <> \"\\\",\"\r\n```\r\nThis is what I've used in other place. I think ultimately we should move to `@daml.js/foo`.",
        "createdAt" : "2020-02-24T08:42:06Z",
        "updatedAt" : "2020-02-24T08:42:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "590dd8a4-4e15-473a-837f-2a962a2ec471",
        "parentId" : "9242b270-a378-4507-8541-5e330d628fba",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Have gone with `@daml2ts` for now (tell me if you want that to be `@daml.js` for forward compatibility) also, derive the package name as the leaf of the directory containing the `src` folder - one less argument to pass.",
        "createdAt" : "2020-02-24T14:40:09Z",
        "updatedAt" : "2020-02-24T14:40:09Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "96bfeb5f-c217-4c3e-bf89-c32c68c7c9b7",
        "parentId" : "9242b270-a378-4507-8541-5e330d628fba",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's stay with `@daml2ts` for now.",
        "createdAt" : "2020-02-24T16:48:42Z",
        "updatedAt" : "2020-02-24T16:48:42Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe5f13e0244d38e16379868ab482be336171b59",
    "line" : 218,
    "diffHunk" : "@@ -325,3 +385,84 @@ callProcessSilent cmd args = do\n       hPutStrLn stderr $ unlines [\"stdout:\", out]\n       hPutStrLn stderr $ unlines [\"stderr: \", err]\n       exitFailure\n+\n+writeTsConfig :: FilePath -> IO ()\n+writeTsConfig dir = writeFileUTF8 (dir </> \"tsconfig.json\") $ unlines\n+    [ \"{\"\n+    , \"  \\\"compilerOptions\\\": {\"\n+    , \"    \\\"target\\\": \\\"es5\\\",\"\n+    , \"    \\\"lib\\\": [\"\n+    , \"      \\\"dom\\\",\"\n+    , \"      \\\"es2015\\\"\"\n+    , \"     ],\"\n+    , \"    \\\"strict\\\": true,\"\n+    , \"    \\\"noUnusedLocals\\\": true,\"\n+    , \"    \\\"noUnusedParameters\\\": false,\"\n+    , \"    \\\"noImplicitReturns\\\": true,\"\n+    , \"    \\\"noFallthroughCasesInSwitch\\\": true,\"\n+    , \"    \\\"outDir\\\": \\\"lib\\\",\"\n+    , \"    \\\"module\\\": \\\"commonjs\\\",\"\n+    , \"    \\\"declaration\\\": true,\"\n+    , \"    \\\"sourceMap\\\": true\"\n+    , \"    },\"\n+    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n+    , \"}\"\n+    ]\n+\n+writePackageJson :: FilePath -> String -> IO ()\n+writePackageJson dir name = writeFileUTF8 (dir </> \"package.json\") $ unlines\n+        [\"{\"\n+        , \"  \\\"private\\\": true,\"\n+        , \"  \\\"name\\\": \\\"\" <> name <> \"\\\",\""
  },
  {
    "id" : "189d1741-1ed5-4215-9abb-19892afc6f67",
    "prId" : 4613,
    "comments" : [
      {
        "id" : "6fcd4f13-d2c1-400d-988c-9432503415fe",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should probably check that the output of `daml2ts` contains some indication that it has actually failed for the reason we expect.",
        "createdAt" : "2020-02-19T21:49:08Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb48fd87-2d20-4e80-97a3-a5912ec6afa9",
        "parentId" : "6fcd4f13-d2c1-400d-988c-9432503415fe",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I can do that.",
        "createdAt" : "2020-02-19T22:06:55Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "50ce067e81997115901457e48b83e65be6842714",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,221 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Test.Daml2Ts (main) where\n+\n+import Control.Monad.Extra\n+import System.FilePath\n+import System.IO.Extra\n+import System.Environment.Blank\n+import System.Directory.Extra\n+import System.Process\n+import System.Exit\n+import DA.Bazel.Runfiles\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+\n+import SdkVersion\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n+    daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n+    davl <- locateRunfiles (\"davl\" </> \"released\")\n+    defaultMain $ tests damlc daml2ts davl\n+\n+tests :: FilePath -> FilePath -> FilePath -> TestTree\n+tests damlc daml2ts davl = testGroup \"daml2Ts\"\n+  [ testCaseSteps \"Breathing test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverTs = tmpDir </> \"grover-ts\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      createDirectoryIfMissing True groverTs\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      step \"Generating TypeScript of 'grover'...\"\n+      daml2tsProject [groverDar] groverTs\n+      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"packageId.ts\")\n+\n+  ,  testCaseSteps \"Dependency test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      let charliesRestaurant = tmpDir </> \"charlies-restaurant\"\n+      let charliesRestaurantDar = charliesRestaurant </> \".daml\" </> \"dist\" </> \"charlies-restaurant-1.0.dar\"\n+      let charliesRestaurantTs = tmpDir </> \"charlies-restaurant-ts\"\n+      step \"Creating project 'charlies-restaurant'...\"\n+      createDirectoryIfMissing True charliesRestaurantTs\n+      createDirectoryIfMissing True (charliesRestaurant </> \"daml\")\n+      writeFileUTF8 (charliesRestaurant </> \"daml\" </> \"CharliesRestaurant.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module CharliesRestaurant where\"\n+        , \"import Grover\"\n+        , \"template CharliesRestaurant\"\n+        , \"  with  puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice CharliesRestaurant_SummonGrover: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        create Grover with puppeteer\"\n+        ]\n+      writeFileUTF8 (charliesRestaurant </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: charlies-restaurant\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [CharliesRestaurant]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        , \"  - \" <> groverDar\n+        ]\n+      buildProject charliesRestaurant []\n+      assertBool \"charlies-restaurant-1.0.dar was not created.\" =<< doesFileExist charliesRestaurantDar\n+      step \"Generating TypeScript of 'charlies-restaurant'...\"\n+      daml2tsProject [charliesRestaurantDar] charliesRestaurantTs\n+      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesPathExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n+      assertBool \"'Grover.ts' was created.\" =<< not <$> doesPathExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      daml2tsProject [charliesRestaurantDar, groverDar] charliesRestaurantTs\n+      assertBool \"'Grover.ts' was not created.\" =<< doesPathExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"grover-1.0\" </> \"packageId.ts\")\n+\n+  , testCaseSteps \"Package name collision test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverTs = tmpDir </> \"grover-ts\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      createDirectoryIfMissing True groverTs\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      let elmo = tmpDir </> \"elmo\"\n+      let elmoTs = tmpDir </> \"elmo-ts\"\n+      let elmoDar = elmo </> \".daml\" </> \"dist\" </> \"elmo-1.0.dar\"\n+      step \"Creating project 'elmo'...\"\n+      createDirectoryIfMissing True (elmo </> \"daml\")\n+      createDirectoryIfMissing True elmoTs\n+      writeFileUTF8 (elmo </> \"daml\" </> \"Elmo.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Elmo where\"\n+        , \"template Elmo\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        ]\n+      writeFileUTF8 (elmo </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\" -- Note this!\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Elmo]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject elmo [\"-o\", \".daml\" </> \"dist\" </> \"elmo-1.0.dar\"]\n+      assertBool \"elmo-1.0.dar was not created.\" =<< doesFileExist elmoDar\n+      step \"Generating TypeScript of 'grover' and 'elmo'...\"\n+      (exitCode, _, _) <- readProcessWithExitCode daml2ts ([groverDar, elmoDar] ++ [\"-o\", elmoTs]) \"\"\n+      assertBool \"A name collision error was expected.\" (exitCode /= ExitSuccess)"
  },
  {
    "id" : "3e0c59c0-ce54-4371-abe6-8239b1cfa4b5",
    "prId" : 4613,
    "comments" : [
      {
        "id" : "b33e0858-a983-44ea-9e5c-73399a193fc7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This might be prettier:\r\n```suggestion\r\n      assertBool \"'Grover.ts' was created.\" . not =<< doesPathExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")\r\n```\r\nBut I don't really care.",
        "createdAt" : "2020-02-19T21:52:15Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "befaaf95-bb02-43c4-86b5-d21d7d92e72c",
        "parentId" : "b33e0858-a983-44ea-9e5c-73399a193fc7",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "😄 ",
        "createdAt" : "2020-02-19T22:07:11Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "50ce067e81997115901457e48b83e65be6842714",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,221 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Test.Daml2Ts (main) where\n+\n+import Control.Monad.Extra\n+import System.FilePath\n+import System.IO.Extra\n+import System.Environment.Blank\n+import System.Directory.Extra\n+import System.Process\n+import System.Exit\n+import DA.Bazel.Runfiles\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+\n+import SdkVersion\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n+    daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n+    davl <- locateRunfiles (\"davl\" </> \"released\")\n+    defaultMain $ tests damlc daml2ts davl\n+\n+tests :: FilePath -> FilePath -> FilePath -> TestTree\n+tests damlc daml2ts davl = testGroup \"daml2Ts\"\n+  [ testCaseSteps \"Breathing test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverTs = tmpDir </> \"grover-ts\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      createDirectoryIfMissing True groverTs\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      step \"Generating TypeScript of 'grover'...\"\n+      daml2tsProject [groverDar] groverTs\n+      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"packageId.ts\")\n+\n+  ,  testCaseSteps \"Dependency test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      let charliesRestaurant = tmpDir </> \"charlies-restaurant\"\n+      let charliesRestaurantDar = charliesRestaurant </> \".daml\" </> \"dist\" </> \"charlies-restaurant-1.0.dar\"\n+      let charliesRestaurantTs = tmpDir </> \"charlies-restaurant-ts\"\n+      step \"Creating project 'charlies-restaurant'...\"\n+      createDirectoryIfMissing True charliesRestaurantTs\n+      createDirectoryIfMissing True (charliesRestaurant </> \"daml\")\n+      writeFileUTF8 (charliesRestaurant </> \"daml\" </> \"CharliesRestaurant.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module CharliesRestaurant where\"\n+        , \"import Grover\"\n+        , \"template CharliesRestaurant\"\n+        , \"  with  puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice CharliesRestaurant_SummonGrover: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        create Grover with puppeteer\"\n+        ]\n+      writeFileUTF8 (charliesRestaurant </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: charlies-restaurant\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [CharliesRestaurant]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        , \"  - \" <> groverDar\n+        ]\n+      buildProject charliesRestaurant []\n+      assertBool \"charlies-restaurant-1.0.dar was not created.\" =<< doesFileExist charliesRestaurantDar\n+      step \"Generating TypeScript of 'charlies-restaurant'...\"\n+      daml2tsProject [charliesRestaurantDar] charliesRestaurantTs\n+      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesPathExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n+      assertBool \"'Grover.ts' was created.\" =<< not <$> doesPathExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")"
  },
  {
    "id" : "8468ebc8-7af3-4079-ad0d-65110565a18d",
    "prId" : 4613,
    "comments" : [
      {
        "id" : "599aff32-38ef-4ddf-9220-e28382e256ff",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should probably clean the old output of `daml2ts` before we run it again and then make sure that the files from `CharliesRestaurant` were created again.",
        "createdAt" : "2020-02-19T21:56:53Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "241ad16f-fcc1-4dd8-9adb-7e6702d25e8f",
        "parentId" : "599aff32-38ef-4ddf-9220-e28382e256ff",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok!",
        "createdAt" : "2020-02-19T22:07:28Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50ce067e81997115901457e48b83e65be6842714",
    "line" : 137,
    "diffHunk" : "@@ -0,0 +1,221 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Test.Daml2Ts (main) where\n+\n+import Control.Monad.Extra\n+import System.FilePath\n+import System.IO.Extra\n+import System.Environment.Blank\n+import System.Directory.Extra\n+import System.Process\n+import System.Exit\n+import DA.Bazel.Runfiles\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+\n+import SdkVersion\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n+    daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n+    davl <- locateRunfiles (\"davl\" </> \"released\")\n+    defaultMain $ tests damlc daml2ts davl\n+\n+tests :: FilePath -> FilePath -> FilePath -> TestTree\n+tests damlc daml2ts davl = testGroup \"daml2Ts\"\n+  [ testCaseSteps \"Breathing test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverTs = tmpDir </> \"grover-ts\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      createDirectoryIfMissing True groverTs\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      step \"Generating TypeScript of 'grover'...\"\n+      daml2tsProject [groverDar] groverTs\n+      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"packageId.ts\")\n+\n+  ,  testCaseSteps \"Dependency test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      let charliesRestaurant = tmpDir </> \"charlies-restaurant\"\n+      let charliesRestaurantDar = charliesRestaurant </> \".daml\" </> \"dist\" </> \"charlies-restaurant-1.0.dar\"\n+      let charliesRestaurantTs = tmpDir </> \"charlies-restaurant-ts\"\n+      step \"Creating project 'charlies-restaurant'...\"\n+      createDirectoryIfMissing True charliesRestaurantTs\n+      createDirectoryIfMissing True (charliesRestaurant </> \"daml\")\n+      writeFileUTF8 (charliesRestaurant </> \"daml\" </> \"CharliesRestaurant.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module CharliesRestaurant where\"\n+        , \"import Grover\"\n+        , \"template CharliesRestaurant\"\n+        , \"  with  puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice CharliesRestaurant_SummonGrover: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        create Grover with puppeteer\"\n+        ]\n+      writeFileUTF8 (charliesRestaurant </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: charlies-restaurant\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [CharliesRestaurant]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        , \"  - \" <> groverDar\n+        ]\n+      buildProject charliesRestaurant []\n+      assertBool \"charlies-restaurant-1.0.dar was not created.\" =<< doesFileExist charliesRestaurantDar\n+      step \"Generating TypeScript of 'charlies-restaurant'...\"\n+      daml2tsProject [charliesRestaurantDar] charliesRestaurantTs\n+      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesPathExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n+      assertBool \"'Grover.ts' was created.\" =<< not <$> doesPathExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      daml2tsProject [charliesRestaurantDar, groverDar] charliesRestaurantTs"
  },
  {
    "id" : "5d2112db-8fba-48e6-88b3-d3802301637d",
    "prId" : 4613,
    "comments" : [
      {
        "id" : "02dda284-e526-4bf0-b820-8e53c2eb46c2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It would be great to check that there's no second version of the `Grover` package under its package hash. At least once we have actually implemented it.",
        "createdAt" : "2020-02-19T21:59:40Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2709af1b-66ed-4af8-b0e3-16381c56bd25",
        "parentId" : "02dda284-e526-4bf0-b820-8e53c2eb46c2",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes. The tests will evolve with the improved implementation.",
        "createdAt" : "2020-02-19T22:07:54Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50ce067e81997115901457e48b83e65be6842714",
    "line" : 141,
    "diffHunk" : "@@ -0,0 +1,221 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Test.Daml2Ts (main) where\n+\n+import Control.Monad.Extra\n+import System.FilePath\n+import System.IO.Extra\n+import System.Environment.Blank\n+import System.Directory.Extra\n+import System.Process\n+import System.Exit\n+import DA.Bazel.Runfiles\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+\n+import SdkVersion\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n+    daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n+    davl <- locateRunfiles (\"davl\" </> \"released\")\n+    defaultMain $ tests damlc daml2ts davl\n+\n+tests :: FilePath -> FilePath -> FilePath -> TestTree\n+tests damlc daml2ts davl = testGroup \"daml2Ts\"\n+  [ testCaseSteps \"Breathing test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverTs = tmpDir </> \"grover-ts\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      createDirectoryIfMissing True groverTs\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      step \"Generating TypeScript of 'grover'...\"\n+      daml2tsProject [groverDar] groverTs\n+      assertBool \"'Grover.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (groverTs </> \"grover-1.0\" </> \"packageId.ts\")\n+\n+  ,  testCaseSteps \"Dependency test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: grover\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [Grover]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        ]\n+      buildProject grover []\n+      assertBool \"grover-1.0.dar was not created.\" =<< doesFileExist groverDar\n+      let charliesRestaurant = tmpDir </> \"charlies-restaurant\"\n+      let charliesRestaurantDar = charliesRestaurant </> \".daml\" </> \"dist\" </> \"charlies-restaurant-1.0.dar\"\n+      let charliesRestaurantTs = tmpDir </> \"charlies-restaurant-ts\"\n+      step \"Creating project 'charlies-restaurant'...\"\n+      createDirectoryIfMissing True charliesRestaurantTs\n+      createDirectoryIfMissing True (charliesRestaurant </> \"daml\")\n+      writeFileUTF8 (charliesRestaurant </> \"daml\" </> \"CharliesRestaurant.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module CharliesRestaurant where\"\n+        , \"import Grover\"\n+        , \"template CharliesRestaurant\"\n+        , \"  with  puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice CharliesRestaurant_SummonGrover: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        create Grover with puppeteer\"\n+        ]\n+      writeFileUTF8 (charliesRestaurant </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: charlies-restaurant\"\n+        , \"version: \\\"1.0\\\"\"\n+        , \"source: daml\"\n+        , \"exposed-modules: [CharliesRestaurant]\"\n+        , \"dependencies:\"\n+        , \"  - daml-prim\"\n+        , \"  - daml-stdlib\"\n+        , \"  - \" <> groverDar\n+        ]\n+      buildProject charliesRestaurant []\n+      assertBool \"charlies-restaurant-1.0.dar was not created.\" =<< doesFileExist charliesRestaurantDar\n+      step \"Generating TypeScript of 'charlies-restaurant'...\"\n+      daml2tsProject [charliesRestaurantDar] charliesRestaurantTs\n+      assertBool \"'CharliesRestaurant.ts' was not created.\" =<< doesPathExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"CharliesRestaurant.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"charlies-restaurant-1.0\" </> \"packageId.ts\")\n+      assertBool \"'Grover.ts' was created.\" =<< not <$> doesPathExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      daml2tsProject [charliesRestaurantDar, groverDar] charliesRestaurantTs\n+      assertBool \"'Grover.ts' was not created.\" =<< doesPathExist (charliesRestaurantTs </> \"grover-1.0\" </> \"Grover.ts\")\n+      assertBool \"'packageId.ts' was not created.\" =<< doesFileExist (charliesRestaurantTs </> \"grover-1.0\" </> \"packageId.ts\")"
  },
  {
    "id" : "125249d5-b0e2-4a1e-902a-8b13f26f3a00",
    "prId" : 4613,
    "comments" : [
      {
        "id" : "1f91801d-bf42-4ffa-8af9-14925765b26e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I wonder if we should finally invest in some shared helpers to create all these `daml.yaml` files and the directories containing them. The packaging tests are already full of these repetitions...",
        "createdAt" : "2020-02-19T22:01:58Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "95502823-f08a-40d6-bbfa-feab3220e8d9",
        "parentId" : "1f91801d-bf42-4ffa-8af9-14925765b26e",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes, there's a mini-library emerging. Maybe not today but soon.",
        "createdAt" : "2020-02-19T22:08:23Z",
        "updatedAt" : "2020-02-19T23:15:36Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50ce067e81997115901457e48b83e65be6842714",
    "line" : 50,
    "diffHunk" : "@@ -0,0 +1,221 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Test.Daml2Ts (main) where\n+\n+import Control.Monad.Extra\n+import System.FilePath\n+import System.IO.Extra\n+import System.Environment.Blank\n+import System.Directory.Extra\n+import System.Process\n+import System.Exit\n+import DA.Bazel.Runfiles\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+\n+import SdkVersion\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    damlc <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> exe \"damlc\")\n+    daml2ts <- locateRunfiles (mainWorkspace </> \"language-support\" </> \"ts\" </> \"codegen\" </> exe \"daml2ts\")\n+    davl <- locateRunfiles (\"davl\" </> \"released\")\n+    defaultMain $ tests damlc daml2ts davl\n+\n+tests :: FilePath -> FilePath -> FilePath -> TestTree\n+tests damlc daml2ts davl = testGroup \"daml2Ts\"\n+  [ testCaseSteps \"Breathing test\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      let grover = tmpDir </> \"grover\"\n+      let groverTs = tmpDir </> \"grover-ts\"\n+      let groverDar = grover </> \".daml\" </> \"dist\" </> \"grover-1.0.dar\"\n+      step \"Creating project 'grover'...\"\n+      createDirectoryIfMissing True (grover </> \"daml\")\n+      createDirectoryIfMissing True groverTs\n+      writeFileUTF8 (grover </> \"daml\" </> \"Grover.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Grover where\"\n+        , \"template Grover\"\n+        , \"  with puppeteer : Party\"\n+        , \"  where\"\n+        , \"    signatory puppeteer\"\n+        , \"    choice Grover_GoSuper: ContractId Grover\"\n+        , \"      controller puppeteer\"\n+        , \"      do\"\n+        , \"        return self\"\n+        ]\n+      writeFileUTF8 (grover </> \"daml.yaml\") $ unlines"
  }
]