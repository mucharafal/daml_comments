[
  {
    "id" : "13f8b7a3-34b5-47ee-9085-88afd714473e",
    "prId" : 5540,
    "comments" : [
      {
        "id" : "f34612dd-b225-4ac4-8caf-de38d8aec8ea",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Temporary location, will likely move later",
        "createdAt" : "2020-04-13T22:12:02Z",
        "updatedAt" : "2020-04-17T16:24:22Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "022f7a09b19657608748dce2c6402328ae375078",
    "line" : null,
    "diffHunk" : "@@ -5,14 +5,17 @@ module DA.Test.Daml2jsUtils (\n     Workspaces (..),\n     allTsLibraries,\n     setupYarnEnv,\n+    addTestDependencies,"
  },
  {
    "id" : "186ea106-50c7-4fd9-933a-28a9c04a4ab4",
    "prId" : 5540,
    "comments" : [
      {
        "id" : "25bf9692-b78d-4ce9-9a19-3bb6c2fe4b38",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we really need a loadash merge here? It seems simpler to just have a file that only lists the devDependencies and then do something like an `insertWith \"devDependencies\"`.",
        "createdAt" : "2020-04-14T18:45:01Z",
        "updatedAt" : "2020-04-17T16:24:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "946f0cfd-7b31-4595-b62f-9902c42f759d",
        "parentId" : "25bf9692-b78d-4ce9-9a19-3bb6c2fe4b38",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "That would work too. This seems fairly simple, though requires a new dependency on Aeson.Extra. Not sure if that's a problem. I am planning to get the extra dependencies from a file, though not sure where it should go. Maybe a supplemental directory in `templates` like `create-daml-app-test-resources`.",
        "createdAt" : "2020-04-14T19:03:55Z",
        "updatedAt" : "2020-04-17T16:24:22Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "022f7a09b19657608748dce2c6402328ae375078",
    "line" : null,
    "diffHunk" : "@@ -52,3 +55,24 @@ setupYarnEnv rootDir (Workspaces workspaces) tsLibs = do\n             , let pkgName = \"@\" <> T.replace \"-\" \"/\"  (T.pack name)\n             ]\n         ]\n+\n+testDependencies :: Value\n+testDependencies = object\n+    [ \"devDependencies\" .= object\n+        [ (\"@types/jest\", String \"^25.2.1\")\n+        , (\"@types/node\", String \"^13.11.1\")\n+        , (\"@types/puppeteer\", String \"^2.0.1\")\n+        , (\"@types/wait-on\", String \"^4.0.0\")\n+        , (\"puppeteer\", String \"^2.1.1\")\n+        , (\"wait-on\", String \"^4.0.2\")\n+        ]\n+    ]\n+\n+addTestDependencies :: FilePath -> IO ()\n+addTestDependencies uiDir = do\n+    packageJson <- BS.readFile (uiDir </> \"package.json\")\n+    let packageJsonObj = case decode (BSL.fromStrict packageJson) of\n+            Nothing -> error \"Could not decode package.json\"\n+            Just pJ -> pJ\n+        newPackageJson = lodashMerge packageJsonObj testDependencies"
  },
  {
    "id" : "bf840157-ad78-4d62-9490-1ade90ccb2fe",
    "prId" : 5453,
    "comments" : [
      {
        "id" : "fa32ee14-a2a3-4601-9922-8db1f129a2ca",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "```suggestion\r\n-- scope. We achieve this by putting a `package.json` file further up in the\r\n```",
        "createdAt" : "2020-04-06T16:23:33Z",
        "updatedAt" : "2020-04-06T16:26:19Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ec52296dfa1838b1c585775f47cbf4cfa689adcd",
    "line" : 48,
    "diffHunk" : "@@ -1,20 +1,54 @@\n -- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n -- SPDX-License-Identifier: Apache-2.0\n-module DA.Test.Daml2jsUtils (writeRootPackageJson) where\n+module DA.Test.Daml2jsUtils (\n+    TsLibrary (..),\n+    Workspaces (..),\n+    allTsLibraries,\n+    setupYarnEnv,\n+    ) where\n \n import qualified Data.Text.Extended as T\n import qualified Data.ByteString.Lazy as BSL\n-import qualified Data.HashMap.Strict as HMS\n+import Control.Monad\n+import DA.Bazel.Runfiles\n+import DA.Directory\n import Data.Aeson\n import System.FilePath\n \n--- The need for this utility comes up in at least the assistant\n--- integration and daml2js tests.\n-writeRootPackageJson :: Maybe FilePath -> [String] -> IO ()\n-writeRootPackageJson dir workspaces =\n-  BSL.writeFile (maybe \"package.json\" (</> \"package.json\") dir) $ encode $\n-  object\n-  [ \"private\" .= True\n-  , \"workspaces\" .= map T.pack workspaces\n-  , \"resolutions\" .= HMS.fromList ([ (\"@daml/types\", \"file:daml-types\") ] :: [(T.Text, T.Text)])\n-  ]\n+data TsLibrary\n+    = DamlLedger\n+    | DamlReact\n+    | DamlTypes\n+    deriving (Bounded, Enum)\n+\n+newtype Workspaces = Workspaces [FilePath]\n+\n+allTsLibraries :: [TsLibrary]\n+allTsLibraries = [minBound .. maxBound]\n+\n+tsLibraryName :: TsLibrary -> String\n+tsLibraryName = \\case\n+    DamlLedger -> \"daml-ledger\"\n+    DamlReact -> \"daml-react\"\n+    DamlTypes -> \"daml-types\"\n+\n+-- NOTE(MH): In some tests we need our TS libraries like `@daml/types` in\n+-- scope. We achieve this by putting a `package.json` file futrher up in the"
  }
]