[
  {
    "id" : "3980beb1-6d0c-46d8-8f6b-614f6b02351c",
    "prId" : 5044,
    "comments" : [
      {
        "id" : "98e285f4-27ad-48d0-8b44-3beb42ed5f1d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm very happy to see we don't need this hack anymore.",
        "createdAt" : "2020-03-17T16:00:17Z",
        "updatedAt" : "2020-03-17T16:05:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d1b6e7a6eae69d71ee3d027b631fe0d4f73908c4",
    "line" : 12,
    "diffHunk" : "@@ -17,16 +17,6 @@ export interface Serializable<T> {\n   decoder: () => jtv.Decoder<T>;\n }\n \n-/**\n- * @internal\n- *\n- * This is a check to ensure that enum's are serializable. If the enum is named 'Color', the check\n- * is done by adding a line 'STATIC_IMPLEMENTS_SERIALIZABLE_CHECK<Color>(Color)' after the\n- * definition of 'Color'.\n- */\n-// eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n-export const STATIC_IMPLEMENTS_SERIALIZABLE_CHECK = <T>(_: Serializable<T>) => {}"
  },
  {
    "id" : "30995816-ae2e-4971-a990-db11782c2665",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "29c5eba1-ba09-4994-a8bf-d6b3626078b2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n * @typeparam T The template type.\r\n```",
        "createdAt" : "2020-03-13T20:24:23Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : null,
    "diffHunk" : "@@ -5,13 +5,21 @@ import * as jtv from '@mojotech/json-type-validation';\n /**\n  * Interface for companion objects of serializable types. Its main purpose is\n  * to describe the JSON encoding of values of the serializable type.\n+ *\n+ * @typeparam T The contract template type."
  },
  {
    "id" : "21ceb5ab-40be-40cf-98f9-adeb53caee54",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "6e8f61de-f970-4683-91a8-240fc6ab47f1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That seems like an implementation detail. Do we want to keep this in the docs? In fact should we hide the whole `Serializable` thing?",
        "createdAt" : "2020-03-13T20:25:21Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f32e3c1f-50f5-4f22-abb7-190e1e606a3d",
        "parentId" : "6e8f61de-f970-4683-91a8-240fc6ab47f1",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "My thinking was that if someone is looking at the documentation of daml-types, then they probably want to build something on their own. So the serializable thing might be of interest to them. But I wouldn't mind either to make it internal.",
        "createdAt" : "2020-03-13T20:42:07Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "60663e6c-1a1d-40ac-be89-794faf6de245",
        "parentId" : "6e8f61de-f970-4683-91a8-240fc6ab47f1",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think we should mark it `@internal`. I don't want to commit to keeping it like this.",
        "createdAt" : "2020-03-16T10:09:32Z",
        "updatedAt" : "2020-03-16T11:20:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 12,
    "diffHunk" : "@@ -5,13 +5,21 @@ import * as jtv from '@mojotech/json-type-validation';\n /**\n  * Interface for companion objects of serializable types. Its main purpose is\n  * to describe the JSON encoding of values of the serializable type.\n+ *\n+ * @typeparam T The contract template type.\n  */\n export interface Serializable<T> {\n-  // NOTE(MH): This must be a function to allow for mutually recursive decoders.\n+  /**\n+   * The decoder for a contract of template T.\n+   *\n+   * NB: This is a function to allow for mutually recursive decoders."
  },
  {
    "id" : "b264d816-50ed-4ad2-98cb-c62bf03bb31d",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "d75e90e7-b904-4c13-8017-99269ea4b7b5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n * @typeparam T The template type.\r\n```",
        "createdAt" : "2020-03-13T20:25:37Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : null,
    "diffHunk" : "@@ -22,6 +30,11 @@ export const STATIC_IMPLEMENTS_SERIALIZABLE_CHECK = <T>(_: Serializable<T>) => {\n /**\n  * Interface for objects representing DAML templates. It is similar to the\n  * `Template` type class in DAML.\n+ *\n+ * @typeparam T The contract template type."
  },
  {
    "id" : "1e05c236-cdb7-45a2-a0d9-84be6d13bca8",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "f2d94521-945a-425b-b61d-57eb3cf0f84a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n * @typeparam T The template type.\r\n```",
        "createdAt" : "2020-03-13T20:25:50Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : null,
    "diffHunk" : "@@ -30,18 +43,43 @@ export interface Template<T extends object, K = unknown, I extends string = stri\n }\n \n /**\n- * Interface for objects representing DAML choices. It is similar to the\n- * `Choice` type class in DAML.\n+ * Interface for objects representing DAML choices.\n+ *\n+ * It is similar to the `Choice` type class in DAML.\n+ *\n+ * @typeparam T The contract template type."
  },
  {
    "id" : "0d0d2772-4c12-4b73-bdc7-e8c850b4680d",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "4f93a4ea-16c4-4513-a17f-d06c02c1b28c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "There is actually no `Choice` typeclass anymore (only a constraint synonym). And even if there is, we never advertised this in DAML and treated it more like an implementation detail so I would just remove this.",
        "createdAt" : "2020-03-13T20:26:50Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2e65cc8-1ce4-42e0-b0f0-e76dcc9c003e",
        "parentId" : "4f93a4ea-16c4-4513-a17f-d06c02c1b28c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "ok, then let's remove this line.",
        "createdAt" : "2020-03-13T20:42:23Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : null,
    "diffHunk" : "@@ -30,18 +43,43 @@ export interface Template<T extends object, K = unknown, I extends string = stri\n }\n \n /**\n- * Interface for objects representing DAML choices. It is similar to the\n- * `Choice` type class in DAML.\n+ * Interface for objects representing DAML choices.\n+ *\n+ * It is similar to the `Choice` type class in DAML."
  },
  {
    "id" : "b543b20f-8115-4e42-8d72-d2b898c3ddb3",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "b6fa5eab-3212-4ef6-9deb-2ce26ac54e5f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n   * Returns the template to which this choice belongs.\r\n```",
        "createdAt" : "2020-03-13T20:27:02Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : null,
    "diffHunk" : "@@ -30,18 +43,43 @@ export interface Template<T extends object, K = unknown, I extends string = stri\n }\n \n /**\n- * Interface for objects representing DAML choices. It is similar to the\n- * `Choice` type class in DAML.\n+ * Interface for objects representing DAML choices.\n+ *\n+ * It is similar to the `Choice` type class in DAML.\n+ *\n+ * @typeparam T The contract template type.\n+ * @typeparam K The contract key type.\n+ * @typeparam C The choice type.\n+ * @typeparam R The choice return type.\n+ *\n  */\n export interface Choice<T extends object, C, R, K = unknown> {\n+  /**\n+   * Returns the contract template to which this choice belongs."
  },
  {
    "id" : "3306a8ea-5e96-4dbe-ad1a-1e77910f777e",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "148f265d-1f5e-4f56-8489-19c17a803c79",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we make the decoders internal?",
        "createdAt" : "2020-03-13T20:27:19Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "46160213-db34-4c91-a2fa-ad98bac3c1b6",
        "parentId" : "148f265d-1f5e-4f56-8489-19c17a803c79",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "see above.",
        "createdAt" : "2020-03-13T20:42:32Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "51d6115c-4c32-4ef0-8893-c5a61897bd71",
        "parentId" : "148f265d-1f5e-4f56-8489-19c17a803c79",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yes, let's make this `@internal` as well.",
        "createdAt" : "2020-03-16T10:10:22Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 56,
    "diffHunk" : "@@ -30,18 +43,43 @@ export interface Template<T extends object, K = unknown, I extends string = stri\n }\n \n /**\n- * Interface for objects representing DAML choices. It is similar to the\n- * `Choice` type class in DAML.\n+ * Interface for objects representing DAML choices.\n+ *\n+ * It is similar to the `Choice` type class in DAML.\n+ *\n+ * @typeparam T The contract template type.\n+ * @typeparam K The contract key type.\n+ * @typeparam C The choice type.\n+ * @typeparam R The choice return type.\n+ *\n  */\n export interface Choice<T extends object, C, R, K = unknown> {\n+  /**\n+   * Returns the contract template to which this choice belongs.\n+   */\n   template: () => Template<T, K>;\n+  /**\n+   * Returns a decoder to decode the choice arguments.\n+   */"
  },
  {
    "id" : "0c6e1692-f5c3-4c6a-9594-2631de91f44f",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "99ca0b0c-f70c-407a-bb18-ac34bf731ba2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we actually validate this on the client side anywhere or do you only get the error from the JSON API. If the latter, would it make sense to introduce validation somewhere to get more readable errors?",
        "createdAt" : "2020-03-13T20:29:23Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cd627bff-3999-4a0a-9958-f9de41d3eace",
        "parentId" : "99ca0b0c-f70c-407a-bb18-ac34bf731ba2",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I don't know, @hurryabit might know ?",
        "createdAt" : "2020-03-13T20:44:30Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "73e5a8cf-d12b-4512-b361-b11a4f59cd9a",
        "parentId" : "99ca0b0c-f70c-407a-bb18-ac34bf731ba2",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Currently, we only validate data coming from the JSON API. We only validate that each `Numeric` is a string and nothing beyond that.\r\n\r\nLong term, we should also validate the data we send to the JSON API to be able to produce better error messages if we were to send malformed data.",
        "createdAt" : "2020-03-16T11:15:01Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 133,
    "diffHunk" : "@@ -79,42 +120,54 @@ export const Unit: Serializable<Unit> = {\n export type Bool = boolean;\n \n /**\n- * Companion object of the `Bool` type.\n+ * Companion object of the [[Bool]] type.\n  */\n export const Bool: Serializable<Bool> = {\n   decoder: jtv.boolean,\n }\n \n /**\n- * The counterpart of DAML's `Int` type. We represent `Int`s as string in order\n- * to avoid a loss of precision.\n+ * The counterpart of DAML's `Int` type.\n+ *\n+ * We represent `Int`s as string in order to avoid a loss of precision.\n  */\n export type Int = string;\n \n /**\n- * Companion object of the `Int` type.\n+ * Companion object of the [[Int]] type.\n  */\n export const Int: Serializable<Int> = {\n   decoder: jtv.string,\n }\n \n /**\n- * The counterpart of DAML's `Numeric` type. We represent `Numeric`s as string\n- * in order to avoid a loss of precision. The string must match the regular\n- * expression `-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?`.\n+ * The counterpart of DAML's `Numeric` type.\n+ *\n+ * We represent `Numeric`s as string in order to avoid a loss of precision. The string must match\n+ * the regular expression `-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?`."
  },
  {
    "id" : "3059c4a5-82f0-4cd3-8f84-bf7fe85b51ff",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "80b8659d-1186-4d71-8785-4efb7a2ae0ed",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this really a function?",
        "createdAt" : "2020-03-13T20:30:09Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b76595f3-fabd-401d-bba1-6335f700993a",
        "parentId" : "80b8659d-1186-4d71-8785-4efb7a2ae0ed",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "a function without an argument ... changed it to object.",
        "createdAt" : "2020-03-13T20:48:46Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : null,
    "diffHunk" : "@@ -79,42 +120,54 @@ export const Unit: Serializable<Unit> = {\n export type Bool = boolean;\n \n /**\n- * Companion object of the `Bool` type.\n+ * Companion object of the [[Bool]] type.\n  */\n export const Bool: Serializable<Bool> = {\n   decoder: jtv.boolean,\n }\n \n /**\n- * The counterpart of DAML's `Int` type. We represent `Int`s as string in order\n- * to avoid a loss of precision.\n+ * The counterpart of DAML's `Int` type.\n+ *\n+ * We represent `Int`s as string in order to avoid a loss of precision.\n  */\n export type Int = string;\n \n /**\n- * Companion object of the `Int` type.\n+ * Companion object of the [[Int]] type.\n  */\n export const Int: Serializable<Int> = {\n   decoder: jtv.string,\n }\n \n /**\n- * The counterpart of DAML's `Numeric` type. We represent `Numeric`s as string\n- * in order to avoid a loss of precision. The string must match the regular\n- * expression `-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?`.\n+ * The counterpart of DAML's `Numeric` type.\n+ *\n+ * We represent `Numeric`s as string in order to avoid a loss of precision. The string must match\n+ * the regular expression `-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?`.\n  */\n export type Numeric = string;\n+\n+/**\n+ * The counterpart of DAML's Decimal type.\n+ *\n+ * In DAML, Decimal's are the same as Numeric with precision 10.\n+ *\n+ */\n export type Decimal = Numeric;\n \n /**\n- * Companion function of the `Numeric` type.\n+ * Companion function of the [[Numeric]] type.\n  */\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n export const Numeric = (_: number): Serializable<Numeric> =>\n   ({\n     decoder: jtv.string,\n   })\n \n+/**\n+ * Companion function of the [[Decimal]] type."
  },
  {
    "id" : "4d13029c-677a-48b1-b78e-7a166481471a",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "2d83d0c7-cb2a-4964-9892-638d4789a017",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n * @typeparam C The choice argument type.\r\n```",
        "createdAt" : "2020-03-16T10:10:01Z",
        "updatedAt" : "2020-03-16T11:20:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 45,
    "diffHunk" : "@@ -30,18 +43,41 @@ export interface Template<T extends object, K = unknown, I extends string = stri\n }\n \n /**\n- * Interface for objects representing DAML choices. It is similar to the\n- * `Choice` type class in DAML.\n+ * Interface for objects representing DAML choices.\n+ *\n+ * @typeparam T The template type.\n+ * @typeparam K The contract key type.\n+ * @typeparam C The choice type."
  },
  {
    "id" : "ad458ce2-71a2-4037-ba8d-d259a7c52378",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "44603f1a-95e8-483e-a883-cac539f009be",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should probably also make all companion objects for builtin types `@internal`. They are not meant to be used by humans but only by `daml2ts`.",
        "createdAt" : "2020-03-16T10:11:44Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 94,
    "diffHunk" : "@@ -67,7 +106,7 @@ export const lookupTemplate = (templateId: string): Template<object> => {\n export type Unit = {};\n \n /**\n- * Companion obect of the `Unit` type.\n+ * Companion obect of the [[Unit]] type."
  },
  {
    "id" : "547ec6eb-3d3c-4311-bf9a-d73e33bee187",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "b2fe17dc-a778-4fd6-b15d-d2ff55a0a198",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should give a very brief explanation, that just using `null | T` would not work if you have nested `Optional`s. That's where the seemingly complicated `OptionalInner` type is coming from. See https://docs.daml.com/json-api/lf-value-specification.html#optional for an explanation of the `Optional` encoding.",
        "createdAt" : "2020-03-16T11:18:19Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "74d82caa-8611-413d-ab75-70af7271386d",
        "parentId" : "b2fe17dc-a778-4fd6-b15d-d2ff55a0a198",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "See also the last note of the \"Primitive DAML Types\" section of https://docs.daml.com/daml2ts/index.html.",
        "createdAt" : "2020-03-17T13:57:52Z",
        "updatedAt" : "2020-03-17T13:57:52Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 275,
    "diffHunk" : "@@ -204,16 +268,22 @@ export const ContractId = <T>(_t: Serializable<T>): Serializable<ContractId<T>>\n \n /**\n  * The counterpart of DAML's `Optional T` type.\n+ *\n+ * @typeparam T The type of the optionally present value."
  }
]