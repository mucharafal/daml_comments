[
  {
    "id" : "2d10d2e5-c4ea-4a85-8eef-7cae9f574f4c",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "9d1627f9-29be-467f-9aed-c296e1e0317e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That seems like an implementation detail. Do we want to keep this in the docs? In fact should we hide the whole `Serializable` thing?",
        "createdAt" : "2020-03-13T20:25:21Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "13c77a71-5389-4cc6-b48d-2e174478351e",
        "parentId" : "9d1627f9-29be-467f-9aed-c296e1e0317e",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "My thinking was that if someone is looking at the documentation of daml-types, then they probably want to build something on their own. So the serializable thing might be of interest to them. But I wouldn't mind either to make it internal.",
        "createdAt" : "2020-03-13T20:42:07Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bff95ee7-e3be-4141-9dcd-fa638b4da5e3",
        "parentId" : "9d1627f9-29be-467f-9aed-c296e1e0317e",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think we should mark it `@internal`. I don't want to commit to keeping it like this.",
        "createdAt" : "2020-03-16T10:09:32Z",
        "updatedAt" : "2020-03-16T11:20:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +13,17 @@   * The decoder for a contract of template T.\n   *\n   * NB: This is a function to allow for mutually recursive decoders.\n   */\n  decoder: () => jtv.Decoder<T>;"
  },
  {
    "id" : "39f4c5d7-6d6d-481c-9921-05ef36945ad3",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "060316bf-28f2-4e1a-b383-55b92b9ef783",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we make the decoders internal?",
        "createdAt" : "2020-03-13T20:27:19Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "89ed4ed7-f405-4938-a756-e921091938f7",
        "parentId" : "060316bf-28f2-4e1a-b383-55b92b9ef783",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "see above.",
        "createdAt" : "2020-03-13T20:42:32Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8898be84-a259-4c97-95db-05a70ca7e652",
        "parentId" : "060316bf-28f2-4e1a-b383-55b92b9ef783",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yes, let's make this `@internal` as well.",
        "createdAt" : "2020-03-16T10:10:22Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +59,63 @@  /**\n   * Returns a decoder to decode the choice arguments.\n   */\n  argumentDecoder: () => jtv.Decoder<C>;\n  /**"
  },
  {
    "id" : "7e453744-2b85-42d5-84ae-d1160ebcdb5f",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "01b95279-9ee7-49c3-832c-d13236969162",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we actually validate this on the client side anywhere or do you only get the error from the JSON API. If the latter, would it make sense to introduce validation somewhere to get more readable errors?",
        "createdAt" : "2020-03-13T20:29:23Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5d779699-bd71-4b23-98e4-7f46472c37f0",
        "parentId" : "01b95279-9ee7-49c3-832c-d13236969162",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I don't know, @hurryabit might know ?",
        "createdAt" : "2020-03-13T20:44:30Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "484097c7-5013-4ad3-a053-f74d7d0ffd7c",
        "parentId" : "01b95279-9ee7-49c3-832c-d13236969162",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Currently, we only validate data coming from the JSON API. We only validate that each `Numeric` is a string and nothing beyond that.\r\n\r\nLong term, we should also validate the data we send to the JSON API to be able to produce better error messages if we were to send malformed data.",
        "createdAt" : "2020-03-16T11:15:01Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +143,147 @@ *\n * We represent `Numeric`s as string in order to avoid a loss of precision. The string must match\n * the regular expression `-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?`.\n */\nexport type Numeric = string;"
  },
  {
    "id" : "ab9f3355-8d6b-4025-8357-f77ef5388aed",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "21f8be08-3c51-4809-bf63-1041c1b90128",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n * @typeparam C The choice argument type.\r\n```",
        "createdAt" : "2020-03-16T10:10:01Z",
        "updatedAt" : "2020-03-16T11:20:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +48,52 @@ * @typeparam T The template type.\n * @typeparam K The contract key type.\n * @typeparam C The choice type.\n * @typeparam R The choice return type.\n *"
  },
  {
    "id" : "d6220ea7-337b-48d6-a78a-dc9c956785cd",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "03693cfa-04cf-409f-858a-d40fd71268c1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should probably also make all companion objects for builtin types `@internal`. They are not meant to be used by humans but only by `daml2ts`.",
        "createdAt" : "2020-03-16T10:11:44Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +107,111 @@\n/**\n * Companion obect of the [[Unit]] type.\n */\nexport const Unit: Serializable<Unit> = {"
  },
  {
    "id" : "35272604-23a8-4044-b45f-d43626030fab",
    "prId" : 5000,
    "comments" : [
      {
        "id" : "f5616ca0-b507-465a-91b5-1ae4be966d52",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should give a very brief explanation, that just using `null | T` would not work if you have nested `Optional`s. That's where the seemingly complicated `OptionalInner` type is coming from. See https://docs.daml.com/json-api/lf-value-specification.html#optional for an explanation of the `Optional` encoding.",
        "createdAt" : "2020-03-16T11:18:19Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fb0d0e30-a9cb-4888-85fd-b533e8efa770",
        "parentId" : "f5616ca0-b507-465a-91b5-1ae4be966d52",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "See also the last note of the \"Primitive DAML Types\" section of https://docs.daml.com/daml2ts/index.html.",
        "createdAt" : "2020-03-17T13:57:52Z",
        "updatedAt" : "2020-03-17T13:57:52Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 275,
    "diffHunk" : "@@ -1,1 +270,274 @@ * The counterpart of DAML's `Optional T` type.\n *\n * @typeparam T The type of the optionally present value.\n */\nexport type Optional<T> = null | OptionalInner<T>"
  }
]