[
  {
    "id" : "1007525b-0358-4034-b7a3-72205a60b08d",
    "prId" : 7066,
    "comments" : [
      {
        "id" : "4aa7ba24-243c-482c-9d6e-0679740ebce2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Some integration tests in build-and-lint for multiple queries would be great.",
        "createdAt" : "2020-08-12T07:39:02Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef0422dc9dbfe8749fff1b56b9a06706cecc569",
    "line" : 20,
    "diffHunk" : "@@ -54,10 +54,18 @@ of that template visible for the submitting party are returned.\n \n `streamQuery`\n -------------\n-Retrieve a consolidated stream of events for a given template and query. The accumulated state is\n-the current set of active contracts matching the query. An event can be a `CreateEvent` or an\n-`ArchiveEvent`. When no `query` argument is given, all events visible to the submitting party are\n-returned.\n+Retrieve a consolidated stream of events for a given template and optional\n+query. The accumulated state is the current set of active contracts matching\n+the query if one was given; if the function was called without a query\n+argument, or the query argument was `undefined`, the accumulated state will\n+instead contain all of the active contracts for the given template.\n+\n+`streamQueries`\n+---------------\n+Retrieve a consolidated stream of events for a given template and queries. The\n+accumulated state is the current set of active contracts matching at least one"
  },
  {
    "id" : "1f0a8917-be16-41da-b3cc-ba649c12c3e3",
    "prId" : 7066,
    "comments" : [
      {
        "id" : "9ca5fb2d-4314-4de0-af46-cf633a29e2b3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here, some integration tests would be nice.",
        "createdAt" : "2020-08-12T07:41:16Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef0422dc9dbfe8749fff1b56b9a06706cecc569",
    "line" : 39,
    "diffHunk" : "@@ -69,7 +77,18 @@ Fetch a contract identified by its contract key.\n \n `streamFetchByKey`\n ------------------\n-Retrieve a consolidated stream of `CreateEvent`'s for a given template and contract key.\n+Retrieve a consolidated stream of `CreateEvent`'s for a given template and\n+contract key. The accumulated state is either the `CreateEvent` for the active\n+contract matching the given key, or null if there is no currently-active\n+contract for the given key.\n+\n+`streamFetchByKeys`"
  },
  {
    "id" : "d28253a5-e342-45e2-b1fe-1ec2beab5b08",
    "prId" : 7066,
    "comments" : [
      {
        "id" : "b70567a7-aa21-4a73-84cd-d469f54c33de",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nNote: the given `key` objects will be compared for (deep) equality with the\r\nvalues returned by the API. As such, they have to be given in the \"output\"\r\nformat of the HTTP JSON API. See [the JSON API docs for details](https://docs.daml.com/json-api/lf-value-specification.html).\r\n```\r\nThe flags are not configurable so I don’t think mentioning this here is useful.",
        "createdAt" : "2020-08-26T07:51:42Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8da78ace-29a2-400c-a1e5-850b1b83a4cf",
        "parentId" : "b70567a7-aa21-4a73-84cd-d469f54c33de",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "What do you mean, not configurable? The [LF<->JSON conversion documentation](https://docs.daml.com/json-api/lf-value-specification.html) does mention them. If they can't be changed, why would it? Though now that you mention it, it doesn't say how or where to change them. That should probably be addressed either way.\r\n\r\nI'd also note that this same documentation states they default to `false`, while I observed them to be `true` in my tests. What am I missing?",
        "createdAt" : "2020-09-02T16:56:04Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13730326-8d52-4023-9f30-edba3030708f",
        "parentId" : "b70567a7-aa21-4a73-84cd-d469f54c33de",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "There is the JSON encoding as a library which is used by other parts like extractor and navigator sometimes with different flags (as a library you can change them) and there is the JSON API which only provides one fixed encoding `(true, true)`. Not quite sure what the comment on the defaults is referring to. Might just be outdated. cc @leo-da @S11001001 ",
        "createdAt" : "2020-09-02T17:01:37Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7b5cd929-563e-47f5-abf2-db32181a101f",
        "parentId" : "b70567a7-aa21-4a73-84cd-d469f54c33de",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I do think the docs here should be updated either way to make the role of the flags clearer but let’s leave that out of this PR.",
        "createdAt" : "2020-09-02T17:04:03Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d4651fa0-e8aa-44d0-991f-3249de91960a",
        "parentId" : "b70567a7-aa21-4a73-84cd-d469f54c33de",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "In truth, there is no default, and `lf-value-specification` should be read independently of JSON API. ~A default was imagined when the spec was drafted, but having no default was ultimately expedient.~ (e: the doc suggests defaults, it does not state that there is one)\r\n\r\nIn the context of JSON API, they are fixed true, of course. There was some discussion in #2463 and elsewhere about allowing them to be set by the client, but we have had more reasons not to do this than to do this so far.",
        "createdAt" : "2020-09-02T17:40:41Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d399c5a-8ba5-4303-8b27-ad6c9b234e0c",
        "parentId" : "b70567a7-aa21-4a73-84cd-d469f54c33de",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Updated to not mention the flags.",
        "createdAt" : "2020-09-08T11:54:03Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef0422dc9dbfe8749fff1b56b9a06706cecc569",
    "line" : null,
    "diffHunk" : "@@ -69,11 +80,31 @@ Fetch a contract identified by its contract key.\n \n `streamFetchByKey`\n ------------------\n-Retrieve a consolidated stream of `CreateEvent`'s for a given template and contract key.\n \n+> Deprecated: prefer `streamFetchByKeys`.\n+\n+Retrieve a consolidated stream of `CreateEvent`'s for a given template and\n+contract key. The accumulated state is either the `CreateEvent` for the active\n+contract matching the given key, or null if there is no currently-active\n+contract for the given key.\n+\n+`streamFetchByKeys`\n+-------------------\n+Retrieve a consolidated stream of `CreateEvent`'s for a given template and\n+contract keys. The accumulated state is a vector of the same length as the\n+given vector of keys, where each element is the CreateEvent for the current\n+active contract of the corresponding key (element-wise), or null if there is no\n+current active contract for that key.\n+\n+Note: the given `key` objects will be compared for (deep) equality with the\n+values returned by the API. As such, they have to be given in the \"output\"\n+format of the API, including the values of `encodeDecimalAsString` and\n+`encodeInt64AsString`. See [the JSON API docs for details][0]."
  },
  {
    "id" : "6a619969-b49a-4f07-a25f-b190ecc3309a",
    "prId" : 7066,
    "comments" : [
      {
        "id" : "603a0beb-277c-4582-8673-8d6893f38675",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n```\r\nChanged to a direct link above.",
        "createdAt" : "2020-08-26T07:51:59Z",
        "updatedAt" : "2020-09-08T14:23:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ef0422dc9dbfe8749fff1b56b9a06706cecc569",
    "line" : null,
    "diffHunk" : "@@ -69,11 +80,31 @@ Fetch a contract identified by its contract key.\n \n `streamFetchByKey`\n ------------------\n-Retrieve a consolidated stream of `CreateEvent`'s for a given template and contract key.\n \n+> Deprecated: prefer `streamFetchByKeys`.\n+\n+Retrieve a consolidated stream of `CreateEvent`'s for a given template and\n+contract key. The accumulated state is either the `CreateEvent` for the active\n+contract matching the given key, or null if there is no currently-active\n+contract for the given key.\n+\n+`streamFetchByKeys`\n+-------------------\n+Retrieve a consolidated stream of `CreateEvent`'s for a given template and\n+contract keys. The accumulated state is a vector of the same length as the\n+given vector of keys, where each element is the CreateEvent for the current\n+active contract of the corresponding key (element-wise), or null if there is no\n+current active contract for that key.\n+\n+Note: the given `key` objects will be compared for (deep) equality with the\n+values returned by the API. As such, they have to be given in the \"output\"\n+format of the API, including the values of `encodeDecimalAsString` and\n+`encodeInt64AsString`. See [the JSON API docs for details][0].\n \n ## Source\n https://github.com/digital-asset/daml/tree/master/language-support/ts/daml-ledger\n \n ## License\n [Apache-2.0](https://github.com/digital-asset/daml/blob/master/LICENSE)\n+\n+[0]: https://docs.daml.com/json-api/lf-value-specification.html"
  },
  {
    "id" : "9fefac2c-bef0-4856-b68c-913559bded83",
    "prId" : 5375,
    "comments" : [
      {
        "id" : "1f9cb6ae-5488-4757-89be-784197931e6a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does that actually work? @garyverhaegen-da",
        "createdAt" : "2020-04-02T14:48:03Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4de00b2b-2e65-47ff-9fb9-aa8123f79b2b",
        "parentId" : "1f9cb6ae-5488-4757-89be-784197931e6a",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I tested this locally with HEAD. Here it's replaced with '0.0.0'. This replaces the version string the same way as in `packages.json`.",
        "createdAt" : "2020-04-02T14:59:19Z",
        "updatedAt" : "2020-04-02T15:05:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d0f4e0a5-f5e7-47b4-938d-52a64ba7a9f7",
        "parentId" : "1f9cb6ae-5488-4757-89be-784197931e6a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I wasn't aware we run the substitution on the readmes as well. Good to know. Thanks for the explanation.",
        "createdAt" : "2020-04-02T15:21:58Z",
        "updatedAt" : "2020-04-02T15:21:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d069d14fb2abcaacdc8e8d1a8de1432e5c485a54",
    "line" : 5,
    "diffHunk" : "@@ -6,7 +6,7 @@\n ## Documentation\n \n Comprehensive documentation for `@daml/ledger` can be found\n-[here](https://docs.daml.com/app-dev/bindings-ts/daml-ledger/index.html).\n+[here](https://docs.daml.com/0.0.0-SDKVERSION/app-dev/bindings-ts/daml-ledger/index.html)."
  },
  {
    "id" : "0918af33-9581-47ab-b031-99a6c001ac94",
    "prId" : 4322,
    "comments" : [
      {
        "id" : "5a6847d9-58e8-40d1-9154-e6c121d277a5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nhttps://github.com/digital-asset/daml/tree/master/language-support/ts/daml-ledger\r\n```\r\nSimilarly below.",
        "createdAt" : "2020-01-31T12:50:49Z",
        "updatedAt" : "2020-01-31T12:59:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7d7f4168466cec8620e136fb51e42835ba9597d7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+# @daml/ledger\n+\n+> Client side API implementation for a DAML based ledger. This library implements the JSON based API for a DAML ledger documented in the [DAML Docs](https://docs.daml.com/json-api/index.html).\n+\n+## Install\n+\n+### npm:\n+\n+```sh\n+npm install @daml/ledger\n+```\n+\n+### yarn:\n+\n+```sh\n+yarn add @daml/ledger\n+```\n+\n+## Usage\n+\n+The best place to get you started is [Create DAML App](https://github.com/digital-asset/create-daml-app)\n+and the [Quickstart Guide](https://docs.daml.com/getting-started/quickstart.html).\n+\n+## Source\n+https://github.com/digital-asset/daml."
  },
  {
    "id" : "1795bcd3-156e-4090-9fde-520c06e38c51",
    "prId" : 4322,
    "comments" : [
      {
        "id" : "d14675a0-ac8a-44b0-9596-f48fb45f50db",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This looks like a link to nowhere.\r\n```suggestion\r\n[Apache-2.0](https://github.com/digital-asset/daml/blob/master/LICENSE)\r\n```\r\nSame below.",
        "createdAt" : "2020-01-31T12:52:02Z",
        "updatedAt" : "2020-01-31T12:59:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7d7f4168466cec8620e136fb51e42835ba9597d7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+# @daml/ledger\n+\n+> Client side API implementation for a DAML based ledger. This library implements the JSON based API for a DAML ledger documented in the [DAML Docs](https://docs.daml.com/json-api/index.html).\n+\n+## Install\n+\n+### npm:\n+\n+```sh\n+npm install @daml/ledger\n+```\n+\n+### yarn:\n+\n+```sh\n+yarn add @daml/ledger\n+```\n+\n+## Usage\n+\n+The best place to get you started is [Create DAML App](https://github.com/digital-asset/create-daml-app)\n+and the [Quickstart Guide](https://docs.daml.com/getting-started/quickstart.html).\n+\n+## Source\n+https://github.com/digital-asset/daml.\n+\n+## License\n+[Apache-2.0]"
  }
]