[
  {
    "id" : "f75a895e-6e8e-4af8-a0fa-672758406ff4",
    "prId" : 7091,
    "comments" : [
      {
        "id" : "2340fc11-3cd1-4df6-8c57-e4f3ea141028",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n * @param template The template of the contract to fetch.\r\n```",
        "createdAt" : "2020-08-12T09:26:59Z",
        "updatedAt" : "2020-08-12T09:53:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "771fda1e735b9acc5b0ca106e53a6dec37f73e51",
    "line" : null,
    "diffHunk" : "@@ -48,6 +48,22 @@ export function useQuery<T extends object, K, I extends string>(template: Templa\n   return ledgerContext.useQuery(template, queryFactory, queryDeps);\n }\n \n+/**\n+ * React Hook for a lookup by contractId against the `/v1/fetch` endpoint of the JSON API.\n+ *\n+ * @typeparam T The contract template type of the query.\n+ * @typeparam K The contract key type of the query.\n+ * @typeparam I The template id type.\n+ *\n+ * @param template The template of the contracts to fetch."
  },
  {
    "id" : "2dabd517-dbb9-4cd0-a069-ddc9dda842a0",
    "prId" : 6451,
    "comments" : [
      {
        "id" : "b7a5064e-52b3-4fc8-8180-f6a43c6b5f39",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n```",
        "createdAt" : "2020-06-23T12:44:51Z",
        "updatedAt" : "2020-06-23T14:16:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fe7b232411152656bfde57923a85f0fa4c932bc8",
    "line" : 3,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+"
  },
  {
    "id" : "53627bcf-8ec1-4a10-83fc-441c9c6b045c",
    "prId" : 6451,
    "comments" : [
      {
        "id" : "a128c7e3-67e0-4e5e-ba1b-e88c32a76d59",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We can afford some more space here:\r\n```suggestion\r\nexport function useReload(): () => void {\r\n  return x.useReload();\r\n}\r\n```",
        "createdAt" : "2020-06-23T12:58:17Z",
        "updatedAt" : "2020-06-23T14:16:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fe7b232411152656bfde57923a85f0fa4c932bc8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+\n+import createLedgerContext, { FetchResult, QueryResult, LedgerProps } from \"./createLedgerContext\";\n+import { Party, Template } from \"@daml/types\";\n+import Ledger, { Query } from '@daml/ledger';\n+\n+/**\n+ * @internal\n+ */\n+const x = createLedgerContext();\n+\n+/**\n+ * Within a `DamlLedger` one can use the hooks provided here.\n+ *\n+ * @param props React props and children for this element.\n+ */\n+export function DamlLedger(props: React.PropsWithChildren<LedgerProps>): React.ReactElement|null {\n+  return x.DamlLedger(props);\n+}\n+\n+/**\n+ * React hook to get the party currently connected to the ledger.\n+ */\n+export function useParty(): Party { return x.useParty(); }\n+\n+/**\n+ * React Hook that returns the Ledger instance to interact with the connected DAML ledger.\n+ */\n+export function useLedger(): Ledger { return x.useLedger(); }\n+\n+/**\n+ * React Hook for a ``query`` against the ledger.\n+ *\n+ * @typeparam T The contract template type of the query.\n+ * @typeparam K The contract key type of the query.\n+ * @typeparam I The template id type.\n+ *\n+ * @param template The contract template to filter for.\n+ * @param queryFactory A function returning a query. If the query is omitted, all visible contracts of the given template are returned.\n+ * @param queryDeps The dependencies of the query (which trigger a reload when changed).\n+ *\n+ * @return The result of the query.\n+ */\n+export function useQuery<T extends object, K, I extends string>(template: Template<T, K, I>, queryFactory: () => Query<T>, queryDeps: readonly unknown[]): QueryResult<T, K, I>\n+export function useQuery<T extends object, K, I extends string>(template: Template<T, K, I>): QueryResult<T, K, I>\n+export function useQuery<T extends object, K, I extends string>(template: Template<T, K, I>, queryFactory?: () => Query<T>, queryDeps?: readonly unknown[]): QueryResult<T, K, I> {\n+  return x.useQuery(template, queryFactory, queryDeps);\n+}\n+\n+/**\n+ * React Hook for a lookup by key against the `/v1/fetch` endpoint of the JSON API.\n+ *\n+ * @typeparam T The contract template type of the query.\n+ * @typeparam K The contract key type of the query.\n+ * @typeparam I The template id type.\n+ *\n+ * @param template The template of the contracts to fetch.\n+ * @param keyFactory A function returning the contract key of the contracts to fetch.\n+ * @param keyDeps Dependencies of this hook (for which the fetch is reexecuted on change).\n+ *\n+ * @return The fetched contract.\n+ */\n+export function useFetchByKey<T extends object, K, I extends string>(template: Template<T, K, I>, keyFactory: () => K, keyDeps: readonly unknown[]): FetchResult<T, K, I> {\n+  return x.useFetchByKey(template, keyFactory, keyDeps);\n+}\n+\n+/**\n+ * React Hook to query the ledger, the returned result is updated as the ledger state changes.\n+ *\n+ * @typeparam T The contract template type of the query.\n+ * @typeparam K The contract key type of the query.\n+ * @typeparam I The template id type.\n+ *\n+ * @param template The template of the contracts to match.\n+ * @param queryFactory A function returning a query. If the query is omitted, all visible contracts of the given template are returned.\n+ * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)\n+ *\n+ * @return The matching contracts.\n+ */\n+export function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>, queryFactory: () => Query<T>, queryDeps: readonly unknown[]): QueryResult<T, K, I>\n+export function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>): QueryResult<T, K, I>\n+export function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>, queryFactory?: () => Query<T>, queryDeps?: readonly unknown[]): QueryResult<T, K, I> {\n+  return x.useStreamQuery(template, queryFactory, queryDeps);\n+}\n+\n+/**\n+ * React Hook to query the ledger. Same as useStreamQuery, but query by contract key instead.\n+ *\n+ * @typeparam T The contract template type of the query.\n+ * @typeparam K The contract key type of the query.\n+ * @typeparam I The template id type.\n+ *\n+ * @param template The template of the contracts to match.\n+ * @param queryFactory A function returning a contract key.\n+ * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)\n+ *\n+ * @return The matching (unique) contract.\n+ */\n+export function useStreamFetchByKey<T extends object, K, I extends string>(template: Template<T, K, I>, keyFactory: () => K, keyDeps: readonly unknown[]): FetchResult<T, K, I> {\n+  return x.useStreamFetchByKey(template, keyFactory, keyDeps);\n+}\n+\n+/**\n+ * React Hook to reload all active queries.\n+ */\n+export function useReload(): (() => void) { return x.useReload(); }"
  },
  {
    "id" : "02e4cbeb-27e9-4f49-acf6-5061aa19b8ac",
    "prId" : 6451,
    "comments" : [
      {
        "id" : "7398192f-70db-4d03-bb34-fb3ce62ade4c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "IMO, `x` is not the best variable name here:\r\n```suggestion\r\nconst ledgerContext = createLedgerContext();\r\n```",
        "createdAt" : "2020-06-23T12:59:11Z",
        "updatedAt" : "2020-06-23T14:16:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e548c00-fc01-4f75-bcc0-cc703b3fbfcf",
        "parentId" : "7398192f-70db-4d03-bb34-fb3ce62ade4c",
        "author" : {
          "login" : "leonidr-da",
          "name" : "Leonid Rozenberg",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/62256399?v=4"
        },
        "body" : "Of course!",
        "createdAt" : "2020-06-23T13:44:35Z",
        "updatedAt" : "2020-06-23T14:16:09Z",
        "lastEditedBy" : {
          "login" : "leonidr-da",
          "name" : "Leonid Rozenberg",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/62256399?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fe7b232411152656bfde57923a85f0fa4c932bc8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+\n+import createLedgerContext, { FetchResult, QueryResult, LedgerProps } from \"./createLedgerContext\";\n+import { Party, Template } from \"@daml/types\";\n+import Ledger, { Query } from '@daml/ledger';\n+\n+/**\n+ * @internal\n+ */\n+const x = createLedgerContext();"
  }
]