[
  {
    "id" : "1b886f70-3a99-4054-82fd-868c2674fd70",
    "prId" : 5375,
    "comments" : [
      {
        "id" : "eb68d27c-863b-4086-84fd-a2afafde3552",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "@hurryabit I changed the order of these signatures so that the documentation is created for the version with most parameters. I hope this doesn't change anything in semantics.",
        "createdAt" : "2020-04-02T12:43:37Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f58c2cca-7542-4759-b8d3-c3db0da37e8d",
        "parentId" : "eb68d27c-863b-4086-84fd-a2afafde3552",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Since the signatures don't overlap, this should be fine. It would also only affect type checking and nothing at runtime. Can you please do the same for `useQuery` as well if necessary?",
        "createdAt" : "2020-04-02T14:51:50Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c800f857-d928-4604-9e9d-7050c981d2de",
        "parentId" : "eb68d27c-863b-4086-84fd-a2afafde3552",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "for `useQuery` it's already right.",
        "createdAt" : "2020-04-02T15:03:04Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d069d14fb2abcaacdc8e8d1a8de1432e5c485a54",
    "line" : 22,
    "diffHunk" : "@@ -138,14 +138,14 @@ export function useFetchByKey<T extends object, K, I extends string>(template: T\n  * @typeparam I The template id type.\n  *\n  * @param template The template of the contracts to match.\n- * @param queryFactory A function returning a query.\n+ * @param queryFactory A function returning a query. If the query is omitted, all visible contracts of the given template are returned.\n  * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)\n  *\n  * @return The matching contracts.\n  *\n  */\n-export function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>): QueryResult<T, K, I>\n export function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>, queryFactory: () => Query<T>, queryDeps: readonly unknown[]): QueryResult<T, K, I>\n+export function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>): QueryResult<T, K, I>"
  },
  {
    "id" : "061d1831-23ff-40e4-bb6b-f3628210f1d5",
    "prId" : 5329,
    "comments" : [
      {
        "id" : "91f54b0e-3af3-4053-b93d-440bcd4b3f52",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Since we're also listing to the `change` event, there's no need to use the state shipped with the event.\r\n```suggestion\r\n    stream.on('live', () => setResult(result => ({...result, loading: false})));\r\n```",
        "createdAt" : "2020-04-01T10:56:01Z",
        "updatedAt" : "2020-04-02T14:58:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f833a827-743d-4186-ac0d-a4bd95e15d3c",
        "parentId" : "91f54b0e-3af3-4053-b93d-440bcd4b3f52",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "so should the type of the 'live' handler in the definition of the 'Stream' interface not get the state as input as well?",
        "createdAt" : "2020-04-01T11:27:16Z",
        "updatedAt" : "2020-04-02T14:58:10Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f5223aa4-8181-42a8-bdf1-0575d7582ac6",
        "parentId" : "91f54b0e-3af3-4053-b93d-440bcd4b3f52",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "ah, you answered my question above.",
        "createdAt" : "2020-04-01T11:29:33Z",
        "updatedAt" : "2020-04-02T14:58:10Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf712410e31ad7eed2645e4c306c4276b901b965",
    "line" : null,
    "diffHunk" : "@@ -154,12 +154,12 @@ export function useStreamQuery<T extends object, K, I extends string>(template:\n     const query = queryFactory ? queryFactory() : undefined;\n     console.debug(`mount useStreamQuery(${template.templateId}, ...)`, query);\n     const stream = state.ledger.streamQuery(template, query);\n+    stream.on('live', contracts => setResult(result => ({...result, contracts, loading: false})));"
  },
  {
    "id" : "94eecbf3-bc89-4266-a71a-4db02811d857",
    "prId" : 4977,
    "comments" : [
      {
        "id" : "0af5040c-3430-489c-9cfe-e6885783fe56",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n * @param keyFactory A function returning a contract key.\r\n * @param keyDeps The dependencies of the key (for which a change triggers an update of the result)\r\n```",
        "createdAt" : "2020-03-16T10:04:16Z",
        "updatedAt" : "2020-03-16T10:04:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8c770f146e360efcd62a10a47b65fef1f667abe5",
    "line" : 154,
    "diffHunk" : "@@ -121,7 +194,19 @@ export function useStreamQuery<T extends object, K, I extends string>(template:\n   return result;\n }\n \n-/// React Hook for a query against the `/v1/stream/fetch` endpoint of the JSON API.\n+/**\n+ * React Hook to query the ledger. Same as useStreamQuery, but query by contract key instead.\n+ *\n+ * @typeparam T The contract template type of the query.\n+ * @typeparam K The contract key type of the query.\n+ * @typeparam I The template id type.\n+ *\n+ * @param template The template of the contracts to match.\n+ * @param queryFactory A function returning a contract key.\n+ * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)"
  },
  {
    "id" : "9aca6201-7307-48f3-8ac3-adf9ef3b6d65",
    "prId" : 4972,
    "comments" : [
      {
        "id" : "9595537f-024e-42a5-a10e-4e80743ec110",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is there a `@deprecated` pragma we could add to the doc comment?",
        "createdAt" : "2020-03-16T11:30:25Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "486c9045-8eb9-49a2-887d-1bb9a680b373",
        "parentId" : "9595537f-024e-42a5-a10e-4e80743ec110",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "so right now, the docs for this are not shown at all because of the `@ignore` pragma. we can also use the `@deprecate` pragma to show the docs as deprecated.",
        "createdAt" : "2020-03-16T12:11:46Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b11b6e8c-4086-4e9c-be76-561c909737de",
        "parentId" : "9595537f-024e-42a5-a10e-4e80743ec110",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "changed it to @deprecated.",
        "createdAt" : "2020-03-16T12:12:38Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69373fe4a2c42ce761b666e5f98233422141ea9f",
    "line" : 33,
    "diffHunk" : "@@ -131,6 +138,7 @@ export function useFetchByKey<T extends object, K, I extends string>(template: T\n  * @ignore\n  */\n export const useExercise = <T extends object, C, R>(choice: Choice<T, C, R>): (cid: ContractId<T>, argument: C) => Promise<R> => {\n+  console.log('useExercise is deprecated. Please use \"useLedger\" instead.');"
  },
  {
    "id" : "8001046e-cbf8-4939-80d0-55152ace49aa",
    "prId" : 4708,
    "comments" : [
      {
        "id" : "1e958c23-4321-4fe9-b80a-d36039af1b04",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Need to update the comment here",
        "createdAt" : "2020-02-26T09:24:52Z",
        "updatedAt" : "2020-02-26T09:31:51Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "080f27f0-14cc-489d-a0f0-bc8ea9641739",
        "parentId" : "1e958c23-4321-4fe9-b80a-d36039af1b04",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good catch. Thanks. I'll do.",
        "createdAt" : "2020-02-26T09:30:29Z",
        "updatedAt" : "2020-02-26T09:31:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "644c895b50d55c1a074376f5b211d9ba2c25408d",
    "line" : null,
    "diffHunk" : "@@ -77,32 +77,24 @@ export function useFetchByKey<T extends object, K, I extends string>(template: T\n \n /// React Hook that returns a function to exercise a choice and a boolean\n /// indicator whether the exercise is currently running."
  },
  {
    "id" : "82a8bd49-dfd8-4c6c-a568-37d7cfcbc869",
    "prId" : 4708,
    "comments" : [
      {
        "id" : "0263c16a-aa3e-4651-9a45-a248391a6db5",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "And here",
        "createdAt" : "2020-02-26T09:25:02Z",
        "updatedAt" : "2020-02-26T09:31:51Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "644c895b50d55c1a074376f5b211d9ba2c25408d",
    "line" : null,
    "diffHunk" : "@@ -77,32 +77,24 @@ export function useFetchByKey<T extends object, K, I extends string>(template: T\n \n /// React Hook that returns a function to exercise a choice and a boolean\n /// indicator whether the exercise is currently running.\n-export const useExercise = <T extends object, C, R>(choice: Choice<T, C, R>): [(cid: ContractId<T>, argument: C) => Promise<R>, boolean] => {\n+export const useExercise = <T extends object, C, R>(choice: Choice<T, C, R>): (cid: ContractId<T>, argument: C) => Promise<R> => {\n   const state = useDamlState();\n-  const [loading, setLoading] = useState(false);\n-\n   const exercise = async (cid: ContractId<T>, argument: C) => {\n-    setLoading(true);\n     const [result] = await state.ledger.exercise(choice, cid, argument);\n-    setLoading(false);\n     return result;\n   }\n-  return [exercise, loading];\n+  return exercise;\n }\n \n /// React Hook that returns a function to exercise a choice by key and a boolean\n /// indicator whether the exercise is currently running."
  }
]