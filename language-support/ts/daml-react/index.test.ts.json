[
  {
    "id" : "58838b82-d37e-4557-b62c-5e3bccf5f140",
    "prId" : 7789,
    "comments" : [
      {
        "id" : "2aeb7dab-1764-4bd2-96b0-728c085da3e2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "A comment that explains why we have to lie to the compiler would be nice.",
        "createdAt" : "2020-10-23T11:36:55Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12c8d691-ea91-4fe3-b2e5-f762aeeceace",
        "parentId" : "2aeb7dab-1764-4bd2-96b0-728c085da3e2",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I don't think we _have to_, but the current test code does and changing that seemed outside the scope of this PR.\r\n\r\nThe issue is that we're mocking the entire stream implementation in such a way that the return value of the (mocked) streams is never type checked. The logical type signature for the `streamq` and `streamk` functions would ensure that the values we get out of our streams are the ones expected by the `useStream*` functions, but all of the existing tests essentially return & check for `{loading: boolean; contract: payload}` instead of the proper `{loading: boolean, contract: {templateId: ..., payload: ..., ...}}`, i.e. we're completely skipping over the `CreateEvent` type.\r\n\r\nWhile I do think this should be cleaned up at some point, I don't think it should be done as part of this PR. I'm also not sure there's that much to gain, so priority is unclear.",
        "createdAt" : "2020-10-23T12:08:02Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2f1d7dde-26e1-4c6c-b281-62c6cde3183f",
        "parentId" : "2aeb7dab-1764-4bd2-96b0-728c085da3e2",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Perfectly fine to not change this in this PR and maybe never. Can we copy your implementation into a code comment? I’m sure I’ll forget about this again otherwise.",
        "createdAt" : "2020-10-23T12:10:19Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c4930f6a-8a78-44ab-9d3d-a89cdba225c4",
        "parentId" : "2aeb7dab-1764-4bd2-96b0-728c085da3e2",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Added similar explanation as comments.",
        "createdAt" : "2020-10-23T12:17:34Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c2711d75ba7ad4effdb829987dba951c25a92e82",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +316,320 @@ * that in the context of mocking all stream operations.\n */\nfunction streamq<Q, LyingToTheCompiler extends {loading: boolean; contracts: readonly object[]}>(useFn: (template: Template<object>, factory: () => Q, deps: unknown[], closeHandler?: (e: StreamCloseEvent) => void) => LyingToTheCompiler, mkQuery: (s: string) => () => Q): () => void {\n  return (): void => {\n    test('live event changes loading status', () => {"
  },
  {
    "id" : "ab4d32ea-2cf5-4c44-92c2-a992a70045b9",
    "prId" : 7789,
    "comments" : [
      {
        "id" : "6749638c-2484-48cd-8f50-867afa2bdfa5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Would a test be useful that actually tests multiple queries or keys or is this somewhat redundant in this mocked setup?",
        "createdAt" : "2020-10-23T11:41:13Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f33f060a-d40a-42d1-9020-e3527dcf2cbf",
        "parentId" : "6749638c-2484-48cd-8f50-867afa2bdfa5",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Given that we're completely mocking the entire stream stack here, I don't think it would add any value at all to test at this level. I'm otherwise happy with the current test coverage of the underlying `@daml/ledger` functions, but would be open to try and add more of that in a separate PR if you're not.",
        "createdAt" : "2020-10-23T12:09:28Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be07b170-3be7-46d5-9e59-ade918668905",
        "parentId" : "6749638c-2484-48cd-8f50-867afa2bdfa5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I agree with you, just wanted to check if I had all the context.",
        "createdAt" : "2020-10-23T12:10:52Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c2711d75ba7ad4effdb829987dba951c25a92e82",
    "line" : 491,
    "diffHunk" : "@@ -1,1 +569,573 @@    {loading: true, contract: null},\n    (c: object | null): {loading: boolean; contract: object | null} => ({loading: false, contract: c})));\ndescribe(\n  'useStreamFetchByKeys',\n  streamk("
  }
]