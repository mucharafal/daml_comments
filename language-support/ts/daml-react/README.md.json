[
  {
    "id" : "c32db021-296a-4e9f-a797-33d255909cbb",
    "prId" : 5375,
    "comments" : [
      {
        "id" : "463b8e43-bee8-4fa2-a1ef-ec96ae1fa118",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think it would help to have a code example for this as well. And down for `useStreamQuery` too.",
        "createdAt" : "2020-04-02T14:49:40Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83e88c7e-0a22-4f72-a417-c69051c37dc0",
        "parentId" : "463b8e43-bee8-4fa2-a1ef-ec96ae1fa118",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "ok, I added two examples.",
        "createdAt" : "2020-04-02T15:03:24Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d069d14fb2abcaacdc8e8d1a8de1432e5c485a54",
    "line" : 15,
    "diffHunk" : "@@ -63,7 +63,8 @@ const [choiceReturnValue, events] = await ledger.exercise(ContractChoice, contra\n `useQuery`\n ----------\n `useQuery` returns the contracts matching a given query. The query matches for a given contract\n-template and specified field values of the contracts of that template.\n+template and specified field values of the contracts of that template. If the query is omitted, all\n+visible contracts of the given template are returned."
  },
  {
    "id" : "3ccc18c5-33c1-40a0-82c7-5953278eebd4",
    "prId" : 4972,
    "comments" : [
      {
        "id" : "4c13a370-b85b-4241-b9bc-8823323cd159",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we please make the reference to `@daml/ledger` a link?",
        "createdAt" : "2020-03-16T11:26:49Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88bb682f-6915-4875-a4ce-560fce9491e7",
        "parentId" : "4c13a370-b85b-4241-b9bc-8823323cd159",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "done.",
        "createdAt" : "2020-03-16T12:04:56Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69373fe4a2c42ce761b666e5f98233422141ea9f",
    "line" : null,
    "diffHunk" : "@@ -47,23 +47,16 @@ Now you can use the following React hooks to interact with a DAML ledger:\n const party = useParty()\n ```\n \n-`useExercise`\n+`useLedger`\n -------------\n-`useExercise` returns a function to exercise a choice by contract id.\n+`useLedger` returns an instance of the `Ledger` class of @daml/ledger to interact with the DAML"
  },
  {
    "id" : "43bc4398-738b-46e5-8106-6ddeab94ba00",
    "prId" : 4972,
    "comments" : [
      {
        "id" : "7b5aa6f3-6756-436f-b746-b17f119c3041",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "My impression (from tools like prettier) is that ending statements with semicolons is the recommended way. It definitely simplifies parsing, both for humans and the JS parser.\r\n```suggestion\r\nconst ledger = useLedger();\r\nconst newContract = await ledger.create(ContractTemplate, arguments);\r\n```",
        "createdAt" : "2020-03-16T11:28:04Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aa8d408a-6b6f-4b6d-8d9c-0d050783b6be",
        "parentId" : "7b5aa6f3-6756-436f-b746-b17f119c3041",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can please also keep an example for `ledger.exercise` in addition to `ledger.create`. That should make the docs more accessible.",
        "createdAt" : "2020-03-16T11:28:41Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "928d46ed-231a-4dee-8aae-0c8b10e262ce",
        "parentId" : "7b5aa6f3-6756-436f-b746-b17f119c3041",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "added examples for archive/exercise.",
        "createdAt" : "2020-03-16T12:08:23Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69373fe4a2c42ce761b666e5f98233422141ea9f",
    "line" : null,
    "diffHunk" : "@@ -47,23 +47,16 @@ Now you can use the following React hooks to interact with a DAML ledger:\n const party = useParty()\n ```\n \n-`useExercise`\n+`useLedger`\n -------------\n-`useExercise` returns a function to exercise a choice by contract id.\n+`useLedger` returns an instance of the `Ledger` class of @daml/ledger to interact with the DAML\n+ledger.\n \n ```typescript\n-const [exerciseChoice] = useExercise(ContractTemplate.ChoiceName)\n-const onClick = () => exerciseChoice(contractId, argument)\n+const ledger = useLedger()\n+const newContract = await ledger.create(ContractTemplate, arguments)"
  },
  {
    "id" : "6791b650-d035-4ef0-b5fe-cf8614ce4d8c",
    "prId" : 4322,
    "comments" : [
      {
        "id" : "ad651dc7-6ca2-480a-ae3b-bbebe7282f10",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n> Library to interact with a DAML ledger from a React application.\r\n```",
        "createdAt" : "2020-01-31T12:49:21Z",
        "updatedAt" : "2020-01-31T12:59:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7d7f4168466cec8620e136fb51e42835ba9597d7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,55 @@\n+# @daml/react\n+\n+> React framework to interact with a DAML ledger."
  }
]