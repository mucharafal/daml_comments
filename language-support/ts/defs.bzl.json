[
  {
    "id" : "cbe29fd2-8659-4dd6-9ce1-200e0536bede",
    "prId" : 5539,
    "comments" : [
      {
        "id" : "ab71ddf5-e511-4cab-b03b-d32c123dc70b",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Use `paths.join` from `bazel_skylib`, note, it already drops empty components..",
        "createdAt" : "2020-04-14T11:39:00Z",
        "updatedAt" : "2020-04-17T11:44:35Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e726abdd-244c-44d3-a4d0-b000633871d9",
        "parentId" : "ab71ddf5-e511-4cab-b03b-d32c123dc70b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thank, I had just copied that from `rules_nodejs`.",
        "createdAt" : "2020-04-14T12:52:22Z",
        "updatedAt" : "2020-04-17T11:44:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "27b9b4b4494c6b1447e637fc5ed067d655b45e2e",
    "line" : null,
    "diffHunk" : "@@ -1,21 +1,24 @@\n # Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n-load(\"@language_support_ts_deps//typescript:index.bzl\", \"tsc\")\n+load(\"@build_bazel_rules_nodejs//:providers.bzl\", \"DeclarationInfo\", \"LinkablePackageInfo\")\n+load(\"@npm_bazel_typescript//:index.bzl\", \"ts_project\")\n \n def _da_ts_library_impl(ctx):\n+    path = \"/\".join([p for p in [ctx.bin_dir.path, ctx.label.workspace_root, ctx.label.package] if p])"
  },
  {
    "id" : "53621e7f-bd37-44fa-b34b-4e7519583476",
    "prId" : 5539,
    "comments" : [
      {
        "id" : "b14f5f16-e9a0-45d8-b12d-4d19851a6b77",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "How does it fail?\r\n\r\nThe documentation to `ts_project` states that one should [define `rootDirs` in `tsconfig.json`](https://github.com/bazelbuild/rules_nodejs/blob/bd83907954d1b3cd53dff01c37e3c4964890ef5c/packages/typescript/src/internal/ts_project.bzl#L240-L262), have you tried that?",
        "createdAt" : "2020-04-14T11:52:02Z",
        "updatedAt" : "2020-04-17T11:44:35Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "500943a0-c6c5-4d71-84a2-39373e94bbaa",
        "parentId" : "b14f5f16-e9a0-45d8-b12d-4d19851a6b77",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It fails when building `daml-ledger` with\r\n```\r\nlanguage-support/ts/daml-ledger/index.test.ts(4,46): error TS2307: Cannot find module '@daml/types'.\r\n```\r\nI did try setting `rootDirs` (just pushed my attempt) but that doesn’t seem to help. The docs also say that this is only relevant for relative imports, not quite sure if that applies here or not.",
        "createdAt" : "2020-04-14T12:51:54Z",
        "updatedAt" : "2020-04-17T11:44:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "27b9b4b4494c6b1447e637fc5ed067d655b45e2e",
    "line" : null,
    "diffHunk" : "@@ -1,21 +1,24 @@\n # Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n # SPDX-License-Identifier: Apache-2.0\n \n-load(\"@language_support_ts_deps//typescript:index.bzl\", \"tsc\")\n+load(\"@build_bazel_rules_nodejs//:providers.bzl\", \"DeclarationInfo\", \"LinkablePackageInfo\")\n+load(\"@npm_bazel_typescript//:index.bzl\", \"ts_project\")\n \n def _da_ts_library_impl(ctx):\n+    path = \"/\".join([p for p in [ctx.bin_dir.path, ctx.label.workspace_root, ctx.label.package] if p])\n+    print(path)\n+    print(ctx.attr.module_name)\n     return [\n-        DefaultInfo(\n-            files = depset(ctx.files.srcs),\n-            runfiles = ctx.runfiles(files = ctx.files.srcs),\n-        ),\n-    ]\n+        ctx.attr.dep[DefaultInfo],\n+        ctx.attr.dep[DeclarationInfo],\n+        LinkablePackageInfo(package_name = ctx.attr.module_name, path = path)]\n \n+# TODO This doesn’t quite work, we need a DeclarationInfo provider.\n+# ts_project has this but it doesn’t have module_name and module_root."
  },
  {
    "id" : "fc8ce827-716a-4564-8409-38d6bd855d30",
    "prId" : 5539,
    "comments" : [
      {
        "id" : "c75080ad-8046-4db4-b7d4-c20955af31f1",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Was the whole `module_name|module_root` feature removed in `rules_nodejs` from 1.1.0 to 1.6.0? Otherwise, if you retain that attribute, would that help? ",
        "createdAt" : "2020-04-14T14:39:39Z",
        "updatedAt" : "2020-04-17T11:44:35Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c712efb7-fa84-46eb-ad83-d56c8218a674",
        "parentId" : "c75080ad-8046-4db4-b7d4-c20955af31f1",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It is still present. I think they want to move everyone over to `LinkablePackageInfo` but for now both should work. I did retain the attributes on `_da_ts_library_rule` (or at least I tried to, definitely possible that I messed it up). I also tried keeping the attributes while removing `LinkablePackageInfo` with no success.",
        "createdAt" : "2020-04-14T14:48:25Z",
        "updatedAt" : "2020-04-17T11:44:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "27b9b4b4494c6b1447e637fc5ed067d655b45e2e",
    "line" : null,
    "diffHunk" : "@@ -48,31 +51,19 @@ def da_ts_library(\n         for ext in [\".js\", \".d.ts\"]\n         for s in srcs\n     ]\n-    tsc(\n-        name = \"_%s_tsc\" % name,\n-        data = [tsconfig] + srcs + deps,\n-        outs = outs,\n-        args = [\n-            \"--outDir\",\n-            \"$(RULEDIR)\",\n-            \"--project\",\n-            \"$(location %s)\" % tsconfig,\n-            \"--declaration\",\n-        ],\n-        **kwargs\n+    ts_project(\n+        name = name + \"_tsc\",\n+        srcs = srcs,\n+        tsconfig = tsconfig,\n+        deps = deps,\n+        tsc = \"@language_support_ts_deps//typescript/bin:tsc\",\n+        validate = False,\n+        **kwargs,\n     )\n-\n-    # rules_nodejs does import remapping based on the module_name attribute.\n-    # The tsc macro is an instance of npm_package_bin under the covers which\n-    # doesn't take a module_name attribute. So, we use this wrapper rule to be\n-    # able to set the module_name attribute.\n     _da_ts_library_rule(\n         name = name,\n-        srcs = outs,\n-        # We don't do anything with the deps, but they are needed for\n-        # rules_nodejs's tracking of transitive dependencies.\n-        deps = deps,"
  },
  {
    "id" : "837e2981-f423-4fe3-b114-1ca55e225f5f",
    "prId" : 4380,
    "comments" : [
      {
        "id" : "e4a97914-68b2-4396-910a-3be57e046fb1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "How do we find deps, via the global npm deps repo?",
        "createdAt" : "2020-02-04T17:29:23Z",
        "updatedAt" : "2020-02-04T17:32:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5bd68305-ae86-42a3-90fc-40580bbfff70",
        "parentId" : "e4a97914-68b2-4396-910a-3be57e046fb1",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "rules_nodejs traces them through this attribute and makes sure they're in the right place in the execroot. They come either from local targets or from the npm deps repo. E.g. https://github.com/digital-asset/daml/pull/4380/files#diff-cb32cca6075c7ecf0996019a06da7488R16-R20",
        "createdAt" : "2020-02-04T17:37:50Z",
        "updatedAt" : "2020-02-04T17:37:50Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f0a5e642-3eaa-4811-b682-261a005d97b9",
        "parentId" : "e4a97914-68b2-4396-910a-3be57e046fb1",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "makes sense, thanks for the explanation!",
        "createdAt" : "2020-02-04T17:40:30Z",
        "updatedAt" : "2020-02-04T17:40:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "04bab3bdb7ca0581e7997869e8988cb955668b3a",
    "line" : 74,
    "diffHunk" : "@@ -0,0 +1,78 @@\n+# Copyright (c) 2020 The DAML Authors. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+load(\"@language_support_ts_deps//typescript:index.bzl\", \"tsc\")\n+\n+def _da_ts_library_impl(ctx):\n+    return [\n+        DefaultInfo(\n+            files = depset(ctx.files.srcs),\n+            runfiles = ctx.runfiles(files = ctx.files.srcs),\n+        ),\n+    ]\n+\n+_da_ts_library_rule = rule(\n+    _da_ts_library_impl,\n+    attrs = {\n+        \"srcs\": attr.label_list(allow_files = True),\n+        \"deps\": attr.label_list(allow_files = True),\n+        \"module_name\": attr.string(),\n+        \"module_root\": attr.string(),\n+    },\n+)\n+\n+def da_ts_library(\n+        name,\n+        tsconfig = \"tsconfig.json\",\n+        srcs = [],\n+        deps = [],\n+        module_name = \"\",\n+        module_root = \"\",\n+        **kwargs):\n+    \"\"\"Build a typescript library.\n+\n+    Invokes tsc and generates definitions and commonjs files.\n+\n+    Attrs:\n+      name: A unique name for the rule.\n+      tsconfig: The tsconfig.json file.\n+        The \"files\" attribute defines the typescript sources.\n+      srcs: The typescript source files.\n+        Defines which files are visible to the typescript compiler.\n+      deps: Typescript library dependencies.\n+      module_name: The import name of this library. E.g. @daml/types.\n+      module_root: Treat sources as rooted under module_name.\n+    \"\"\"\n+    outs = [\n+        s.replace(\".ts\", ext)\n+        for ext in [\".js\", \".d.ts\"]\n+        for s in srcs\n+    ]\n+    tsc(\n+        name = \"_%s_tsc\" % name,\n+        data = [tsconfig] + srcs + deps,\n+        outs = outs,\n+        args = [\n+            \"--outDir\",\n+            \"$(RULEDIR)\",\n+            \"--project\",\n+            \"$(location %s)\" % tsconfig,\n+            \"--declaration\",\n+        ],\n+        **kwargs\n+    )\n+\n+    # rules_nodejs does import remapping based on the module_name attribute.\n+    # The tsc macro is an instance of npm_package_bin under the covers which\n+    # doesn't take a module_name attribute. So, we use this wrapper rule to be\n+    # able to set the module_name attribute.\n+    _da_ts_library_rule(\n+        name = name,\n+        srcs = outs,\n+        # We don't do anything with the deps, but they are needed for\n+        # rules_nodejs's tracking of transitive dependencies.\n+        deps = deps,"
  }
]