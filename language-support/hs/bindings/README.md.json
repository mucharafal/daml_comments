[
  {
    "id" : "9708a4bb-2492-47ae-9833-99eaf6d1694b",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "990b61f4-cf5e-4157-ac1e-47e3d1b28ef6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nWe are currently using gRPC version `1.23.0`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\r\n```",
        "createdAt" : "2019-09-05T12:28:30Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5ba374c-d132-4eb6-8c9a-4b8007bd723d",
        "parentId" : "990b61f4-cf5e-4157-ac1e-47e3d1b28ef6",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-09-06T15:37:57Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md."
  },
  {
    "id" : "fd41b72d-c254-4509-8b21-5efbd7c5f7e6",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "f3520277-e4e1-4161-a5bb-e3bd1f7bc537",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That line doesn’t seem useful. I am also not sure we really want to maintain our own instructions here. What’s wrong with the ones in the gRPC repo?",
        "createdAt" : "2019-09-05T12:29:57Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd0b14fa-6bea-470f-a1bc-62a1a4fdc87e",
        "parentId" : "f3520277-e4e1-4161-a5bb-e3bd1f7bc537",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I got rid of `cd ~/github`\r\nI just made the instructions say to build `grpc` somewhere permanent.",
        "createdAt" : "2019-09-06T15:39:47Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c751489f-e3f6-41dd-a12f-f149bf31dd7b",
        "parentId" : "f3520277-e4e1-4161-a5bb-e3bd1f7bc537",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I think it's useful to include the `grpc` build step in our instructions.",
        "createdAt" : "2019-09-06T15:40:40Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github"
  },
  {
    "id" : "46146c42-4009-4e45-8b24-f3016ebb1612",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "1822c8c2-87b6-4c76-bcd7-1967f5bfbe73",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n## Download and build grpc at version 1.23.0\r\n```",
        "createdAt" : "2019-09-05T12:30:04Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1"
  },
  {
    "id" : "eef9f127-e7a4-42f7-958b-e673ac538b56",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "3a698bed-6acd-4614-9fe4-4cb88e4ee257",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    git checkout v1.23.0\r\n```",
        "createdAt" : "2019-09-05T12:30:14Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c963273e-ef78-4a89-993a-3f528f4991b6",
        "parentId" : "3a698bed-6acd-4614-9fe4-4cb88e4ee257",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-09-06T15:40:53Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1"
  },
  {
    "id" : "6f075600-ce57-49d8-af3d-97056912757c",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "573ceabd-39a9-4318-895e-bef463dc31e3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would just link to the dev-env setup instructions in our main readme.",
        "createdAt" : "2019-09-05T12:31:09Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e0c3de0-e479-4d67-97d2-bc60e8f1b462",
        "parentId" : "573ceabd-39a9-4318-895e-bef463dc31e3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I did this",
        "createdAt" : "2019-09-06T15:57:21Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; force Haskell code generation\n+\n+    cd ~/github\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow"
  },
  {
    "id" : "39cc4f6a-49b4-47a1-b3fd-078510835619",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "ed416bbb-30a2-4707-8e6e-f1a049dc4281",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here, this line doesn’t add anything.",
        "createdAt" : "2019-09-05T12:31:20Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6bbddd61-d818-46c2-afbc-e497f59420cd",
        "parentId" : "ed416bbb-30a2-4707-8e6e-f1a049dc4281",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I changed the instructions to clone `daml` in `/tmp'.\r\nI think this simplicity is nice.",
        "createdAt" : "2019-09-06T15:42:46Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; force Haskell code generation\n+\n+    cd ~/github"
  },
  {
    "id" : "19530cb4-be77-4b4c-9103-750d9bfc3373",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "a52bc733-a7cf-4051-9f8b-8c3bbbef5721",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Moving from a bash script to having to run this yourself seems worse. Why can’t we automate this?",
        "createdAt" : "2019-09-05T12:33:14Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5405dab8-839b-417b-b98d-5a56a5115aa8",
        "parentId" : "a52bc733-a7cf-4051-9f8b-8c3bbbef5721",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I reinstated a script to do the required `bazel` build and export the (now single) dist tarball.",
        "createdAt" : "2019-09-06T15:43:58Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; force Haskell code generation\n+\n+    cd ~/github\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow\n+    bazel build ledger-api/grpc-definitions:google-protobuf-haskellpb-sources ledger-api/grpc-definitions:google-rpc-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources-admin ledger-api/grpc-definitions:ledger-api-haskellpb-sources-testing"
  },
  {
    "id" : "2a500f69-3c26-46d7-a590-8c4340e50ba8",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "595d9673-5846-40a4-9180-6647068dfcb9",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n    git clone -b v1.22.1 https://github.com/grpc/grpc\r\n```\r\nand then you don't need the additional `git checkout` step below",
        "createdAt" : "2019-09-05T12:42:41Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "44f53d61-683e-4389-baa6-adf9aebf9461",
        "parentId" : "595d9673-5846-40a4-9180-6647068dfcb9",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-09-06T15:36:46Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc"
  },
  {
    "id" : "64abdaf3-921f-4576-b53c-cbdde19e8366",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "c58b4e29-dd26-41b6-9ce7-456d485dff83",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-09-05T12:42:52Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1"
  },
  {
    "id" : "55617de0-4a2e-455b-983f-19fae9ddf6cf",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "b1b4864d-a727-4eaf-a25d-c6041d1ea34e",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "most people will not have `direnv` installed, so probably better to just enale the dev-env once as we do on CI\r\n```suggestion\r\n    bash\r\n    eval $(dev-env/bin/dade-assist)\r\n```\r\n(extra `bash` to create a new shell, so they can then undo the `dade assist` call by typing exit; it may be worth explaining that in text around the code block)",
        "createdAt" : "2019-09-05T12:45:24Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd317868-d5ca-4b0b-b997-9a516f19e6e2",
        "parentId" : "b1b4864d-a727-4eaf-a25d-c6041d1ea34e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I tried this, but I still needed `direnv allow`.",
        "createdAt" : "2019-09-06T15:37:24Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8bc0dfe2-9912-4af2-b392-f9c65c5097f2",
        "parentId" : "b1b4864d-a727-4eaf-a25d-c6041d1ea34e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "so I didn't make the change you suggested",
        "createdAt" : "2019-09-06T15:50:05Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c2a16b6d-b0b1-4a41-88e5-f42f699d5801",
        "parentId" : "b1b4864d-a727-4eaf-a25d-c6041d1ea34e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Are you sure that you needed to do this? If you have `direnv` installed it will ask you to run `direnv allow` but if you don’t do that and run the commands suggested by @garyverhaegen-da it should work fine without that. If it doesn’t we should figure out why it doesn’t work since that’s what we recommend in our readme.",
        "createdAt" : "2019-09-09T06:57:37Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; force Haskell code generation\n+\n+    cd ~/github\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow"
  },
  {
    "id" : "59773a38-efb2-4b8b-ba6d-f26c10a0ba85",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "396dcf32-63d6-49b6-8885-83533f582c71",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n    bazel build ledger-api/grpc-definitions:google-protobuf-haskellpb-sources ledger-api/grpc-definitions:google-rpc-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources-admin ledger-api/grpc-definitions:ledger-api-haskellpb-sources-testing\r\n    exit\r\n```",
        "createdAt" : "2019-09-05T12:45:35Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da4a937b-40f6-4505-b64a-c41cae3b958a",
        "parentId" : "396dcf32-63d6-49b6-8885-83533f582c71",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "didn't do the `bash` ... `exit`",
        "createdAt" : "2019-09-06T15:37:46Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; force Haskell code generation\n+\n+    cd ~/github\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow\n+    bazel build ledger-api/grpc-definitions:google-protobuf-haskellpb-sources ledger-api/grpc-definitions:google-rpc-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources-admin ledger-api/grpc-definitions:ledger-api-haskellpb-sources-testing"
  },
  {
    "id" : "d9825c52-0599-45a1-bdbe-22636aae4ac2",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "32350143-b4d8-4492-b8be-4d690981145b",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n    cd $(mktemp -d)\r\n```",
        "createdAt" : "2019-09-05T12:46:09Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05630fab-2bb7-4be6-8337-3a63042788a3",
        "parentId" : "32350143-b4d8-4492-b8be-4d690981145b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I played around with using `$(mktemp -d)` in the instuctions... but in the end it seemed to make things less clear, so I went back to `/tmp'\r\n\r\nBut overall, the instructions are simpler than before.\r\n\r\nThe instructions no longer have a step to patch the `stack.yaml` copied from the `nim` example with the location of the `daml-ledger` package... because the original file assumes the package has been exported to `/tmp`, and that matches where the instructions export it to!\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-09-06T15:49:33Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : 59,
    "diffHunk" : "@@ -21,21 +21,55 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be build as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage.\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.22.1`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download and build grpc at version 1.22.1\n+\n+    cd ~/github\n+    git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n+    cd grpc\n+    git checkout v1.22.1\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; force Haskell code generation\n+\n+    cd ~/github\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow\n+    bazel build ledger-api/grpc-definitions:google-protobuf-haskellpb-sources ledger-api/grpc-definitions:google-rpc-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources ledger-api/grpc-definitions:ledger-api-haskellpb-sources-admin ledger-api/grpc-definitions:ledger-api-haskellpb-sources-testing\n+\n+\n+## Write a DAML Ledger App in Haskell (or copy one!)\n+\n+    cd /tmp"
  },
  {
    "id" : "458055b1-fdf7-4d1f-b5e0-f64c5210efc2",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "caa0606b-14ca-4177-8c3d-c3e3ffe1b1b3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It might be worth pointing out explicitly that `stack` is required to even generate the package whereas installing `grpc` is something that you have to do to use the generated package but not to generate it.",
        "createdAt" : "2019-09-09T06:51:38Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7961ce8a-97c1-4fb4-91c9-624c53c9b9ea",
        "parentId" : "caa0606b-14ca-4177-8c3d-c3e3ffe1b1b3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, did this",
        "createdAt" : "2019-09-09T11:26:37Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,49 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be exported as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage. Instructions for working with the daml repo can be found here: https://github.com/digital-asset/daml\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed."
  },
  {
    "id" : "dd7a47f7-abb5-4218-93bf-9ae57e477cc0",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "194ac14e-6c38-4d24-a15b-16e98586f3fc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What I did personally is to use something like `make prefix=$HOME/grpc install`. That has the advantage that you don’t have to keep the sources around. But I’m also fine to keep it this way if it works.",
        "createdAt" : "2019-09-09T06:55:54Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "180edec2-cd11-4c9a-a4c7-3db688ae1c78",
        "parentId" : "194ac14e-6c38-4d24-a15b-16e98586f3fc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yeah. I changed the process and instructions to do a `make install`\r\nIt makes things much simpler!\r\nI chose `/usr/local/grpc` to match the `stack.yaml`\r\nAnd this way there is no need for the `sed` step in the instructions.",
        "createdAt" : "2019-09-09T11:28:58Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b0b28f9a-7b87-4169-a821-042bc2207017",
        "parentId" : "194ac14e-6c38-4d24-a15b-16e98586f3fc",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Touching `/usr/local` does require root access on many systems though :(",
        "createdAt" : "2019-09-09T12:51:22Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43fbfe6a-b4e4-4170-b6c9-a9e37b72e1af",
        "parentId" : "194ac14e-6c38-4d24-a15b-16e98586f3fc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I know. But they don't have to follow the instructions exactly.",
        "createdAt" : "2019-09-09T13:07:33Z",
        "updatedAt" : "2019-09-09T13:07:33Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : 46,
    "diffHunk" : "@@ -21,21 +21,49 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be exported as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage. Instructions for working with the daml repo can be found here: https://github.com/digital-asset/daml\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.23.0`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download (somewhere permanent) and build grpc at version 1.23.0\n+\n+    git clone -b v1.23.0 https://github.com/grpc/grpc\n+    cd grpc\n+    GRPC=$(pwd)                         # for later\n+    git submodule update --init\n+    make"
  },
  {
    "id" : "6a1e531b-671e-40ef-83ac-9952fae164a1",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "41603f6b-13f4-4665-bb0e-49e3141a65df",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Personally I find double quotes more intuitive than ending the single quotes around the variable and they avoid issues where `$GRPC` has a space in it.",
        "createdAt" : "2019-09-09T06:58:47Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73f47953-547c-4c4e-990f-2dcf7527d3d0",
        "parentId" : "41603f6b-13f4-4665-bb0e-49e3141a65df",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes, double quotes are simpler.  But I removed the `sed` step now",
        "createdAt" : "2019-09-09T11:29:28Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,49 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be exported as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage. Instructions for working with the daml repo can be found here: https://github.com/digital-asset/daml\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.23.0`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download (somewhere permanent) and build grpc at version 1.23.0\n+\n+    git clone -b v1.23.0 https://github.com/grpc/grpc\n+    cd grpc\n+    GRPC=$(pwd)                         # for later\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; and export the daml-ledger package\n+\n+    cd /tmp\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow\n+    language-support/hs/bindings/export-package.sh /tmp\n+\n+## Write a DAML Ledger App in Haskell (or copy one!)\n+\n+    cd /tmp\n+    cp -rp /tmp/daml/language-support/hs/bindings/examples/nim nim\n+    cd nim\n+\n+## Adjust `stack.yaml` to find `grpc`\n+\n+    sed -i 's,/usr/local/grpc/lib,'$GRPC'/libs/opt,' stack.yaml"
  },
  {
    "id" : "03b4c004-7d31-4d67-ac8d-e8846baa3a68",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "8bab9a34-5354-4b12-a595-f4d308a07509",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think it would be good to point out here that the reason this works is that `nim`’s `stack.yaml` assumes that the sdist tarball is in `/tmp`. Otherwise, people might get confused if they move things around.",
        "createdAt" : "2019-09-09T06:59:45Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6553affe-e472-48c0-9c9f-848026a9b929",
        "parentId" : "8bab9a34-5354-4b12-a595-f4d308a07509",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. did this",
        "createdAt" : "2019-09-09T11:29:49Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : 62,
    "diffHunk" : "@@ -21,21 +21,49 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be exported as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage. Instructions for working with the daml repo can be found here: https://github.com/digital-asset/daml\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed.\n+We are currently using gRPC version `1.23.0`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+Note, the `grpc` build instructions warn against doing a global install:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you follow this advice, then you must adjust `extra-lib-dirs` in your `stack.yaml` config. This is explicated in the detailed instructions below.\n+\n+\n+## Download (somewhere permanent) and build grpc at version 1.23.0\n+\n+    git clone -b v1.23.0 https://github.com/grpc/grpc\n+    cd grpc\n+    GRPC=$(pwd)                         # for later\n+    git submodule update --init\n+    make\n+\n+## Clone daml repo; and export the daml-ledger package\n+\n+    cd /tmp\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow\n+    language-support/hs/bindings/export-package.sh /tmp\n+\n+## Write a DAML Ledger App in Haskell (or copy one!)\n+\n+    cd /tmp\n+    cp -rp /tmp/daml/language-support/hs/bindings/examples/nim nim\n+    cd nim\n+\n+## Adjust `stack.yaml` to find `grpc`\n+\n+    sed -i 's,/usr/local/grpc/lib,'$GRPC'/libs/opt,' stack.yaml\n+\n+## Build\n+\n+    stack build"
  },
  {
    "id" : "bba79a2c-8a9d-4e40-8399-85871194fe81",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "80ba9075-c76f-4341-9972-42d1f268121d",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Random extra newline here in the middle of `location`.",
        "createdAt" : "2019-09-09T12:53:50Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a19ea345-6d69-4f5c-a97a-b08e0f930ceb",
        "parentId" : "80ba9075-c76f-4341-9972-42d1f268121d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "nice spot, thanks",
        "createdAt" : "2019-09-09T13:05:37Z",
        "updatedAt" : "2019-09-09T13:05:37Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,46 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be exported as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage. Instructions for working with the daml repo can be found here: https://github.com/digital-asset/daml\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed. (`grpc` is not required to generate the `daml-ledger` package, but it is required to use it).\n+\n+We are currently using gRPC version `1.23.0`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+In the instructions below we do `make install` for grpc despite the warning from the `grpc` build instructions:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you decide against the `make install`, or choose a different install location, you will need to adjust the settings of `extra-lib-dirs` and `extra-include-dirs` in your `stack.yaml` config.\n+\n+Also, in the instructions below we export the `daml-ledger` package to `/tmp` which matches the locat\n+ion declared in the `stack.yaml` of the example application `nim`. If you export somewhere else, you will need to adapt your `stack.yaml`"
  },
  {
    "id" : "6ac0fdc0-2a04-4a89-82a3-d8b099001115",
    "prId" : 2769,
    "comments" : [
      {
        "id" : "ca479008-c377-446b-bcb2-2491142e22f5",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n```\r\nThe next line takes care of initializing the environment, there is no need to do both.",
        "createdAt" : "2019-09-09T12:56:20Z",
        "updatedAt" : "2019-09-09T13:05:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3751c927-4509-4316-b404-7736f3f13481",
        "parentId" : "ca479008-c377-446b-bcb2-2491142e22f5",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I wasn't sure. Removed it now.",
        "createdAt" : "2019-09-09T13:06:12Z",
        "updatedAt" : "2019-09-09T13:06:12Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2840f59983348b1d315b9a72962459f74f8d8da7",
    "line" : null,
    "diffHunk" : "@@ -21,21 +21,46 @@ You can find some usage examples\n [here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n [here](/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs).\n \n-Using these bindings **outside of this repository** can be a bit\n-tricky since there are quite a few packages required that are not\n-published to Hackage at the moment.\n-\n-To make things a bit easier there is a `build_packages.sh` script in\n-this directory that you can run as follows: `./build_packages.sh\n-TARGET_DIR`.  This will build the tarballs for all cabal packages and\n-put them in `TARGET_DIR`. If `TARGET_DIR` does not already contain a\n-`cabal.project` file, it will also create a `cabal.project` file that\n-references the created tarballs so all dependencies should be resolved\n-properly. You will also need to install gRPC 1.22, see\n-https://github.com/grpc/grpc/blob/master/BUILDING.md for installation\n-instructions. If you install it in a non-standard location, you need\n-to adjust extra-lib-dirs and extra-include-dirs for\n-grpc-haskell-core. The default `cabal.project` file contains an\n-example of how to do this.\n-\n-The main package for the ledger bindings is called `daml-ledger`.\n+\n+# Using these bindings **outside of this repository**\n+\n+*Note: These instructions document the current process. We do plan make it simpler!*\n+\n+These bindings can be exported as a standalone Haskell package `daml-ledger` using `stack`. Currently, `stack` references the code directly in the `daml` repo. The only annoyance is that part of the Haskell code for `daml-ledger` is generated from `.proto` files, and this generation step must be performed using the `bazel` build. We plan to simplify this step by directly providing `daml-ledger` as a package on hackage. Instructions for working with the daml repo can be found here: https://github.com/digital-asset/daml\n+\n+As well as `stack`, the only other prerequisite is to have `grpc` installed. (`grpc` is not required to generate the `daml-ledger` package, but it is required to use it).\n+\n+We are currently using gRPC version `1.23.0`. To install `grpc`  requires building `grpc` from source (really!). See detailed instructions here: https://github.com/grpc/grpc/blob/master/BUILDING.md.\n+\n+In the instructions below we do `make install` for grpc despite the warning from the `grpc` build instructions:\n+\n+> *\"WARNING: After installing with make install there is no easy way to uninstall, which can cause issues if you later want to remove the grpc and/or protobuf installation or upgrade to a newer version.\"*\n+\n+If you decide against the `make install`, or choose a different install location, you will need to adjust the settings of `extra-lib-dirs` and `extra-include-dirs` in your `stack.yaml` config.\n+\n+Also, in the instructions below we export the `daml-ledger` package to `/tmp` which matches the locat\n+ion declared in the `stack.yaml` of the example application `nim`. If you export somewhere else, you will need to adapt your `stack.yaml`\n+\n+## Download and build grpc at version 1.23.0\n+\n+    git clone -b v1.23.0 https://github.com/grpc/grpc\n+    cd grpc\n+    git submodule update --init\n+    make\n+    make prefix=/usr/local/grpc install\n+\n+## Clone daml repo, and export the daml-ledger package\n+\n+    cd /tmp\n+    git clone https://github.com/digital-asset/daml.git\n+    cd daml\n+    direnv allow"
  },
  {
    "id" : "19f939ce-8c50-49d1-b171-022f1999a89c",
    "prId" : 2340,
    "comments" : [
      {
        "id" : "b7c7bd43-1f26-485f-853e-42c111172ea0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would make the `in this repo` part bold and maybe point out explicitly that this is only for this repo since I don’t expect that most people will use it in the repo.",
        "createdAt" : "2019-07-30T15:43:47Z",
        "updatedAt" : "2019-07-30T15:49:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d264371-d4e4-4042-8ef1-456dfa323076",
        "parentId" : "b7c7bd43-1f26-485f-853e-42c111172ea0",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Good point. I've also switched the order, which I  believe reads better as a logical sequence: how the code is structured, how to use in repo, how to use out of repo. (As opposed to previous commit which had how to use outside, how code is structured, how to use inside.)",
        "createdAt" : "2019-07-30T15:51:51Z",
        "updatedAt" : "2019-07-30T15:51:51Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b652cd4323af814ef114ef2c5aff3999d6d3328e",
    "line" : 17,
    "diffHunk" : "@@ -18,3 +18,24 @@ grpc-haskell-core. The default `cabal.project` file contains an\n example of how to do this.\n \n The main package for the ledger bindings is called `daml-ledger`.\n+\n+There is currently no separate documentation for the haskell ledger bindings,\n+over and above the existing ledger API doc.\n+\n+The [.proto files](/ledger-api/grpc-definitions/com/digitalasset/ledger/api/v1)\n+are the best primary source of truth for the API. The [Haskell\n+bindings](/language-support/hs/bindings/src/DA/Ledger/Services) match closely\n+the names of the services and RPCs, but of course you get much better\n+[types](/language-support/hs/bindings/src/DA/Ledger/Types.hs).\n+\n+The entry point is at [DA.Ledger](/language-support/hs/bindings/src/DA/Ledger.hs).\n+\n+To use the bindings in this repo, you need the following `BUILD` dep:\n+```\n+\"//language-support/hs/bindings:hs-ledger\","
  },
  {
    "id" : "f0d29372-3d8c-4e96-86eb-48cdb9ae2ee2",
    "prId" : 2340,
    "comments" : [
      {
        "id" : "0e2a7e3e-43a2-4639-ae5d-2e0caf5640a9",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This link is broken for me",
        "createdAt" : "2019-07-30T16:24:30Z",
        "updatedAt" : "2019-07-30T16:25:03Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5f712ee-83df-4713-869d-d338d0299c71",
        "parentId" : "0e2a7e3e-43a2-4639-ae5d-2e0caf5640a9",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It should be `/language-support/hs/bindings/examples/chat/src/DA/Ledger/App/Chat/ChatLedger.hs`",
        "createdAt" : "2019-07-31T07:46:53Z",
        "updatedAt" : "2019-07-31T07:47:07Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6a2d543-a17a-46d9-8d92-de8ea869dd02",
        "parentId" : "0e2a7e3e-43a2-4639-ae5d-2e0caf5640a9",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Thanks for catching this!",
        "createdAt" : "2019-07-31T09:36:40Z",
        "updatedAt" : "2019-07-31T09:36:40Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e213206f-15a2-407a-bf78-d73acbc910e8",
        "parentId" : "0e2a7e3e-43a2-4639-ae5d-2e0caf5640a9",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Fixed in #2349.",
        "createdAt" : "2019-07-31T09:38:35Z",
        "updatedAt" : "2019-07-31T09:38:35Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b652cd4323af814ef114ef2c5aff3999d6d3328e",
    "line" : 23,
    "diffHunk" : "@@ -1,6 +1,27 @@\n # Usage\n \n-Using the ledger bindings outside of this repository can be a bit\n+There is currently no separate documentation for the haskell ledger bindings,\n+over and above the existing ledger API doc.\n+\n+The [.proto files](/ledger-api/grpc-definitions/com/digitalasset/ledger/api/v1)\n+are the best primary source of truth for the API. The [Haskell\n+bindings](/language-support/hs/bindings/src/DA/Ledger/Services) match closely\n+the names of the services and RPCs, but of course you get much better\n+[types](/language-support/hs/bindings/src/DA/Ledger/Types.hs).\n+\n+The entry point is at [DA.Ledger](/language-support/hs/bindings/src/DA/Ledger.hs).\n+\n+To use the bindings **in this repo**, you need the following `BUILD` dep:\n+```\n+\"//language-support/hs/bindings:hs-ledger\",\n+```\n+And then you can import the `DA.Ledger` module in your Haskell code.\n+\n+You can find some usage examples\n+[here](/language-support/hs/bindings/test/DA/Ledger/Tests.hs) and\n+[here](/language-support/hs/bindings/examples/chat/src/DA/Chat/ChatLedger.hs)."
  }
]