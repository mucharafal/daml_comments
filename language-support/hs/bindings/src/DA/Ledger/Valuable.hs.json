[
  {
    "id" : "1bde6140-eb4d-4789-9cb3-6a17094f7c93",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "56b3557a-38cf-4854-b66b-5c1122c7021b",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "IsLedgerValue?",
        "createdAt" : "2019-06-25T19:56:59Z",
        "updatedAt" : "2019-06-25T19:58:01Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d3c549d3-1cda-4e11-99c4-278831dcdb1b",
        "parentId" : "56b3557a-38cf-4854-b66b-5c1122c7021b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. Made this change",
        "createdAt" : "2019-06-26T09:28:58Z",
        "updatedAt" : "2019-06-26T09:28:58Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "083986803f9b3170c769c8f1a0c16e4556e24542",
    "line" : 5,
    "diffHunk" : "@@ -3,7 +3,7 @@\n \n {-# LANGUAGE OverloadedStrings #-}\n \n-module DA.Ledger.Valuable(\n+module DA.Ledger.Valuable( -- TODO: Better name!"
  },
  {
    "id" : "55f6bf93-0677-4ee7-b64c-4406b6151a9d",
    "prId" : 1572,
    "comments" : [
      {
        "id" : "232a622c-2a72-40af-8101-d3c7f3502c08",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I don't like the name Valuable, since it confuses \"can be converted to a value\" with \"has monetary value\", and in our domain, we often mean the latter. How about `IsValue`?",
        "createdAt" : "2019-06-10T13:25:08Z",
        "updatedAt" : "2019-06-10T13:25:24Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "acd85810-49ca-4882-ac18-1423cfbbaef5",
        "parentId" : "232a622c-2a72-40af-8101-d3c7f3502c08",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yeah, I agree `Valuable` is a not-that funny pun. Couldn't think of a snappy name.\r\n`IsValue` is still a bit vague\r\nHow about `IsDamlValue` ?",
        "createdAt" : "2019-06-10T15:35:11Z",
        "updatedAt" : "2019-06-10T15:35:11Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1c5830ec-17f2-4cc9-ae3a-0e4704fbabe2",
        "parentId" : "232a622c-2a72-40af-8101-d3c7f3502c08",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Sure - better to be explicit than funny ðŸ˜º .",
        "createdAt" : "2019-06-10T17:27:40Z",
        "updatedAt" : "2019-06-10T17:28:22Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66505802fdfef3cae7f19d041c1f552cc7a53963",
    "line" : 7,
    "diffHunk" : "@@ -7,6 +7,7 @@ module DA.Ledger.Valuable(\n     Valuable(..), -- types which can be converted to/from a Ledger API Value\n     ) where\n \n+import Data.Text.Lazy (Text)\n import DA.Ledger.Types\n \n class Valuable a where"
  },
  {
    "id" : "e65d7f4e-e920-48c6-83c4-6ba26168958d",
    "prId" : 1342,
    "comments" : [
      {
        "id" : "1f38584d-2364-4191-8e7c-6caa49a94c7d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It would be better to label the fields of `RecordField` and use the selector here.",
        "createdAt" : "2019-05-24T12:47:23Z",
        "updatedAt" : "2019-05-24T12:47:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a985974a-3a20-4a2b-9083-1e42829cce96",
        "parentId" : "1f38584d-2364-4191-8e7c-6caa49a94c7d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "The fields of `RecordValue` are labelled. As seen by the use of curly braces in the fragment:\r\n`map (\\RecordField{value} -> value)`\r\nI guess you think `map field` would be nicer.\r\nTrouble is that `value` is used as a field name in multiple data records.\r\nSo this change is ambiguous.\r\nBut we can fix this by changing to a more specific label. `fieldValue` ",
        "createdAt" : "2019-05-24T15:42:08Z",
        "updatedAt" : "2019-05-24T15:42:08Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "59792291-7036-4f0c-8f5a-43d882a74ed5",
        "parentId" : "1f38584d-2364-4191-8e7c-6caa49a94c7d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Aside, do you find it slightly confusing that we are discussing Haskell record/field syntax\r\nin an example which is modelling DAML records/fields ? :)",
        "createdAt" : "2019-05-24T15:43:25Z",
        "updatedAt" : "2019-05-24T15:43:25Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 27,
    "diffHunk" : "@@ -0,0 +1,40 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE OverloadedStrings #-}\n+\n+module DA.Ledger.Valuable(\n+    Valuable(..), -- types which can be converted to/from a Ledger API Value\n+    ) where\n+\n+import DA.Ledger.Types\n+\n+class Valuable a where\n+    toValue :: a -> Value\n+    fromValue :: Value -> Maybe a\n+\n+    toRecord :: a -> Record\n+    toRecord =\n+        Record Nothing\n+        . map (\\v -> RecordField {label = \"\", value = v})\n+        . (\\case VList vs -> vs; v -> [v])\n+        . toValue\n+\n+    fromRecord :: Record -> Maybe a\n+    fromRecord =\n+        fromValue\n+        . VList\n+        . map (\\RecordField{value} -> value)"
  },
  {
    "id" : "58b2fede-8919-4246-8437-7e80c46a9495",
    "prId" : 1342,
    "comments" : [
      {
        "id" : "0c9f64de-b16d-4a71-b6a2-9f5bb2a2e090",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I find this hard to read. I'd have written something straightforward like\r\n```haskell\r\nfromValue = \\case\r\n  VList vs -> mapM fromValue vs\r\n  _ -> Nothing\r\n```\r\nI must admit, I'm not the biggest fan of the point free style in many cases.",
        "createdAt" : "2019-05-24T12:50:02Z",
        "updatedAt" : "2019-05-24T12:50:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c2be7a29-eb36-4cfb-b0a6-36473e9bf4d1",
        "parentId" : "0c9f64de-b16d-4a71-b6a2-9f5bb2a2e090",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "That's funny. Because I only introduced the =<< in response to a suggestion from HLint.\r\nI also am not a big fan of point free in many cases.\r\nAlthough I do find myself shifting in that direction:  Haskell infection perhaps? :)",
        "createdAt" : "2019-05-24T13:12:18Z",
        "updatedAt" : "2019-05-24T13:12:19Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b524136a-1ae0-4db8-bea3-4553ce2e3aa6",
        "parentId" : "0c9f64de-b16d-4a71-b6a2-9f5bb2a2e090",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I originally wrote:\r\n`fromValue = join . fmap (mapM fromValue) . (\\case VList vs -> Just vs; _ -> Nothing)`\r\nbefore HLint's suggestion. But clearly your suggestion is the simplest/best.",
        "createdAt" : "2019-05-24T15:16:26Z",
        "updatedAt" : "2019-05-24T15:16:26Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8064084c-0fc1-4392-9928-74f8c18b984d",
        "parentId" : "0c9f64de-b16d-4a71-b6a2-9f5bb2a2e090",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I think HLint's suggestion makes your version better - a combo of join/fmap is very confusing, but it's still not as clear as Martin's.",
        "createdAt" : "2019-05-25T08:00:20Z",
        "updatedAt" : "2019-05-25T08:00:21Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 40,
    "diffHunk" : "@@ -0,0 +1,40 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE OverloadedStrings #-}\n+\n+module DA.Ledger.Valuable(\n+    Valuable(..), -- types which can be converted to/from a Ledger API Value\n+    ) where\n+\n+import DA.Ledger.Types\n+\n+class Valuable a where\n+    toValue :: a -> Value\n+    fromValue :: Value -> Maybe a\n+\n+    toRecord :: a -> Record\n+    toRecord =\n+        Record Nothing\n+        . map (\\v -> RecordField {label = \"\", value = v})\n+        . (\\case VList vs -> vs; v -> [v])\n+        . toValue\n+\n+    fromRecord :: Record -> Maybe a\n+    fromRecord =\n+        fromValue\n+        . VList\n+        . map (\\RecordField{value} -> value)\n+        . fields\n+\n+instance Valuable Int where\n+    toValue = VInt\n+    fromValue = \\case VInt x -> Just x; _ -> Nothing\n+\n+instance Valuable Party where\n+    toValue = VParty\n+    fromValue = \\case VParty x -> Just x; _ -> Nothing\n+\n+instance Valuable a => Valuable [a] where\n+    toValue = VList . map toValue\n+    fromValue = (mapM fromValue =<<) . \\case VList vs -> Just vs; _ -> Nothing"
  }
]