[
  {
    "id" : "974c7f9b-bbcf-44b5-a15f-c7cba0a43a9d",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "e7658da9-482a-4276-940c-3c1071916972",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "IsLedgerValue?",
        "createdAt" : "2019-06-25T19:56:59Z",
        "updatedAt" : "2019-06-25T19:58:01Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c7c1949b-1ba4-40a1-af5f-19e9284fa05a",
        "parentId" : "e7658da9-482a-4276-940c-3c1071916972",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. Made this change",
        "createdAt" : "2019-06-26T09:28:58Z",
        "updatedAt" : "2019-06-26T09:28:58Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "083986803f9b3170c769c8f1a0c16e4556e24542",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@{-# LANGUAGE OverloadedStrings #-}\n\nmodule DA.Ledger.Valuable( -- TODO: Better name!\n    Valuable(..), -- types which can be converted to/from a Ledger API Value\n    ) where"
  },
  {
    "id" : "2d35b520-0c36-44b6-9cc5-82a3e713c4f5",
    "prId" : 1572,
    "comments" : [
      {
        "id" : "b42e8cff-b574-43db-9d4c-893a1e2a7d6e",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I don't like the name Valuable, since it confuses \"can be converted to a value\" with \"has monetary value\", and in our domain, we often mean the latter. How about `IsValue`?",
        "createdAt" : "2019-06-10T13:25:08Z",
        "updatedAt" : "2019-06-10T13:25:24Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a280f1b2-ce11-4d18-a120-a193a1d2a46d",
        "parentId" : "b42e8cff-b574-43db-9d4c-893a1e2a7d6e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yeah, I agree `Valuable` is a not-that funny pun. Couldn't think of a snappy name.\r\n`IsValue` is still a bit vague\r\nHow about `IsDamlValue` ?",
        "createdAt" : "2019-06-10T15:35:11Z",
        "updatedAt" : "2019-06-10T15:35:11Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "173bd198-a95c-44dc-bcb1-e1d5371a60c0",
        "parentId" : "b42e8cff-b574-43db-9d4c-893a1e2a7d6e",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Sure - better to be explicit than funny ðŸ˜º .",
        "createdAt" : "2019-06-10T17:27:40Z",
        "updatedAt" : "2019-06-10T17:28:22Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66505802fdfef3cae7f19d041c1f552cc7a53963",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +11,15 @@import DA.Ledger.Types\n\nclass Valuable a where\n    toValue :: a -> Value\n    fromValue :: Value -> Maybe a"
  },
  {
    "id" : "0e15a804-4159-42a0-8337-5da8fa54ed39",
    "prId" : 1342,
    "comments" : [
      {
        "id" : "01c4b440-1a38-415e-812e-a6a342f94e2a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It would be better to label the fields of `RecordField` and use the selector here.",
        "createdAt" : "2019-05-24T12:47:23Z",
        "updatedAt" : "2019-05-24T12:47:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "680111ff-a489-4ea0-a83d-e0d1aedc2bf1",
        "parentId" : "01c4b440-1a38-415e-812e-a6a342f94e2a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "The fields of `RecordValue` are labelled. As seen by the use of curly braces in the fragment:\r\n`map (\\RecordField{value} -> value)`\r\nI guess you think `map field` would be nicer.\r\nTrouble is that `value` is used as a field name in multiple data records.\r\nSo this change is ambiguous.\r\nBut we can fix this by changing to a more specific label. `fieldValue` ",
        "createdAt" : "2019-05-24T15:42:08Z",
        "updatedAt" : "2019-05-24T15:42:08Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "600d830d-8b41-4b23-9c20-71c8591b5f83",
        "parentId" : "01c4b440-1a38-415e-812e-a6a342f94e2a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Aside, do you find it slightly confusing that we are discussing Haskell record/field syntax\r\nin an example which is modelling DAML records/fields ? :)",
        "createdAt" : "2019-05-24T15:43:25Z",
        "updatedAt" : "2019-05-24T15:43:25Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@        fromValue\n        . VList\n        . map (\\RecordField{value} -> value)\n        . fields\n"
  },
  {
    "id" : "0f589997-e52a-4b5f-a00a-7b0d3a7f9945",
    "prId" : 1342,
    "comments" : [
      {
        "id" : "a1767d87-4148-4e93-8d2e-f0a3f45261cb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I find this hard to read. I'd have written something straightforward like\r\n```haskell\r\nfromValue = \\case\r\n  VList vs -> mapM fromValue vs\r\n  _ -> Nothing\r\n```\r\nI must admit, I'm not the biggest fan of the point free style in many cases.",
        "createdAt" : "2019-05-24T12:50:02Z",
        "updatedAt" : "2019-05-24T12:50:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "48f866cd-251d-4496-add2-3c9861ae16c6",
        "parentId" : "a1767d87-4148-4e93-8d2e-f0a3f45261cb",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "That's funny. Because I only introduced the =<< in response to a suggestion from HLint.\r\nI also am not a big fan of point free in many cases.\r\nAlthough I do find myself shifting in that direction:  Haskell infection perhaps? :)",
        "createdAt" : "2019-05-24T13:12:18Z",
        "updatedAt" : "2019-05-24T13:12:19Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c152033d-b974-42d9-97dd-d0ec1b8ccd1e",
        "parentId" : "a1767d87-4148-4e93-8d2e-f0a3f45261cb",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I originally wrote:\r\n`fromValue = join . fmap (mapM fromValue) . (\\case VList vs -> Just vs; _ -> Nothing)`\r\nbefore HLint's suggestion. But clearly your suggestion is the simplest/best.",
        "createdAt" : "2019-05-24T15:16:26Z",
        "updatedAt" : "2019-05-24T15:16:26Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6f4b7c74-e599-4aa1-ad72-b4e78e330b49",
        "parentId" : "a1767d87-4148-4e93-8d2e-f0a3f45261cb",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I think HLint's suggestion makes your version better - a combo of join/fmap is very confusing, but it's still not as clear as Martin's.",
        "createdAt" : "2019-05-25T08:00:20Z",
        "updatedAt" : "2019-05-25T08:00:21Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@instance Valuable a => Valuable [a] where\n    toValue = VList . map toValue\n    fromValue = (mapM fromValue =<<) . \\case VList vs -> Just vs; _ -> Nothing"
  }
]