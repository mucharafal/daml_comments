[
  {
    "id" : "4f3164c9-1dfd-4459-ad37-c49b829147b4",
    "prId" : 3736,
    "comments" : [
      {
        "id" : "c24c530a-f078-4341-bf08-5a5ebdc70210",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Rather than stripping bearer here only to prepend it later, we should pass it along verbatim. The change to the format in the integration tests is correct, so this is only about how we process the contents of that file.",
        "createdAt" : "2019-12-04T17:05:10Z",
        "updatedAt" : "2019-12-05T08:44:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c62b2383-e381-40d5-aad7-a8900b8d04b9",
        "parentId" : "c24c530a-f078-4341-bf08-5a5ebdc70210",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok.\r\nso we should make no attempt to validate the token before passing in on to the ledger?",
        "createdAt" : "2019-12-04T17:08:41Z",
        "updatedAt" : "2019-12-05T08:44:42Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0afb885-0c6f-4a30-ad83-8941d209896c",
        "parentId" : "c24c530a-f078-4341-bf08-5a5ebdc70210",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "we discussed, the answer is \"yes\" - no validation\r\ncode fixed\r\n",
        "createdAt" : "2019-12-04T18:19:29Z",
        "updatedAt" : "2019-12-05T08:44:42Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d36c29e380cb356866501127c22a4dccd552d51a",
    "line" : null,
    "diffHunk" : "@@ -4,21 +4,32 @@\n module DA.Ledger.Jwt(\n   Jwt,\n   tryCreateFromString,\n-  toString\n+  tryCreateFromBearerString,\n+  toBearerString\n   ) where\n \n import Data.List.Extra (splitOn)\n import Data.String.Utils (strip)\n \n newtype Jwt = Jwt { toString :: String }\n \n+toBearerString :: Jwt -> String\n+toBearerString s = \"Bearer \" <> toString s\n+\n+-- | catch easy user errors before sending the token to the ledger\n+tryCreateFromBearerString :: String -> Either String Jwt\n+tryCreateFromBearerString s0 = do\n+  let s = strip s0\n+  case splitOn \" \" s of\n+    [\"Bearer\",s] -> tryCreateFromString s"
  },
  {
    "id" : "4ae42aa2-174a-4799-bcb4-9bad70e5e992",
    "prId" : 3561,
    "comments" : [
      {
        "id" : "b50512b1-b0e5-4b33-b45f-86c13d04fc32",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we depend on the `jwt` library but then have our own type and validation logic instead of using something like jwt’s [decode](https://hackage.haskell.org/package/jwt-0.10.0/docs/Web-JWT.html#v:decode)?",
        "createdAt" : "2019-11-21T08:16:06Z",
        "updatedAt" : "2019-11-21T14:35:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5921cf2292c982f7e588e3d1c6fc9f284d4537ea",
    "line" : 10,
    "diffHunk" : "@@ -0,0 +1,23 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Ledger.Jwt(\n+  Jwt,\n+  tryCreateFromString,\n+  toString\n+  ) where\n+\n+import Data.List.Extra (splitOn)"
  },
  {
    "id" : "4546edeb-182e-4a2e-808a-522bdbdbdfef",
    "prId" : 3561,
    "comments" : [
      {
        "id" : "147766e6-3744-4107-9a0a-203b922dfaa8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is the only purpose of this validation logic to catch easy user errors before sending the token to the ledger and therefore potentially provide better error messages? If so, would be good to point this out in a comment.",
        "createdAt" : "2019-11-21T08:17:18Z",
        "updatedAt" : "2019-11-21T14:35:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5921cf2292c982f7e588e3d1c6fc9f284d4537ea",
    "line" : 20,
    "diffHunk" : "@@ -0,0 +1,23 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Ledger.Jwt(\n+  Jwt,\n+  tryCreateFromString,\n+  toString\n+  ) where\n+\n+import Data.List.Extra (splitOn)\n+\n+newtype Jwt = Jwt { toString :: String }\n+\n+tryCreateFromString :: String -> Either String Jwt\n+tryCreateFromString s = do\n+  validate3parts s\n+  return $ Jwt s\n+\n+validate3parts :: String -> Either String ()"
  },
  {
    "id" : "f9ac2d63-7075-406d-bb64-a9db901f20c7",
    "prId" : 3561,
    "comments" : [
      {
        "id" : "269fc8d3-1bd3-4f63-bc0e-cf4550d5c8fe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think this would be easier to read if you either use an `if` on the length or a pattern match on the actual list, e.g., \r\n```\r\ncase splitOn \".\" s of\r\n  [_, _, _] -> …\r\n  _ -> …\r\n```\r\nwhich is usually a better pattern than comparing the length anyway since it can shortcircuit once it gets passed the expected length. Admittedly, this is highly unlikely to matter here but I think the readabilty argument still applies.",
        "createdAt" : "2019-11-21T08:19:19Z",
        "updatedAt" : "2019-11-21T14:35:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5921cf2292c982f7e588e3d1c6fc9f284d4537ea",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,23 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Ledger.Jwt(\n+  Jwt,\n+  tryCreateFromString,\n+  toString\n+  ) where\n+\n+import Data.List.Extra (splitOn)\n+\n+newtype Jwt = Jwt { toString :: String }\n+\n+tryCreateFromString :: String -> Either String Jwt\n+tryCreateFromString s = do\n+  validate3parts s\n+  return $ Jwt s\n+\n+validate3parts :: String -> Either String ()\n+validate3parts s = do\n+  case length (splitOn \".\" s) of"
  }
]