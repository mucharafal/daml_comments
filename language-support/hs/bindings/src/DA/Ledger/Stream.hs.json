[
  {
    "id" : "5b57943d-de3a-4a10-b51a-cf121236a113",
    "prId" : 2096,
    "comments" : [
      {
        "id" : "328346de-c263-427f-80c4-e58874838b87",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is not safe in the presence of exceptions. You can get killed between line 131 and line 133 and you will leak the thread. You need to at least mask exceptions around 131-133. Another option would be to turn this into a callback-style function, e.g., `asyncStreamGen :: (Stream a -> IO ()) -> (Stream a -> IO r) -> IO r` which would allow you to use `withAsync` which is much easier than trying to get this right yourself.",
        "createdAt" : "2019-07-11T07:38:47Z",
        "updatedAt" : "2019-07-11T12:36:08Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1aa0443d-8ab7-47ad-b0f5-02b129b86b0c",
        "parentId" : "328346de-c263-427f-80c4-e58874838b87",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I would prefer to switch entirely to the continuation style `with..`, but currently my `nim` and `chat` apps are not structured to make use of `withGetTransactions`, but instead use `getTransactions` and explicitly close the stream. I'm not this is easy/possible to change. Which means I think we will need to keep the non-continuation style code for `asyncStreamGen`.",
        "createdAt" : "2019-07-11T08:10:13Z",
        "updatedAt" : "2019-07-11T12:36:08Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3dc37c5f-c7b4-44c6-a059-2c1f2e1856f0",
        "parentId" : "328346de-c263-427f-80c4-e58874838b87",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Added `mask_` around the entire body of `asyncStreamGen`",
        "createdAt" : "2019-07-11T12:32:38Z",
        "updatedAt" : "2019-07-11T12:36:08Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "638953034e6f609d8a4b38b0e801ac0015e339b4",
    "line" : 30,
    "diffHunk" : "@@ -120,3 +123,12 @@ streamToList stream = do\n         Left (Abnormal s) -> fail s\n         Left EOS -> return []\n         Right x -> fmap (x:) $ streamToList stream\n+\n+-- Generate a stream in an asyncronous thread\n+asyncStreamGen :: (Stream a -> IO ()) -> IO (Stream a)\n+asyncStreamGen act = do\n+    stream <- newStream"
  },
  {
    "id" : "9aaea250-ccc3-4d69-9b8a-2ed4a73fcdb6",
    "prId" : 1865,
    "comments" : [
      {
        "id" : "3d51c506-01bb-4095-b4f5-a7787d8b88f3",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Yeah, my guess is something Conduit-like is the thing you need.",
        "createdAt" : "2019-06-25T19:56:24Z",
        "updatedAt" : "2019-06-25T19:58:01Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b24bd620-99a5-4425-9bd1-f1e07aa8f832",
        "parentId" : "3d51c506-01bb-4095-b4f5-a7787d8b88f3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Maybe. But we want concurrency. Does Conduit help here?",
        "createdAt" : "2019-06-26T09:28:45Z",
        "updatedAt" : "2019-06-26T09:28:45Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "33a43435-4e81-4324-b062-9b83e4bf7ccb",
        "parentId" : "3d51c506-01bb-4095-b4f5-a7787d8b88f3",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Dunno, but it feels we're rolling more of our own than we should be.",
        "createdAt" : "2019-06-26T09:51:06Z",
        "updatedAt" : "2019-06-26T09:51:06Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "083986803f9b3170c769c8f1a0c16e4556e24542",
    "line" : 17,
    "diffHunk" : "@@ -93,3 +95,27 @@ isClosed Stream{status} =\n     readMVar status >>= \\case\n         Left closed -> return (Just closed)\n         Right _ -> return Nothing\n+\n+\n+-- Here a problem with Stream is revealed: To map one stream into another requires concurrency.\n+-- TODO: restructure processing to avoid the need for a sep Stream/PF\n+mapListStream :: (a -> IO [b]) -> Stream a -> IO (Stream b)"
  }
]