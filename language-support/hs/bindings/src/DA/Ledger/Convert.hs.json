[
  {
    "id" : "7a99e00d-e3f4-4481-99e2-6ec4f6379082",
    "prId" : 7700,
    "comments" : [
      {
        "id" : "a091d47b-e622-457d-89eb-e48ab8ff9e41",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n{-# LANGUAGE RankNTypes #-}\r\n```\r\nRank2Types is just a misleading synonym",
        "createdAt" : "2020-10-15T14:47:13Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : null,
    "diffHunk" : "@@ -1,6 +1,8 @@\n -- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n -- SPDX-License-Identifier: Apache-2.0\n \n+{-# LANGUAGE Rank2Types #-}"
  },
  {
    "id" : "ab5ab628-a705-425d-aa6b-e17238f0f944",
    "prId" : 2440,
    "comments" : [
      {
        "id" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What happens if the string has more than 10 digits after the period?",
        "createdAt" : "2019-08-07T10:56:02Z",
        "updatedAt" : "2019-08-07T10:56:43Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fed89b72-28a5-48e8-ad0d-014cf74fc9bb",
        "parentId" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I imagine it will fail.\r\nWhat does the Ledger API guarantee?",
        "createdAt" : "2019-08-07T11:05:37Z",
        "updatedAt" : "2019-08-07T11:05:38Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f86d991f-320e-4ffc-87e0-9b60f73f8760",
        "parentId" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Failing would be good, swallowing digits or rounding would be slightly scary. The current Ledger API never gives you more than 10 digits but this might change in the future. Crashing loudly if it does would be nice.",
        "createdAt" : "2019-08-07T11:39:57Z",
        "updatedAt" : "2019-08-07T11:39:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "adb8fb15-c787-449d-9d33-a45304d352d0",
        "parentId" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I did some experiments: -- `read \"123.11223344556677\"`\r\nTurns out that it does silently swallow digits! --> `123.1122334455`\r\nBut it seems this is consistent with Haskell's overall approach to fixed width decimals..\r\nFor example, writing `VDecimal 123.11223344556677`, and so invoking the fractional instance, performs the exact same truncation.",
        "createdAt" : "2019-08-08T07:35:04Z",
        "updatedAt" : "2019-08-08T07:35:04Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0f7e3b59-b822-4b8b-8a71-91d72f01a019",
        "parentId" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think being consistent with Haskell’s default approach is useful in any way here. Throwing an error is a much better option.",
        "createdAt" : "2019-08-08T07:48:46Z",
        "updatedAt" : "2019-08-08T07:48:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "68dad7fb-5ec0-48fe-8965-67607feecb5c",
        "parentId" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I wasn't suggesting it was, I was just reporting what I discovered.",
        "createdAt" : "2019-08-08T08:00:51Z",
        "updatedAt" : "2019-08-08T08:00:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "810f84bf-3c2e-4602-8d9f-45ad3bb187c6",
        "parentId" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I tried coded something which for any `a` with `Read a` and `Show a` which checks round-tripability: \r\n```\r\nreadCheckRoundTrip :: (Read a,Show a) => String -> a\r\nreadCheckRoundTrip s = if s /= s' then error msg else a\r\n  where\r\n      a = read s\r\n      s' = show a\r\n      msg = \"read does not round-trip correctly: [\" <> s <> \"] --> [\" <> s' <> \"]\"\r\n```\r\n\r\nbut is not right when there are multiple `String` reps for the same `a`, i.e. trailing `0`s when printing a fixed width number.\r\n\r\nSo perhaps we should avoid coding what surely must be a solved problem...\r\n\r\nDo you know if there is any standard support for `Fixed`  which allows checking if `read` is *safe*, i.e. does not loose precision?\r\n",
        "createdAt" : "2019-08-08T08:39:09Z",
        "updatedAt" : "2019-08-08T08:39:09Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d8099aae-d911-44b5-954a-d2cae5c1fe7e",
        "parentId" : "229a4393-1f93-41ec-b4aa-c7e71b621116",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Sadly, I don’t know of any package that provides this :disappointed: ",
        "createdAt" : "2019-08-08T09:10:38Z",
        "updatedAt" : "2019-08-08T09:10:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eabad75dbc08b599fb34c3aa1143453e577fd92b",
    "line" : 40,
    "diffHunk" : "@@ -354,7 +355,7 @@ raiseValue = \\case\n         LL.ValueSumContractId c -> (return . VContract . ContractId) c\n         LL.ValueSumList vs -> (fmap VList . raiseList raiseValue . LL.listElements) vs\n         LL.ValueSumInt64 i -> (return . VInt . fromIntegral) i\n-        LL.ValueSumDecimal t -> (return . VDecimal) t\n+        LL.ValueSumDecimal t -> (return . VDecimal . read . Text.unpack) t"
  },
  {
    "id" : "62cd6975-9474-4715-b767-ba8d4e6ced91",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "7092ecc1-473d-4e93-b920-087b612c0de1",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n        collapseErrors = either (Left . ThrewException) id\r\n```",
        "createdAt" : "2019-08-01T12:36:34Z",
        "updatedAt" : "2019-08-01T12:37:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "78d20f76-33a9-4c24-9e90-4ad2fe23c59b",
        "parentId" : "7092ecc1-473d-4e93-b920-087b612c0de1",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done, thanks",
        "createdAt" : "2019-08-05T15:36:43Z",
        "updatedAt" : "2019-08-05T15:36:44Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 83,
    "diffHunk" : "@@ -146,7 +172,14 @@ lowerRecordField = \\case\n \n -- raise\n \n-data RaiseFailureReason = Missing String | Unexpected String deriving Show\n+runRaise :: (a -> Perhaps b) -> a -> IO (Perhaps b)\n+runRaise raise a = fmap collapseErrors $ try $ evaluate $ raise a\n+    where\n+        collapseErrors :: Either SomeException (Perhaps a) -> Perhaps a\n+        collapseErrors =  either (Left . ThrewException) id"
  },
  {
    "id" : "a9e1e81d-1db1-471e-a563-b3e2a64bae72",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "6871f603-2b05-4999-9c0f-eb9b3aa125b9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    VVariant v -> LL.ValueSumVariant (lowerVariant v)\r\n```",
        "createdAt" : "2019-08-05T11:29:14Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 30,
    "diffHunk" : "@@ -113,21 +115,45 @@ lowerTimestamp = \\case\n         }\n \n lowerValue :: Value -> LL.Value\n-lowerValue = LL.Value . Just . \\case -- TODO: more cases here\n+lowerValue = LL.Value . Just . \\case\n     VRecord r -> (LL.ValueSumRecord . lowerRecord) r\n-    VVariant _ -> undefined\n+    VVariant v -> (LL.ValueSumVariant . lowerVariant) v"
  },
  {
    "id" : "cd7b37d0-b1c3-42cb-a223-82e7fd519ffd",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "14894f54-e9a8-4dcf-8cb3-9c379b9b7c55",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "FYI, the idiom we use in (most of) our code base is like:\r\n```suggestion\r\n    VTime x -> LL.ValueSumTimestamp $ fromIntegral $ unMicroSecondsSinceEpoch x\r\n```",
        "createdAt" : "2019-08-05T11:30:45Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 38,
    "diffHunk" : "@@ -113,21 +115,45 @@ lowerTimestamp = \\case\n         }\n \n lowerValue :: Value -> LL.Value\n-lowerValue = LL.Value . Just . \\case -- TODO: more cases here\n+lowerValue = LL.Value . Just . \\case\n     VRecord r -> (LL.ValueSumRecord . lowerRecord) r\n-    VVariant _ -> undefined\n+    VVariant v -> (LL.ValueSumVariant . lowerVariant) v\n     VContract c -> (LL.ValueSumContractId . unContractId) c\n     VList vs -> (LL.ValueSumList . LL.List . Vector.fromList . map lowerValue) vs\n     VInt i -> (LL.ValueSumInt64 . fromIntegral) i\n     VDecimal t -> LL.ValueSumDecimal t\n-    VString t -> LL.ValueSumText t\n-    VTimestamp _ -> undefined\n+    VText t -> LL.ValueSumText t\n+    VTime x -> (LL.ValueSumTimestamp . fromIntegral . unMicroSecondsSinceEpoch) x"
  },
  {
    "id" : "552bcddc-00b2-4fd8-a328-7170f09e9739",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "dcb18f23-fe02-4bbc-9a00-ec4496e08620",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        LL.ValueSumVariant v -> VVariant <$> raiseVariant v\r\n```",
        "createdAt" : "2019-08-05T11:38:28Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 102,
    "diffHunk" : "@@ -311,39 +344,62 @@ raiseRecordField = \\case\n         fieldValue <- perhaps \"recordFieldValue\" recordFieldValue >>= raiseValue\n         return RecordField{label,fieldValue}\n \n--- TODO: more cases here\n raiseValue :: LL.Value -> Perhaps Value\n raiseValue = \\case\n     LL.Value Nothing -> missing \"Value\"\n     LL.Value (Just sum) -> case sum of\n         LL.ValueSumRecord r -> (fmap VRecord . raiseRecord) r\n-        LL.ValueSumVariant _ -> undefined\n-        LL.ValueSumEnum _ -> undefined\n+        LL.ValueSumVariant v -> (fmap VVariant . raiseVariant) v"
  },
  {
    "id" : "61c3bcac-2afc-43d4-8aa0-38b25ed7e76b",
    "prId" : 2321,
    "comments" : [
      {
        "id" : "aceea618-3d5c-4add-83fa-c2c621b833a4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I find this incredibly hard to read because it's not clear what variables go into `Completion{..}` and which don't. I only know that both `cid` and `status` must go into the record construction since they would be unused otherwise but I'm usually too slow (or too lazy) to run the check for unused variables in my head.\r\n```suggestion\r\n         return Completion{cid, status}\r\n```\r\nThis might look like I'm contradicting myself but I don't. I can live with record wildcards in _pattern matching_ but I think they are almost always a mistake in record construction.",
        "createdAt" : "2019-07-30T07:15:22Z",
        "updatedAt" : "2019-07-30T07:20:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "01f95bbf-1d10-4316-8aae-9d29ceb3a32b",
        "parentId" : "aceea618-3d5c-4add-83fa-c2c621b833a4",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I'm not really sure I understand the reasoning why one is ok and one is bad...\r\nBut I don't really care that much.\r\nI'll change them all back again in another PR.",
        "createdAt" : "2019-07-30T08:23:08Z",
        "updatedAt" : "2019-07-30T08:23:09Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "01f7a2d8-18ee-49df-a50e-465528934668",
        "parentId" : "aceea618-3d5c-4add-83fa-c2c621b833a4",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not a big fan of record wildcards in pattern matching but I can live with them. They implicitly bring names into scope, which is less than optimal. However, if a see a name that has not been brought into scope explicitly and there's a pattern match with a record wildcard, I can at least assume that's where the name is coming from.\r\nIf I see a record construction using a record wildcard, the only way I can figure out what actually going into that construction is to go and look at the type definition. That is something I can hardly live with.\r\nDoes that explanation make at least some sense?",
        "createdAt" : "2019-07-30T12:02:58Z",
        "updatedAt" : "2019-07-30T12:02:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2db8aa702af32ed66d9fd525a174268d6fb0f2",
    "line" : 6,
    "diffHunk" : "@@ -209,7 +209,7 @@ raiseCompletion :: LL.Completion -> Perhaps Completion\n raiseCompletion = \\case\n     LL.Completion{..} -> do\n         cid <- raiseCommandId completionCommandId\n-        let status = Status --TODO: stop loosing info\n+        let status = completionStatus\n         return Completion{..}"
  },
  {
    "id" : "a4bc2374-0043-484d-96cc-45694c402539",
    "prId" : 2075,
    "comments" : [
      {
        "id" : "fa068ad9-59c3-412a-9ba2-3b61c0a05197",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "HLint made me use this!",
        "createdAt" : "2019-07-09T17:05:08Z",
        "updatedAt" : "2019-07-10T09:45:19Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "884e82fa5eddc9e555fa8468edfda5a3e5394f6c",
    "line" : null,
    "diffHunk" : "@@ -13,18 +13,22 @@ module DA.Ledger.Convert (\n     raiseCompletionStreamResponse,\n     raiseGetActiveContractsResponse,\n     raiseAbsLedgerOffset,\n+    raiseGetLedgerConfigurationResponse,\n     RaiseFailureReason,\n     ) where\n \n+import Control.Monad((>=>))"
  },
  {
    "id" : "f894be33-3832-409c-8d8b-dc7663fb2aba",
    "prId" : 2075,
    "comments" : [
      {
        "id" : "63b7cb8a-1655-48e0-ab5e-552fe69812de",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Mixing `.` and `>=>` looks rather confusing since they are both basically function composition but in the opposite direction. I would recommend that you either use `.` and `<=<` or you just go for do notation.",
        "createdAt" : "2019-07-09T17:37:06Z",
        "updatedAt" : "2019-07-10T09:45:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "884e82fa5eddc9e555fa8468edfda5a3e5394f6c",
    "line" : null,
    "diffHunk" : "@@ -161,6 +165,23 @@ optional = \\case\n     Left _ -> Nothing\n     Right a -> Just a\n \n+raiseGetLedgerConfigurationResponse :: LL.GetLedgerConfigurationResponse -> Perhaps LedgerConfiguration\n+raiseGetLedgerConfigurationResponse =\n+    (perhaps \"ledgerConfiguration\" >=> raiseLedgerConfiguration)"
  },
  {
    "id" : "29ccd2f2-040f-43f7-979d-42f24904f2c3",
    "prId" : 2067,
    "comments" : [
      {
        "id" : "8471e88e-dc7a-45d1-8f7a-abe237fc3487",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This is an unrelated bug fix",
        "createdAt" : "2019-07-09T12:43:29Z",
        "updatedAt" : "2019-07-09T12:43:29Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "db14f1a6e0a6eb3965e0abef2a70c66c0b63aece",
    "line" : 41,
    "diffHunk" : "@@ -229,7 +244,7 @@ raiseTreeEvent = \\case\n         eid <- raiseEventId exercisedEventEventId\n         cid <- raiseContractId exercisedEventContractId\n         tid <- perhaps \"exercisedEventTemplateId\" exercisedEventTemplateId >>= raiseTemplateId\n-        ccEid <- undefined exercisedEventContractCreatingEventId\n+        ccEid <- raiseEventId exercisedEventContractCreatingEventId"
  },
  {
    "id" : "189ee2fa-1916-44df-805e-f5883008530c",
    "prId" : 2067,
    "comments" : [
      {
        "id" : "ee5a11e7-2925-49cd-8450-62a27404664f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "There's no need for a `case` expression here. The pattern can just come after the function name. Record wild cards might also help to make this a bit less verbose.",
        "createdAt" : "2019-07-15T11:34:44Z",
        "updatedAt" : "2019-07-15T11:36:11Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38003d20-311c-4b14-ae62-fc418f4f4ec6",
        "parentId" : "ee5a11e7-2925-49cd-8450-62a27404664f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Are we really happy with the use of `{..}` ?\r\nThe way it implicitly brings unknown names into scope seems rather scary.",
        "createdAt" : "2019-07-15T13:01:53Z",
        "updatedAt" : "2019-07-15T13:01:53Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "530bf8b0-b943-44ce-81ce-a94c7f66c0cb",
        "parentId" : "ee5a11e7-2925-49cd-8450-62a27404664f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not the biggest fan of `{..}` either but we have plenty of it in our code base already. Instead of\r\n```\r\nf C{x, y} = x+y\r\n```\r\nor\r\n```\r\nf C{..} = x+y\r\n```\r\nI usually prefer\r\n```\r\nf x = x c + y c\r\n```\r\nThat avoids the `{..}` and repeating the names at the same time.",
        "createdAt" : "2019-07-15T15:40:48Z",
        "updatedAt" : "2019-07-15T15:40:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "db14f1a6e0a6eb3965e0abef2a70c66c0b63aece",
    "line" : 21,
    "diffHunk" : "@@ -159,6 +161,19 @@ optional = \\case\n     Left _ -> Nothing\n     Right a -> Just a\n \n+raiseGetActiveContractsResponse :: LL.GetActiveContractsResponse -> Perhaps (AbsOffset,Maybe WorkflowId,[Event])\n+raiseGetActiveContractsResponse = \\case"
  },
  {
    "id" : "0b20339b-d23f-4eb3-bede-1b1c6d36b7c8",
    "prId" : 2029,
    "comments" : [
      {
        "id" : "77e66508-9237-4b78-ab12-17d6ae73eb58",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not sure extracting this to a separate function is helpful. The logic is simple and short so inlining it might be better than introducing an uncommon abstraction.",
        "createdAt" : "2019-07-05T15:53:01Z",
        "updatedAt" : "2019-07-05T16:14:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "707015d6-1051-47f3-b035-b26be45951c4",
        "parentId" : "77e66508-9237-4b78-ab12-17d6ae73eb58",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok",
        "createdAt" : "2019-07-08T09:49:23Z",
        "updatedAt" : "2019-07-08T09:49:23Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ec9c9d014032efd981e4522a47dfb769819d7c4a",
    "line" : 31,
    "diffHunk" : "@@ -23,12 +29,16 @@ import qualified Com.Digitalasset.Ledger.Api.V1.Event as LL\n import qualified Com.Digitalasset.Ledger.Api.V1.Transaction as LL\n import qualified Com.Digitalasset.Ledger.Api.V1.Value as LL\n import qualified Com.Digitalasset.Ledger.Api.V1.LedgerOffset as LL\n+import qualified Data.Map as Map\n import qualified Proto3.Suite.Types as LL\n \n import DA.Ledger.Types\n \n -- lower\n \n+lowerList :: (a -> b) -> [a] -> Vector b"
  },
  {
    "id" : "f7dd4f4f-45aa-4b8b-a0d4-a7f819041fb2",
    "prId" : 2029,
    "comments" : [
      {
        "id" : "4a6ce771-0c03-43ab-99bc-6d19dd48915b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This might be clearer if you generalize this a bit:\r\n```haskell\r\nraiseMap\r\n    :: forall f k k' v v'. (Monad f, Ord k')\r\n    => (k -> f k')\r\n    -> (v -> f v')\r\n    -> Map k v\r\n    -> f (Map k' v')\r\nraiseMap raiseK raiseV = fmap Map.fromList . mapM (uncurry raiseKV) . Map.toList\r\n    where raiseKV :: k -> v -> f (k', v')\r\n          raiseKV kLow vLow = (,) <$> raiseK kLow <*> raiseV vLow\r\n```\r\nYou can move the handling of the `Maybe` part into `raiseV`.",
        "createdAt" : "2019-07-05T16:06:33Z",
        "updatedAt" : "2019-07-05T16:14:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9c825832-b97c-425f-af84-394c0191bf7e",
        "parentId" : "4a6ce771-0c03-43ab-99bc-6d19dd48915b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "The `Maybe` is important for this abstraction, because it corresponds to the type attributed by `grpc-haskell`  to protobuf Maps. And so the caller line is simply this: \r\n```\r\nevents <- raiseMap raiseEventId raiseTreeEvent transactionTreeEventsById\r\n```\r\n\r\nKeeping the `Maybe` means generalisaion to `Monad f` is not directly possible, because the code as written includes `missing \"mapElem\"`, and `missing` is specific to the `Perhaps` monad.\r\n\r\nBut in any case I don't think generalising to an arbitrary monad here would be particularly helpful to the reader. This whole file is about `lower`ing and `raise`ing types, and all the `raise` functions operate in the `Perhaps` monad.",
        "createdAt" : "2019-07-08T10:08:24Z",
        "updatedAt" : "2019-07-08T10:08:24Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ced89c8-b0f6-48e5-9335-7b23b800e9b2",
        "parentId" : "4a6ce771-0c03-43ab-99bc-6d19dd48915b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I see, you could still generalize while keeping `Maybe` if you let the caller pass in a handler for the `Nothing` case but that’s probably not worth it. Would be nice to capture the fact that `Maybe` comes from `grpc-haskell` in a comment. That said, I would at least generalize the key type. If I see a type that is not polymorphic, I expect that there is a reason for it but here you aren’t making use of the fact that it is `Text`.",
        "createdAt" : "2019-07-08T10:15:11Z",
        "updatedAt" : "2019-07-08T10:15:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "26002986-554c-4307-86e4-a68b0ecb9ed7",
        "parentId" : "4a6ce771-0c03-43ab-99bc-6d19dd48915b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I will generalize from `Text` to any key type. And add a comment about the `Maybe` :)",
        "createdAt" : "2019-07-08T10:46:46Z",
        "updatedAt" : "2019-07-08T10:46:46Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ec9c9d014032efd981e4522a47dfb769819d7c4a",
    "line" : 116,
    "diffHunk" : "@@ -303,6 +381,18 @@ raiseList f v = loop (Vector.toList v)\n               [] -> return []\n               x:xs -> do y <- f x; ys <- loop xs; return $ y:ys\n \n+raiseMap :: forall a b c. Ord a =>"
  },
  {
    "id" : "fbf2b7aa-aba3-4ce9-9398-127c56225bef",
    "prId" : 1342,
    "comments" : [
      {
        "id" : "9801dbf4-9601-44b5-8cd4-edc5a513d8f3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "A more idiomatic way to write this is\r\n```haskell\r\nfmap VRecord (raiseRecord r)\r\n```\r\nor\r\n```haskell\r\nfmap VRecord $ raiseRecord r\r\n````\r\nor in this special case\r\n```haskell\r\nVRecord <$> raiseRecord r\r\n```\r\n@neil-da Should we add an hlint rule for the first suggestion?",
        "createdAt" : "2019-05-24T12:44:30Z",
        "updatedAt" : "2019-05-24T12:44:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f68b2cb-a48d-4675-8a92-0f4e4c7859c1",
        "parentId" : "9801dbf4-9601-44b5-8cd4-edc5a513d8f3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Are you saying that the fragment `(f . g) x` is not idomatic? And `f (g x)` or `f $ g x` is better?",
        "createdAt" : "2019-05-24T15:18:30Z",
        "updatedAt" : "2019-05-24T15:18:30Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d15679aa-3f2e-4507-8df9-f3d7cb9e2229",
        "parentId" : "9801dbf4-9601-44b5-8cd4-edc5a513d8f3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yes, that is what I meant.",
        "createdAt" : "2019-05-24T16:06:55Z",
        "updatedAt" : "2019-05-24T16:06:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "93d1ad08-33a5-444b-9dee-613c7b435e61",
        "parentId" : "9801dbf4-9601-44b5-8cd4-edc5a513d8f3",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "https://github.com/ndmitchell/hlint/issues/644",
        "createdAt" : "2019-05-25T09:02:53Z",
        "updatedAt" : "2019-05-25T09:02:53Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 139,
    "diffHunk" : "@@ -96,3 +99,165 @@ lowerRecordField = \\case\n         LL.RecordField {\n         recordFieldLabel = label,\n         recordFieldValue = Just (lowerValue value) }\n+\n+\n+-- raise\n+\n+data RaiseFailureReason = Missing String deriving Show\n+\n+type Perhaps a = Either RaiseFailureReason a\n+\n+missing :: String -> Perhaps a\n+missing = Left . Missing\n+\n+perhaps :: String -> Maybe a -> Perhaps a\n+perhaps tag = \\case\n+    Nothing -> missing tag\n+    Just a -> Right a\n+\n+optional :: Perhaps a -> Maybe a\n+optional = \\case\n+    Left _ -> Nothing\n+    Right a -> Just a\n+\n+raiseTransaction :: LL.Transaction -> Perhaps Transaction\n+raiseTransaction = \\case\n+    LL.Transaction{transactionTransactionId,\n+                   transactionCommandId,\n+                   transactionWorkflowId,\n+                   transactionEffectiveAt,\n+                   transactionEvents,\n+                   transactionOffset} -> do\n+    -- NOTE: \"<-\" is used when a field is required, \"let\" when a field is optional\n+    trid <- raiseTransactionId transactionTransactionId\n+    let cid = optional (raiseCommandId transactionCommandId)\n+    let wid = optional (raiseWorkflowId transactionWorkflowId)\n+    leTime <- perhaps \"transactionEffectiveAt\" transactionEffectiveAt >>= raiseTimestamp\n+    events <- raiseList raiseEvent transactionEvents\n+    ofset <- raiseAbsOffset transactionOffset\n+    return Transaction {trid, cid, wid, leTime, events, ofset}\n+\n+raiseEvent :: LL.Event -> Perhaps Event\n+raiseEvent = \\case\n+    LL.Event{eventEvent = Nothing} -> missing \"Event\"\n+    LL.Event(Just (LL.EventEventArchived\n+                   LL.ArchivedEvent{archivedEventEventId,\n+                                    archivedEventContractId,\n+                                    archivedEventTemplateId,\n+                                    archivedEventWitnessParties})) -> do\n+        eid <- raiseEventId archivedEventEventId\n+        cid <- raiseContractId archivedEventContractId\n+        tid <- perhaps \"archivedEventTemplateId\" archivedEventTemplateId >>= raiseTemplateId\n+        witness <- raiseList raiseParty archivedEventWitnessParties\n+        return ArchivedEvent{eid,cid,tid,witness}\n+    LL.Event(Just (LL.EventEventCreated\n+                   LL.CreatedEvent{createdEventEventId,\n+                                   createdEventContractId,\n+                                   createdEventTemplateId,\n+                                   createdEventCreateArguments,\n+                                   createdEventWitnessParties})) -> do\n+        eid <- raiseEventId createdEventEventId\n+        cid <- raiseContractId createdEventContractId\n+        tid <- perhaps \"createdEventTemplateId\" createdEventTemplateId >>= raiseTemplateId\n+        createArgs <- perhaps \"createdEventCreateArguments\" createdEventCreateArguments >>= raiseRecord\n+        witness <- raiseList raiseParty createdEventWitnessParties\n+        return CreatedEvent{eid,cid,tid,createArgs,witness}\n+\n+raiseRecord :: LL.Record -> Perhaps Record\n+raiseRecord = \\case\n+    LL.Record{recordRecordId,recordFields} -> do\n+        let rid = recordRecordId >>= optional . raiseIdentifier\n+        fields <- raiseList raiseRecordField recordFields\n+        return Record{rid,fields}\n+\n+raiseRecordField :: LL.RecordField -> Perhaps RecordField\n+raiseRecordField = \\case\n+    LL.RecordField{recordFieldLabel,recordFieldValue} -> do\n+        let label = recordFieldLabel\n+        value <- perhaps \"recordFieldValue\" recordFieldValue >>= raiseValue\n+        return RecordField{label,value}\n+\n+-- TODO: more cases here\n+raiseValue :: LL.Value -> Perhaps Value\n+raiseValue = \\case\n+    LL.Value Nothing -> missing \"Value\"\n+    LL.Value (Just sum) -> case sum of\n+        LL.ValueSumRecord r -> (fmap VRecord . raiseRecord) r"
  },
  {
    "id" : "ff94e5d3-d9d8-473b-86a9-ac9518f8c3f8",
    "prId" : 879,
    "comments" : [
      {
        "id" : "f4d23c4c-0f34-4604-8b23-4bb58fe11917",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I just write undefined - you're also not finished if undefined exists in your code...",
        "createdAt" : "2019-05-03T10:19:47Z",
        "updatedAt" : "2019-05-03T10:20:18Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8115afd41b7797436684816ff474f2ce0f10f185",
    "line" : 15,
    "diffHunk" : "@@ -0,0 +1,101 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE OverloadedStrings #-}\n+\n+-- Convert between HL Ledger.Types and the LL types generated from .proto files\n+module DA.Ledger.Convert (lowerCommands) where\n+\n+import           Data.Maybe         (fromMaybe)\n+import           Data.Vector        as Vector (fromList)\n+\n+import qualified DA.Ledger.LowLevel as LL\n+import           DA.Ledger.Types\n+\n+xxx :: a -- TODO: not finished while any instances of \"xxx\" of \"_\" remain in this file"
  }
]