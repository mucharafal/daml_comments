[
  {
    "id" : "669a4eb2-eb3c-4db9-97a8-dc28948b0605",
    "prId" : 2440,
    "comments" : [
      {
        "id" : "5226f580-7f09-4aac-abe5-017bb8b5ece7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ninstance Show Party where show p = \"'\" <> Text.unpack (unParty p) <> \"'\"\r\n```",
        "createdAt" : "2019-08-07T10:54:58Z",
        "updatedAt" : "2019-08-07T10:56:43Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eabad75dbc08b599fb34c3aa1143453e577fd92b",
    "line" : 33,
    "diffHunk" : "@@ -273,6 +276,6 @@ newtype AbsOffset = AbsOffset { unAbsOffset :: Text } deriving (Eq,Ord,Show)\n newtype Choice = Choice { unChoice :: Text } deriving (Eq,Ord,Show)\n \n newtype Party = Party { unParty :: Text } deriving (Eq,Ord)\n-instance Show Party where show = Text.unpack . unParty\n+instance Show Party where show p = \"'\" <> (Text.unpack $ unParty p) <> \"'\""
  },
  {
    "id" : "664089a9-cc17-4f2e-8cb4-d9d233f64bd5",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "b98ca97a-5033-43bf-bb54-d8e37cbde70c",
        "parentId" : null,
        "author" : null,
        "body" : "Could you make the various `data` / `newtype` definitions in this file more visually uniform? I'm partial to the style used in here in `data Enum`, but consistency is more important than any particular preference anyway.",
        "createdAt" : "2019-08-01T12:34:49Z",
        "updatedAt" : "2019-08-01T12:37:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d7eada67-38a1-46e4-b84c-e93d513d2e8a",
        "parentId" : "b98ca97a-5033-43bf-bb54-d8e37cbde70c",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes! Totally Agree. I have recently migrated to the style used here for Enum. And have it on my to-do list to migrate this entire file to that format. But I didn't want to mix up a reformatting into this PR.",
        "createdAt" : "2019-08-01T14:43:20Z",
        "updatedAt" : "2019-08-01T14:43:20Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "04a88c28-f4da-4373-a8ba-1fb660c13840",
        "parentId" : "b98ca97a-5033-43bf-bb54-d8e37cbde70c",
        "author" : null,
        "body" : ":+1: ",
        "createdAt" : "2019-08-01T17:47:02Z",
        "updatedAt" : "2019-08-01T17:47:02Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 46,
    "diffHunk" : "@@ -187,17 +188,23 @@ data Value\n     | VContract ContractId\n     | VList [Value]\n     | VInt Int\n-    | VDecimal Text -- TODO: Maybe use Haskell Decimal type\n-    | VString Text\n-    | VTimestamp MicroSecondsSinceEpoch\n+    | VDecimal Text\n+    | VText Text\n+    | VTime MicroSecondsSinceEpoch\n     | VParty Party\n     | VBool Bool\n     | VUnit\n     | VDate DaysSinceEpoch\n     | VOpt (Maybe Value)\n     | VMap (Map Text Value)\n+    | VEnum Enum\n     deriving (Eq,Ord,Show)\n \n+data Enum = Enum\n+    { eid   :: Maybe Identifier\n+    , cons  :: ConstructorId\n+    } deriving (Eq,Ord,Show)"
  },
  {
    "id" : "51d5d508-25aa-4cff-ba9e-59700297e707",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "c2ba8cb4-2305-4f67-975f-ea1fd9708258",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We're using `Fixed E10` as the payload in the DAML-LF AST. See https://github.com/digital-asset/daml/blob/705f014a888e2854e6776458abe4484b2929dbc2/compiler/daml-lf-ast/src/DA/Daml/LF/Ast/Base.hs#L195 and https://www.stackage.org/haddock/lts-13.30/base-4.12.0.0/Data-Fixed.html",
        "createdAt" : "2019-08-05T11:42:00Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d65bb056-6bee-415d-9e99-c9ce3b64b813",
        "parentId" : "c2ba8cb4-2305-4f67-975f-ea1fd9708258",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I'll try this...",
        "createdAt" : "2019-08-05T15:33:30Z",
        "updatedAt" : "2019-08-05T15:33:30Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "71e15031-381b-4dc2-81c9-8d58b7e365fa",
        "parentId" : "c2ba8cb4-2305-4f67-975f-ea1fd9708258",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, changing to `Fixed E10` as you suggest\r\nrequires some changes to the raise/lower convert functions (as expected)\r\nGood job I have round-tripping tests in place, or else I would have introduced a bug!",
        "createdAt" : "2019-08-07T10:39:34Z",
        "updatedAt" : "2019-08-07T10:39:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 31,
    "diffHunk" : "@@ -187,17 +188,23 @@ data Value\n     | VContract ContractId\n     | VList [Value]\n     | VInt Int\n-    | VDecimal Text -- TODO: Maybe use Haskell Decimal type\n-    | VString Text\n-    | VTimestamp MicroSecondsSinceEpoch\n+    | VDecimal Text"
  },
  {
    "id" : "5f9da449-3879-4c2c-b01a-7f9312be23d6",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "c510a023-c349-4518-bab3-42f972c710aa",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I assume this field contains the name of the enum type. If so, we should use a better name, like `enumType`.",
        "createdAt" : "2019-08-05T11:45:14Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83701dd2-f467-4063-a8b5-11b77b024c14",
        "parentId" : "c510a023-c349-4518-bab3-42f972c710aa",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I was wondering if we could get rid of these fields entirely.\r\nThey are optional in the API.\r\nWhen sending they can always be omitted\r\nWhen receiving, they only get filled in in `verbose` mode.\r\nI don't really see what purpose they serve.",
        "createdAt" : "2019-08-05T15:33:14Z",
        "updatedAt" : "2019-08-05T15:33:14Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "afa1024f-e9b1-4d7c-bf10-b34b5e9d97a0",
        "parentId" : "c510a023-c349-4518-bab3-42f972c710aa",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "They make the Ledger API nominally typed instead of \"just\" structurally typed. For example, they are good for sanity checking.",
        "createdAt" : "2019-08-05T15:42:50Z",
        "updatedAt" : "2019-08-05T15:42:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 44,
    "diffHunk" : "@@ -187,17 +188,23 @@ data Value\n     | VContract ContractId\n     | VList [Value]\n     | VInt Int\n-    | VDecimal Text -- TODO: Maybe use Haskell Decimal type\n-    | VString Text\n-    | VTimestamp MicroSecondsSinceEpoch\n+    | VDecimal Text\n+    | VText Text\n+    | VTime MicroSecondsSinceEpoch\n     | VParty Party\n     | VBool Bool\n     | VUnit\n     | VDate DaysSinceEpoch\n     | VOpt (Maybe Value)\n     | VMap (Map Text Value)\n+    | VEnum Enum\n     deriving (Eq,Ord,Show)\n \n+data Enum = Enum\n+    { eid   :: Maybe Identifier"
  },
  {
    "id" : "5792a544-e86a-4764-a99d-c32f006c0e69",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "2cc52792-e498-4516-8923-14e4ca631204",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Using `Int64` is a good idea. Most of the numbers we get here would not fit into an `Int32`.",
        "createdAt" : "2019-08-05T11:45:57Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83aa1f20-ae42-46a8-b6dd-1df76c752df1",
        "parentId" : "2cc52792-e498-4516-8923-14e4ca631204",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Will `Int` ever realistically be `Int32` ?",
        "createdAt" : "2019-08-05T15:13:39Z",
        "updatedAt" : "2019-08-05T15:13:39Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4adcacde-5825-4d5a-b0e6-3698d403bd5b",
        "parentId" : "2cc52792-e498-4516-8923-14e4ca631204",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The only guarantee the Haskell 2010 report gives is that `Int` has at least 30 bits. Since using `Int64` doesn't hurt, I'd prefer to do it.",
        "createdAt" : "2019-08-05T15:46:12Z",
        "updatedAt" : "2019-08-05T15:46:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "472210c3-4d90-4394-a324-62ba9a46dacc",
        "parentId" : "2cc52792-e498-4516-8923-14e4ca631204",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok",
        "createdAt" : "2019-08-07T10:18:32Z",
        "updatedAt" : "2019-08-07T10:18:32Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 68,
    "diffHunk" : "@@ -210,30 +217,32 @@ data RecordField\n \n data Variant\n     = Variant {\n-        vid         :: VariantId,\n-        constructor :: ConstructorId,\n-        value       :: Value } deriving (Eq,Ord,Show)\n+        vid   :: Maybe Identifier,\n+        cons  :: ConstructorId,\n+        value :: Value } deriving (Eq,Ord,Show)\n \n data Identifier\n     = Identifier {\n         pid :: PackageId,\n         mod :: ModuleName,\n         ent :: EntityName } deriving (Eq,Ord,Show)\n \n-newtype MicroSecondsSinceEpoch = MicroSecondsSinceEpoch Int deriving (Eq,Ord,Show)-- TODO: Int64?"
  },
  {
    "id" : "0a4df0e7-7aee-4009-a287-f9f7cae511aa",
    "prId" : 2368,
    "comments" : [
      {
        "id" : "865541fc-9802-440b-b7cc-669bfdc6c4dc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `show` instance for `Party` in DAML wraps the party name in single quote, eg. `'Alice'`. For the sake of consistency, we should do this here as well.",
        "createdAt" : "2019-08-05T11:49:49Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d78395cf-f3bd-431f-a5fb-6c16c71727c6",
        "parentId" : "865541fc-9802-440b-b7cc-669bfdc6c4dc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok",
        "createdAt" : "2019-08-05T15:35:05Z",
        "updatedAt" : "2019-08-05T15:35:05Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 105,
    "diffHunk" : "@@ -242,27 +251,17 @@ newtype ApplicationId = ApplicationId { unApplicationId :: Text } deriving (Eq,O\n newtype CommandId = CommandId { unCommandId :: Text } deriving (Eq,Ord,Show)\n newtype PackageId = PackageId { unPackageId :: Text } deriving (Eq,Ord,Show)\n newtype ConstructorId = ConstructorId { unConstructorId :: Text } deriving (Eq,Ord,Show)\n-newtype VariantId = VariantId { unVariantId :: Text } deriving (Eq,Ord,Show)\n \n newtype Choice = Choice { unChoice :: Text } deriving (Eq,Ord,Show)\n \n newtype Party = Party { unParty :: Text } deriving (Eq,Ord)\n-instance Show Party where show = Text.unpack . unParty -- TODO: really?\n+instance Show Party where show = Text.unpack . unParty"
  },
  {
    "id" : "aed35433-6cab-4ec9-b11a-017a108c6449",
    "prId" : 2321,
    "comments" : [
      {
        "id" : "580cb42d-8a28-4e36-a436-e4e7485da2e3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m not sure that type synonym adds anything over using `LL.Status` directly.",
        "createdAt" : "2019-07-29T18:55:12Z",
        "updatedAt" : "2019-07-29T18:55:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "236f667b-7b21-43fb-96b2-ce8723c4b64d",
        "parentId" : "580cb42d-8a28-4e36-a436-e4e7485da2e3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree. Just re-exporting `LL.Status` should be good enough.",
        "createdAt" : "2019-07-30T07:19:50Z",
        "updatedAt" : "2019-07-30T07:20:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "813a371f-3bac-471f-a57f-1d671f4cf0ae",
        "parentId" : "580cb42d-8a28-4e36-a436-e4e7485da2e3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, will do",
        "createdAt" : "2019-07-30T08:17:27Z",
        "updatedAt" : "2019-07-30T08:17:28Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2db8aa702af32ed66d9fd525a174268d6fb0f2",
    "line" : 39,
    "diffHunk" : "@@ -227,8 +228,7 @@ data Timestamp\n         seconds :: Integer, -- TODO: Int64?\n         nanos   :: Integer }  deriving (Eq,Ord,Show)\n \n-data Status = Status-- TODO: from standard google proto, determining success/failure\n- deriving (Eq,Ord,Show)\n+type Status = LL.Status"
  },
  {
    "id" : "e104180c-eb94-467e-a341-4b5540e5230e",
    "prId" : 2075,
    "comments" : [
      {
        "id" : "d4c4299b-a2a4-46d4-939f-2e351e3eb287",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    Duration,\r\n```",
        "createdAt" : "2019-07-09T17:34:19Z",
        "updatedAt" : "2019-07-10T09:45:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "884e82fa5eddc9e555fa8468edfda5a3e5394f6c",
    "line" : null,
    "diffHunk" : "@@ -50,12 +50,17 @@ module DA.Ledger.Types( -- High Level types for communication over Ledger API\n     AbsOffset(..),\n     Verbosity(..),\n \n+    LedgerConfiguration(..),\n+    Duration --(..),"
  },
  {
    "id" : "26534ada-f3ef-407d-88b3-7a1552d7017f",
    "prId" : 2075,
    "comments" : [
      {
        "id" : "76998222-e467-41a5-81ca-9740fb19f6ea",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Leftover from debugging?",
        "createdAt" : "2019-07-09T17:35:11Z",
        "updatedAt" : "2019-07-10T09:45:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "884e82fa5eddc9e555fa8468edfda5a3e5394f6c",
    "line" : null,
    "diffHunk" : "@@ -249,15 +254,23 @@ instance Show Party where show = Text.unpack . unParty -- TODO: really?\n newtype ModuleName = ModuleName { unModuleName :: Text } deriving (Eq,Ord,Show)\n newtype EntityName = EntityName { unEntityName :: Text } deriving (Eq,Ord,Show)\n \n-newtype AbsOffset = AbsOffset { unAbsOffset :: Text }  deriving (Eq,Ord,Show)\n+newtype AbsOffset = AbsOffset { unAbsOffset :: Text } deriving (Eq,Ord,Show)\n \n -- TODO: .proto message types not yet handled\n {-\n-message LedgerConfiguration {\n+\n message TraceContext {\n message TransactionFilter {\n message Filters {\n message InclusiveFilters {\n -}\n \n newtype Verbosity = Verbosity { unVerbosity :: Bool } deriving (Eq,Ord,Show)\n+\n+data LedgerConfiguration = LedgerConfiguration\n+    { minTtl :: Duration\n+    , maxTtl :: Duration\n+    } deriving (Eq,Ord,Show)\n+\n+--data Duration = Duration deriving (Eq,Ord,Show)"
  },
  {
    "id" : "1dd76388-2b7c-488c-b38d-5342df974f7d",
    "prId" : 2075,
    "comments" : [
      {
        "id" : "f196a238-7ea7-4737-a9d4-44643a489bee",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You could also just reexport `LL.Duration` instead of making a type synonym.",
        "createdAt" : "2019-07-10T06:46:42Z",
        "updatedAt" : "2019-07-10T09:45:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "884e82fa5eddc9e555fa8468edfda5a3e5394f6c",
    "line" : 43,
    "diffHunk" : "@@ -249,15 +254,23 @@ instance Show Party where show = Text.unpack . unParty -- TODO: really?\n newtype ModuleName = ModuleName { unModuleName :: Text } deriving (Eq,Ord,Show)\n newtype EntityName = EntityName { unEntityName :: Text } deriving (Eq,Ord,Show)\n \n-newtype AbsOffset = AbsOffset { unAbsOffset :: Text }  deriving (Eq,Ord,Show)\n+newtype AbsOffset = AbsOffset { unAbsOffset :: Text } deriving (Eq,Ord,Show)\n \n -- TODO: .proto message types not yet handled\n {-\n-message LedgerConfiguration {\n+\n message TraceContext {\n message TransactionFilter {\n message Filters {\n message InclusiveFilters {\n -}\n \n newtype Verbosity = Verbosity { unVerbosity :: Bool } deriving (Eq,Ord,Show)\n+\n+data LedgerConfiguration = LedgerConfiguration\n+    { minTtl :: Duration\n+    , maxTtl :: Duration\n+    } deriving (Eq,Ord,Show)\n+\n+--data Duration = Duration deriving (Eq,Ord,Show)\n+type Duration = LL.Duration"
  },
  {
    "id" : "6ce7351b-7451-4bcf-90ef-d6498d4d183f",
    "prId" : 1904,
    "comments" : [
      {
        "id" : "3d2f9421-96ca-456e-b517-3da48adc7277",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "No need to comment out imports",
        "createdAt" : "2019-06-26T21:19:17Z",
        "updatedAt" : "2019-06-27T10:17:30Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a80b1687-a196-4ffd-9078-b3592ee29fd5",
        "parentId" : "3d2f9421-96ca-456e-b517-3da48adc7277",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "yup",
        "createdAt" : "2019-06-27T08:28:48Z",
        "updatedAt" : "2019-06-27T10:17:30Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1965178baa6b9d6a186780c5e71e49862ba1455a",
    "line" : null,
    "diffHunk" : "@@ -50,6 +51,7 @@ module DA.Ledger.Types( -- High Level types for communication over Ledger API\n import Data.Map (Map)\n import Data.Text.Lazy (Text)\n import qualified Data.Text.Lazy as Text(unpack)\n+--import DA.Ledger.AbstractLedgerTypes"
  }
]