[
  {
    "id" : "8b2258bb-d65b-4428-992a-c543f987e4a1",
    "prId" : 2261,
    "comments" : [
      {
        "id" : "e5772bd3-045d-4550-b4b1-3ff7f458b458",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Might be worth considering to prefix these field names. `size` seems a bit too generic (yes, Haskell records suck).",
        "createdAt" : "2019-07-23T10:54:58Z",
        "updatedAt" : "2019-07-23T10:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "30dd2d66-4c67-4732-b5a0-ebd91d595d39",
        "parentId" : "e5772bd3-045d-4550-b4b1-3ff7f458b458",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "These short names correspond to the style adopted in:\r\n\r\nhttps://github.com/digital-asset/daml/blob/master/language-support/hs/bindings/src/DA/Ledger/Types.hs\r\n\r\nwhere it was an active decision to not uniquify field names, and instead use  `{-# LANGUAGE DuplicateRecordFields #-}` where necessary.\r\n\r\nSo far I am happy with this choice, but you may well disagree :)\r\n",
        "createdAt" : "2019-07-23T12:26:25Z",
        "updatedAt" : "2019-07-23T12:26:26Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6e04f55acf35ac9065ac1bb318f00d64fe53ba3f",
    "line" : 23,
    "diffHunk" : "@@ -3,25 +3,66 @@\n \n {-# LANGUAGE GADTs #-}\n \n-module DA.Ledger.Services.PackageManagementService (uploadDarFile) where\n+module DA.Ledger.Services.PackageManagementService (\n+    listKnownPackages, PackageDetails(..),\n+    uploadDarFile,\n+    ) where\n \n-import Com.Digitalasset.Ledger.Api.V1.Admin.PackageManagementService\n-import Data.ByteString(ByteString)\n+import DA.Ledger.Convert\n import DA.Ledger.GrpcWrapUtils\n import DA.Ledger.LedgerService\n+import DA.Ledger.Types\n+import Data.ByteString(ByteString)\n+import Data.Text.Lazy (Text)\n import Network.GRPC.HighLevel.Generated\n+import qualified Com.Digitalasset.Ledger.Api.V1.Admin.PackageManagementService as LL\n+\n+data PackageDetails = PackageDetails\n+    { pid :: PackageId\n+    , size :: Int"
  },
  {
    "id" : "128328a2-593d-4124-89f9-72a886bfb273",
    "prId" : 2261,
    "comments" : [
      {
        "id" : "c27897db-dac1-4c74-8e91-f05415b792a7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        let rpc = LL.packageManagementServiceListKnownPackages service\r\n```\r\nI'll keep suggesting this until you tell me a reason why it's bad. :)",
        "createdAt" : "2019-07-23T12:31:49Z",
        "updatedAt" : "2019-07-23T12:34:31Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8f6a7f27-fb27-4c69-a9aa-5dbd40be2078",
        "parentId" : "c27897db-dac1-4c74-8e91-f05415b792a7",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Well... its clearly just a small matter of style.\r\nBut since the paint colour of this particular bike shed has been questioned, I will have to reply :)\r\n\r\nI prefer to focus here on the record values themselves rather than the record selector functions.\r\nThis makes it clear that `service` is a package of related RPCs, of which we only use one.\r\nBy using the functional selector style, it's not obvious the value is even a record.\r\n\r\nIt's related to how I don't normally like to use `fst` and prefer pattern matching to access elems.\r\n ",
        "createdAt" : "2019-07-23T13:05:48Z",
        "updatedAt" : "2019-07-23T13:05:48Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8a49fc8f-d0fe-4553-ad6f-26fdb4785a05",
        "parentId" : "c27897db-dac1-4c74-8e91-f05415b792a7",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree that it's a matter of taste. We only have this discussion because Haskell's record system sucks so much. When I see code like `let Foo x y = foo` I instinctively wonder what happens if `foo` is a `Bar ...`? Oh, there's is no `Bar ...` case. And then I'm annoyed again I have to write or read the `Foo` constructor even though it doesn't carry too much useful information. Damn Haskell records.\r\nEven though I disagree with your particular choice of style, I'll stop bothering you about since it is indeed bike shedding.",
        "createdAt" : "2019-07-23T13:16:32Z",
        "updatedAt" : "2019-07-23T13:16:32Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "41c2f289-8039-4351-b013-d024068c96a5",
        "parentId" : "c27897db-dac1-4c74-8e91-f05415b792a7",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Thank you.\r\n\r\n> When I see code like `let Foo x y = foo` I instinctively wonder what happens if `foo` is a `Bar`\r\n\r\nwe get a static error\r\n```\r\n    Pattern match(es) are non-exhaustive\r\n    In a pattern binding: Patterns not matched: (Bar _)\r\n```\r\n\r\nI think the issues with Haskell's record system stem from it taking a primary view that the fields are selector-functions, rather than record pattern match syntax (aka ML style)",
        "createdAt" : "2019-07-23T13:32:48Z",
        "updatedAt" : "2019-07-23T13:33:04Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6e04f55acf35ac9065ac1bb318f00d64fe53ba3f",
    "line" : 33,
    "diffHunk" : "@@ -3,25 +3,66 @@\n \n {-# LANGUAGE GADTs #-}\n \n-module DA.Ledger.Services.PackageManagementService (uploadDarFile) where\n+module DA.Ledger.Services.PackageManagementService (\n+    listKnownPackages, PackageDetails(..),\n+    uploadDarFile,\n+    ) where\n \n-import Com.Digitalasset.Ledger.Api.V1.Admin.PackageManagementService\n-import Data.ByteString(ByteString)\n+import DA.Ledger.Convert\n import DA.Ledger.GrpcWrapUtils\n import DA.Ledger.LedgerService\n+import DA.Ledger.Types\n+import Data.ByteString(ByteString)\n+import Data.Text.Lazy (Text)\n import Network.GRPC.HighLevel.Generated\n+import qualified Com.Digitalasset.Ledger.Api.V1.Admin.PackageManagementService as LL\n+\n+data PackageDetails = PackageDetails\n+    { pid :: PackageId\n+    , size :: Int\n+    , knownSince :: Timestamp\n+    , sourceDescription :: Text\n+    } deriving (Eq,Ord,Show)\n+\n+listKnownPackages :: LedgerService [PackageDetails]\n+listKnownPackages =\n+    makeLedgerService $ \\timeout config ->\n+    withGRPCClient config $ \\client -> do\n+        service <- LL.packageManagementServiceClient client\n+        let LL.PackageManagementService {packageManagementServiceListKnownPackages=rpc} = service"
  },
  {
    "id" : "1f79e6f7-550c-4088-9bbb-c28e72a4a517",
    "prId" : 2261,
    "comments" : [
      {
        "id" : "c95cce01-8406-449e-a06a-7588870e954b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nraiseResponse = raiseList raisePackageDetails . LL.listKnownPackagesResponsePackageDetails\r\n```\r\nand remove the next two lines.",
        "createdAt" : "2019-07-23T12:33:56Z",
        "updatedAt" : "2019-07-23T12:34:31Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "df36031f-a1a9-4e91-a6ae-992a5cee4626",
        "parentId" : "c95cce01-8406-449e-a06a-7588870e954b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I prefer to have all the conversion code (most of it it is `Convert.hs`) to follow a common style.\r\nI like the `\\case` syntax, because it's the same whether the types have 1 or more variant.\r\nI don't see anything is gained by using a different syntax for the case of 1-variant",
        "createdAt" : "2019-07-23T13:09:18Z",
        "updatedAt" : "2019-07-23T13:09:18Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6e04f55acf35ac9065ac1bb318f00d64fe53ba3f",
    "line" : 43,
    "diffHunk" : "@@ -3,25 +3,66 @@\n \n {-# LANGUAGE GADTs #-}\n \n-module DA.Ledger.Services.PackageManagementService (uploadDarFile) where\n+module DA.Ledger.Services.PackageManagementService (\n+    listKnownPackages, PackageDetails(..),\n+    uploadDarFile,\n+    ) where\n \n-import Com.Digitalasset.Ledger.Api.V1.Admin.PackageManagementService\n-import Data.ByteString(ByteString)\n+import DA.Ledger.Convert\n import DA.Ledger.GrpcWrapUtils\n import DA.Ledger.LedgerService\n+import DA.Ledger.Types\n+import Data.ByteString(ByteString)\n+import Data.Text.Lazy (Text)\n import Network.GRPC.HighLevel.Generated\n+import qualified Com.Digitalasset.Ledger.Api.V1.Admin.PackageManagementService as LL\n+\n+data PackageDetails = PackageDetails\n+    { pid :: PackageId\n+    , size :: Int\n+    , knownSince :: Timestamp\n+    , sourceDescription :: Text\n+    } deriving (Eq,Ord,Show)\n+\n+listKnownPackages :: LedgerService [PackageDetails]\n+listKnownPackages =\n+    makeLedgerService $ \\timeout config ->\n+    withGRPCClient config $ \\client -> do\n+        service <- LL.packageManagementServiceClient client\n+        let LL.PackageManagementService {packageManagementServiceListKnownPackages=rpc} = service\n+        let request = LL.ListKnownPackagesRequest\n+        rpc (ClientNormalRequest request timeout emptyMdm)\n+            >>= \\case\n+            ClientNormalResponse response _m1 _m2 _status _details -> do\n+                either (fail . show) return $ raiseResponse response\n+            ClientErrorResponse e -> do\n+                fail (show e)\n+\n+raiseResponse ::  LL.ListKnownPackagesResponse -> Perhaps [PackageDetails]\n+raiseResponse = \\case"
  },
  {
    "id" : "f6f4528d-d2cd-43e5-b4ac-a041bc6880ec",
    "prId" : 2146,
    "comments" : [
      {
        "id" : "95e14c93-eef2-48aa-a5e3-94fbca67bea7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we get a haddock comment here that explains when you will get back `Left`?",
        "createdAt" : "2019-07-15T12:54:37Z",
        "updatedAt" : "2019-07-15T13:23:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c60de14e-08dc-4b4a-8ce0-a7f40f33f82e",
        "parentId" : "95e14c93-eef2-48aa-a5e3-94fbca67bea7",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok",
        "createdAt" : "2019-07-15T13:18:19Z",
        "updatedAt" : "2019-07-15T13:23:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "450a3ef00b954086e6def746c020486ccfc9de1a",
    "line" : 15,
    "diffHunk" : "@@ -0,0 +1,28 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE GADTs #-}\n+\n+module DA.Ledger.Services.PackageManagementService (uploadDarFile) where\n+\n+import Com.Digitalasset.Ledger.Api.V1.Admin.PackageManagementService\n+import Data.ByteString(ByteString)\n+import DA.Ledger.GrpcWrapUtils\n+import DA.Ledger.LedgerService\n+import Network.GRPC.HighLevel.Generated\n+\n+uploadDarFile :: ByteString -> LedgerService (Either String ()) -- Unlike other services, no LedgerId is needed. (why?!)"
  }
]