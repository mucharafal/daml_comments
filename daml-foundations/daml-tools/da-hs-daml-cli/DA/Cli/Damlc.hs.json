[
  {
    "id" : "322a3982-7368-41d1-b4dd-9cfad2a3868c",
    "prId" : 1940,
    "comments" : [
      {
        "id" : "0fb3abca-6739-49a4-ae2a-19b195f1ad3a",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "I suspect we need a Migrate module that has most of this function in. ",
        "createdAt" : "2019-06-29T10:08:39Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fae21840-3e94-4328-a93a-1908fc0be00e",
        "parentId" : "0fb3abca-6739-49a4-ae2a-19b195f1ad3a",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "yes, I'll do a separate PR for reorganizing the code once the functionality is complete.",
        "createdAt" : "2019-07-01T11:02:30Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d25ebc1830d3baac273a8895038c82cf8fb85240",
    "line" : null,
    "diffHunk" : "@@ -602,56 +604,58 @@ execInspectDar inFile = do\n execMigrate ::\n        Compiler.Options -> FilePath -> FilePath -> Maybe FilePath -> Command\n execMigrate opts inFile1 inFile2 mbDir = do"
  },
  {
    "id" : "72cf64c6-4e0f-4568-8dd5-1afed8754528",
    "prId" : 1940,
    "comments" : [
      {
        "id" : "66805953-fe82-474f-af42-2445687e6fb7",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "I'd just use withTempDir from extra and avoid the dependency. ",
        "createdAt" : "2019-06-29T10:09:35Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94d27bdb-4921-41ac-93cb-d8436ee4e663",
        "parentId" : "66805953-fe82-474f-af42-2445687e6fb7",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "cool, will change.",
        "createdAt" : "2019-07-01T10:30:36Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d25ebc1830d3baac273a8895038c82cf8fb85240",
    "line" : null,
    "diffHunk" : "@@ -660,19 +664,22 @@ execMigrate opts inFile1 inFile2 mbDir = do\n             createDirectoryIfMissing True $ takeDirectory path\n             writeFile path mod\n   where\n-    parse loggerH fp = do\n-        errOrMod <-\n-            runGhcFast $\n-            runExceptT $ do\n-                lift $ setupDamlGHC [] Nothing []\n-                -- parse without any preprocessing, so that we can see which data definitions have\n-                -- already generic instances.\n-                parseFileContents ((,) []) fp Nothing\n-        case errOrMod of\n-            Left err -> ioError $ userError $ show err\n-            Right (ds, mod) -> do\n-                unless (null ds) $ Logger.logWarning loggerH (T.pack $ show ds)\n-                return mod\n+    getEntry fp dar =\n+        maybe (ioError $ userError $ \"Package does not contain \" <> fp) pure $\n+        findEntryByPath fp dar\n+    getModule modName pkg =\n+        maybe\n+            (ioError $\n+             userError $\n+             T.unpack $ \"Can't find module\" <> LF.moduleNameString modName)\n+            pure $\n+        NM.lookup modName $ LF.packageModules pkg\n+    generatePkgMap logH dar =\n+        withSystemTempDirectory \"generatePkgMap\" $ \\tmpDir -> do"
  },
  {
    "id" : "7d94f301-190d-479d-b4bc-31790487d5d4",
    "prId" : 1940,
    "comments" : [
      {
        "id" : "32aa2e23-d2a8-468e-9b87-645599783973",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "Are these warnings that our code is broken? Or the users code? Don't log warnings in user code and logWarning",
        "createdAt" : "2019-06-29T10:10:29Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3e97f665-b885-4635-8a94-6fc1ed2c6cfd",
        "parentId" : "32aa2e23-d2a8-468e-9b87-645599783973",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "These warnings would show that the decoding of the package failed. That either points at a problem of our code or that the package is corrupted. So is logWarning correct in that case? Or what else to use?",
        "createdAt" : "2019-07-01T11:00:27Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d25ebc1830d3baac273a8895038c82cf8fb85240",
    "line" : null,
    "diffHunk" : "@@ -660,19 +664,22 @@ execMigrate opts inFile1 inFile2 mbDir = do\n             createDirectoryIfMissing True $ takeDirectory path\n             writeFile path mod\n   where\n-    parse loggerH fp = do\n-        errOrMod <-\n-            runGhcFast $\n-            runExceptT $ do\n-                lift $ setupDamlGHC [] Nothing []\n-                -- parse without any preprocessing, so that we can see which data definitions have\n-                -- already generic instances.\n-                parseFileContents ((,) []) fp Nothing\n-        case errOrMod of\n-            Left err -> ioError $ userError $ show err\n-            Right (ds, mod) -> do\n-                unless (null ds) $ Logger.logWarning loggerH (T.pack $ show ds)\n-                return mod\n+    getEntry fp dar =\n+        maybe (ioError $ userError $ \"Package does not contain \" <> fp) pure $\n+        findEntryByPath fp dar\n+    getModule modName pkg =\n+        maybe\n+            (ioError $\n+             userError $\n+             T.unpack $ \"Can't find module\" <> LF.moduleNameString modName)\n+            pure $\n+        NM.lookup modName $ LF.packageModules pkg\n+    generatePkgMap logH dar =\n+        withSystemTempDirectory \"generatePkgMap\" $ \\tmpDir -> do\n+            extractFilesFromArchive [OptDestination tmpDir] dar\n+            (diags, pkgMap) <- generatePackageMap [tmpDir]\n+            unless (null diags) $ Logger.logWarning logH $ showDiagnostics diags"
  },
  {
    "id" : "248dd432-5a40-417b-8f9d-fe71033a443a",
    "prId" : 1804,
    "comments" : [
      {
        "id" : "eae25bb2-b614-4de0-a3c4-a704937ae84c",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should be `forM_`? ",
        "createdAt" : "2019-06-21T15:01:06Z",
        "updatedAt" : "2019-06-21T15:08:44Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "edae85ac-6345-4a80-b896-1f188264c43d",
        "parentId" : "eae25bb2-b614-4de0-a3c4-a704937ae84c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "right, wonder why I didn't got a warning. fixed.",
        "createdAt" : "2019-06-21T15:07:42Z",
        "updatedAt" : "2019-06-21T15:08:44Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "655f2789a4a30ed923510b55042b5f2949a99390",
    "line" : null,
    "diffHunk" : "@@ -625,17 +626,31 @@ execMigrate opts inFile1 inFile2 mbDir = do\n     forM_ pairs $ \\(e1, e2) -> do\n         let path1 = eRelativePath e1\n         let path2 = eRelativePath e2\n-        let generatedPath =\n+        let upgradeModPath =\n                 joinPath $ fromMaybe \"\" mbDir : (tail $ splitPath path1)\n+        let instancesModPath1 =\n+                replaceBaseName upgradeModPath $\n+                takeBaseName path1 <> \"InstancesA\"\n+        let instancesModPath2 =\n+                replaceBaseName upgradeModPath $\n+                takeBaseName path2 <> \"InstancesB\"\n         opts' <- Compiler.mkOptions opts\n         parsedMod1 <- parse opts' loggerH path1\n         parsedMod2 <- parse opts' loggerH path2\n-        let generatedMod =\n+        let generatedUpgradeMod =\n                 generateUpgradeModule\n                     (pkg1, pm_parsed_source parsedMod1)\n                     (pkg2, pm_parsed_source parsedMod2)\n-        createDirectoryIfMissing True $ takeDirectory generatedPath\n-        writeFile generatedPath generatedMod\n+        let generatedInstancesMod1 =\n+                generateGenInstancesModule \"A\" (pkg1, pm_parsed_source parsedMod1)\n+        let generatedInstancesMod2 =\n+                generateGenInstancesModule \"B\" (pkg2, pm_parsed_source parsedMod2)\n+        forM [ (upgradeModPath, generatedUpgradeMod)"
  },
  {
    "id" : "1d4ed2f2-efee-4515-b9be-c8a09dc9a3e0",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "843013ab-5ff1-41f2-9a2c-4668d14a1840",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Why not Uniplate?",
        "createdAt" : "2019-06-06T21:44:18Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -428,6 +442,136 @@ execClean projectOpts = do\n             removeAndWarn \"dist\"\n             putStrLn \"Removed build artifacts.\"\n \n+\n+\n+data Action = ACreate (LF.Qualified LF.TypeConName) \n+            | AExercise (LF.Qualified LF.TypeConName) LF.ChoiceName deriving (Eq, Ord, Show )\n+\n+\n+startFromUpdate :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Update -> DS.Set Action\n+startFromUpdate seen world update = case update of \n+    LF.UPure _ e -> startFromExpr seen world e\n+    LF.UBind (LF.Binding _ e1) e2 -> startFromExpr seen world e1 `Set.union` startFromExpr seen world e2\n+    LF.UCreate tpl e -> Set.singleton (ACreate tpl) `Set.union` startFromExpr seen world e\n+    LF.UExercise tpl chc e1 e2 e3 -> Set.singleton (AExercise tpl chc) `Set.union` startFromExpr seen world e1 `Set.union` maybe Set.empty (startFromExpr seen world) e2 `Set.union` startFromExpr seen world e3\n+    LF.UFetch _ ctIdEx -> startFromExpr seen world ctIdEx\n+    LF.UGetTime -> Set.empty\n+    LF.UEmbedExpr _ upEx -> startFromExpr seen world upEx\n+    LF.ULookupByKey _ -> Set.empty\n+    LF.UFetchByKey _ -> Set.empty\n+\n+    -- \n+\n+startFromExpr :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World  -> LF.Expr -> DS.Set Action\n+startFromExpr seen world e = case e of\n+    LF.EVar _ -> Set.empty\n+    LF.EVal ref->  case LF.lookupValue ref world of \n+        Right LF.DefValue{..}  \n+            | ref `Set.member` seen  -> Set.empty\n+            | otherwise -> startFromExpr (Set.insert ref seen)  world dvalBody\n+        Left _ -> error \"This should not happen\"\n+    LF.EBuiltin _ -> Set.empty\n+    LF.ERecCon _ flds -> Set.unions $ map (\\(_, exp) -> startFromExpr seen world exp) flds\n+    LF.ERecProj _ _ recEx -> startFromExpr seen world recEx\n+    LF.ETupleUpd _ recExpr recUpdate -> startFromExpr seen world recExpr `Set.union` startFromExpr seen world recUpdate\n+    LF.EVariantCon _ _ varg -> startFromExpr seen world varg\n+    LF.ETupleCon tcon -> Set.unions $ map (\\(_, exp) -> startFromExpr seen world exp) tcon\n+    LF.ETupleProj _ tupExpr -> startFromExpr seen world tupExpr\n+    LF.ERecUpd _ _ recExpr recUpdate -> startFromExpr seen world recExpr `Set.union` startFromExpr seen world recUpdate\n+    LF.ETmApp tmExpr tmpArg -> startFromExpr seen world tmExpr `Set.union` startFromExpr seen world tmpArg\n+    LF.ETyApp tAppExpr _ -> startFromExpr seen world tAppExpr\n+    LF.ETmLam _ tmlB -> startFromExpr seen world tmlB\n+    LF.ETyLam _ lambdy -> startFromExpr seen world lambdy\n+    LF.ECase cas casel -> startFromExpr seen world cas `Set.union` Set.unions ( map ( startFromExpr seen world . LF.altExpr ) casel)\n+    LF.ELet (LF.Binding _ e1) e2 -> startFromExpr seen  world e1 `Set.union` startFromExpr seen world e2\n+    LF.ENil _ -> Set.empty\n+    LF.ECons _ consH consT -> startFromExpr seen world consH `Set.union` startFromExpr seen world consT\n+    LF.ESome _ smBdy -> startFromExpr seen world smBdy\n+    LF.ENone _ -> Set.empty\n+    LF.EUpdate upd -> startFromUpdate seen world upd\n+    LF.EScenario _ -> Set.empty\n+    LF.ELocation _ e1 -> startFromExpr seen world e1\n+    -- x -> Set.unions $ map startFromExpr $ children x"
  },
  {
    "id" : "5668f85a-fb5b-4d49-9d4d-096fdafd59ea",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "f4197452-2880-4282-9289-9c52851acd15",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ncmdVisual :: Mod CommandFields Command\r\n```",
        "createdAt" : "2019-06-07T06:34:25Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73985f44-c67b-4fba-bc1e-7bd00a84dc9c",
        "parentId" : "f4197452-2880-4282-9289-9c52851acd15",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we take a DALF and a DAR as an input? I would have expected that you only pass the path to a fat DAR and we will then analyze the main dalf file inside.",
        "createdAt" : "2019-06-07T06:35:57Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ce7fcef3-c4ed-4b95-be1d-22936b194d67",
        "parentId" : "f4197452-2880-4282-9289-9c52851acd15",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yes, dar should be only input to this program. I am thinking of taking the dar and read the manifest and process the dalfs within. ",
        "createdAt" : "2019-06-07T13:24:47Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -132,6 +139,13 @@ cmdInspect =\n     jsonOpt = switch $ long \"json\" <> help \"Output the raw Protocol Buffer structures as JSON\"\n     cmd = execInspect <$> inputFileOpt <*> outputFileOpt <*> jsonOpt\n \n+cmdInspectMore :: Mod CommandFields Command"
  },
  {
    "id" : "1ff08de4-4486-404b-9888-f4f48d30c586",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "3a9a95b7-0611-4265-8985-0465d1d82f1a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would prefer if most of the visualization logic could go into a separate module.",
        "createdAt" : "2019-06-07T06:36:27Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -428,6 +442,136 @@ execClean projectOpts = do\n             removeAndWarn \"dist\"\n             putStrLn \"Removed build artifacts.\"\n \n+\n+\n+data Action = ACreate (LF.Qualified LF.TypeConName) "
  },
  {
    "id" : "a43876d2-8f5d-4fe2-83d6-5a492b1487d8",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "329a317f-dc43-4aa8-9f44-5f2ff7b5ca64",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You might want to use the recursion-schemes variant of LF.Update for this, i.e., `UpdateF` given that we already have that or as @neil-da suggested uniplate.",
        "createdAt" : "2019-06-07T06:39:02Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -428,6 +442,136 @@ execClean projectOpts = do\n             removeAndWarn \"dist\"\n             putStrLn \"Removed build artifacts.\"\n \n+\n+\n+data Action = ACreate (LF.Qualified LF.TypeConName) \n+            | AExercise (LF.Qualified LF.TypeConName) LF.ChoiceName deriving (Eq, Ord, Show )\n+\n+\n+startFromUpdate :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Update -> DS.Set Action\n+startFromUpdate seen world update = case update of "
  },
  {
    "id" : "28bb05c4-4e01-4c68-a176-984372480a3d",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "0e797651-984f-4e8f-b0cf-62d1435acf6f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a reason why you do not recurse here? If so, it would be nice to document this in a comment.",
        "createdAt" : "2019-06-07T06:39:56Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3cfb3fdb-61c5-4a24-8d27-18096aa41604",
        "parentId" : "0e797651-984f-4e8f-b0cf-62d1435acf6f",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Looks like a bug to me. But such bugs are inevitable if you don't use something automatic.",
        "createdAt" : "2019-06-07T13:55:16Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -428,6 +442,136 @@ execClean projectOpts = do\n             removeAndWarn \"dist\"\n             putStrLn \"Removed build artifacts.\"\n \n+\n+\n+data Action = ACreate (LF.Qualified LF.TypeConName) \n+            | AExercise (LF.Qualified LF.TypeConName) LF.ChoiceName deriving (Eq, Ord, Show )\n+\n+\n+startFromUpdate :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Update -> DS.Set Action\n+startFromUpdate seen world update = case update of \n+    LF.UPure _ e -> startFromExpr seen world e\n+    LF.UBind (LF.Binding _ e1) e2 -> startFromExpr seen world e1 `Set.union` startFromExpr seen world e2\n+    LF.UCreate tpl e -> Set.singleton (ACreate tpl) `Set.union` startFromExpr seen world e\n+    LF.UExercise tpl chc e1 e2 e3 -> Set.singleton (AExercise tpl chc) `Set.union` startFromExpr seen world e1 `Set.union` maybe Set.empty (startFromExpr seen world) e2 `Set.union` startFromExpr seen world e3\n+    LF.UFetch _ ctIdEx -> startFromExpr seen world ctIdEx\n+    LF.UGetTime -> Set.empty\n+    LF.UEmbedExpr _ upEx -> startFromExpr seen world upEx\n+    LF.ULookupByKey _ -> Set.empty"
  },
  {
    "id" : "4ab17b3b-5c57-4f68-82a2-c2819dc62ddd",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "50d9db35-466b-4b64-a7ca-d4f1902b088b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe we should have a proper datatype for `DAR` packages that has a list of `DALF`, the info from the manifest and whatever other info/files we put into the DAR`.",
        "createdAt" : "2019-06-07T06:48:39Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9732d673-84e0-47f4-b691-72b21d6dad11",
        "parentId" : "50d9db35-466b-4b64-a7ca-d4f1902b088b",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Strongly agree. CC @robin-da - I'd like a generic readDar/writeDar rather than custom places.",
        "createdAt" : "2019-06-07T13:55:45Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -428,6 +442,136 @@ execClean projectOpts = do\n             removeAndWarn \"dist\"\n             putStrLn \"Removed build artifacts.\"\n \n+\n+\n+data Action = ACreate (LF.Qualified LF.TypeConName) \n+            | AExercise (LF.Qualified LF.TypeConName) LF.ChoiceName deriving (Eq, Ord, Show )\n+\n+\n+startFromUpdate :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Update -> DS.Set Action\n+startFromUpdate seen world update = case update of \n+    LF.UPure _ e -> startFromExpr seen world e\n+    LF.UBind (LF.Binding _ e1) e2 -> startFromExpr seen world e1 `Set.union` startFromExpr seen world e2\n+    LF.UCreate tpl e -> Set.singleton (ACreate tpl) `Set.union` startFromExpr seen world e\n+    LF.UExercise tpl chc e1 e2 e3 -> Set.singleton (AExercise tpl chc) `Set.union` startFromExpr seen world e1 `Set.union` maybe Set.empty (startFromExpr seen world) e2 `Set.union` startFromExpr seen world e3\n+    LF.UFetch _ ctIdEx -> startFromExpr seen world ctIdEx\n+    LF.UGetTime -> Set.empty\n+    LF.UEmbedExpr _ upEx -> startFromExpr seen world upEx\n+    LF.ULookupByKey _ -> Set.empty\n+    LF.UFetchByKey _ -> Set.empty\n+\n+    -- \n+\n+startFromExpr :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World  -> LF.Expr -> DS.Set Action\n+startFromExpr seen world e = case e of\n+    LF.EVar _ -> Set.empty\n+    LF.EVal ref->  case LF.lookupValue ref world of \n+        Right LF.DefValue{..}  \n+            | ref `Set.member` seen  -> Set.empty\n+            | otherwise -> startFromExpr (Set.insert ref seen)  world dvalBody\n+        Left _ -> error \"This should not happen\"\n+    LF.EBuiltin _ -> Set.empty\n+    LF.ERecCon _ flds -> Set.unions $ map (\\(_, exp) -> startFromExpr seen world exp) flds\n+    LF.ERecProj _ _ recEx -> startFromExpr seen world recEx\n+    LF.ETupleUpd _ recExpr recUpdate -> startFromExpr seen world recExpr `Set.union` startFromExpr seen world recUpdate\n+    LF.EVariantCon _ _ varg -> startFromExpr seen world varg\n+    LF.ETupleCon tcon -> Set.unions $ map (\\(_, exp) -> startFromExpr seen world exp) tcon\n+    LF.ETupleProj _ tupExpr -> startFromExpr seen world tupExpr\n+    LF.ERecUpd _ _ recExpr recUpdate -> startFromExpr seen world recExpr `Set.union` startFromExpr seen world recUpdate\n+    LF.ETmApp tmExpr tmpArg -> startFromExpr seen world tmExpr `Set.union` startFromExpr seen world tmpArg\n+    LF.ETyApp tAppExpr _ -> startFromExpr seen world tAppExpr\n+    LF.ETmLam _ tmlB -> startFromExpr seen world tmlB\n+    LF.ETyLam _ lambdy -> startFromExpr seen world lambdy\n+    LF.ECase cas casel -> startFromExpr seen world cas `Set.union` Set.unions ( map ( startFromExpr seen world . LF.altExpr ) casel)\n+    LF.ELet (LF.Binding _ e1) e2 -> startFromExpr seen  world e1 `Set.union` startFromExpr seen world e2\n+    LF.ENil _ -> Set.empty\n+    LF.ECons _ consH consT -> startFromExpr seen world consH `Set.union` startFromExpr seen world consT\n+    LF.ESome _ smBdy -> startFromExpr seen world smBdy\n+    LF.ENone _ -> Set.empty\n+    LF.EUpdate upd -> startFromUpdate seen world upd\n+    LF.EScenario _ -> Set.empty\n+    LF.ELocation _ e1 -> startFromExpr seen world e1\n+    -- x -> Set.unions $ map startFromExpr $ children x\n+\n+startFromChoice :: LF.World -> LF.TemplateChoice -> DS.Set Action\n+startFromChoice world chc = startFromExpr Set.empty world (LF.chcUpdate chc)\n+\n+templatePossibleUpdates :: LF.World -> LF.Template -> DS.Set Action\n+templatePossibleUpdates world tpl = Set.unions $ map (startFromChoice world) (NM.toList (LF.tplChoices tpl))\n+\n+moduleAndTemplates :: LF.World -> LF.Module -> [(LF.TypeConName ,DS.Set Action)]\n+moduleAndTemplates world mod = retTypess\n+    where \n+        templates = templatesFromModule mod\n+        retTypess = map (\\t-> (LF.tplTypeCon t, templatePossibleUpdates world t )) templates\n+\n+listOfModules :: NM.NameMap LF.Module -> [LF.Module]\n+listOfModules modules = NM.toList modules\n+\n+templatesFromModule :: LF.Module -> [LF.Template]\n+templatesFromModule mod = NM.toList $ LF.moduleTemplates mod\n+\n+dalfsInDar :: Archive -> [BSL.ByteString]"
  },
  {
    "id" : "214e2911-62b7-4d10-a4e7-a104919c4d9f",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "c91c6736-3d28-4132-934c-09c3c2e83849",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would prefer if we propagate the `Either` to the top/IO instead of turning it into a call to `error`.",
        "createdAt" : "2019-06-07T06:49:43Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -428,6 +442,136 @@ execClean projectOpts = do\n             removeAndWarn \"dist\"\n             putStrLn \"Removed build artifacts.\"\n \n+\n+\n+data Action = ACreate (LF.Qualified LF.TypeConName) \n+            | AExercise (LF.Qualified LF.TypeConName) LF.ChoiceName deriving (Eq, Ord, Show )\n+\n+\n+startFromUpdate :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Update -> DS.Set Action\n+startFromUpdate seen world update = case update of \n+    LF.UPure _ e -> startFromExpr seen world e\n+    LF.UBind (LF.Binding _ e1) e2 -> startFromExpr seen world e1 `Set.union` startFromExpr seen world e2\n+    LF.UCreate tpl e -> Set.singleton (ACreate tpl) `Set.union` startFromExpr seen world e\n+    LF.UExercise tpl chc e1 e2 e3 -> Set.singleton (AExercise tpl chc) `Set.union` startFromExpr seen world e1 `Set.union` maybe Set.empty (startFromExpr seen world) e2 `Set.union` startFromExpr seen world e3\n+    LF.UFetch _ ctIdEx -> startFromExpr seen world ctIdEx\n+    LF.UGetTime -> Set.empty\n+    LF.UEmbedExpr _ upEx -> startFromExpr seen world upEx\n+    LF.ULookupByKey _ -> Set.empty\n+    LF.UFetchByKey _ -> Set.empty\n+\n+    -- \n+\n+startFromExpr :: DS.Set (LF.Qualified LF.ExprValName) -> LF.World  -> LF.Expr -> DS.Set Action\n+startFromExpr seen world e = case e of\n+    LF.EVar _ -> Set.empty\n+    LF.EVal ref->  case LF.lookupValue ref world of \n+        Right LF.DefValue{..}  \n+            | ref `Set.member` seen  -> Set.empty\n+            | otherwise -> startFromExpr (Set.insert ref seen)  world dvalBody\n+        Left _ -> error \"This should not happen\"\n+    LF.EBuiltin _ -> Set.empty\n+    LF.ERecCon _ flds -> Set.unions $ map (\\(_, exp) -> startFromExpr seen world exp) flds\n+    LF.ERecProj _ _ recEx -> startFromExpr seen world recEx\n+    LF.ETupleUpd _ recExpr recUpdate -> startFromExpr seen world recExpr `Set.union` startFromExpr seen world recUpdate\n+    LF.EVariantCon _ _ varg -> startFromExpr seen world varg\n+    LF.ETupleCon tcon -> Set.unions $ map (\\(_, exp) -> startFromExpr seen world exp) tcon\n+    LF.ETupleProj _ tupExpr -> startFromExpr seen world tupExpr\n+    LF.ERecUpd _ _ recExpr recUpdate -> startFromExpr seen world recExpr `Set.union` startFromExpr seen world recUpdate\n+    LF.ETmApp tmExpr tmpArg -> startFromExpr seen world tmExpr `Set.union` startFromExpr seen world tmpArg\n+    LF.ETyApp tAppExpr _ -> startFromExpr seen world tAppExpr\n+    LF.ETmLam _ tmlB -> startFromExpr seen world tmlB\n+    LF.ETyLam _ lambdy -> startFromExpr seen world lambdy\n+    LF.ECase cas casel -> startFromExpr seen world cas `Set.union` Set.unions ( map ( startFromExpr seen world . LF.altExpr ) casel)\n+    LF.ELet (LF.Binding _ e1) e2 -> startFromExpr seen  world e1 `Set.union` startFromExpr seen world e2\n+    LF.ENil _ -> Set.empty\n+    LF.ECons _ consH consT -> startFromExpr seen world consH `Set.union` startFromExpr seen world consT\n+    LF.ESome _ smBdy -> startFromExpr seen world smBdy\n+    LF.ENone _ -> Set.empty\n+    LF.EUpdate upd -> startFromUpdate seen world upd\n+    LF.EScenario _ -> Set.empty\n+    LF.ELocation _ e1 -> startFromExpr seen world e1\n+    -- x -> Set.unions $ map startFromExpr $ children x\n+\n+startFromChoice :: LF.World -> LF.TemplateChoice -> DS.Set Action\n+startFromChoice world chc = startFromExpr Set.empty world (LF.chcUpdate chc)\n+\n+templatePossibleUpdates :: LF.World -> LF.Template -> DS.Set Action\n+templatePossibleUpdates world tpl = Set.unions $ map (startFromChoice world) (NM.toList (LF.tplChoices tpl))\n+\n+moduleAndTemplates :: LF.World -> LF.Module -> [(LF.TypeConName ,DS.Set Action)]\n+moduleAndTemplates world mod = retTypess\n+    where \n+        templates = templatesFromModule mod\n+        retTypess = map (\\t-> (LF.tplTypeCon t, templatePossibleUpdates world t )) templates\n+\n+listOfModules :: NM.NameMap LF.Module -> [LF.Module]\n+listOfModules modules = NM.toList modules\n+\n+templatesFromModule :: LF.Module -> [LF.Template]\n+templatesFromModule mod = NM.toList $ LF.moduleTemplates mod\n+\n+dalfsInDar :: Archive -> [BSL.ByteString]\n+dalfsInDar dar = [fromEntry e | e <- zEntries dar, \".dalf\" `isExtensionOf` eRelativePath e]\n+\n+dalfBytesToPakage :: BSL.ByteString -> (LF.PackageId, LF.Package)\n+dalfBytesToPakage bytes = case Archive.decodeArchive $ BSL.toStrict bytes of\n+    Right a -> a\n+    Left err -> error (show err)"
  },
  {
    "id" : "6fdb9efb-b193-4698-8086-9f46a52c5408",
    "prId" : 1552,
    "comments" : [
      {
        "id" : "0fe92ad6-02c6-411d-8b9b-5011d0f39654",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Let's not delete this line, since everything else has one here.",
        "createdAt" : "2019-06-07T13:57:28Z",
        "updatedAt" : "2019-06-07T21:57:42Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3ec3bf9852acf408563efda9362b6ebf167c3b86",
    "line" : null,
    "diffHunk" : "@@ -7,7 +7,6 @@\n \n -- | Main entry-point of the DAML compiler\n module DA.Cli.Damlc (main) where\n-"
  },
  {
    "id" : "a476a188-d985-4586-8d16-32c2ef6055da",
    "prId" : 1517,
    "comments" : [
      {
        "id" : "2ca2d32f-bd47-45e3-944c-62c04027ba07",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do you mean if we should be able to pass `--target` when running the IDE?",
        "createdAt" : "2019-06-04T17:41:40Z",
        "updatedAt" : "2019-06-04T17:42:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d6eb868-acc9-4770-b154-463bb3e7fd2c",
        "parentId" : "2ca2d32f-bd47-45e3-944c-62c04027ba07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That would be a first step but given that users don’t start the IDE process manually, it doesn’t help much. We probably want to consider adding an option in `daml.yaml` for the target LF versions so that this can be picked up automatically and all commands agree on the LF version.",
        "createdAt" : "2019-06-04T17:48:22Z",
        "updatedAt" : "2019-06-04T17:48:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "16370247-1b6d-4582-a265-99abdc71ee4f",
        "parentId" : "2ca2d32f-bd47-45e3-944c-62c04027ba07",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Or we only support one LF version, and say that if you want to use an old LF version, we demand you use an old SDK. I'm not inclined to complicate everything to allow people to downgrade just one aspect of the tool. The one exception is perhaps --lf=dev, to test the next version, but having that not work in the IDE is no big deal.",
        "createdAt" : "2019-06-04T18:45:01Z",
        "updatedAt" : "2019-06-04T18:45:01Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1578acab-aa59-4143-a6ab-3584203959ca",
        "parentId" : "2ca2d32f-bd47-45e3-944c-62c04027ba07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Making it a hidden flag and only supporting `dev` would be fine with me as well. What I don’t like is having it be a user-facing option (and given that this PR was the result of a bug report, one that users do use) that is not supported when using the IDE.",
        "createdAt" : "2019-06-04T18:50:22Z",
        "updatedAt" : "2019-06-04T18:50:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f2450d8-0a66-43f8-9290-c85e689c2745",
        "parentId" : "2ca2d32f-bd47-45e3-944c-62c04027ba07",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Agreed - the current state is not right. Simplifying the user experience seems better, since I think telling the user to downgrade would have been fine.",
        "createdAt" : "2019-06-04T18:53:30Z",
        "updatedAt" : "2019-06-04T18:53:30Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bb9de400cd2be5b72febfeca8f60d0b6c6d7a873",
    "line" : 14,
    "diffHunk" : "@@ -225,7 +225,8 @@ execIde telemetry (Debug debug) = NS.withSocketsDo $ do\n     opts <- liftIO $ defaultOptionsIO Nothing\n     withLogger $ \\loggerH ->\n         withScenarioService loggerH $ \\scenarioService -> do\n-            execInit (ProjectOpts Nothing (ProjectCheck \"\" False)) (InitPkgDb True)\n+            -- TODO we should allow different LF versions in the IDE."
  },
  {
    "id" : "d140cbb3-c74d-4bf6-aefb-7cbac62aa2d9",
    "prId" : 1508,
    "comments" : [
      {
        "id" : "eac43b52-0a50-4d0e-b941-0f853b11c1db",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Are we removing the option for the user to disable the scenario service? I think that's a useful option to have - e.g. on big projects it takes at extra 3Gb memory for things that are already very close to machine limits.",
        "createdAt" : "2019-06-04T12:52:26Z",
        "updatedAt" : "2019-06-04T14:03:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "81a80893-75ae-4c60-b976-ec9a12153cdd",
        "parentId" : "eac43b52-0a50-4d0e-b941-0f853b11c1db",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No, the option was mostly a gross hack so that we could disable the scenario service even if we had an event logger, e.g., in `damlc build`. For almost all commands this option doesn’t make sense, e.g., there is no reason to enable the scenario service in `damlc build` and there is no reason to disable the scenario service in `damlc test`. The only exception to that is `damlc ide` but that one actually doesn’t use `optionsParser` so it wasn’t possible to disable the scenario service before either. I do plan to add that option (it would also allow us to run LSP tests on CI even before we have figured out why grpc sometimes breaks) but there is no reason to do it in this PR.",
        "createdAt" : "2019-06-04T13:06:30Z",
        "updatedAt" : "2019-06-04T14:03:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "42a669ed-fc00-4ea5-86b8-6e39795fb02f",
        "parentId" : "eac43b52-0a50-4d0e-b941-0f853b11c1db",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Ack, that makes a lot of sense!",
        "createdAt" : "2019-06-04T13:13:44Z",
        "updatedAt" : "2019-06-04T14:03:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "17411959141284526399ee9f2ef5735ad2a26033",
    "line" : 167,
    "diffHunk" : "@@ -587,7 +585,7 @@ optionsParser numProcessors parsePkgName = Compiler.Options\n     <*> lfVersionOpt\n     <*> optDebugLog\n     <*> (concat <$> many optGhcCustomOptions)\n-    <*> optScenarioService\n+    <*> pure enableScenarioService"
  },
  {
    "id" : "f59df3e3-db2f-4e98-be6f-1eb37043b6ec",
    "prId" : 1401,
    "comments" : [
      {
        "id" : "f83d2d8b-03ed-4c87-8438-aefe70ed8ff5",
        "parentId" : null,
        "author" : null,
        "body" : "This isn't `daml init`, this is `daml damlc init`",
        "createdAt" : "2019-05-27T10:14:58Z",
        "updatedAt" : "2019-05-27T15:41:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "131c2b6f-7a0e-47a8-99ea-c285ee067c3a",
        "parentId" : "f83d2d8b-03ed-4c87-8438-aefe70ed8ff5",
        "author" : null,
        "body" : "Yeah, that's confusing.",
        "createdAt" : "2019-05-27T10:23:57Z",
        "updatedAt" : "2019-05-27T15:41:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1fa158154d4ffa2f8af5a90e9160a33463d34b97",
    "line" : null,
    "diffHunk" : "@@ -264,20 +269,20 @@ parseProjectConfig project = do\n     sdkVersion <- queryProjectConfigRequired [\"sdk-version\"] project\n     Right $ PackageConfigFields name main exposedModules version dependencies sdkVersion\n \n+-- | We assume that this is only called within `withProjectRoot`.\n withPackageConfig :: (PackageConfigFields -> IO a) -> IO a\n withPackageConfig f = do\n-    withProjectRoot $ \\_ -> do\n-        project <- readProjectConfig $ ProjectPath \".\"\n-        case parseProjectConfig project of\n-            Left err -> throwIO err\n-            Right pkgConfig -> f pkgConfig\n+    project <- readProjectConfig $ ProjectPath \".\"\n+    case parseProjectConfig project of\n+        Left err -> throwIO err\n+        Right pkgConfig -> f pkgConfig\n \n -- | If we're in a daml project, read the daml.yaml field and create the project local package\n -- database. Otherwise do nothing.\n-execInit :: InitPkgDb -> IO ()\n-execInit (InitPkgDb shouldInit) =\n+execInit :: Maybe ProjectPath -> InitPkgDb -> IO ()\n+execInit mbProjectRoot (InitPkgDb shouldInit) =\n     when shouldInit $\n-    withProjectRoot $ \\_relativize -> do\n+    withProjectRoot mbProjectRoot (ProjectCheck \"daml init\" True) $ \\_relativize -> do"
  },
  {
    "id" : "4ce73dee-a2d7-4951-9a66-3469aa1223b9",
    "prId" : 1401,
    "comments" : [
      {
        "id" : "14b7de81-cc80-4494-9f66-edc82fed8789",
        "parentId" : null,
        "author" : null,
        "body" : "It probably makes sense to group the `projectRootOpt` and `projectCheckOpt` into a single options parser, returning a type of \"project options\", and have a damlc wrapper over `withProjectRoot` that handles these options specifically.",
        "createdAt" : "2019-05-27T10:22:41Z",
        "updatedAt" : "2019-05-27T15:41:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d2d5bfdd-b698-419c-9f7e-75e777426a9d",
        "parentId" : "14b7de81-cc80-4494-9f66-edc82fed8789",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good idea, done.",
        "createdAt" : "2019-05-27T10:54:45Z",
        "updatedAt" : "2019-05-27T15:41:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1fa158154d4ffa2f8af5a90e9160a33463d34b97",
    "line" : null,
    "diffHunk" : "@@ -97,27 +98,29 @@ cmdTest numProcessors =\n     <> fullDesc\n   where\n     cmd = runTestsInProjectOrFiles\n-      <$> many inputFileOpt\n+      <$> projectRootOpt"
  },
  {
    "id" : "f5822908-96fb-4b7a-a180-16410c18a039",
    "prId" : 1375,
    "comments" : [
      {
        "id" : "da1e1ec4-8246-4918-b235-b242cda35c5d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Have you checked what happens if we get an error instead of a warning? My understanding is that those are already displayed without your PR so I would expect that they are now displayed twice?",
        "createdAt" : "2019-05-24T11:26:57Z",
        "updatedAt" : "2019-05-24T11:54:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c65f3098-1862-454b-8ce4-a0954f9fcf82",
        "parentId" : "da1e1ec4-8246-4918-b235-b242cda35c5d",
        "author" : null,
        "body" : "You're right, it now displays errors twice! Time to fix that.",
        "createdAt" : "2019-05-24T11:37:22Z",
        "updatedAt" : "2019-05-24T11:54:56Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "edffa058c14cf689cad5014010b84571f5906461",
    "line" : 25,
    "diffHunk" : "@@ -348,7 +350,9 @@ execBuild options mbOutFile initPkgDb projectCheck = do\n                     pVersion\n                     pExposedModules\n                     pDependencies\n-        Managed.with (Compiler.newIdeState opts Nothing loggerH) $ \\compilerH -> do\n+        let eventLogger (EventFileDiagnostics (fp, diags)) = printDiagnostics $ map (fp,) diags"
  },
  {
    "id" : "b1f14ac5-32cc-444a-9c17-bd7f1af004d9",
    "prId" : 1375,
    "comments" : [
      {
        "id" : "e17d2f3f-d1d7-4fe4-be28-f069ab2f577e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Given that we tried to avoid these slightly confusing negative flags in other places with `flagYesNoAuto` should we do this here as well?",
        "createdAt" : "2019-05-24T11:27:41Z",
        "updatedAt" : "2019-05-24T11:54:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "689482af-9bb0-4344-a505-5ffa13b254f3",
        "parentId" : "e17d2f3f-d1d7-4fe4-be28-f069ab2f577e",
        "author" : null,
        "body" : "Done! I added an extra argument in flagYesNoAuto so I can make the `scenario-service` flag internal.\r\n",
        "createdAt" : "2019-05-24T12:02:05Z",
        "updatedAt" : "2019-05-24T12:02:05Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "edffa058c14cf689cad5014010b84571f5906461",
    "line" : null,
    "diffHunk" : "@@ -666,6 +671,14 @@ optionsParser numProcessors parsePkgName = Compiler.Options\n         metavar \"OPTION\" <>\n         help \"Options to pass to the underlying GHC\"\n \n+    optScenarioService :: Parser Bool\n+    optScenarioService = fmap not .\n+        switch $\n+            help \"Disable scenario service.\" <>\n+            long \"disable-scenario-service\" <>"
  },
  {
    "id" : "3cbe2b1b-8305-4e19-b588-9c97fd87eae7",
    "prId" : 1237,
    "comments" : [
      {
        "id" : "f8043dde-0e65-44d5-b1b9-4aafc1d0c9e4",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Would prefer if we put everything in one dir...",
        "createdAt" : "2019-05-20T09:32:37Z",
        "updatedAt" : "2019-05-20T09:44:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "572b1c18-ab5e-40c4-9a2e-d4e53c6f3774",
        "parentId" : "f8043dde-0e65-44d5-b1b9-4aafc1d0c9e4",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Even better if the dir was `.daml`.",
        "createdAt" : "2019-05-20T09:32:46Z",
        "updatedAt" : "2019-05-20T09:44:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "68850059-11bd-4a05-9c61-b29ea0351ca1",
        "parentId" : "f8043dde-0e65-44d5-b1b9-4aafc1d0c9e4",
        "author" : null,
        "body" : "Me too. I think that can be done in a separate PR though.",
        "createdAt" : "2019-05-20T09:36:58Z",
        "updatedAt" : "2019-05-20T09:44:29Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d77e5011afeed2e97071c040ca829aaec13ae56e",
    "line" : null,
    "diffHunk" : "@@ -404,8 +412,22 @@ createProjectPackageDb lfVersion fps = do\n \n execBuild :: Compiler.Options -> Maybe FilePath -> IO ()\n execBuild options mbOutFile = do\n-  execInit\n-  execPackageNew options mbOutFile\n+    execInit\n+    execPackageNew options mbOutFile\n+\n+-- | Remove any build artifacts if they exist.\n+execClean :: IO ()\n+execClean = do\n+    withProjectRoot $ \\_relativize -> do\n+        isProject <- doesFileExist projectConfigName\n+        if isProject then do\n+            removePathForcibly projectPackageDatabase\n+            removePathForcibly \".interfaces\"\n+            removePathForcibly \"dist\""
  },
  {
    "id" : "cc0f4b02-dcb7-4075-92be-ae758b831dba",
    "prId" : 1214,
    "comments" : [
      {
        "id" : "90894470-584e-4b51-9606-bc05bea942ad",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That is a slightly misleading way to break lines. Can we please do\r\n```\r\nfunc\r\n  <$> arg1\r\n  <*> arg2\r\n```\r\nSame below.",
        "createdAt" : "2019-05-17T11:26:04Z",
        "updatedAt" : "2019-05-17T11:27:00Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8e184569-2bab-4462-b7ca-bcfcc16f2c8e",
        "parentId" : "90894470-584e-4b51-9606-bc05bea942ad",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "it's autoformatted by hindent.",
        "createdAt" : "2019-05-17T12:33:10Z",
        "updatedAt" : "2019-05-17T12:33:10Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b67864c7450e6985517971f7688b70b373d79920",
    "line" : 7,
    "diffHunk" : "@@ -132,15 +132,19 @@ cmdBuild numProcessors =\n     info (helper <*> cmd) $\n     progDesc \"Initialize, build and package the DAML project\" <> fullDesc\n   where\n-    cmd = execBuild numProcessors <$> optionalOutputFileOpt\n+    cmd =\n+        execBuild <$> optionsParser numProcessors (pure Nothing) <*>\n+        optionalOutputFileOpt"
  },
  {
    "id" : "3a4ef2c3-0523-454b-894c-f8af20ca63db",
    "prId" : 967,
    "comments" : [
      {
        "id" : "08785067-2ed9-4784-a3f5-86c22a54283d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    sdkVersion <- getSdkVersion\r\n```",
        "createdAt" : "2019-05-07T12:20:38Z",
        "updatedAt" : "2019-05-07T12:20:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fd354abca9905bbf6afe15e21e89dd90727c3fcb",
    "line" : 13,
    "diffHunk" : "@@ -242,7 +243,8 @@ parseProjectConfig project = do\n     version <- queryProjectConfigRequired [\"version\"] project\n     dependencies <-\n         queryProjectConfigRequired [\"dependencies\"] project\n-    Right $ PackageConfigFields name main exposedModules version dependencies\n+    sdkVersion <- queryProjectConfigRequired [\"sdk-version\"] project"
  },
  {
    "id" : "e1a3397c-686a-44c2-9b40-bca3a1276b80",
    "prId" : 954,
    "comments" : [
      {
        "id" : "09c5c488-3508-4c99-a18a-eb6a02829b3c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This needs to be changed to use `getProjectPath`. We should also handle the case where `getProjectPath` returns `Nothing`, i.e., we are outside of a project, and fallback to running `execTest` with an empty list of files. (That should fix your CI failures).",
        "createdAt" : "2019-05-07T07:13:46Z",
        "updatedAt" : "2019-05-07T14:59:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8fcbca8911cfee4d7aaacc85b766624733f3314f",
    "line" : null,
    "diffHunk" : "@@ -97,14 +97,22 @@ cmdTest numProcessors =\n        progDesc \"Test the given DAML file by running all test declarations.\"\n     <> fullDesc\n   where\n-    cmd = execTest\n+    cmd = runTestsInProjectOrFiles\n       <$> many inputFileOpt\n       <*> fmap UseColor colorOutput\n       <*> junitOutput\n       <*> optionsParser numProcessors optPackageName\n     junitOutput = optional $ strOption $ long \"junit\" <> metavar \"FILENAME\" <> help \"Filename of JUnit output file\"\n     colorOutput = switch $ long \"color\" <> help \"Colored test results\"\n \n+runTestsInProjectOrFiles :: [FilePath] -> UseColor -> Maybe FilePath -> Compiler.Options -> IO ()\n+runTestsInProjectOrFiles [] color mbJUnitOutput cliOptions = do\n+    project <- readProjectConfig $ ProjectPath \".\""
  },
  {
    "id" : "3376d974-307f-4e11-a222-530121647c24",
    "prId" : 702,
    "comments" : [
      {
        "id" : "7e92d4a9-c2ce-475e-8230-f430f27068c0",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Note that HLint finds this with `Ignore: Avoid lambda`, so if we didn't ignore that, we'd have been fine.",
        "createdAt" : "2019-04-25T14:37:30Z",
        "updatedAt" : "2019-04-25T14:39:09Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "629c68a3-ddf2-44b1-9aed-a3255f7859bd",
        "parentId" : "7e92d4a9-c2ce-475e-8230-f430f27068c0",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "I did not know that,  I need to learn using HLint",
        "createdAt" : "2019-04-25T15:10:10Z",
        "updatedAt" : "2019-04-25T15:10:10Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b11004f3acf2d3677b6b01b64f9a4d1b18827e3",
    "line" : 4,
    "diffHunk" : "@@ -98,7 +98,7 @@ cmdTest numProcessors =\n   where\n     cmd = execTest\n       <$> many inputFileOpt\n-      <*> fmap (\\x -> ColorTestResults x) colorOutput"
  },
  {
    "id" : "2123428a-4702-417f-89c1-bb004050482d",
    "prId" : 618,
    "comments" : [
      {
        "id" : "2fb5a3a9-a534-463c-bd5d-58d9d571d0f2",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "`--color` is probably a sufficient flag name. And I'd name the function `colorOutput`.",
        "createdAt" : "2019-04-23T15:09:17Z",
        "updatedAt" : "2019-04-23T19:35:30Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "efadb4b0bbd45eb2c125c101449937c4ab0174b3",
    "line" : null,
    "diffHunk" : "@@ -98,12 +98,11 @@ cmdTest numProcessors =\n   where\n     cmd = execTest\n       <$> many inputFileOpt\n+      <*> colorOutPut\n       <*> junitOutput\n       <*> optionsParser numProcessors optPackageName\n-    junitOutput = optional $ strOption $\n-        long \"junit\" <>\n-        metavar \"FILENAME\" <>\n-        help \"Filename of JUnit output file\"\n+    junitOutput = optional $ strOption $ long \"junit\" <> metavar \"FILENAME\" <> help \"Filename of JUnit output file\"\n+    colorOutPut = switch $ long \"colored\" <> help \"Colored test results\"  "
  },
  {
    "id" : "eb5b9e36-d565-4815-a76b-913f1025102c",
    "prId" : 618,
    "comments" : [
      {
        "id" : "78e0d7e4-d1bd-4874-b540-4634f8d9eb1c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      <*> fmap ColorTestResults colorOutput\r\n```",
        "createdAt" : "2019-04-25T13:52:46Z",
        "updatedAt" : "2019-04-25T13:56:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "efadb4b0bbd45eb2c125c101449937c4ab0174b3",
    "line" : 4,
    "diffHunk" : "@@ -98,12 +98,11 @@ cmdTest numProcessors =\n   where\n     cmd = execTest\n       <$> many inputFileOpt\n+      <*> fmap (\\x -> ColorTestResults x) colorOutput"
  },
  {
    "id" : "364581d3-b38c-4929-9f79-ddfe75439bf0",
    "prId" : 618,
    "comments" : [
      {
        "id" : "f2458c8f-de4f-4738-8ce4-6b1286d99a83",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why did you reformat this?",
        "createdAt" : "2019-04-25T13:53:10Z",
        "updatedAt" : "2019-04-25T13:56:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c58da15b-67ba-4af0-ab4f-d3b32c871d92",
        "parentId" : "f2458c8f-de4f-4738-8ce4-6b1286d99a83",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Felt it was more readable in a line vs having it in multi line  ",
        "createdAt" : "2019-04-25T14:00:56Z",
        "updatedAt" : "2019-04-25T14:00:57Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "efadb4b0bbd45eb2c125c101449937c4ab0174b3",
    "line" : 11,
    "diffHunk" : "@@ -98,12 +98,11 @@ cmdTest numProcessors =\n   where\n     cmd = execTest\n       <$> many inputFileOpt\n+      <*> fmap (\\x -> ColorTestResults x) colorOutput\n       <*> junitOutput\n       <*> optionsParser numProcessors optPackageName\n-    junitOutput = optional $ strOption $\n-        long \"junit\" <>\n-        metavar \"FILENAME\" <>\n-        help \"Filename of JUnit output file\"\n+    junitOutput = optional $ strOption $ long \"junit\" <> metavar \"FILENAME\" <> help \"Filename of JUnit output file\""
  },
  {
    "id" : "fec31098-fccf-48a6-a0b8-16afddf78785",
    "prId" : 618,
    "comments" : [
      {
        "id" : "b0d7f466-d72c-463b-bb2f-d61fd1ccfe64",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "\"color\" without the \"u\" looks so weird. ;)",
        "createdAt" : "2019-04-25T13:54:16Z",
        "updatedAt" : "2019-04-25T13:56:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "efadb4b0bbd45eb2c125c101449937c4ab0174b3",
    "line" : 12,
    "diffHunk" : "@@ -98,12 +98,11 @@ cmdTest numProcessors =\n   where\n     cmd = execTest\n       <$> many inputFileOpt\n+      <*> fmap (\\x -> ColorTestResults x) colorOutput\n       <*> junitOutput\n       <*> optionsParser numProcessors optPackageName\n-    junitOutput = optional $ strOption $\n-        long \"junit\" <>\n-        metavar \"FILENAME\" <>\n-        help \"Filename of JUnit output file\"\n+    junitOutput = optional $ strOption $ long \"junit\" <> metavar \"FILENAME\" <> help \"Filename of JUnit output file\"\n+    colorOutput = switch $ long \"color\" <> help \"Colored test results\""
  },
  {
    "id" : "828e616a-b74c-4541-874c-20d56c35fb85",
    "prId" : 395,
    "comments" : [
      {
        "id" : "2c879d08-43b9-434c-b58a-37f469d6d6c1",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "The capitalization here looks too much like a typo for my taste but your choice.",
        "createdAt" : "2019-04-12T12:11:28Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d429ff4e-506b-442a-b3bd-28441302df79",
        "parentId" : "2c879d08-43b9-434c-b58a-37f469d6d6c1",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "fixed it also for the old package command.",
        "createdAt" : "2019-04-15T09:02:18Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb8ecebc471a1b5ee865e291496690c3167b5aee",
    "line" : null,
    "diffHunk" : "@@ -123,6 +129,14 @@ cmdInspect =\n     cmd = execInspect <$> inputFileOpt <*> outputFileOpt <*> jsonOpt\n \n \n+cmdPackageNew :: Int -> Mod CommandFields Command\n+cmdPackageNew numProcessors =\n+    command \"package-new\" $\n+    info (helper <*> cmd) $\n+    progDesc \"Compile the DAML project into a DAML ARchive (DAR)\" <> fullDesc"
  },
  {
    "id" : "edde6900-c1dd-4251-842f-c1c5e1a05824",
    "prId" : 395,
    "comments" : [
      {
        "id" : "7e3fbaa1-e462-4917-9673-d8648b5b2c16",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "Maybe make an ADT for this instead of using a 5-tuple?",
        "createdAt" : "2019-04-12T12:12:27Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d465294-6f3f-4ed7-9d0b-f82414a16927",
        "parentId" : "7e3fbaa1-e462-4917-9673-d8648b5b2c16",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "done.",
        "createdAt" : "2019-04-15T09:13:08Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb8ecebc471a1b5ee865e291496690c3167b5aee",
    "line" : null,
    "diffHunk" : "@@ -208,7 +222,152 @@ execCompile inputFile outputFile opts = withProjectRoot $ \\relativize -> do\n \n newtype DumpPom = DumpPom{unDumpPom :: Bool}\n \n-execPackage :: FilePath -- ^ input file\n+execPackageNew :: Int -> Maybe FilePath -> IO ()\n+execPackageNew numProcessors mbOutFile =\n+    withProjectRoot $ \\_relativize -> do\n+        project <- readProjectConfig $ ProjectPath \".\"\n+        case parseProjectConfig project of\n+            Left err -> throwIO err\n+            Right (name, main, exposedModules, version, dependencies) -> do"
  },
  {
    "id" : "71d0b089-bbc0-4324-ada7-f5b88f38a84c",
    "prId" : 395,
    "comments" : [
      {
        "id" : "c0df1d10-aa05-4791-b513-ec1871be5fdb",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "Do we expect duplicated errors here?",
        "createdAt" : "2019-04-12T12:20:28Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "924743d9-35da-4a0b-93f7-00d547582a9b",
        "parentId" : "c0df1d10-aa05-4791-b513-ec1871be5fdb",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Also from the old packaging command, but I prefer to drop the dedup here as I don't understand why we need it.",
        "createdAt" : "2019-04-12T13:19:00Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb8ecebc471a1b5ee865e291496690c3167b5aee",
    "line" : null,
    "diffHunk" : "@@ -208,7 +222,152 @@ execCompile inputFile outputFile opts = withProjectRoot $ \\relativize -> do\n \n newtype DumpPom = DumpPom{unDumpPom :: Bool}\n \n-execPackage :: FilePath -- ^ input file\n+execPackageNew :: Int -> Maybe FilePath -> IO ()\n+execPackageNew numProcessors mbOutFile =\n+    withProjectRoot $ \\_relativize -> do\n+        project <- readProjectConfig $ ProjectPath \".\"\n+        case parseProjectConfig project of\n+            Left err -> throwIO err\n+            Right (name, main, exposedModules, version, dependencies) -> do\n+                createProjectPackageDb LF.versionDefault dependencies\n+                defaultOpts <- Compiler.defaultOptionsIO Nothing\n+                let opts =\n+                        defaultOpts\n+                            { optMbPackageName = Just name\n+                            , optThreads = numProcessors\n+                            , optWriteInterface = True\n+                            }\n+                loggerH <- getLogger opts \"package\"\n+                let confFile =\n+                        mkConfFile\n+                            name\n+                            version\n+                            LF.versionDefault\n+                            exposedModules\n+                            dependencies\n+                Managed.with (Compiler.newIdeState opts Nothing loggerH) $ \\compilerH -> do\n+                    darOrErr <-\n+                        runExceptT $\n+                        Compiler.buildDar\n+                            compilerH\n+                            main\n+                            name\n+                            [confFile]\n+                            (UseDalf False)\n+                    case darOrErr of\n+                        Left errs ->\n+                            ioError $\n+                            userError $\n+                            unlines\n+                                [ \"Creation of DAR file failed:\"\n+                                , T.unpack $\n+                                  Pretty.renderColored $\n+                                  Pretty.vcat $\n+                                  map prettyDiagnostic $\n+                                  Set.toList $ Set.fromList errs"
  },
  {
    "id" : "14a6243f-bcef-4950-80e5-803368ad6302",
    "prId" : 395,
    "comments" : [
      {
        "id" : "1460d82d-1c3f-4d36-a2f1-925b250136e9",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "So I guess this means we’ll use Maven to distribute packages initially?",
        "createdAt" : "2019-04-12T12:22:23Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be170265-5e1d-4590-b709-2ac5207bc8f9",
        "parentId" : "1460d82d-1c3f-4d36-a2f1-925b250136e9",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "This is from the old packaging command, I would not change it for now.",
        "createdAt" : "2019-04-12T13:18:05Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb8ecebc471a1b5ee865e291496690c3167b5aee",
    "line" : 176,
    "diffHunk" : "@@ -208,7 +222,152 @@ execCompile inputFile outputFile opts = withProjectRoot $ \\relativize -> do\n \n newtype DumpPom = DumpPom{unDumpPom :: Bool}\n \n-execPackage :: FilePath -- ^ input file\n+execPackageNew :: Int -> Maybe FilePath -> IO ()\n+execPackageNew numProcessors mbOutFile =\n+    withProjectRoot $ \\_relativize -> do\n+        project <- readProjectConfig $ ProjectPath \".\"\n+        case parseProjectConfig project of\n+            Left err -> throwIO err\n+            Right (name, main, exposedModules, version, dependencies) -> do\n+                createProjectPackageDb LF.versionDefault dependencies\n+                defaultOpts <- Compiler.defaultOptionsIO Nothing\n+                let opts =\n+                        defaultOpts\n+                            { optMbPackageName = Just name\n+                            , optThreads = numProcessors\n+                            , optWriteInterface = True\n+                            }\n+                loggerH <- getLogger opts \"package\"\n+                let confFile =\n+                        mkConfFile\n+                            name\n+                            version\n+                            LF.versionDefault\n+                            exposedModules\n+                            dependencies\n+                Managed.with (Compiler.newIdeState opts Nothing loggerH) $ \\compilerH -> do\n+                    darOrErr <-\n+                        runExceptT $\n+                        Compiler.buildDar\n+                            compilerH\n+                            main\n+                            name\n+                            [confFile]\n+                            (UseDalf False)\n+                    case darOrErr of\n+                        Left errs ->\n+                            ioError $\n+                            userError $\n+                            unlines\n+                                [ \"Creation of DAR file failed:\"\n+                                , T.unpack $\n+                                  Pretty.renderColored $\n+                                  Pretty.vcat $\n+                                  map prettyDiagnostic $\n+                                  Set.toList $ Set.fromList errs\n+                                ]\n+                        Right dar -> do\n+                            let fp = targetFilePath name\n+                            createDirectoryIfMissing True $ takeDirectory fp\n+                            B.writeFile fp dar\n+                            putStrLn $ \"Created \" <> fp <> \".\"\n+  where\n+    parseProjectConfig project = do\n+        name <- queryProjectConfigRequired [\"project\", \"name\"] project\n+        main <- queryProjectConfigRequired [\"project\", \"source\"] project\n+        exposedModules <-\n+            queryProjectConfigRequired [\"project\", \"exposed-modules\"] project\n+        version <- queryProjectConfigRequired [\"project\", \"version\"] project\n+        dependencies <-\n+            queryProjectConfigRequired [\"project\", \"dependencies\"] project\n+        Right (name, main, exposedModules, version, dependencies)\n+\n+    mkConfFile ::\n+           String\n+        -> String\n+        -> LF.Version\n+        -> [String]\n+        -> [FilePath]\n+        -> (String, B.ByteString)\n+    mkConfFile name version lfVersion exposedMods deps = (confName, bs)\n+      where\n+        confName = name ++ \".conf\"\n+        lfVersionStr = lfVersionString lfVersion\n+        bs =\n+            BSC.pack $\n+            unlines\n+                [ \"name: \" ++ name\n+                , \"id: \" ++ name\n+                , \"key: \" ++ name\n+                , \"version: \" ++ version\n+                , \"exposed: True\"\n+                , \"exposed-modules: \" ++ unwords exposedMods\n+                , \"import-dirs: ${pkgroot}\" </> lfVersionStr </> name\n+                , \"library-dirs: ${pkgroot}\" </> lfVersionStr </> name\n+                , \"data-dir: ${pkgroot}\" </> lfVersionStr </> name\n+                , \"depends: \" ++\n+                  unwords [dropExtension $ takeFileName dep | dep <- deps]\n+                ]\n+\n+    -- The default output filename is based on Maven coordinates if"
  },
  {
    "id" : "05f9aff6-dfc2-40c0-aa9e-20422913ca33",
    "prId" : 395,
    "comments" : [
      {
        "id" : "e150cb29-850f-4012-af19-600e04134b5d",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "This should probably use `locateRunfiles` instead so it works with `bazel run`, ghci and the final distribution.",
        "createdAt" : "2019-04-12T12:28:37Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4ea30c34-78ca-4bc8-9684-1ffe4d6192a6",
        "parentId" : "e150cb29-850f-4012-af19-600e04134b5d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "ah good idea!",
        "createdAt" : "2019-04-12T13:19:36Z",
        "updatedAt" : "2019-04-15T15:31:59Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb8ecebc471a1b5ee865e291496690c3167b5aee",
    "line" : 232,
    "diffHunk" : "@@ -208,7 +222,152 @@ execCompile inputFile outputFile opts = withProjectRoot $ \\relativize -> do\n \n newtype DumpPom = DumpPom{unDumpPom :: Bool}\n \n-execPackage :: FilePath -- ^ input file\n+execPackageNew :: Int -> Maybe FilePath -> IO ()\n+execPackageNew numProcessors mbOutFile =\n+    withProjectRoot $ \\_relativize -> do\n+        project <- readProjectConfig $ ProjectPath \".\"\n+        case parseProjectConfig project of\n+            Left err -> throwIO err\n+            Right (name, main, exposedModules, version, dependencies) -> do\n+                createProjectPackageDb LF.versionDefault dependencies\n+                defaultOpts <- Compiler.defaultOptionsIO Nothing\n+                let opts =\n+                        defaultOpts\n+                            { optMbPackageName = Just name\n+                            , optThreads = numProcessors\n+                            , optWriteInterface = True\n+                            }\n+                loggerH <- getLogger opts \"package\"\n+                let confFile =\n+                        mkConfFile\n+                            name\n+                            version\n+                            LF.versionDefault\n+                            exposedModules\n+                            dependencies\n+                Managed.with (Compiler.newIdeState opts Nothing loggerH) $ \\compilerH -> do\n+                    darOrErr <-\n+                        runExceptT $\n+                        Compiler.buildDar\n+                            compilerH\n+                            main\n+                            name\n+                            [confFile]\n+                            (UseDalf False)\n+                    case darOrErr of\n+                        Left errs ->\n+                            ioError $\n+                            userError $\n+                            unlines\n+                                [ \"Creation of DAR file failed:\"\n+                                , T.unpack $\n+                                  Pretty.renderColored $\n+                                  Pretty.vcat $\n+                                  map prettyDiagnostic $\n+                                  Set.toList $ Set.fromList errs\n+                                ]\n+                        Right dar -> do\n+                            let fp = targetFilePath name\n+                            createDirectoryIfMissing True $ takeDirectory fp\n+                            B.writeFile fp dar\n+                            putStrLn $ \"Created \" <> fp <> \".\"\n+  where\n+    parseProjectConfig project = do\n+        name <- queryProjectConfigRequired [\"project\", \"name\"] project\n+        main <- queryProjectConfigRequired [\"project\", \"source\"] project\n+        exposedModules <-\n+            queryProjectConfigRequired [\"project\", \"exposed-modules\"] project\n+        version <- queryProjectConfigRequired [\"project\", \"version\"] project\n+        dependencies <-\n+            queryProjectConfigRequired [\"project\", \"dependencies\"] project\n+        Right (name, main, exposedModules, version, dependencies)\n+\n+    mkConfFile ::\n+           String\n+        -> String\n+        -> LF.Version\n+        -> [String]\n+        -> [FilePath]\n+        -> (String, B.ByteString)\n+    mkConfFile name version lfVersion exposedMods deps = (confName, bs)\n+      where\n+        confName = name ++ \".conf\"\n+        lfVersionStr = lfVersionString lfVersion\n+        bs =\n+            BSC.pack $\n+            unlines\n+                [ \"name: \" ++ name\n+                , \"id: \" ++ name\n+                , \"key: \" ++ name\n+                , \"version: \" ++ version\n+                , \"exposed: True\"\n+                , \"exposed-modules: \" ++ unwords exposedMods\n+                , \"import-dirs: ${pkgroot}\" </> lfVersionStr </> name\n+                , \"library-dirs: ${pkgroot}\" </> lfVersionStr </> name\n+                , \"data-dir: ${pkgroot}\" </> lfVersionStr </> name\n+                , \"depends: \" ++\n+                  unwords [dropExtension $ takeFileName dep | dep <- deps]\n+                ]\n+\n+    -- The default output filename is based on Maven coordinates if\n+    -- the package name is specified via them, otherwise we use the\n+    -- name.\n+    defaultDarFile name =\n+        case Split.splitOn \":\" name of\n+            [_g, a, v] -> a <> \"-\" <> v <> \".dar\"\n+            _otherwise -> name <> \".dar\"\n+    targetFilePath name = fromMaybe (defaultDarFile name) mbOutFile\n+\n+-- | Create the project package database containing the given dar packages.\n+createProjectPackageDb :: LF.Version -> [FilePath] -> IO ()\n+createProjectPackageDb lfVersion fps = do\n+    let dbPath = projectPackageDatabase </> lfVersionString lfVersion\n+    createDirectoryIfMissing True dbPath\n+    let fps0 = filter (`notElem` basePackages) fps\n+    forM_ fps0 $ \\fp -> do\n+        bs <- BSL.readFile fp\n+        let pkgName = takeBaseName fp\n+        let archive = toArchive bs\n+        let confFiles =\n+                [ e\n+                | e <- zEntries archive\n+                , \".conf\" `isExtensionOf` eRelativePath e\n+                ]\n+        let dalfs =\n+                [ e\n+                | e <- zEntries archive\n+                , \".dalf\" `isExtensionOf` eRelativePath e\n+                ]\n+        let srcs =\n+                [ e\n+                | e <- zEntries archive\n+                , pkgName `isPrefixOf` eRelativePath e\n+                ]\n+        forM_ dalfs $ \\dalf ->\n+            BSL.writeFile (dbPath </> eRelativePath dalf) (fromEntry dalf)\n+        forM_ confFiles $ \\conf ->\n+            BSL.writeFile\n+                (dbPath </> (takeFileName $ eRelativePath conf))\n+                (fromEntry conf)\n+        createDirectoryIfMissing True $ dbPath </> pkgName\n+        forM_ srcs $ \\src ->\n+            BSL.writeFile (dbPath </> eRelativePath src) (fromEntry src)\n+    sdkRoot <- getSdkPath\n+    callCommand $\n+        unwords\n+            [ sdkRoot </> \"damlc/resources/ghc-pkg\""
  },
  {
    "id" : "5da705cd-05ec-466f-bc5a-3ea9d48f7b75",
    "prId" : 394,
    "comments" : [
      {
        "id" : "e36d2ddc-1617-4d42-8e74-5f66838d1123",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "```suggestion\r\n    when (or failed) exitFailure\r\n```",
        "createdAt" : "2019-04-11T12:58:16Z",
        "updatedAt" : "2019-04-11T18:07:00Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e26f180ff25c499c2cb72651454c5d2f22572e67",
    "line" : null,
    "diffHunk" : "@@ -335,19 +336,21 @@ prettyResult lfVersion errOrResult = case errOrResult of\n     <> DA.Pretty.int nTx <> \" transactions.\"\n \n testStdio :: LF.Version -> IdeState -> [FilePath] -> IO ()\n-testStdio lfVersion hDamlGhc files =\n-    CompilerService.runAction hDamlGhc $\n-        void $ Shake.forP files $ \\file -> do\n+testStdio lfVersion hDamlGhc files = do\n+    failed <- CompilerService.runAction hDamlGhc $\n+        Shake.forP files $ \\file -> do\n             mbScenarioResults <- CompilerService.runScenarios file\n             scenarioResults <- liftIO $ maybe (reportDiagnostics hDamlGhc \"Failed to run scenarios\") pure mbScenarioResults\n             liftIO $ forM_ scenarioResults $ \\(VRScenario vrFile vrName, result) -> do\n                 let doc = prettyResult lfVersion result\n                 let name = DA.Pretty.string vrFile <> \":\" <> DA.Pretty.pretty vrName\n                 putStrLn $ DA.Pretty.renderPlain (name <> \": \" <> doc)\n+            pure $ any (isLeft . snd) scenarioResults\n+    when (or failed) $ exitFailure"
  },
  {
    "id" : "a58d4b60-8e82-43cd-95fe-ca3cb869b361",
    "prId" : 394,
    "comments" : [
      {
        "id" : "95436677-4911-4be3-957b-4101086c9176",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd have put the `or` just before the `forP` as that seems to make more sense to me. But your call.",
        "createdAt" : "2019-04-11T12:59:08Z",
        "updatedAt" : "2019-04-11T18:07:00Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e26f180ff25c499c2cb72651454c5d2f22572e67",
    "line" : null,
    "diffHunk" : "@@ -335,19 +336,21 @@ prettyResult lfVersion errOrResult = case errOrResult of\n     <> DA.Pretty.int nTx <> \" transactions.\"\n \n testStdio :: LF.Version -> IdeState -> [FilePath] -> IO ()\n-testStdio lfVersion hDamlGhc files =\n-    CompilerService.runAction hDamlGhc $\n-        void $ Shake.forP files $ \\file -> do\n+testStdio lfVersion hDamlGhc files = do\n+    failed <- CompilerService.runAction hDamlGhc $"
  },
  {
    "id" : "45def395-5821-4f6e-a3f0-6c3bd37c7542",
    "prId" : 394,
    "comments" : [
      {
        "id" : "d0b9c712-dd65-4d43-9bc1-8dbf9262b938",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Yep, like this - I find this version of the code more readable. Your call which, but I'd prefer the two pieces next to each other follow the same pattern.",
        "createdAt" : "2019-04-11T12:59:58Z",
        "updatedAt" : "2019-04-11T18:07:00Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "33fa017c-9083-4dcc-8c9d-1a811b297ab9",
        "parentId" : "d0b9c712-dd65-4d43-9bc1-8dbf9262b938",
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "Agreed, I’ve moved the `or`.",
        "createdAt" : "2019-04-11T13:06:20Z",
        "updatedAt" : "2019-04-11T18:07:00Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e26f180ff25c499c2cb72651454c5d2f22572e67",
    "line" : 39,
    "diffHunk" : "@@ -365,6 +368,8 @@ testJUnit lfVersion hDamlGhc files junitOutput =\n         liftIO $ do\n             createDirectoryIfMissing True $ takeDirectory junitOutput\n             writeFile junitOutput $ XML.showTopElement $ toJUnit results\n+        pure (any (any (isJust . snd) . snd) results)"
  },
  {
    "id" : "a0a402ab-ff63-4bf2-a98d-ca95f998d4c6",
    "prId" : 194,
    "comments" : [
      {
        "id" : "35da5d9d-d465-498f-93c0-aa91915155bc",
        "parentId" : null,
        "author" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "body" : "I think we need to use the version we get from the `--target` flag here.",
        "createdAt" : "2019-04-04T13:02:06Z",
        "updatedAt" : "2019-04-04T16:13:32Z",
        "lastEditedBy" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a4339083-332f-4033-9b2e-1f2e5445f6b8",
        "parentId" : "35da5d9d-d465-498f-93c0-aa91915155bc",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I fix this in a separate PR, thanks!",
        "createdAt" : "2019-04-04T13:06:30Z",
        "updatedAt" : "2019-04-04T16:13:32Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fcdd0d5ea6d7e7d84c9ede0d15fc07a48afca499",
    "line" : 5,
    "diffHunk" : "@@ -181,7 +181,7 @@ execIde (Telemetry telemetry) (Debug debug) = NS.withSocketsDo $ Managed.runMana\n       then Logger.GCP.gcpLogger (>= Logger.Warning) loggerH\n       else pure loggerH\n \n-    opts <- liftIO defaultOptionsIO\n+    opts <- liftIO $ defaultOptionsIO Nothing"
  }
]