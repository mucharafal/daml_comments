[
  {
    "id" : "3c3b917d-9fe0-46d5-8bd5-63ee27dcafcb",
    "prId" : 1550,
    "comments" : [
      {
        "id" : "47704af6-b09b-43eb-8c5a-7cfb96cf7142",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "```suggestion\r\ninternalTypes = [\"Scenario\",\"Update\",\"ContractId\",\"Time\",\"Date\",\"Party\",\"Pair\",\"TextMap\"]\r\n```",
        "createdAt" : "2019-06-06T19:26:42Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e40aeb40fbf82a851c87a99859d87ecf2a54b5f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +637,641 @@-- deliberately remove 'GHC.Types.Opaque' as well.\ninternalTypes :: [String]\ninternalTypes = [\"Scenario\",\"Update\",\"ContractId\",\"Time\",\"Date\",\"Party\",\"Pair\", \"TextMap\"]\n\ninternalFunctions :: LF.Version -> MS.Map GHC.ModuleName [String]"
  },
  {
    "id" : "c9713251-e395-4c6a-9902-b1047792d8ad",
    "prId" : 1550,
    "comments" : [
      {
        "id" : "280e2332-80d1-4bb6-b52c-0b36a2f889de",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should this optional not be one further up? Isn't it in DA.Internal.LF? Should it be?",
        "createdAt" : "2019-06-06T19:33:33Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6635050c-e9cc-49df-a574-ea989e862878",
        "parentId" : "280e2332-80d1-4bb6-b52c-0b36a2f889de",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Given that we (should) erase during conversion to DAML-LF as well, it would make sense to have it in `DA.Internal.LF`. I'll move it in a separate PR.",
        "createdAt" : "2019-06-06T21:12:48Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e40aeb40fbf82a851c87a99859d87ecf2a54b5f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1248,1252 @@            \"TextMap\" -> pure (TBuiltin BTMap)\n            _ -> defaultTyCon\n    | isBuiltinName \"Optional\" t = pure (TBuiltin BTOptional)\n    | otherwise = defaultTyCon\n    where"
  },
  {
    "id" : "8d5182eb-437a-4bb5-ba23-88b8a6758bc2",
    "prId" : 1439,
    "comments" : [
      {
        "id" : "f1e7dc6b-dda4-4759-9399-89345b7e5b59",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Adding more and more cases where we donâ€™t at least match on the module name makes me sad. We should really fix this soon or at least do it properly for new code.",
        "createdAt" : "2019-05-29T06:39:10Z",
        "updatedAt" : "2019-05-29T06:45:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b3379ac9-8f94-40e2-8acc-3f1376fd98b1",
        "parentId" : "f1e7dc6b-dda4-4759-9399-89345b7e5b59",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree in general but I think this place is not particularly scary since the parser will generate these instances and hence it's under our control. At some point I will just kill the `Is` pattern synonym and force every pattern match to be proper.",
        "createdAt" : "2019-05-29T08:04:54Z",
        "updatedAt" : "2019-05-29T08:04:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "61cb487540d5ac1ba0bd5213722cdfb44b658e08",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +357,361 @@                let chcName = ChoiceName $ T.intercalate \".\" $ unTypeConName $ qualObject argTCon\n                consumptionType <- case varType consumption of\n                    TypeCon (Is \"NonConsuming\") _ -> pure NonConsuming\n                    TypeCon (Is \"PreConsuming\") _ -> pure PreConsuming\n                    TypeCon (Is \"PostConsuming\") _ -> pure PostConsuming"
  },
  {
    "id" : "627eafb5-b1c8-493c-b3dc-a42cf03461b3",
    "prId" : 1396,
    "comments" : [
      {
        "id" : "c2d8e19f-5408-466c-a529-e7da9085680b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This diff is mostly due to an additional level of indentation. \"Hide whitespace changes\" is your friend here.",
        "createdAt" : "2019-05-27T08:56:19Z",
        "updatedAt" : "2019-05-27T08:56:19Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "61719f027973d0fec992d13efc4d824a5973abf8",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1105,1109 @@convertCoercion env co = evalStateT (go env co) 0\n  where\n    go :: Env -> Coercion -> StateT Int ConvertM (LF.Expr -> LF.Expr, LF.Expr -> LF.Expr)\n    go env co@(coercionKind -> Pair s t)\n        | isReflCo co = pure (id, id)"
  },
  {
    "id" : "f2dd30f5-e7b2-4562-ae36-502aec9ec33e",
    "prId" : 1383,
    "comments" : [
      {
        "id" : "b5f793cd-836e-4a9d-a24b-8836c60d5efd",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Is it worth pushing an Int inside ConvertM? Having a way to find unique values seems like it could crop up in other places, and having those be unique inside a ConvertM seems like it could make things simpler. (That said, state is a fair bit slower than Reader, but I'm not sure how much we go through the monad)",
        "createdAt" : "2019-05-25T08:08:04Z",
        "updatedAt" : "2019-05-25T08:12:56Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8eb3c27f-c988-4132-80c6-02a29fbd5fe5",
        "parentId" : "b5f793cd-836e-4a9d-a24b-8836c60d5efd",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We definitely should use it elsewhere. There are quite a few places where we use hard coded names instead of fresh names which scare me. I'll do that one day...",
        "createdAt" : "2019-05-25T08:34:09Z",
        "updatedAt" : "2019-05-25T08:34:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1244a82574f2beea41d9a43de52cb3bccc7982e0",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +1023,1027 @@-- types or forall quantifications. We handle those cases by recursion into\n-- all sub-coercions.\nconvertCoercion :: Env -> Coercion -> StateT Int ConvertM (LF.Expr -> LF.Expr, LF.Expr -> LF.Expr)\nconvertCoercion env co@(coercionKind -> Pair s t)\n    | isReflCo co = pure (id, id)"
  },
  {
    "id" : "575fa8ed-402d-46cf-a6f7-0c94c42900c2",
    "prId" : 1383,
    "comments" : [
      {
        "id" : "17998ff3-7dc3-4690-abe0-fd22f7216118",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Do you really need fresh variables here? I would have thought capture rules meant that even if they were named identically they wouldn't conflict? That means we can get rid of the StateT, which would simplify things.",
        "createdAt" : "2019-05-25T08:12:44Z",
        "updatedAt" : "2019-05-25T08:12:56Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d1b57ae-88b4-426e-bda7-cd88226aaa58",
        "parentId" : "17998ff3-7dc3-4690-abe0-fd22f7216118",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "You're right, we don't necessarily need fresh names here. I'll remove them for now and consider reintroducing them when we have fresh name generation in `ConvertM`.",
        "createdAt" : "2019-05-25T08:34:42Z",
        "updatedAt" : "2019-05-25T08:34:42Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1244a82574f2beea41d9a43de52cb3bccc7982e0",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +1033,1037 @@        a' <- lift $ convertType env a'\n        x <- mkLamBinder\n        let to expr = ETmLam (x, a') $ bTo $ ETmApp expr $ aFrom $ EVar x\n        let from expr = ETmLam (x, a) $ bFrom $ ETmApp expr $ aTo $ EVar x\n        pure (to, from)"
  },
  {
    "id" : "7cd8b6b2-845b-4a9b-a50c-883918db2400",
    "prId" : 1219,
    "comments" : [
      {
        "id" : "5405d54a-4d2a-4b24-b164-0eee08421699",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Is this still right for non-complex keys? How can you change the semantics for the old one? Or do you believe this has identical semantics and is just a refactoring?",
        "createdAt" : "2019-05-17T15:43:32Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ea77910-dc16-4767-bf3b-18d6f3d7e464",
        "parentId" : "5405d54a-4d2a-4b24-b164-0eee08421699",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This function still does the right thing for contract keys obeying the syntactic restriction in DAML-LF 1.3. There's a check in the type checker making sure the restriction is obeyed for DAML-LF 1.3.",
        "createdAt" : "2019-05-17T15:51:10Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7400718d-0eca-4de0-9e0b-be3d5cac962c",
        "parentId" : "5405d54a-4d2a-4b24-b164-0eee08421699",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "version14 = versionDev for now, then we have a single place to roll. I like that.",
        "createdAt" : "2019-05-17T15:58:47Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4c9e8398-bbdd-4676-884e-7bbf0ce9e7c7",
        "parentId" : "5405d54a-4d2a-4b24-b164-0eee08421699",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-05-17T16:04:27Z",
        "updatedAt" : "2019-05-17T19:10:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f61bf61289aec3ad8e0feaddd529f5d9ba7b2dd2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1330,1334 @@--\n-- > maintainer = $key._2 ++ $key._1\nrewriteMaintainer :: Env -> LF.Expr -> LF.Expr -> ConvertM LF.Expr\nrewriteMaintainer env key maintainer = do\n    let keyMap = buildKeyMap (removeLocations key)"
  }
]