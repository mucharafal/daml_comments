[
  {
    "id" : "55d35700-708e-4887-a036-10faace1d054",
    "prId" : 1940,
    "comments" : [
      {
        "id" : "4c08f335-806b-4e67-a58e-bd3f7f813950",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "Rather than generate a Haskell source tree I'd have generated string output directly. I find that's more concise and easy to follow. Of course, more error prone and less types too. Your choice ultimately. ",
        "createdAt" : "2019-06-29T10:07:20Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eacaec15-0246-4885-9fc8-9a109b606193",
        "parentId" : "4c08f335-806b-4e67-a58e-bd3f7f813950",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "So in this particular case we already create a string. For the data declarations, I would prefer  going over the Haskell source tree because we can reuse the generic instances codegen copied from ghc, also the conversion is rather painless and straight forward.",
        "createdAt" : "2019-07-01T10:45:56Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d25ebc1830d3baac273a8895038c82cf8fb85240",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +71,75 @@-- | Generate non-consuming choices to upgrade all templates defined in the module.\ngenerateUpgradeModule :: [String] -> String -> String -> String -> String\ngenerateUpgradeModule templateNames modName pkgA pkgB =\n    unlines $ header ++ concatMap upgradeTemplate templateNames\n  where"
  }
]