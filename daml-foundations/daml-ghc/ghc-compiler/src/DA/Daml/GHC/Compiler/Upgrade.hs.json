[
  {
    "id" : "a8fd3abc-f967-42ab-b670-1c6aa1731647",
    "prId" : 1940,
    "comments" : [
      {
        "id" : "96e7f828-3b0d-4ba9-8b0e-7692b97b227d",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "Rather than generate a Haskell source tree I'd have generated string output directly. I find that's more concise and easy to follow. Of course, more error prone and less types too. Your choice ultimately. ",
        "createdAt" : "2019-06-29T10:07:20Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d95ebef8-43bb-4165-bb92-b53a08e16443",
        "parentId" : "96e7f828-3b0d-4ba9-8b0e-7692b97b227d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "So in this particular case we already create a string. For the data declarations, I would prefer  going over the Haskell source tree because we can reuse the generic instances codegen copied from ghc, also the conversion is rather painless and straight forward.",
        "createdAt" : "2019-07-01T10:45:56Z",
        "updatedAt" : "2019-07-01T11:27:19Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d25ebc1830d3baac273a8895038c82cf8fb85240",
    "line" : 54,
    "diffHunk" : "@@ -51,32 +69,10 @@ generateGenInstancesModule qual (pkg, L _l src) =\n     hasGenDerivation XHsDataDefn{} = False\n \n -- | Generate non-consuming choices to upgrade all templates defined in the module.\n-generateUpgradeModule ::\n-       (String, ParsedSource) -> (String, ParsedSource) -> String\n-generateUpgradeModule (pkgA, L _lA srcA) (pkgB, L _lB srcB) =\n-    unlines $ header ++ concatMap upgradeTemplate names\n+generateUpgradeModule :: [String] -> String -> String -> String -> String\n+generateUpgradeModule templateNames modName pkgA pkgB ="
  },
  {
    "id" : "23da62d7-dfcf-455a-80a8-7ab84d5194cc",
    "prId" : 1840,
    "comments" : [
      {
        "id" : "d556dcbd-8c73-476a-8816-65b78874376b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        or [ name `elem` map nameOccName genericClassNames\r\n```",
        "createdAt" : "2019-06-25T14:54:47Z",
        "updatedAt" : "2019-06-25T15:35:19Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6073d72f80f48ea96e2c534cd25453a8e731d5af",
    "line" : null,
    "diffHunk" : "@@ -38,8 +38,18 @@ generateGenInstancesModule qual (pkg, L _l src) =\n             tcdTyVars\n             tcdDataDefn\n         | L _ (TyClD _x DataDecl {..}) <- hsmodDecls src\n+        , not $ hasGenDerivation tcdDataDefn\n         ]\n \n+    hasGenDerivation :: HsDataDefn GhcPs -> Bool\n+    hasGenDerivation HsDataDefn {..} =\n+        or [ name `elem` [nameOccName n | n <- genericClassNames]"
  },
  {
    "id" : "4b79e95c-df30-4692-90b3-f98c2d4bce02",
    "prId" : 1707,
    "comments" : [
      {
        "id" : "736ea611-215d-4c26-aa08-150ea028f08b",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "```suggestion\r\ngenerateUpgradeModule (pkgA, L _lA srcA) (pkgB, L _lB srcB) = unlines $ header ++ concatMap upgradeTemplate names\r\n```",
        "createdAt" : "2019-06-17T11:54:48Z",
        "updatedAt" : "2019-06-17T14:05:04Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2c4e7e69876be18b89db41c246ef31aad2dcd83d",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+--\n+\n+module DA.Daml.GHC.Compiler.Upgrade\n+    ( generateUpgradeModule\n+    ) where\n+\n+import Data.Maybe\n+import \"ghc-lib\" GHC\n+import \"ghc-lib-parser\" Name\n+import \"ghc-lib-parser\" RdrName\n+\n+-- | Generate non-consuming choices to upgrade all templates defined in the module.\n+generateUpgradeModule ::\n+       (String, ParsedSource) -> (String, ParsedSource) -> String\n+generateUpgradeModule (pkgA, L _lA srcA) (pkgB, L _lB srcB) = unlines $ header ++ concat [ upgradeTemplate n | n <- names]"
  }
]