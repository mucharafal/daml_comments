[
  {
    "id" : "0d8537f1-4174-4090-8d7e-69153241d336",
    "prId" : 647,
    "comments" : [
      {
        "id" : "ab32ddde-6b7a-4cb7-b1a7-e96f8d138420",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I kind of liked having the logic for this in a separate function. Maybe add something like `mkTupleType :: [(FieldName, LF.Type)] -> ConvertM LF.Type` that only contains the type logic of `mkRepackStruct`.",
        "createdAt" : "2019-04-24T08:51:09Z",
        "updatedAt" : "2019-04-24T09:44:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b57d7e4a-cdf5-465f-a97a-976638f1ce51",
        "parentId" : "ab32ddde-6b7a-4cb7-b1a7-e96f8d138420",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In reality it looks less nice than I imagined. I'll leave it as is.",
        "createdAt" : "2019-04-24T08:58:28Z",
        "updatedAt" : "2019-04-24T09:44:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "91783220ed54e5468c1a92cdb1450daab699b8f6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +609,613 @@            t2 <- convertType env t2\n            let fields = [(mkField f1, t1), (mkField f2, t2)]\n            tupleTyCon <- qGHC_Tuple env (mkTypeCon [\"Tuple\" ++ show (length fields)])\n            let tupleType = TypeConApp tupleTyCon (map snd fields)\n            pure $ ETmLam (varV1, TTuple fields) $ ERecCon tupleType $ zipWithFrom mkFieldProj (1 :: Int) fields"
  },
  {
    "id" : "4a07f764-9631-4bd8-b1b0-20443f8074e9",
    "prId" : 574,
    "comments" : [
      {
        "id" : "15a72c42-b2e5-4e1e-8338-b7282d198681",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "If the EUpdate's aligned beneath each other i would find it more readadble",
        "createdAt" : "2019-04-17T15:27:25Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2a5bb43-9b4c-40cf-bc54-8bcbf33eb012",
        "parentId" : "15a72c42-b2e5-4e1e-8338-b7282d198681",
        "author" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-04-17T15:33:27Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +381,385 @@            --     return res\n            let archive = EUpdate $ UExercise tmplTyCon' (mkChoiceName \"Archive\") selfVar signatories mkEUnit\n            in EUpdate $ UBind (Binding (mkVar \"res\", chcReturnType) expr) $\n               EUpdate $ UBind (Binding (mkVar \"_\", TUnit) archive) $\n               EUpdate $ UPure chcReturnType (EVar $ mkVar \"res\")"
  },
  {
    "id" : "a7129ffc-53e1-4d00-a986-e774a516043e",
    "prId" : 508,
    "comments" : [
      {
        "id" : "51dcdda2-841a-4b1c-a857-32027c22d47f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like this should check the module name similar to the check for `Pair` below.",
        "createdAt" : "2019-04-16T06:22:14Z",
        "updatedAt" : "2019-04-16T06:30:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "abfc1eb7-1157-4f66-8808-656c1cf2fcf3",
        "parentId" : "51dcdda2-841a-4b1c-a857-32027c22d47f",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Half our stuff should do that... In general any use of VarIs is wrong.",
        "createdAt" : "2019-04-16T09:17:24Z",
        "updatedAt" : "2019-04-16T09:18:47Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf92b94a01cfef9127618cacb514fc95e11ff03",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +569,573 @@            , retrieveByKeyKey = EVar varV1\n            }\n    go env (VarIs \"unpackPair\") (LType (StrLitTy f1) : LType (StrLitTy f2) : LType t1 : LType t2 : args)\n        = fmap (, args) $ do\n            t1 <- convertType env t1"
  },
  {
    "id" : "5ced0624-4ddb-4d71-9c63-8d016b410ec5",
    "prId" : 508,
    "comments" : [
      {
        "id" : "80920a6d-fef8-4abc-8e7a-78fc1a6271e0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wonder if we should throw an error if `Pair` is not applied to `StrLitTy` instead of falling into the `otherwise` clause. I don’t think it should matter since users cannot produce use `Pair` anyway but it might make the intention of the code a bit clearer.",
        "createdAt" : "2019-04-16T06:24:43Z",
        "updatedAt" : "2019-04-16T06:30:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1d924535-d366-4b32-beaf-3ba124888c71",
        "parentId" : "80920a6d-fef8-4abc-8e7a-78fc1a6271e0",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "We could, but it's more code and makes it harder to read.",
        "createdAt" : "2019-04-16T09:17:53Z",
        "updatedAt" : "2019-04-16T09:18:47Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf92b94a01cfef9127618cacb514fc95e11ff03",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1084,1088 @@    , GHC.moduleName m == mkModuleName \"DA.Internal.LF\"\n    , getOccString t == \"Pair\"\n    , [StrLitTy f1, StrLitTy f2, t1, t2] <- ts = do\n        t1 <- convertType env t1\n        t2 <- convertType env t2"
  },
  {
    "id" : "d9d74173-d335-498e-8f84-1faa117930e2",
    "prId" : 418,
    "comments" : [
      {
        "id" : "b08729da-b7b7-41af-b4a4-351073f90f7b",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Would have been nice to get a little more details about the input structural record invariants in the comment. I assume it's `{_1 : a, _2: b, ...}`?",
        "createdAt" : "2019-04-12T09:06:34Z",
        "updatedAt" : "2019-04-12T09:06:38Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a854cd0e-6e92-4b99-bbf5-f8d4b57919b5",
        "parentId" : "b08729da-b7b7-41af-b4a4-351073f90f7b",
        "author" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "body" : "I thought that would be obvious from the `[(FieldName, LF.Type)]` part of the type signature. I'll improve it in a followup PR.",
        "createdAt" : "2019-04-12T12:45:37Z",
        "updatedAt" : "2019-04-12T12:45:47Z",
        "lastEditedBy" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0288b073-330c-42dd-a1e0-11ee73d623c5",
        "parentId" : "b08729da-b7b7-41af-b4a4-351073f90f7b",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Maybe it is now I look closer... but I guess i still don't know what the invariants on the field names are.",
        "createdAt" : "2019-04-12T12:47:09Z",
        "updatedAt" : "2019-04-12T12:47:13Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d8d1fb02-83af-4002-a748-99b67db86e43",
        "parentId" : "b08729da-b7b7-41af-b4a4-351073f90f7b",
        "author" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "body" : "The fields of the input structural record are put into the tuple in the order they appear in the list. The tuple's fields are name `_1`, `_2`, ... as usual. I'll given an example in the code.",
        "createdAt" : "2019-04-12T13:10:52Z",
        "updatedAt" : "2019-04-12T13:10:52Z",
        "lastEditedBy" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c02fd6e5fcdc3aee7f1a1821c95b2024deca90ac",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1268,1272 @@          `ETmApp` x\n\n-- | Turn the structural record referenced by `x` into a tuple from `GHC.Tuple`.\nmkRepackStruct :: Env -> [(FieldName, LF.Type)] -> ExprVarName -> ConvertM (LF.Expr, LF.Type)\nmkRepackStruct env fields x = do"
  },
  {
    "id" : "9ad9471b-f696-45bc-a4af-4994f28d76a9",
    "prId" : 340,
    "comments" : [
      {
        "id" : "c05f90a6-6167-44cc-aa74-4868c0bf84a6",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Didn't we have a helper function to test if something was a single constructor?",
        "createdAt" : "2019-04-09T17:46:47Z",
        "updatedAt" : "2019-04-09T17:46:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3efbe502-f2dc-495c-984d-6cb59c65cf5b",
        "parentId" : "c05f90a6-6167-44cc-aa74-4868c0bf84a6",
        "author" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "body" : "The helper function works on the data constructor level, not the type constructor level.",
        "createdAt" : "2019-04-09T17:54:25Z",
        "updatedAt" : "2019-04-09T17:54:25Z",
        "lastEditedBy" : {
          "login" : "martin-drhu-da",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/31696042?u=5fec5d8a968715bab332fcb4be485319b66a7892&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "380229ce20d9441f07e534534ac25314da8235fa",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +571,575 @@    -- the type class for `getField`.\n    go env (VarIs \"getField\") (Type (isStrLitTy -> Just name) : Type recordType@(TypeCon recordTyCon _) : Type _fieldType : _dict : record : args)\n        | Just [_] <- tyConDataCons_maybe recordTyCon = fmap (, args) $ do\n            recordType <- convertType env recordType\n            record <- convertExpr env record"
  }
]