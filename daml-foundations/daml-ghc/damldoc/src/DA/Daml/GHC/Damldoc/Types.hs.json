[
  {
    "id" : "d6b9e101-9475-43bd-aa4e-57a075fc69a4",
    "prId" : 2013,
    "comments" : [
      {
        "id" : "1348e3ac-7073-4ddd-a2ef-1e0b8cf5f728",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Including the anchor here seems slightly weird but Iâ€™m not really sure what a better place would be either.",
        "createdAt" : "2019-07-04T17:24:53Z",
        "updatedAt" : "2019-07-09T14:09:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "17a14137-7516-46f8-b453-d11cf8b0de18",
        "parentId" : "1348e3ac-7073-4ddd-a2ef-1e0b8cf5f728",
        "author" : null,
        "body" : "I was going to add a Modulename at first, but then realised I'd need to disambiguate, e.g., templates from classes and choices and other types. So I came to the conclusion that unless I was willing to replicate all that logic, or have the Ghc API bleed into the rest of damldocs, the thing I really want is to know the anchor so I can link the type to the right place when it's time to render it.",
        "createdAt" : "2019-07-04T17:43:21Z",
        "updatedAt" : "2019-07-09T14:09:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f8278423b236247b46b363205baf3d78563216e",
    "line" : null,
    "diffHunk" : "@@ -30,7 +30,7 @@ newtype Modulename = Modulename { unModulename :: Text }\n     deriving newtype (Eq, Ord, Show, ToJSON, FromJSON, IsString)\n \n -- | Type expression, possibly a (nested) type application\n-data Type = TypeApp Typename [Type] -- ^ Type application\n+data Type = TypeApp !(Maybe Anchor) !Typename [Type] -- ^ Type application"
  }
]