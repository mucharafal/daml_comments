[
  {
    "id" : "958af6fc-ec8c-41e2-b061-11bbbcf907e7",
    "prId" : 2010,
    "comments" : [
      {
        "id" : "2d498be9-3018-4bf0-8327-0d577adfd643",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This has been fixed since, see the `Standard library type points to standard library` test which checks that we get `Missing` for types in `GHC.Types` (since it’s wired in).",
        "createdAt" : "2019-07-04T14:13:02Z",
        "updatedAt" : "2019-07-04T14:21:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3c600ef43709140df8598676af5e57a1c324a49c",
    "line" : 33,
    "diffHunk" : "@@ -306,15 +305,12 @@ goToDefinitionTests mbScenarioService = Tasty.testGroup \"Go to definition tests\"\n             setFilesOfInterest [foo]\n             expectNoErrors\n             expectGoToDefinition (foo,2,[-1])   Missing             -- (out of range)\n-            -- expectGoToDefinition (foo,2,[0..2]) (At (foo,3,0))   -- \"foo\"            [see failing test]\n+            -- expectGoToDefinition (foo,2,[0..2]) (At (foo,3,0))   -- \"foo\" [see failing test \"Go to definition takes type sig to definition\"]\n             expectGoToDefinition (foo,2,[2..4]) Missing             -- \" : \"\n-            -- expectGoToDefinition (foo,2,[6..8]) (In \"GHC.Types\") -- \"Int\"            [see failing test]"
  },
  {
    "id" : "543198f0-3fce-4fa8-8048-e3b73700f41c",
    "prId" : 2010,
    "comments" : [
      {
        "id" : "61345fb6-4431-4633-9e55-8fd0691a0dae",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "@rohanjr Maybe something for you to look at as part of the new desugarer (I haven’t really looked into it for now since it seems very likely that the new desugarer will change this).",
        "createdAt" : "2019-07-04T14:14:09Z",
        "updatedAt" : "2019-07-04T14:21:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3c600ef43709140df8598676af5e57a1c324a49c",
    "line" : 108,
    "diffHunk" : "@@ -431,7 +432,10 @@ goToDefinitionTests mbScenarioService = Tasty.testGroup \"Go to definition tests\"\n                 ]\n             setFilesOfInterest [foo]\n             expectNoErrors\n+            -- This actually ends up pointing to \"concat\"."
  },
  {
    "id" : "ca3c0680-798e-44dd-a393-4352c435e9cf",
    "prId" : 1295,
    "comments" : [
      {
        "id" : "31490000-c84a-4940-a585-65ce2eda9952",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Better to use System.Info.Extra.isWindows",
        "createdAt" : "2019-05-21T16:46:23Z",
        "updatedAt" : "2019-05-22T14:26:41Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4590d95a-071a-4fae-be1c-7cfe21c6488c",
        "parentId" : "31490000-c84a-4940-a585-65ce2eda9952",
        "author" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "body" : "Thanks, modified.",
        "createdAt" : "2019-05-22T08:16:58Z",
        "updatedAt" : "2019-05-22T14:26:41Z",
        "lastEditedBy" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b02c1300b8d2fed9a46cc0b308a410796746b94",
    "line" : null,
    "diffHunk" : "@@ -739,3 +740,12 @@ stressTests mbScenarioService = Tasty.testGroup \"Stress tests\"\n -- | Suppress unused binding warning in case we run out of tests for open issues.\n _suppressUnusedWarning :: ()\n _suppressUnusedWarning = testCaseFails `seq` ()\n+\n+platformSpecificMsg :: T.Text -> T.Text\n+platformSpecificMsg msg = case os of"
  },
  {
    "id" : "32d754f6-c174-4bad-8c55-c5b38c5232bf",
    "prId" : 1295,
    "comments" : [
      {
        "id" : "bb4e4d7b-b4bb-448a-9837-9082b6837e7c",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I think this smart quote setting is something we should probably disable for everyone. I'm not sure I like it.",
        "createdAt" : "2019-05-21T16:46:44Z",
        "updatedAt" : "2019-05-22T14:26:41Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4f146af0-4c69-4120-8e6e-06b497178daf",
        "parentId" : "bb4e4d7b-b4bb-448a-9837-9082b6837e7c",
        "author" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "body" : "Is there a setting for this (DAML/GHC?) or do you mean unifying them at DAML compiler level (not only in tests)?",
        "createdAt" : "2019-05-22T08:32:47Z",
        "updatedAt" : "2019-05-22T14:26:41Z",
        "lastEditedBy" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f87c61b6-ba93-4075-8d26-e7d53bea4465",
        "parentId" : "bb4e4d7b-b4bb-448a-9837-9082b6837e7c",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "The smart quotes are controlled by `useUnicode` variable in DynFlags. As a result, it's not an OS determined variable, but something from sniffing the console. We should adjust the test case so it works with either, not on an OS specific basis.\r\n\r\nIf we're going to have smart quotes (which @cocreature seems to like) I'd rather turn on useUnicode everywhere, and then have a de-unicode pass for terminals that look like they might not be able to take it.",
        "createdAt" : "2019-05-22T09:54:59Z",
        "updatedAt" : "2019-05-22T14:26:41Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5fcbe540-1fdf-44a6-9687-2d825557b45b",
        "parentId" : "bb4e4d7b-b4bb-448a-9837-9082b6837e7c",
        "author" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "body" : "Thanks, I moved the logic to `Testing.hs` where messages are compared and made the comparision quotes agnostic. No OS checks now.",
        "createdAt" : "2019-05-22T12:13:53Z",
        "updatedAt" : "2019-05-22T14:26:41Z",
        "lastEditedBy" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b02c1300b8d2fed9a46cc0b308a410796746b94",
    "line" : null,
    "diffHunk" : "@@ -739,3 +740,12 @@ stressTests mbScenarioService = Tasty.testGroup \"Stress tests\"\n -- | Suppress unused binding warning in case we run out of tests for open issues.\n _suppressUnusedWarning :: ()\n _suppressUnusedWarning = testCaseFails `seq` ()\n+\n+platformSpecificMsg :: T.Text -> T.Text\n+platformSpecificMsg msg = case os of\n+    \"mingw32\" -> let\n+                     repl '‘' = '`'\n+                     repl '’' = '\\''\n+                     repl  c   = c"
  }
]