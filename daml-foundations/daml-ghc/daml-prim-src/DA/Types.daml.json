[
  {
    "id" : "8bb43738-2071-4f12-bd0f-ac1fc23c19e8",
    "prId" : 1099,
    "comments" : [
      {
        "id" : "c9167a20-38e0-47a1-a1bd-f659a64c234c",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "My biggest question was should this be DA.Type or DA.Types... I went with the latter but open to opposing opinions.",
        "createdAt" : "2019-05-13T11:40:42Z",
        "updatedAt" : "2019-05-13T14:32:45Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "17b80642-145c-47f4-ac5d-f0518fa05805",
        "parentId" : "c9167a20-38e0-47a1-a1bd-f659a64c234c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think `DA.Types` is good. `DA.Type` would sound like there's one type called `Type` in there.",
        "createdAt" : "2019-05-13T11:45:54Z",
        "updatedAt" : "2019-05-13T14:32:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b328c54ff93c948c799ea5642a4de7f3acd3caa0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+{-# LANGUAGE NoImplicitPrelude #-}\n+\n+daml 1.2\n+\n+-- | A module containing all the standard types from the base libraries,\n+--   so they have nice names when used from Java or similar.\n+module DA.Types where"
  },
  {
    "id" : "cc74466a-f148-4c8b-b68e-6fda2a496d4f",
    "prId" : 1099,
    "comments" : [
      {
        "id" : "f541f999-aa63-4e34-89fb-d7fffc5bdef2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- NOTE(MH): These types are not supposed to be used in DAML. The converter to\r\n```",
        "createdAt" : "2019-05-13T11:46:37Z",
        "updatedAt" : "2019-05-13T14:32:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b328c54ff93c948c799ea5642a4de7f3acd3caa0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+{-# LANGUAGE NoImplicitPrelude #-}\n+\n+daml 1.2\n+\n+-- | A module containing all the standard types from the base libraries,\n+--   so they have nice names when used from Java or similar.\n+module DA.Types where\n+\n+import GHC.Types()\n+\n+-- | The `Either` type represents values with two possibilities: a value of\n+-- type `Either a b` is either `Left a` or `Right b`.\n+--\n+-- The `Either` type is sometimes used to represent a value which is\n+-- either correct or an error; by convention, the `Left` constructor is\n+-- used to hold an error value and the `Right` constructor is used to\n+-- hold a correct value (mnemonic: \"right\" also means \"correct\").\n+data Either a b = Left a | Right b\n+\n+\n+-- NOTE(MH): These types are not supposed to be by DAML users. The converter to"
  },
  {
    "id" : "43c5dbb2-ede3-4c64-8443-d2964c75bf20",
    "prId" : 1099,
    "comments" : [
      {
        "id" : "a032d1e3-73cb-4d6a-82c2-44f233846712",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nmodule DA.Types\r\n  ( Either (..)\r\n  ) where\r\n```\r\nThe `TupleN` types are not supposed to be used in DAML anyway and DAML-LF does not care about export statements.",
        "createdAt" : "2019-05-13T11:48:48Z",
        "updatedAt" : "2019-05-13T14:32:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b328c54ff93c948c799ea5642a4de7f3acd3caa0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,60 @@\n+{-# LANGUAGE NoImplicitPrelude #-}\n+\n+daml 1.2\n+\n+-- | A module containing all the standard types from the base libraries,\n+--   so they have nice names when used from Java or similar.\n+module DA.Types where"
  }
]