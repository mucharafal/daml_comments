[
  {
    "id" : "9d3c5870-3af1-4ac2-a283-ce10364efb8b",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "b0ae0969-a9a0-43f5-ad6d-192568b068b2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Since `*` has to be commutative, we could scrap the second equation. I'm not sure this is a great idea though. @neil-da?",
        "createdAt" : "2019-05-16T07:33:23Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +78,82 @@--\n-- * `(*)` is distributive with respect to `(+)`, ie:\n--     `a * (b + c)` = `(a * b) + (a * c)` and `(b + c) * a` = `(b * a) + (c * a)`\nclass (Additive a, Multiplicative a) => Number a where\n  -- no methods"
  },
  {
    "id" : "eeb24a51-cf70-4ec9-9203-36cae43a4a03",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "17f53312-fec9-410c-9cbd-d70b014bbaf0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@neil-da Should we add a super class constraint `Number a` to this? What else does have a sign?",
        "createdAt" : "2019-05-16T07:34:09Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +83,87 @@\n-- | The `Signed` is for the sign of a number.\nclass Signed a where\n    -- | Sign of a number.\n    -- For real numbers, the 'signum' is either `-1` (negative), `0` (zero)"
  },
  {
    "id" : "21ea0135-c0f7-418a-801d-bbc5eafcdebd",
    "prId" : 419,
    "comments" : [
      {
        "id" : "7534c6ef-680c-4022-97dd-a5e9c547a848",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd be tempted not to give a default definition. It seems odd to have a default that is partial, but all useful implementations are total.",
        "createdAt" : "2019-04-16T09:25:47Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "09f03907-486c-4d02-8b70-424425f8cd4d",
        "parentId" : "7534c6ef-680c-4022-97dd-a5e9c547a848",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "The LF-native `Int` definition is partial. Indeed, for `Multiplicative`, there is only a partial definition, but one that i consider useful. If we want to have a default complete definition, I can move it to `Fractional`, but then the `Int` definition falls out of line as it errors on negative exponents rather than giving the expected result `0`.",
        "createdAt" : "2019-04-16T09:41:24Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "03e70c47-938b-4780-bab2-75cbb83fb2cc",
        "parentId" : "7534c6ef-680c-4022-97dd-a5e9c547a848",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "My point is why have a default definition at all? There's clearly variance over what it should do, which is fine, and nothing actually uses the default definition, so let's omit it.",
        "createdAt" : "2019-04-16T10:10:00Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f282e69c10af63c77c3809c010f499a8be3f90",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +72,76 @@    munit : a\n    -- | `x ^ n` raises `x` to the power of `n`.\n    (^): a -> Int -> a\n\n-- | Basic numeric class."
  },
  {
    "id" : "1f5804c1-2594-4a8e-84e0-390585ad522e",
    "prId" : 419,
    "comments" : [
      {
        "id" : "faf2349f-1aaf-4df0-9afa-cdab3153f4c7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not convinced we want that. We should instead fail when the exponent is negative. This would also allow for moving the `Fractional` type class to where it came from. Any opinions @neil-da?",
        "createdAt" : "2019-04-17T13:47:58Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f282e69c10af63c77c3809c010f499a8be3f90",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +122,126 @@        | n == 0 = 1.0\n        | n == 2 = x * x\n        | n < 0 = 1.0 / x ^ (negate n)\n        | n % 2 == 0 = (x ^ (n / 2)) ^ 2\n        | otherwise = x * x ^ (n - 1)"
  }
]