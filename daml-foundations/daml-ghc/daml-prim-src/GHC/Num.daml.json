[
  {
    "id" : "1ce74726-9883-4a00-925f-54588bad6284",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "efd43ec1-84a5-4c13-bf2c-48dc7211d3bd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- * `negate` gives the additive inverse, ie: `x + negate x` = `aunit`\r\n```",
        "createdAt" : "2019-05-16T07:27:13Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -33,23 +33,23 @@ infixr 8 ^\n infixl 7 /\n infixl 7 %\n \n--- | Basic additive class.\n--- Instances are expected to respect the following laws:\n+-- | Use the `Additive` class for types that can be added.\n+-- Instances have to follow these rules:\n --\n--- **Associativity of (+)**:`(x + y) + z` = `x + (y + z)`\n---\n--- **Commutativity of (+)**: `x + y` = `y + x`\n---\n--- `x + aunit` = `x`\n---\n--- `negate` **gives the additive inverse**: `x + negate x` = aunit\n+-- * (+) must be associative, ie:`(x + y) + z` = `x + (y + z)`\n+-- * (+) must be commutative, ie: `x + y` = `y + x`\n+-- * `x + aunit` = `x`\n+-- * `negate` gives the additive inverse, ie: `x + negate x` = aunit"
  },
  {
    "id" : "fd4d1c7d-8a36-4be1-92a4-458aeb759dfb",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "e1f606a9-cc21-4107-9b2e-3e783011c50f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think \"respect the following laws\" is a better formulation. After all, they are called \"laws\" in basic arithmetic. Same for multiplicative below.",
        "createdAt" : "2019-05-16T07:28:51Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -33,23 +33,23 @@ infixr 8 ^\n infixl 7 /\n infixl 7 %\n \n--- | Basic additive class.\n--- Instances are expected to respect the following laws:\n+-- | Use the `Additive` class for types that can be added.\n+-- Instances have to follow these rules:"
  },
  {
    "id" : "5f5c84c3-d294-4bd5-8375-423a58ad0ec1",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "c741c669-d74b-4363-93d7-5f389e853d49",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    -- | Add the two arguments together\r\n```",
        "createdAt" : "2019-05-16T07:29:12Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -33,23 +33,23 @@ infixr 8 ^\n infixl 7 /\n infixl 7 %\n \n--- | Basic additive class.\n--- Instances are expected to respect the following laws:\n+-- | Use the `Additive` class for types that can be added.\n+-- Instances have to follow these rules:\n --\n--- **Associativity of (+)**:`(x + y) + z` = `x + (y + z)`\n---\n--- **Commutativity of (+)**: `x + y` = `y + x`\n---\n--- `x + aunit` = `x`\n---\n--- `negate` **gives the additive inverse**: `x + negate x` = aunit\n+-- * (+) must be associative, ie:`(x + y) + z` = `x + (y + z)`\n+-- * (+) must be commutative, ie: `x + y` = `y + x`\n+-- * `x + aunit` = `x`\n+-- * `negate` gives the additive inverse, ie: `x + negate x` = aunit\n --\n class Additive a  where\n     {-# MINIMAL (+), aunit, (negate | (-)) #-}\n-    (+), (-)            : a -> a -> a\n-    -- Unary negation.\n+    -- | Add the first two arguments together"
  },
  {
    "id" : "7ee8235a-6e83-40c9-a0fa-0925f0f1791c",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "41102920-2f25-4107-a784-bb87c5125286",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- * `x * munit` = `x`\r\n```",
        "createdAt" : "2019-05-16T07:30:29Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -58,37 +58,38 @@ class Additive a  where\n     {-# INLINE negate #-}\n     negate x            = aunit - x\n \n--- | Basic multiplicative class.\n--- Instances are expected to respect the following laws:\n---\n--- **Associativity of (*)**:`(x * y) * z` = `x * (y * z)`\n---\n--- **Commutativity of (*)**: `x * y` = `y * x`\n+-- | Use the `Multiplicative` class for types that can be multiplied.\n+-- Instances have to follow these rules:\n --\n--- `x * one` = `x`\n+-- * (*) is associative, ie:`(x * y) * z` = `x * (y * z)`\n+-- * (*) is commutative, ie: `x * y` = `y * x`\n+-- * `x * one` = `x`"
  },
  {
    "id" : "46727897-13cd-4070-bedb-0f099e24af09",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "722d6788-c2da-4d53-a810-aec1dcc1742d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- | `Number` is a class for numerical types.\r\n```",
        "createdAt" : "2019-05-16T07:31:17Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -58,37 +58,38 @@ class Additive a  where\n     {-# INLINE negate #-}\n     negate x            = aunit - x\n \n--- | Basic multiplicative class.\n--- Instances are expected to respect the following laws:\n---\n--- **Associativity of (*)**:`(x * y) * z` = `x * (y * z)`\n---\n--- **Commutativity of (*)**: `x * y` = `y * x`\n+-- | Use the `Multiplicative` class for types that can be multiplied.\n+-- Instances have to follow these rules:\n --\n--- `x * one` = `x`\n+-- * (*) is associative, ie:`(x * y) * z` = `x * (y * z)`\n+-- * (*) is commutative, ie: `x * y` = `y * x`\n+-- * `x * one` = `x`\n --\n class Multiplicative a where\n+    -- | Multipy the arguments together\n     (*) : a -> a -> a\n+    -- | The multiplicative identity for the type. For example, for numbers, this is 1.\n     munit : a\n     -- | `x ^ n` raises `x` to the power of `n`.\n     (^): a -> Int -> a\n \n--- | Basic numeric class.\n--- Instances are usually expected to respect the following law\n--- (in addition to laws from being additive and multiplicative)\n+-- | `Number` is a class for basic numerical types."
  },
  {
    "id" : "abfd587b-ed34-4aee-899e-21f8c72ea7e2",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "d256d0c5-29e8-4a4a-9f24-d55a39103d4b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Since `*` has to be commutative, we could scrap the second equation. I'm not sure this is a great idea though. @neil-da?",
        "createdAt" : "2019-05-16T07:33:23Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 73,
    "diffHunk" : "@@ -58,37 +58,38 @@ class Additive a  where\n     {-# INLINE negate #-}\n     negate x            = aunit - x\n \n--- | Basic multiplicative class.\n--- Instances are expected to respect the following laws:\n---\n--- **Associativity of (*)**:`(x * y) * z` = `x * (y * z)`\n---\n--- **Commutativity of (*)**: `x * y` = `y * x`\n+-- | Use the `Multiplicative` class for types that can be multiplied.\n+-- Instances have to follow these rules:\n --\n--- `x * one` = `x`\n+-- * (*) is associative, ie:`(x * y) * z` = `x * (y * z)`\n+-- * (*) is commutative, ie: `x * y` = `y * x`\n+-- * `x * one` = `x`\n --\n class Multiplicative a where\n+    -- | Multipy the arguments together\n     (*) : a -> a -> a\n+    -- | The multiplicative identity for the type. For example, for numbers, this is 1.\n     munit : a\n     -- | `x ^ n` raises `x` to the power of `n`.\n     (^): a -> Int -> a\n \n--- | Basic numeric class.\n--- Instances are usually expected to respect the following law\n--- (in addition to laws from being additive and multiplicative)\n+-- | `Number` is a class for basic numerical types.\n+-- As well as the rules for `Additive` and `Multiplicative`, instances\n+-- also have to follow these rules:\n --\n--- **Distributivity of (*) with respect to (+)**:\n+-- * (*) is distributive with respect to (+), ie:\n --     `a * (b + c)` = `(a * b) + (a * c)` and `(b + c) * a` = `(b * a) + (c * a)`"
  },
  {
    "id" : "de154d39-9376-4c48-866c-6fba27e60de1",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "0cc6f4b0-6568-4143-99d7-7d9caf25f71a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@neil-da Should we add a super class constraint `Number a` to this? What else does have a sign?",
        "createdAt" : "2019-05-16T07:34:09Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 78,
    "diffHunk" : "@@ -58,37 +58,38 @@ class Additive a  where\n     {-# INLINE negate #-}\n     negate x            = aunit - x\n \n--- | Basic multiplicative class.\n--- Instances are expected to respect the following laws:\n---\n--- **Associativity of (*)**:`(x * y) * z` = `x * (y * z)`\n---\n--- **Commutativity of (*)**: `x * y` = `y * x`\n+-- | Use the `Multiplicative` class for types that can be multiplied.\n+-- Instances have to follow these rules:\n --\n--- `x * one` = `x`\n+-- * (*) is associative, ie:`(x * y) * z` = `x * (y * z)`\n+-- * (*) is commutative, ie: `x * y` = `y * x`\n+-- * `x * one` = `x`\n --\n class Multiplicative a where\n+    -- | Multipy the arguments together\n     (*) : a -> a -> a\n+    -- | The multiplicative identity for the type. For example, for numbers, this is 1.\n     munit : a\n     -- | `x ^ n` raises `x` to the power of `n`.\n     (^): a -> Int -> a\n \n--- | Basic numeric class.\n--- Instances are usually expected to respect the following law\n--- (in addition to laws from being additive and multiplicative)\n+-- | `Number` is a class for basic numerical types.\n+-- As well as the rules for `Additive` and `Multiplicative`, instances\n+-- also have to follow these rules:\n --\n--- **Distributivity of (*) with respect to (+)**:\n+-- * (*) is distributive with respect to (+), ie:\n --     `a * (b + c)` = `(a * b) + (a * c)` and `(b + c) * a` = `(b * a) + (c * a)`\n class (Additive a, Multiplicative a) => Number a where\n   -- no methods\n \n+-- | The `Signed` is for the sign of a number.\n class Signed a where"
  },
  {
    "id" : "123f2ce6-401b-4757-ad28-f1f84ff7fd80",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "da4dd67e-d1ba-4638-b243-ae04861cfb9d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    -- | Negate the argument: `x + negate x` = `aunit`\r\n```",
        "createdAt" : "2019-05-16T07:37:20Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -33,23 +33,23 @@ infixr 8 ^\n infixl 7 /\n infixl 7 %\n \n--- | Basic additive class.\n--- Instances are expected to respect the following laws:\n+-- | Use the `Additive` class for types that can be added.\n+-- Instances have to follow these rules:\n --\n--- **Associativity of (+)**:`(x + y) + z` = `x + (y + z)`\n---\n--- **Commutativity of (+)**: `x + y` = `y + x`\n---\n--- `x + aunit` = `x`\n---\n--- `negate` **gives the additive inverse**: `x + negate x` = aunit\n+-- * (+) must be associative, ie:`(x + y) + z` = `x + (y + z)`\n+-- * (+) must be commutative, ie: `x + y` = `y + x`\n+-- * `x + aunit` = `x`\n+-- * `negate` gives the additive inverse, ie: `x + negate x` = aunit\n --\n class Additive a  where\n     {-# MINIMAL (+), aunit, (negate | (-)) #-}\n-    (+), (-)            : a -> a -> a\n-    -- Unary negation.\n+    -- | Add the first two arguments together\n+    (+)                 : a -> a -> a\n+    -- | Subtract the second argument from the first argument\n+    (-)                 : a -> a -> a\n+    -- | Negate the argument: `x + negate x` = the additive identity for the type"
  },
  {
    "id" : "84f39f8f-1ba5-4d5b-bb7a-de53b8cdf3cc",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "728422f7-f1dc-4205-ad5d-4aa5bc554877",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    -- | Subtract the second argument from the first argument, ie. `x - y` = `x + negate y`\r\n```",
        "createdAt" : "2019-05-16T07:37:50Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -33,23 +33,23 @@ infixr 8 ^\n infixl 7 /\n infixl 7 %\n \n--- | Basic additive class.\n--- Instances are expected to respect the following laws:\n+-- | Use the `Additive` class for types that can be added.\n+-- Instances have to follow these rules:\n --\n--- **Associativity of (+)**:`(x + y) + z` = `x + (y + z)`\n---\n--- **Commutativity of (+)**: `x + y` = `y + x`\n---\n--- `x + aunit` = `x`\n---\n--- `negate` **gives the additive inverse**: `x + negate x` = aunit\n+-- * (+) must be associative, ie:`(x + y) + z` = `x + (y + z)`\n+-- * (+) must be commutative, ie: `x + y` = `y + x`\n+-- * `x + aunit` = `x`\n+-- * `negate` gives the additive inverse, ie: `x + negate x` = aunit\n --\n class Additive a  where\n     {-# MINIMAL (+), aunit, (negate | (-)) #-}\n-    (+), (-)            : a -> a -> a\n-    -- Unary negation.\n+    -- | Add the first two arguments together\n+    (+)                 : a -> a -> a\n+    -- | Subtract the second argument from the first argument"
  },
  {
    "id" : "e5a343fe-d342-484e-bdd6-8b1d3e045942",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "ed7b07c0-6eab-4784-b689-b8e849073e31",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should expand to say this is for types that can be divided. `recip x` does not need to be defined for all `x : a`, for instance it is not defined for `0.0 : Decimal`. There are also some laws:\r\n- when `recip x` is defined, it need to be the inverse of `x` wrt `*`, ie. `x * recip` = `munit` (in fact, our `Decimal` types only obeys this law only up to some precision)\r\n- when `recip y` is defined, then `x / y` = `x * recip y`",
        "createdAt" : "2019-05-16T07:42:02Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36aaef75-cbda-43ca-a4e8-3080300894d3",
        "parentId" : "ed7b07c0-6eab-4784-b689-b8e849073e31",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Added!",
        "createdAt" : "2019-05-16T08:37:21Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -132,11 +133,12 @@ instance Signed Decimal where\n     signum x = if x == 0.0 then 0.0 else if x <= 0.0 then (-1.0) else 1.0\n     abs x = if x <= 0.0 then negate x else x\n \n+-- | The `Fractional` class."
  },
  {
    "id" : "888aba39-74d8-4d21-a3e0-2247bcdee735",
    "prId" : 419,
    "comments" : [
      {
        "id" : "cd0d08d4-cd81-45c5-bffe-786cf3baa06d",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd be tempted not to give a default definition. It seems odd to have a default that is partial, but all useful implementations are total.",
        "createdAt" : "2019-04-16T09:25:47Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dac0ed33-71e3-441e-a917-f35d0918e279",
        "parentId" : "cd0d08d4-cd81-45c5-bffe-786cf3baa06d",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "The LF-native `Int` definition is partial. Indeed, for `Multiplicative`, there is only a partial definition, but one that i consider useful. If we want to have a default complete definition, I can move it to `Fractional`, but then the `Int` definition falls out of line as it errors on negative exponents rather than giving the expected result `0`.",
        "createdAt" : "2019-04-16T09:41:24Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "09903b75-beb7-4232-b8da-813f4710644f",
        "parentId" : "cd0d08d4-cd81-45c5-bffe-786cf3baa06d",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "My point is why have a default definition at all? There's clearly variance over what it should do, which is fine, and nothing actually uses the default definition, so let's omit it.",
        "createdAt" : "2019-04-16T10:10:00Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f282e69c10af63c77c3809c010f499a8be3f90",
    "line" : 33,
    "diffHunk" : "@@ -63,6 +70,14 @@ class Additive a  where\n class Multiplicative a where\n     (*) : a -> a -> a\n     munit : a\n+    -- | `x ^ n` raises `x` to the power of `n`.\n+    (^): a -> Int -> a"
  },
  {
    "id" : "22795fba-b178-4370-ba5e-e28851d393c5",
    "prId" : 419,
    "comments" : [
      {
        "id" : "b1b5b185-f5b8-4191-af92-12036e0be125",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Newline at the end of the file please - I recommend configuring your editor properly.",
        "createdAt" : "2019-04-16T09:26:29Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a9f282e69c10af63c77c3809c010f499a8be3f90",
    "line" : null,
    "diffHunk" : "@@ -108,10 +124,36 @@ instance Additive Decimal where\n instance Multiplicative Decimal where\n     (*) = primitive @\"BEMulDecimal\"\n     munit = 1.0\n+    x ^ n\n+        | n == 0 = 1.0\n+        | n == 2 = x * x\n+        | n < 0 = 1.0 / x ^ (negate n)\n+        | n % 2 == 0 = (x ^ (n / 2)) ^ 2\n+        | otherwise = x * x ^ (n - 1)\n \n instance Number Decimal where\n     -- no methods\n \n instance Signed Decimal where\n     signum x = if x == 0.0 then 0.0 else if x <= 0.0 then (-1.0) else 1.0\n     abs x = if x <= 0.0 then negate x else x\n+\n+class (Multiplicative a) => Fractional a where\n+    -- | `x / y` divides `x` by `y`.\n+    (/)                 : a -> a -> a\n+\n+    -- | Calculate the reciprocal: `recip x` is `1/x`.\n+    recip               : a -> a\n+    x / y               = x * recip y\n+\n+instance Fractional Decimal where\n+    (/) = primitive @\"BEDivDecimal\"\n+    recip x = 1.0 / x\n+\n+instance Fractional Int where\n+    (/) = primitive @\"BEDivInt64\"\n+    recip x = 1 / x\n+\n+-- | `x % y` calculates the remainder of `x` by `y`\n+(%) : Int -> Int -> Int\n+(%) = primitive @\"BEModInt64\""
  },
  {
    "id" : "7399257b-db3b-4e76-9857-dccd9db1fddd",
    "prId" : 419,
    "comments" : [
      {
        "id" : "8718d5d8-2f1d-47b1-bdc7-630030aa0a71",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not convinced we want that. We should instead fail when the exponent is negative. This would also allow for moving the `Fractional` type class to where it came from. Any opinions @neil-da?",
        "createdAt" : "2019-04-17T13:47:58Z",
        "updatedAt" : "2019-04-17T20:37:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f282e69c10af63c77c3809c010f499a8be3f90",
    "line" : 52,
    "diffHunk" : "@@ -108,10 +118,36 @@ instance Additive Decimal where\n instance Multiplicative Decimal where\n     (*) = primitive @\"BEMulDecimal\"\n     munit = 1.0\n+    x ^ n\n+        | n == 0 = 1.0\n+        | n == 2 = x * x\n+        | n < 0 = 1.0 / x ^ (negate n)"
  }
]