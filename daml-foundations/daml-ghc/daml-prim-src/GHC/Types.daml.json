[
  {
    "id" : "7fd8d03f-917b-4be8-8bdf-29f7cab9e347",
    "prId" : 1795,
    "comments" : [
      {
        "id" : "d61caf17-2b89-408c-9315-e3bb07195d42",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "This really is a \"kind\", not a type. In Haskell you have terms described by types, types described by kinds (and then kinds described by sorts, if you really want to get fancy - but no one does).",
        "createdAt" : "2019-06-21T11:36:53Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd87c084-861c-4e8c-89ab-f83bb7f04c7e",
        "parentId" : "d61caf17-2b89-408c-9315-e3bb07195d42",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Thanks, that's exactly the kind (ha ha) of trap I thought I might fall into here.\r\n\r\nShould I change all of these to kinds, or does that just apply to this one?",
        "createdAt" : "2019-06-21T11:44:43Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5d36a9b1-b5a3-410f-b04f-dfdfe16ba362",
        "parentId" : "d61caf17-2b89-408c-9315-e3bb07195d42",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Just this one.",
        "createdAt" : "2019-06-21T11:45:58Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b7913402e1343b01a33a990af2d0cc95728b2c5",
    "line" : null,
    "diffHunk" : "@@ -28,21 +28,22 @@ import GHC.Prim\n \n infixr 5 ::\n \n--- | The kind of constraints, like `Show a`\n+-- | A type for constraints, like `Show a`"
  },
  {
    "id" : "d936b057-8606-49cf-99f2-23fa351cd53c",
    "prId" : 1795,
    "comments" : [
      {
        "id" : "a3896308-4067-49f7-9e5a-80bcc8f299bc",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Can we omit the `()` brackets round the outside, otherwise it gets confusing, since Haskell does have banana brackets with `([` in some extensions.",
        "createdAt" : "2019-06-21T11:37:30Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a34e380c-eee3-409b-be9e-6ac3b50c8a3d",
        "parentId" : "a3896308-4067-49f7-9e5a-80bcc8f299bc",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-06-21T11:44:54Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b7913402e1343b01a33a990af2d0cc95728b2c5",
    "line" : null,
    "diffHunk" : "@@ -28,21 +28,22 @@ import GHC.Prim\n \n infixr 5 ::\n \n--- | The kind of constraints, like `Show a`\n+-- | A type for constraints, like `Show a`\n data Constraint\n \n -- | (Kind) This is the kind of type-level symbols.\n -- Declared here because class IP needs it\n data Symbol\n \n--- | Documentation for lists\n+-- | A type for lists (`[1,2,3]`)"
  },
  {
    "id" : "be93f88e-61b6-49ea-a3e7-122e4b797160",
    "prId" : 1795,
    "comments" : [
      {
        "id" : "77cc4121-0cca-4079-936b-2aa4fa235cfb",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "an example here would be great. Say they can represent any unicode code point.",
        "createdAt" : "2019-06-21T11:38:04Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b7913402e1343b01a33a990af2d0cc95728b2c5",
    "line" : null,
    "diffHunk" : "@@ -138,12 +140,13 @@ magic = magic -- deleted by the compiler\n -- | HIDE Dummy type to mark types built into DAML-LF.\n data Opaque = Opaque\n \n--- Text type built into DAML-LF.\n+-- | A type for text strings."
  },
  {
    "id" : "d0404080-5a5d-49e4-ba8e-61731bf4d7fe",
    "prId" : 1795,
    "comments" : [
      {
        "id" : "b30795ae-0ea5-4f35-912a-4b0f4a745f7b",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "perhaps `10e10` rather than `10^10`? In programming we tend to use the former as languages like C use `^` for XOR.",
        "createdAt" : "2019-06-21T11:38:50Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3fce07a7-8d06-4b3c-92b5-ca361474a157",
        "parentId" : "b30795ae-0ea5-4f35-912a-4b0f4a745f7b",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "sorted",
        "createdAt" : "2019-06-21T11:46:32Z",
        "updatedAt" : "2019-06-21T15:37:33Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b7913402e1343b01a33a990af2d0cc95728b2c5",
    "line" : null,
    "diffHunk" : "@@ -138,12 +140,13 @@ magic = magic -- deleted by the compiler\n -- | HIDE Dummy type to mark types built into DAML-LF.\n data Opaque = Opaque\n \n--- Text type built into DAML-LF.\n+-- | A type for text strings.\n data Text =\n   -- | HIDE\n   Text Opaque\n \n--- Decimal type built into DAML-LF.\n+-- | A type for fixed-point decimals: numbers of the form\n+-- | `x / 10^10` where `x` is an integer with `|x| < 10^38`"
  }
]