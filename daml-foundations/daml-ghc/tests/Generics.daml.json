[
  {
    "id" : "1f93d9f3-57fe-4abd-8f24-0c2c7a008464",
    "prId" : 1513,
    "comments" : [
      {
        "id" : "9958a56f-61dd-4055-9e30-842c4b8a8bcf",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we change all these tests to something like `assert $ from x == y && to y == x`, where `y` is a hard coded version of the generic representation of `x`? I think it would be good to observer that the right things is happening in the middle.",
        "createdAt" : "2019-06-04T13:31:54Z",
        "updatedAt" : "2019-06-04T15:20:04Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "29c97bf7-2e3d-432c-9718-d3925c801e04",
        "parentId" : "9958a56f-61dd-4055-9e30-842c4b8a8bcf",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "sure!",
        "createdAt" : "2019-06-04T13:36:17Z",
        "updatedAt" : "2019-06-04T15:20:04Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9220a0108df3a5a44585241faf427e8f87b5c11b",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,43 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE TypeOperators #-}\n+{-# LANGUAGE EmptyCase #-}\n+\n+daml 1.2\n+module Generics where\n+\n+import DA.Generics\n+\n+----------------------------------------------------------------------------------------------------\n+-- Non-recursive data structures\n+----------------------------------------------------------------------------------------------------\n+\n+data Void deriving Generic\n+\n+data Unit = Unit () deriving (Generic, Eq)\n+\n+data UnitRec = UnitRec {} deriving (Generic, Eq)\n+\n+data Nested a = Nested {nestedL : NestedL a, nestedR : NestedR} deriving Generic\n+\n+data NestedL a = NestedL {unNestedL : a} deriving Generic\n+\n+data NestedR = NestedRA | NestedRB Int deriving Generic\n+\n+type GenericNested a = Rec0 a :*: (U1 :+: Rec0 Int)\n+\n+----------------------------------------------------------------------------------------------------\n+-- Recursive data structures\n+----------------------------------------------------------------------------------------------------\n+\n+data Tree a = Leaf a | Node (Node0 a) deriving (Generic, Eq)\n+data Node0 a = Node0 {l : Tree a, r : Tree a} deriving (Generic, Eq)\n+\n+testTree : Tree Int\n+testTree = Node $ Node0 (Leaf 1) (Node $ Node0 (Leaf 2) (Leaf 3))\n+\n+test = scenario do\n+  assert $ (to $ from $ Unit ()) == Unit ()\n+  assert $ (to $ from $ UnitRec {}) == UnitRec {}\n+  assert $ (to $ from testTree) == testTree"
  }
]