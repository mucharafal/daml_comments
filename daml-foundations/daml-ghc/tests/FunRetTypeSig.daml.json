[
  {
    "id" : "3c8b6849-0362-4063-ba5d-44a46bbddd7d",
    "prId" : 904,
    "comments" : [
      {
        "id" : "266962d4-3951-4625-8c90-8c7ef6cdb0fa",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Can we test `succ 12 == 13` which we're at it?",
        "createdAt" : "2019-05-03T19:52:04Z",
        "updatedAt" : "2019-05-03T20:53:44Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4102b06b-4a79-44f3-afac-ac838de635fe",
        "parentId" : "266962d4-3951-4625-8c90-8c7ef6cdb0fa",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd personally do `fact 5 === 120` (`===` from `DA.Assert`) since then if they don't match we get a really helpful error message. I find `assert $ a == b` to be an anti-pattern.",
        "createdAt" : "2019-05-03T19:52:44Z",
        "updatedAt" : "2019-05-03T20:53:44Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88c636d9-e6a9-49ea-9cc0-d050005467fa",
        "parentId" : "266962d4-3951-4625-8c90-8c7ef6cdb0fa",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2019-05-03T20:08:19Z",
        "updatedAt" : "2019-05-03T20:53:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6c02f3a9cf749d9e10814f779a2c9c5df1affe4c",
    "line" : null,
    "diffHunk" : "@@ -7,4 +7,19 @@ module FunRetTypeSig where\n \n succ (x : Int) : Int = x + 1\n \n--- Related issue : https://github.com/digital-asset/daml/issues/747.\n+-- Regression tests for https://github.com/digital-asset/daml/issues/747\n+\n+-- Monomorphic test\n+fact (n : Int) : Int\n+  | n <= 1    = 1\n+  | otherwise = n * fact (n - 1)\n+\n+-- Polymorphic test\n+mymap (f : a -> b) (xs : [a]) : [b] = case xs of\n+    [] -> []\n+    x::xs -> f x::mymap f xs\n+\n+-- Test that the rewriting in the compiler works.\n+testFact = scenario do\n+  assert $ fact 5 == 120"
  }
]