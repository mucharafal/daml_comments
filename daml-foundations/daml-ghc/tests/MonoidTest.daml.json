[
  {
    "id" : "a1ccc826-8d3c-41bf-b0cd-4c869faaa7cb",
    "prId" : 2001,
    "comments" : [
      {
        "id" : "1b13da81-8011-4b52-9dd8-5029a5cc7629",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I wish we had doctests. Then we could remove these. :)",
        "createdAt" : "2019-07-04T09:03:24Z",
        "updatedAt" : "2019-07-04T09:03:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "deca30f9-1e34-45c7-9ae6-216be5f2fa70",
        "parentId" : "1b13da81-8011-4b52-9dd8-5029a5cc7629",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I was hoping to find some time to implement doctests sometime soon :slightly_smiling_face: ",
        "createdAt" : "2019-07-04T09:09:56Z",
        "updatedAt" : "2019-07-04T09:09:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2fa2f207b8199af96c489b349e751fc7c741e0cf",
    "line" : 15,
    "diffHunk" : "@@ -0,0 +1,15 @@\n+-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates.\n+-- All rights reserved.\n+\n+daml 1.2\n+module MonoidTest where\n+\n+import DA.Monoid\n+\n+testSum = scenario do\n+  assert $ Sum (1 : Int) <> Sum 2 == Sum (1 + 2)\n+  assert $ mempty == Sum (aunit : Int)\n+\n+testProduct = scenario do\n+  assert $ Product (2 : Int) <> Product 3 == Product (2 * 3)\n+  assert $ mempty == Product (munit : Int)"
  }
]