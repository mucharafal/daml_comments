[
  {
    "id" : "fbc6ff7e-de43-48ac-a368-96c9b6476cdf",
    "prId" : 574,
    "comments" : [
      {
        "id" : "ad71c921-8551-4102-8da2-4593d7ebecfc",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "```suggestion\r\n  choiceController T{..} _ = [p]\r\n```",
        "createdAt" : "2019-04-17T12:41:56Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,43 @@\n+daml 1.2\n+module ConsumingTests where\n+\n+template T\n+  with\n+    p : Party\n+  where\n+    signatory p\n+\n+    nonconsuming choice NoConsume : Int\n+      controller p\n+      do\n+        return 41\n+\n+    choice PreConsume : Int\n+      controller p\n+      do\n+        return 42\n+\n+-- Temporary : Will replace with DAML syntax when it's implemented.\n+\n+data PostConsume = PostConsume {} deriving (Eq, Show)\n+instance Choice T PostConsume Int where\n+  consuming = postconsuming\n+  choiceController (T{..}) _ = [p]"
  },
  {
    "id" : "1d53b3ff-42d1-4dbf-b18c-de1405f376e3",
    "prId" : 574,
    "comments" : [
      {
        "id" : "eab17ec5-bc58-4324-9afd-678db180d392",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Can we write this as `(+2) <$> exercise self Nonconsume` as that's what our user actually wants. Perhaps add a fetch too to check that as well.",
        "createdAt" : "2019-04-17T12:43:51Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "42610919-97b8-4c46-b044-5eb0c11694ce",
        "parentId" : "eab17ec5-bc58-4324-9afd-678db180d392",
        "author" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-04-17T14:35:33Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,43 @@\n+daml 1.2\n+module ConsumingTests where\n+\n+template T\n+  with\n+    p : Party\n+  where\n+    signatory p\n+\n+    nonconsuming choice NoConsume : Int\n+      controller p\n+      do\n+        return 41\n+\n+    choice PreConsume : Int\n+      controller p\n+      do\n+        return 42\n+\n+-- Temporary : Will replace with DAML syntax when it's implemented.\n+\n+data PostConsume = PostConsume {} deriving (Eq, Show)\n+instance Choice T PostConsume Int where\n+  consuming = postconsuming\n+  choiceController (T{..}) _ = [p]\n+  choice _ self _ =  do _ <- fetch self; return 43 -- Can fetch 'self' in choice body"
  },
  {
    "id" : "eb33a10f-5514-4df3-ab3a-ce29fa2b5461",
    "prId" : 574,
    "comments" : [
      {
        "id" : "7c88cdb7-fef0-4e95-90d9-48234816f179",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Can we have a PreConsumeBad that has a preconsume and a fetch that does submitFail, so we can differentiate between the two.",
        "createdAt" : "2019-04-17T12:49:25Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f21eb614-7eca-4e0f-bf0b-e6af1dcec42c",
        "parentId" : "7c88cdb7-fef0-4e95-90d9-48234816f179",
        "author" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-04-17T14:35:20Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,43 @@\n+daml 1.2\n+module ConsumingTests where\n+\n+template T\n+  with\n+    p : Party\n+  where\n+    signatory p\n+\n+    nonconsuming choice NoConsume : Int\n+      controller p\n+      do\n+        return 41\n+\n+    choice PreConsume : Int"
  }
]