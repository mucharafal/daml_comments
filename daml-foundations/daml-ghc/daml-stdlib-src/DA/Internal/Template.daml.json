[
  {
    "id" : "f1b466c2-7b75-4b7b-a43d-3206679a31a3",
    "prId" : 1695,
    "comments" : [
      {
        "id" : "eb7efb57-1d19-40d0-9146-4d7824b45db4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We could generalize this to `instance IsParties a => IsParties (Optional a)`. Not sure how sensible that would be.",
        "createdAt" : "2019-06-16T19:58:03Z",
        "updatedAt" : "2019-06-16T19:58:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "045e06d4-1a8e-4ef3-81d7-cc51c46d88e7",
        "parentId" : "eb7efb57-1d19-40d0-9146-4d7824b45db4",
        "author" : {
          "login" : "sofus-da",
          "name" : "Sofus Mortensen",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/29126788?u=92b937e565bf9b9bf3e75a926ccc26addec5a761&v=4"
        },
        "body" : "Actually I was thinking today that I will need `[Optional Party]` too. So guess they ought to both be generalized. ",
        "createdAt" : "2019-06-16T20:06:37Z",
        "updatedAt" : "2019-06-16T20:06:37Z",
        "lastEditedBy" : {
          "login" : "sofus-da",
          "name" : "Sofus Mortensen",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/29126788?u=92b937e565bf9b9bf3e75a926ccc26addec5a761&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "484effca-dc35-41ca-9a38-a443f30afad0",
        "parentId" : "eb7efb57-1d19-40d0-9146-4d7824b45db4",
        "author" : {
          "login" : "sofusmortensen",
          "name" : "Sofus Mortensen",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/2051286?u=7da626627cdd2284677b9d472c1de89271d8bfc5&v=4"
        },
        "body" : "@cocreature \r\nHmm - something like this, perhaps?\r\n```\r\ninstance IsParties Party where\r\n  toParties p = [p]\r\n\r\ninstance IsParties a => IsParties [a] where\r\n  toParties ps = concat $ fmap toParties ps\r\n\r\ninstance IsParties a => IsParties (Optional a) where\r\n  toParties None = []\r\n  toParties (Some p) = toParties p\r\n```",
        "createdAt" : "2019-06-16T22:24:00Z",
        "updatedAt" : "2019-06-16T22:24:00Z",
        "lastEditedBy" : {
          "login" : "sofusmortensen",
          "name" : "Sofus Mortensen",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/2051286?u=7da626627cdd2284677b9d472c1de89271d8bfc5&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "53bacacc-1166-4b97-96d8-9758bda06fa4",
        "parentId" : "eb7efb57-1d19-40d0-9146-4d7824b45db4",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks sensible to me but it would probably be good if someone who is more familiar with this takes a look, maybe @bame-da or @hurryabit.",
        "createdAt" : "2019-06-17T08:30:28Z",
        "updatedAt" : "2019-06-17T08:30:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "af08c9b5-52d7-462f-bd4f-e88de611fe3b",
        "parentId" : "eb7efb57-1d19-40d0-9146-4d7824b45db4",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Generalising the list version is going to lead to worse error messages. My inclination is that we should add `Optional Party` and `[Party]`, but if @sofus-da wants `[Optional Party]` then a catMaybes (or whatever we called it) should be used.",
        "createdAt" : "2019-06-17T10:57:41Z",
        "updatedAt" : "2019-06-17T10:58:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "68c44b56099e591a5db723d843c06f8eff5155f1",
    "line" : 4,
    "diffHunk" : "@@ -179,6 +179,10 @@ instance IsParties Party where\n instance IsParties [Party] where\n   toParties ps = ps\n \n+instance IsParties (Optional Party) where"
  },
  {
    "id" : "f24b3c0a-462b-43f4-849b-2ceb493f523f",
    "prId" : 1527,
    "comments" : [
      {
        "id" : "72dac2ac-65ed-4ab1-baf9-a86fcfe0c443",
        "parentId" : null,
        "author" : null,
        "body" : "Can the documentation in `//ghc-lib/template-desugaring.md` get an update please or if you prefer, you can instruct me to do it.",
        "createdAt" : "2019-06-05T12:43:55Z",
        "updatedAt" : "2019-06-05T13:46:52Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "935c5b6d-0f26-4017-ae49-91f29fe4f4bf",
        "parentId" : "72dac2ac-65ed-4ab1-baf9-a86fcfe0c443",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I updated it.",
        "createdAt" : "2019-06-05T12:54:20Z",
        "updatedAt" : "2019-06-05T13:46:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2b75cf061a2690aa0beb68877031162e0c52644b",
    "line" : 5,
    "diffHunk" : "@@ -184,7 +184,7 @@ class Template c => TemplateKey c k | c -> k where\n     key : c -> k\n \n     -- | The maintainers of the contract key.\n-    maintainer : c -> [Party]\n+    maintainer : k -> [Party]"
  },
  {
    "id" : "87e017c7-d4d6-474b-a121-3b23f2242e52",
    "prId" : 719,
    "comments" : [
      {
        "id" : "4a769cf3-34b0-4d34-8c53-c00fe35f5fc5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@neil-da I forgot this in the beginning. I hope we can live with that.",
        "createdAt" : "2019-04-26T09:05:29Z",
        "updatedAt" : "2019-04-26T09:05:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ea971e21-83ed-4233-974d-9fdafc020b17",
        "parentId" : "4a769cf3-34b0-4d34-8c53-c00fe35f5fc5",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Sure - it only impacts this one function.",
        "createdAt" : "2019-04-26T09:10:42Z",
        "updatedAt" : "2019-04-26T09:10:42Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ab895ac0eb2ea7e36f6a5af836a5c0a394f84df",
    "line" : 4,
    "diffHunk" : "@@ -1,6 +1,7 @@\n -- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n -- SPDX-License-Identifier: Apache-2.0\n \n+{-# LANGUAGE AllowAmbiguousTypes #-}"
  },
  {
    "id" : "3ca555eb-c4c8-4d2d-a5e6-c25fadc3ae39",
    "prId" : 718,
    "comments" : [
      {
        "id" : "51d1888e-699c-476f-99c6-57dd226d572d",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "I'd usually uppercase ID (here and below) but up to you\r\n```suggestion\r\n-- | Look up the contract ID associated with a given contract key.\r\n```",
        "createdAt" : "2019-04-26T08:52:05Z",
        "updatedAt" : "2019-04-26T11:56:01Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12d7a313-e012-44eb-81ee-42877f3fbff2",
        "parentId" : "51d1888e-699c-476f-99c6-57dd226d572d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The surrounding documentation uses \"contract id\" rather than \"contract ID\". I'd like to blend in.",
        "createdAt" : "2019-04-26T08:57:33Z",
        "updatedAt" : "2019-04-26T11:56:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "416019fcc7a4029d2870b08266720999566aea06",
    "line" : 5,
    "diffHunk" : "@@ -51,11 +51,20 @@ archive c = exercise c Archive\n stakeholder : Template c => c -> [Party]\n stakeholder c = signatory c ++ observer c\n \n--- | HIDE pass the @c@ using type applications, otherwise it's ambiguous\n+-- | Look up the contract id associated with a given contract key."
  },
  {
    "id" : "cacc4c6b-f619-4291-83f0-69a575889951",
    "prId" : 718,
    "comments" : [
      {
        "id" : "f4e8c237-1905-4167-88bb-b7f889fea6e2",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Isn't this the one that requires lots of authorization? That feels like an important thing to put in here.",
        "createdAt" : "2019-04-26T08:52:43Z",
        "updatedAt" : "2019-04-26T11:56:01Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "416019fcc7a4029d2870b08266720999566aea06",
    "line" : 9,
    "diffHunk" : "@@ -51,11 +51,20 @@ archive c = exercise c Archive\n stakeholder : Template c => c -> [Party]\n stakeholder c = signatory c ++ observer c\n \n--- | HIDE pass the @c@ using type applications, otherwise it's ambiguous\n+-- | Look up the contract id associated with a given contract key.\n+--\n+-- The `c` needs to be passed using an explicit type application. For\n+-- instance, if you want to look up a contract of template `Account` by its\n+-- key `k`, you must call `lookupByKey @Account k`."
  },
  {
    "id" : "ceb2c230-45af-4a64-b0bf-5bdf91996794",
    "prId" : 718,
    "comments" : [
      {
        "id" : "04a54e73-5882-46bf-ad6b-b18f46faf36b",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "```suggestion\r\n-- | Fetch the contract ID and contract data associated with a given\r\n```",
        "createdAt" : "2019-04-26T08:52:55Z",
        "updatedAt" : "2019-04-26T11:56:01Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "416019fcc7a4029d2870b08266720999566aea06",
    "line" : 14,
    "diffHunk" : "@@ -51,11 +51,20 @@ archive c = exercise c Archive\n stakeholder : Template c => c -> [Party]\n stakeholder c = signatory c ++ observer c\n \n--- | HIDE pass the @c@ using type applications, otherwise it's ambiguous\n+-- | Look up the contract id associated with a given contract key.\n+--\n+-- The `c` needs to be passed using an explicit type application. For\n+-- instance, if you want to look up a contract of template `Account` by its\n+-- key `k`, you must call `lookupByKey @Account k`.\n lookupByKey : forall c k. TemplateKey c k => k -> Update (Optional (ContractId c))\n lookupByKey = internalLookupByKey\n \n--- | HIDE pass the @c@ using type applications, otherwise it's ambiguous\n+-- | Fetch the contract id and contract data associated with a given"
  },
  {
    "id" : "4f3a60e0-5331-46db-b81e-8ce4f04ae8f6",
    "prId" : 718,
    "comments" : [
      {
        "id" : "43b14681-dd0d-4980-8100-f67f04e2f7f0",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "As above - I'd suggest adding something about authorization required. Maybe also the thing about if it fails, that doesn't mean the contract doesn't exist?",
        "createdAt" : "2019-04-26T08:53:29Z",
        "updatedAt" : "2019-04-26T11:56:01Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "416019fcc7a4029d2870b08266720999566aea06",
    "line" : 19,
    "diffHunk" : "@@ -51,11 +51,20 @@ archive c = exercise c Archive\n stakeholder : Template c => c -> [Party]\n stakeholder c = signatory c ++ observer c\n \n--- | HIDE pass the @c@ using type applications, otherwise it's ambiguous\n+-- | Look up the contract id associated with a given contract key.\n+--\n+-- The `c` needs to be passed using an explicit type application. For\n+-- instance, if you want to look up a contract of template `Account` by its\n+-- key `k`, you must call `lookupByKey @Account k`.\n lookupByKey : forall c k. TemplateKey c k => k -> Update (Optional (ContractId c))\n lookupByKey = internalLookupByKey\n \n--- | HIDE pass the @c@ using type applications, otherwise it's ambiguous\n+-- | Fetch the contract id and contract data associated with a given\n+-- contract key.\n+--\n+-- The `c` needs to be passed using an explicit type application. For\n+-- instance, if you want to fetch a contract of template `Account` by its\n+-- key `k`, you must call `fetchByKey @Account k`."
  },
  {
    "id" : "680e9d3d-fa3f-4e83-9e7f-e6d5cf849544",
    "prId" : 718,
    "comments" : [
      {
        "id" : "18a2cc91-deef-411c-a516-eec629d37b5f",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "This is a bit light. Could you add something saying what a key is? Doesn't need to be much - eg allowing unique lookup, can persist across changes of the contract (unlike the id)",
        "createdAt" : "2019-04-26T08:54:11Z",
        "updatedAt" : "2019-04-26T11:56:01Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "416019fcc7a4029d2870b08266720999566aea06",
    "line" : 29,
    "diffHunk" : "@@ -140,10 +149,11 @@ instance IsParties Party where\n instance IsParties [Party] where\n   toParties ps = ps\n \n--- | HIDE\n class Template c => TemplateKey c k | c -> k where\n+    -- | The key of a contract."
  },
  {
    "id" : "098f5a24-5761-4685-8ea2-a3f6e606b531",
    "prId" : 718,
    "comments" : [
      {
        "id" : "30a25116-7445-462a-8981-7c8a9f7173aa",
        "parentId" : null,
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Also a bit light. Could you add something about what it means to be a maintainer? eg the party/parties guaranteeing that the key is unique.\r\n\r\nAlso, I worry about saying 'maintainers' by default - implies there are usually more than one, and I'm not sure that's going to be the case.",
        "createdAt" : "2019-04-26T08:55:09Z",
        "updatedAt" : "2019-04-26T11:56:01Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "416019fcc7a4029d2870b08266720999566aea06",
    "line" : 32,
    "diffHunk" : "@@ -140,10 +149,11 @@ instance IsParties Party where\n instance IsParties [Party] where\n   toParties ps = ps\n \n--- | HIDE\n class Template c => TemplateKey c k | c -> k where\n+    -- | The key of a contract.\n     key : c -> k\n \n+    -- | The maintainers of the contract key."
  },
  {
    "id" : "053ac8a3-3189-4e18-8eb9-7ad98f259414",
    "prId" : 574,
    "comments" : [
      {
        "id" : "db717221-f0f1-4532-af48-70755c97907c",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Add HIDE on this and postconsuming please",
        "createdAt" : "2019-04-17T12:27:02Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cac5cb30-a455-4c88-b255-6d50f8c968dd",
        "parentId" : "db717221-f0f1-4532-af48-70755c97907c",
        "author" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-04-17T14:36:20Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : 23,
    "diffHunk" : "@@ -87,12 +87,28 @@ class Template c where\n     internalArchive = magic @\"archive\"\n \n \n+-- Deliberately not exported.\n+data Consuming = PreConsuming  -- Archive before executing exercise body.\n+               | PostConsuming -- Execute exercise body then archive.\n+               | NonConsuming  -- Don't archive.\n+\n+-- | HIDE\n+nonconsuming : NoEvent c e -> Consuming\n+nonconsuming _ = NonConsuming\n+\n+preconsuming : NoEvent c e -> Consuming"
  },
  {
    "id" : "7b0dc22b-f2cc-496d-903b-9299675a4169",
    "prId" : 574,
    "comments" : [
      {
        "id" : "9ea3574f-0a77-4a50-9b6d-d75fb5f828fe",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "You have a comment saying \"Must be a Lambda\", but code that isn't a Lambda. Sure this shouldn't be `consuming _ = Preconsuming`?",
        "createdAt" : "2019-04-17T15:26:32Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4edbd86e-7dd3-408b-8f50-cdf088d368e9",
        "parentId" : "9ea3574f-0a77-4a50-9b6d-d75fb5f828fe",
        "author" : null,
        "body" : "Actually, the comment was pre-existing and I must admit, I never understood it. Evidently the current definition is OK? I'm inclined to delete the comment. @neil-da agree?\r\n",
        "createdAt" : "2019-04-17T15:34:40Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f5a2f0b0-6935-4ac1-93bd-a74402b02400",
        "parentId" : "9ea3574f-0a77-4a50-9b6d-d75fb5f828fe",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Sure, delete the comment, if everything works",
        "createdAt" : "2019-04-17T15:36:16Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "56774535-d8ee-45b9-8cbc-b7d72d12a2fe",
        "parentId" : "9ea3574f-0a77-4a50-9b6d-d75fb5f828fe",
        "author" : null,
        "body" : "✔️ \r\n",
        "createdAt" : "2019-04-17T15:38:51Z",
        "updatedAt" : "2019-04-17T18:21:58Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : null,
    "diffHunk" : "@@ -89,12 +89,30 @@ class Template c where\n     internalArchive = magic @\"archive\"\n \n \n+-- Deliberately not exported.\n+data Consuming = PreConsuming  -- Archive before executing exercise body.\n+               | PostConsuming -- Execute exercise body then archive.\n+               | NonConsuming  -- Don't archive.\n+\n+-- | HIDE\n+nonconsuming : NoEvent c e -> Consuming\n+nonconsuming _ = NonConsuming\n+\n+-- | HIDE\n+preconsuming : NoEvent c e -> Consuming\n+preconsuming _ = PreConsuming\n+\n+-- | HIDE\n+postconsuming : NoEvent c e -> Consuming\n+postconsuming _ = PostConsuming\n+\n class Template c => Choice c e r | c e -> r where\n     -- | HIDE\n-    consuming : NoEvent c e -> ChoiceType\n-    -- must be a lambda since otherwise the default-dictionary method causes a runtime loop as the method\n-    -- exists in the dictionary, takes the dictionary, and can't be eta expanded.\n-    consuming _ = Consuming\n+    consuming : NoEvent c e -> Consuming\n+    -- Must be a lambda since otherwise the default-dictionary method\n+    -- causes a runtime loop as the method exists in the dictionary,\n+    -- takes the dictionary, and can't be eta expanded.\n+    consuming = preconsuming"
  },
  {
    "id" : "8992b070-d787-4bbf-bfd7-8e796d76e3da",
    "prId" : 574,
    "comments" : [
      {
        "id" : "85cc816b-b288-426b-a1fb-8e13443fe9e5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What does this comment actually express? How could this not be a lambda?",
        "createdAt" : "2019-04-23T10:57:05Z",
        "updatedAt" : "2019-04-23T10:57:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "790341ad-142d-462f-ac46-5baddc6621bc",
        "parentId" : "85cc816b-b288-426b-a1fb-8e13443fe9e5",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "It could evaluate to a lambda, rather than being a lambda.",
        "createdAt" : "2019-04-23T10:59:10Z",
        "updatedAt" : "2019-04-23T10:59:10Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dc86a4ec-6763-4507-9b77-15bd779df8d6",
        "parentId" : "85cc816b-b288-426b-a1fb-8e13443fe9e5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Oh I see, it had to be a _syntactic_ lambda. Anyway, that's no longer necessary since I re-implemented the dictionary sanitization. I've prepared a PR to remove the comment: https://github.com/digital-asset/daml/pull/628",
        "createdAt" : "2019-04-23T11:21:24Z",
        "updatedAt" : "2019-04-23T11:21:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d5b25bd-50eb-4023-adf9-fde683397e6a",
        "parentId" : "85cc816b-b288-426b-a1fb-8e13443fe9e5",
        "author" : null,
        "body" : "The comment was pre-existing. I also had doubts about it, removed it, changed the implementation to `consuming = preconsuming` and found it did indeed cause non-termination so was forced to reinstate it.",
        "createdAt" : "2019-04-23T11:43:46Z",
        "updatedAt" : "2019-04-23T11:44:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9c5c0105-c736-4f4a-b66c-3ee4aaad168d",
        "parentId" : "85cc816b-b288-426b-a1fb-8e13443fe9e5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "When I do `consuming = preconsuming`, the test suite still passes. I'll amend the other PR to use that implementation.",
        "createdAt" : "2019-04-23T11:50:55Z",
        "updatedAt" : "2019-04-23T11:50:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "825b9042188d04bf812ad2955222e5d8e39d33dc",
    "line" : 37,
    "diffHunk" : "@@ -89,12 +89,30 @@ class Template c where\n     internalArchive = magic @\"archive\"\n \n \n+-- Deliberately not exported.\n+data Consuming = PreConsuming  -- Archive before executing exercise body.\n+               | PostConsuming -- Execute exercise body then archive.\n+               | NonConsuming  -- Don't archive.\n+\n+-- | HIDE\n+nonconsuming : NoEvent c e -> Consuming\n+nonconsuming _ = NonConsuming\n+\n+-- | HIDE\n+preconsuming : NoEvent c e -> Consuming\n+preconsuming _ = PreConsuming\n+\n+-- | HIDE\n+postconsuming : NoEvent c e -> Consuming\n+postconsuming _ = PostConsuming\n+\n class Template c => Choice c e r | c e -> r where\n     -- | HIDE\n-    consuming : NoEvent c e -> ChoiceType\n-    -- must be a lambda since otherwise the default-dictionary method causes a runtime loop as the method\n-    -- exists in the dictionary, takes the dictionary, and can't be eta expanded.\n-    consuming _ = Consuming\n+    consuming : NoEvent c e -> Consuming\n+    -- Must be a lambda since otherwise the default-dictionary method"
  }
]