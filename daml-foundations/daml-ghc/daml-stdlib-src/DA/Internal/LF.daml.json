[
  {
    "id" : "7852df3f-b1ec-4280-a190-4245a884e30e",
    "prId" : 1550,
    "comments" : [
      {
        "id" : "bbc033d1-ca12-442d-b693-55143b889cd4",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should Eq/Ord be in this module for it?",
        "createdAt" : "2019-06-06T19:33:56Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "09ccbd6c-a947-4d86-99d9-d20348f41137",
        "parentId" : "bbc033d1-ca12-442d-b693-55143b889cd4",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`Eq` and `Ord` need `TextMap.toList`, which is defined in `DA.TextMap` as `primitive @\"BEMapToList\"`. It might make sense to add this as `textMapToList` here. I'm not 100% sure though.",
        "createdAt" : "2019-06-06T21:11:53Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e40aeb40fbf82a851c87a99859d87ecf2a54b5f",
    "line" : 17,
    "diffHunk" : "@@ -97,6 +99,12 @@ instance Show Time where show = primitive @\"BEToText\"\n instance Eq Time where (==) = primitive @\"BEEqual\"\n instance Ord Time where (<=) = primitive @\"BELessEq\"\n \n+-- | The `TextMap a` type represents an associative array from keys of type\n+-- `Text` to values of type `a`.\n+data TextMap a =\n+  -- | HIDE\n+  TextMap Opaque"
  },
  {
    "id" : "e69337fa-5639-4bb6-9edb-5512fed13839",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "e3b14c96-520a-40ac-bda0-5d92831906bc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- | The `CanAbort` class is for `Action`s that can be aborted.\r\n```",
        "createdAt" : "2019-05-16T07:49:32Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : null,
    "diffHunk" : "@@ -128,16 +128,17 @@ instance Action Update where\n instance ActionFail Update where\n     fail = primitive @\"UAbort\"\n \n--- | Places where the time is available - basically `Scenario` and `Update`.\n+-- | The `HasTime` class is for where the time is available: `Scenario` and `Update`.\n class HasTime m where\n-    -- | Obtain the current time.\n+    -- | Get the current time.\n     getTime : m Time\n \n instance HasTime Update where\n     getTime = primitive @\"UGetTime\"\n instance HasTime Scenario where\n     getTime = primitive @\"SGetTime\"\n \n+-- | The `CanAbort` class is for Updates that can be aborted."
  },
  {
    "id" : "66666f7b-654c-4527-acfa-012c80aa8a42",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "d1cc61e6-5ad3-4d7a-9c32-c6c1c28d92ec",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@neil-da Should we add a `Action m` super class constraint? Then the documentation could be:\r\nThe `HasTime` class is for `Action`s that support a notion of current time, like `Update` and `Scenario`.",
        "createdAt" : "2019-05-16T07:50:06Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 6,
    "diffHunk" : "@@ -128,16 +128,17 @@ instance Action Update where\n instance ActionFail Update where\n     fail = primitive @\"UAbort\"\n \n--- | Places where the time is available - basically `Scenario` and `Update`.\n+-- | The `HasTime` class is for where the time is available: `Scenario` and `Update`.\n class HasTime m where"
  },
  {
    "id" : "82a06b90-9295-4719-b126-a77e71eb9990",
    "prId" : 508,
    "comments" : [
      {
        "id" : "ce1599be-f608-4baa-9c4c-4f5849022ff4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I am slightly confused here. We donâ€™t seem to convert to this type at any point. Is that left for a separate PR? If so, it might be nice to add a comment here in the meantime.",
        "createdAt" : "2019-04-16T06:28:38Z",
        "updatedAt" : "2019-04-16T06:30:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf92b94a01cfef9127618cacb514fc95e11ff03",
    "line" : 21,
    "diffHunk" : "@@ -180,3 +183,11 @@ submitMustFail = primitive @\"SMustFailAt\"\n -- | Declare you are building a scenario.\n scenario : Scenario a -> Scenario a\n scenario = identity\n+\n+-- | HIDE A dummy type for the DAML-LF structural record type\n+-- `<f1: a1, f2: a2>`.\n+data Pair (f1 : Symbol) (f2 : Symbol) a1 a2 = Pair Opaque"
  }
]