[
  {
    "id" : "6253c407-2019-4ab4-bb80-67e608eaa188",
    "prId" : 1550,
    "comments" : [
      {
        "id" : "d2cec8ec-ed92-445d-884e-db9be12c4971",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should Eq/Ord be in this module for it?",
        "createdAt" : "2019-06-06T19:33:56Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a12dbd23-d587-4760-8ea0-695b089e1b77",
        "parentId" : "d2cec8ec-ed92-445d-884e-db9be12c4971",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`Eq` and `Ord` need `TextMap.toList`, which is defined in `DA.TextMap` as `primitive @\"BEMapToList\"`. It might make sense to add this as `textMapToList` here. I'm not 100% sure though.",
        "createdAt" : "2019-06-06T21:11:53Z",
        "updatedAt" : "2019-06-07T21:36:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1e40aeb40fbf82a851c87a99859d87ecf2a54b5f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +104,108 @@data TextMap a =\n  -- | HIDE\n  TextMap Opaque\n\n-- | The `ContractId a` type represents an id for a contract made from template `a`."
  },
  {
    "id" : "c1b6c9bb-463b-42fa-a88b-92de6495840a",
    "prId" : 1163,
    "comments" : [
      {
        "id" : "f4865722-4e5d-4ad9-9449-c119d6f36189",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@neil-da Should we add a `Action m` super class constraint? Then the documentation could be:\r\nThe `HasTime` class is for `Action`s that support a notion of current time, like `Update` and `Scenario`.",
        "createdAt" : "2019-05-16T07:50:06Z",
        "updatedAt" : "2019-05-16T19:53:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b3ec6a8380b5ae386b7bea24b1b03865607c95a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +130,134 @@\n-- | The `HasTime` class is for where the time is available: `Scenario` and `Update`.\nclass HasTime m where\n    -- | Get the current time.\n    getTime : m Time"
  },
  {
    "id" : "06eda4e5-5608-43ae-996e-3662bcfc180b",
    "prId" : 508,
    "comments" : [
      {
        "id" : "7b8c75e4-7564-415e-a30c-9bcac76f0dd2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I am slightly confused here. We donâ€™t seem to convert to this type at any point. Is that left for a separate PR? If so, it might be nice to add a comment here in the meantime.",
        "createdAt" : "2019-04-16T06:28:38Z",
        "updatedAt" : "2019-04-16T06:30:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eaf92b94a01cfef9127618cacb514fc95e11ff03",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +187,191 @@-- | HIDE A dummy type for the DAML-LF structural record type\n-- `<f1: a1, f2: a2>`.\ndata Pair (f1 : Symbol) (f2 : Symbol) a1 a2 = Pair Opaque\n\n-- | HIDE Function to turn a DAML-LF structural record type into a DAML pair."
  }
]