[
  {
    "id" : "459c41a6-3075-4df9-9d61-2f31413aab48",
    "prId" : 1608,
    "comments" : [
      {
        "id" : "ae7c8f59-6d0a-4aa9-9add-5b5deb839311",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not sure this class is particularly interesting for what we want to do, is it?",
        "createdAt" : "2019-06-12T17:32:03Z",
        "updatedAt" : "2019-06-12T17:33:18Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1073a242-b5e4-4544-bf64-33c52e254742",
        "parentId" : "ae7c8f59-6d0a-4aa9-9add-5b5deb839311",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I added it because I can't test the `conv` class in our testing framework (need different package id's). I'd keep it. We might be extending this module later with embeddings etc.",
        "createdAt" : "2019-06-13T09:17:15Z",
        "updatedAt" : "2019-06-13T09:17:15Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5874b94a7b8fe5cba6e9d104a1679c67d5c5748e",
    "line" : 61,
    "diffHunk" : "@@ -0,0 +1,87 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE TypeOperators #-}\n+{-# LANGUAGE UndecidableInstances #-}\n+{-# LANGUAGE OverlappingInstances #-}\n+\n+daml 1.2\n+\n+module DA.Upgrade\n+  ( conv\n+  , iso\n+  )\n+  where\n+\n+import DA.Generics\n+\n+-- | Convert data types that are isomorphic and have the same meta-data up to package id.\n+conv : (Generic a repA, Generic b repB, Conv repA repB) => a -> b\n+conv = to . cv . from\n+\n+-- | Generic representations that are isomorphic and have the same meta-data up to package id.\n+class Conv a b where\n+  cv : a x -> b x\n+\n+-- copy values\n+instance Conv V1 V1 where cv = identity\n+instance Conv U1 U1 where cv = identity\n+\n+-- Isomorphic types in different packages\n+instance (MetaEquiv c1 c2, Conv f1 f2) => Conv (M1 i1 c1 f1) (M1 i2 c2 f2) where\n+  cv = M1 . cv . unM1\n+\n+-- products\n+instance (Conv a1 a2, Conv b1 b2) => Conv (a1 :*: b1) (a2 :*: b2) where\n+  cv ~(P1 a b) = P1 (cv a) (cv b)\n+\n+-- sums\n+instance (Conv a1 a2, Conv b1 b2) => Conv (a1 :+: b1) (a2 :+: b2) where\n+  cv (L1 a) = L1 $ cv a\n+  cv (R1 b) = R1 $ cv b\n+\n+-- recursion\n+instance Conv (K1 R c) (K1 R c) where cv = identity\n+instance Conv c1 c2 => Conv (K1 R (c1 x)) (K1 R (c2 x)) where\n+  cv = K1 . cv . unK1\n+instance (Generic x repX, Generic y repY, Conv repX repY) => Conv (K1 R x) (K1 R y) where\n+  cv = K1 . conv . unK1\n+\n+-- | This class describes meta-data that is equal up to package id.\n+class MetaEquiv (m1: Meta) (m2: Meta)\n+\n+instance MetaEquiv m m\n+instance MetaEquiv ('MetaData ('MetaData0 n mod p1 'True)) ('MetaData ('MetaData0 n mod p2 'True))\n+instance MetaEquiv ('MetaData ('MetaData0 n mod p1 'False)) ('MetaData ('MetaData0 n mod p2 'False))\n+\n+-- Isomorphism between two isomorphic data types.\n+iso : (Generic a repA, Generic b repB, Iso repA repB) => a -> b\n+iso = to . isom . from\n+\n+-- Isomorphic representations ignoring meta-data."
  },
  {
    "id" : "458563f8-051c-4e2d-8b64-18bb9e341fea",
    "prId" : 1608,
    "comments" : [
      {
        "id" : "c4f77518-9ce1-4fb1-81fb-00ff856a15e6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we call this `genericConv` or something similar?",
        "createdAt" : "2019-06-12T17:32:44Z",
        "updatedAt" : "2019-06-12T17:33:18Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7bc96263-d43e-4a80-b5b3-0726b739ea71",
        "parentId" : "c4f77518-9ce1-4fb1-81fb-00ff856a15e6",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I'd keep it this way, since we're not exporting this class and if you're hacking on this module you know that this is a generic conversion.",
        "createdAt" : "2019-06-13T09:18:54Z",
        "updatedAt" : "2019-06-13T09:18:54Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5874b94a7b8fe5cba6e9d104a1679c67d5c5748e",
    "line" : 24,
    "diffHunk" : "@@ -0,0 +1,87 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE TypeOperators #-}\n+{-# LANGUAGE UndecidableInstances #-}\n+{-# LANGUAGE OverlappingInstances #-}\n+\n+daml 1.2\n+\n+module DA.Upgrade\n+  ( conv\n+  , iso\n+  )\n+  where\n+\n+import DA.Generics\n+\n+-- | Convert data types that are isomorphic and have the same meta-data up to package id.\n+conv : (Generic a repA, Generic b repB, Conv repA repB) => a -> b\n+conv = to . cv . from\n+\n+-- | Generic representations that are isomorphic and have the same meta-data up to package id.\n+class Conv a b where\n+  cv : a x -> b x"
  }
]