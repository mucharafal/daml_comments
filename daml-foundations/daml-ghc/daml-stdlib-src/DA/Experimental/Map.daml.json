[
  {
    "id" : "a783bef4-6f42-42ae-8783-84b48dc8a0d0",
    "prId" : 730,
    "comments" : [
      {
        "id" : "4b31d421-2753-41a1-a7ec-c24d37defd8a",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Wouldn't this normally be called `filterWithKey`?",
        "createdAt" : "2019-04-26T11:54:26Z",
        "updatedAt" : "2019-04-30T10:33:13Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8c89e6b8-9873-4cbe-9a6f-e18dc7f2c9fa",
        "parentId" : "4b31d421-2753-41a1-a7ec-c24d37defd8a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree. Unfortunately, it's called `filter` in `DA.Map` and `DA.TextMap` as well. We should change all of them in one go and be consistent until then.",
        "createdAt" : "2019-04-26T12:04:20Z",
        "updatedAt" : "2019-04-30T10:33:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "491686f3-711b-485e-9950-58a479654671",
        "parentId" : "4b31d421-2753-41a1-a7ec-c24d37defd8a",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Suggest we change it in TextMap now (still very new), and have DA.Map die and be replaced by this at some point (when it breaks anyway).",
        "createdAt" : "2019-04-26T12:05:35Z",
        "updatedAt" : "2019-04-30T10:33:13Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "00248004-ab45-4550-8a10-512275100333",
        "parentId" : "4b31d421-2753-41a1-a7ec-c24d37defd8a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Makes sense. Here we go: https://github.com/digital-asset/daml/pull/731",
        "createdAt" : "2019-04-26T12:12:42Z",
        "updatedAt" : "2019-04-30T10:33:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "aaf867dd01f210323fa05dfaf5bd5394b6c59306",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,136 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+daml 1.2\n+-- | Map - A `Map` is an associative array data type composed of a\n+-- collection of key/value pairs such that each possible key appears\n+-- at most once in the collection.\n+module DA.Experimental.Map\n+  ( Map\n+  , MapKey (..)\n+  , empty\n+  , size\n+  , toList\n+  , fromList\n+  , null\n+  , lookup\n+  , member\n+  , filter\n+  , delete\n+  , insert\n+  , union\n+  ) where\n+\n+import Prelude hiding (lookup, null, filter, empty)\n+import DA.Foldable qualified as Foldable\n+import DA.Optional\n+import DA.Text\n+import DA.TextMap qualified as TextMap\n+import DA.Traversable qualified as Traversable\n+import DA.Tuple\n+\n+-- | A `Map k v` is an associative array data type composed of a\n+-- collection of key/value pairs of key type `k` and value type `v`\n+-- such that each possible key appears at most once in the collection.\n+newtype Map k v = Map with textMap : TextMap v\n+  deriving (Eq, Ord, Foldable.Foldable)\n+\n+-- | A class for types that can be used as keys for the `Map` type.\n+-- All keys `k` must satisfy `keyFromText (keyToText k) == k`.\n+class Eq k => MapKey k where\n+  -- | Turn a key into its textual representation. This function must be\n+  -- injective.\n+  keyToText : k -> Text\n+  -- | Recover a key from its textual representation. `keyFromText x` is\n+  -- allowed to fail whenever there is _no_ key `k` with `keyToText k == x`.\n+  -- Whenever such a `k` does exist, then it must satisfy\n+  -- `keyFromText x == k`.\n+  keyFromText : Text -> k\n+\n+instance MapKey Text where\n+  keyToText x = x\n+  keyFromText x = x\n+\n+instance MapKey Party where\n+  keyToText = partyToText\n+  keyFromText = fromSome . partyFromText\n+\n+instance MapKey Int where\n+  keyToText = show\n+  keyFromText = fromSome . parseInt\n+\n+instance MapKey Decimal where\n+  keyToText = show\n+  keyFromText = fromSome . parseDecimal\n+\n+-- | Create a map from a list of key/value pairs.\n+fromList : MapKey k => [(k, v)] -> Map k v\n+fromList kvs = Map $ TextMap.fromList $ map (first keyToText) kvs\n+\n+-- | Convert the map to a list of key/value pairs where the keys are\n+-- in ascending order of their textual representation.\n+toList : MapKey k => Map k v -> [(k, v)]\n+toList (Map t) = map (first keyFromText) $ TextMap.toList t\n+\n+-- | Create a `Map` from a `TextMap`.\n+fromTextMap : TextMap v -> Map Text v\n+fromTextMap = Map\n+\n+-- | Convert a `Map` into a `TextMap`.\n+toTextMap : MapKey k => Map k v -> TextMap v\n+toTextMap (Map t) = t\n+\n+-- | The empty map.\n+empty : MapKey k => Map k v\n+empty = Map TextMap.empty\n+\n+-- | Number of elements in the map.\n+size : Map k v -> Int\n+size (Map t) = TextMap.size t\n+\n+-- | Is the map empty?\n+null : Map k v -> Bool\n+null m = size m == 0\n+\n+-- | Lookup the value at a key in the map.\n+lookup : MapKey k => k -> Map k v -> Optional v\n+lookup k (Map t) = TextMap.lookup (keyToText k) t\n+\n+-- | Is the key a member of the map?\n+member : MapKey k => k -> Map k v -> Bool\n+member k (Map t) = TextMap.member (keyToText k) t\n+\n+-- | Filter all values that satisfy some predicate.\n+filter : MapKey k => (k -> v -> Bool) -> Map k v -> Map k v"
  }
]