[
  {
    "id" : "fdbcebad-bf06-4e04-8ccd-e6ac29cf87c9",
    "prId" : 2053,
    "comments" : [
      {
        "id" : "98c3ccb6-a4ad-4b66-95c1-11454dd9978c",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The idea of this codec was to have a fully self-contained representation of a DAML value, for consumers that don't have any access to the DAML types. Such consumers will probably not be happy with the numeric labels, so we could also consider blowing up instead.\r\n\r\nHowever:\r\n- there is no formal spec for this format\r\n- in the context of navigator, the field names should always be available\r\n- even if they weren't, it will only produce slightly awkward results in the front end, and not really break anything\r\n\r\nSo the code is fine as is.",
        "createdAt" : "2019-07-16T13:49:40Z",
        "updatedAt" : "2019-07-16T13:50:20Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05118d7c-2a34-4ded-9e8f-834ab371094d",
        "parentId" : "98c3ccb6-a4ad-4b66-95c1-11454dd9978c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> in the context of navigator, the field names should always be available\r\n\r\nAnother important consideration was that numbers will never be field names, so these are safe unique fallbacks.",
        "createdAt" : "2019-07-16T14:57:01Z",
        "updatedAt" : "2019-07-16T14:57:01Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1699d1a72a141e994b450b4078470a298e34bab3",
    "line" : 91,
    "diffHunk" : "@@ -91,31 +100,29 @@ object ApiCodecVerbose {\n   def apiVariantToJsValue(value: Model.ApiVariant): JsValue =\n     JsObject(\n       propType -> JsString(tagVariant),\n-      propId -> value.variantId.map(_.toJson).getOrElse(JsNull),\n-      propConstructor -> JsString(value.constructor),\n+      propId -> value.tycon.map(_.toJson).getOrElse(JsNull),\n+      propConstructor -> JsString(value.variant),\n       propValue -> apiValueToJsValue(value.value)\n     )\n \n   def apiEnumToJsValue(value: Model.ApiEnum): JsValue =\n     JsObject(\n       propType -> JsString(tagEnum),\n-      propId -> value.enumId.map(_.toJson).getOrElse(JsNull),\n-      propConstructor -> JsString(value.constructor),\n+      propId -> value.tycon.map(_.toJson).getOrElse(JsNull),\n+      propConstructor -> JsString(value.value),\n     )\n \n   def apiRecordToJsValue(value: Model.ApiRecord): JsValue =\n     JsObject(\n       propType -> JsString(tagRecord),\n-      propId -> value.recordId.map(_.toJson).getOrElse(JsNull),\n-      propFields -> JsArray(\n-        value.fields\n-          .map(\n-            f =>\n-              JsObject(\n-                propLabel -> JsString(f.label),\n-                propValue -> apiValueToJsValue(f.value)\n-            ))\n-          .toVector)\n+      propId -> value.tycon.map(_.toJson).getOrElse(JsNull),\n+      propFields -> JsArray(value.fields.toSeq.zipWithIndex.map {\n+        case ((oflabel, fvalue), ix) =>\n+          JsObject(\n+            propLabel -> JsString(oflabel getOrElse (ix: Int).toString),"
  }
]