[
  {
    "id" : "af31eb53-66eb-4940-9951-baad904c987c",
    "prId" : 1151,
    "comments" : [
      {
        "id" : "e287d0f6-684c-4a3b-8ce0-8ca6d0498fee",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This does not conform to the schema (should be caught by a test).\r\n\r\nIn `schema.graphql`, you have `agreementText: String!`, here you use `OptionType(StringType)`.\r\n`String!` means a non-optional string in GraphQL, `OptionType` means the backend may produce missing values for the `agreementText` property.\r\n\r\nUse `agreementText: String` in the schema to specify that the property is optional.",
        "createdAt" : "2019-05-15T12:32:08Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ef135700-d7c9-40ad-b09f-b92749e0b3cc",
        "parentId" : "e287d0f6-684c-4a3b-8ce0-8ca6d0498fee",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Done. Thanks.",
        "createdAt" : "2019-05-15T12:39:57Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a110777b-d2a1-464e-82d1-42e8f90809ba",
        "parentId" : "e287d0f6-684c-4a3b-8ce0-8ca6d0498fee",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Speaking of which: is this the equivalent of the graphql schema in the world of queries? https://github.com/digital-asset/daml/blob/d6236a9f1ddc6fc9e8851ffd95830dabdba7d6eb/navigator/frontend/src/api/Queries.ts#L38\r\n\r\nAlso, the spray.json renderer for `Option[_]` uses `JsNull` for the `None` case. Is this properly supported by GraphQl (and the respective libraries we're using)?",
        "createdAt" : "2019-05-15T12:53:24Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6cde9b6f-4e52-458f-bcd1-3448e1207358",
        "parentId" : "e287d0f6-684c-4a3b-8ce0-8ca6d0498fee",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The `Queries.ts` file is indeed the TypeScript definition for the shape of our GraphQL API responses.\r\n\r\nIt is autogenerated from `schema.graphql`. Or rather, it should be - if you edited it by hand, please run `make update-graphql-types` in `navigator/frontend` instead. The reason why this is not done as part of the Bazel build is that I was too lazy to configure the frontend project to look for source files outside of the source tree (where Bazel generated files are stored).",
        "createdAt" : "2019-05-15T13:23:11Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2040af6e-7e0a-4e8b-8fdd-597bd86e4f27",
        "parentId" : "e287d0f6-684c-4a3b-8ce0-8ca6d0498fee",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "oh, that yeah, I definitely edited it by hand. I'll run the make command.",
        "createdAt" : "2019-05-15T13:28:48Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4ab89cc8-6436-47d9-9fdd-af4641f915ee",
        "parentId" : "e287d0f6-684c-4a3b-8ce0-8ca6d0498fee",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "https://github.com/digital-asset/daml/issues/1160",
        "createdAt" : "2019-05-15T13:36:10Z",
        "updatedAt" : "2019-05-17T06:35:00Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa40588773325065a44dc4d703aec04bc19f0c20",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +319,323 @@            context => context.ctx.ledger.exercisedEventsOf(context.value, context.ctx.templates)),\n        Field(\"argument\", JsonType.ApiRecordType, resolve = _.value.argument),\n        Field(\"agreementText\", OptionType(StringType), resolve = _.value.agreementText)\n    )\n  )"
  }
]