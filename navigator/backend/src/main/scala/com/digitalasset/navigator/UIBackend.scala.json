[
  {
    "id" : "8d8141e1-0cce-49bf-a289-11c4990ed5f4",
    "prId" : 3138,
    "comments" : [
      {
        "id" : "05191cbd-0393-4320-b6c0-ebe0bc52222f",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "The location of this file could be read using the `ProjectConfig` library.\r\n\r\nSee https://github.com/digital-asset/daml/blob/master/daml-assistant/scala-daml-project-config/src/main/scala/com/digitalasset/assistant/config/ProjectConfig.scala for the scala library (which currently only supports the project config and not the global daml config).\r\n\r\nSee https://github.com/digital-asset/daml/blob/master/daml-assistant/daml-project-config/DA/Daml/Project/Consts.hs#L43 and https://github.com/digital-asset/daml/blob/master/daml-assistant/daml-project-config/DA/Daml/Project/Config.hs#L38 for the original Haskell library.",
        "createdAt" : "2019-10-09T11:15:09Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "51abe1d1-61c8-4ddb-aa61-7e2c5f543cfb",
        "parentId" : "05191cbd-0393-4320-b6c0-ebe0bc52222f",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`ProjectConfig` is about the `daml.yaml` file, where we should not store the token (since that is supposed to be checked in with the rest of your code).\r\n\r\nAfter a short conversation with @associahedron and @hurryabit we agreed on using `$DAML_HOME/secret` as a well-known location (`$DAML_HOME` is `~/.daml` on Mac/Linux), while leaving the possibility to pass a different location on the command line.\r\n\r\nOn top of that, I'll probably make an effort to try to read from the expected well-known location if `$DAML_HOME` is not found, unless you have something against it.\r\n\r\nSo basically something along these lines:\r\n```scala\r\n// Uses $DAML_HOME from the SDK Assistant or falls back to its default location:\r\n// - on Windows: %APPDATA%/daml\r\n// - on Mac and Linux: ~/.daml\r\n// The file called `secret` will be looked in the resolved location\r\nprivate[this] val defaultAccessTokenFile: Path =\r\n  sys.env\r\n    .get(\"DAML_HOME\")\r\n    .fold(if (sys.props(\"os.name\").toLowerCase.startsWith(\"win\")) {\r\n      Paths.get(sys.env(\"APPDATA\"), \"daml\")\r\n    } else {\r\n      Paths.get(sys.props(\"user.home\"), \".daml\")\r\n    })(Paths.get(_))\r\n    .resolve(\"secret\")\r\n```",
        "createdAt" : "2019-10-09T13:54:01Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bb3817c9a66c72de085b1959aae0ac7ddc5f7a3d",
    "line" : null,
    "diffHunk" : "@@ -56,6 +56,7 @@ abstract class UIBackend extends LazyLogging with ApplicationInfoJsonSupport {\n     * (supply a default)\n     */\n   def defaultConfigFile: Path = Paths.get(\"ui-backend.conf\")\n+  def defaultAccessTokenFile: Path = Paths.get(sys.props(\"user.home\"), \".daml\", \"secret\")"
  },
  {
    "id" : "4cbf45ce-5453-4de8-b24b-d1d2f4e22fe4",
    "prId" : 3138,
    "comments" : [
      {
        "id" : "9fc47e61-f42b-47fd-8092-7d24d995a1e6",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Can this time out and thus throw an exception? It looks like it can't, because `getAppState` is produced by an Akka ask with the same timeout as used here for `Await.result`. Maybe make that more explicit by factoring out the common timeout?",
        "createdAt" : "2019-10-18T08:57:28Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e23acfd2-b9d2-48a1-bf4b-89ee02044250",
        "parentId" : "9fc47e61-f42b-47fd-8092-7d24d995a1e6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'll use `onSuccess` as suggested by @gerolf-da.",
        "createdAt" : "2019-10-18T09:41:32Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "020c45c0-e2a9-4694-8bf4-b775f34a407d",
        "parentId" : "9fc47e61-f42b-47fd-8092-7d24d995a1e6",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3138/commits/609adf670962eca159a75ff0e74773dc7930aca2",
        "createdAt" : "2019-10-18T11:30:50Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bb3817c9a66c72de085b1959aae0ac7ddc5f7a3d",
    "line" : null,
    "diffHunk" : "@@ -119,44 +128,41 @@ abstract class UIBackend extends LazyLogging with ApplicationInfoJsonSupport {\n             } ~\n               path(\"session\"./) {\n                 get {\n-                  session match {\n-                    case Some((_, session)) => complete(session)\n-                    case None => complete(signIn)\n+                  complete {\n+                    session match {\n+                      case Some((_, session)) => session\n+                      case None => signIn()\n+                    }\n                   }\n                 } ~\n                   post {\n                     entity(as[LoginRequest]) { request =>\n-                      if (arguments.requirePassword) {\n-                        request.maybePassword match {\n-                          case None =>\n-                            logger.error(\n-                              s\"Attempt to signin with user ${request.userId} without password\")\n-                            complete(invalidCredentials)\n-                          case Some(password) =>\n-                            config.users.get(request.userId) match {\n-                              case None =>\n-                                logger.error(\n-                                  s\"Attempt to signin with non-existent user ${request.userId}\")\n-                                complete(invalidCredentials)\n-                              case Some(userConfig)\n-                                  if userConfig.password == None || userConfig.password.contains(\n-                                    password) =>\n+                      config.users.get(request.userId) match {\n+                        case None =>\n+                          logger.error(\n+                            s\"Attempt to signin with non-existent user ${request.userId}\")\n+                          complete(signIn(Some(InvalidCredentials)))\n+                        case Some(userConfig) =>\n+                          import system.dispatcher\n+                          Await.result("
  },
  {
    "id" : "b4e7f812-28a0-43a3-852a-dd3a490312f4",
    "prId" : 3138,
    "comments" : [
      {
        "id" : "475ab3ff-bbda-4c64-99b4-ef74bd159f05",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I'm wondering whether we should put this logic into the general daml.yaml (or rather daml-project-config) library?",
        "createdAt" : "2019-10-18T09:07:12Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "94146a25-a8ba-4ae5-b14e-8beac70f6763",
        "parentId" : "475ab3ff-bbda-4c64-99b4-ef74bd159f05",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`daml-project-config` is about the project-specific configuration, if we make a library of it it should be something different. Since I'll for sure need this piece of code to make Extractor work with authentication I'd suggest we defer it to that contribution. Sounds good?",
        "createdAt" : "2019-10-18T09:34:48Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7162ef6f-db63-4d50-a7b8-2fe2ac061835",
        "parentId" : "475ab3ff-bbda-4c64-99b4-ef74bd159f05",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Sounds good. 👍 ",
        "createdAt" : "2019-10-18T11:42:28Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bb3817c9a66c72de085b1959aae0ac7ddc5f7a3d",
    "line" : 50,
    "diffHunk" : "@@ -57,12 +61,27 @@ abstract class UIBackend extends LazyLogging with ApplicationInfoJsonSupport {\n     */\n   def defaultConfigFile: Path = Paths.get(\"ui-backend.conf\")\n \n+  // Uses $DAML_HOME from the SDK Assistant or falls back to its default location:\n+  // - on Windows: %APPDATA%/daml\n+  // - on Mac and Linux: ~/.daml\n+  // The file called `secret` will be looked in the resolved location\n+  private[this] val defaultAccessTokenFile: Path =\n+    sys.env\n+      .get(\"DAML_HOME\")"
  },
  {
    "id" : "cfd13ca6-604e-424f-9755-1eeb1a6250d8",
    "prId" : 3138,
    "comments" : [
      {
        "id" : "8b2e98fe-8463-4f0e-8204-2d55ee4e8271",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Instead of `Await.result` you can use the `onSuccess` directive.",
        "createdAt" : "2019-10-18T09:25:37Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "138ec062-9c74-42f0-b2e5-58c1da64cb98",
        "parentId" : "8b2e98fe-8463-4f0e-8204-2d55ee4e8271",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I didn't know about `akka-http`'s `onSuccess`, thanks for the tip!",
        "createdAt" : "2019-10-18T09:36:55Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "173a118f-abc6-4f08-bb96-5d43ba0af228",
        "parentId" : "8b2e98fe-8463-4f0e-8204-2d55ee4e8271",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/3138/commits/609adf670962eca159a75ff0e74773dc7930aca2",
        "createdAt" : "2019-10-18T11:30:30Z",
        "updatedAt" : "2019-10-18T13:12:04Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bb3817c9a66c72de085b1959aae0ac7ddc5f7a3d",
    "line" : null,
    "diffHunk" : "@@ -119,44 +128,41 @@ abstract class UIBackend extends LazyLogging with ApplicationInfoJsonSupport {\n             } ~\n               path(\"session\"./) {\n                 get {\n-                  session match {\n-                    case Some((_, session)) => complete(session)\n-                    case None => complete(signIn)\n+                  complete {\n+                    session match {\n+                      case Some((_, session)) => session\n+                      case None => signIn()\n+                    }\n                   }\n                 } ~\n                   post {\n                     entity(as[LoginRequest]) { request =>\n-                      if (arguments.requirePassword) {\n-                        request.maybePassword match {\n-                          case None =>\n-                            logger.error(\n-                              s\"Attempt to signin with user ${request.userId} without password\")\n-                            complete(invalidCredentials)\n-                          case Some(password) =>\n-                            config.users.get(request.userId) match {\n-                              case None =>\n-                                logger.error(\n-                                  s\"Attempt to signin with non-existent user ${request.userId}\")\n-                                complete(invalidCredentials)\n-                              case Some(userConfig)\n-                                  if userConfig.password == None || userConfig.password.contains(\n-                                    password) =>\n+                      config.users.get(request.userId) match {\n+                        case None =>\n+                          logger.error(\n+                            s\"Attempt to signin with non-existent user ${request.userId}\")\n+                          complete(signIn(Some(InvalidCredentials)))\n+                        case Some(userConfig) =>\n+                          import system.dispatcher\n+                          Await.result("
  },
  {
    "id" : "ec5fbf7b-fb3c-46b6-877c-b79e3810d332",
    "prId" : 522,
    "comments" : [
      {
        "id" : "853c577a-4ebd-4b08-90ee-3409d733fb31",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "double `A a` in here.\r\n```suggestion\r\n        val message = \"No configuration file found! A configuration template file will be created at \" +\r\n```",
        "createdAt" : "2019-04-16T09:51:08Z",
        "updatedAt" : "2019-04-16T09:55:22Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7e8705cc22387c41971ca1c63a8d6d28eeb45d23",
    "line" : null,
    "diffHunk" : "@@ -283,9 +286,9 @@ abstract class UIBackend extends LazyLogging with ApplicationInfoJsonSupport {\n       case DumpGraphQLSchema =>\n         dumpGraphQLSchema()\n       case RunServer if !Files.exists(configFile) =>\n-        logger.error(\n-          s\"No configuration file found! A a configuration template file will be created at \" +\n-            s\"${configFile}, please edit it and restart the UI backend\")\n+        val message = \"No configuration file found! A a configuration template file will be created at \" +"
  }
]