[
  {
    "id" : "5d347a83-9765-4442-a2d0-3e164f86fa5f",
    "prId" : 3400,
    "comments" : [
      {
        "id" : "c108873e-4971-418e-b8c6-42b68dcf716e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Low importance: perhaps an early return would be easier to read?\r\n\r\n```scala\r\nif (newPackages.isEmpty) {\r\n  return this\r\n}\r\n```",
        "createdAt" : "2019-11-08T12:39:06Z",
        "updatedAt" : "2019-11-18T15:42:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cee4fec0-554f-47bc-ba7b-4f44301ef349",
        "parentId" : "c108873e-4971-418e-b8c6-42b68dcf716e",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "If thought that the use of `return` is discouraged in Scala. It would be easier to read though.",
        "createdAt" : "2019-11-08T13:31:58Z",
        "updatedAt" : "2019-11-18T15:42:34Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89b46c9012b9772d9ecf8032dd080523fe6f706a",
    "line" : null,
    "diffHunk" : "@@ -51,19 +51,23 @@ case class PackageRegistry(\n         p.packageId -> DamlLfPackage(p.packageId, typeDefs, templates)\n       }\n \n-    val newTemplates = newPackages\n-      .map(_._2.templates)\n-      .reduce(_ ++ _)\n-\n-    val newTypeDefs = newPackages\n-      .map(_._2.typeDefs)\n-      .reduce(_ ++ _)\n-\n-    copy(\n-      packages = packages ++ newPackages,\n-      templates = templates ++ newTemplates,\n-      typeDefs = typeDefs ++ newTypeDefs\n-    )\n+    if (newPackages.nonEmpty) {"
  },
  {
    "id" : "d11abcda-bcc1-462c-af35-8b1fd1461535",
    "prId" : 3400,
    "comments" : [
      {
        "id" : "bbd37c5c-6831-4a76-881f-986c05738949",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Why not use `.flatMap`?",
        "createdAt" : "2019-11-08T12:39:25Z",
        "updatedAt" : "2019-11-18T15:42:34Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a12fad1c-175e-4665-8f40-0cf3fe115be7",
        "parentId" : "bbd37c5c-6831-4a76-881f-986c05738949",
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Good point, thanks!",
        "createdAt" : "2019-11-08T13:31:39Z",
        "updatedAt" : "2019-11-18T15:42:34Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89b46c9012b9772d9ecf8032dd080523fe6f706a",
    "line" : null,
    "diffHunk" : "@@ -51,19 +51,23 @@ case class PackageRegistry(\n         p.packageId -> DamlLfPackage(p.packageId, typeDefs, templates)\n       }\n \n-    val newTemplates = newPackages\n-      .map(_._2.templates)\n-      .reduce(_ ++ _)\n-\n-    val newTypeDefs = newPackages\n-      .map(_._2.typeDefs)\n-      .reduce(_ ++ _)\n-\n-    copy(\n-      packages = packages ++ newPackages,\n-      templates = templates ++ newTemplates,\n-      typeDefs = typeDefs ++ newTypeDefs\n-    )\n+    if (newPackages.nonEmpty) {\n+      val newTemplates = newPackages\n+        .map(_._2.templates)\n+        .reduce(_ ++ _)"
  }
]