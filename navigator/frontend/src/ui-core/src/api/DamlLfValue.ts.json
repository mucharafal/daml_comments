[
  {
    "id" : "54829bab-5349-462b-8613-0efccc602dad",
    "prId" : 204,
    "comments" : [
      {
        "id" : "34a7e193-4ea0-4042-8126-bf4f242d0a2f",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Can the value ever be `null`? `null` is only used in the serialization of `Optional`, and `value` is typed as `DamlLfValueMapEntry[]`, which is unrelated to `null`. I'm actually surprised the compiler does not complain here.",
        "createdAt" : "2019-04-09T09:54:04Z",
        "updatedAt" : "2019-04-10T15:57:15Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfaaa695898670824b20acf017518eda840e671",
    "line" : 91,
    "diffHunk" : "@@ -124,9 +138,25 @@ export function evalPath(value: DamlLfValue, path: string[], index: number = 0):\n         return value;\n       } else if (path[index] === value.constructor) {\n         return evalPath(value.value, path, index + 1);\n-      }Â else {\n+      } else {\n         return notFound;\n       }\n+    case 'map':\n+      if (isLast) {\n+        return value;\n+      } else {\n+        const key = path[index];\n+        if (value.value === null) {"
  },
  {
    "id" : "b4433114-c581-4c60-bf6d-07bebf48e502",
    "prId" : 204,
    "comments" : [
      {
        "id" : "00ba71dd-8b2b-4c33-ae12-d0c82839dab6",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Similar to other places, I would make this an object with many keys, instead of an array of key-value pairs. This function is mainly used in `frontend-config.js` (scripting of the UI), and `toJSON(argument).foo.bar` is easier to write than `toJSON(argument).foo.find(f => f.key === 'bar')`",
        "createdAt" : "2019-04-09T09:57:07Z",
        "updatedAt" : "2019-04-10T15:57:15Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5dfaaa695898670824b20acf017518eda840e671",
    "line" : 127,
    "diffHunk" : "@@ -174,13 +205,15 @@ export function toJSON(value: DamlLfValue): JSON {\n     case 'party':       return value.value;\n     case 'unit':        return {};\n     case 'optional':    return value.value === null ? null : toJSON(value.value);\n-    case 'list':        return value.value.map((e) => toJSON(e))\n+    case 'list':        return value.value.map((e) => toJSON(e));\n     case 'record':\n       const r: {[label: string]: JSON} = {};\n       value.fields.forEach((f) => r[f.label] = toJSON(f.value));\n       return r;\n     case 'variant':\n-      return {[value.constructor]: toJSON(value.value)}\n+      return {[value.constructor]: toJSON(value.value)};\n+    case 'map':\n+      return value.value.map((e) => ({key: e.key, value: toJSON(e.value)}));"
  }
]