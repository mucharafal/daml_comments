[
  {
    "id" : "0cb6e567-316d-4685-beb3-4450261e26b2",
    "prId" : 2223,
    "comments" : [
      {
        "id" : "33d3c3b9-9029-4559-995b-3e2e5b5a4039",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "At least on Linux the sandbox also watches file access and complains if undeclared dependencies where accessed. There are generally whitelisted directories though. ",
        "createdAt" : "2019-07-18T15:46:49Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@As far as I can tell they are not run in any kind of chroot or container (at\nleast on macOS), although they are run with a restricted PATH (on Linux) and in\na specially set-up folder.\n\nAs such, in order to get all of your dependencies available, you need to"
  },
  {
    "id" : "3758aee0-11bb-49a6-a6ef-e2edd296dca8",
    "prId" : 2223,
    "comments" : [
      {
        "id" : "f095ebbc-6477-4f4c-9f95-011236bc6212",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "[`select`](https://docs.bazel.build/versions/master/be/functions.html#select) is another way to put conditionals into BUILD files. More complex expressions can to be extracted into `.bzl` files and loaded as macros.",
        "createdAt" : "2019-07-18T16:08:24Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +71,75 @@alias(\n    name = \"yarn\",\n    actual = \"@nodejs//:bin/yarn.cmd\" if is_windows else \"@nodejs//:bin/yarn\",\n)\n```"
  },
  {
    "id" : "67df22fc-854e-4b58-9ebf-5767b49bc434",
    "prId" : 2223,
    "comments" : [
      {
        "id" : "66c988b4-2167-41bd-9145-2dfc72dbd910",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "filenames are valid targets. They may need appropriate visibility using [`exports_files`](https://docs.bazel.build/versions/master/be/functions.html#exports_files) though.",
        "createdAt" : "2019-07-18T16:21:14Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@access those files directly by their expected path, as you can do in\n`genrule`s, will not work with `sh_test` on Windows. You may have to wrap your\nlocal files in a `filegroup` to have a valid target for the `$(location ...)`\ncall you should pass as an `args` to the `sh_test`."
  },
  {
    "id" : "56db40ed-4667-40f3-bcc1-2760e57c73ab",
    "prId" : 2223,
    "comments" : [
      {
        "id" : "7e66e59f-d885-45a8-9e0d-ee6c616b5765",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "By string substitution you mean `$(location)` expansion? It's syntax is fairly limited. The details are documented [here](https://docs.bazel.build/versions/master/be/make-variables.html#predefined_label_variables).",
        "createdAt" : "2019-07-19T07:24:51Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8bb4e02b-3aac-469f-8f8a-d2d0da5f8265",
        "parentId" : "7e66e59f-d885-45a8-9e0d-ee6c616b5765",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "TIL:\r\n\r\n> `location`: A synonym for either `execpath` or `rootpath`, depending on the attribute being expanded. This is legacy pre-Starlark behavior and **not recommended** unless you really know what it does for a particular rule. See #2475 for details.\r\n\r\nI'm not going to go back to fix it now, but this is definitely something I'll dig into next time I have to touch Bazel.",
        "createdAt" : "2019-07-19T14:04:32Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@\nBazel supports simple conditionals in its rules, though I have not found a way\nto use them in string substitutions. As some rules have different names under\nWindows, this creates a bit of a problem. Aliases provide a way around that;\nfor example:"
  },
  {
    "id" : "a21a9d01-b0c4-48db-beba-874cccf50d4d",
    "prId" : 2223,
    "comments" : [
      {
        "id" : "e5fab4c7-0822-4e3e-ac2f-ce1330f75bfe",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\na specially set up folder.\r\n```",
        "createdAt" : "2019-07-19T07:50:46Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@As far as I can tell they are not run in any kind of chroot or container (at\nleast on macOS), although they are run with a restricted PATH (on Linux) and in\na specially set-up folder.\n\nAs such, in order to get all of your dependencies available, you need to"
  }
]