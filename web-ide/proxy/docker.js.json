[
  {
    "id" : "2bd32eb4-866c-407b-9021-712e4714ec22",
    "prId" : 304,
    "comments" : [
      {
        "id" : "4e189cf3-af28-4864-b516-2190f22480d7",
        "parentId" : null,
        "author" : {
          "login" : "dbreydo-da",
          "name" : "Dmitry Breydo",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/25746085?u=5604bca0eae6c7e7b24186a94e7c35b9156d8197&v=4"
        },
        "body" : "use `config.docker.hostConfig.NetworkMode | 'bridge'` ?",
        "createdAt" : "2019-04-08T19:21:12Z",
        "updatedAt" : "2019-04-08T19:21:37Z",
        "lastEditedBy" : {
          "login" : "dbreydo-da",
          "name" : "Dmitry Breydo",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/25746085?u=5604bca0eae6c7e7b24186a94e7c35b9156d8197&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f7b8b902c193bed1085271c49839af54c05b9434",
    "line" : 64,
    "diffHunk" : "@@ -22,16 +27,67 @@ function getImage(imageId) {\n     return docker.getImage(imageId).inspect()\n }\n \n+function init() {\n+    const webIdeNetwork = config.docker.hostConfig.NetworkMode ? config.docker.hostConfig.NetworkMode : 'bridge'\n+    if (!onInternalNetwork()) {\n+        console.log(\"running web ide containers on network[%s], this is a non-internal network and is only suitable for local development\", webIdeNetwork)\n+        return Promise.resolve()\n+    }\n+\n+    const initNetworksP = docker.listNetworks()\n+    .then(networks => {\n+        //create networks if they don't exist\n+        const internalName = config.docker.internalNetwork,\n+              externalName = config.docker.externalNetwork,\n+              hasInternal = networks.some(n => n.Name === internalName),\n+              hasExternal = networks.some(n => n.Name === externalName),\n+              internalNetworkP = hasInternal ? getNetwork(networks, internalName) : createNetwork(internalName, true),\n+              externalNetworkP = hasExternal ? getNetwork(networks, externalName) : createNetwork(externalName, false)\n+        return Promise.all([internalNetworkP, externalNetworkP])\n+    })\n+    const proxyIdP = docker.listContainers({all: false, filters: { label: [config.docker.proxyLabel] }})\n+    .then(containers => { \n+        if (containers.length !== 1) return new Error(`Problems finding web ide proxy. Found ${containers.length} instances labelled with ${config.docker.proxyLabel}`)\n+        return containers[0].Id\n+    })\n+\n+    return Promise.all([initNetworksP, proxyIdP])\n+    .then(all => {\n+        const networkIds = all[0]\n+        const proxyContainerId = all[1]\n+        networkIds.forEach(id => console.log(\"connecting container[%s] to network[%s]\", proxyContainerId, id))\n+        return Promise.all(networkIds.map(id => {\n+            return docker.getNetwork(id).connect({Container: proxyContainerId})\n+        }))\n+    })\n+}\n+\n+function onInternalNetwork() {\n+    const webIdeNetwork = config.docker.hostConfig.NetworkMode ? config.docker.hostConfig.NetworkMode : 'bridge'"
  }
]