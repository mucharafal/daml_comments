[
  {
    "id" : "df62c18a-d222-4da0-8c03-13eb1e497d88",
    "prId" : 4506,
    "comments" : [
      {
        "id" : "7f9ae384-8ae0-468f-948e-2f2a98d24416",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Definitely not something for this PR but I somewhat wonder if we might be better off in the long term just writing stuff to a `sqlite` database instead of messing around with a bunch of files pretending we can safely lock them.",
        "createdAt" : "2020-02-13T16:07:09Z",
        "updatedAt" : "2020-02-14T15:06:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a27bf271bc01ccd6f378a901ed930f5ba85959ce",
    "line" : 55,
    "diffHunk" : "@@ -104,7 +123,8 @@ requestTimeout = 5_000_000\n -- Files used to record data that should persist over restarts.\n \n sentDataFile :: GCPState -> FilePath\n-sentDataFile GCPState{gcpDamlDir} = gcpDamlDir </> \".sent_data\"\n+sentDataFile GCPState{..} ="
  },
  {
    "id" : "cb3819d5-32d1-430b-b5a5-a5a734adccb3",
    "prId" : 2102,
    "comments" : [
      {
        "id" : "d6448caa-bfba-49e0-b77f-d51b92ffc0b8",
        "parentId" : null,
        "author" : null,
        "body" : "save -> safe",
        "createdAt" : "2019-07-11T13:14:37Z",
        "updatedAt" : "2019-07-11T13:17:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "69060c74-bb15-4a8e-8da0-aafcd6c03eda",
        "parentId" : "d6448caa-bfba-49e0-b77f-d51b92ffc0b8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Writing text without a typechecker is hard.",
        "createdAt" : "2019-07-11T13:21:01Z",
        "updatedAt" : "2019-07-11T13:21:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e037dd6b-8fab-4092-8785-650bf388b9ef",
        "parentId" : "d6448caa-bfba-49e0-b77f-d51b92ffc0b8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "https://github.com/digital-asset/daml/pull/2107",
        "createdAt" : "2019-07-11T13:23:30Z",
        "updatedAt" : "2019-07-11T13:23:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3dc43d88c2f53bdb63af24071fc1afad79b08650",
    "line" : 49,
    "diffHunk" : "@@ -62,16 +64,20 @@ import Network.HTTP.Simple\n data GCPState = GCPState\n     { gcpFallbackLogger :: Lgr.Handle IO\n     -- ^ Fallback logger to log exceptions caused by the GCP logging itself.\n-    , gcpLogQueue :: Var [LogEntry]\n-    -- ^ Unsent logs with the oldest log entry first.\n+    , gcpLogChan :: TChan (LogEntry, IO ())\n+    -- ^ Unsent logs. The IO action is a finalizer that is run when the log entry\n+    -- has been sent successfully.\n     , gcpSessionID :: UUID\n     -- ^ Identifier for the current session\n     , gcpDamlDir :: FilePath\n     -- ^ Directory where we store various files such as the amount of\n     -- data sent so far.\n     , gcpSentDataFileLock :: Lock\n-    -- ^ Lock for accessing sendData\n-    -- TODO (MK) This doesn’t actually work for concurrent executions.\n+    -- ^ Lock for accessing sendData.\n+    -- Note that this is not save if there are multiple damlc executables"
  },
  {
    "id" : "1eacaa69-544c-4061-a374-79af68e35fd2",
    "prId" : 1492,
    "comments" : [
      {
        "id" : "c24d7c0d-f4dd-40df-8380-a5a658efb81a",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Thanks! This annoyed me too.",
        "createdAt" : "2019-06-03T12:17:32Z",
        "updatedAt" : "2019-06-03T12:19:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "98e0c09b95ae9fc4cd7dbd427aa3f5254b615ae0",
    "line" : 71,
    "diffHunk" : "@@ -333,28 +335,31 @@ fetchMachineID = do\n     fp <- fmap (</> \".machine_id\") damlDir\n     let generateID = do\n         mID <- randomIO\n-        BS.writeFile fp $ encodeUtf8 $ toText mID\n+        BS.writeFile fp $ encodeUtf8 $ UUID.toText mID\n         pure mID\n     exists <- doesFileExist fp\n     if exists\n        then do\n-        uid <- fromText . decodeUtf8 <$> BS.readFile fp\n+        uid <- UUID.fromText . decodeUtf8 <$> BS.readFile fp\n         maybe generateID pure uid\n        else\n         generateID\n \n -- | If it hasn't already been done log that the user has opted out of telemetry\n-logOptOut :: IO ()\n-logOptOut = do\n+logOptOut :: Lgr.Handle IO -> IO ()\n+logOptOut hnd = do\n     fp <- fmap (</> \".opted_out\") damlDir\n     exists <- doesFileExist fp\n     env <- initialiseEnv\n     let msg :: T.Text = \"Opted out of telemetry\"\n     optOut <- createLog env Lgr.Info msg\n     unless exists do\n-        res <- sendLogs [optOut]\n-        when (Prelude.null res) $\n-            writeFile fp \"\"\n+        res <- try $ do\n+            res <- sendLogs [optOut]\n+            when (null res) $ writeFile fp \"\""
  },
  {
    "id" : "6a939eb8-2a05-430a-9b9b-362a6678cf47",
    "prId" : 1492,
    "comments" : [
      {
        "id" : "6c35a089-c6ed-44e5-b82c-c7b54a0f42db",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should this be somewhere shared? With the rest of the log functions?",
        "createdAt" : "2019-06-03T12:18:17Z",
        "updatedAt" : "2019-06-03T12:19:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d9d54b1e-6fcc-4e90-92a0-fd9541f6f8be",
        "parentId" : "6c35a089-c6ed-44e5-b82c-c7b54a0f42db",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should it also record the stack trace? Does displayException usually include that?",
        "createdAt" : "2019-06-03T12:18:35Z",
        "updatedAt" : "2019-06-03T12:19:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "29fdfe56-b080-418f-8dd2-32886ad5e0a6",
        "parentId" : "6c35a089-c6ed-44e5-b82c-c7b54a0f42db",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You don’t get a stack trace for where the exception was thrown unless you compile with profiling info. I suppose we could include the location of the call to `logException` but I am not sure that’s particularly useful.\r\nI generally tend to keep these helpers local until I actually need them somewhere else.",
        "createdAt" : "2019-06-03T12:24:19Z",
        "updatedAt" : "2019-06-03T12:24:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "149366df-5936-4d18-8801-100389c3504d",
        "parentId" : "6c35a089-c6ed-44e5-b82c-c7b54a0f42db",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Fair enough on both counts.",
        "createdAt" : "2019-06-03T12:43:55Z",
        "updatedAt" : "2019-06-03T12:43:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "98e0c09b95ae9fc4cd7dbd427aa3f5254b615ae0",
    "line" : 34,
    "diffHunk" : "@@ -311,6 +310,9 @@ sendLogQueue gcp@GCPState{..} runSync = do\n           void $\n           forkFinally send (handleResult)\n \n+logException :: Exception e => Lgr.Handle m -> e -> m ()\n+logException handle e = Lgr.logJson handle Lgr.Error $ displayException e"
  },
  {
    "id" : "7b5bcc7c-e29e-44f7-991c-095558d9fe82",
    "prId" : 1492,
    "comments" : [
      {
        "id" : "684bc748-1860-4eed-b3af-e50dd168df07",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2019-06-03T12:18:44Z",
        "updatedAt" : "2019-06-03T12:19:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "98e0c09b95ae9fc4cd7dbd427aa3f5254b615ae0",
    "line" : 6,
    "diffHunk" : "@@ -49,10 +49,11 @@ import qualified Data.ByteString.Lazy as LBS\n import qualified Data.ByteString as BS\n import qualified Data.ByteString.UTF8 as UTFBS\n import Data.Time as Time\n-import Data.UUID\n+import Data.UUID (UUID)\n+import qualified Data.UUID as UUID"
  }
]