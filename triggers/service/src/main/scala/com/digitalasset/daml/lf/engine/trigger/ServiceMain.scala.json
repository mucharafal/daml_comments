[
  {
    "id" : "7540b819-c237-4f12-be75-4054b8598b8d",
    "prId" : 6491,
    "comments" : [
      {
        "id" : "2dad076a-cd0b-4680-aae4-aa11f944aa62",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'm all for making this stuff top-level if it makes your life easier, but perhaps put it in _Message.scala_.",
        "createdAt" : "2020-06-25T07:54:07Z",
        "updatedAt" : "2020-06-25T07:57:31Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "99873186-9ca0-47a2-b7ea-0fd8feb48477",
        "parentId" : "2dad076a-cd0b-4680-aae4-aa11f944aa62",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yeah, will do in a follow-up.",
        "createdAt" : "2020-06-25T14:15:21Z",
        "updatedAt" : "2020-06-25T14:15:21Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c3311337d595f77f26a888e3fbed8133a8761a27",
    "line" : 40,
    "diffHunk" : "@@ -67,7 +72,30 @@ final case class RunningTrigger(\n     runner: ActorRef[TriggerRunner.Message]\n )\n \n-class Server(triggerDao: RunningTriggerDao) {\n+sealed trait Message\n+final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n+case object Stop extends Message\n+final case class StartFailed(cause: Throwable) extends Message\n+final case class Started(binding: ServerBinding) extends Message\n+final case class TriggerStarting(runningTrigger: RunningTrigger) extends Message\n+final case class TriggerStarted(runningTrigger: RunningTrigger) extends Message\n+final case class TriggerInitializationFailure(\n+    runningTrigger: RunningTrigger,\n+    cause: String\n+) extends Message\n+final case class TriggerRuntimeFailure(\n+    runningTrigger: RunningTrigger,\n+    cause: String\n+) extends Message"
  },
  {
    "id" : "b23e7ac3-d945-491b-9238-5fd4c6c56f99",
    "prId" : 6491,
    "comments" : [
      {
        "id" : "b3b3f080-461e-4418-bc4a-54da4ffac3f2",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Likewise, these and other surrounding case classes can be moved to the package object in _package.scala_.",
        "createdAt" : "2020-06-25T07:54:32Z",
        "updatedAt" : "2020-06-25T07:57:31Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c3311337d595f77f26a888e3fbed8133a8761a27",
    "line" : 20,
    "diffHunk" : "@@ -54,6 +54,11 @@ case class LedgerConfig(\n     timeProvider: TimeProviderType,\n     commandTtl: Duration,\n )\n+case class TriggerRunnerConfig(\n+    maxInboundMessageSize: Int,\n+    maxFailureNumberOfRetries: Int,\n+    failureRetryTimeRange: Duration\n+)\n \n final case class SecretKey(value: String)\n final case class UserCredentials(token: EncryptedToken)"
  },
  {
    "id" : "f2fe8410-eb47-4336-954f-26df55ea8e83",
    "prId" : 6491,
    "comments" : [
      {
        "id" : "4785109b-413d-4e2d-b1a1-34909915e88c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Did any of the methods here change or did you just shuffle them around? Unfortunately hard to spot in the diff.",
        "createdAt" : "2020-06-25T08:15:03Z",
        "updatedAt" : "2020-06-25T08:16:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "54b0332a-1c13-4de0-ab3b-faf19b892600",
        "parentId" : "4785109b-413d-4e2d-b1a1-34909915e88c",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Just shuffled!",
        "createdAt" : "2020-06-25T14:16:11Z",
        "updatedAt" : "2020-06-25T14:16:11Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c3311337d595f77f26a888e3fbed8133a8761a27",
    "line" : 65,
    "diffHunk" : "@@ -105,6 +133,67 @@ class Server(triggerDao: RunningTriggerDao) {\n     triggerDao.persistPackages(encodedDar)\n   }\n \n+  private def triggerRunnerName(triggerInstance: UUID): String =\n+    triggerInstance.toString ++ \"-monitor\"\n+\n+  private def getRunner(triggerInstance: UUID): Option[ActorRef[TriggerRunner.Message]] =\n+    ctx\n+      .child(triggerRunnerName(triggerInstance))\n+      .asInstanceOf[Option[ActorRef[TriggerRunner.Message]]]\n+\n+  private def startTrigger("
  },
  {
    "id" : "b74318ff-66d0-4c27-a84e-3fb34502f683",
    "prId" : 6309,
    "comments" : [
      {
        "id" : "1ae8d70b-f15d-4db5-b0a7-14d1b44695a9",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I would give slightly different warnings in each of the cases below, rather than saying \"if you haven't used 'no-secret-key'\", since you have that information on hand.",
        "createdAt" : "2020-06-11T22:15:51Z",
        "updatedAt" : "2020-06-11T22:19:34Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df38038340aa1699372867c97fee63f61f3bd093",
    "line" : 17,
    "diffHunk" : "@@ -191,17 +191,21 @@ object Server {\n       failureRetryTimeRange: Duration,\n       dar: Option[Dar[(PackageId, Package)]],\n       jdbcConfig: Option[JdbcConfig],\n+      noSecretKey: Boolean,\n   ): Behavior[Message] = Behaviors.setup { ctx =>\n     val triggerDao = jdbcConfig.map(TriggerDao(_)(ctx.system.executionContext))\n \n     val key =\n       sys.env.get(\"TRIGGER_SERVICE_SECRET_KEY\") match {\n         case Some(key) => key\n         case None => {\n-          val logMsg =\n-            \"WARNING : The environment variable 'TRIGGER_SERVICE_SECRET_KEY' is not defined. It is highly recommended that a non-empty value for this variable be set. If the service startup parameters do not include the '--no-secret-key' option, the service will now terminate.\"\n-          ctx.log.info(logMsg)\n-          \"secret key\"\n+          ctx.log.warn(\n+            \"The environment variable 'TRIGGER_SERVICE_SECRET_KEY' is not defined. It is highly recommended that a non-empty value for this variable be set. If the service startup parameters do not include the '--no-secret-key' option, the service will now terminate.\")"
  },
  {
    "id" : "01bb6c34-9031-4a09-8901-e326ac6884a8",
    "prId" : 6296,
    "comments" : [
      {
        "id" : "9bb35d7e-7761-4629-82eb-bf0f63069d38",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n        party = TokenManagement.decodeCredentials(key, credentials)._1\r\n```",
        "createdAt" : "2020-06-10T19:59:32Z",
        "updatedAt" : "2020-06-10T20:58:15Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bdfad5af-67c8-40bd-904b-6a5b4e9e3b5c",
        "parentId" : "9bb35d7e-7761-4629-82eb-bf0f63069d38",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "thanks",
        "createdAt" : "2020-06-10T20:29:16Z",
        "updatedAt" : "2020-06-10T20:58:15Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "55b6854d7b7c96e69bc1c9cd22b4ed7f8dffb80f",
    "line" : null,
    "diffHunk" : "@@ -215,7 +226,7 @@ object Server {\n         triggerName: Identifier): Either[String, JsValue] = {\n       for {\n         trigger <- Trigger.fromIdentifier(server.compiledPackages, triggerName).right\n-        party = Party(TokenManagement.decodeCredentials(credentials)._1);\n+        party = TokenManagement.decodeCredentials(key, credentials)._1;"
  },
  {
    "id" : "e08b1152-0051-4639-a0a6-a8ff459c71f2",
    "prId" : 6296,
    "comments" : [
      {
        "id" : "c4eb857f-e972-4f9e-8912-0cdab629bb60",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "This gives an Unauthorized error when the party string fails validation as well. Seems reasonable but pointing out in case it's unintended",
        "createdAt" : "2020-06-10T20:02:50Z",
        "updatedAt" : "2020-06-10T20:58:15Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55b6854d7b7c96e69bc1c9cd22b4ed7f8dffb80f",
    "line" : 80,
    "diffHunk" : "@@ -361,10 +370,9 @@ object Server {\n             extractRequest {\n               request =>\n                 TokenManagement\n-                  .findCredentials(request)\n+                  .findCredentials(key, request)\n                   .fold(\n-                    unauthorized =>\n-                      complete(errorResponse(StatusCodes.Unauthorized, unauthorized.message)),\n+                    message => complete(errorResponse(StatusCodes.Unauthorized, message)),"
  },
  {
    "id" : "657a4800-8fb0-4d86-b81c-c6dc13e418f0",
    "prId" : 6296,
    "comments" : [
      {
        "id" : "0672596a-dd22-4212-bbf5-dfb605e70536",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "We could abstract out this pattern in a `withAuthorization` function in future. Also, do we not need this for upload_dar requests as well? (though the format is a bit funky there)",
        "createdAt" : "2020-06-10T20:06:58Z",
        "updatedAt" : "2020-06-10T20:58:15Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55b6854d7b7c96e69bc1c9cd22b4ed7f8dffb80f",
    "line" : 67,
    "diffHunk" : "@@ -335,10 +345,9 @@ object Server {\n             extractRequest {\n               request =>\n                 TokenManagement\n-                  .findCredentials(request)\n+                  .findCredentials(key, request)\n                   .fold(\n-                    unauthorized =>\n-                      complete(errorResponse(StatusCodes.Unauthorized, unauthorized.message)),\n+                    message => complete(errorResponse(StatusCodes.Unauthorized, message)),"
  },
  {
    "id" : "141cd314-b9fc-4812-8223-0a991b935f46",
    "prId" : 6296,
    "comments" : [
      {
        "id" : "5fa9a668-f13b-41ee-8e29-96cf658282df",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "At this point do we need this type? Seems like there is now only `EncryptedToken`, `DecryptedToken` and the `(Party, String)` pair that we care about. This is not doing any harm atm though.",
        "createdAt" : "2020-06-10T20:10:33Z",
        "updatedAt" : "2020-06-10T20:58:15Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55b6854d7b7c96e69bc1c9cd22b4ed7f8dffb80f",
    "line" : 13,
    "diffHunk" : "@@ -58,7 +57,7 @@ case class LedgerConfig(\n     commandTtl: Duration,\n )\n \n-final case class UserCredentials(token: String)\n+final case class UserCredentials(token: EncryptedToken)"
  },
  {
    "id" : "9f32292b-3a86-485a-ab53-a3d7ea21c4b9",
    "prId" : 6279,
    "comments" : [
      {
        "id" : "4ce127c5-2ae2-4f89-aa4c-a5a53d9d5fce",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I think it would be helpful to use a data type (like the `User` type you added to the test code) so we know when we're dealing with credentials and when it's just a username or something else.",
        "createdAt" : "2020-06-09T20:00:03Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64629f72-79be-4dc7-80ae-8ac8b4afe302",
        "parentId" : "4ce127c5-2ae2-4f89-aa4c-a5a53d9d5fce",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Also it seems that the username is really a `Party`, so we can the type for that (which I think we were doing before introducing JWTs).",
        "createdAt" : "2020-06-09T20:31:52Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9464687f8f030036b33ef328663eeb5ef13160c",
    "line" : null,
    "diffHunk" : "@@ -62,14 +61,15 @@ case class LedgerConfig(\n final case class RunningTrigger(\n     triggerInstance: UUID,\n     triggerName: Identifier,\n-    jwt: Jwt,\n+    token: String, // User credentials."
  },
  {
    "id" : "9326bf79-71a1-4303-b089-281c687f3d29",
    "prId" : 6279,
    "comments" : [
      {
        "id" : "5e7aa5a9-91a7-4e04-abee-9269ed1122cb",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I think it would make sense for this map to have username keys and then have a separate map for passwords if we are storing them like that. Then we obtain the password only when necessary, i.e. before calls to the auth service.",
        "createdAt" : "2020-06-09T20:01:20Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5e5cc1b-193f-4721-b9b7-1022d8d378b8",
        "parentId" : "5e7aa5a9-91a7-4e04-abee-9269ed1122cb",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I don't see any great benefit to this over doing what we currently do. I do agree with the introduction of a case class `UserCredentials (token: String)` you suggest above.",
        "createdAt" : "2020-06-09T20:37:19Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5eef06ba-b1c5-4ee7-897e-e04e9cb82cc8",
        "parentId" : "5e7aa5a9-91a7-4e04-abee-9269ed1122cb",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "If you use an encrypted token then it probably doesn't matter too much. Otherwise it is for the better hygiene/security of not passing around unencrypted passwords.",
        "createdAt" : "2020-06-09T20:42:56Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "11bf995a-d262-460e-83b3-e13298f00225",
        "parentId" : "5e7aa5a9-91a7-4e04-abee-9269ed1122cb",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "we are agreed that we will encrypt the credential tokens. do you feel that the encryption should go in on this PR or would you be ok if it went in on the PR after this one?",
        "createdAt" : "2020-06-09T20:45:53Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9464687f8f030036b33ef328663eeb5ef13160c",
    "line" : null,
    "diffHunk" : "@@ -62,14 +61,15 @@ case class LedgerConfig(\n final case class RunningTrigger(\n     triggerInstance: UUID,\n     triggerName: Identifier,\n-    jwt: Jwt,\n+    token: String, // User credentials.\n+    // TODO(SF, 2020-): Add access token field here in the presence of authentication.\n     runner: ActorRef[TriggerRunner.Message]\n )\n \n class Server(dar: Option[Dar[(PackageId, Package)]], triggerDao: Option[TriggerDao]) {\n \n   private var triggers: Map[UUID, RunningTrigger] = Map.empty;\n-  private var triggersByToken: Map[Jwt, Set[UUID]] = Map.empty;\n+  private var triggersByToken: Map[String, Set[UUID]] = Map.empty;"
  },
  {
    "id" : "45f1f35b-d780-4e83-aa3a-51168c27818b",
    "prId" : 6279,
    "comments" : [
      {
        "id" : "fdaf4bdc-6ada-495f-834c-4221e1e4c0bf",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "With the changes I suggested above, these functions would then take a username string as parameter.",
        "createdAt" : "2020-06-09T20:09:04Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "91299b53-b597-46cd-bb8d-2d60293ff598",
        "parentId" : "fdaf4bdc-6ada-495f-834c-4221e1e4c0bf",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yeah. Again I'm not convinced this is a particularly useful change. I think it's nicer to just have the (encoded) pair at our disposal and decode/decrypt for a rendering of the party where we need to. Not against validating the user component up-front as you suggest earlier.",
        "createdAt" : "2020-06-09T20:39:21Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bb29ff0e-f722-4af9-ba5b-ecb1c904ea51",
        "parentId" : "fdaf4bdc-6ada-495f-834c-4221e1e4c0bf",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "resolved by the preceding discussion - sticking with encrypted tokens, no extra maps.",
        "createdAt" : "2020-06-09T21:12:29Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9464687f8f030036b33ef328663eeb5ef13160c",
    "line" : null,
    "diffHunk" : "@@ -130,12 +130,12 @@ class Server(dar: Option[Dar[(PackageId, Package)]], triggerDao: Option[TriggerD\n     }\n   }\n \n-  private def listRunningTriggers(jwt: Jwt): Either[String, Vector[UUID]] = {\n+  private def listRunningTriggers(token: String): Either[String, Vector[UUID]] = {"
  },
  {
    "id" : "f03af8eb-0d97-4fbc-8068-5c7391779304",
    "prId" : 6279,
    "comments" : [
      {
        "id" : "e2b49203-4721-4491-a9c7-4cfbd09279bd",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Just to confirm, this will later map from some `EncryptedToken` type right?",
        "createdAt" : "2020-06-10T13:27:51Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6f6af1ff-b637-4649-9dd7-304647843c80",
        "parentId" : "e2b49203-4721-4491-a9c7-4cfbd09279bd",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "yes\r\n",
        "createdAt" : "2020-06-10T13:37:11Z",
        "updatedAt" : "2020-06-10T13:37:11Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9464687f8f030036b33ef328663eeb5ef13160c",
    "line" : 28,
    "diffHunk" : "@@ -58,18 +58,21 @@ case class LedgerConfig(\n     commandTtl: Duration,\n )\n \n+final case class UserCredentials(token: String)\n+\n final case class RunningTrigger(\n     triggerInstance: UUID,\n     triggerName: Identifier,\n-    token: String, // User credentials.\n-    // TODO(SF, 2020-): Add access token field here in the presence of authentication.\n+    credentials: UserCredentials,\n+    // TODO(SF, 2020-0610): Add access token field here in the\n+    // presence of authentication.\n     runner: ActorRef[TriggerRunner.Message]\n )\n \n class Server(dar: Option[Dar[(PackageId, Package)]], triggerDao: Option[TriggerDao]) {\n \n   private var triggers: Map[UUID, RunningTrigger] = Map.empty;\n-  private var triggersByToken: Map[String, Set[UUID]] = Map.empty;\n+  private var triggersByParty: Map[UserCredentials, Set[UUID]] = Map.empty;"
  },
  {
    "id" : "b5f6ebab-b27d-48bb-b3b1-f6b3e5825501",
    "prId" : 6233,
    "comments" : [
      {
        "id" : "d9efe353-eea7-4dd6-82ec-d098d83e73f7",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I'm not sure sending this message makes sense anymore. Previously we wanted this case to be handled in the same way as other initialization failures, but now we are restarting those. So I think we can just log the status instead of going through another indirection.",
        "createdAt" : "2020-06-04T20:37:53Z",
        "updatedAt" : "2020-06-04T20:48:09Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7c6dbc87bdc60491a9973ceb8d0ceb95367fa880",
    "line" : null,
    "diffHunk" : "@@ -393,26 +393,33 @@ object Server {\n             server.logTriggerStatus(runningTrigger, \"running\")\n             server.addRunningTrigger(runningTrigger) match {\n               case Left(err) =>\n+                // The trigger has just advised it's in the running\n+                // state but updating the running trigger table has\n+                // failed. This error condition is exogenous to the\n+                // runner. We therefore need to tell it explicitly to\n+                // stop.\n                 val msg = \"Failed to add running trigger to database.\\n\" + err\n                 ctx.self ! TriggerInitializationFailure(runningTrigger, msg)"
  },
  {
    "id" : "ecb4a496-5517-4de3-8083-67c6cbbef886",
    "prId" : 6219,
    "comments" : [
      {
        "id" : "5a3c8ac5-af35-4c52-a3b3-ffe615dbeeef",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think you need the `.right` here. `Either` has been right-biased for a while.",
        "createdAt" : "2020-06-04T06:47:57Z",
        "updatedAt" : "2020-06-04T06:48:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "899cdc55868a70a5815562628785f3f7b413188b",
    "line" : 42,
    "diffHunk" : "@@ -198,40 +197,33 @@ object Server {\n       new AkkaExecutionSequencerPool(\"TriggerService\")(untypedSystem)\n     implicit val dateTimeFormat: RootJsonFormat[LocalDateTime] = LocalDateTimeJsonFormat\n \n-    def startTrigger(\n-        ctx: ActorContext[Server.Message],\n-        token: (Jwt, JwtPayload),\n-        trigger: Trigger,\n-        triggerName: Identifier,\n-        ledgerConfig: LedgerConfig,\n-        maxInboundMessageSize: Int,\n-        maxFailureNumberOfRetries: Int,\n-        failureRetryTimeRange: Duration,\n-    ): JsValue = {\n-      val jwt: Jwt = token._1\n-      val jwtPayload: JwtPayload = token._2\n-      val party: Party = Party(jwtPayload.party);\n-      val triggerInstance = UUID.randomUUID\n-      val ref = ctx.spawn(\n-        TriggerRunner(\n-          new TriggerRunner.Config(\n-            ctx.self,\n-            triggerInstance,\n-            triggerName,\n-            jwt,\n-            server.compiledPackages,\n-            trigger,\n-            ledgerConfig,\n-            maxInboundMessageSize,\n-            maxFailureNumberOfRetries,\n-            failureRetryTimeRange,\n-            party\n+    def startTrigger(token: (Jwt, JwtPayload), triggerName: Identifier): Either[String, JsValue] = {\n+      for {\n+        trigger <- Trigger.fromIdentifier(server.compiledPackages, triggerName).right"
  },
  {
    "id" : "8fb9102d-3ccc-4114-89be-f812bd2c3bca",
    "prId" : 6217,
    "comments" : [
      {
        "id" : "d0afef62-668e-41bc-9bf1-9da94317abad",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Shouldn’t this be `errorResponse(StatusCodes.NotFound, \"some message\")` to keep the consistent format?",
        "createdAt" : "2020-06-03T18:29:13Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "12ee98ea-81ac-4d4f-8151-e1b2ffabe12a",
        "parentId" : "d0afef62-668e-41bc-9bf1-9da94317abad",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Well, I don't know. That will result in a DA json response. Do we want a \"raw\" 404 response consistent with what akka does with an invalid route or, do we want to acknowledge the route and say that the entity it refers to was \"not found\". I think if the latter then it's not the resource that wasn't found, it's the entity that the resource pertains too that wasn't and unprocessable entity is then the right response (as it were). ",
        "createdAt" : "2020-06-03T18:33:31Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "79369eb0-9c21-4f55-a1dc-c7b3f9ee3692",
        "parentId" : "d0afef62-668e-41bc-9bf1-9da94317abad",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "What do you think?",
        "createdAt" : "2020-06-03T18:34:29Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cf8ac308-3232-48eb-bb95-4d0a885d229c",
        "parentId" : "d0afef62-668e-41bc-9bf1-9da94317abad",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would go for 404 + JSON response. Then you can differentiate between invalid routes and not found triggers while keeping the (at least to me) expected “not found” response for a trigger that is not found.",
        "createdAt" : "2020-06-03T18:38:44Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4f177fb5-a95b-4134-9999-104a397c2bd1",
        "parentId" : "d0afef62-668e-41bc-9bf1-9da94317abad",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok, you got it!",
        "createdAt" : "2020-06-03T18:39:28Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "87ca7486-e0de-4dac-9201-7e5e4d6ef352",
        "parentId" : "d0afef62-668e-41bc-9bf1-9da94317abad",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "```scala\r\nerrorResponse(StatusCodes.NotFound, \"Unknown trigger: '\" + uuid.toString + \"'\")\r\n```\r\n",
        "createdAt" : "2020-06-03T18:40:02Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4b985b49-be5a-4965-827a-d1d88bce012f",
        "parentId" : "d0afef62-668e-41bc-9bf1-9da94317abad",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Agreed it should be an `errorResponse` maybe with a message like \"no running trigger with id \\<uuid\\>\"",
        "createdAt" : "2020-06-03T18:45:40Z",
        "updatedAt" : "2020-06-03T18:56:23Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a0702118a15f8743b69a12a2f5c02b1b5976a97c",
    "line" : null,
    "diffHunk" : "@@ -373,7 +378,11 @@ object Server {\n                     unauthorized =>\n                       complete(\n                         errorResponse(StatusCodes.UnprocessableEntity, unauthorized.message)),\n-                    triggerInstance => complete(successResponse(triggerInstance))\n+                    triggerInstance =>\n+                      triggerInstance match {\n+                        case Some(stoppedTriggerId) => complete(successResponse(stoppedTriggerId))\n+                        case None => complete(StatusCodes.NotFound)"
  },
  {
    "id" : "f7b86f63-eaf2-4264-a930-d27f27c30e08",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "276f16be-d94a-4e38-8f23-67baea4b4be3",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Two things here:\r\n1. The `(String, String)` is quite mysterious. I'd either define a data type with a `DateTime` field (there's probably an existing one) or just make it a single `String` as it is a log message.\r\n2. Any reason you're using a (linked) `List` here? Not an expert on Scala collections but I think `Vector` would be more standard. Then you would append to the log rather than keeping it in reverse order.",
        "createdAt" : "2020-06-01T19:05:21Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "06b8e196-3496-45cc-8243-016661e67984",
        "parentId" : "276f16be-d94a-4e38-8f23-67baea4b4be3",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Good catch on the vector thing. Switching to that. Re the pair of strings thing, I think it's ok. Let's see how it goes - can always generalize particularly if we end up stashing more here.",
        "createdAt" : "2020-06-01T19:44:08Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : null,
    "diffHunk" : "@@ -70,6 +72,7 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n \n   private var triggers: Map[UUID, RunningTrigger] = Map.empty;\n   private var triggersByToken: Map[Jwt, Set[UUID]] = Map.empty;\n+  private var triggerLog: Map[UUID, List[(String, String)]] = Map.empty;"
  },
  {
    "id" : "6c37df81-244d-4386-a7f8-ed6da12fd96f",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "a77c8876-455e-4858-b54d-a76e03b31f00",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Since we're returning the whole history here, would it make more sense to call this endpoint `history` or `log`?",
        "createdAt" : "2020-06-01T19:14:38Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f5934b72-4da6-4393-8034-42a99893f868",
        "parentId" : "a77c8876-455e-4858-b54d-a76e03b31f00",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I have thought about that. Don't want to get analysis paralysis on something so trivial. I think status is the right word (even acknowledging that the entire history is returned).",
        "createdAt" : "2020-06-01T19:46:03Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : 56,
    "diffHunk" : "@@ -309,6 +331,9 @@ object Server {\n                     triggerInstances => complete(successResponse(triggerInstances))\n                   )\n             }\n+          },\n+          pathPrefix(\"v1\" / \"status\" / JavaUUID) { uuid =>"
  },
  {
    "id" : "9028c333-1539-4de2-8c69-4e03fef9db81",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "97d92852-769f-44d8-8b29-a8ea7dd3e076",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n            server.triggerStatus(runningTrigger, \"stopped: initialization failure\")\r\n```",
        "createdAt" : "2020-06-01T19:15:25Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "df166f02-1480-4600-88d2-bc9b0c5cd5b3",
        "parentId" : "97d92852-769f-44d8-8b29-a8ea7dd3e076",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Fixing",
        "createdAt" : "2020-06-01T19:46:30Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : null,
    "diffHunk" : "@@ -350,24 +375,27 @@ object Server {\n       Behaviors\n         .receiveMessage[Message] {\n           case TriggerStarting(runningTrigger) =>\n-            // Nothing to do at this time.\n+            server.triggerStatus(runningTrigger, \"starting\")\n             Behaviors.same\n           case TriggerStarted(runningTrigger) =>\n             // The trigger has successfully started. Update the\n             // running triggers tables.\n+            server.triggerStatus(runningTrigger, \"running\")\n             server.addRunningTrigger(runningTrigger)\n             Behaviors.same\n           case TriggerInitializationFailure(runningTrigger, cause) =>\n             // The trigger has failed to start. Send the runner a stop\n             // message. There's no point in it remaining alive since\n             // its child actor is stopped and won't be restarted.\n+            server.triggerStatus(runningTrigger, \"stopped : initialization failure\")"
  },
  {
    "id" : "42507c3d-1b0b-4246-b36d-8dc0409434d4",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "111a4cf3-ee4d-4651-b521-ec3f0bb9ca1f",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n            server.triggerStatus(runningTrigger, \"stopped: runtime failure\")\r\n```",
        "createdAt" : "2020-06-01T19:15:34Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "775fca56-bafa-4c18-afc5-31f52590b341",
        "parentId" : "111a4cf3-ee4d-4651-b521-ec3f0bb9ca1f",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Fixing (I do this all the time 😄 )",
        "createdAt" : "2020-06-01T19:46:58Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : null,
    "diffHunk" : "@@ -350,24 +375,27 @@ object Server {\n       Behaviors\n         .receiveMessage[Message] {\n           case TriggerStarting(runningTrigger) =>\n-            // Nothing to do at this time.\n+            server.triggerStatus(runningTrigger, \"starting\")\n             Behaviors.same\n           case TriggerStarted(runningTrigger) =>\n             // The trigger has successfully started. Update the\n             // running triggers tables.\n+            server.triggerStatus(runningTrigger, \"running\")\n             server.addRunningTrigger(runningTrigger)\n             Behaviors.same\n           case TriggerInitializationFailure(runningTrigger, cause) =>\n             // The trigger has failed to start. Send the runner a stop\n             // message. There's no point in it remaining alive since\n             // its child actor is stopped and won't be restarted.\n+            server.triggerStatus(runningTrigger, \"stopped : initialization failure\")\n             runningTrigger.runner ! TriggerRunner.Stop\n             // No need to update the running triggers tables since\n             // this trigger never made it there.\n             Behaviors.same\n           case TriggerRuntimeFailure(runningTrigger, cause) =>\n             // The trigger has failed. Remove it from the running\n             // triggers tables.\n+            server.triggerStatus(runningTrigger, \"stopped : runtime failure\")"
  },
  {
    "id" : "6f0541ea-8dc0-428c-b76e-a62fcc579ddb",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "d6856a4d-6ad2-4e08-a32b-4173868ce114",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Would be useful to specify that this case is an expected stop.\r\n```suggestion\r\n      server.triggerStatus(runningTrigger, \"stopped: by user request\")\r\n```",
        "createdAt" : "2020-06-01T19:16:24Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f954a2e-8c35-4643-ab62-999f05a9a8c4",
        "parentId" : "d6856a4d-6ad2-4e08-a32b-4173868ce114",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "ok",
        "createdAt" : "2020-06-01T19:47:51Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : null,
    "diffHunk" : "@@ -199,6 +220,7 @@ object Server {\n       //this).\n       val runningTrigger = server.getRunningTrigger(uuid)\n       runningTrigger.runner ! TriggerRunner.Stop\n+      server.triggerStatus(runningTrigger, \"stopped\")"
  },
  {
    "id" : "e02c2139-c6b4-45ec-b770-8d4c82581e8c",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "1102bd4e-f305-4e27-ac87-d733800c83e2",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n    triggerLog.getOrElse(uuid, List())\r\n```",
        "createdAt" : "2020-06-01T19:18:10Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d79e9ed-b814-4236-b2b6-b2ab0c4c4b37",
        "parentId" : "1102bd4e-f305-4e27-ac87-d733800c83e2",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2020-06-01T19:49:16Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : null,
    "diffHunk" : "@@ -112,6 +115,24 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n   private def listRunningTriggers(jwt: Jwt): List[String] = {\n     triggersByToken.getOrElse(jwt, Set()).map(_.toString).toList\n   }\n+\n+  private def timeStamp(): String = {\n+    DateTimeFormatter.ofPattern(\"yyyy-MM-dd_HH:mmss\").format(LocalDateTime.now)\n+  }\n+\n+  private def triggerStatus(t: RunningTrigger, msg: String): Unit = {\n+    val id = t.triggerInstance\n+    val entry = (timeStamp(), msg)\n+    triggerLog += triggerLog.get(id).map(logs => id -> (entry :: logs)).getOrElse(id -> List(entry))\n+  }\n+\n+  private def getTriggerStatus(uuid: UUID): List[(String, String)] = {\n+    triggerLog.get(uuid) match {"
  },
  {
    "id" : "92726b2d-cdfd-4707-a56a-f59d1c5d3102",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "37bf24d7-479b-4804-b13a-05bcded78a62",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "A verb name would be more accurate here, like `logTriggerStatus`.",
        "createdAt" : "2020-06-01T19:21:49Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88fea861-9aed-4a0d-a192-9b31572c1aba",
        "parentId" : "37bf24d7-479b-4804-b13a-05bcded78a62",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Right on.",
        "createdAt" : "2020-06-01T19:58:16Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : null,
    "diffHunk" : "@@ -112,6 +115,24 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n   private def listRunningTriggers(jwt: Jwt): List[String] = {\n     triggersByToken.getOrElse(jwt, Set()).map(_.toString).toList\n   }\n+\n+  private def timeStamp(): String = {\n+    DateTimeFormatter.ofPattern(\"yyyy-MM-dd_HH:mmss\").format(LocalDateTime.now)\n+  }\n+\n+  private def triggerStatus(t: RunningTrigger, msg: String): Unit = {"
  },
  {
    "id" : "0e8f307e-b140-4567-9a0f-a3347a99f595",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "181b3227-2f85-478f-aac6-7cb15d9755d2",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "This line is quite confusing. Could be simplified with `fold` or a more direct `match` I think, something like\r\n```suggestion\r\n    triggerLog += id -> triggerLog.get(id).fold(List(entry), logs => entry :: logs)\r\n```",
        "createdAt" : "2020-06-01T19:25:11Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "84efc662-0399-4394-93fc-61bb88bd12fd",
        "parentId" : "181b3227-2f85-478f-aac6-7cb15d9755d2",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Re-examined it in light of the switch to vector. In all truth, you might have to squint for a second but it's not that bad IMO.",
        "createdAt" : "2020-06-01T19:50:02Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "02c89a07-34d9-46ec-b102-c741cea6f265",
        "parentId" : "181b3227-2f85-478f-aac6-7cb15d9755d2",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Just to be sure, `+=` overwrites an existing mapping right?",
        "createdAt" : "2020-06-01T20:07:07Z",
        "updatedAt" : "2020-06-01T20:07:07Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5cdcb1bb-326b-4d28-8880-e26cf7f96a39",
        "parentId" : "181b3227-2f85-478f-aac6-7cb15d9755d2",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "The RHS of the equation computes a key, value pair. If key is in the map `+=` will replace the entry. If it's not, then it will add the entry.",
        "createdAt" : "2020-06-01T20:58:53Z",
        "updatedAt" : "2020-06-01T21:05:27Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : null,
    "diffHunk" : "@@ -112,6 +115,24 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n   private def listRunningTriggers(jwt: Jwt): List[String] = {\n     triggersByToken.getOrElse(jwt, Set()).map(_.toString).toList\n   }\n+\n+  private def timeStamp(): String = {\n+    DateTimeFormatter.ofPattern(\"yyyy-MM-dd_HH:mmss\").format(LocalDateTime.now)\n+  }\n+\n+  private def triggerStatus(t: RunningTrigger, msg: String): Unit = {\n+    val id = t.triggerInstance\n+    val entry = (timeStamp(), msg)\n+    triggerLog += triggerLog.get(id).map(logs => id -> (entry :: logs)).getOrElse(id -> List(entry))"
  },
  {
    "id" : "10744c4e-8651-45cc-8469-a23d76a1ab22",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "7194ea62-daf7-4553-b6f8-e0e1bf5bf4ba",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would recommend to store at least `(LocalDateTime, String)` and render it as a string when you need to.",
        "createdAt" : "2020-06-02T06:39:48Z",
        "updatedAt" : "2020-06-02T07:02:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d78f1e05-347c-40b7-9b88-58e272f60688",
        "parentId" : "7194ea62-daf7-4553-b6f8-e0e1bf5bf4ba",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes, @rohanjr advocated for this as well. I'll take care of it.",
        "createdAt" : "2020-06-02T11:13:01Z",
        "updatedAt" : "2020-06-02T11:13:01Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : 13,
    "diffHunk" : "@@ -70,6 +72,7 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n \n   private var triggers: Map[UUID, RunningTrigger] = Map.empty;\n   private var triggersByToken: Map[Jwt, Set[UUID]] = Map.empty;\n+  private var triggerLog: Map[UUID, Vector[(String, String)]] = Map.empty;"
  },
  {
    "id" : "07c9a477-1cf1-4ac0-ae6b-e7483de315ad",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "fc37d8d6-c585-434d-acf2-a8ff83d9417d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Please don’t invent your own date/time format. Use RFC 3339 (or ISO 8601 they are basically identical).",
        "createdAt" : "2020-06-02T06:42:27Z",
        "updatedAt" : "2020-06-02T07:02:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3380df77-c77d-418b-9a3f-b61e3ad5f082",
        "parentId" : "fc37d8d6-c585-434d-acf2-a8ff83d9417d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Dang SO :) Ok.",
        "createdAt" : "2020-06-02T11:13:38Z",
        "updatedAt" : "2020-06-02T11:13:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : 23,
    "diffHunk" : "@@ -112,6 +115,24 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n   private def listRunningTriggers(jwt: Jwt): List[String] = {\n     triggersByToken.getOrElse(jwt, Set()).map(_.toString).toList\n   }\n+\n+  private def timeStamp(): String = {\n+    DateTimeFormatter.ofPattern(\"yyyy-MM-dd_HH:mmss\").format(LocalDateTime.now)"
  },
  {
    "id" : "9be08508-73c4-4fde-b57d-c76d77957e2a",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "7f2d0282-9a27-4e7e-b6fe-e6189d93a3d7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like your logs are a memory leak. You only ever write to them but never delete anything. This is probably not a huge issue atm but we should move them to postgres to avoid that.",
        "createdAt" : "2020-06-02T07:01:48Z",
        "updatedAt" : "2020-06-02T07:02:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4c7dbd5b-ac72-4794-b0ea-45222dae8105",
        "parentId" : "7f2d0282-9a27-4e7e-b6fe-e6189d93a3d7",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes, there is no attempt to control the memory here at this time. I hadn't considered having this data written to the DB - not against it.",
        "createdAt" : "2020-06-02T11:16:19Z",
        "updatedAt" : "2020-06-02T11:16:19Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "127833c9-d697-44e4-8488-131dcff2ff25",
        "parentId" : "7f2d0282-9a27-4e7e-b6fe-e6189d93a3d7",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "@rohanjr Thoughts?",
        "createdAt" : "2020-06-02T15:15:48Z",
        "updatedAt" : "2020-06-02T15:15:48Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "315ae543-033c-4f00-b5d6-649864a411ce",
        "parentId" : "7f2d0282-9a27-4e7e-b6fe-e6189d93a3d7",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Makes sense (if the user supplies a db connection)",
        "createdAt" : "2020-06-02T15:21:14Z",
        "updatedAt" : "2020-06-02T15:21:14Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : 92,
    "diffHunk" : "@@ -345,29 +371,32 @@ object Server {\n       case Failure(ex) => StartFailed(ex)\n     }\n \n-    // The server running server.\n+    // The server running state.\n     def running(binding: ServerBinding): Behavior[Message] =\n       Behaviors\n         .receiveMessage[Message] {\n           case TriggerStarting(runningTrigger) =>\n-            // Nothing to do at this time.\n+            server.logTriggerStatus(runningTrigger, \"starting\")\n             Behaviors.same\n           case TriggerStarted(runningTrigger) =>\n             // The trigger has successfully started. Update the\n             // running triggers tables.\n+            server.logTriggerStatus(runningTrigger, \"running\")\n             server.addRunningTrigger(runningTrigger)\n             Behaviors.same\n           case TriggerInitializationFailure(runningTrigger, cause) =>\n             // The trigger has failed to start. Send the runner a stop\n             // message. There's no point in it remaining alive since\n             // its child actor is stopped and won't be restarted.\n+            server.logTriggerStatus(runningTrigger, \"stopped: initialization failure\")\n             runningTrigger.runner ! TriggerRunner.Stop\n             // No need to update the running triggers tables since\n             // this trigger never made it there.\n             Behaviors.same\n           case TriggerRuntimeFailure(runningTrigger, cause) =>\n             // The trigger has failed. Remove it from the running\n             // triggers tables.\n+            server.logTriggerStatus(runningTrigger, \"stopped: runtime failure\")"
  },
  {
    "id" : "c61bd938-e7a3-4375-b066-896e15f8acfa",
    "prId" : 6153,
    "comments" : [
      {
        "id" : "d5a2e07c-ddb0-48d2-a50c-273f5be5a9ae",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you don’t want to go down the route of using sqlite with an in-memory backend so you always have a DB, I think it would be useful to have an abstraction layer somewhere. Inlining this every time we write to the DB is going to become a mess and it’s super easy to have the in-memory mode diverge from the DB-backed mode.",
        "createdAt" : "2020-06-02T07:16:09Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "58527d51-da40-4385-b29d-0aafc65bd3e7",
        "parentId" : "d5a2e07c-ddb0-48d2-a50c-273f5be5a9ae",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yes, I'll refactor the in-memory logic into the TriggerDao in a future PR (either next or after `stop` is implemented).",
        "createdAt" : "2020-06-02T15:56:33Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e27d8a43e27c8fcdaccc26c506fee4f3359edba",
    "line" : 43,
    "diffHunk" : "@@ -86,34 +89,53 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n         // will still call addPackage even if we already fed the\n         // package via the callback but this is harmless and not\n         // expensive.\n+        @scala.annotation.tailrec\n         def go(r: Result[Unit]): Unit = r match {\n           case ResultDone(()) => ()\n           case ResultNeedPackage(pkgId, resume) =>\n             go(resume(darMap.get(pkgId)))\n           case _ => throw new RuntimeException(s\"Unexpected engine result $r\")\n         }\n+\n         go(compiledPackages.addPackage(pkgId, pkg))\n     }\n   }\n \n   private def getRunningTrigger(uuid: UUID): RunningTrigger = {\n-    triggers.get(uuid).get // TODO: Improve as might throw NoSuchElementException.\n+    triggers(uuid) // TODO: Improve as might throw NoSuchElementException.\n   }\n \n-  private def addRunningTrigger(t: RunningTrigger): Unit = {\n-    triggers = triggers + (t.triggerInstance -> t)\n-    triggersByToken = triggersByToken + (t.jwt -> (triggersByToken.getOrElse(t.jwt, Set()) + t.triggerInstance))\n+  private def addRunningTrigger(t: RunningTrigger): Either[String, Unit] = {\n+    triggerDao match {"
  },
  {
    "id" : "6c35af6a-0401-4a53-a70b-23ee09d917f0",
    "prId" : 6153,
    "comments" : [
      {
        "id" : "295c42c3-f040-4fb4-8607-5b20dae268ed",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I guess you are leaving this for a separate PR?",
        "createdAt" : "2020-06-02T07:22:12Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1c090186-d3bd-4bd3-b46d-d7bfb4367ae8",
        "parentId" : "295c42c3-f040-4fb4-8607-5b20dae268ed",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yeah.",
        "createdAt" : "2020-06-02T15:56:50Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e27d8a43e27c8fcdaccc26c506fee4f3359edba",
    "line" : 62,
    "diffHunk" : "@@ -86,34 +89,53 @@ class Server(dar: Option[Dar[(PackageId, Package)]], jdbcConfig: Option[JdbcConf\n         // will still call addPackage even if we already fed the\n         // package via the callback but this is harmless and not\n         // expensive.\n+        @scala.annotation.tailrec\n         def go(r: Result[Unit]): Unit = r match {\n           case ResultDone(()) => ()\n           case ResultNeedPackage(pkgId, resume) =>\n             go(resume(darMap.get(pkgId)))\n           case _ => throw new RuntimeException(s\"Unexpected engine result $r\")\n         }\n+\n         go(compiledPackages.addPackage(pkgId, pkg))\n     }\n   }\n \n   private def getRunningTrigger(uuid: UUID): RunningTrigger = {\n-    triggers.get(uuid).get // TODO: Improve as might throw NoSuchElementException.\n+    triggers(uuid) // TODO: Improve as might throw NoSuchElementException.\n   }\n \n-  private def addRunningTrigger(t: RunningTrigger): Unit = {\n-    triggers = triggers + (t.triggerInstance -> t)\n-    triggersByToken = triggersByToken + (t.jwt -> (triggersByToken.getOrElse(t.jwt, Set()) + t.triggerInstance))\n+  private def addRunningTrigger(t: RunningTrigger): Either[String, Unit] = {\n+    triggerDao match {\n+      case None =>\n+        triggers = triggers + (t.triggerInstance -> t)\n+        triggersByToken = triggersByToken + (t.jwt -> (triggersByToken.getOrElse(t.jwt, Set()) + t.triggerInstance))\n+        Right(())\n+      case Some(dao) =>\n+        val insert = dao.transact(TriggerDao.addRunningTrigger(t))\n+        Try(insert.unsafeRunSync()) match {\n+          case Failure(err) => Left(err.toString)\n+          case Success(()) => Right(())\n+        }\n+    }\n   }\n \n   private def removeRunningTrigger(t: RunningTrigger): Unit = {\n     triggers = triggers - t.triggerInstance\n-    triggersByToken = triggersByToken + (t.jwt -> (triggersByToken\n-      .get(t.jwt)\n-      .get - t.triggerInstance))\n+    triggersByToken = triggersByToken + (t.jwt -> (triggersByToken(t.jwt) - t.triggerInstance))"
  },
  {
    "id" : "f9093123-c4bf-43fd-b746-7fb855356afb",
    "prId" : 6134,
    "comments" : [
      {
        "id" : "c9afd8d5-8315-4639-b617-33b0703ebc0d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The names here seem a bit confusing to me. The first identifies a running trigger. The second identifies the code of a trigger which can run 0-many times.",
        "createdAt" : "2020-05-28T04:33:50Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c3b60003-adf2-4989-946d-c9cf23b95642",
        "parentId" : "c9afd8d5-8315-4639-b617-33b0703ebc0d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I think I'm in agreement with this @rohanjr. Perhaps `triggerScriptIdent`?",
        "createdAt" : "2020-05-28T13:22:22Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "20df83fd-2152-47af-b429-ccb6506a92d1",
        "parentId" : "c9afd8d5-8315-4639-b617-33b0703ebc0d",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "How about `triggerSourceId` for the latter?",
        "createdAt" : "2020-05-28T15:18:13Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b4da8047-3b4f-4e7b-9f04-b0075dc6749d",
        "parentId" : "c9afd8d5-8315-4639-b617-33b0703ebc0d",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "The UUID would be more accurately named `runningTriggerId` but that might be unwieldy as it's used a lot.",
        "createdAt" : "2020-05-28T15:19:17Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "50957fd8-79ba-4010-bac1-7c79bc3e2ae8",
        "parentId" : "c9afd8d5-8315-4639-b617-33b0703ebc0d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe something like `triggerInstance` and `triggerName` to make it clear that one is the static name and the other is an instance of that?",
        "createdAt" : "2020-05-28T15:24:22Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e0206ac92946e702b287c50cac840706caa3d8e",
    "line" : null,
    "diffHunk" : "@@ -62,14 +59,21 @@ case class LedgerConfig(\n     commandTtl: Duration,\n )\n \n-class Server(dar: Option[Dar[(PackageId, Package)]]) {\n-  private var triggers: Map[UUID, TriggerRunnerWithToken] = Map.empty;\n+final case class RunningTrigger(\n+    triggerId: UUID,"
  },
  {
    "id" : "0397bcfc-bf54-4eb3-b461-c46b698d07c2",
    "prId" : 6134,
    "comments" : [
      {
        "id" : "53e72056-700c-4763-95df-6e19b5683254",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I think it's time to have a parameter pack here. The list of parameters just keeps growing. Maybe not in this PR but if it were to be it would be very much in keeping with the rest.",
        "createdAt" : "2020-05-28T13:28:14Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e0206ac92946e702b287c50cac840706caa3d8e",
    "line" : 123,
    "diffHunk" : "@@ -152,8 +144,9 @@ object Server {\n       maxFailureNumberOfRetries: Int,\n       failureRetryTimeRange: Duration,\n       dar: Option[Dar[(PackageId, Package)]],\n+      jdbcConfig: Option[JdbcConfig],"
  },
  {
    "id" : "ab2e0cd8-f4c0-4932-820d-bc17ca410611",
    "prId" : 6134,
    "comments" : [
      {
        "id" : "4a7b3514-8085-442d-be4e-61ecb0c0c956",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "There's quite a lot of options going in here now. There are roughly 3 or 4 parameter groups. It would be nice in the fullness of time to have a little more structure.",
        "createdAt" : "2020-05-28T13:29:58Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e0206ac92946e702b287c50cac840706caa3d8e",
    "line" : 148,
    "diffHunk" : "@@ -174,36 +167,37 @@ object Server {\n       val jwt: Jwt = token._1\n       val jwtPayload: JwtPayload = token._2\n       val party: Party = Party(jwtPayload.party);\n-      val uuid = UUID.randomUUID\n-      val ident = uuid.toString\n+      val triggerId = UUID.randomUUID\n       val ref = ctx.spawn(\n         TriggerRunner(\n           new TriggerRunner.Config("
  },
  {
    "id" : "eed07c72-8180-4122-8c05-7717fb5a069e",
    "prId" : 6134,
    "comments" : [
      {
        "id" : "bedc0c5b-5c83-4790-a8ce-d68ca8317756",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I think this is the trigger script identifier? If we change the name of `triggerOrigId` it would be nice to change this to be consistent (or even if we don't).",
        "createdAt" : "2020-05-28T13:32:53Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e0206ac92946e702b287c50cac840706caa3d8e",
    "line" : null,
    "diffHunk" : "@@ -243,7 +237,7 @@ object Server {\n                                 ctx,\n                                 token,\n                                 trigger,\n-                                params,\n+                                params.identifier,"
  },
  {
    "id" : "785b09fc-f3d1-4436-ac40-1dbbc5baba39",
    "prId" : 6134,
    "comments" : [
      {
        "id" : "9e87210f-2add-4e92-88ee-c4681ed13087",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "As mentioned above, a parameter pack here would be tidy.",
        "createdAt" : "2020-05-28T13:34:12Z",
        "updatedAt" : "2020-05-28T17:27:58Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e0206ac92946e702b287c50cac840706caa3d8e",
    "line" : 309,
    "diffHunk" : "@@ -501,7 +496,9 @@ object ServiceMain {\n               config.maxInboundMessageSize,\n               config.maxFailureNumberOfRetries,\n               config.failureRetryTimeRange,\n-              dar),\n+              dar,\n+              config.jdbcConfig"
  },
  {
    "id" : "dca3c1dd-a0b9-40cb-a641-a36052c4db9c",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "3eaebce9-cc35-4da8-b378-50e997e021fe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "looks like this didn’t change in this PR but do we really need global mutable state here? why not make this a class and have the state be local to the class?",
        "createdAt" : "2020-05-22T16:09:58Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8d6a02bf-3ec1-4ebf-84ce-7ebc16f97164",
        "parentId" : "3eaebce9-cc35-4da8-b378-50e997e021fe",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "The object level state has been removed. Have moved the state back into `apply` in the interim. Will follow up on bundling it into a class.",
        "createdAt" : "2020-05-22T18:11:07Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -64,12 +64,49 @@ case class LedgerConfig(\n object Server {\n \n   sealed trait Message\n-  private final case class StartFailed(cause: Throwable) extends Message\n-  private final case class Started(binding: ServerBinding) extends Message\n+\n   final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n   final case object Stop extends Message\n \n-  private def addDar(compiledPackages: MutableCompiledPackages, dar: Dar[(PackageId, Package)]) = {\n+  private final case class StartFailed(cause: Throwable) extends Message\n+  private final case class Started(binding: ServerBinding) extends Message\n+\n+  final case class TriggerStarting(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message])\n+      extends Message\n+  final case class TriggerStarted(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message])\n+      extends Message\n+  final case class TriggerInitializationFailure(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message],\n+      cause: String\n+  ) extends Message\n+  final case class TriggerRuntimeFailure(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message],\n+      cause: String\n+  ) extends Message\n+\n+  case class TriggerRunnerWithToken(\n+      ref: ActorRef[TriggerRunner.Message],\n+      token: Jwt\n+  )\n+\n+  // The server is some kind of \"singleton\". We need this state at\n+  // this scope in that we may bind it into the following closures. We\n+  // reinitialize this state, each time we go through 'apply'.\n+  private var triggers: Map[UUID, TriggerRunnerWithToken] = Map.empty;"
  },
  {
    "id" : "fda01186-a255-432c-9303-00fe64fa8eef",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "f03162e2-d975-49a7-8f06-e31c7a066b1e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "this seems super shady and reinforces my point that this should be a class. Contrary to my point above this does actually seem to get worse in this PR.",
        "createdAt" : "2020-05-22T16:11:23Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d481d28b-15b3-44b6-8027-9846ad4c9e7f",
        "parentId" : "f03162e2-d975-49a7-8f06-e31c7a066b1e",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Fixed \"enough\" for the moment, see previous conversation.",
        "createdAt" : "2020-05-22T18:12:40Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -157,14 +185,18 @@ object Server {\n       maxInboundMessageSize: Int,\n       dar: Option[Dar[(PackageId, Package)]],\n   ): Behavior[Message] = Behaviors.setup { ctx =>\n+    // Init maps.\n+    triggers = Map.empty"
  },
  {
    "id" : "14c261c1-4728-4284-bc65-6c4dda1d0460",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "83a7da2b-b505-41a1-b523-f05218763e67",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do you have a plan for how to do better than this?",
        "createdAt" : "2020-05-25T14:23:03Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6b13e3ce-9ef1-4dec-ab6e-c5c9da97e369",
        "parentId" : "83a7da2b-b505-41a1-b523-f05218763e67",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "As a matter of a fact I think I do. My idea is that if presented with a token that doesn't match the start token, if the old and new token agree in party, the old token has expired and (in the absence of a better API) we can use the new token to get an ACS (or establish the conditions that starting a trigger would entail), we might conclude we are indeed looking at a valid stop. ",
        "createdAt" : "2020-05-25T14:41:45Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5d78b41b-635d-4a13-9c1f-98245ae3366f",
        "parentId" : "83a7da2b-b505-41a1-b523-f05218763e67",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "This idea has the nice property that it does not require the user presenting a token that has expired. Anyway, what do you think of that?",
        "createdAt" : "2020-05-25T14:45:34Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 205,
    "diffHunk" : "@@ -87,84 +89,124 @@ object Server {\n     }\n   }\n \n-  case class TriggerRunnerWithToken(\n-      ref: ActorRef[TriggerRunner.Message],\n-      token: Jwt,\n-  )\n-\n-  private var triggers: Map[UUID, TriggerRunnerWithToken] = Map.empty\n-  private var triggersByToken: Map[Jwt, Set[UUID]] = Map.empty\n-  private val compiledPackages: MutableCompiledPackages = ConcurrentCompiledPackages()\n+  def actorWithToken(uuid: UUID) = {\n+    triggers.get(uuid).get // TODO: Improve as might throw NoSuchElementException.\n+  }\n \n-  private def startTrigger(\n-      ctx: ActorContext[Server.Message],\n-      token: (Jwt, JwtPayload),\n-      trigger: Trigger,\n-      params: StartParams,\n-      ledgerConfig: LedgerConfig,\n-      maxInboundMessageSize: Int)(\n-      implicit esf: ExecutionSequencerFactory,\n-      mat: Materializer): JsValue = {\n-    val jwt: Jwt = token._1\n-    val jwtPayload: JwtPayload = token._2\n-    val party: Party = Party(jwtPayload.party);\n-    val uuid = UUID.randomUUID\n-    val ident = uuid.toString\n-    val ref = ctx.spawn(\n-      TriggerRunner(\n-        new TriggerRunner.Config(\n-          compiledPackages,\n-          trigger,\n-          ledgerConfig,\n-          maxInboundMessageSize,\n-          party),\n-        ident),\n-      ident + \"-monitor\")\n-    triggers = triggers + (uuid -> TriggerRunnerWithToken(ref, jwt))\n-    val newTriggerSet = triggersByToken.getOrElse(jwt, Set()) + uuid\n-    triggersByToken = triggersByToken + (jwt -> newTriggerSet)\n-    val triggerIdResult = JsObject((\"triggerId\", uuid.toString.toJson))\n-    triggerIdResult\n+  def addRunningTrigger(uuid: UUID, jwt: Jwt, runner: ActorRef[TriggerRunner.Message]) = {\n+    triggers = triggers + (uuid -> TriggerRunnerWithToken(runner, jwt))\n+    triggersByToken = triggersByToken + (jwt -> (triggersByToken.getOrElse(jwt, Set()) + uuid))\n   }\n \n-  private def stopTrigger(uuid: UUID, token: (Jwt, JwtPayload))(\n-      implicit esf: ExecutionSequencerFactory,\n-      mat: Materializer): JsValue = {\n-    //TODO(SF, 2020-05-20): Check that the provided token\n-    //is the same as the one used to start the trigger and\n-    //fail with 'Unauthorized' if not.\n-    val actorWithToken = triggers.get(uuid).get\n-    actorWithToken.ref ! TriggerRunner.Stop\n+  def removeRunningTrigger(uuid: UUID, jwt: Jwt, runner: ActorRef[TriggerRunner.Message]) = {\n     triggers = triggers - uuid\n-    val token = actorWithToken.token\n-    val newTriggerSet = triggersByToken.get(token).get - uuid\n-    triggersByToken = triggersByToken + (token -> newTriggerSet)\n-    val stoppedTriggerId = JsObject((\"triggerId\", uuid.toString.toJson))\n-    stoppedTriggerId\n+    triggersByToken = triggersByToken + (jwt -> (triggersByToken.get(jwt).get - uuid))\n   }\n \n-  private def listTriggers(token: (Jwt, JwtPayload))(\n-      implicit esf: ExecutionSequencerFactory,\n-      mat: Materializer): JsValue = {\n-    val jwt: Jwt = token._1\n-    val triggerList = triggersByToken.getOrElse(jwt, Set()).map(_.toString).toList\n-    JsObject((\"triggerIds\", triggerList.toJson))\n+  def listRunningTriggers(jwt: Jwt): List[String] = {\n+    triggersByToken.getOrElse(jwt, Set()).map(_.toString).toList\n   }\n+}\n+\n+object Server {\n+\n+  sealed trait Message\n+\n+  final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n+  final case object Stop extends Message\n+\n+  private final case class StartFailed(cause: Throwable) extends Message\n+  private final case class Started(binding: ServerBinding) extends Message\n+\n+  final case class TriggerStarting(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message])\n+      extends Message\n+  final case class TriggerStarted(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message])\n+      extends Message\n+  final case class TriggerInitializationFailure(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message],\n+      cause: String\n+  ) extends Message\n+  final case class TriggerRuntimeFailure(\n+      triggerId: UUID,\n+      jwt: Jwt,\n+      runner: ActorRef[TriggerRunner.Message],\n+      cause: String\n+  ) extends Message\n \n   def apply(\n       host: String,\n       port: Int,\n       ledgerConfig: LedgerConfig,\n       maxInboundMessageSize: Int,\n+      maxFailureNumberOfRetries: Int,\n+      failureRetryTimeRange: Duration,\n       dar: Option[Dar[(PackageId, Package)]],\n   ): Behavior[Message] = Behaviors.setup { ctx =>\n+    val server = new Server(dar)\n+\n     // http doesn't know about akka typed so provide untyped system\n     implicit val untypedSystem: akka.actor.ActorSystem = ctx.system.toClassic\n     implicit val materializer: Materializer = Materializer(untypedSystem)\n     implicit val esf: ExecutionSequencerFactory =\n       new AkkaExecutionSequencerPool(\"TriggerService\")(untypedSystem)\n \n-    dar.foreach(addDar(compiledPackages, _))\n+    def startTrigger(\n+        ctx: ActorContext[Server.Message],\n+        token: (Jwt, JwtPayload),\n+        trigger: Trigger,\n+        params: StartParams,\n+        ledgerConfig: LedgerConfig,\n+        maxInboundMessageSize: Int,\n+        maxFailureNumberOfRetries: Int,\n+        failureRetryTimeRange: Duration,\n+    ): JsValue = {\n+      val jwt: Jwt = token._1\n+      val jwtPayload: JwtPayload = token._2\n+      val party: Party = Party(jwtPayload.party);\n+      val uuid = UUID.randomUUID\n+      val ident = uuid.toString\n+      val ref = ctx.spawn(\n+        TriggerRunner(\n+          new TriggerRunner.Config(\n+            ctx.self,\n+            uuid,\n+            jwt,\n+            server.compiledPackages,\n+            trigger,\n+            ledgerConfig,\n+            maxInboundMessageSize,\n+            maxFailureNumberOfRetries,\n+            failureRetryTimeRange,\n+            party),\n+          ident\n+        ),\n+        ident + \"-monitor\"\n+      )\n+      JsObject((\"triggerId\", uuid.toString.toJson))\n+    }\n+\n+    def stopTrigger(uuid: UUID, token: (Jwt, JwtPayload)): JsValue = {\n+      //TODO(SF, 2020-05-20): At least check that the provided token\n+      //is the same as the one used to start the trigger and fail with\n+      //'Unauthorized' if not (expect we'll be able to do better than"
  },
  {
    "id" : "08f44aac-422c-4afa-b7f1-747deaeaf516",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "c8474ccd-0b05-42d5-a30a-80c326906889",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a timeout on the time between starting and started? If not, should there be one? (not in this PR)",
        "createdAt" : "2020-05-25T14:24:24Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6c09cab-6825-4f44-a607-0877e3348249",
        "parentId" : "c8474ccd-0b05-42d5-a30a-80c326906889",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "There currently isn't. Not a bad idea.",
        "createdAt" : "2020-05-25T14:42:38Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 267,
    "diffHunk" : "@@ -293,34 +338,63 @@ object Server {\n       },\n     )\n \n+    // The server binding is a future that on completion will be piped\n+    // to a message to this actor.\n     val serverBinding = Http().bindAndHandle(Route.handlerFlow(route), host, port)\n     ctx.pipeToSelf(serverBinding) {\n       case Success(binding) => Started(binding)\n       case Failure(ex) => StartFailed(ex)\n     }\n \n+    // The server running server.\n     def running(binding: ServerBinding): Behavior[Message] =\n       Behaviors\n         .receiveMessage[Message] {\n-          case StartFailed(_) => Behaviors.unhandled\n-          case Started(_) => Behaviors.unhandled\n+          case TriggerStarting(uuid, jwt, runner) =>"
  },
  {
    "id" : "46f71fd4-e6ab-4f2e-8f97-3448152cde54",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "bc7bfae9-9461-4c77-9c99-c24729eae0cf",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Is it necessary to make this (and other methods below) public? If they're only used in the companion object then I think `private` still works",
        "createdAt" : "2020-05-26T15:40:36Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -62,21 +62,23 @@ case class LedgerConfig(\n     commandTtl: Duration,\n )\n \n-object Server {\n+class Server(dar: Option[Dar[(PackageId, Package)]]) {\n+  private var triggers: Map[UUID, TriggerRunnerWithToken] = Map.empty;\n+  private var triggersByToken: Map[Jwt, Set[UUID]] = Map.empty;\n+  val compiledPackages: MutableCompiledPackages = ConcurrentCompiledPackages()\n+  dar.foreach(addDar(_))\n \n-  sealed trait Message\n-  private final case class StartFailed(cause: Throwable) extends Message\n-  private final case class Started(binding: ServerBinding) extends Message\n-  final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n-  final case object Stop extends Message\n+  case class TriggerRunnerWithToken(ref: ActorRef[TriggerRunner.Message], token: Jwt)\n \n-  private def addDar(compiledPackages: MutableCompiledPackages, dar: Dar[(PackageId, Package)]) = {\n+  def addDar(dar: Dar[(PackageId, Package)]) = {"
  },
  {
    "id" : "ba939c4b-c3e8-49e5-83fc-5bf80d74271b",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "bb6b547c-1735-44ea-b739-3ce9e766637a",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n    // The running server.\r\n```",
        "createdAt" : "2020-05-26T16:00:12Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 261,
    "diffHunk" : "@@ -293,34 +338,63 @@ object Server {\n       },\n     )\n \n+    // The server binding is a future that on completion will be piped\n+    // to a message to this actor.\n     val serverBinding = Http().bindAndHandle(Route.handlerFlow(route), host, port)\n     ctx.pipeToSelf(serverBinding) {\n       case Success(binding) => Started(binding)\n       case Failure(ex) => StartFailed(ex)\n     }\n \n+    // The server running server."
  },
  {
    "id" : "98367c07-fdcd-4d13-a63f-5cb7e8ee851b",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "9a0ab0eb-d746-415d-9002-a398f6f077cd",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n            // strategy will automatically restart the trigger up to\r\n```",
        "createdAt" : "2020-05-26T16:20:14Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -293,34 +338,63 @@ object Server {\n       },\n     )\n \n+    // The server binding is a future that on completion will be piped\n+    // to a message to this actor.\n     val serverBinding = Http().bindAndHandle(Route.handlerFlow(route), host, port)\n     ctx.pipeToSelf(serverBinding) {\n       case Success(binding) => Started(binding)\n       case Failure(ex) => StartFailed(ex)\n     }\n \n+    // The server running server.\n     def running(binding: ServerBinding): Behavior[Message] =\n       Behaviors\n         .receiveMessage[Message] {\n-          case StartFailed(_) => Behaviors.unhandled\n-          case Started(_) => Behaviors.unhandled\n+          case TriggerStarting(uuid, jwt, runner) =>\n+            // Nothing to do at this time.\n+            Behaviors.same\n+          case TriggerStarted(uuid, jwt, runner) =>\n+            // The trigger has successfully started. Update the\n+            // running triggers tables.\n+            server.addRunningTrigger(uuid, jwt, runner)\n+            Behaviors.same\n+          case TriggerInitializationFailure(uuid, jwt, runner, _) =>\n+            // The trigger has failed to start. Send the runner a stop\n+            // message. There's no point in it remaining alive since\n+            // its child actor is stopped and won't be restarted.\n+            runner ! TriggerRunner.Stop\n+            // No need to update the running triggers tables since\n+            // this trigger never made it there.\n+            Behaviors.same\n+          case TriggerRuntimeFailure(uuid, jwt, runner, _) =>\n+            // The trigger has failed. Remove it from the running\n+            // triggers tables.\n+            server.removeRunningTrigger(uuid, jwt, runner)\n+            // Don't send any messages to the runner. Its supervision\n+            // strategy will autmotically restart the trigger up to"
  },
  {
    "id" : "d49c6268-5d26-47c4-9fe5-24d9ada44dcd",
    "prId" : 6055,
    "comments" : [
      {
        "id" : "4e79c75e-45c8-4ccd-ba72-d61a73354d54",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think the abbreviation helps here.",
        "createdAt" : "2020-05-20T17:55:06Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b75e88eb-e968-4c76-87ed-a36631b8c24a",
        "parentId" : "4e79c75e-45c8-4ccd-ba72-d61a73354d54",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I could call this `Token` or `TokenManagement`. In the json-api, I think they use `EndpointsCompaion` for this code. Let's go with `TokenManagement` for now?",
        "createdAt" : "2020-05-20T18:12:34Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34d1295521392ecc8352dedf4c334bbf942ec958",
    "line" : 266,
    "diffHunk" : "@@ -332,3 +422,49 @@ object ServiceMain {\n     }\n   }\n }\n+\n+object TokenMgt {"
  },
  {
    "id" : "73e047bd-b937-4d4a-a612-97e4ee5d27cc",
    "prId" : 6055,
    "comments" : [
      {
        "id" : "ec397295-3332-42a7-92c2-62e847251fa2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You import this here but then you use `TokenMgt.*` most of the time. Can we just kill the import and use the object-qualified version everywhere?",
        "createdAt" : "2020-05-20T17:56:55Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e752f874-56f2-4af3-b9c4-657c8a5c7861",
        "parentId" : "ec397295-3332-42a7-92c2-62e847251fa2",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes. I mean in a refactoring - I'll get this done today - to move that code out into a dedicated module. I'll sort this at the same time.",
        "createdAt" : "2020-05-20T18:11:36Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34d1295521392ecc8352dedf4c334bbf942ec958",
    "line" : 56,
    "diffHunk" : "@@ -64,6 +79,8 @@ object Server {\n   final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n   final case object Stop extends Message\n \n+  import TokenMgt._"
  },
  {
    "id" : "1fcb8a0f-188c-46de-b699-88f8ce63324d",
    "prId" : 6055,
    "comments" : [
      {
        "id" : "d89a1bec-65d9-450d-8a65-c46c2742b958",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Note that the triggers per party will almost certainly not be correct since I can create the actor without having a valid token.",
        "createdAt" : "2020-05-20T17:57:34Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f6a9e3e0-438e-4a1a-a739-5a611b8525aa",
        "parentId" : "d89a1bec-65d9-450d-8a65-c46c2742b958",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Indeed. Fully agree that only successfully started triggers should get added to any running triggers table. Will work on it.",
        "createdAt" : "2020-05-20T18:10:56Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34d1295521392ecc8352dedf4c334bbf942ec958",
    "line" : 66,
    "diffHunk" : "@@ -86,6 +103,66 @@ object Server {\n       party: Party,\n   )\n \n+  private var triggers: Map[UUID, TriggerRunnerWithParty] = Map.empty\n+  private var triggersByParty: Map[Party, Set[UUID]] = Map.empty"
  },
  {
    "id" : "f9bbcd72-eb3f-4eaa-ba51-d2922848f1ea",
    "prId" : 6055,
    "comments" : [
      {
        "id" : "9a52a4f9-1e1c-481a-b591-98d0335c7e59",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This will also need to validate the token and by my comment above, you probably want to make sure that this only returns triggers that have been started with a valid token.",
        "createdAt" : "2020-05-20T17:59:34Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e477c443-4e0b-4de6-88ef-4f1b219263c1",
        "parentId" : "9a52a4f9-1e1c-481a-b591-98d0335c7e59",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes.",
        "createdAt" : "2020-05-20T18:10:27Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34d1295521392ecc8352dedf4c334bbf942ec958",
    "line" : 116,
    "diffHunk" : "@@ -86,6 +103,66 @@ object Server {\n       party: Party,\n   )\n \n+  private var triggers: Map[UUID, TriggerRunnerWithParty] = Map.empty\n+  private var triggersByParty: Map[Party, Set[UUID]] = Map.empty\n+  private val compiledPackages: MutableCompiledPackages = ConcurrentCompiledPackages()\n+\n+  private def startTrigger(\n+      ctx: ActorContext[Server.Message],\n+      token: (Jwt, JwtPayload),\n+      trigger: Trigger,\n+      params: StartParams,\n+      ledgerConfig: LedgerConfig,\n+      maxInboundMessageSize: Int)(\n+      implicit esf: ExecutionSequencerFactory,\n+      mat: Materializer): JsValue = {\n+    val jwt: Jwt = token._1\n+    val jwtPayload: JwtPayload = token._2\n+    val party: Party = Party(jwtPayload.party);\n+    val uuid = UUID.randomUUID\n+    val ident = uuid.toString\n+    val ref = ctx.spawn(\n+      TriggerRunner(\n+        new TriggerRunner.Config(\n+          compiledPackages,\n+          trigger,\n+          ledgerConfig,\n+          maxInboundMessageSize,\n+          party),\n+        ident),\n+      ident + \"-monitor\")\n+    triggers = triggers + (uuid -> TriggerRunnerWithParty(ref, party))\n+    val newTriggerSet = triggersByParty.getOrElse(party, Set()) + uuid\n+    triggersByParty = triggersByParty + (party -> newTriggerSet)\n+    val triggerIdResult = JsObject((\"triggerId\", uuid.toString.toJson))\n+    triggerIdResult\n+  }\n+\n+  private def stopTrigger(uuid: UUID, token: (Jwt, JwtPayload))(\n+      implicit esf: ExecutionSequencerFactory,\n+      mat: Materializer): JsValue = {\n+    //TODO(SF, 2020-05-20): Check that the provided token\n+    //is the same as the one used to start the trigger and\n+    //fail with 'Unauthorized' if not.\n+    val actorWithParty = triggers.get(uuid).get\n+    actorWithParty.ref ! TriggerRunner.Stop\n+    triggers = triggers - uuid\n+    val party = actorWithParty.party\n+    val newTriggerSet = triggersByParty.get(party).get - uuid\n+    triggersByParty = triggersByParty + (party -> newTriggerSet)\n+    val stoppedTriggerId = JsObject((\"triggerId\", uuid.toString.toJson))\n+    stoppedTriggerId\n+  }\n+\n+  private def listTriggers(token: (Jwt, JwtPayload))("
  },
  {
    "id" : "43b640da-6bd3-4cc6-a07b-795e6e5a3624",
    "prId" : 6055,
    "comments" : [
      {
        "id" : "39ed3c71-4f8e-4d44-941c-7331cc66d9de",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The order here seems odd, I would expect that you first check the token and then the trigger parameter instead of the other way around.",
        "createdAt" : "2020-05-20T18:04:47Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "30361d5a-c580-4e3b-95ea-c14feee2f6be",
        "parentId" : "39ed3c71-4f8e-4d44-941c-7331cc66d9de",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Got you. I'll reorder it.",
        "createdAt" : "2020-05-20T18:08:43Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "34d1295521392ecc8352dedf4c334bbf942ec958",
    "line" : null,
    "diffHunk" : "@@ -116,30 +188,35 @@ object Server {\n           // should be running as.  Returns a UUID for the newly\n           // started trigger.\n           path(\"v1\" / \"start\") {\n-            entity(as[StartParams]) {\n-              params =>\n-                Trigger.fromIdentifier(compiledPackages, params.identifier) match {\n-                  case Left(err) =>\n-                    complete(errorResponse(StatusCodes.UnprocessableEntity, err))\n-                  case Right(trigger) =>\n-                    val party = params.party\n-                    val uuid = UUID.randomUUID\n-                    val ident = uuid.toString\n-                    val ref = ctx.spawn(\n-                      TriggerRunner(\n-                        new TriggerRunner.Config(\n-                          compiledPackages,\n-                          trigger,\n-                          ledgerConfig,\n-                          maxInboundMessageSize,\n-                          party),\n-                        ident),\n-                      ident + \"-monitor\")\n-                    triggers = triggers + (uuid -> TriggerRunnerWithParty(ref, party))\n-                    val newTriggerSet = triggersByParty.getOrElse(party, Set()) + uuid\n-                    triggersByParty = triggersByParty + (party -> newTriggerSet)\n-                    val triggerIdResult = JsObject((\"triggerId\", uuid.toString.toJson))\n-                    complete(successResponse(triggerIdResult))\n+            extractRequest {\n+              request =>\n+                entity(as[StartParams]) {\n+                  params =>\n+                    Trigger.fromIdentifier(compiledPackages, params.identifier) match {"
  },
  {
    "id" : "6f424155-bb61-485f-b181-14324efdabec",
    "prId" : 5970,
    "comments" : [
      {
        "id" : "7837d4b8-0415-408d-9d92-2a787740f900",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we factor this out instead of duplicating it everywhere?",
        "createdAt" : "2020-05-13T18:33:42Z",
        "updatedAt" : "2020-05-13T18:33:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "76c10db0-6c5b-4ddf-b035-8a7a77b21e9f",
        "parentId" : "7837d4b8-0415-408d-9d92-2a787740f900",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I've done something in that direction. Have to say, a completely unreasonable amount of time was spent on working out something so simple 😢 ",
        "createdAt" : "2020-05-13T19:59:30Z",
        "updatedAt" : "2020-05-13T19:59:31Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "db7bee544f8aeaf1fc188dafc0daf000afe5166f",
    "line" : 5,
    "diffHunk" : "@@ -114,7 +114,7 @@ object Server {\n           // Start a new trigger given its identifier and the party it\n           // should be running as.  Returns a UUID for the newly\n           // started trigger.\n-          path(\"start\") {\n+          path(\"v1\" / \"start\") {"
  },
  {
    "id" : "972e2fc6-758e-4927-838b-a93296f359b2",
    "prId" : 5951,
    "comments" : [
      {
        "id" : "74c4df75-d707-4d17-b8ab-5507d05c6d74",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "How about giving this a more sensible name. E.g. `/healthz` is a pretty common name for health check endpoints and lots of tooling defaults to it.",
        "createdAt" : "2020-05-12T19:38:45Z",
        "updatedAt" : "2020-05-12T21:06:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "913aadd0-53dc-4e98-9c3c-c13bf68e001c",
        "parentId" : "74c4df75-d707-4d17-b8ab-5507d05c6d74",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I didn't know that :)\r\n",
        "createdAt" : "2020-05-12T19:39:10Z",
        "updatedAt" : "2020-05-12T21:06:05Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3af75973-a459-4a2d-aa43-0ebfaf70c1e3",
        "parentId" : "74c4df75-d707-4d17-b8ab-5507d05c6d74",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "One example https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/ but if you search for it you can find lots of other examples from prometheus and whatnot.",
        "createdAt" : "2020-05-12T19:40:25Z",
        "updatedAt" : "2020-05-12T21:06:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "604eb9f6-841a-4dc3-a3f5-65be972dad2f",
        "parentId" : "74c4df75-d707-4d17-b8ab-5507d05c6d74",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Quick Google suggests `health`. That's what you meant right?",
        "createdAt" : "2020-05-12T19:40:42Z",
        "updatedAt" : "2020-05-12T21:06:05Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f13ef68a-592f-4557-9150-a128aa2a78c8",
        "parentId" : "74c4df75-d707-4d17-b8ab-5507d05c6d74",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I did mean `healthz` see the link but `health` works as well. Not sure what is more common in general.",
        "createdAt" : "2020-05-12T19:42:18Z",
        "updatedAt" : "2020-05-12T21:06:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "88440beeca4e2e8e9bb47a6356a58b006670b0f3",
    "line" : null,
    "diffHunk" : "@@ -168,18 +168,24 @@ object Server {\n           }\n         )\n       },\n-      // List triggers currently running for the given party\n       get {\n-        path(\"list\") {\n-          entity(as[ListParams]) { params =>\n-            {\n-              val triggerList =\n-                triggersByParty.getOrElse(params.party, Set()).map(_.toString).toList\n-              val result = JsObject((\"triggerIds\", triggerList.toJson))\n-              complete(successResponse(result))\n+        // Convenience endpoint for tests"
  },
  {
    "id" : "b8723899-a318-4710-b775-5d51c096d7db",
    "prId" : 5951,
    "comments" : [
      {
        "id" : "3cb7dac1-553c-4051-ad3f-500256d4c70d",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Sorry I just saw this, but this response format is not quite right. The `\"status\"` field is supposed to mirror the status code, and there should be a `\"result\"` field with whatever successful response body you want, i.e. `{\"status\": 200, \"result\": value}`. I suggest using the `successResponse` helper function as in the `list` command, where you pass in the JSON `value` you want (could be the string \"pass\" in this case).",
        "createdAt" : "2020-05-13T16:40:14Z",
        "updatedAt" : "2020-05-13T16:40:14Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c15ad396-400d-4bc9-ad5c-0bdf68845dbc",
        "parentId" : "3cb7dac1-553c-4051-ad3f-500256d4c70d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "> Sorry I just saw this, but this response format is not quite right. The `\"status\"` field is supposed to mirror the status code, and there should be a `\"result\"` field with whatever successful response body you want, i.e. `{\"status\": 200, \"result\": value}`. I suggest using the `successResponse` helper function as in the `list` command, where you pass in the JSON `value` you want (could be the string \"pass\" in this case).\r\n\r\nThis case intentionally breaks with our internal conventions in order to conform to the referenced RFC (internet standard proposal).",
        "createdAt" : "2020-05-13T16:43:35Z",
        "updatedAt" : "2020-05-13T16:43:35Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "88440beeca4e2e8e9bb47a6356a58b006670b0f3",
    "line" : 17,
    "diffHunk" : "@@ -168,18 +168,25 @@ object Server {\n           }\n         )\n       },\n-      // List triggers currently running for the given party\n       get {\n-        path(\"list\") {\n-          entity(as[ListParams]) { params =>\n-            {\n-              val triggerList =\n-                triggersByParty.getOrElse(params.party, Set()).map(_.toString).toList\n-              val result = JsObject((\"triggerIds\", triggerList.toJson))\n-              complete(successResponse(result))\n+        // Convenience endpoint for tests (roughly follow\n+        // https://tools.ietf.org/id/draft-inadarei-api-health-check-01.html).\n+        concat(\n+          path(\"health\") {\n+            complete((StatusCodes.OK, JsObject((\"status\", \"pass\".toJson))))"
  },
  {
    "id" : "c13dfdf1-4e1b-4875-ab01-3993e240bb61",
    "prId" : 5936,
    "comments" : [
      {
        "id" : "83f0ea5d-92ee-47ef-863d-ed414acce8f7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I find this more confusing than helpful. Just bind to `_` to silence the warning where you use it.",
        "createdAt" : "2020-05-12T06:27:51Z",
        "updatedAt" : "2020-05-12T12:02:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d30a2bb-b593-429e-8d5e-79433ca52cb5",
        "parentId" : "83f0ea5d-92ee-47ef-863d-ed414acce8f7",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes, ok.",
        "createdAt" : "2020-05-12T10:25:54Z",
        "updatedAt" : "2020-05-12T12:02:33Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8df94425b5f024f4bd6ed1a6799187568dcbc976",
    "line" : null,
    "diffHunk" : "@@ -295,8 +294,33 @@ object ServiceMain {\n           )\n         val system: ActorSystem[Server.Message] =\n           ActorSystem(Server(\"localhost\", 8080, ledgerConfig, dar), \"TriggerService\")\n-        StdIn.readLine()\n-        system ! Server.Stop\n+        // timeout chosen at random, change freely if you see issues\n+        implicit val timeout: Timeout = 15.seconds\n+        implicit val scheduler: Scheduler = system.scheduler\n+        implicit val ec: ExecutionContext = system.executionContext\n+\n+        // Shutdown gracefully on SIGINT.\n+        val serviceF: Future[ServerBinding] =\n+          system.ask((ref: ActorRef[ServerBinding]) => Server.GetServerBinding(ref))\n+        Statement.discard {\n+          sys.addShutdownHook {\n+            system ! Server.Stop\n+            serviceF.onComplete {\n+              case Success(_) =>\n+                system.log.info(\"Server is offline, the system will now terminate\")\n+              case Failure(ex) =>\n+                system.log.info(\"Failure encountered shutting down the server: \" + ex.toString)\n+            }\n+            Statement.discard { Await.ready(serviceF, 5.seconds) }\n+          }\n+        }\n     }\n   }\n }\n+\n+object Statement {"
  },
  {
    "id" : "6d057f21-078e-499f-bc32-10053003e713",
    "prId" : 5936,
    "comments" : [
      {
        "id" : "352b4430-7951-48bf-8742-46b8f1d17f4d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Where do you use the timeout? Should it be used here?",
        "createdAt" : "2020-05-12T06:29:12Z",
        "updatedAt" : "2020-05-12T12:02:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f89e74d5-0e1f-4c81-9a3e-26e8f2303c18",
        "parentId" : "352b4430-7951-48bf-8742-46b8f1d17f4d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "The existence of the `ready` is a little hack to keep the system alive long enough for the shutdown info messages to make it to the log. The completion result  isn't intended to be used.",
        "createdAt" : "2020-05-12T10:30:32Z",
        "updatedAt" : "2020-05-12T12:02:33Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8df94425b5f024f4bd6ed1a6799187568dcbc976",
    "line" : null,
    "diffHunk" : "@@ -295,8 +294,33 @@ object ServiceMain {\n           )\n         val system: ActorSystem[Server.Message] =\n           ActorSystem(Server(\"localhost\", 8080, ledgerConfig, dar), \"TriggerService\")\n-        StdIn.readLine()\n-        system ! Server.Stop\n+        // timeout chosen at random, change freely if you see issues\n+        implicit val timeout: Timeout = 15.seconds\n+        implicit val scheduler: Scheduler = system.scheduler\n+        implicit val ec: ExecutionContext = system.executionContext\n+\n+        // Shutdown gracefully on SIGINT.\n+        val serviceF: Future[ServerBinding] =\n+          system.ask((ref: ActorRef[ServerBinding]) => Server.GetServerBinding(ref))\n+        Statement.discard {\n+          sys.addShutdownHook {\n+            system ! Server.Stop\n+            serviceF.onComplete {\n+              case Success(_) =>\n+                system.log.info(\"Server is offline, the system will now terminate\")\n+              case Failure(ex) =>\n+                system.log.info(\"Failure encountered shutting down the server: \" + ex.toString)\n+            }\n+            Statement.discard { Await.ready(serviceF, 5.seconds) }"
  },
  {
    "id" : "a44f2b00-7501-4635-8a30-af99f6f83aa5",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "5e431d13-46ac-40c0-8ba5-884e7eecff87",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I think you don't need `new` here because it's a case class, but I don't think it matters either.",
        "createdAt" : "2020-05-08T18:57:32Z",
        "updatedAt" : "2020-05-08T19:08:40Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "58c5ab53-767c-4237-b0ce-797d3365e887",
        "parentId" : "5e431d13-46ac-40c0-8ba5-884e7eecff87",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I found in practice that you do. If you don't put a `new` on it the compiler goes looking for a *value* in `object TriggerRunner` called `Config`.",
        "createdAt" : "2020-05-08T19:17:04Z",
        "updatedAt" : "2020-05-08T19:17:04Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2901fc7b-a6c3-424a-a00d-9a92be7bf0d6",
        "parentId" : "5e431d13-46ac-40c0-8ba5-884e7eecff87",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "ah, ok thanks",
        "createdAt" : "2020-05-08T19:24:46Z",
        "updatedAt" : "2020-05-08T19:24:46Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 211,
    "diffHunk" : "@@ -238,12 +123,13 @@ object Server {\n                   case Right(trigger) =>\n                     val party = params.party\n                     val uuid = UUID.randomUUID\n+                    val ident = uuid.toString\n                     val ref = ctx.spawn(\n-                      TriggerActor(\n-                        TriggerActor.Config(compiledPackages, trigger, ledgerConfig, party)),\n-                      uuid.toString,\n-                    )\n-                    triggers = triggers + (uuid -> TriggerActorWithParty(ref, party))\n+                      TriggerRunner(\n+                        new TriggerRunner.Config(compiledPackages, trigger, ledgerConfig, party),"
  },
  {
    "id" : "f5f6c222-3e0f-4cad-960a-b91aab93b06c",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "e5b8bb21-23c3-4930-a2c4-4d31799bb721",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Maybe something like `triggerId` would be more descriptive here?",
        "createdAt" : "2020-05-08T18:58:04Z",
        "updatedAt" : "2020-05-08T19:08:40Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 203,
    "diffHunk" : "@@ -238,12 +123,13 @@ object Server {\n                   case Right(trigger) =>\n                     val party = params.party\n                     val uuid = UUID.randomUUID\n+                    val ident = uuid.toString"
  },
  {
    "id" : "e49f0400-a3f5-4343-8853-30f73673e141",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "de70fa0e-ede4-4bb1-ac12-a2d1df79ae7e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This makes less sense to me than before? it’s not just the runner. It’s a reference to an actor for the runner. Either way, please separate refactorings from the actual change.",
        "createdAt" : "2020-05-11T07:14:11Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ec17462-5909-4104-bc1d-a352b9cff6ef",
        "parentId" : "de70fa0e-ede4-4bb1-ac12-a2d1df79ae7e",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "The reference it contains is now a `TriggerRunner`.",
        "createdAt" : "2020-05-11T12:48:22Z",
        "updatedAt" : "2020-05-11T12:48:23Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 166,
    "diffHunk" : "@@ -197,8 +81,8 @@ object Server {\n     }\n   }\n \n-  case class TriggerActorWithParty(\n-      ref: ActorRef[TriggerActor.Message],\n+  case class TriggerRunnerWithParty("
  },
  {
    "id" : "373d11df-4213-45de-aa79-4ff982369ab9",
    "prId" : 5829,
    "comments" : [
      {
        "id" : "2ae3ec33-5945-4f05-8c12-c25313309863",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This should probably be changed at some point to a more structured response instead of a simple string but let’s leave it for this PR.",
        "createdAt" : "2020-05-05T08:13:33Z",
        "updatedAt" : "2020-05-05T08:13:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "640d657d-b2ad-40e4-8552-ede80d297040",
        "parentId" : "2ae3ec33-5945-4f05-8c12-c25313309863",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Maybe a simple object `{\"mainPackageId\": ...}` within the `results` field would suffice?",
        "createdAt" : "2020-05-05T15:33:08Z",
        "updatedAt" : "2020-05-05T15:33:08Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51ec255dc5d871ada52ec3bdd29d9a6308db6c8c",
    "line" : 49,
    "diffHunk" : "@@ -260,16 +260,19 @@ object Server {\n                     val inputStream = new ByteArrayInputStream(byteString.toArray)\n                     DarReader()\n                       .readArchive(\"package-upload\", new ZipInputStream(inputStream)) match {\n-                      case Failure(err) => complete((StatusCodes.UnprocessableEntity, err))\n+                      case Failure(err) =>\n+                        complete(errorResponse(StatusCodes.UnprocessableEntity, err.toString))\n                       case Success(encodedDar) =>\n                         try {\n                           val dar = encodedDar.map {\n                             case (pkgId, payload) => Decode.readArchivePayload(pkgId, payload)\n                           }\n                           addDar(compiledPackages, dar)\n-                          complete(s\"DAR uploaded, main package id: ${dar.main._1}\")\n+                          complete(\n+                            successResponse(s\"DAR uploaded, main package id: ${dar.main._1}\"))"
  },
  {
    "id" : "1bdb060d-173e-4c72-a851-bb61f543c091",
    "prId" : 5801,
    "comments" : [
      {
        "id" : "16ada353-f8ba-4048-b5d0-cd069090e195",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Is this TODO what you are fixing?",
        "createdAt" : "2020-04-30T15:49:43Z",
        "updatedAt" : "2020-04-30T22:00:22Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "32f5f74c-8340-4a2a-bf2d-95cd70b3560d",
        "parentId" : "16ada353-f8ba-4048-b5d0-cd069090e195",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "No, the TODO that was on line 100.",
        "createdAt" : "2020-04-30T15:56:25Z",
        "updatedAt" : "2020-04-30T22:00:22Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "40f0b412a23fe18a8d6029bc0d2603827c68d585",
    "line" : null,
    "diffHunk" : "@@ -96,24 +96,33 @@ object TriggerActor {\n         sslContext = None,\n       )\n \n-      // Waiting for the ACS query to finish so we can build the initial state.\n-      // TODO We should handle being stopped while querying the ACS.\n-      def queryingACS() = Behaviors.receiveMessagePartial[Message] {\n-        case QueryACSFailed(cause) => throw new RuntimeException(\"ACS query failed\", cause)\n-        case QueriedACS(runner, acs, offset) =>\n-          val (killSwitch, trigger) = runner.runWithACS(\n-            acs,\n-            offset,\n-            msgFlow = KillSwitches.single[TriggerMsg],\n-          )\n-          // TODO If we are stopped we will end up causing the future to complete which will trigger\n-          // a message that is sent to a now terminated actor. We should fix this somehow™.\n-          context.pipeToSelf(trigger) {\n-            case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n-            case Failure(cause) => Failed(cause)\n-          }\n-          running(killSwitch)\n-      }\n+      // Waiting for the ACS query to finish so we can build the\n+      // initial state.\n+      def queryingACS(wasStopped: Boolean): Behaviors.Receive[Message] =\n+        Behaviors.receiveMessagePartial[Message] {\n+          case QueryACSFailed(cause) => throw new RuntimeException(\"ACS query failed\", cause)\n+          case QueriedACS(runner, acs, offset) =>\n+            val (killSwitch, trigger) = runner.runWithACS(\n+              acs,\n+              offset,\n+              msgFlow = KillSwitches.single[TriggerMsg],\n+            )\n+            // TODO If we are stopped we will end up causing the future to complete which will trigger\n+            // a message that is sent to a now terminated actor. We should fix this somehow™."
  },
  {
    "id" : "caca8443-51fe-4284-9f70-4fe21ac21108",
    "prId" : 5801,
    "comments" : [
      {
        "id" : "529666c5-3268-4a0a-a1fb-65a8b49ad639",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesn’t look right to me. If we got stopped we don’t want to spawn the trigger here only to then tear it down once we receive the stop message. This should just not start in the first place.",
        "createdAt" : "2020-04-30T16:25:57Z",
        "updatedAt" : "2020-04-30T22:00:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0b68fa26-8990-4233-b9c5-c6ceb4846fdd",
        "parentId" : "529666c5-3268-4a0a-a1fb-65a8b49ad639",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok. I see what you mean. I'll adjust it accordingly. Thanks!",
        "createdAt" : "2020-04-30T16:50:13Z",
        "updatedAt" : "2020-04-30T22:00:22Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "40f0b412a23fe18a8d6029bc0d2603827c68d585",
    "line" : null,
    "diffHunk" : "@@ -96,24 +96,33 @@ object TriggerActor {\n         sslContext = None,\n       )\n \n-      // Waiting for the ACS query to finish so we can build the initial state.\n-      // TODO We should handle being stopped while querying the ACS.\n-      def queryingACS() = Behaviors.receiveMessagePartial[Message] {\n-        case QueryACSFailed(cause) => throw new RuntimeException(\"ACS query failed\", cause)\n-        case QueriedACS(runner, acs, offset) =>\n-          val (killSwitch, trigger) = runner.runWithACS(\n-            acs,\n-            offset,\n-            msgFlow = KillSwitches.single[TriggerMsg],\n-          )\n-          // TODO If we are stopped we will end up causing the future to complete which will trigger\n-          // a message that is sent to a now terminated actor. We should fix this somehow™.\n-          context.pipeToSelf(trigger) {\n-            case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n-            case Failure(cause) => Failed(cause)\n-          }\n-          running(killSwitch)\n-      }\n+      // Waiting for the ACS query to finish so we can build the\n+      // initial state.\n+      def queryingACS(wasStopped: Boolean): Behaviors.Receive[Message] =\n+        Behaviors.receiveMessagePartial[Message] {\n+          case QueryACSFailed(cause) => throw new RuntimeException(\"ACS query failed\", cause)\n+          case QueriedACS(runner, acs, offset) =>\n+            val (killSwitch, trigger) = runner.runWithACS("
  },
  {
    "id" : "e32104be-4492-42dd-a8a5-43df494a1d4f",
    "prId" : 5770,
    "comments" : [
      {
        "id" : "9ded592e-328d-477f-ae84-d523dab7577f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This should really return JSON not some random string format (which holds for all endpoints but the other ones mostly don’t return meaningful information anyway or just have a single string like `start`)",
        "createdAt" : "2020-04-28T20:04:48Z",
        "updatedAt" : "2020-04-28T23:47:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ac1a881-c38a-4d67-8988-ef55601721d2",
        "parentId" : "9ded592e-328d-477f-ae84-d523dab7577f",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Agreed",
        "createdAt" : "2020-04-28T20:32:10Z",
        "updatedAt" : "2020-04-28T23:47:43Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "20c4200f-ab39-463d-b700-13bb0cb95def",
        "parentId" : "9ded592e-328d-477f-ae84-d523dab7577f",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Now returns a JSON list with the trigger ids. Assuming it doesn't need more structure than that",
        "createdAt" : "2020-04-28T20:57:27Z",
        "updatedAt" : "2020-04-28T23:47:43Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b141236e74168079b83c0ed40b234a5f7119dcb",
    "line" : null,
    "diffHunk" : "@@ -276,6 +276,13 @@ object Server {\n           }\n         )\n       },\n+      // List all running triggers\n+      get {\n+        path(\"list\") {\n+          val allTriggers = triggers.keys.mkString(\",\")\n+          complete(s\"Triggers currently running: $allTriggers\")"
  },
  {
    "id" : "c30aaa97-d4b6-4be3-a0e6-b24ad9a56b2f",
    "prId" : 5770,
    "comments" : [
      {
        "id" : "608af602-9575-44b8-be95-dc89705d56ef",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Something like `RunningTrigger` might be a better name. I wouldn’t be surprised if you end up adding more metadata here.",
        "createdAt" : "2020-04-29T18:21:42Z",
        "updatedAt" : "2020-04-29T18:24:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b141236e74168079b83c0ed40b234a5f7119dcb",
    "line" : 14,
    "diffHunk" : "@@ -204,6 +207,11 @@ object Server {\n     }\n   }\n \n+  case class TriggerActorWithParty("
  },
  {
    "id" : "044f0c25-6a11-4e05-b8a9-f0bbd1dcd386",
    "prId" : 5770,
    "comments" : [
      {
        "id" : "8663e925-b777-4da4-a34c-5e972a91a448",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "There is a `Party` newtype in `com.daml.ledger.api.refinements`",
        "createdAt" : "2020-04-29T18:22:39Z",
        "updatedAt" : "2020-04-29T18:24:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8a60c966-3863-4fe5-a0a5-7ccdfc457b0a",
        "parentId" : "8663e925-b777-4da4-a34c-5e972a91a448",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Thanks, will look into it in a follow on PR",
        "createdAt" : "2020-04-29T18:43:52Z",
        "updatedAt" : "2020-04-29T18:43:52Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b141236e74168079b83c0ed40b234a5f7119dcb",
    "line" : 28,
    "diffHunk" : "@@ -216,7 +224,9 @@ object Server {\n     implicit val esf: ExecutionSequencerFactory =\n       new AkkaExecutionSequencerPool(\"TriggerService\")(untypedSystem)\n \n-    var triggers: Map[UUID, ActorRef[TriggerActor.Message]] = Map.empty\n+    var triggers: Map[UUID, TriggerActorWithParty] = Map.empty\n+    var triggersByParty: Map[String, Set[UUID]] = Map.empty"
  },
  {
    "id" : "a57b024c-d1d0-4e6d-9be4-69d72873f2b2",
    "prId" : 5084,
    "comments" : [
      {
        "id" : "a48b9a7d-1911-4e4c-826d-bc7fd1b5157c",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Is this still needed?",
        "createdAt" : "2020-03-19T11:05:31Z",
        "updatedAt" : "2020-03-19T11:17:23Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4bafe3e5d9cd1f221404137b5446f25b9212cdee",
    "line" : null,
    "diffHunk" : "@@ -212,30 +202,83 @@ object Server {\n         }\n         go(compiledPackages.addPackage(pkgId, pkg))\n     }\n+  }\n+\n+  def apply(\n+      host: String,\n+      port: Int,\n+      ledgerConfig: LedgerConfig,\n+      dar: Option[Dar[(PackageId, Package)]],\n+  ): Behavior[Message] = Behaviors.setup { ctx =>\n+    // http doesn't know about akka typed so provide untyped system\n+    implicit val untypedSystem: akka.actor.ActorSystem = ctx.system.toClassic\n+    implicit val materializer: Materializer = Materializer(untypedSystem)\n+    implicit val esf: ExecutionSequencerFactory =\n+      new AkkaExecutionSequencerPool(\"TriggerService\")(untypedSystem)\n+\n+    var triggers: Map[UUID, ActorRef[TriggerActor.Message]] = Map.empty\n+    // Mutable in preparation for dynamic package upload.\n+    val compiledPackages: MutableCompiledPackages = ConcurrentCompiledPackages()\n+    dar.foreach(addDar(compiledPackages, _))\n \n+    // fileUpload seems to trigger that warning and I couldn't find\n+    // a way to fix it so we disable the warning.\n+    @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n     val route = concat(\n       post {\n-        // Start a new trigger given its identifier and the party it should be running as.\n-        // Returns a UUID for the newly started trigger.\n-        path(\"start\") {\n-          entity(as[TriggerParams]) {\n-            params =>\n-              Trigger.fromIdentifier(compiledPackages, params.identifier) match {\n-                case Left(err) =>\n-                  complete((StatusCodes.UnprocessableEntity, err))\n-                case Right(trigger) =>\n-                  val uuid = UUID.randomUUID\n-                  val ref = ctx.spawn(\n-                    TriggerActor(\n-                      TriggerActor.Config(compiledPackages, trigger, ledgerConfig, params.party)),\n-                    uuid.toString,\n-                  )\n-                  triggers = triggers + (uuid -> ref)\n-                  complete(uuid.toString)\n+        concat(\n+          // Start a new trigger given its identifier and the party it should be running as.\n+          // Returns a UUID for the newly started trigger.\n+          path(\"start\") {\n+            entity(as[TriggerParams]) {\n+              params =>\n+                Trigger.fromIdentifier(compiledPackages, params.identifier) match {\n+                  case Left(err) =>\n+                    complete((StatusCodes.UnprocessableEntity, err))\n+                  case Right(trigger) =>\n+                    val uuid = UUID.randomUUID\n+                    val ref = ctx.spawn(\n+                      TriggerActor(\n+                        TriggerActor.Config(compiledPackages, trigger, ledgerConfig, params.party)),\n+                      uuid.toString,\n+                    )\n+                    triggers = triggers + (uuid -> ref)\n+                    complete(uuid.toString)\n \n-              }\n+                }\n+            }\n+          },\n+          // upload a DAR as a multi-part form request with a single field called\n+          // \"dar\".\n+          path(\"upload_dar\") {\n+//            extractExecutionContext { implicit ec =>"
  },
  {
    "id" : "e5f29cf6-b71f-4a16-b200-0ee5e40827dd",
    "prId" : 5084,
    "comments" : [
      {
        "id" : "ab867e1c-5f54-4519-974a-5035ae9bb859",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Debug left-over?",
        "createdAt" : "2020-03-19T11:06:13Z",
        "updatedAt" : "2020-03-19T11:17:23Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "38f58cbd-f1d2-4293-a46b-9b69e160af86",
        "parentId" : "ab867e1c-5f54-4519-974a-5035ae9bb859",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, I clearly forgot the cleanup pass for this PR. Sorry :slightly_smiling_face: Should all be fixed now.",
        "createdAt" : "2020-03-19T11:17:46Z",
        "updatedAt" : "2020-03-19T11:17:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0be5cc33-0fd8-4505-ad4b-90503a4a2e7b",
        "parentId" : "ab867e1c-5f54-4519-974a-5035ae9bb859",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "No worries, thanks for fixing these!",
        "createdAt" : "2020-03-19T11:40:00Z",
        "updatedAt" : "2020-03-19T11:40:00Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4bafe3e5d9cd1f221404137b5446f25b9212cdee",
    "line" : null,
    "diffHunk" : "@@ -212,30 +202,83 @@ object Server {\n         }\n         go(compiledPackages.addPackage(pkgId, pkg))\n     }\n+  }\n+\n+  def apply(\n+      host: String,\n+      port: Int,\n+      ledgerConfig: LedgerConfig,\n+      dar: Option[Dar[(PackageId, Package)]],\n+  ): Behavior[Message] = Behaviors.setup { ctx =>\n+    // http doesn't know about akka typed so provide untyped system\n+    implicit val untypedSystem: akka.actor.ActorSystem = ctx.system.toClassic\n+    implicit val materializer: Materializer = Materializer(untypedSystem)\n+    implicit val esf: ExecutionSequencerFactory =\n+      new AkkaExecutionSequencerPool(\"TriggerService\")(untypedSystem)\n+\n+    var triggers: Map[UUID, ActorRef[TriggerActor.Message]] = Map.empty\n+    // Mutable in preparation for dynamic package upload.\n+    val compiledPackages: MutableCompiledPackages = ConcurrentCompiledPackages()\n+    dar.foreach(addDar(compiledPackages, _))\n \n+    // fileUpload seems to trigger that warning and I couldn't find\n+    // a way to fix it so we disable the warning.\n+    @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n     val route = concat(\n       post {\n-        // Start a new trigger given its identifier and the party it should be running as.\n-        // Returns a UUID for the newly started trigger.\n-        path(\"start\") {\n-          entity(as[TriggerParams]) {\n-            params =>\n-              Trigger.fromIdentifier(compiledPackages, params.identifier) match {\n-                case Left(err) =>\n-                  complete((StatusCodes.UnprocessableEntity, err))\n-                case Right(trigger) =>\n-                  val uuid = UUID.randomUUID\n-                  val ref = ctx.spawn(\n-                    TriggerActor(\n-                      TriggerActor.Config(compiledPackages, trigger, ledgerConfig, params.party)),\n-                    uuid.toString,\n-                  )\n-                  triggers = triggers + (uuid -> ref)\n-                  complete(uuid.toString)\n+        concat(\n+          // Start a new trigger given its identifier and the party it should be running as.\n+          // Returns a UUID for the newly started trigger.\n+          path(\"start\") {\n+            entity(as[TriggerParams]) {\n+              params =>\n+                Trigger.fromIdentifier(compiledPackages, params.identifier) match {\n+                  case Left(err) =>\n+                    complete((StatusCodes.UnprocessableEntity, err))\n+                  case Right(trigger) =>\n+                    val uuid = UUID.randomUUID\n+                    val ref = ctx.spawn(\n+                      TriggerActor(\n+                        TriggerActor.Config(compiledPackages, trigger, ledgerConfig, params.party)),\n+                      uuid.toString,\n+                    )\n+                    triggers = triggers + (uuid -> ref)\n+                    complete(uuid.toString)\n \n-              }\n+                }\n+            }\n+          },\n+          // upload a DAR as a multi-part form request with a single field called\n+          // \"dar\".\n+          path(\"upload_dar\") {\n+//            extractExecutionContext { implicit ec =>\n+            fileUpload(\"dar\") {\n+              case (metadata: FileInfo, byteSource: Source[ByteString, Any]) =>\n+                val byteStringF: Future[ByteString] = byteSource.runFold(ByteString(\"\"))(_ ++ _)\n+                onSuccess(byteStringF) {\n+                  byteString =>\n+                    val inputStream = new ByteArrayInputStream(byteString.toArray)\n+                    DarReader()\n+                      .readArchive(\"package-upload\", new ZipInputStream(inputStream)) match {\n+                      case Failure(err) => complete((StatusCodes.UnprocessableEntity, err))\n+                      case Success(encodedDar) =>\n+                        try {\n+                          val dar = encodedDar.map {\n+                            case (pkgId, payload) => Decode.readArchivePayload(pkgId, payload)\n+                          }\n+                          addDar(compiledPackages, dar)\n+                          complete(s\"DAR uploaded, main package id: ${dar.main._1}\")\n+                        } catch {\n+                          case e: ParseError => complete((StatusCodes.UnprocessableEntity, e))\n+                        }\n+                    }\n+                }\n+              // foreach { byteString =>\n+              //   println(\"GOT REQUEST\")"
  },
  {
    "id" : "9d5b6008-44e5-4e70-bd89-41992723a862",
    "prId" : 5084,
    "comments" : [
      {
        "id" : "d04e894f-3390-410f-9a09-719b0a036432",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Same here",
        "createdAt" : "2020-03-19T11:06:19Z",
        "updatedAt" : "2020-03-19T11:17:23Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4bafe3e5d9cd1f221404137b5446f25b9212cdee",
    "line" : null,
    "diffHunk" : "@@ -212,30 +202,83 @@ object Server {\n         }\n         go(compiledPackages.addPackage(pkgId, pkg))\n     }\n+  }\n+\n+  def apply(\n+      host: String,\n+      port: Int,\n+      ledgerConfig: LedgerConfig,\n+      dar: Option[Dar[(PackageId, Package)]],\n+  ): Behavior[Message] = Behaviors.setup { ctx =>\n+    // http doesn't know about akka typed so provide untyped system\n+    implicit val untypedSystem: akka.actor.ActorSystem = ctx.system.toClassic\n+    implicit val materializer: Materializer = Materializer(untypedSystem)\n+    implicit val esf: ExecutionSequencerFactory =\n+      new AkkaExecutionSequencerPool(\"TriggerService\")(untypedSystem)\n+\n+    var triggers: Map[UUID, ActorRef[TriggerActor.Message]] = Map.empty\n+    // Mutable in preparation for dynamic package upload.\n+    val compiledPackages: MutableCompiledPackages = ConcurrentCompiledPackages()\n+    dar.foreach(addDar(compiledPackages, _))\n \n+    // fileUpload seems to trigger that warning and I couldn't find\n+    // a way to fix it so we disable the warning.\n+    @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n     val route = concat(\n       post {\n-        // Start a new trigger given its identifier and the party it should be running as.\n-        // Returns a UUID for the newly started trigger.\n-        path(\"start\") {\n-          entity(as[TriggerParams]) {\n-            params =>\n-              Trigger.fromIdentifier(compiledPackages, params.identifier) match {\n-                case Left(err) =>\n-                  complete((StatusCodes.UnprocessableEntity, err))\n-                case Right(trigger) =>\n-                  val uuid = UUID.randomUUID\n-                  val ref = ctx.spawn(\n-                    TriggerActor(\n-                      TriggerActor.Config(compiledPackages, trigger, ledgerConfig, params.party)),\n-                    uuid.toString,\n-                  )\n-                  triggers = triggers + (uuid -> ref)\n-                  complete(uuid.toString)\n+        concat(\n+          // Start a new trigger given its identifier and the party it should be running as.\n+          // Returns a UUID for the newly started trigger.\n+          path(\"start\") {\n+            entity(as[TriggerParams]) {\n+              params =>\n+                Trigger.fromIdentifier(compiledPackages, params.identifier) match {\n+                  case Left(err) =>\n+                    complete((StatusCodes.UnprocessableEntity, err))\n+                  case Right(trigger) =>\n+                    val uuid = UUID.randomUUID\n+                    val ref = ctx.spawn(\n+                      TriggerActor(\n+                        TriggerActor.Config(compiledPackages, trigger, ledgerConfig, params.party)),\n+                      uuid.toString,\n+                    )\n+                    triggers = triggers + (uuid -> ref)\n+                    complete(uuid.toString)\n \n-              }\n+                }\n+            }\n+          },\n+          // upload a DAR as a multi-part form request with a single field called\n+          // \"dar\".\n+          path(\"upload_dar\") {\n+//            extractExecutionContext { implicit ec =>\n+            fileUpload(\"dar\") {\n+              case (metadata: FileInfo, byteSource: Source[ByteString, Any]) =>\n+                val byteStringF: Future[ByteString] = byteSource.runFold(ByteString(\"\"))(_ ++ _)\n+                onSuccess(byteStringF) {\n+                  byteString =>\n+                    val inputStream = new ByteArrayInputStream(byteString.toArray)\n+                    DarReader()\n+                      .readArchive(\"package-upload\", new ZipInputStream(inputStream)) match {\n+                      case Failure(err) => complete((StatusCodes.UnprocessableEntity, err))\n+                      case Success(encodedDar) =>\n+                        try {\n+                          val dar = encodedDar.map {\n+                            case (pkgId, payload) => Decode.readArchivePayload(pkgId, payload)\n+                          }\n+                          addDar(compiledPackages, dar)\n+                          complete(s\"DAR uploaded, main package id: ${dar.main._1}\")\n+                        } catch {\n+                          case e: ParseError => complete((StatusCodes.UnprocessableEntity, e))\n+                        }\n+                    }\n+                }\n+              // foreach { byteString =>\n+              //   println(\"GOT REQUEST\")\n+            }\n           }\n-        }\n+          //        }"
  },
  {
    "id" : "d64172d9-0674-492f-997b-9b71b88c8139",
    "prId" : 5038,
    "comments" : [
      {
        "id" : "d20ff4fc-0538-490b-963c-71c0b3ba51d9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This deliberately doesn’t use `fromDar` in preparation for dynamic package uploads.",
        "createdAt" : "2020-03-17T09:54:18Z",
        "updatedAt" : "2020-03-17T09:54:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5cff5df7c8ddada578757bb1298720a07e4aa66a",
    "line" : 56,
    "diffHunk" : "@@ -129,19 +124,29 @@ object TriggerActor {\n               Behaviors.same\n           }\n \n+      val darMap = config.dar.all.toMap\n+      val compiler = Compiler(darMap)\n+      val compiledPackages =\n+        PureCompiledPackages(darMap, compiler.compilePackages(darMap.keys)).right.get\n+\n       val acsQuery =\n         LedgerClient\n           .singleHost(config.ledgerConfig.host, config.ledgerConfig.port, clientConfig)\n           .flatMap { client =>\n-            val runner = new Runner(client, appId, config.party, config.dar)\n-            val (triggerExpr, triggerTy, triggerIds) = runner.getTrigger(config.triggerId)\n-            val converter = Converter(runner.compiledPackages, triggerIds)\n-            val filter = runner.getTriggerFilter(converter, triggerExpr, triggerTy)\n+            val trigger = Runner.getTrigger(compiledPackages, config.triggerId)\n+            val runner = new Runner("
  },
  {
    "id" : "44af2b2e-fcd5-4096-b4e6-81496ba23b46",
    "prId" : 4287,
    "comments" : [
      {
        "id" : "6cfb7e10-07b6-45cd-945f-1ac80cd601c3",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-31T08:56:57Z",
        "updatedAt" : "2020-01-31T09:30:36Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "066ec07af8b619d03c7d54bc324fed6b4ac7b4de",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,314 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.engine.trigger\n+\n+// import akka.{ NotUsed }"
  },
  {
    "id" : "a647a936-4b59-41ff-be10-d59468faf848",
    "prId" : 4287,
    "comments" : [
      {
        "id" : "9699d562-7d5a-4bcf-b31d-f9b391a2cb67",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-31T09:00:43Z",
        "updatedAt" : "2020-01-31T09:30:36Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "066ec07af8b619d03c7d54bc324fed6b4ac7b4de",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,314 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.engine.trigger\n+\n+// import akka.{ NotUsed }\n+import akka.actor.typed.{ActorRef, ActorSystem, Behavior, PostStop, Scheduler}\n+import akka.actor.typed.scaladsl.AskPattern._\n+import akka.actor.typed.scaladsl.{Behaviors}\n+import akka.actor.typed.scaladsl.adapter._\n+import akka.http.scaladsl.Http\n+import akka.http.scaladsl.Http.ServerBinding\n+import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._\n+import akka.http.scaladsl.server.Directives._\n+import akka.http.scaladsl.server.Route\n+import akka.stream.{KillSwitch, KillSwitches, Materializer}\n+import akka.util.Timeout\n+import java.time.Duration\n+import java.util.UUID\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration._\n+import scala.io.StdIn\n+import scala.util.{Success, Failure}\n+import scalaz.syntax.tag._\n+import scalaz.syntax.traverse._\n+import spray.json._\n+import spray.json.DefaultJsonProtocol._\n+\n+import com.digitalasset.daml.lf.archive.{Dar, DarReader, Decode}\n+import com.digitalasset.daml.lf.data.Ref._\n+import com.digitalasset.daml.lf.language.Ast._\n+import com.digitalasset.daml_lf_dev.DamlLf\n+import com.digitalasset.grpc.adapter.AkkaExecutionSequencerPool\n+import com.digitalasset.grpc.adapter.{AkkaExecutionSequencerPool, ExecutionSequencerFactory}\n+import com.digitalasset.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.digitalasset.ledger.api.v1.event.{CreatedEvent}\n+import com.digitalasset.ledger.api.v1.ledger_offset.{LedgerOffset}\n+import com.digitalasset.ledger.api.v1.transaction_filter.{TransactionFilter}\n+import com.digitalasset.ledger.client.LedgerClient\n+import com.digitalasset.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement,\n+}\n+import com.digitalasset.platform.services.time.TimeProviderType\n+\n+case class LedgerConfig(\n+    host: String,\n+    port: Int,\n+    timeProvider: TimeProviderType,\n+    commandTtl: Duration,\n+)\n+\n+object TriggerActor {\n+  sealed trait Message\n+  final case object Stop extends Message\n+  final case class Failed(error: Throwable) extends Message\n+  final case class QueryACSFailed(cause: Throwable) extends Message\n+  final case class QueriedACS(\n+      runner: Runner,\n+      filter: TransactionFilter,\n+      acs: Seq[CreatedEvent],\n+      offset: LedgerOffset,\n+  ) extends Message\n+\n+  case class Config(\n+      ledgerConfig: LedgerConfig,\n+      // TODO We should really not pass in the DAR for each package.\n+      // The right way to approach this is to store the CompiledPackages\n+      // deduplicated and shared between all triggers.\n+      dar: Dar[(PackageId, Package)],\n+      triggerId: Identifier,\n+      party: String,\n+  )\n+\n+  def apply(\n+      config: Config,\n+  )(implicit esf: ExecutionSequencerFactory, mat: Materializer): Behavior[Message] =\n+    Behaviors.setup { context =>\n+      implicit val ec: ExecutionContext = context.executionContext\n+      val name = context.self.path.name\n+      val appId = ApplicationId(name)\n+      val clientConfig = LedgerClientConfiguration(\n+        applicationId = appId.unwrap,\n+        ledgerIdRequirement = LedgerIdRequirement(\"\", enabled = false),\n+        commandClient =\n+          CommandClientConfiguration.default.copy(ttl = config.ledgerConfig.commandTtl),\n+        sslContext = None,\n+      )\n+\n+      // Waiting for the ACS query to finish so we can build the initial state.\n+      // TODO We should handle being stopped while querying the ACS.\n+      def queryingACS() = Behaviors.receiveMessagePartial[Message] {\n+        case QueryACSFailed(cause) => throw new RuntimeException(\"ACS query failed\", cause)\n+        case QueriedACS(runner, filter, acs, offset) =>\n+          val heartbeat = runner.getTriggerHeartbeat(config.triggerId)\n+          val (killSwitch, trigger) = runner.runWithACS(\n+            config.triggerId,\n+            config.ledgerConfig.timeProvider,\n+            heartbeat,\n+            acs,\n+            offset,\n+            filter,\n+            msgFlow = KillSwitches.single[TriggerMsg],\n+          )\n+          // TODO If we are stopped we will end up causing the future to complete which will trigger\n+          // a message that is sent to a now terminated actor. We should fix this somehow™.\n+          context.pipeToSelf(trigger) {\n+            case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n+            case Failure(cause) => Failed(cause)\n+          }\n+          running(killSwitch)\n+      }\n+\n+      // Trigger loop is started, wait until we should stop.\n+      def running(killSwitch: KillSwitch) =\n+        Behaviors\n+          .receiveMessagePartial[Message] {\n+            case Stop =>\n+              Behaviors.stopped\n+          }\n+          .receiveSignal {\n+            case (_, PostStop) =>\n+              killSwitch.shutdown\n+              Behaviors.same\n+          }\n+\n+      val acsQuery =\n+        LedgerClient\n+          .singleHost(config.ledgerConfig.host, config.ledgerConfig.port, clientConfig)\n+          .flatMap { client =>\n+            val runner = new Runner(client, appId, config.party, config.dar)\n+            val filter = runner.getTriggerFilter(config.triggerId)\n+            runner\n+              .queryACS(client, filter)\n+              .map({ case (acs, offset) => QueriedACS(runner, filter, acs, offset) })\n+          }\n+      context.pipeToSelf(acsQuery) {\n+        case Success(msg) => msg\n+        case Failure(cause) => QueryACSFailed(cause)\n+      }\n+      queryingACS()\n+    }\n+}\n+\n+object Server {\n+\n+  sealed trait Message\n+  private final case class StartFailed(cause: Throwable) extends Message\n+  private final case class Started(binding: ServerBinding) extends Message\n+  final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n+  final case object Stop extends Message\n+\n+  case class TriggerParams(identifier: Identifier, party: String)\n+  implicit object IdentifierFormat extends JsonFormat[Identifier] {\n+    def read(value: JsValue) = value match {\n+      case JsString(s) => {\n+        val components = s.split(\":\")\n+        if (components.length == 3) {\n+          val parsed = for {\n+            pkgId <- PackageId.fromString(components(0))\n+            mod <- DottedName.fromString(components(1))\n+            entity <- DottedName.fromString(components(2))\n+          } yield Identifier(pkgId, QualifiedName(mod, entity))\n+          parsed match {\n+            case Left(e) => deserializationError(e)\n+            case Right(id) => id\n+          }\n+        } else {\n+          deserializationError(s\"Expected trigger identifier of the form pkgid:mod:name but got $s\")\n+        }\n+      }\n+      case _ => deserializationError(\"Expected trigger identifier of the form pkgid:mod:name\")\n+    }\n+    def write(id: Identifier) = JsString(\"${id.packageId}:${id.qualifiedName}\")\n+  }\n+  implicit val triggerParamsFormat = jsonFormat2(TriggerParams)\n+\n+  def apply(\n+      host: String,\n+      port: Int,\n+      ledgerConfig: LedgerConfig,\n+      dar: Dar[(PackageId, Package)],\n+  ): Behavior[Message] = Behaviors.setup { ctx =>\n+    // implicit val system: ActorSystem = ctx.system"
  },
  {
    "id" : "4c7b3389-0430-4c79-8ecb-f351f42c64ca",
    "prId" : 4287,
    "comments" : [
      {
        "id" : "98abce5f-5f62-4c1e-8de7-daafbedd99f5",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-31T09:01:04Z",
        "updatedAt" : "2020-01-31T09:30:36Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "066ec07af8b619d03c7d54bc324fed6b4ac7b4de",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,314 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.engine.trigger\n+\n+// import akka.{ NotUsed }\n+import akka.actor.typed.{ActorRef, ActorSystem, Behavior, PostStop, Scheduler}\n+import akka.actor.typed.scaladsl.AskPattern._\n+import akka.actor.typed.scaladsl.{Behaviors}\n+import akka.actor.typed.scaladsl.adapter._\n+import akka.http.scaladsl.Http\n+import akka.http.scaladsl.Http.ServerBinding\n+import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._\n+import akka.http.scaladsl.server.Directives._\n+import akka.http.scaladsl.server.Route\n+import akka.stream.{KillSwitch, KillSwitches, Materializer}\n+import akka.util.Timeout\n+import java.time.Duration\n+import java.util.UUID\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration._\n+import scala.io.StdIn\n+import scala.util.{Success, Failure}\n+import scalaz.syntax.tag._\n+import scalaz.syntax.traverse._\n+import spray.json._\n+import spray.json.DefaultJsonProtocol._\n+\n+import com.digitalasset.daml.lf.archive.{Dar, DarReader, Decode}\n+import com.digitalasset.daml.lf.data.Ref._\n+import com.digitalasset.daml.lf.language.Ast._\n+import com.digitalasset.daml_lf_dev.DamlLf\n+import com.digitalasset.grpc.adapter.AkkaExecutionSequencerPool\n+import com.digitalasset.grpc.adapter.{AkkaExecutionSequencerPool, ExecutionSequencerFactory}\n+import com.digitalasset.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.digitalasset.ledger.api.v1.event.{CreatedEvent}\n+import com.digitalasset.ledger.api.v1.ledger_offset.{LedgerOffset}\n+import com.digitalasset.ledger.api.v1.transaction_filter.{TransactionFilter}\n+import com.digitalasset.ledger.client.LedgerClient\n+import com.digitalasset.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement,\n+}\n+import com.digitalasset.platform.services.time.TimeProviderType\n+\n+case class LedgerConfig(\n+    host: String,\n+    port: Int,\n+    timeProvider: TimeProviderType,\n+    commandTtl: Duration,\n+)\n+\n+object TriggerActor {\n+  sealed trait Message\n+  final case object Stop extends Message\n+  final case class Failed(error: Throwable) extends Message\n+  final case class QueryACSFailed(cause: Throwable) extends Message\n+  final case class QueriedACS(\n+      runner: Runner,\n+      filter: TransactionFilter,\n+      acs: Seq[CreatedEvent],\n+      offset: LedgerOffset,\n+  ) extends Message\n+\n+  case class Config(\n+      ledgerConfig: LedgerConfig,\n+      // TODO We should really not pass in the DAR for each package.\n+      // The right way to approach this is to store the CompiledPackages\n+      // deduplicated and shared between all triggers.\n+      dar: Dar[(PackageId, Package)],\n+      triggerId: Identifier,\n+      party: String,\n+  )\n+\n+  def apply(\n+      config: Config,\n+  )(implicit esf: ExecutionSequencerFactory, mat: Materializer): Behavior[Message] =\n+    Behaviors.setup { context =>\n+      implicit val ec: ExecutionContext = context.executionContext\n+      val name = context.self.path.name\n+      val appId = ApplicationId(name)\n+      val clientConfig = LedgerClientConfiguration(\n+        applicationId = appId.unwrap,\n+        ledgerIdRequirement = LedgerIdRequirement(\"\", enabled = false),\n+        commandClient =\n+          CommandClientConfiguration.default.copy(ttl = config.ledgerConfig.commandTtl),\n+        sslContext = None,\n+      )\n+\n+      // Waiting for the ACS query to finish so we can build the initial state.\n+      // TODO We should handle being stopped while querying the ACS.\n+      def queryingACS() = Behaviors.receiveMessagePartial[Message] {\n+        case QueryACSFailed(cause) => throw new RuntimeException(\"ACS query failed\", cause)\n+        case QueriedACS(runner, filter, acs, offset) =>\n+          val heartbeat = runner.getTriggerHeartbeat(config.triggerId)\n+          val (killSwitch, trigger) = runner.runWithACS(\n+            config.triggerId,\n+            config.ledgerConfig.timeProvider,\n+            heartbeat,\n+            acs,\n+            offset,\n+            filter,\n+            msgFlow = KillSwitches.single[TriggerMsg],\n+          )\n+          // TODO If we are stopped we will end up causing the future to complete which will trigger\n+          // a message that is sent to a now terminated actor. We should fix this somehow™.\n+          context.pipeToSelf(trigger) {\n+            case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n+            case Failure(cause) => Failed(cause)\n+          }\n+          running(killSwitch)\n+      }\n+\n+      // Trigger loop is started, wait until we should stop.\n+      def running(killSwitch: KillSwitch) =\n+        Behaviors\n+          .receiveMessagePartial[Message] {\n+            case Stop =>\n+              Behaviors.stopped\n+          }\n+          .receiveSignal {\n+            case (_, PostStop) =>\n+              killSwitch.shutdown\n+              Behaviors.same\n+          }\n+\n+      val acsQuery =\n+        LedgerClient\n+          .singleHost(config.ledgerConfig.host, config.ledgerConfig.port, clientConfig)\n+          .flatMap { client =>\n+            val runner = new Runner(client, appId, config.party, config.dar)\n+            val filter = runner.getTriggerFilter(config.triggerId)\n+            runner\n+              .queryACS(client, filter)\n+              .map({ case (acs, offset) => QueriedACS(runner, filter, acs, offset) })\n+          }\n+      context.pipeToSelf(acsQuery) {\n+        case Success(msg) => msg\n+        case Failure(cause) => QueryACSFailed(cause)\n+      }\n+      queryingACS()\n+    }\n+}\n+\n+object Server {\n+\n+  sealed trait Message\n+  private final case class StartFailed(cause: Throwable) extends Message\n+  private final case class Started(binding: ServerBinding) extends Message\n+  final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n+  final case object Stop extends Message\n+\n+  case class TriggerParams(identifier: Identifier, party: String)\n+  implicit object IdentifierFormat extends JsonFormat[Identifier] {\n+    def read(value: JsValue) = value match {\n+      case JsString(s) => {\n+        val components = s.split(\":\")\n+        if (components.length == 3) {\n+          val parsed = for {\n+            pkgId <- PackageId.fromString(components(0))\n+            mod <- DottedName.fromString(components(1))\n+            entity <- DottedName.fromString(components(2))\n+          } yield Identifier(pkgId, QualifiedName(mod, entity))\n+          parsed match {\n+            case Left(e) => deserializationError(e)\n+            case Right(id) => id\n+          }\n+        } else {\n+          deserializationError(s\"Expected trigger identifier of the form pkgid:mod:name but got $s\")\n+        }\n+      }\n+      case _ => deserializationError(\"Expected trigger identifier of the form pkgid:mod:name\")\n+    }\n+    def write(id: Identifier) = JsString(\"${id.packageId}:${id.qualifiedName}\")\n+  }\n+  implicit val triggerParamsFormat = jsonFormat2(TriggerParams)\n+\n+  def apply(\n+      host: String,\n+      port: Int,\n+      ledgerConfig: LedgerConfig,\n+      dar: Dar[(PackageId, Package)],\n+  ): Behavior[Message] = Behaviors.setup { ctx =>\n+    // implicit val system: ActorSystem = ctx.system\n+    // http doesn't know about akka typed so provide untyped system\n+    implicit val untypedSystem: akka.actor.ActorSystem = ctx.system.toClassic\n+    implicit val materializer: Materializer = Materializer(untypedSystem)\n+    // implicit val ec: ExecutionContext = ctx.system.executionContext"
  },
  {
    "id" : "5d1c406f-61b4-4541-a640-a782233472ef",
    "prId" : 4287,
    "comments" : [
      {
        "id" : "9a3727df-461e-497b-8007-23ea1f4f6243",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Is this a debug left-over? Maybe use logger instead?",
        "createdAt" : "2020-01-31T09:15:10Z",
        "updatedAt" : "2020-01-31T09:30:36Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90165c00-fc15-4ea1-8f3e-6a846144d5fe",
        "parentId" : "9a3727df-461e-497b-8007-23ea1f4f6243",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I jut removed it, it wasn’t really useful for anything.",
        "createdAt" : "2020-01-31T09:29:45Z",
        "updatedAt" : "2020-01-31T09:30:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "066ec07af8b619d03c7d54bc324fed6b4ac7b4de",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,314 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.engine.trigger\n+\n+// import akka.{ NotUsed }\n+import akka.actor.typed.{ActorRef, ActorSystem, Behavior, PostStop, Scheduler}\n+import akka.actor.typed.scaladsl.AskPattern._\n+import akka.actor.typed.scaladsl.{Behaviors}\n+import akka.actor.typed.scaladsl.adapter._\n+import akka.http.scaladsl.Http\n+import akka.http.scaladsl.Http.ServerBinding\n+import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._\n+import akka.http.scaladsl.server.Directives._\n+import akka.http.scaladsl.server.Route\n+import akka.stream.{KillSwitch, KillSwitches, Materializer}\n+import akka.util.Timeout\n+import java.time.Duration\n+import java.util.UUID\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.concurrent.duration._\n+import scala.io.StdIn\n+import scala.util.{Success, Failure}\n+import scalaz.syntax.tag._\n+import scalaz.syntax.traverse._\n+import spray.json._\n+import spray.json.DefaultJsonProtocol._\n+\n+import com.digitalasset.daml.lf.archive.{Dar, DarReader, Decode}\n+import com.digitalasset.daml.lf.data.Ref._\n+import com.digitalasset.daml.lf.language.Ast._\n+import com.digitalasset.daml_lf_dev.DamlLf\n+import com.digitalasset.grpc.adapter.AkkaExecutionSequencerPool\n+import com.digitalasset.grpc.adapter.{AkkaExecutionSequencerPool, ExecutionSequencerFactory}\n+import com.digitalasset.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.digitalasset.ledger.api.v1.event.{CreatedEvent}\n+import com.digitalasset.ledger.api.v1.ledger_offset.{LedgerOffset}\n+import com.digitalasset.ledger.api.v1.transaction_filter.{TransactionFilter}\n+import com.digitalasset.ledger.client.LedgerClient\n+import com.digitalasset.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement,\n+}\n+import com.digitalasset.platform.services.time.TimeProviderType\n+\n+case class LedgerConfig(\n+    host: String,\n+    port: Int,\n+    timeProvider: TimeProviderType,\n+    commandTtl: Duration,\n+)\n+\n+object TriggerActor {\n+  sealed trait Message\n+  final case object Stop extends Message\n+  final case class Failed(error: Throwable) extends Message\n+  final case class QueryACSFailed(cause: Throwable) extends Message\n+  final case class QueriedACS(\n+      runner: Runner,\n+      filter: TransactionFilter,\n+      acs: Seq[CreatedEvent],\n+      offset: LedgerOffset,\n+  ) extends Message\n+\n+  case class Config(\n+      ledgerConfig: LedgerConfig,\n+      // TODO We should really not pass in the DAR for each package.\n+      // The right way to approach this is to store the CompiledPackages\n+      // deduplicated and shared between all triggers.\n+      dar: Dar[(PackageId, Package)],\n+      triggerId: Identifier,\n+      party: String,\n+  )\n+\n+  def apply(\n+      config: Config,\n+  )(implicit esf: ExecutionSequencerFactory, mat: Materializer): Behavior[Message] =\n+    Behaviors.setup { context =>\n+      implicit val ec: ExecutionContext = context.executionContext\n+      val name = context.self.path.name\n+      val appId = ApplicationId(name)\n+      val clientConfig = LedgerClientConfiguration(\n+        applicationId = appId.unwrap,\n+        ledgerIdRequirement = LedgerIdRequirement(\"\", enabled = false),\n+        commandClient =\n+          CommandClientConfiguration.default.copy(ttl = config.ledgerConfig.commandTtl),\n+        sslContext = None,\n+      )\n+\n+      // Waiting for the ACS query to finish so we can build the initial state.\n+      // TODO We should handle being stopped while querying the ACS.\n+      def queryingACS() = Behaviors.receiveMessagePartial[Message] {\n+        case QueryACSFailed(cause) => throw new RuntimeException(\"ACS query failed\", cause)\n+        case QueriedACS(runner, filter, acs, offset) =>\n+          val heartbeat = runner.getTriggerHeartbeat(config.triggerId)\n+          val (killSwitch, trigger) = runner.runWithACS(\n+            config.triggerId,\n+            config.ledgerConfig.timeProvider,\n+            heartbeat,\n+            acs,\n+            offset,\n+            filter,\n+            msgFlow = KillSwitches.single[TriggerMsg],\n+          )\n+          // TODO If we are stopped we will end up causing the future to complete which will trigger\n+          // a message that is sent to a now terminated actor. We should fix this somehow™.\n+          context.pipeToSelf(trigger) {\n+            case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n+            case Failure(cause) => Failed(cause)\n+          }\n+          running(killSwitch)\n+      }\n+\n+      // Trigger loop is started, wait until we should stop.\n+      def running(killSwitch: KillSwitch) =\n+        Behaviors\n+          .receiveMessagePartial[Message] {\n+            case Stop =>\n+              Behaviors.stopped\n+          }\n+          .receiveSignal {\n+            case (_, PostStop) =>\n+              killSwitch.shutdown\n+              Behaviors.same\n+          }\n+\n+      val acsQuery =\n+        LedgerClient\n+          .singleHost(config.ledgerConfig.host, config.ledgerConfig.port, clientConfig)\n+          .flatMap { client =>\n+            val runner = new Runner(client, appId, config.party, config.dar)\n+            val filter = runner.getTriggerFilter(config.triggerId)\n+            runner\n+              .queryACS(client, filter)\n+              .map({ case (acs, offset) => QueriedACS(runner, filter, acs, offset) })\n+          }\n+      context.pipeToSelf(acsQuery) {\n+        case Success(msg) => msg\n+        case Failure(cause) => QueryACSFailed(cause)\n+      }\n+      queryingACS()\n+    }\n+}\n+\n+object Server {\n+\n+  sealed trait Message\n+  private final case class StartFailed(cause: Throwable) extends Message\n+  private final case class Started(binding: ServerBinding) extends Message\n+  final case class GetServerBinding(replyTo: ActorRef[ServerBinding]) extends Message\n+  final case object Stop extends Message\n+\n+  case class TriggerParams(identifier: Identifier, party: String)\n+  implicit object IdentifierFormat extends JsonFormat[Identifier] {\n+    def read(value: JsValue) = value match {\n+      case JsString(s) => {\n+        val components = s.split(\":\")\n+        if (components.length == 3) {\n+          val parsed = for {\n+            pkgId <- PackageId.fromString(components(0))\n+            mod <- DottedName.fromString(components(1))\n+            entity <- DottedName.fromString(components(2))\n+          } yield Identifier(pkgId, QualifiedName(mod, entity))\n+          parsed match {\n+            case Left(e) => deserializationError(e)\n+            case Right(id) => id\n+          }\n+        } else {\n+          deserializationError(s\"Expected trigger identifier of the form pkgid:mod:name but got $s\")\n+        }\n+      }\n+      case _ => deserializationError(\"Expected trigger identifier of the form pkgid:mod:name\")\n+    }\n+    def write(id: Identifier) = JsString(\"${id.packageId}:${id.qualifiedName}\")\n+  }\n+  implicit val triggerParamsFormat = jsonFormat2(TriggerParams)\n+\n+  def apply(\n+      host: String,\n+      port: Int,\n+      ledgerConfig: LedgerConfig,\n+      dar: Dar[(PackageId, Package)],\n+  ): Behavior[Message] = Behaviors.setup { ctx =>\n+    // implicit val system: ActorSystem = ctx.system\n+    // http doesn't know about akka typed so provide untyped system\n+    implicit val untypedSystem: akka.actor.ActorSystem = ctx.system.toClassic\n+    implicit val materializer: Materializer = Materializer(untypedSystem)\n+    // implicit val ec: ExecutionContext = ctx.system.executionContext\n+    implicit val esf: ExecutionSequencerFactory =\n+      new AkkaExecutionSequencerPool(\"TriggerService\")(untypedSystem)\n+\n+    var triggers: Map[UUID, ActorRef[TriggerActor.Message]] = Map.empty\n+\n+    val route = concat(\n+      post {\n+        // Start a new trigger given its identifier and the party it should be running as.\n+        // Returns a UUID for the newly started trigger.\n+        path(\"start\") {\n+          entity(as[TriggerParams]) { params =>\n+            println(params)"
  }
]