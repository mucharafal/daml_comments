[
  {
    "id" : "35d4f47b-5b84-49f1-9c1c-eb15e0d5c1b7",
    "prId" : 6279,
    "comments" : [
      {
        "id" : "7545cde3-50f0-4f60-bc16-8d83716e85cd",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "As discussed, I'm not sure we can store unencrypted username/password pairs here. Will investigate.",
        "createdAt" : "2020-06-09T19:04:54Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2fe8540-5aa8-4677-bd5a-599e2bf8ac76",
        "parentId" : "7545cde3-50f0-4f60-bc16-8d83716e85cd",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "It seems we can use `javax.crytpo` to readily implement encryption. I have functions for doing so on a branch.",
        "createdAt" : "2020-06-09T20:34:41Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9464687f8f030036b33ef328663eeb5ef13160c",
    "line" : 13,
    "diffHunk" : "@@ -43,7 +42,7 @@ object TriggerDao {\n   def initialize(implicit log: LogHandler): ConnectionIO[Unit] = {\n     // Running trigger table.\n     // `trigger_instance` is a UUID generated by the service\n-    // `party_token` is the JWT token corresponding to the party\n+    // `party_token` is the token corresponding to the party"
  },
  {
    "id" : "7a59653e-49b6-4e3d-9237-0b818234ab7b",
    "prId" : 6279,
    "comments" : [
      {
        "id" : "5e64c454-b258-498c-9e57-519fd0b9e2aa",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "This is where the token is used in a query and we need to make sure it's validated. I think we should only use the username here which we could restrict the charset to that of parties.",
        "createdAt" : "2020-06-09T20:16:48Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca36466a-24a5-4079-b737-a520f9a3055e",
        "parentId" : "5e64c454-b258-498c-9e57-519fd0b9e2aa",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "as discussed (and more or less resolved above) let's stick with tokens but yes, let us make sure at the point we receive the token that the party identifier meets syntactic requirements.\r\n",
        "createdAt" : "2020-06-09T20:51:13Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f01711a4-73f0-4a9d-98fa-4ae24c6ea1ba",
        "parentId" : "5e64c454-b258-498c-9e57-519fd0b9e2aa",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yes but also the encrypted token needs to be within a reasonable character set for this query to work.",
        "createdAt" : "2020-06-09T21:31:00Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7cb1b7ab-8455-49df-a425-1ca43624ae54",
        "parentId" : "5e64c454-b258-498c-9e57-519fd0b9e2aa",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "yes. the token stored in the db will be base 64 thus only a-z, A-Z, 0-9, + and / chars.",
        "createdAt" : "2020-06-09T21:56:53Z",
        "updatedAt" : "2020-06-10T13:34:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9464687f8f030036b33ef328663eeb5ef13160c",
    "line" : 35,
    "diffHunk" : "@@ -100,9 +99,9 @@ object TriggerDao {\n     delete.update.run.map(_ == 1)\n   }\n \n-  def getTriggersForParty(partyToken: Jwt): ConnectionIO[Vector[UUID]] = {\n+  def getTriggersForParty(partyToken: String): ConnectionIO[Vector[UUID]] = {\n     val select = Fragment.const(\"select trigger_instance from running_triggers\")\n-    val where = Fragment.const(s\" where party_token = '${partyToken.value}'\")\n+    val where = Fragment.const(s\" where party_token = '${partyToken}'\")"
  },
  {
    "id" : "ae609511-082f-4a54-92ea-a8a262a1443b",
    "prId" : 6153,
    "comments" : [
      {
        "id" : "357b2812-1e70-4370-8979-518302b5d73b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Please document the format of the name if you want to store it as a single string.",
        "createdAt" : "2020-06-02T07:25:19Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "20d418cc-4a39-49c5-a822-f53f82e68517",
        "parentId" : "357b2812-1e70-4370-8979-518302b5d73b",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Do you just mean a comment in this code or somewhere else?",
        "createdAt" : "2020-06-02T15:57:23Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "212f7bbd-5182-4695-a4d4-3cb003f1d8c9",
        "parentId" : "357b2812-1e70-4370-8979-518302b5d73b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just here in the code is totally fine.",
        "createdAt" : "2020-06-02T15:59:18Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e27d8a43e27c8fcdaccc26c506fee4f3359edba",
    "line" : 33,
    "diffHunk" : "@@ -41,11 +43,9 @@ object TriggerDao {\n   def initialize(implicit log: LogHandler): ConnectionIO[Unit] = {\n     val createTriggerTable: Fragment = sql\"\"\"\n         create table running_triggers(\n-          trigger_id uuid primary key,\n+          trigger_instance uuid primary key,\n           party_token text not null,\n-          package_id text not null,\n-          module_name text not null,\n-          trigger_name text not null\n+          full_trigger_name text not null"
  },
  {
    "id" : "0f552394-dbff-47ec-a55c-7cd4bc653557",
    "prId" : 6153,
    "comments" : [
      {
        "id" : "1af3b9b1-3bac-4002-8bb8-ddce79dce2c2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You probably want to order this by something. Unordered selects often come back to bite you later.",
        "createdAt" : "2020-06-02T07:26:17Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "84a8141d-c060-4c51-ae75-2596c2f3c33c",
        "parentId" : "1af3b9b1-3bac-4002-8bb8-ddce79dce2c2",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Ok good point. I'll `order by trigger_instance`.",
        "createdAt" : "2020-06-02T15:58:57Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2e27d8a43e27c8fcdaccc26c506fee4f3359edba",
    "line" : null,
    "diffHunk" : "@@ -54,7 +54,28 @@ object TriggerDao {\n           package bytea not null\n         )\n       \"\"\"\n+    val createPartyIndex: Fragment = sql\"\"\"\n+        create index triggers_by_party on running_triggers(party_token)\n+      \"\"\"\n     (createTriggerTable.update.run\n-      *> createDalfTable.update.run).void\n+      *> createDalfTable.update.run\n+      *> createPartyIndex.update.run).void\n+  }\n+\n+  def addRunningTrigger(t: RunningTrigger): ConnectionIO[Unit] = {\n+    val partyToken = t.jwt.value\n+    val fullTriggerName = t.triggerName.toString\n+    val insertTrigger: Fragment = Fragment.const(\n+      s\"insert into running_triggers values ('${t.triggerInstance}', '$partyToken', '$fullTriggerName')\"\n+    )\n+    insertTrigger.update.run.void\n+  }\n+\n+  def getTriggersForParty(partyToken: Jwt): ConnectionIO[Vector[UUID]] = {\n+    val token = partyToken.value\n+    val list: Fragment = Fragment.const(\n+      s\"select trigger_instance from running_triggers where party_token = '$token'\""
  },
  {
    "id" : "1f9d20f4-d273-4237-a131-3c74b9b1c3f9",
    "prId" : 6062,
    "comments" : [
      {
        "id" : "482cf043-38d7-4c79-bbec-b83d9ad38d36",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Do you want to keep these comments for now?",
        "createdAt" : "2020-05-20T20:30:30Z",
        "updatedAt" : "2020-05-21T22:33:56Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "30baa950bdb2fc1851cd1b480587cacb471b9a2f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import cats.effect.{ContextShift, IO}\n+import cats.syntax.apply._\n+import cats.syntax.functor._\n+import doobie._\n+import doobie.LogHandler\n+import doobie.free.connection.ConnectionIO\n+import doobie.implicits._\n+import doobie.util.log\n+import scala.concurrent.ExecutionContext\n+\n+object Connection {\n+\n+  type T = Transactor.Aux[IO, Unit]\n+\n+  def connect(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+    implicit cs: ContextShift[IO]): T =\n+    Transactor\n+      .fromDriverManager[IO](jdbcDriver, jdbcUrl, username, password)(IO.ioConcurrentEffect(cs), cs)\n+}\n+\n+class TriggerDao(xa: Connection.T) {\n+\n+  implicit val logHandler: log.LogHandler = doobie.util.log.LogHandler.jdkLogHandler\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+  def transact[A](query: ConnectionIO[A]): IO[A] =\n+    query.transact(xa)\n+}\n+\n+object TriggerDao {\n+  def apply(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+    implicit ec: ExecutionContext): TriggerDao = {\n+    val cs: ContextShift[IO] = IO.contextShift(ec)\n+    new TriggerDao(Connection.connect(jdbcDriver, jdbcUrl, username, password)(cs))\n+  }\n+\n+  def initialize(implicit log: LogHandler): ConnectionIO[Unit] = {\n+    val createTriggerTable: Fragment = sql\"\"\"\n+        create table running_triggers(\n+          trigger_id uuid primary key,\n+          party text not null,\n+          trigger_name text not null\n+        )\n+      \"\"\"\n+    val createDarTable: Fragment = sql\"\"\"\n+        create table dar_packages(\n+          package_id text primary key,\n+          package text not null\n+        )\n+      \"\"\"\n+//    val insertTrigger: Fragment ="
  },
  {
    "id" : "56272800-4b09-4c28-ba21-291245f2f83d",
    "prId" : 6062,
    "comments" : [
      {
        "id" : "00ad61f2-ab09-48b0-9bb6-b823e6c0c47a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Unless I am missing something here, this should be binary data not a unicode string, i.e., `bytea` in postgres I believe.",
        "createdAt" : "2020-05-21T06:35:40Z",
        "updatedAt" : "2020-05-21T22:33:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "30baa950bdb2fc1851cd1b480587cacb471b9a2f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,59 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import cats.effect.{ContextShift, IO}\n+import cats.syntax.apply._\n+import cats.syntax.functor._\n+import doobie._\n+import doobie.LogHandler\n+import doobie.free.connection.ConnectionIO\n+import doobie.implicits._\n+import doobie.util.log\n+import scala.concurrent.ExecutionContext\n+\n+object Connection {\n+\n+  type T = Transactor.Aux[IO, Unit]\n+\n+  def connect(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+      implicit cs: ContextShift[IO]): T =\n+    Transactor\n+      .fromDriverManager[IO](jdbcDriver, jdbcUrl, username, password)(IO.ioConcurrentEffect(cs), cs)\n+}\n+\n+class TriggerDao(xa: Connection.T) {\n+\n+  implicit val logHandler: log.LogHandler = doobie.util.log.LogHandler.jdkLogHandler\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+  def transact[A](query: ConnectionIO[A]): IO[A] =\n+    query.transact(xa)\n+}\n+\n+object TriggerDao {\n+  def apply(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+      implicit ec: ExecutionContext): TriggerDao = {\n+    val cs: ContextShift[IO] = IO.contextShift(ec)\n+    new TriggerDao(Connection.connect(jdbcDriver, jdbcUrl, username, password)(cs))\n+  }\n+\n+  def initialize(implicit log: LogHandler): ConnectionIO[Unit] = {\n+    val createTriggerTable: Fragment = sql\"\"\"\n+        create table running_triggers(\n+          trigger_id uuid primary key,\n+          party_token text not null,\n+          trigger_name text not null\n+        )\n+      \"\"\"\n+    val createDarTable: Fragment = sql\"\"\"\n+        create table dar_packages(\n+          package_id text primary key,\n+          package text not null"
  },
  {
    "id" : "0f367e2c-9dc8-47b2-bc3b-72192e5ed413",
    "prId" : 6062,
    "comments" : [
      {
        "id" : "5c3d20b7-cc3c-41f5-b18d-cfdcbcc85bc9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "presumably this is not just the name but `package_id:module_name:trigger_name`. If you store them separately you save yourself from having to parse it everytime you read it from the DB. Either way, we should document what we store here.",
        "createdAt" : "2020-05-21T06:44:04Z",
        "updatedAt" : "2020-05-21T22:33:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "30baa950bdb2fc1851cd1b480587cacb471b9a2f",
    "line" : 49,
    "diffHunk" : "@@ -0,0 +1,59 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import cats.effect.{ContextShift, IO}\n+import cats.syntax.apply._\n+import cats.syntax.functor._\n+import doobie._\n+import doobie.LogHandler\n+import doobie.free.connection.ConnectionIO\n+import doobie.implicits._\n+import doobie.util.log\n+import scala.concurrent.ExecutionContext\n+\n+object Connection {\n+\n+  type T = Transactor.Aux[IO, Unit]\n+\n+  def connect(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+      implicit cs: ContextShift[IO]): T =\n+    Transactor\n+      .fromDriverManager[IO](jdbcDriver, jdbcUrl, username, password)(IO.ioConcurrentEffect(cs), cs)\n+}\n+\n+class TriggerDao(xa: Connection.T) {\n+\n+  implicit val logHandler: log.LogHandler = doobie.util.log.LogHandler.jdkLogHandler\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+  def transact[A](query: ConnectionIO[A]): IO[A] =\n+    query.transact(xa)\n+}\n+\n+object TriggerDao {\n+  def apply(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+      implicit ec: ExecutionContext): TriggerDao = {\n+    val cs: ContextShift[IO] = IO.contextShift(ec)\n+    new TriggerDao(Connection.connect(jdbcDriver, jdbcUrl, username, password)(cs))\n+  }\n+\n+  def initialize(implicit log: LogHandler): ConnectionIO[Unit] = {\n+    val createTriggerTable: Fragment = sql\"\"\"\n+        create table running_triggers(\n+          trigger_id uuid primary key,\n+          party_token text not null,\n+          trigger_name text not null"
  },
  {
    "id" : "89ac0c98-14c8-417b-8465-d4169e95be98",
    "prId" : 6062,
    "comments" : [
      {
        "id" : "67a71e42-b88c-445c-b10f-a143e07dc5e1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Your table is called `dar_packages` but one DAR has multiple dalfs and therefore package ids. I think you mean `dalf_packages` or just `dalfs`.",
        "createdAt" : "2020-05-21T06:44:36Z",
        "updatedAt" : "2020-05-21T22:33:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "30baa950bdb2fc1851cd1b480587cacb471b9a2f",
    "line" : 54,
    "diffHunk" : "@@ -0,0 +1,59 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import cats.effect.{ContextShift, IO}\n+import cats.syntax.apply._\n+import cats.syntax.functor._\n+import doobie._\n+import doobie.LogHandler\n+import doobie.free.connection.ConnectionIO\n+import doobie.implicits._\n+import doobie.util.log\n+import scala.concurrent.ExecutionContext\n+\n+object Connection {\n+\n+  type T = Transactor.Aux[IO, Unit]\n+\n+  def connect(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+      implicit cs: ContextShift[IO]): T =\n+    Transactor\n+      .fromDriverManager[IO](jdbcDriver, jdbcUrl, username, password)(IO.ioConcurrentEffect(cs), cs)\n+}\n+\n+class TriggerDao(xa: Connection.T) {\n+\n+  implicit val logHandler: log.LogHandler = doobie.util.log.LogHandler.jdkLogHandler\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+  def transact[A](query: ConnectionIO[A]): IO[A] =\n+    query.transact(xa)\n+}\n+\n+object TriggerDao {\n+  def apply(jdbcDriver: String, jdbcUrl: String, username: String, password: String)(\n+      implicit ec: ExecutionContext): TriggerDao = {\n+    val cs: ContextShift[IO] = IO.contextShift(ec)\n+    new TriggerDao(Connection.connect(jdbcDriver, jdbcUrl, username, password)(cs))\n+  }\n+\n+  def initialize(implicit log: LogHandler): ConnectionIO[Unit] = {\n+    val createTriggerTable: Fragment = sql\"\"\"\n+        create table running_triggers(\n+          trigger_id uuid primary key,\n+          party_token text not null,\n+          trigger_name text not null\n+        )\n+      \"\"\"\n+    val createDarTable: Fragment = sql\"\"\"\n+        create table dar_packages(\n+          package_id text primary key,"
  }
]