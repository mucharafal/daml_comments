[
  {
    "id" : "2632cefa-076f-40b1-b3a0-bbd710b75eb0",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "3919a193-f194-4fc5-b8b1-665ee328d01e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "hardcoding these kind of values always comes back to bite you. We should make it configurable.",
        "createdAt" : "2020-05-22T16:13:16Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fd95d29d-9ae3-43dd-9df2-d116b17421f2",
        "parentId" : "3919a193-f194-4fc5-b8b1-665ee328d01e",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes. Follow up PR.",
        "createdAt" : "2020-05-22T18:11:24Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dff319ea-0610-429a-b8e6-bfe96d0e9089",
        "parentId" : "3919a193-f194-4fc5-b8b1-665ee328d01e",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Never mind, doing it in this one.",
        "createdAt" : "2020-05-23T17:18:27Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -35,14 +39,27 @@ class TriggerRunner(\n \n   import TriggerRunner.{Message, Stop}\n \n+  // Spawn a trigger runner impl. Supervise it. If it fails to start\n+  // its runner, send it a stop message (the server will later send us\n+  // a stop message in due course in this case so this actor will get\n+  // garbage collected too). If it something bad happens when the\n+  // trigger is running, try to restart it up to 3 times.\n   private val child =\n-    ctx.spawn(Behaviors.supervise(TriggerRunnerImpl(config)).onFailure(restart), name)\n+    ctx.spawn(\n+      Behaviors\n+        .supervise(\n+          Behaviors\n+            .supervise(TriggerRunnerImpl(ctx.self, config))\n+            .onFailure[InitializationException](stop))\n+        .onFailure[RuntimeException](\n+          restart.withLimit(maxNrOfRetries = 3, withinTimeRange = 10.seconds)),"
  },
  {
    "id" : "f38b961d-b722-485a-a52f-bdb15288b7f8",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "29dc4bf2-d180-465f-9877-b7fbfb327bfd",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Is there an analogue of this in `TriggerActor` or is this brand new?",
        "createdAt" : "2020-05-08T19:06:43Z",
        "updatedAt" : "2020-05-08T19:08:40Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "552f2bd8-8f6f-4d87-b7c0-b908944741df",
        "parentId" : "29dc4bf2-d180-465f-9877-b7fbfb327bfd",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Re-reading your PR description, it looks like this entire class is new and this is the key line which does restarts on failure.",
        "createdAt" : "2020-05-08T19:12:29Z",
        "updatedAt" : "2020-05-08T19:12:29Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d2b29859-31be-4b71-9993-f03befdb2ec3",
        "parentId" : "29dc4bf2-d180-465f-9877-b7fbfb327bfd",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "`TriggerRunnerImpl` is basically that which was `TriggerActor`.",
        "createdAt" : "2020-05-08T19:18:09Z",
        "updatedAt" : "2020-05-08T19:18:09Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 39,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import akka.actor.typed.{Behavior, PostStop}\n+import akka.actor.typed.scaladsl.AbstractBehavior\n+import akka.actor.typed.SupervisorStrategy._\n+import akka.actor.typed.Signal\n+import akka.actor.typed.PostStop\n+import akka.actor.typed.scaladsl.Behaviors\n+import akka.actor.typed.scaladsl.ActorContext\n+import akka.stream.Materializer\n+import com.typesafe.scalalogging.StrictLogging\n+import com.daml.grpc.adapter.ExecutionSequencerFactory\n+\n+object TriggerRunner {\n+  type Config = TriggerRunnerImpl.Config\n+\n+  trait Message\n+  final case object Stop extends Message\n+\n+  def apply(config: Config, name: String)(\n+      implicit esf: ExecutionSequencerFactory,\n+      mat: Materializer): Behavior[TriggerRunner.Message] =\n+    Behaviors.setup(ctx => new TriggerRunner(ctx, config, name))\n+}\n+\n+class TriggerRunner(\n+    ctx: ActorContext[TriggerRunner.Message],\n+    config: TriggerRunner.Config,\n+    name: String)(implicit esf: ExecutionSequencerFactory, mat: Materializer)\n+    extends AbstractBehavior[TriggerRunner.Message](ctx)\n+    with StrictLogging {\n+\n+  import TriggerRunner.{Message, Stop}\n+\n+  private val child =\n+    ctx.spawn(Behaviors.supervise(TriggerRunnerImpl(config)).onFailure(restart), name)"
  },
  {
    "id" : "b479a11e-196f-4c48-be60-da7d83f766da",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "17ed74ab-258d-4482-8805-4d4b71cd9f61",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is a super confusing name. We already have a class called `Runner`.",
        "createdAt" : "2020-05-11T07:16:05Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b81d1ed9-fcc0-44a2-b9c1-5dfdfe5aa36c",
        "parentId" : "17ed74ab-258d-4482-8805-4d4b71cd9f61",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "The relationships are :  `TriggerRunner` has-a `TriggerRunnerImpl` has-a `Runner`.",
        "createdAt" : "2020-05-11T13:06:41Z",
        "updatedAt" : "2020-05-11T13:06:41Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 17,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import akka.actor.typed.{Behavior, PostStop}\n+import akka.actor.typed.scaladsl.AbstractBehavior\n+import akka.actor.typed.SupervisorStrategy._\n+import akka.actor.typed.Signal\n+import akka.actor.typed.PostStop\n+import akka.actor.typed.scaladsl.Behaviors\n+import akka.actor.typed.scaladsl.ActorContext\n+import akka.stream.Materializer\n+import com.typesafe.scalalogging.StrictLogging\n+import com.daml.grpc.adapter.ExecutionSequencerFactory\n+\n+object TriggerRunner {"
  },
  {
    "id" : "5533aee9-dbd0-40e2-9203-00960d9991fd",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "a0315f1f-2487-4e65-b3d2-5f47437294e3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This will only deliver the `Stop` message but it won’t wait for the child to actually stop. It seems like we probably should do that.",
        "createdAt" : "2020-05-11T07:19:51Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2b539b31-f0cf-4349-aba9-032b801f5e52",
        "parentId" : "a0315f1f-2487-4e65-b3d2-5f47437294e3",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I'll look into this.",
        "createdAt" : "2020-05-11T12:48:41Z",
        "updatedAt" : "2020-05-11T12:48:41Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 44,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import akka.actor.typed.{Behavior, PostStop}\n+import akka.actor.typed.scaladsl.AbstractBehavior\n+import akka.actor.typed.SupervisorStrategy._\n+import akka.actor.typed.Signal\n+import akka.actor.typed.PostStop\n+import akka.actor.typed.scaladsl.Behaviors\n+import akka.actor.typed.scaladsl.ActorContext\n+import akka.stream.Materializer\n+import com.typesafe.scalalogging.StrictLogging\n+import com.daml.grpc.adapter.ExecutionSequencerFactory\n+\n+object TriggerRunner {\n+  type Config = TriggerRunnerImpl.Config\n+\n+  trait Message\n+  final case object Stop extends Message\n+\n+  def apply(config: Config, name: String)(\n+      implicit esf: ExecutionSequencerFactory,\n+      mat: Materializer): Behavior[TriggerRunner.Message] =\n+    Behaviors.setup(ctx => new TriggerRunner(ctx, config, name))\n+}\n+\n+class TriggerRunner(\n+    ctx: ActorContext[TriggerRunner.Message],\n+    config: TriggerRunner.Config,\n+    name: String)(implicit esf: ExecutionSequencerFactory, mat: Materializer)\n+    extends AbstractBehavior[TriggerRunner.Message](ctx)\n+    with StrictLogging {\n+\n+  import TriggerRunner.{Message, Stop}\n+\n+  private val child =\n+    ctx.spawn(Behaviors.supervise(TriggerRunnerImpl(config)).onFailure(restart), name)\n+\n+  override def onMessage(msg: Message): Behavior[Message] =\n+    Behaviors.receiveMessagePartial[Message] {\n+      case Stop =>\n+        child ! Stop"
  },
  {
    "id" : "850cfdb4-a8da-4dfc-9ab6-eb74f5d36638",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "8f3d7d64-828d-41e9-9e21-bd2a2cd5d51b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What’s the reason for this being a class instead of an `Object` like `TriggerRunnerImpl`?",
        "createdAt" : "2020-05-11T07:22:20Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9f93e1be-0015-465e-926d-a2968444195e",
        "parentId" : "8f3d7d64-828d-41e9-9e21-bd2a2cd5d51b",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "`TriggerRunner` maintains state in the form a data member, `TriggerRunnerImpl` passes immutable state around as parameters. It's the difference between the functional vs. the object oriented style. I fully expect the former could be rewritten in the functional approach but in this instance it seemed easier to just go with the OO style (consistent with this example https://doc.akka.io/docs/akka/current/typed/guide/tutorial_1.html#failure-handling).",
        "createdAt" : "2020-05-11T13:00:40Z",
        "updatedAt" : "2020-05-11T13:00:41Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 29,
    "diffHunk" : "@@ -0,0 +1,54 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import akka.actor.typed.{Behavior, PostStop}\n+import akka.actor.typed.scaladsl.AbstractBehavior\n+import akka.actor.typed.SupervisorStrategy._\n+import akka.actor.typed.Signal\n+import akka.actor.typed.PostStop\n+import akka.actor.typed.scaladsl.Behaviors\n+import akka.actor.typed.scaladsl.ActorContext\n+import akka.stream.Materializer\n+import com.typesafe.scalalogging.StrictLogging\n+import com.daml.grpc.adapter.ExecutionSequencerFactory\n+\n+object TriggerRunner {\n+  type Config = TriggerRunnerImpl.Config\n+\n+  trait Message\n+  final case object Stop extends Message\n+\n+  def apply(config: Config, name: String)(\n+      implicit esf: ExecutionSequencerFactory,\n+      mat: Materializer): Behavior[TriggerRunner.Message] =\n+    Behaviors.setup(ctx => new TriggerRunner(ctx, config, name))\n+}\n+\n+class TriggerRunner("
  }
]