[
  {
    "id" : "12b677cf-8fae-4687-b954-cb8f8d9e09f9",
    "prId" : 7205,
    "comments" : [
      {
        "id" : "6f72ed61-e8af-47e4-a634-cfd29a247d73",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "20:58:59.499 [TriggerService-akka.actor.default-dispatcher-9] INFO  c.d.l.e.trigger.TriggerRunnerImpl - Trigger 61bc6730-fcbe-4613-a93f-ad588906e511 stopped (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=61bc6730-fcbe-4613-a93f-ad588906e511})",
        "createdAt" : "2020-09-02T21:05:30Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 64,
    "diffHunk" : "@@ -165,15 +173,15 @@ object TriggerRunnerImpl {\n               // Don't think about trying to send the server a message\n               // here. It won't receive it (many Bothans died to bring\n               // us this information).\n-              ctx.log.info(s\"Trigger $name is stopping\")\n+              logger.info(s\"Trigger $name stopped\")"
  },
  {
    "id" : "4be3a9ab-0a68-4bf5-aa06-d3173833eca1",
    "prId" : 7205,
    "comments" : [
      {
        "id" : "69935845-3a79-4a38-b99d-3214156b9a11",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "20:57:35.926 [TriggerService-akka.actor.default-dispatcher-8] INFO  c.d.l.e.trigger.TriggerRunnerImpl - Trigger 821fb28a-bec4-4047-b4e0-80275157711f is being restarted (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=821fb28a-bec4-4047-b4e0-80275157711f})",
        "createdAt" : "2020-09-02T21:06:05Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 73,
    "diffHunk" : "@@ -165,15 +173,15 @@ object TriggerRunnerImpl {\n               // Don't think about trying to send the server a message\n               // here. It won't receive it (many Bothans died to bring\n               // us this information).\n-              ctx.log.info(s\"Trigger $name is stopping\")\n+              logger.info(s\"Trigger $name stopped\")\n               killSwitch.shutdown\n               Behaviors.stopped\n             case (_, PreRestart) =>\n               // No need to send any messages here. The server has\n               // already been informed of the earlier failure and in\n               // the process of being restarted, will be informed of\n               // the start along the way.\n-              ctx.log.info(s\"Trigger $name is being restarted\")\n+              logger.info(s\"Trigger $name is being restarted\")"
  },
  {
    "id" : "4aef6300-7ceb-4e0a-96bb-05bbfc787da3",
    "prId" : 7205,
    "comments" : [
      {
        "id" : "2fd71532-8c06-46a1-9260-010d47461860",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "20:58:59.462 [TriggerService-akka.actor.default-dispatcher-8] INFO  c.d.l.e.trigger.TriggerRunnerImpl - Trigger 61bc6730-fcbe-4613-a93f-ad588906e511 is starting (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=61bc6730-fcbe-4613-a93f-ad588906e511})",
        "createdAt" : "2020-09-02T21:06:31Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 47,
    "diffHunk" : "@@ -35,24 +36,30 @@ object TriggerRunnerImpl {\n       trigger: Trigger,\n       ledgerConfig: LedgerConfig,\n       restartConfig: TriggerRestartConfig,\n-  )\n+  ) {\n+    private[trigger] def loggingExtension: Map[String, String] =\n+      trigger.loggingExtension + (\"triggerId\" -> triggerInstance.toString)\n+  }\n \n   import TriggerRunner.{Message, Stop}\n   final private case class Failed(error: Throwable) extends Message\n   final private case class QueryACSFailed(cause: Throwable) extends Message\n   final private case class QueriedACS(runner: Runner, acs: Seq[CreatedEvent], offset: LedgerOffset)\n       extends Message\n \n+  private[this] val logger = ContextualizedLogger get getClass\n+\n   def apply(config: Config)(\n       implicit esf: ExecutionSequencerFactory,\n-      mat: Materializer): Behavior[Message] =\n+      mat: Materializer,\n+      loggingContext: LoggingContextOf[Config with Trigger]): Behavior[Message] =\n     Behaviors.setup { ctx =>\n       val name = ctx.self.path.name\n       implicit val ec: ExecutionContext = ctx.executionContext\n       val triggerInstance = config.triggerInstance\n       // Report to the server that this trigger is starting.\n       config.server ! TriggerStarting(triggerInstance)\n-      ctx.log.info(s\"Trigger $name is starting\")\n+      logger.info(s\"Trigger $name is starting\")"
  },
  {
    "id" : "095b59fb-2b47-4ed2-acd8-ef1af87d430a",
    "prId" : 6248,
    "comments" : [
      {
        "id" : "3f384aa0-f37b-43bf-a7ba-574c7efe47ff",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Maybe there's an opportunity to refactor here as the behaviour when `wasStopped` is the basically the same for 2/3 messages, i.e. you could check `wasStopped` before the message. Not for this PR though.",
        "createdAt" : "2020-06-05T20:48:19Z",
        "updatedAt" : "2020-06-05T21:07:51Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d418228cbcdf661bd90d9677f958b857e988d2ef",
    "line" : 3,
    "diffHunk" : "@@ -82,31 +82,30 @@ object TriggerRunnerImpl {\n         Behaviors.receiveMessagePartial[Message] {\n           case QueryACSFailed(cause) =>\n             if (wasStopped) {"
  },
  {
    "id" : "42eff7f2-e97c-42f3-8dc5-354918a76212",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "7c260a47-0f7d-406c-b9a4-05133b30653c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If I have a token that gives me `readAs` but not `actAs` the trigger will start up successfully but fail as soon as it tries to do anything. A trigger without `actAs` is completely useless so maybe it would make sense to change the logic for detecting that you only have a single party to verify that the party has `actAs`?",
        "createdAt" : "2020-05-25T14:30:54Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0255d969-6bfa-4457-a9ee-f5d145125e85",
        "parentId" : "7c260a47-0f7d-406c-b9a4-05133b30653c",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "That's a good suggestion. I'll think about that (read, will almost certainly implement that).\r\n\r\nFWIW, the current (expected) behavior is that the actor running the trigger will hit the max retries almost immediately and will be terminated so this idea probably won't add much new except perhaps less resources consumed and maybe better error reporting.",
        "createdAt" : "2020-05-25T14:43:30Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 122,
    "diffHunk" : "@@ -83,9 +132,14 @@ object TriggerRunnerImpl {\n               // is sent to a now terminated actor. We should fix this\n               // somehowâ„¢.\n               ctx.pipeToSelf(trigger) {\n-                case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n-                case Failure(cause) => Failed(cause)\n+                case Success(_) =>\n+                  Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n+                case Failure(cause) =>\n+                  Failed(cause)\n               }\n+              // Report to the server that this trigger is entering"
  },
  {
    "id" : "6b12eece-4450-479d-8ce2-33a8f3b7a188",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "6a1d818d-33fa-4d3d-a9c1-f001d989aed3",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Delete",
        "createdAt" : "2020-05-26T15:48:50Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -12,6 +13,7 @@ import com.daml.ledger.api.refinements.ApiTypes.Party\n import io.grpc.netty.NettyChannelBuilder\n import scala.concurrent.{ExecutionContext, Future}\n import scala.util.{Failure, Success}\n+//import scala.concurrent.duration._"
  },
  {
    "id" : "29e87a41-b9ce-4bca-acf9-4127b525b41c",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "59e58402-ab16-4c9b-aee5-4bbe5381090b",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Delete this comment",
        "createdAt" : "2020-05-26T15:49:56Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -24,28 +26,45 @@ import com.daml.ledger.client.configuration.{\n   LedgerClientConfiguration,\n   LedgerIdRequirement\n }\n+import com.daml.jwt.domain.Jwt\n+\n+import java.util.UUID\n+import java.time.Duration\n \n object TriggerRunnerImpl {\n   case class Config(\n+      server: ActorRef[Server.Message],\n+      triggerId: UUID, // trigger id"
  },
  {
    "id" : "7ea02b10-45fb-4250-9115-d67072705c13",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "7c23dba9-cc2d-4f1f-909f-878437517ed4",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Perhaps rename field to `partyJwt` or something more descriptive",
        "createdAt" : "2020-05-26T15:50:46Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -24,28 +26,45 @@ import com.daml.ledger.client.configuration.{\n   LedgerClientConfiguration,\n   LedgerIdRequirement\n }\n+import com.daml.jwt.domain.Jwt\n+\n+import java.util.UUID\n+import java.time.Duration\n \n object TriggerRunnerImpl {\n   case class Config(\n+      server: ActorRef[Server.Message],\n+      triggerId: UUID, // trigger id\n+      jwt: Jwt, // trigger token"
  },
  {
    "id" : "d2e8de80-3d05-422a-9d2f-53f6031b065d",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "b91a9c3c-5d89-478d-9bf2-0f1879f72d86",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Could we send a `Stop` message to the parent TriggerRunner directly here instead of going through the Server? It looks like the Server doesn't do anything besides stop the TriggerRunner, and we have access to the parent here too.",
        "createdAt" : "2020-05-26T16:09:10Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 71,
    "diffHunk" : "@@ -62,16 +81,46 @@ object TriggerRunnerImpl {\n         Behaviors.receiveMessagePartial[Message] {\n           case QueryACSFailed(cause) =>\n             if (wasStopped) {\n-              // Never mind that it failed - we were asked to stop\n-              // anyway.\n-              Behaviors.stopped;\n+              // Report the failure to the server.\n+              config.server ! TriggerInitializationFailure(\n+                config.triggerId,\n+                config.jwt,\n+                parent,\n+                cause.toString)"
  },
  {
    "id" : "6a5b6dc0-7150-4be8-a16f-547323f31a55",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "5cfa3330-664c-43a2-a3d4-ba2175df4bde",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Same comment here",
        "createdAt" : "2020-05-26T16:10:55Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 84,
    "diffHunk" : "@@ -62,16 +81,46 @@ object TriggerRunnerImpl {\n         Behaviors.receiveMessagePartial[Message] {\n           case QueryACSFailed(cause) =>\n             if (wasStopped) {\n-              // Never mind that it failed - we were asked to stop\n-              // anyway.\n-              Behaviors.stopped;\n+              // Report the failure to the server.\n+              config.server ! TriggerInitializationFailure(\n+                config.triggerId,\n+                config.jwt,\n+                parent,\n+                cause.toString)\n+              // Tell our monitor there's been a failure. The\n+              // monitor's supervision strategy will respond to this\n+              // by writing the exception to the log and stopping this\n+              // actor.\n+              throw new InitializationException(\"User stopped\")\n             } else {\n-              throw new RuntimeException(\"ACS query failed\", cause)\n+              // Report the failure to the server.\n+              config.server ! TriggerInitializationFailure(\n+                config.triggerId,\n+                config.jwt,\n+                parent,\n+                cause.toString)"
  },
  {
    "id" : "03ca2b55-df8b-4240-9a63-3fd786d6707b",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "c13f045b-0ba5-4b23-a80c-5b290e2dbb3b",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "The parent will retry this actor until the Server stops the parent, right?",
        "createdAt" : "2020-05-26T16:12:11Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 76,
    "diffHunk" : "@@ -62,16 +81,46 @@ object TriggerRunnerImpl {\n         Behaviors.receiveMessagePartial[Message] {\n           case QueryACSFailed(cause) =>\n             if (wasStopped) {\n-              // Never mind that it failed - we were asked to stop\n-              // anyway.\n-              Behaviors.stopped;\n+              // Report the failure to the server.\n+              config.server ! TriggerInitializationFailure(\n+                config.triggerId,\n+                config.jwt,\n+                parent,\n+                cause.toString)\n+              // Tell our monitor there's been a failure. The\n+              // monitor's supervision strategy will respond to this\n+              // by writing the exception to the log and stopping this\n+              // actor.\n+              throw new InitializationException(\"User stopped\")"
  },
  {
    "id" : "3da13d1a-61c0-4342-bc3c-0b48a5d53aba",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "4db2a83d-e9ef-4df0-b06b-450ad9306e75",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "These two `Failed` cases are where the parent will use the retry strategy (without being stopped by the Server). Is that right?",
        "createdAt" : "2020-05-26T16:14:29Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e36b0c6e-6241-4851-9c00-6cfa13064d9c",
        "parentId" : "4db2a83d-e9ef-4df0-b06b-450ad9306e75",
        "author" : null,
        "body" : "yes",
        "createdAt" : "2020-05-26T16:44:07Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 120,
    "diffHunk" : "@@ -83,9 +132,14 @@ object TriggerRunnerImpl {\n               // is sent to a now terminated actor. We should fix this\n               // somehowâ„¢.\n               ctx.pipeToSelf(trigger) {\n-                case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n-                case Failure(cause) => Failed(cause)\n+                case Success(_) =>\n+                  Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n+                case Failure(cause) =>\n+                  Failed(cause)"
  },
  {
    "id" : "b9af0c53-68f9-4a33-8dc6-6ad35d384b48",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "c055ee0f-6d3a-4450-81cd-3f44c4ab4923",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Why do we need to report that we are starting? The server doesn't do anything in that case, but do you expect that to change?",
        "createdAt" : "2020-05-26T16:24:51Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ee50c6f1-79af-4964-8c2d-486d7b30d935",
        "parentId" : "c055ee0f-6d3a-4450-81cd-3f44c4ab4923",
        "author" : null,
        "body" : "yes, i plan to introduce a table tracking changes so that we can report on the status of a trigger",
        "createdAt" : "2020-05-26T16:44:39Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 55,
    "diffHunk" : "@@ -24,28 +26,45 @@ import com.daml.ledger.client.configuration.{\n   LedgerClientConfiguration,\n   LedgerIdRequirement\n }\n+import com.daml.jwt.domain.Jwt\n+\n+import java.util.UUID\n+import java.time.Duration\n \n object TriggerRunnerImpl {\n   case class Config(\n+      server: ActorRef[Server.Message],\n+      triggerId: UUID, // trigger id\n+      jwt: Jwt, // trigger token\n       compiledPackages: CompiledPackages,\n       trigger: Trigger,\n       ledgerConfig: LedgerConfig,\n       maxInboundMessageSize: Int,\n+      maxFailureNumberOfRetries: Int,\n+      failureRetryTimeRange: Duration,\n       party: Party,\n   )\n \n   import TriggerRunner.{Message, Stop}\n-  final case class Failed(error: Throwable) extends Message\n-  final case class QueryACSFailed(cause: Throwable) extends Message\n-  final case class QueriedACS(runner: Runner, acs: Seq[CreatedEvent], offset: LedgerOffset)\n+  final private case class Failed(error: Throwable) extends Message\n+  final private case class QueryACSFailed(cause: Throwable) extends Message\n+  final private case class QueriedACS(runner: Runner, acs: Seq[CreatedEvent], offset: LedgerOffset)\n       extends Message\n+  import Server.{\n+    TriggerStarting,\n+    TriggerStarted,\n+    TriggerInitializationFailure,\n+    TriggerRuntimeFailure\n+  }\n \n-  def apply(config: Config)(\n+  def apply(parent: ActorRef[Message], config: Config)(\n       implicit esf: ExecutionSequencerFactory,\n       mat: Materializer): Behavior[Message] =\n     Behaviors.setup { ctx =>\n-      implicit val ec: ExecutionContext = ctx.executionContext\n       val name = ctx.self.path.name\n+      implicit val ec: ExecutionContext = ctx.executionContext\n+      // Report to the server that this trigger is starting.\n+      config.server ! TriggerStarting(config.triggerId, config.jwt, parent)"
  },
  {
    "id" : "29d6010c-a5d6-488f-b2eb-dd0dacd64ea6",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "6c424cad-20ac-4c19-8703-96355bd66457",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "This seems redundant",
        "createdAt" : "2020-05-26T16:30:28Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : null,
    "diffHunk" : "@@ -94,28 +148,46 @@ object TriggerRunnerImpl {\n             queryingACS(wasStopped = true)\n         }\n \n-      // Trigger loop is started, wait until we should stop.\n+      // The trigger loop is running. The only thing to do now is wait\n+      // to be told to stop or respond to failures.\n       def running(killSwitch: KillSwitch) =\n         Behaviors\n           .receiveMessagePartial[Message] {\n             case Stop =>\n+              // Don't think about trying to send the server a message\n+              // here. It won't receive it (I found out the hard way).\n               Behaviors.stopped\n             case Failed(cause) =>\n-              // In the event 'runWithACS' completes it's because the\n-              // stream is broken. Throw an exception allowing our\n-              // supervisor to restart us.\n+              // Report the failure to the server.\n+              config.server ! TriggerRuntimeFailure(\n+                config.triggerId,\n+                config.jwt,\n+                parent,\n+                cause.toString)\n+              // Tell our monitor there's been a failure. The\n+              // monitor's supervisor strategy will respond to this by\n+              // writing the exception to the log and attempting to\n+              // restart this actor up to some number of times.\n               throw new RuntimeException(cause)\n           }\n           .receiveSignal {\n             case (_, PostStop) =>\n+              // Don't think about trying to send the server a message\n+              // here. It won't receive it (many Bothans died to bring\n+              // us this information).\n               ctx.log.info(s\"Trigger ${name} is stopping\")\n               killSwitch.shutdown\n               Behaviors.stopped\n             case (_, PreRestart) =>\n+              // No need to send any messages here. The server has\n+              // already been informed of the earlier failure and in\n+              // the process of being restarted, will be informed of\n+              // the start along the way.\n               ctx.log.info(s\"Trigger ${name} is being restarted\")\n               Behaviors.same\n           }\n \n+      // The ACS query is a future."
  },
  {
    "id" : "725ca503-a934-4b4c-92e8-738822d6fc90",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "adc7bd02-4093-403b-8414-369fe8fccea3",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "This is new. Previously, `Failed` messages were not handled.",
        "createdAt" : "2020-05-08T17:47:58Z",
        "updatedAt" : "2020-05-08T17:50:49Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 101,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import akka.actor.typed.{Behavior, PostStop}\n+import akka.actor.typed.PostStop\n+import akka.actor.typed.PreRestart\n+import akka.actor.typed.scaladsl.Behaviors\n+import akka.stream.{KillSwitch, KillSwitches, Materializer}\n+import com.daml.ledger.api.refinements.ApiTypes.Party\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.util.{Failure, Success}\n+import scalaz.syntax.tag._\n+import com.daml.lf.CompiledPackages\n+import com.daml.grpc.adapter.{ExecutionSequencerFactory}\n+import com.daml.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.daml.ledger.api.v1.event.CreatedEvent\n+import com.daml.ledger.api.v1.ledger_offset.LedgerOffset\n+import com.daml.ledger.client.LedgerClient\n+import com.daml.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement\n+}\n+\n+object TriggerRunnerImpl {\n+  case class Config(\n+      compiledPackages: CompiledPackages,\n+      trigger: Trigger,\n+      ledgerConfig: LedgerConfig,\n+      party: Party,\n+  )\n+\n+  import TriggerRunner.{Message, Stop}\n+  final case class Failed(error: Throwable) extends Message\n+  final case class QueryACSFailed(cause: Throwable) extends Message\n+  final case class QueriedACS(runner: Runner, acs: Seq[CreatedEvent], offset: LedgerOffset)\n+      extends Message\n+\n+  def apply(config: Config)(\n+      implicit esf: ExecutionSequencerFactory,\n+      mat: Materializer): Behavior[Message] =\n+    Behaviors.setup { ctx =>\n+      implicit val ec: ExecutionContext = ctx.executionContext\n+      val name = ctx.self.path.name\n+      ctx.log.info(s\"Trigger ${name} is starting\")\n+      val appId = ApplicationId(name)\n+      val clientConfig = LedgerClientConfiguration(\n+        applicationId = appId.unwrap,\n+        ledgerIdRequirement = LedgerIdRequirement(\"\", enabled = false),\n+        commandClient = CommandClientConfiguration.default.copy(\n+          defaultDeduplicationTime = config.ledgerConfig.commandTtl),\n+        sslContext = None,\n+      )\n+\n+      // Waiting for the ACS query to finish so we can build the\n+      // initial state.\n+      def queryingACS(wasStopped: Boolean): Behaviors.Receive[Message] =\n+        Behaviors.receiveMessagePartial[Message] {\n+          case QueryACSFailed(cause) =>\n+            if (wasStopped) {\n+              // Never mind that it failed - we were asked to stop\n+              // anyway.\n+              Behaviors.stopped;\n+            } else {\n+              throw new RuntimeException(\"ACS query failed\", cause)\n+            }\n+          case QueriedACS(runner, acs, offset) =>\n+            if (wasStopped) {\n+              Behaviors.stopped;\n+            } else {\n+              val (killSwitch, trigger) = runner.runWithACS(\n+                acs,\n+                offset,\n+                msgFlow = KillSwitches.single[TriggerMsg],\n+                name,\n+              )\n+              // TODO If we are stopped we will end up causing the\n+              // future to complete which will trigger a message that\n+              // is sent to a now terminated actor. We should fix this\n+              // somehowâ„¢.\n+              ctx.pipeToSelf(trigger) {\n+                case Success(_) => Failed(new RuntimeException(\"Trigger exited unexpectedly\"))\n+                case Failure(cause) => Failed(cause)\n+              }\n+              running(killSwitch)\n+            }\n+          case Stop =>\n+            // We got a stop message but the ACS query hasn't\n+            // completed yet.\n+            queryingACS(wasStopped = true)\n+        }\n+\n+      // Trigger loop is started, wait until we should stop.\n+      def running(killSwitch: KillSwitch) =\n+        Behaviors\n+          .receiveMessagePartial[Message] {\n+            case Stop =>\n+              Behaviors.stopped\n+            case Failed(cause) =>"
  },
  {
    "id" : "22556919-3260-4f03-b71c-597c9a18844b",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "87d88970-6b15-4c7c-8c33-7cc4e3bafeb2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe this is an akka-pattern Iâ€™m not aware off but Iâ€™ve only seen `Impl` be used if you have an abstract interface that you are implementing. This is not what is going on here so it seems rather confusing.",
        "createdAt" : "2020-05-11T07:23:41Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "90d86b7b-8312-4910-84b3-86f39f788c0c",
        "parentId" : "87d88970-6b15-4c7c-8c33-7cc4e3bafeb2",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Maybe the nomenclature is non-idiomatic for Scala (it's common in C++ e.g. `pImpl`) but at the end of the day, it's nothing more than the classic \"handle-body\" or \"letter-envelope\" pattern.",
        "createdAt" : "2020-05-11T13:02:04Z",
        "updatedAt" : "2020-05-11T13:02:04Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 27,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import akka.actor.typed.{Behavior, PostStop}\n+import akka.actor.typed.PostStop\n+import akka.actor.typed.PreRestart\n+import akka.actor.typed.scaladsl.Behaviors\n+import akka.stream.{KillSwitch, KillSwitches, Materializer}\n+import com.daml.ledger.api.refinements.ApiTypes.Party\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.util.{Failure, Success}\n+import scalaz.syntax.tag._\n+import com.daml.lf.CompiledPackages\n+import com.daml.grpc.adapter.{ExecutionSequencerFactory}\n+import com.daml.ledger.api.refinements.ApiTypes.ApplicationId\n+import com.daml.ledger.api.v1.event.CreatedEvent\n+import com.daml.ledger.api.v1.ledger_offset.LedgerOffset\n+import com.daml.ledger.client.LedgerClient\n+import com.daml.ledger.client.configuration.{\n+  CommandClientConfiguration,\n+  LedgerClientConfiguration,\n+  LedgerIdRequirement\n+}\n+\n+object TriggerRunnerImpl {"
  },
  {
    "id" : "294eb99d-d6b5-40e9-9675-b45f42573f0a",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "84d743a5-567e-4c56-bfa1-eb11fcce0233",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can you please try to not shuffle all of this code around in the same PR where you are making actual changes.",
        "createdAt" : "2020-05-11T07:24:11Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7804fdb4-454b-4538-96bb-93b335904d99",
        "parentId" : "84d743a5-567e-4c56-bfa1-eb11fcce0233",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "That's fair. I'll resist the urge in future and land such things in two parts.",
        "createdAt" : "2020-05-11T13:03:14Z",
        "updatedAt" : "2020-05-11T13:03:14Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 1,
    "diffHunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved."
  }
]