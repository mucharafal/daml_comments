[
  {
    "id" : "4a700980-9c45-4582-b82b-94ef139c1f79",
    "prId" : 6528,
    "comments" : [
      {
        "id" : "bc053d58-76f1-4be4-98e7-79ec8934aaf5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I could have sworn that there was a warning for this that you could enable and enforce but now I cannot find it anymore :thinking: ",
        "createdAt" : "2020-06-29T17:09:07Z",
        "updatedAt" : "2020-06-29T17:09:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "28bddbb2-bd2b-43e5-9223-a299cbe7b6e5",
        "parentId" : "bc053d58-76f1-4be4-98e7-79ec8934aaf5",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yeah, not sure why but IntelliJ's scalafmt highlights more things than scalafmt in our dev env enforces.",
        "createdAt" : "2020-06-29T17:25:02Z",
        "updatedAt" : "2020-06-29T17:25:02Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "014c0880-29bb-4461-98d9-59e88dbf9d13",
        "parentId" : "bc053d58-76f1-4be4-98e7-79ec8934aaf5",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "scalafmt is purely a formatter. IntelliJ can run scalafmt, and we configure it to do so. _Unrelatedly_, IntelliJ has a ton of (mostly useful, sometimes broken) static analysis (which it calls \"code inspections\") that it can perform. This includes one that tells you to add a return type to any non-private function definition, which is on by default.\r\n\r\nWe could, in theory, [run IntelliJ code inspections from the command line](https://www.jetbrains.com/help/idea/command-line-code-inspector.html), and therefore in CI, but I've never tried it and I'm pretty sure @S11001001's head would explode if I did.",
        "createdAt" : "2020-06-30T09:31:00Z",
        "updatedAt" : "2020-06-30T09:31:01Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "18541f3a-a54d-4e29-9f31-53650c4c21a6",
        "parentId" : "bc053d58-76f1-4be4-98e7-79ec8934aaf5",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "And this is a case where requiring the annotation is silly. It's implied by `read` being an override; `override`, if used, even imposes an expected type context on the body. Moreover, if this was an implicit val, the \"public\" signature would actually be private.",
        "createdAt" : "2020-06-30T15:38:43Z",
        "updatedAt" : "2020-06-30T15:38:44Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dfb0b3b9f1e2d33f2c506284b31907dac1277a5e",
    "line" : 6,
    "diffHunk" : "@@ -9,8 +9,8 @@ import spray.json.{JsString, JsValue, JsonFormat, deserializationError}\n \n object Request {\n   implicit object IdentifierFormat extends JsonFormat[Identifier] {\n-    def read(value: JsValue) = value match {\n-      case JsString(s) => {\n+    def read(value: JsValue): Identifier = value match {"
  },
  {
    "id" : "865764ad-e499-4fd7-9be4-287600ab549e",
    "prId" : 5808,
    "comments" : [
      {
        "id" : "43e360a3-8070-4a8f-9203-6b1fdaca5a1d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "iirc since I wrote this we added a `toString` method for `Identifier` so you might be able to simply this now.",
        "createdAt" : "2020-05-01T14:14:54Z",
        "updatedAt" : "2020-05-01T14:20:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "90f8df6c2c2e02c0fc86275c0a6f6fc0d058a9e6",
    "line" : 31,
    "diffHunk" : "@@ -0,0 +1,39 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import com.daml.lf.data.Ref.{DottedName, Identifier, PackageId, QualifiedName}\n+import spray.json.DefaultJsonProtocol._\n+import spray.json.{JsString, JsValue, JsonFormat, deserializationError}\n+\n+object Request {\n+  implicit object IdentifierFormat extends JsonFormat[Identifier] {\n+    def read(value: JsValue) = value match {\n+      case JsString(s) => {\n+        val components = s.split(\":\")\n+        if (components.length == 3) {\n+          val parsed = for {\n+            pkgId <- PackageId.fromString(components(0))\n+            mod <- DottedName.fromString(components(1))\n+            entity <- DottedName.fromString(components(2))\n+          } yield Identifier(pkgId, QualifiedName(mod, entity))\n+          parsed match {\n+            case Left(e) => deserializationError(e)\n+            case Right(id) => id\n+          }\n+        } else {\n+          deserializationError(s\"Expected trigger identifier of the form pkgid:mod:name but got $s\")\n+        }\n+      }\n+      case _ => deserializationError(\"Expected trigger identifier of the form pkgid:mod:name\")\n+    }\n+    def write(id: Identifier) = JsString(s\"${id.packageId}:${id.qualifiedName}\")"
  },
  {
    "id" : "365d44ec-bb7c-48a1-ae6d-520e7b3d8eed",
    "prId" : 5808,
    "comments" : [
      {
        "id" : "a2e2d73b-8cff-4851-b28a-1983379477e0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Similar question as on the other PR (but no need to address now): We should be using the `Party` newtype.",
        "createdAt" : "2020-05-01T14:20:38Z",
        "updatedAt" : "2020-05-01T14:20:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3b154ab1-320b-405f-a84d-a7baf6fd36a4",
        "parentId" : "a2e2d73b-8cff-4851-b28a-1983379477e0",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Implemented this but it's a bit bigger than I expected, so will raise a separate PR for it",
        "createdAt" : "2020-05-01T16:59:48Z",
        "updatedAt" : "2020-05-01T16:59:49Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "90f8df6c2c2e02c0fc86275c0a6f6fc0d058a9e6",
    "line" : 34,
    "diffHunk" : "@@ -0,0 +1,39 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.engine.trigger\n+\n+import com.daml.lf.data.Ref.{DottedName, Identifier, PackageId, QualifiedName}\n+import spray.json.DefaultJsonProtocol._\n+import spray.json.{JsString, JsValue, JsonFormat, deserializationError}\n+\n+object Request {\n+  implicit object IdentifierFormat extends JsonFormat[Identifier] {\n+    def read(value: JsValue) = value match {\n+      case JsString(s) => {\n+        val components = s.split(\":\")\n+        if (components.length == 3) {\n+          val parsed = for {\n+            pkgId <- PackageId.fromString(components(0))\n+            mod <- DottedName.fromString(components(1))\n+            entity <- DottedName.fromString(components(2))\n+          } yield Identifier(pkgId, QualifiedName(mod, entity))\n+          parsed match {\n+            case Left(e) => deserializationError(e)\n+            case Right(id) => id\n+          }\n+        } else {\n+          deserializationError(s\"Expected trigger identifier of the form pkgid:mod:name but got $s\")\n+        }\n+      }\n+      case _ => deserializationError(\"Expected trigger identifier of the form pkgid:mod:name\")\n+    }\n+    def write(id: Identifier) = JsString(s\"${id.packageId}:${id.qualifiedName}\")\n+  }\n+\n+  case class StartParams(identifier: Identifier, party: String)"
  }
]