[
  {
    "id" : "24345b8a-6052-445b-a04e-994ddbbcd00f",
    "prId" : 6768,
    "comments" : [
      {
        "id" : "32dacaac-0ee4-422c-8f6e-60dc5616d57b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe factor this out somewhere?",
        "createdAt" : "2020-07-17T08:12:55Z",
        "updatedAt" : "2020-07-20T13:14:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "310d5a1bb1a6b68dbb3229efc95a2362d60d7257",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,93 @@\n+package com.daml.lf.engine.trigger\n+\n+import java.net.{InetAddress, ServerSocket, Socket}\n+\n+import akka.actor.ActorSystem\n+import akka.stream.Materializer\n+import com.daml.bazeltools.BazelRunfiles\n+import com.daml.ledger.api.domain.LedgerId\n+import com.daml.platform.common.LedgerIdMode\n+import com.daml.platform.sandbox.SandboxServer\n+import com.daml.platform.sandbox.config.SandboxConfig\n+import com.daml.platform.services.time.TimeProviderType\n+import com.daml.ports.Port\n+import com.daml.timer.RetryStrategy\n+\n+import scala.concurrent.duration._\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.sys.process.Process\n+\n+object AuthServiceFixture {\n+\n+  private def findFreePort(): Port = {\n+    val socket = new ServerSocket(Port(0).value)\n+    try {\n+      Port(socket.getLocalPort)\n+    } finally {\n+      socket.close()\n+    }\n+  }\n+\n+  def withAuthServiceClient[A](testName: String)(testFn: AuthServiceClient => Future[A])(\n+      implicit system: ActorSystem,\n+      mat: Materializer,\n+      ec: ExecutionContext): Future[A] = {\n+    val adminLedgerId = LedgerId(\"admin-ledger\")"
  },
  {
    "id" : "b6333bee-23d1-4173-8320-2e02712a316e",
    "prId" : 6768,
    "comments" : [
      {
        "id" : "566349b0-0947-4286-aec8-4e725fdbdd84",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "6 seconds sounds fairly small for CI.",
        "createdAt" : "2020-07-17T08:13:20Z",
        "updatedAt" : "2020-07-20T13:14:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "310d5a1bb1a6b68dbb3229efc95a2362d60d7257",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,93 @@\n+package com.daml.lf.engine.trigger\n+\n+import java.net.{InetAddress, ServerSocket, Socket}\n+\n+import akka.actor.ActorSystem\n+import akka.stream.Materializer\n+import com.daml.bazeltools.BazelRunfiles\n+import com.daml.ledger.api.domain.LedgerId\n+import com.daml.platform.common.LedgerIdMode\n+import com.daml.platform.sandbox.SandboxServer\n+import com.daml.platform.sandbox.config.SandboxConfig\n+import com.daml.platform.services.time.TimeProviderType\n+import com.daml.ports.Port\n+import com.daml.timer.RetryStrategy\n+\n+import scala.concurrent.duration._\n+import scala.concurrent.{ExecutionContext, Future}\n+import scala.sys.process.Process\n+\n+object AuthServiceFixture {\n+\n+  private def findFreePort(): Port = {\n+    val socket = new ServerSocket(Port(0).value)\n+    try {\n+      Port(socket.getLocalPort)\n+    } finally {\n+      socket.close()\n+    }\n+  }\n+\n+  def withAuthServiceClient[A](testName: String)(testFn: AuthServiceClient => Future[A])(\n+      implicit system: ActorSystem,\n+      mat: Materializer,\n+      ec: ExecutionContext): Future[A] = {\n+    val adminLedgerId = LedgerId(\"admin-ledger\")\n+    val adminLedgerF = for {\n+      ledger <- Future(\n+        new SandboxServer(\n+          SandboxConfig.default.copy(\n+            port = Port.Dynamic,\n+            timeProviderType = Some(TimeProviderType.Static),\n+            ledgerIdMode = LedgerIdMode.Static(adminLedgerId),\n+          ),\n+          mat))\n+      ledgerPort <- ledger.portF.map(_.value)\n+    } yield (ledger, ledgerPort)\n+\n+    val authServiceBinaryLoc: String = {\n+      val isWindows = sys.props(\"os.name\").toLowerCase.contains(\"windows\")\n+      val extension = if (isWindows) \".exe\" else \"\"\n+      BazelRunfiles.rlocation(\"triggers/service/ref-ledger-authentication-binary\" + extension)\n+    }\n+\n+    val host = InetAddress.getLoopbackAddress\n+\n+    val authServiceInstanceF: Future[(Process, Port)] = for {\n+      port <- Future { findFreePort() }\n+      (_, ledgerPort) <- adminLedgerF\n+      ledgerUrl = \"http://\" + host.getHostAddress + \":\" + ledgerPort.toString\n+      process <- Future {\n+        Process(\n+          Seq(authServiceBinaryLoc),\n+          None,\n+          (\"DABL_AUTHENTICATION_SERVICE_ADDRESS\", host.getHostAddress),\n+          (\"DABL_AUTHENTICATION_SERVICE_PORT\", port.toString),\n+          (\"DABL_AUTHENTICATION_SERVICE_LEDGER_URL\", ledgerUrl)\n+        ).run()\n+      }\n+    } yield (process, port)\n+\n+    // Wait for the auth service instance to be ready to accept connections.\n+    RetryStrategy.constant(attempts = 3, waitTime = 2.seconds) { (_, _) =>"
  }
]