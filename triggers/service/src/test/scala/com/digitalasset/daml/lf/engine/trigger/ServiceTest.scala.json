[
  {
    "id" : "6f8d11b6-2180-436f-a594-a2db730f5598",
    "prId" : 6268,
    "comments" : [
      {
        "id" : "b17aac07-e11b-411f-92c6-13275b694f22",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n  it should \"give an Unauthorized error for a stop request without an authorization header\" in withHttpService(\r\n```\r\nsince we are avoiding hardcoding status codes in the tests.",
        "createdAt" : "2020-06-08T18:47:38Z",
        "updatedAt" : "2020-06-08T18:53:21Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb3cae7bd045ad7332a268f786b30610e352ab8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +469,473 @@  }\n\n  it should \"give a 401 response for a stop request without an authorization header\" in withHttpService(\n    None) { (uri: Uri, client: LedgerClient, ledgerProxy: Proxy) =>\n    val uuid: String = \"ffffffff-ffff-ffff-ffff-ffffffffffff\""
  },
  {
    "id" : "f44d2fb6-35e4-4710-8f03-3e56e1026cac",
    "prId" : 6268,
    "comments" : [
      {
        "id" : "ec7bd2f0-9d18-4f54-ad00-719421e6c5b6",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n  it should \"give a Not Found response for a stop request with unparseable UUID\" in withHttpService(None) {\r\n```",
        "createdAt" : "2020-06-08T18:50:35Z",
        "updatedAt" : "2020-06-08T18:53:21Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb3cae7bd045ad7332a268f786b30610e352ab8",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +487,491 @@  }\n\n  it should \"give a 404 response for a stop request with unparseable UUID\" in withHttpService(None) {\n    (uri: Uri, client: LedgerClient, ledgerProxy: Proxy) =>\n      val uuid: String = \"No More Mr Nice Guy\""
  },
  {
    "id" : "a3465dec-3769-436c-be0e-4a53bca68abc",
    "prId" : 6268,
    "comments" : [
      {
        "id" : "6cb1e499-8505-4981-b275-41e858ff03ed",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "and below too",
        "createdAt" : "2020-06-08T18:51:38Z",
        "updatedAt" : "2020-06-08T18:53:21Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "aeb3cae7bd045ad7332a268f786b30610e352ab8",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +499,503 @@      } yield succeed\n  }\n\n  it should \"give a 404 error response for a stop request on an unknown UUID\" in withHttpService(\n    None) { (uri: Uri, client: LedgerClient, ledgerProxy: Proxy) =>"
  },
  {
    "id" : "fbb4a49e-024d-4ef8-a53b-c953d87bd266",
    "prId" : 6230,
    "comments" : [
      {
        "id" : "adcc2cc5-86b2-491f-9528-bede1d8a8011",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Is it possible it never sees the network loss and doesn't fail / get restarted?",
        "createdAt" : "2020-06-04T18:57:58Z",
        "updatedAt" : "2020-06-04T19:03:27Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "586fbd9c-101d-452b-a276-c03e689992c8",
        "parentId" : "adcc2cc5-86b2-491f-9528-bede1d8a8011",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I've not seen a run to date where that has been the case. If that happens, the test will fail and we'll be forced to re-examine it.",
        "createdAt" : "2020-06-04T19:07:11Z",
        "updatedAt" : "2020-06-04T19:07:11Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b1c6cc8d30c338b7092c14bc7b6997d6ab088e5",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +420,424 @@        _ <- Future { ledgerProxy.enable() }\n        // Check that the trigger survived the outage and that its\n        // history shows it went through a restart.\n        _ <- assertTriggerIds(uri, \"Alice\", _ == Vector(aliceTrigger))\n        _ <- assertTriggerStatus("
  },
  {
    "id" : "81520202-db75-4a82-a479-bc1b3058226d",
    "prId" : 6217,
    "comments" : [
      {
        "id" : "d180ff7c-b43e-4a71-9827-0ba290899412",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesn’t make sense to me. Why does an invalid UUID produce a 404 but a UUID that is not found produces a 422? that seems the wrong way around.",
        "createdAt" : "2020-06-03T18:06:37Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d8f6455b-c807-467a-b07f-dc24a7dbca51",
        "parentId" : "d180ff7c-b43e-4a71-9827-0ba290899412",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "It's an akka thing. If the path (`pathPrefix(\"v1\" / \"stop\" / JavaUUID)`) is invalid (the `JavaUUID` fails to parse), it never makes \"our\" code and a 404 is returned. In the event it is a valid path but the UUID doesn't match any trigger we know we return 422 (unprocessable entity). Make better sense now?",
        "createdAt" : "2020-06-03T18:13:45Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cd2d7dab-0dcc-45c5-bc54-54bf4b670e70",
        "parentId" : "d180ff7c-b43e-4a71-9827-0ba290899412",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I could arrange for a 404 in the second case too if you think that's better?",
        "createdAt" : "2020-06-03T18:15:18Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3e6e8ecf-2743-436b-a427-dcbfc1db0144",
        "parentId" : "d180ff7c-b43e-4a71-9827-0ba290899412",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not really, makes sense that we get a 404 for the invalid UUID but I don’t understand why 422 is a good response here. It is literally a failing lookup. That seems very much like “not found” to me.",
        "createdAt" : "2020-06-03T18:16:04Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "23852483-9674-4bf8-827c-51c104377a80",
        "parentId" : "d180ff7c-b43e-4a71-9827-0ba290899412",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok. Let's go with 404 in both cases.",
        "createdAt" : "2020-06-03T18:19:17Z",
        "updatedAt" : "2020-06-03T18:46:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a0702118a15f8743b69a12a2f5c02b1b5976a97c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +518,522 @@  }\n\n  it should \"stopping a trigger that can't parse as a UUID gives a 404 response\" in withHttpService(\n    None) { (uri: Uri, client: LedgerClient, ledgerProxy: Proxy) =>\n    for {"
  },
  {
    "id" : "1a6ab054-4592-4596-8653-b11c723ca78f",
    "prId" : 6202,
    "comments" : [
      {
        "id" : "1c48e790-0145-4ced-8457-580b578fdfb6",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Why does this result in an initialization failure instead of a runtime failure? Does the trigger `initialize` step fail if the `triggerRule` throws an `error`?",
        "createdAt" : "2020-06-02T23:16:59Z",
        "updatedAt" : "2020-06-02T23:17:33Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d4b77fc-7472-410a-ab9a-f68a60f5fe95",
        "parentId" : "1c48e790-0145-4ced-8457-580b578fdfb6",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "It's possible for `getTriggerSink` to throw an exception in the evaluation of `runWithACS`. When that happens, it does not manifest as a completing future which is what we deem to be runtime failure but is immediate hence the `try`/`catch` and categorization as initialization failure.",
        "createdAt" : "2020-06-02T23:27:14Z",
        "updatedAt" : "2020-06-02T23:29:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ad88ad27f7f43a713c38e12b3c7dfadd241282ae",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +468,472 @@            Vector(\n              \"starting\",\n              \"stopped: initialization failure\",\n            ))\n      } yield succeed"
  },
  {
    "id" : "c15b27dd-06b1-4273-92a7-67ea616bb0fb",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "c02a03bf-c73d-414f-9213-721197536661",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Nice!",
        "createdAt" : "2020-06-01T19:10:28Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d17278fb-7471-4810-98fa-32ea9f4ff799",
        "parentId" : "c02a03bf-c73d-414f-9213-721197536661",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "🎉 ",
        "createdAt" : "2020-06-01T19:44:30Z",
        "updatedAt" : "2020-06-01T20:06:10Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +421,425 @@              \"starting\",\n              \"running\"\n            ))\n      } yield succeed\n  }"
  },
  {
    "id" : "2909c285-0150-4d8f-9d6d-2c7c51ee3ddc",
    "prId" : 6180,
    "comments" : [
      {
        "id" : "70beafeb-6082-4be1-a52e-4abcd9b986b0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It would be nice to also have a test for a trigger that calls `error`.",
        "createdAt" : "2020-06-02T07:02:23Z",
        "updatedAt" : "2020-06-02T07:02:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cc17e283-0c82-4d3a-890d-c7f0fe1f0fed",
        "parentId" : "70beafeb-6082-4be1-a52e-4abcd9b986b0",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "In order that you see similar results to that you mean? The idea is you'd like to see an execution failure that has manifested from the user script itself?",
        "createdAt" : "2020-06-02T11:17:19Z",
        "updatedAt" : "2020-06-02T11:17:20Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "602e38d4-0856-42d1-8278-c89e9b0b1287",
        "parentId" : "70beafeb-6082-4be1-a52e-4abcd9b986b0",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Exactly it should behave basically the same.",
        "createdAt" : "2020-06-02T11:19:34Z",
        "updatedAt" : "2020-06-02T11:19:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "92a65912-149a-403c-abfe-8a28b0f81df4",
        "parentId" : "70beafeb-6082-4be1-a52e-4abcd9b986b0",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Writing such a test for highl-level triggers exposed a problem. See PR https://github.com/digital-asset/daml/pull/6202 for the current best running resolution to that. Low-level tests next and we'll see how it goes.",
        "createdAt" : "2020-06-02T20:53:23Z",
        "updatedAt" : "2020-06-02T20:53:23Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22b3aa22-3eaf-4b0b-b18c-505cada5229a",
        "parentId" : "70beafeb-6082-4be1-a52e-4abcd9b986b0",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Low-level test seems to work. Included with PR https://github.com/digital-asset/daml/pull/6202 as well.",
        "createdAt" : "2020-06-02T21:32:44Z",
        "updatedAt" : "2020-06-02T21:32:44Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "83521744518854aaa6eb08638a03c747bd6bb707",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +418,422 @@              \"starting\",\n              \"running\",\n              \"stopped: runtime failure\",\n              \"starting\",\n              \"running\""
  },
  {
    "id" : "45899359-b153-4c2a-9cb8-02e470819964",
    "prId" : 6178,
    "comments" : [
      {
        "id" : "5ee610d1-ea45-4a96-ac8c-dd7d6d077c15",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Agreed, maybe your trigger history map will help with this?",
        "createdAt" : "2020-06-01T15:48:43Z",
        "updatedAt" : "2020-06-01T16:12:52Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38f3f708-e5c0-4779-ad6f-baf59b4ebc7a",
        "parentId" : "5ee610d1-ea45-4a96-ac8c-dd7d6d077c15",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I hope so!",
        "createdAt" : "2020-06-01T16:05:40Z",
        "updatedAt" : "2020-06-01T16:12:52Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "04ecf179dadd4a9f7a2d54539a58ebe37bd37dd5",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +365,369 @@        _ <- Future { ledgerProxy.enable() }\n        // In the future I hope to be able to prove right here that the\n        // running trigger was failed and restarted. For now, the logs\n        // confirm that to be the case. In any case, the postcondition\n        // is this : the running trigger survives."
  },
  {
    "id" : "94553412-8f3e-42b6-bb36-cf4563a8d6c2",
    "prId" : 6178,
    "comments" : [
      {
        "id" : "3a76f086-5b00-4208-aebb-c9722af82362",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this timing sensitive because we only retry a limited number of times? I guess if we add the `assertTriggerIds(uri, \"Alice\", _.isEmpty)` part from the other test it would fail since we’ve reached the maximum number of retries?",
        "createdAt" : "2020-06-02T06:37:58Z",
        "updatedAt" : "2020-06-02T06:38:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1bb45e59-a3a3-45dd-8409-08a26b0ec63b",
        "parentId" : "3a76f086-5b00-4208-aebb-c9722af82362",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Recall there are two supervisor strategies. Failures to initialize result in stopped triggers, execution failures result in restarts. Suppose an execution failure occurs due to network outage - an attempt will be made to restart it. If the outage is still present as the restart cycles through initialization then the trigger will get stopped (permanently) as an initialization failure. That's where this timing sensitivity comes from. I think this answer indicates that there's room for improvement but I'm not clear yet on how we might do so. To the second question, yes, the wait involved in the `assertTriggerIds` means we'll not recover the network in time for the restart to succeed but as indicated above, not because the max retries of the trigger have been reached but rather because it will be stopped due to initialization failure.",
        "createdAt" : "2020-06-02T11:12:06Z",
        "updatedAt" : "2020-06-02T11:12:07Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "04ecf179dadd4a9f7a2d54539a58ebe37bd37dd5",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +362,366 @@        // due to the lack of ability to initialize the restarted\n        // trigger.\n        _ <- Future { ledgerProxy.disable() }\n        _ <- Future { ledgerProxy.enable() }\n        // In the future I hope to be able to prove right here that the"
  },
  {
    "id" : "a944860f-7ce8-4a9f-8ca0-378c845574c8",
    "prId" : 6153,
    "comments" : [
      {
        "id" : "497a0a07-1c5e-40d5-8a20-7ee22a5ed261",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Instead of adding a bunch of separate tests for DB, you might want to consider abstracting over the backend in the tests and then instantiating all tests once with an in-memory backend and once with a SQL backend. You can still have additional tests for each backend if required but at least you test that the basic functionality works correctly with both.",
        "createdAt" : "2020-06-02T07:27:32Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d4960b7-5986-4498-9448-f495037eb3df",
        "parentId" : "497a0a07-1c5e-40d5-8a20-7ee22a5ed261",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yes good point, I thought of this too. It has the potential downside of making the tests too slow, but would be much easier to make the tests comprehensive. I'll explore this in a later PR.",
        "createdAt" : "2020-06-02T16:01:01Z",
        "updatedAt" : "2020-06-02T16:34:36Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e27d8a43e27c8fcdaccc26c506fee4f3359edba",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +226,230 @@  }\n\n  it should \"add running triggers to the database\" in {\n    connectToPostgresqlServer()\n    createNewDatabase()"
  },
  {
    "id" : "cfd4ea96-c0a2-4704-ae1d-12a6214d5c75",
    "prId" : 6150,
    "comments" : [
      {
        "id" : "aae5fdcb-54f4-4bd2-9055-2f436913e940",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Jolly good of you!",
        "createdAt" : "2020-05-28T22:51:29Z",
        "updatedAt" : "2020-05-28T22:56:45Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "573aceb7e60c06358f08695b2f3b0de6bdf6e81e",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +328,332 @@    } finally {\n      // This isn't strictly neccessary here (since each test gets its\n      // own fixture) but it's jolly decent of us to do it anyway.\n      ledgerProxy.enable()\n    }"
  },
  {
    "id" : "63dda4fb-f241-40c2-a65f-b2c071d8e83c",
    "prId" : 6150,
    "comments" : [
      {
        "id" : "70b45003-2a76-4347-80d2-38432f192a64",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "A more descriptive error might be helpful here, like \"Trigger added despite disabled ledger client\".",
        "createdAt" : "2020-05-28T22:55:19Z",
        "updatedAt" : "2020-05-28T22:56:45Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "573aceb7e60c06358f08695b2f3b0de6bdf6e81e",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +320,324 @@      // table).\n      Await.ready(awaitable = runningTriggersNotEmpty, atMost = 10.seconds)\n      fail(\"Timeout expected\")\n    } catch {\n      // If the assertion times-out the test has succeeded (look to"
  },
  {
    "id" : "e8f16d63-d29b-44e1-9c72-00be40c4f145",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "73b42fc5-52f7-4218-8dbf-eb6818bfd53d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems like a helper function `assertTriggerIds(uri, party, expectedTriggerIds)` would be very useful.",
        "createdAt" : "2020-05-25T14:33:06Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "891f9023-0604-4a30-a055-2a2f6805b653",
        "parentId" : "73b42fc5-52f7-4218-8dbf-eb6818bfd53d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Indeed!",
        "createdAt" : "2020-05-25T14:43:59Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1b04e14d-3fd2-45e1-8b9d-9fc21b2f3608",
        "parentId" : "73b42fc5-52f7-4218-8dbf-eb6818bfd53d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "PR https://github.com/digital-asset/daml/pull/6147",
        "createdAt" : "2020-05-28T16:00:33Z",
        "updatedAt" : "2020-05-28T16:00:33Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +236,240 @@        _ <- Future {\n          eventually {\n            val r = Await.result(for {\n              resp <- listTriggers(uri, \"Bob\")\n              result <- parseTriggerIds(resp)"
  },
  {
    "id" : "5d65c3f5-17f3-48f8-bc1b-6bacca6c2e95",
    "prId" : 6079,
    "comments" : [
      {
        "id" : "56d4d3cc-a66e-4e04-9541-9de7921852ed",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I understand we want to wait until the new trigger has actually started so that the running trigger map and hence `listTriggers` returns the new trigger id. Does `eventually` add a delay so this is the case?",
        "createdAt" : "2020-05-26T16:37:24Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7e0a25fe-c5df-4eb1-b119-78355c61d594",
        "parentId" : "56d4d3cc-a66e-4e04-9541-9de7921852ed",
        "author" : null,
        "body" : "yep",
        "createdAt" : "2020-05-26T16:44:59Z",
        "updatedAt" : "2020-05-26T19:55:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cbdb87590a19aa1bb81b8b704105db5a774d8efd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +200,204 @@      triggerId <- parseTriggerId(resp)\n      _ <- Future {\n        eventually {\n          val r = Await.result(for {\n            resp <- listTriggers(uri, \"Alice\")"
  },
  {
    "id" : "c0ec9efa-7b23-4973-9b2c-e098a5d2b670",
    "prId" : 6055,
    "comments" : [
      {
        "id" : "0071135a-1755-46fd-91e0-4273bfc1d920",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why embed this as a string instead of using `AuthServiceJWTPayload`? See https://github.com/digital-asset/daml/blob/master/ledger/sandbox/src/test/lib/scala/com/digitalasset/platform/sandbox/services/SandboxFixtureWithAuth.scala#L60 for an example of the latter.",
        "createdAt" : "2020-05-20T18:03:25Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d0ea087b-5cdf-4b22-a1ee-11ab419e2977",
        "parentId" : "0071135a-1755-46fd-91e0-4273bfc1d920",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "I just copied the json-api code. I'll have a look!",
        "createdAt" : "2020-05-20T18:09:48Z",
        "updatedAt" : "2020-05-20T19:05:20Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "34d1295521392ecc8352dedf4c334bbf942ec958",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +68,72 @@\n  protected def jwt(party: String): Jwt = {\n    val decodedJwt = DecodedJwt(\n      \"\"\"{\"alg\": \"HS256\", \"typ\": \"JWT\"}\"\"\",\n      s\"\"\"{\"https://daml.com/ledger-api\": {\"ledgerId\": \"${testId: String}\", \"applicationId\": \"${testId: String}\", \"actAs\": [\"${party}\"]}}\"\"\""
  },
  {
    "id" : "2756bdbc-b9c8-4068-81a8-31427a192180",
    "prId" : 5770,
    "comments" : [
      {
        "id" : "08d9b784-cbc2-420e-8c51-d05ec072daca",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like some helper that throws on failed requests might come in handy but doesn’t need to be in this PR.",
        "createdAt" : "2020-04-28T20:11:11Z",
        "updatedAt" : "2020-04-28T23:47:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b141236e74168079b83c0ed40b234a5f7119dcb",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +153,157 @@        // no triggers running initially\n        resp <- listTriggers(uri, \"Alice\")\n        _ <- assert(resp.status.isSuccess)\n        body <- responseBodyToString(resp)\n        _ <- body should equal(\"[]\")"
  }
]