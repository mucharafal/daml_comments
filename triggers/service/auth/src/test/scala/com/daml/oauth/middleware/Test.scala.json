[
  {
    "id" : "9c3ee57d-7dce-400d-98fd-520479ea8c6f",
    "prId" : 7519,
    "comments" : [
      {
        "id" : "343ed643-f34d-4666-8262-c539923a9593",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we also assert on the value of the cookie? Might also be a good idea to use something slightly more specific like “daml-ledger-token” (or something else).",
        "createdAt" : "2020-09-30T08:21:08Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4fd2cbb85e88ccc2b25624f1d6476ec839d66de0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,48 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.oauth.middleware\n+\n+import akka.http.scaladsl.Http\n+import akka.http.scaladsl.model.Uri.{Path, Query}\n+import akka.http.scaladsl.model._\n+import akka.http.scaladsl.model.headers.{Location, `Set-Cookie`}\n+import com.daml.ledger.api.testing.utils.SuiteResourceManagementAroundAll\n+import org.scalatest.AsyncWordSpec\n+\n+class Test extends AsyncWordSpec with TestFixture with SuiteResourceManagementAroundAll {\n+  \"the middleware\" should {\n+    \"redirect and set cookie after login\" in {\n+      lazy val middlewareBinding = suiteResource.value._2.localAddress\n+      lazy val middlewareUri =\n+        Uri()\n+          .withScheme(\"http\")\n+          .withAuthority(middlewareBinding.getHostString, middlewareBinding.getPort)\n+      val req = HttpRequest(\n+        uri = middlewareUri\n+          .withPath(Path./(\"login\"))\n+          .withQuery(Query((\"redirect_uri\", \"http://CALLBACK\"), (\"claims\", \"actAs:Alice\"))))\n+      for {\n+        resp <- Http().singleRequest(req)\n+        // Redirect to /authorize on authorization server\n+        resp <- {\n+          assert(resp.status == StatusCodes.Found)\n+          val req = HttpRequest(uri = resp.header[Location].get.uri)\n+          Http().singleRequest(req)\n+        }\n+        // Redirect to /cb on middleware\n+        resp <- {\n+          assert(resp.status == StatusCodes.Found)\n+          val req = HttpRequest(uri = resp.header[Location].get.uri)\n+          Http().singleRequest(req)\n+        }\n+      } yield {\n+        // Redirect to CALLBACK\n+        assert(resp.status == StatusCodes.Found)\n+        assert(resp.header[Location].get.uri == Uri(\"http://CALLBACK\"))\n+        // Store token in cookie\n+        assert(resp.header[`Set-Cookie`].get.cookie.name == \"token\")"
  }
]