[
  {
    "id" : "90ffa6b4-08fe-4c9b-b8e1-cd5b0fa61074",
    "prId" : 7773,
    "comments" : [
      {
        "id" : "e565c6dd-8565-4ac1-be27-bc74eea98758",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth factoring out similarly to how we factor TLS options.",
        "createdAt" : "2020-10-21T16:25:16Z",
        "updatedAt" : "2020-10-21T16:25:44Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5fff7e23-b5cd-4e13-84b0-5ebb5eac1e13",
        "parentId" : "e565c6dd-8565-4ac1-be27-bc74eea98758",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Good idea, I'll do that in a follow up PR.",
        "createdAt" : "2020-10-22T08:11:09Z",
        "updatedAt" : "2020-10-22T08:11:09Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ed50a512874f9ea1c4fe250b77f642caaa46e5fb",
    "line" : 32,
    "diffHunk" : "@@ -63,6 +68,64 @@ object Config {\n           if (x.isEmpty) failure(\"Environment variable DAML_CLIENT_SECRET must not be empty\")\n           else success)\n \n+      opt[String](\"auth-jwt-hs256-unsafe\")"
  },
  {
    "id" : "9027e002-2973-439b-8e95-04a5b0752c81",
    "prId" : 7519,
    "comments" : [
      {
        "id" : "87330226-4827-4b6d-8ed2-59176552b51a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Any reason not to use `null` here? I don’t expect that we’ll get very far with `http://` as the URL so making it blow up if it doesn’t end up being set to something might be more sensible.",
        "createdAt" : "2020-09-30T07:36:40Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "abce736b-3bc1-4128-8e9b-01aa02a696e4",
        "parentId" : "87330226-4827-4b6d-8ed2-59176552b51a",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "It allows to implement the `--oauth-host` and `--oauth-port` flags concisely. Those flags are also marked as required, so we won't end up with just `http://` from the command-line flags. Is there a better way to do that?",
        "createdAt" : "2020-09-30T08:29:58Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eca01356-3a16-4a83-b666-9de3d21dd84c",
        "parentId" : "87330226-4827-4b6d-8ed2-59176552b51a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a reason why we accept `oauth-host` and `oauth-port` instead of accepting a single parameter that specifies a URI? Host and port makes sense for gRPC but for HTTP Requests it seems a bit weird.",
        "createdAt" : "2020-09-30T08:59:31Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ffcefb79-bae5-480f-8e25-73ced3abfba6",
        "parentId" : "87330226-4827-4b6d-8ed2-59176552b51a",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Fair enough, no good reason, really. I'll make it a single flag.",
        "createdAt" : "2020-09-30T09:11:09Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4fd2cbb85e88ccc2b25624f1d6476ec839d66de0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.oauth.middleware\n+\n+import akka.http.scaladsl.model.Uri\n+import com.daml.ports.Port\n+\n+private[middleware] case class Config(\n+    // Port the middleware listens on\n+    port: Port,\n+    // Uri of the OAuth2 server\n+    oauthUri: Uri,\n+    // OAuth2 client properties\n+    clientId: String,\n+    clientSecret: String,\n+)\n+\n+private[middleware] object Config {\n+  private val Empty =\n+    Config(\n+      port = Port.Dynamic,\n+      oauthUri = Uri().withScheme(\"http\"),"
  },
  {
    "id" : "5e598261-86b3-4367-8696-3110e015e341",
    "prId" : 7519,
    "comments" : [
      {
        "id" : "375e0599-7b33-4a7c-82c4-177cf4420a0d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Passing secrets as command line parameters is usually somewhat frowned upon. The reason for this is that any other process can see those command line parameters. How about using environment variables for that? Something like `DAML_CLIENT_ID` and `DAML_CLIENT_SECRET` (I don’t really care about the names).",
        "createdAt" : "2020-09-30T07:38:27Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe75b7b1-e241-4403-9eee-6dae92732fe3",
        "parentId" : "375e0599-7b33-4a7c-82c4-177cf4420a0d",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Good point, that part is copied from the test client. I'll switch it to use envvars.",
        "createdAt" : "2020-09-30T08:31:47Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4fd2cbb85e88ccc2b25624f1d6476ec839d66de0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.oauth.middleware\n+\n+import akka.http.scaladsl.model.Uri\n+import com.daml.ports.Port\n+\n+private[middleware] case class Config(\n+    // Port the middleware listens on\n+    port: Port,\n+    // Uri of the OAuth2 server\n+    oauthUri: Uri,\n+    // OAuth2 client properties\n+    clientId: String,\n+    clientSecret: String,\n+)\n+\n+private[middleware] object Config {\n+  private val Empty =\n+    Config(\n+      port = Port.Dynamic,\n+      oauthUri = Uri().withScheme(\"http\"),\n+      clientId = null,\n+      clientSecret = null)\n+\n+  def parseConfig(args: Seq[String]): Option[Config] =\n+    configParser.parse(args, Empty)\n+\n+  @SuppressWarnings(Array(\"org.wartremover.warts.NonUnitStatements\"))\n+  val configParser: scopt.OptionParser[Config] =\n+    new scopt.OptionParser[Config](\"oauth-middleware\") {\n+      head(\"OAuth2 Middleware\")\n+\n+      opt[Int](\"port\")\n+        .action((x, c) => c.copy(port = Port(x)))\n+        .required()\n+        .text(\"Port to listen on\")\n+\n+      opt[String](\"oauth-host\")\n+        .action((x, c) => c.copy(oauthUri = c.oauthUri.withHost(x)))\n+        .required()\n+        .text(\"Hostname of the OAuth2 server\")\n+\n+      opt[Int](\"oauth-port\")\n+        .action((x, c) => c.copy(oauthUri = c.oauthUri.withPort(x)))\n+        .required()\n+        .text(\"Port of the OAuth2 server\")\n+\n+      opt[String](\"id\")\n+        .action((x, c) => c.copy(clientId = x))\n+        .required()\n+        .text(\"OAuth2 client id\")\n+\n+      opt[String](\"secret\")"
  }
]