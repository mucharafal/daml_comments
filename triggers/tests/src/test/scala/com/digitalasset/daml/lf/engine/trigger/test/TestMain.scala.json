[
  {
    "id" : "28fed4c9-5ef7-40c3-8498-462488dbc915",
    "prId" : 5016,
    "comments" : [
      {
        "id" : "6afbb56d-3ec9-466d-b8bb-1e3d3b36556f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This was also wrong.",
        "createdAt" : "2020-03-16T14:18:24Z",
        "updatedAt" : "2020-03-16T14:18:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6163b32e4b74fe39aacb8104efb899e40ddad7f2",
    "line" : 46,
    "diffHunk" : "@@ -324,15 +328,15 @@ case class AcsTests(dar: Dar[(PackageId, Package)], runner: TestRunner) {\n     val archiveVal = Some(\n       value\n         .Value()\n-        .withRecord(\n-          value.Record(\n-            recordId = Some(\n-              value.Identifier(\n-                packageId = TestRunner.findStdlibPackageId(dar),\n-                moduleName = \"DA.Internal.Template\",\n-                entityName = \"Archive\")),\n-            fields = Seq()\n-          )))\n+        .withRecord(value.Record(\n+          recordId = Some(value.Identifier(\n+            packageId = PackageId.assertFromString(\n+              \"d14e08374fc7197d6a0de468c968ae8ba3aadbf9315476fd39071831f5923662\"),"
  },
  {
    "id" : "7bebf135-bf95-4bfe-b2a5-5e6af7a7f78f",
    "prId" : 4011,
    "comments" : [
      {
        "id" : "0568b378-795e-4791-bc66-d1d23a463643",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "scalafmt is great :slightly_smiling_face: ",
        "createdAt" : "2020-01-10T15:29:54Z",
        "updatedAt" : "2020-01-10T15:34:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1b7690f4be46071701a922a7274e957f813dced",
    "line" : null,
    "diffHunk" : "@@ -983,6 +979,42 @@ case class TimeTests(dar: Dar[(PackageId, Package)], runner: TestRunner) {\n   }\n }\n \n+case class HeartbeatTests(dar: Dar[(PackageId, Package)], runner: TestRunner) {\n+\n+  val triggerId: Identifier =\n+    Identifier(dar.main._1, QualifiedName.assertFromString(\"Heartbeat:test\"))\n+\n+  def test(name: String, triggerName: String, numMessages: NumMessages) = {\n+    def assertFinalState(finalState: SExpr, commandsR: Unit) = {\n+      finalState match {\n+        case SEValue(SInt64(count)) =>\n+          TestRunner.assertEqual(count, 2, \"number of heartbeats\")\n+        case _ => Left(s\"Expected Int64 but got $finalState\")\n+      }\n+    }\n+    def assertFinalACS(\n+                        acs: Map[Identifier, Seq[(String, Lf.ValueRecord[Lf.AbsoluteContractId])]],"
  },
  {
    "id" : "07e4aa48-d32d-45a8-ae41-fd3a25779c8b",
    "prId" : 3577,
    "comments" : [
      {
        "id" : "c5fbe265-c607-4bf6-a7db-f21eda8f80f3",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "`createOne` and `createTwo` share a lot of code. Maybe factor that out?",
        "createdAt" : "2019-11-21T14:35:01Z",
        "updatedAt" : "2019-11-21T15:16:34Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "56ca883a-f5cf-4fcf-978e-934ac45c0b49",
        "parentId" : "c5fbe265-c607-4bf6-a7db-f21eda8f80f3",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good point, fixed!",
        "createdAt" : "2019-11-21T15:06:24Z",
        "updatedAt" : "2019-11-21T15:16:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d866ba2178ab39b0bdc29c0e9f4efa7d5f71650a",
    "line" : 109,
    "diffHunk" : "@@ -788,6 +790,147 @@ case class PendingTests(dar: Dar[(PackageId, Package)], runner: TestRunner) {\n   }\n }\n \n+case class TemplateFilterTests(dar: Dar[(PackageId, Package)], runner: TestRunner) {\n+\n+  case class ActiveAssetMirrors(num: Int)\n+  case class SuccessfulCompletions(num: Long)\n+  case class FailedCompletions(num: Long)\n+\n+  val oneId = value.Identifier(\n+    packageId = dar.main._1,\n+    moduleName = \"TemplateIdFilter\",\n+    entityName = \"One\"\n+  )\n+  val twoId = value.Identifier(\n+    packageId = dar.main._1,\n+    moduleName = \"TemplateIdFilter\",\n+    entityName = \"Two\"\n+  )\n+\n+  def test(\n+      name: String,\n+      triggerName: String,\n+      numMessages: NumMessages,\n+      doneOnes: Int,\n+      doneTwos: Int) = {\n+    def assertFinalState(finalState: SExpr, commandsR: Unit) = Right(())\n+    def assertFinalACS(\n+        acs: Map[Identifier, Seq[(String, Lf.ValueRecord[Lf.AbsoluteContractId])]],\n+        commandsR: Unit) = {\n+      val activeDoneOne = acs\n+        .get(Identifier(dar.main._1, QualifiedName.assertFromString(\"TemplateIdFilter:DoneOne\")))\n+        .fold(0)(_.size)\n+      val activeDoneTwo = acs\n+        .get(Identifier(dar.main._1, QualifiedName.assertFromString(\"TemplateIdFilter:DoneTwo\")))\n+        .fold(0)(_.size)\n+      for {\n+        _ <- TestRunner.assertEqual(activeDoneOne, doneOnes, \"DoneOne\")\n+        _ <- TestRunner.assertEqual(activeDoneTwo, doneTwos, \"DoneTwo\")\n+      } yield ()\n+    }\n+    def cmds(client: LedgerClient, party: String) = { implicit ec: ExecutionContext =>\n+      { implicit mat: ActorMaterializer =>\n+        for {\n+          _ <- createOne(client, party, \"createOne\")\n+          _ <- createTwo(client, party, \"createTwo\")\n+        } yield ()\n+      }\n+    }\n+    val triggerId =\n+      Identifier(dar.main._1, QualifiedName.assertFromString(s\"TemplateIdFilter:$triggerName\"))\n+    runner.genericTest(name, dar, triggerId, cmds, numMessages, assertFinalState, assertFinalACS)\n+  }\n+\n+  def createOne(client: LedgerClient, party: String, commandId: String)(\n+      implicit ec: ExecutionContext,\n+      materializer: ActorMaterializer): Future[Unit] = {\n+    val commands = Seq(\n+      Command().withCreate(CreateCommand(\n+        templateId = Some(oneId),\n+        createArguments = Some(\n+          value.Record(\n+            recordId = Some(oneId),\n+            fields = Seq(\n+              value.RecordField(\n+                \"p\",\n+                Some(value.Value().withParty(party))\n+              )\n+            )\n+          )),\n+      )))\n+    for {\n+      r <- client.commandClient\n+        .withTimeProvider(Some(Runner.getTimeProvider(runner.config.timeProviderType)))\n+        .trackSingleCommand(SubmitRequest(commands = Some(Commands(\n+          ledgerId = client.ledgerId.unwrap,\n+          applicationId = runner.applicationId.unwrap,\n+          commandId = commandId,\n+          party = party,\n+          ledgerEffectiveTime = Some(fromInstant(Instant.EPOCH)),\n+          maximumRecordTime = Some(fromInstant(Instant.EPOCH.plusSeconds(5))),\n+          commands = commands\n+        ))))\n+    } yield ()\n+  }\n+\n+  def createTwo(client: LedgerClient, party: String, commandId: String)("
  }
]