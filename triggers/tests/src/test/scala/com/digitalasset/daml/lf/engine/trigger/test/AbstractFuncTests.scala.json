[
  {
    "id" : "41aef781-d38a-48b1-a81b-02a2a62f3eeb",
    "prId" : 6000,
    "comments" : [
      {
        "id" : "af57dbe7-7380-40f5-ab24-f97edafd63b4",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "As you'd hope, this test fails with the multiplier *< 5*.",
        "createdAt" : "2020-05-15T13:23:52Z",
        "updatedAt" : "2020-05-15T13:31:26Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "782906c89e3645f5113308c3d79b4d58b1e431b9",
    "line" : 19,
    "diffHunk" : "@@ -296,6 +297,27 @@ abstract class AbstractFuncTests\n       }\n     }\n \n+    \"MaxMessageSizeTests\" should {\n+      val triggerId =\n+        QualifiedName.assertFromString(\"MaxInboundMessageTest:maxInboundMessageSizeTrigger\")\n+      val tId = LedgerApi.Identifier(packageId, \"MaxInboundMessageTest\", \"MessageSize\")\n+      \"fail\" in {\n+        for {\n+          client <- ledgerClient(\n+            maxInboundMessageSize = 5 * RunnerConfig.DefaultMaxInboundMessageSize)"
  },
  {
    "id" : "2e64599a-97d4-4a0c-9750-fb1995022fec",
    "prId" : 5384,
    "comments" : [
      {
        "id" : "e7476505-78ca-483c-9279-6061632540a0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I currently duplicate these 7 lines for the tls and auth tests. Couldn’t quite find a sensible location  to put them an dfor now this doesn’t seem like an issue.",
        "createdAt" : "2020-04-02T15:11:40Z",
        "updatedAt" : "2020-04-03T08:48:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0049174dd2b78b2b302ba8e928351c0d7aadf532",
    "line" : 39,
    "diffHunk" : "@@ -0,0 +1,160 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.engine.trigger.test\n+\n+import akka.stream.scaladsl.{Flow}\n+import com.digitalasset.daml.lf.data.Ref._\n+import com.digitalasset.daml.lf.speedy.SExpr\n+import com.digitalasset.daml.lf.speedy.SExpr._\n+import com.digitalasset.daml.lf.speedy.SValue._\n+import com.digitalasset.daml.lf.value.Value.AbsoluteContractId\n+import com.digitalasset.ledger.api.testing.utils.{SuiteResourceManagementAroundAll}\n+import com.digitalasset.ledger.api.v1.commands._\n+import com.digitalasset.ledger.api.v1.commands.CreateCommand\n+import com.digitalasset.ledger.api.v1.{value => LedgerApi}\n+import com.digitalasset.platform.services.time.TimeProviderType\n+import org.scalatest._\n+import scalaz.syntax.traverse._\n+\n+import com.digitalasset.daml.lf.engine.trigger.TriggerMsg\n+\n+abstract class AbstractFuncTests\n+    extends AsyncWordSpec\n+    with AbstractTriggerTest\n+    with Matchers\n+    with SuiteResourceManagementAroundAll\n+    with TryValues {\n+  self: Suite =>\n+\n+  this.getClass.getSimpleName can {\n+    \"AcsTests\" should {\n+      val assetId = LedgerApi.Identifier(packageId, \"ACS\", \"Asset\")\n+      val assetMirrorId = LedgerApi.Identifier(packageId, \"ACS\", \"AssetMirror\")\n+      def asset(party: String): CreateCommand =\n+        CreateCommand(\n+          templateId = Some(assetId),\n+          createArguments = Some(\n+            LedgerApi.Record(fields =\n+              Seq(LedgerApi.RecordField(\"issuer\", Some(LedgerApi.Value().withParty(party)))))))"
  }
]