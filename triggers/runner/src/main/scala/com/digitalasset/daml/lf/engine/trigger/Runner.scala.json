[
  {
    "id" : "3162c617-51e4-4e43-870f-26c871d696a4",
    "prId" : 7812,
    "comments" : [
      {
        "id" : "384f0d58-e6ff-4c5b-9a07-5f8214ea3d7f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I thought those are identical now?",
        "createdAt" : "2020-10-27T16:10:15Z",
        "updatedAt" : "2020-10-27T17:17:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eb276b36d6afbbc0ef08b66b73e27bda3a0144bb",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +450,454 @@    // The flow that we return:\n    //  - Maps incoming trigger messages to new trigger messages\n    //    replacing ledger command IDs with the IDs used internally;\n    //  - Folds over the trigger messages via the speedy machine\n    //    thereby accumulating the state changes."
  },
  {
    "id" : "afd2cedb-1c2f-4b90-adf3-41bb389ac2b7",
    "prId" : 7587,
    "comments" : [
      {
        "id" : "4d9e11d3-12af-4b8d-86d7-e9fc127b08a9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like we should be able to pop from that set now if we’ve seen both the transaction as well as the completion for a command. Doesn’t have to be in this PR.",
        "createdAt" : "2020-10-07T07:26:15Z",
        "updatedAt" : "2020-10-07T07:32:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6bd2c4bd-47da-4908-ae6e-46b96690ac88",
        "parentId" : "4d9e11d3-12af-4b8d-86d7-e9fc127b08a9",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "#7598 ",
        "createdAt" : "2020-10-07T15:09:52Z",
        "updatedAt" : "2020-10-07T15:09:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7a51c3a04d2e56ca2b5ee2cbe95daaeeb378fb",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +412,416 @@          val uuid = fromTryCatchThrowable[UUID, IllegalArgumentException](\n            UUID.fromString(t.commandId)).toOption\n          List(if (uuid exists commandIdsUsed) msg else TransactionMsg(t.copy(commandId = \"\")))\n        case x @ HeartbeatMsg() => List(x) // Hearbeats don't carry any information.\n      })"
  },
  {
    "id" : "c009ab70-7cbb-4a9b-9d2c-f4320092295a",
    "prId" : 7456,
    "comments" : [
      {
        "id" : "36111c23-4d57-4a1c-9bd3-f64ed5c6fa82",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That’s the mapping I was talking about above which we can get rid off with this change.",
        "createdAt" : "2020-10-01T08:19:50Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27c8c9b1e1674688c7b1e08c329341d8e4615ef4",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +233,237 @@    usedCommandIds += commandId\n    val commandUUID = UUID.randomUUID\n    commandIdMap += (commandUUID -> commandId)\n    val commandsArg = Commands(\n      ledgerId = client.ledgerId.unwrap,"
  },
  {
    "id" : "5639f5cb-d8d2-4f4a-859f-5e67276b1bc4",
    "prId" : 7205,
    "comments" : [
      {
        "id" : "9ab8c787-6a55-4672-b664-4d15f963a812",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "20:58:20.100 [TriggerService-akka.actor.default-dispatcher-3] DEBUG com.daml.lf.engine.trigger.Runner - trigger received completion message Completion(658ee8d2-160f-413e-b6e3-c95ab01f4d7c,Some(Status(0,,Vector())),4,None) (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=535b9269-fe3f-426b-b83c-87b6c5b8b6c7})",
        "createdAt" : "2020-09-02T21:08:29Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ee1d5a41-45d0-4085-9479-0b84db30f525",
        "parentId" : "9ab8c787-6a55-4672-b664-4d15f963a812",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "(Of course, you will not see `triggerId` in context with the non-service runner.)",
        "createdAt" : "2020-09-02T21:23:22Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +326,330 @@\n  private def logReceivedMsg(tm: TriggerMsg): Unit = tm match {\n    case CompletionMsg(c) => logger.debug(s\"trigger received completion message $c\")\n    case TransactionMsg(t) => logger.debug(s\"trigger received transaction, ID ${t.transactionId}\")\n    case HeartbeatMsg() => ()"
  },
  {
    "id" : "4cd8f773-a497-462c-b369-6a82d5fb833f",
    "prId" : 7205,
    "comments" : [
      {
        "id" : "f6613d3d-da2c-43ab-b711-bb761a890b3f",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "20:58:20.103 [TriggerService-akka.actor.default-dispatcher-3] DEBUG com.daml.lf.engine.trigger.Runner - trigger received transaction, ID 4 (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=535b9269-fe3f-426b-b83c-87b6c5b8b6c7})",
        "createdAt" : "2020-09-02T21:08:56Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +327,331 @@  private def logReceivedMsg(tm: TriggerMsg): Unit = tm match {\n    case CompletionMsg(c) => logger.debug(s\"trigger received completion message $c\")\n    case TransactionMsg(t) => logger.debug(s\"trigger received transaction, ID ${t.transactionId}\")\n    case HeartbeatMsg() => ()\n  }"
  },
  {
    "id" : "b32e8dec-d71d-454c-8794-fd148a780ced",
    "prId" : 7205,
    "comments" : [
      {
        "id" : "cfa3bbc1-e2f2-45d9-bbfa-baf4b38f5ade",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "20:58:20.093 [TriggerService-akka.actor.default-dispatcher-3] DEBUG com.daml.lf.engine.trigger.Runner - submitting command ID 0, commands ImmArray.ImmArraySeq(CreateCommand(Some(Identifier(cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1,TestTrigger,B)),Some(Record(Some(Identifier(cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1,TestTrigger,B)),Vector(RecordField(p,Some(Value(Party(Alice)))), RecordField(v,Some(Value(Int64(42))))))))) (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=535b9269-fe3f-426b-b83c-87b6c5b8b6c7})",
        "createdAt" : "2020-09-02T21:12:26Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +252,256 @@                  )\n                  logger.debug(\n                    s\"submitting command ID $commandId, commands ${commands.map(_.command.value)}\")\n                  submit(SubmitRequest(commands = Some(commandsArg)))\n                }"
  },
  {
    "id" : "1183f363-79c1-4f03-82af-8d031a422708",
    "prId" : 6576,
    "comments" : [
      {
        "id" : "14bbfa62-32d2-42ad-b1dd-a6c5a983ee57",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Given that the coding is a lot cleaner now, I wouldn't have asked for the comment anymore. 😃\r\nBut it doesn't do harm either.",
        "createdAt" : "2020-07-02T10:05:55Z",
        "updatedAt" : "2020-07-02T10:20:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ebcb9850a4c55d27bf585e555ceabb482760cb",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +423,427 @@    val args: Array[SExprAtomic] = values.map(SEValue(_))\n    // We can safely introduce a let-expression here to bind the `func` expression,\n    // because there are no stack-references in `args`, since they are pure speedy values.\n    AExpr(SELet1General(func.wrapped, SEAppAtomicGeneral(SELocS(1), args)))\n  }"
  },
  {
    "id" : "7420bbfc-4626-4d04-a8bc-3dcc2785c551",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "175b8886-fd42-4606-9c44-1ad95369622f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Don't we need to shift all stack references in `args` by 1 for this to work?",
        "createdAt" : "2020-06-26T11:58:03Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f853b3b-c6ef-43b3-a77b-a050e3b2dd85",
        "parentId" : "175b8886-fd42-4606-9c44-1ad95369622f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I dont think so, but I'll have a deeper think...",
        "createdAt" : "2020-06-30T15:09:55Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "26d20a83-6036-4cfd-beed-61e5061a40d0",
        "parentId" : "175b8886-fd42-4606-9c44-1ad95369622f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Did you think about it?",
        "createdAt" : "2020-07-01T18:59:31Z",
        "updatedAt" : "2020-07-01T18:59:32Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5801dd56-faa4-43d3-a72f-38f4a2269e28",
        "parentId" : "175b8886-fd42-4606-9c44-1ad95369622f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. It is safe because the args array always contains values (constructed with SEValue) and so will not contains any stack references.\r\n",
        "createdAt" : "2020-07-02T07:05:45Z",
        "updatedAt" : "2020-07-02T07:05:45Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f02b769c-63bd-4075-aaf3-a4ad5b543e2f",
        "parentId" : "175b8886-fd42-4606-9c44-1ad95369622f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I understand. Can you please add a comment in the code why it is safe and also explain why the function doesn't take an array of values but rather an array of expressions (or change it to take an array of values).",
        "createdAt" : "2020-07-02T07:15:00Z",
        "updatedAt" : "2020-07-02T07:15:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c5d7152e-4c6a-4cc0-8441-84c3940b7bbf",
        "parentId" : "175b8886-fd42-4606-9c44-1ad95369622f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "https://github.com/digital-asset/daml/issues/6573",
        "createdAt" : "2020-07-02T07:40:35Z",
        "updatedAt" : "2020-07-02T07:41:05Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +427,431 @@\n  def makeApp(func: AExpr, args: Array[SExprAtomic]): AExpr = {\n    AExpr(SELet1General(func.wrapped, SEAppAtomicGeneral(SELocS(1), args)))\n  }\n"
  },
  {
    "id" : "3b2e5ed3-5fc5-4d2f-99f0-532c986da93d",
    "prId" : 5916,
    "comments" : [
      {
        "id" : "7fb51d7e-baf6-439c-a6f7-51b96ea7c40d",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Why did this change?",
        "createdAt" : "2020-05-08T18:51:58Z",
        "updatedAt" : "2020-05-08T19:08:40Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "55ea8952-34b3-4c36-bd35-11e8835568a9",
        "parentId" : "7fb51d7e-baf6-439c-a6f7-51b96ea7c40d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "So that we can log the name in the trigger sink.",
        "createdAt" : "2020-05-08T19:15:47Z",
        "updatedAt" : "2020-05-08T19:15:48Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +484,488 @@    source\n      .viaMat(msgFlow)(Keep.right[NotUsed, T])\n      .toMat(getTriggerSink(name, acs, submit))(Keep.both)\n      .run()\n  }"
  },
  {
    "id" : "d67170e1-459e-4ed1-a185-7182f2e2f2f2",
    "prId" : 5875,
    "comments" : [
      {
        "id" : "85267983-e91d-4783-85bf-d35dab586e43",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Note that `usedCommandIds` leaks memory. We should at least limit the size.",
        "createdAt" : "2020-05-07T07:52:48Z",
        "updatedAt" : "2020-05-07T10:47:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "09d276215366082b5891c9c2fd70ea2e27abc11d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +217,221 @@  // limit the size.\n  private var commandIdMap: Map[UUID, String] = Map.empty\n  // This is the set of command IDs emitted by the trigger.  We track\n  // this to detect collisions.\n  private var usedCommandIds: Set[String] = Set.empty"
  },
  {
    "id" : "0051b653-7e69-4ee6-8c13-ef7ebe4738f5",
    "prId" : 5875,
    "comments" : [
      {
        "id" : "7a500298-e160-4d32-8c29-46c8cb4b6c97",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`msgFlow` isn’t a kill switch in general, e.g., in the tests we set it to something like `take(n)` to cut off the stream after n messages.",
        "createdAt" : "2020-05-07T07:56:36Z",
        "updatedAt" : "2020-05-07T10:47:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "09d276215366082b5891c9c2fd70ea2e27abc11d",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +457,461 @@  }\n\n  // Run the trigger given the state of the ACS. The msgFlow argument\n  // passed from ServiceMain is a kill switch. Other choices are\n  // possible demonstrated in the tests where a"
  },
  {
    "id" : "f0614abe-6ff4-42ef-aff2-21d908d75d54",
    "prId" : 5038,
    "comments" : [
      {
        "id" : "87a4b77d-19a1-4a71-a852-bde97441b970",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think the API isn’t quite right get. It would make more sense to split the initialization into\r\n1. Take the packages and a trigger id, call `getTrigger`, `getTriggerFilter` and `getTriggerHeartbeat` and stuff that information in `Trigger`.\r\n2. Then make the runner take the `Trigger` and only handle connection to the ledger.\r\n\r\nHowever, I didn’t want to include this in this PR to make it easier to follow.",
        "createdAt" : "2020-03-17T09:50:57Z",
        "updatedAt" : "2020-03-17T09:50:57Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5cff5df7c8ddada578757bb1298720a07e4aa66a",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +439,443 @@  )(implicit materializer: Materializer, executionContext: ExecutionContext): Future[SExpr] = {\n    val runner = Runner.fromDar(dar, triggerId, client, timeProviderType, applicationId, party)\n    val filter = runner.getTriggerFilter()\n    val heartbeat = runner.getTriggerHeartbeat()\n    for {"
  },
  {
    "id" : "8311a010-dd31-491f-aeb3-b6dab1795fb8",
    "prId" : 5038,
    "comments" : [
      {
        "id" : "afacb366-3727-40c0-b057-60bb5944aa28",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Does `converter` still need to be an argument when it's a member of `Runner`?",
        "createdAt" : "2020-03-17T10:38:54Z",
        "updatedAt" : "2020-03-17T10:43:06Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7aa8e6be-c2b6-4ae4-b0dc-f7b7827d0488",
        "parentId" : "afacb366-3727-40c0-b057-60bb5944aa28",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It doesn’t, good catch! I’ll clean it up as part of the next refactoring PR.",
        "createdAt" : "2020-03-17T10:51:03Z",
        "updatedAt" : "2020-03-17T10:51:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5cff5df7c8ddada578757bb1298720a07e4aa66a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +77,81 @@  // the new state\n  private def handleStepResult(\n      converter: Converter,\n      v: SValue,\n      submit: SubmitRequest => Unit): SValue ="
  },
  {
    "id" : "143c2835-92f8-441a-9cf3-4260e9931c77",
    "prId" : 3983,
    "comments" : [
      {
        "id" : "38f465e4-0c26-4781-bbb8-880c272de021",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do I understand it correctly that we do not need to reset the log since we log on addition to the tracelog and never actually read the values?",
        "createdAt" : "2020-01-08T14:59:42Z",
        "updatedAt" : "2020-01-08T15:13:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "080f9d0e-b59e-4db3-b29d-27d686091956",
        "parentId" : "38f465e4-0c26-4781-bbb8-880c272de021",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yes, that's the idea.\r\nAlthough in DAMLScript the only tracelogs that you will see as the output of DAMLScript are the ones in the `Script` value, but not the ones that are logged as part of regular choice executions on the server.",
        "createdAt" : "2020-01-08T15:04:50Z",
        "updatedAt" : "2020-01-08T15:13:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8788f433-1c38-4efe-afe8-98f96f691c06",
        "parentId" : "38f465e4-0c26-4781-bbb8-880c272de021",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Sure that’s exactly how it should be imho :)",
        "createdAt" : "2020-01-08T15:06:47Z",
        "updatedAt" : "2020-01-08T15:13:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7af1640707d0cfa84dc71cd6c9c0200392829790",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +119,123 @@    }\n\n  def stepToValue(machine: Speedy.Machine): Unit = {\n    while (!machine.isFinal) {\n      machine.step() match {"
  },
  {
    "id" : "8263e536-4ba2-4693-933b-f1a12cea5dc6",
    "prId" : 3858,
    "comments" : [
      {
        "id" : "d1a9af1e-19e1-4626-9802-aa5996485c73",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I am a bit unsure on whether this should depend on the time provider, i.e., be static in static time mode or whether it should always UTC. Given that e.g. DABL always runs in static time mode, I could see it being useful to use UTC since that allows you to feed in time externally.\r\n\r\n@tweber-da Given that you raised this issue, do you have a preference here?\r\nor maybe @bame-da?",
        "createdAt" : "2019-12-16T12:31:07Z",
        "updatedAt" : "2019-12-16T12:52:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "25ac7f82-f4fe-45b2-9517-077881b6a160",
        "parentId" : "d1a9af1e-19e1-4626-9802-aa5996485c73",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Merging for now. @tweber-da @bame-da let me know if you'd prefer the trigger to get wall clock time in static time mode as well.\r\n",
        "createdAt" : "2019-12-17T10:11:58Z",
        "updatedAt" : "2019-12-17T10:11:58Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "15fac3d5c4c90326214e18a515fa882a21f6ef7f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +267,271 @@    })\n    val clientTime: Timestamp =\n      Timestamp.assertFromInstant(Runner.getTimeProvider(timeProviderType).getCurrentTime)\n    val initialState =\n      SEApp("
  },
  {
    "id" : "a54fac88-92b4-4d64-9a95-4ca6cae3efef",
    "prId" : 3501,
    "comments" : [
      {
        "id" : "411ac3a0-d034-4178-95fe-1d2074ab29cb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think this isn’t quite right: First the commandId field is optional and will be an empty string for transactions submitted by another party so we need to handle this. Transactions submitted by our party might still come from a different client than the trigger so the UUID conversion can still fail. I would propose that in that case we should treat this as if no command id has been supplied and do the same for when the lookup fails.",
        "createdAt" : "2019-11-18T09:58:58Z",
        "updatedAt" : "2019-11-18T13:07:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "16556211-f1e2-4578-b389-2774f14a5767",
        "parentId" : "411ac3a0-d034-4178-95fe-1d2074ab29cb",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "The empty case should be handled by the `try catch`. `UUID.fromString` should throw an `IllegalArgumentException` in case of an empty string or otherwise illegal UUID and the `catch` block handles that case.\r\n\r\nFor reference, this snippet is taken from the [`CompletionMsg` case above](https://github.com/digital-asset/daml/pull/3501/files/95ccc59b45119a070a0c30fb5451ca8855158438#diff-89250be8bed2fd6ce958fd8b1c1aeea9R204-R214).\r\n\r\n> I would propose that in that case we should treat this as if no command id has been supplied and do the same for when the lookup fails.\r\n\r\nSo, clear the `commandId` field instead of forwarding the incoming `msg` unchanged? ",
        "createdAt" : "2019-11-18T12:36:38Z",
        "updatedAt" : "2019-11-18T13:07:35Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aee8dcf0-3881-42ae-a2f7-c133c4d938bb",
        "parentId" : "411ac3a0-d034-4178-95fe-1d2074ab29cb",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah yeah, the catch makes sense. Clearing `commandId` sounds good and we should we should do thet for completions as well.",
        "createdAt" : "2019-11-18T13:02:50Z",
        "updatedAt" : "2019-11-18T13:07:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5392c3db-19bf-4e34-82d1-6bf92e55cec0",
        "parentId" : "411ac3a0-d034-4178-95fe-1d2074ab29cb",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I've changed it to clear the `commandId` in such cases. The `Converter` will then convert that into a `None : Optional CommandId`.\r\n\r\nIn case of `MCompletion` we're already dropping those messages with unknown command ids.",
        "createdAt" : "2019-11-18T13:10:57Z",
        "updatedAt" : "2019-11-18T13:10:57Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "29c0a995f2d88ec863b54a1e2a26bcb7649cf5d4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +215,219 @@        case TransactionMsg(t) =>\n          try {\n            commandIdMap.get(UUID.fromString(t.commandId)) match {\n              case None => List(TransactionMsg(t.copy(commandId = \"\")))\n              case Some(internalCommandId) =>"
  }
]