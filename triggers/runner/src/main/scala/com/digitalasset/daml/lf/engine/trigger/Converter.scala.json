[
  {
    "id" : "9469b8b7-1549-4434-96ed-b4551737d44f",
    "prId" : 5048,
    "comments" : [
      {
        "id" : "bc4ad767-0771-4304-a298-af3e85d4413c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can you please add a comment to the type definitions in `triggers/daml/Daml/Trigger/LowLevel.daml` that these numbers will have to be updated if you change the order of the constructors, thanks! (arguably that code should be rewritten to not require hardcoding them here but let’s not do this in this PR).",
        "createdAt" : "2020-03-18T07:43:40Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8dd1dd25-dc7c-4363-9f02-1e7fdcc9e25c",
        "parentId" : "bc4ad767-0771-4304-a298-af3e85d4413c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good point.",
        "createdAt" : "2020-03-18T08:08:40Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a58b8b64400741795af304d763a8e244b07dcb09",
    "line" : null,
    "diffHunk" : "@@ -198,12 +198,12 @@ object Converter {\n         for {"
  },
  {
    "id" : "fb49b42c-9eee-4379-8de4-81d222836794",
    "prId" : 5016,
    "comments" : [
      {
        "id" : "8fbaf1d8-f4dd-405d-859a-aced0fe1680f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "These package ids were wrong before. It just doesn’t matter because speedy doesn’t care.",
        "createdAt" : "2020-03-16T14:17:55Z",
        "updatedAt" : "2020-03-16T14:18:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6163b32e4b74fe39aacb8104efb899e40ddad7f2",
    "line" : 74,
    "diffHunk" : "@@ -48,52 +47,37 @@ case class Converter(\n )\n \n // Helper to create identifiers pointing to the DAML.Trigger module\n-case class TriggerIds(\n-    triggerPackageId: PackageId,\n-    triggerModuleName: ModuleName,\n-    highlevelModuleName: ModuleName,\n-    stdlibPackageId: PackageId,\n-    mainPackageId: PackageId) {\n-  def getId(n: String): Identifier =\n-    Identifier(triggerPackageId, QualifiedName(triggerModuleName, DottedName.assertFromString(n)))\n-  def getHighlevelId(n: String): Identifier =\n-    Identifier(triggerPackageId, QualifiedName(highlevelModuleName, DottedName.assertFromString(n)))\n-}\n-\n-object TriggerIds {\n-  def fromDar(dar: Dar[(PackageId, Package)]): TriggerIds = {\n-    val triggerModuleName = DottedName.assertFromString(\"Daml.Trigger.LowLevel\")\n-    val highlevelModuleName = DottedName.assertFromString(\"Daml.Trigger\")\n-    val triggerPackageId: PackageId = dar.all\n-      .find {\n-        case (pkgId, pkg) =>\n-          pkg.modules.contains(triggerModuleName) &&\n-            pkg.modules.contains(highlevelModuleName)\n-      }\n-      .get\n-      ._1\n-    val stdlibPackageId =\n-      dar.all\n-        .find {\n-          case (pkgId, pkg) =>\n-            pkg.modules.contains(DottedName.assertFromString(\"DA.Internal.LF\"))\n-        }\n-        .get\n-        ._1\n-    TriggerIds(\n+case class TriggerIds(val triggerPackageId: PackageId) {\n+  def damlTrigger(s: String) =\n+    Identifier(\n       triggerPackageId,\n-      triggerModuleName,\n-      highlevelModuleName,\n-      stdlibPackageId,\n-      dar.main._1)\n-  }\n+      QualifiedName(ModuleName.assertFromString(\"Daml.Trigger\"), DottedName.assertFromString(s)))\n+  def damlTriggerLowLevel(s: String) =\n+    Identifier(\n+      triggerPackageId,\n+      QualifiedName(\n+        ModuleName.assertFromString(\"Daml.Trigger.LowLevel\"),\n+        DottedName.assertFromString(s)))\n+  def damlTriggerInternal(s: String) =\n+    Identifier(\n+      triggerPackageId,\n+      QualifiedName(\n+        ModuleName.assertFromString(\"Daml.Trigger.Internal\"),\n+        DottedName.assertFromString(s)))\n }\n \n case class AnyContractId(templateId: Identifier, contractId: AbsoluteContractId)\n \n class ConverterException(message: String) extends RuntimeException(message)\n \n object Converter {\n+  private val DA_INTERNAL_ANY_PKGID ="
  },
  {
    "id" : "74eb3b43-2af6-4d9c-8735-375fd52eb0b2",
    "prId" : 3458,
    "comments" : [
      {
        "id" : "8082a0aa-5053-44a0-81ec-e1dca5f98c38",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "This pattern shows up in a couple of places, might make sense to factor it out.",
        "createdAt" : "2019-11-14T08:17:44Z",
        "updatedAt" : "2019-11-14T08:25:11Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6be589f-1306-4206-9b69-2dbbcb30253e",
        "parentId" : "8082a0aa-5053-44a0-81ec-e1dca5f98c38",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yeah, I was planning to do this as part of factoring out the conversion logic from triggers and DAML script.",
        "createdAt" : "2019-11-14T08:26:55Z",
        "updatedAt" : "2019-11-14T08:26:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f5a610347859cb1f747219f9c1ffc3ac7bf2dee6",
    "line" : 34,
    "diffHunk" : "@@ -197,15 +200,22 @@ object Converter {\n         QualifiedName(\n           DottedName.assertFromString(\"DA.Internal.LF\"),\n           DottedName.assertFromString(\"AnyTemplate\")))\n+    val templateTy = Identifier(\n+      PackageId.assertFromString(created.getTemplateId.packageId),\n+      QualifiedName(\n+        DottedName.assertFromString(created.getTemplateId.moduleName),\n+        DottedName.assertFromString(created.getTemplateId.entityName))\n+    )"
  }
]