[
  {
    "id" : "9047a2ae-930a-4677-b84d-8fc76cb100cf",
    "prId" : 7632,
    "comments" : [
      {
        "id" : "ea5fbbce-1fb5-4e08-84eb-9c07cb023ec9",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Exactly like in `Script`, but the trigger's `initialize` still needs to use `getContracts` on its explicit `ACS` argument with the prior signature. Thoughts @cocreature ?",
        "createdAt" : "2020-10-12T14:57:20Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0cfa5ff5-f26c-4882-b975-49b44c886171",
        "parentId" : "ea5fbbce-1fb5-4e08-84eb-9c07cb023ec9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not quite sure about this. It feels a bit weird to have `query` for one but `getContracts` for the other. What are your thoughts into turning this into a reader-like monad? 3 Monads are arguably a bit confusing but 2 monads and one function which requires a different API doesn’t seem much better. @aherrmann-da What are your thoughts on this?",
        "createdAt" : "2020-10-13T08:00:45Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "632c8293-4c4d-4d6c-8e94-4108b33c85a6",
        "parentId" : "ea5fbbce-1fb5-4e08-84eb-9c07cb023ec9",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I'd tend towards three monads rather than two plus one function. Having that kind of difference between `initialize` and `updateState` seems a bit awkward if I image an example where the trigger state depends on the ACS.",
        "createdAt" : "2020-10-13T08:57:04Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "163f319f-5914-4cb7-a066-8d3554c30fc5",
        "parentId" : "ea5fbbce-1fb5-4e08-84eb-9c07cb023ec9",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The affinity between `updateState` and `rule` is more obvious to me than that with `initialize`, but it is certainly a bit awkward without the third monad. Do you think it should be in this PR too?",
        "createdAt" : "2020-10-13T13:02:16Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2dbedf55-3d5c-4676-a6f2-10a915bd6d8f",
        "parentId" : "ea5fbbce-1fb5-4e08-84eb-9c07cb023ec9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think this PR makes sense to avoid introducing an inconsistency between `update` and `initialize`.",
        "createdAt" : "2020-10-13T13:09:58Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "508fb03a-17d0-4746-a6ec-6b718cece59c",
        "parentId" : "ea5fbbce-1fb5-4e08-84eb-9c07cb023ec9",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "99d6785b4846471b8711f237d86d42bd4526860c",
        "createdAt" : "2020-10-13T16:39:24Z",
        "updatedAt" : "2020-10-13T16:39:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ff9c6cdb061569d69928ce65252f33699b9f793b",
    "line" : null,
    "diffHunk" : "@@ -49,16 +51,45 @@ data ACS = ACS\n -- | TriggerA is the type used in the `rule` of a DAML trigger.\n -- Its main feature is that you can call `emitCommands` to\n -- send commands to the ledger.\n-newtype TriggerA a = TriggerA (TriggerRule TriggerAState a)\n-  deriving (Functor, Applicative, Action, HasTime)\n+newtype TriggerA a = TriggerA { runTriggerA : ACS -> TriggerRule TriggerAState a }\n+\n+instance Functor TriggerA where\n+  fmap f (TriggerA r) = TriggerA $ rliftFmap fmap f r\n+\n+instance Applicative TriggerA where\n+  pure = TriggerA . rliftPure pure\n+  TriggerA ff <*> TriggerA fa = TriggerA $ rliftAp (<*>) ff fa\n+\n+instance Action TriggerA where\n+  TriggerA fa >>= f = TriggerA $ rliftBind (>>=) fa (runTriggerA . f)\n+\n+instance HasTime TriggerA where\n+  getTime = TriggerA $ const getTime\n \n -- | TriggerStateA is the type used in the `updateState` of a DAML\n -- trigger.  It has similar actions in common with `TriggerA`, but\n -- cannot use `emitCommands` or `getTime`.\n-newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : State s a }\n-  deriving (Functor, Applicative, Action)\n+newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : ACS -> State s a }\n+\n+instance Functor (TriggerStateA s) where\n+  fmap f (TriggerStateA r) = TriggerStateA $ rliftFmap fmap f r\n+\n+instance Applicative (TriggerStateA s) where\n+  pure = TriggerStateA . rliftPure pure\n+  TriggerStateA ff <*> TriggerStateA fa = TriggerStateA $ rliftAp (<*>) ff fa\n \n-deriving instance ActionState s (TriggerStateA s)\n+instance Action (TriggerStateA s) where\n+  TriggerStateA fa >>= f = TriggerStateA $ rliftBind (>>=) fa (runTriggerStateA . f)\n+\n+instance ActionState s (TriggerStateA s) where\n+  get = TriggerStateA $ const get\n+  put = TriggerStateA . const . put\n+  modify = TriggerStateA . const . modify\n+\n+-- | Features possible in both `updateState` and `rule`.\n+class ActionTriggerUpdate m where\n+  -- | Extract the contracts of a given template from the ACS.\n+  query : Template a => m [(ContractId a, a)]"
  },
  {
    "id" : "67ab3e0c-b281-43ed-a8ea-36e7fe0fcc9f",
    "prId" : 7632,
    "comments" : [
      {
        "id" : "1bab38ff-7f15-4bb8-b101-220149fd9e73",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not quite sure this is clearer than just inlining the implementation (and I’m not sure the compiler inlines this) but if you want to keep it, a comment that this corresponds to the respective definitions for ReaderT would be great. The type signatures look a bit confusing at first.",
        "createdAt" : "2020-10-13T07:17:23Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b4e06fbc-a580-4ba4-ad57-90dcb3c3aae3",
        "parentId" : "1bab38ff-7f15-4bb8-b101-220149fd9e73",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "b63e154ec4",
        "createdAt" : "2020-10-13T16:39:33Z",
        "updatedAt" : "2020-10-13T16:39:33Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ff9c6cdb061569d69928ce65252f33699b9f793b",
    "line" : null,
    "diffHunk" : "@@ -142,3 +174,15 @@ data TriggerState s = TriggerState\n   , userState : s\n   , commandsInFlight : Map CommandId [Command]\n   }\n+\n+rliftFmap : ((a -> b) -> f a -> f b) -> (a -> b) -> (r -> f a) -> r -> f b\n+rliftFmap ub f r = ub f . r\n+\n+rliftPure : (a -> f a) -> a -> r -> f a\n+rliftPure ub = const . ub\n+\n+rliftAp : (f (a -> b) -> f a -> f b) -> (r -> f (a -> b)) -> (r -> f a) -> r -> f b\n+rliftAp ub ff fa r = ff r `ub` fa r\n+\n+rliftBind : (f a -> (a -> f b) -> f b) -> (r -> f a) -> (a -> r -> f b) -> r -> f b\n+rliftBind ub fa f r = fa r `ub` \\a -> f a r"
  },
  {
    "id" : "20c92a64-fee3-472e-a14d-80d5c342daa3",
    "prId" : 7632,
    "comments" : [
      {
        "id" : "169cf301-899b-41cf-9fb1-5790884dd907",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we want or need the indirection between `implQuery` and `query`?",
        "createdAt" : "2020-10-13T07:18:29Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d9adbd31-8b8e-48ee-b22f-676beb31d520",
        "parentId" : "169cf301-899b-41cf-9fb1-5790884dd907",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "As comment mentions, the type parameters to `implQuery` start with `m`; `query` fixes this.",
        "createdAt" : "2020-10-13T12:47:31Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "051330a1-e00a-4f8c-ab2c-a671416be863",
        "parentId" : "169cf301-899b-41cf-9fb1-5790884dd907",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "duh, thanks for the explanation.",
        "createdAt" : "2020-10-13T12:50:10Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ff9c6cdb061569d69928ce65252f33699b9f793b",
    "line" : 72,
    "diffHunk" : "@@ -49,16 +51,46 @@ data ACS = ACS\n -- | TriggerA is the type used in the `rule` of a DAML trigger.\n -- Its main feature is that you can call `emitCommands` to\n -- send commands to the ledger.\n-newtype TriggerA a = TriggerA (TriggerRule TriggerAState a)\n-  deriving (Functor, Applicative, Action, HasTime)\n+newtype TriggerA a = TriggerA { runTriggerA : ACS -> TriggerRule TriggerAState a }\n+\n+instance Functor TriggerA where\n+  fmap f (TriggerA r) = TriggerA $ rliftFmap fmap f r\n+\n+instance Applicative TriggerA where\n+  pure = TriggerA . rliftPure pure\n+  TriggerA ff <*> TriggerA fa = TriggerA $ rliftAp (<*>) ff fa\n+\n+instance Action TriggerA where\n+  TriggerA fa >>= f = TriggerA $ rliftBind (>>=) fa (runTriggerA . f)\n+\n+instance HasTime TriggerA where\n+  getTime = TriggerA $ const getTime\n \n -- | TriggerStateA is the type used in the `updateState` of a DAML\n -- trigger.  It has similar actions in common with `TriggerA`, but\n -- cannot use `emitCommands` or `getTime`.\n-newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : State s a }\n-  deriving (Functor, Applicative, Action)\n+newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : ACS -> State s a }\n+\n+instance Functor (TriggerStateA s) where\n+  fmap f (TriggerStateA r) = TriggerStateA $ rliftFmap fmap f r\n+\n+instance Applicative (TriggerStateA s) where\n+  pure = TriggerStateA . rliftPure pure\n+  TriggerStateA ff <*> TriggerStateA fa = TriggerStateA $ rliftAp (<*>) ff fa\n \n-deriving instance ActionState s (TriggerStateA s)\n+instance Action (TriggerStateA s) where\n+  TriggerStateA fa >>= f = TriggerStateA $ rliftBind (>>=) fa (runTriggerStateA . f)\n+\n+instance ActionState s (TriggerStateA s) where\n+  get = TriggerStateA $ const get\n+  put = TriggerStateA . const . put\n+  modify = TriggerStateA . const . modify\n+\n+-- | Features possible in both `updateState` and `rule`.\n+class ActionTriggerUpdate m where\n+  -- | Extract the contracts of a given template from the ACS.  (However, the\n+  -- type parameters are in the 'm a' order, so it is not exported.)\n+  implQuery : forall a. Template a => m [(ContractId a, a)]"
  },
  {
    "id" : "2486c34f-f86c-4bc0-9ff9-5b62cd01328b",
    "prId" : 7632,
    "comments" : [
      {
        "id" : "e4e74247-b60f-4420-a19b-bb964adb2380",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We probably also want `queryContractId` and maybe (less sure about that one) `queryContractKey` in here at some point but let’s leave this out of this PR.",
        "createdAt" : "2020-10-13T07:19:16Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ff9c6cdb061569d69928ce65252f33699b9f793b",
    "line" : 70,
    "diffHunk" : "@@ -49,16 +51,46 @@ data ACS = ACS\n -- | TriggerA is the type used in the `rule` of a DAML trigger.\n -- Its main feature is that you can call `emitCommands` to\n -- send commands to the ledger.\n-newtype TriggerA a = TriggerA (TriggerRule TriggerAState a)\n-  deriving (Functor, Applicative, Action, HasTime)\n+newtype TriggerA a = TriggerA { runTriggerA : ACS -> TriggerRule TriggerAState a }\n+\n+instance Functor TriggerA where\n+  fmap f (TriggerA r) = TriggerA $ rliftFmap fmap f r\n+\n+instance Applicative TriggerA where\n+  pure = TriggerA . rliftPure pure\n+  TriggerA ff <*> TriggerA fa = TriggerA $ rliftAp (<*>) ff fa\n+\n+instance Action TriggerA where\n+  TriggerA fa >>= f = TriggerA $ rliftBind (>>=) fa (runTriggerA . f)\n+\n+instance HasTime TriggerA where\n+  getTime = TriggerA $ const getTime\n \n -- | TriggerStateA is the type used in the `updateState` of a DAML\n -- trigger.  It has similar actions in common with `TriggerA`, but\n -- cannot use `emitCommands` or `getTime`.\n-newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : State s a }\n-  deriving (Functor, Applicative, Action)\n+newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : ACS -> State s a }\n+\n+instance Functor (TriggerStateA s) where\n+  fmap f (TriggerStateA r) = TriggerStateA $ rliftFmap fmap f r\n+\n+instance Applicative (TriggerStateA s) where\n+  pure = TriggerStateA . rliftPure pure\n+  TriggerStateA ff <*> TriggerStateA fa = TriggerStateA $ rliftAp (<*>) ff fa\n \n-deriving instance ActionState s (TriggerStateA s)\n+instance Action (TriggerStateA s) where\n+  TriggerStateA fa >>= f = TriggerStateA $ rliftBind (>>=) fa (runTriggerStateA . f)\n+\n+instance ActionState s (TriggerStateA s) where\n+  get = TriggerStateA $ const get\n+  put = TriggerStateA . const . put\n+  modify = TriggerStateA . const . modify\n+\n+-- | Features possible in both `updateState` and `rule`.\n+class ActionTriggerUpdate m where\n+  -- | Extract the contracts of a given template from the ACS.  (However, the"
  },
  {
    "id" : "c3a80e4b-8324-455b-8533-6bd8b7cae6b6",
    "prId" : 7632,
    "comments" : [
      {
        "id" : "90feb182-e995-417b-8a3e-ecc8c47e2f38",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thinking about this, maybe `TriggerUpdateA` would be a better name? Now that it’s not just a `State` tying the name to where we use it seems like a better option than tying it to the implementation.",
        "createdAt" : "2020-10-13T07:29:35Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5dca1c9d-e1fb-4098-b975-a38bc472fc9f",
        "parentId" : "90feb182-e995-417b-8a3e-ecc8c47e2f38",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The name actually comes from the second word in `updateState` rather than the underlying functor 🙂 but either word works.",
        "createdAt" : "2020-10-13T13:03:41Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0b919c16-31b3-4321-8d34-f21257f4af6c",
        "parentId" : "90feb182-e995-417b-8a3e-ecc8c47e2f38",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "4762ba171e",
        "createdAt" : "2020-10-13T16:39:38Z",
        "updatedAt" : "2020-10-13T16:39:38Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ff9c6cdb061569d69928ce65252f33699b9f793b",
    "line" : null,
    "diffHunk" : "@@ -49,16 +51,46 @@ data ACS = ACS\n -- | TriggerA is the type used in the `rule` of a DAML trigger.\n -- Its main feature is that you can call `emitCommands` to\n -- send commands to the ledger.\n-newtype TriggerA a = TriggerA (TriggerRule TriggerAState a)\n-  deriving (Functor, Applicative, Action, HasTime)\n+newtype TriggerA a = TriggerA { runTriggerA : ACS -> TriggerRule TriggerAState a }\n+\n+instance Functor TriggerA where\n+  fmap f (TriggerA r) = TriggerA $ rliftFmap fmap f r\n+\n+instance Applicative TriggerA where\n+  pure = TriggerA . rliftPure pure\n+  TriggerA ff <*> TriggerA fa = TriggerA $ rliftAp (<*>) ff fa\n+\n+instance Action TriggerA where\n+  TriggerA fa >>= f = TriggerA $ rliftBind (>>=) fa (runTriggerA . f)\n+\n+instance HasTime TriggerA where\n+  getTime = TriggerA $ const getTime\n \n -- | TriggerStateA is the type used in the `updateState` of a DAML\n -- trigger.  It has similar actions in common with `TriggerA`, but\n -- cannot use `emitCommands` or `getTime`.\n-newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : State s a }\n-  deriving (Functor, Applicative, Action)\n+newtype TriggerStateA s a = TriggerStateA { runTriggerStateA : ACS -> State s a }"
  },
  {
    "id" : "b22f8c8f-2524-4030-8025-d2ba60c2a631",
    "prId" : 7600,
    "comments" : [
      {
        "id" : "95aedf13-b83d-497a-9d54-d4eab5693792",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  -- ^ Zoomed from TriggerState; used for dedupCreateCmd/dedupExerciseCmd\r\n```",
        "createdAt" : "2020-10-08T12:03:59Z",
        "updatedAt" : "2020-10-08T15:37:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9efd94b5a5530c29146bd767c53ea355329ccc90",
    "line" : null,
    "diffHunk" : "@@ -102,35 +102,28 @@ applyTransaction : Transaction -> ACS -> ACS\n applyTransaction (Transaction _ _ evs) acs = foldl (flip applyEvent) acs evs\n \n runRule\n-  : (Party -> ACS -> Map CommandId [Command] -> s -> TriggerA ())\n+  : (Party -> ACS -> s -> TriggerA ())\n   -> TriggerRule (TriggerState s) ()\n runRule rule = do\n   state <- get\n   TriggerRule . zoom zoomIn zoomOut . runTriggerRule . runTriggerA\n-      $ rule state.party state.acs state.commandsInFlight state.userState\n-  where zoomIn state = TriggerAState state.commandsInFlight [] state.acs.pendingContracts\n+      $ rule state.party state.acs state.userState\n+  where zoomIn state = TriggerAState state.commandsInFlight state.acs.pendingContracts\n         zoomOut state aState =\n-          let commandsInFlight = foldl addCommands state.commandsInFlight aState.emittedCommands\n+          let commandsInFlight = aState.commandsInFlight\n               acs = state.acs { pendingContracts = aState.pendingContracts }\n           in state { commandsInFlight, acs }\n \n runTriggerA : TriggerA a -> TriggerRule TriggerAState a\n-runTriggerA (TriggerA f) = do\n-  a <- f\n-  s' <- get\n-  put s' { emittedCommands = reverse s'.emittedCommands }\n-  pure a\n+runTriggerA (TriggerA f) = f\n \n data TriggerAState = TriggerAState\n   { commandsInFlight : Map CommandId [Command]\n-  -- This is not modified during a run (new commands end up in emittedCommands)\n-  -- but for simplicity we keep it in TriggerAState instead of layering a\n-  -- Reader on top of it.\n-  -- This will be used for dedupCreateCmd/dedupExerciseCmd helpers.\n-  , emittedCommands : [Commands]\n-  -- ^ Emitted commands in reverse because I can’t be bothered to implement a dlist.\n+  -- ^ Zoomed from TriggerAState; used for dedupCreateCmd/dedupExerciseCmd"
  },
  {
    "id" : "2dd81897-00fc-420f-bcde-b354e9e6ed64",
    "prId" : 7456,
    "comments" : [
      {
        "id" : "009a58cd-3fcf-4e37-acdd-b5662309fcfe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m fine with leaving this for a separate PR if you want.",
        "createdAt" : "2020-10-01T08:14:21Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5d2eb918-8374-4c3d-86a7-bb84b9811d30",
        "parentId" : "009a58cd-3fcf-4e37-acdd-b5662309fcfe",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Nah, we'll do it live. 0ea3d9c894",
        "createdAt" : "2020-10-01T20:50:26Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "27c8c9b1e1674688c7b1e08c329341d8e4615ef4",
    "line" : null,
    "diffHunk" : "@@ -104,23 +103,28 @@ applyTransaction : Transaction -> ACS -> ACS\n applyTransaction (Transaction _ _ evs) acs = foldl (flip applyEvent) acs evs\n \n runRule\n-  : (Party -> ACS -> Time -> Map CommandId [Command] -> s -> TriggerA ())\n-  -> Time\n-  -> TriggerState s\n-  -> (TriggerState s, [Commands])\n-runRule rule time state =\n-  let (_, aState) =\n-        runTriggerA\n-          (rule state.party state.acs time state.commandsInFlight state.userState)\n-          (TriggerAState state.commandsInFlight [] state.acs.pendingContracts state.nextCommandId)\n-      commandsInFlight = foldl addCommands state.commandsInFlight aState.emittedCommands\n-      acs = state.acs { pendingContracts = aState.pendingContracts }\n-  in (state { nextCommandId = aState.nextCommandId, commandsInFlight, acs }, aState.emittedCommands)\n-\n-runTriggerA : TriggerA a -> TriggerAState -> (a, TriggerAState)\n-runTriggerA (TriggerA f) s =\n-  let (a, s') = runState f s\n-  in (a, s' { emittedCommands = reverse s'.emittedCommands })\n+  : (Party -> ACS -> Map CommandId [Command] -> s -> TriggerA ())\n+  -> TriggerRule (TriggerState s) ()\n+runRule rule = do\n+  state <- get\n+  cmds <- TriggerRule . zoom zoomIn zoomOut $ do\n+    runTriggerRule . runTriggerA\n+        $ rule state.party state.acs state.commandsInFlight state.userState\n+    aState <- get\n+    pure aState.emittedCommands\n+  mapA_ submitCommands cmds -- TODO don't procrastinate"
  },
  {
    "id" : "13f106da-87f0-4178-a128-9370bc45824a",
    "prId" : 7425,
    "comments" : [
      {
        "id" : "930716b2-6fcc-4815-bf7d-7fdf7523fac6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems a bit too code golfy. I think just moving `AnyContractId AnyTemplate` in both branches would be easier to parse`.",
        "createdAt" : "2020-09-17T06:30:46Z",
        "updatedAt" : "2020-09-17T14:27:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eb6b1688-a5c6-4319-ac77-aebf3db24529",
        "parentId" : "930716b2-6fcc-4815-bf7d-7fdf7523fac6",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Sure. c22f62e8cc",
        "createdAt" : "2020-09-17T14:28:11Z",
        "updatedAt" : "2020-09-17T14:28:11Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "46ab21d5880f92828d8a27100457783dfe880bfd",
    "line" : null,
    "diffHunk" : "@@ -39,8 +39,11 @@ data ACS = ACS\n   { activeContracts :\n #ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON\n       GMap.Map TemplateTypeRep\n+         (GMap.Map\n+#else\n+      [] ((,)"
  },
  {
    "id" : "7304f7b9-d812-460f-a65c-504f26e3c909",
    "prId" : 7425,
    "comments" : [
      {
        "id" : "737c8744-f558-4d4a-b05d-098668b7310d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "In Haskell, the order of key and the modifier function is flipped. Not an issue here but once we move this to `daml-stdlib`,  we should probably try to match that unless we have a good reason not to do so.",
        "createdAt" : "2020-09-17T06:32:52Z",
        "updatedAt" : "2020-09-17T14:27:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a35c3b3f-59c1-47c4-99ab-5cd1c4e07db2",
        "parentId" : "737c8744-f558-4d4a-b05d-098668b7310d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Might as well do it now. 4cba20c0dc",
        "createdAt" : "2020-09-17T14:28:15Z",
        "updatedAt" : "2020-09-17T14:28:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "46ab21d5880f92828d8a27100457783dfe880bfd",
    "line" : null,
    "diffHunk" : "@@ -56,8 +59,8 @@ addCommands : Map CommandId [Command] -> Commands -> Map CommandId [Command]\n addCommands m (Commands cid cmds) = Map.insert cid cmds m\n \n #ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON\n-adjust : forall k v. Ord k => k -> (Optional v -> Optional v) -> GMap.Map k v -> GMap.Map k v\n-adjust k f m =\n+alter : forall k v. Ord k => k -> (Optional v -> Optional v) -> GMap.Map k v -> GMap.Map k v"
  },
  {
    "id" : "7ec64d09-e7b7-4da7-b943-6b1175602de1",
    "prId" : 7425,
    "comments" : [
      {
        "id" : "8e2469d8-5fd6-43fe-8644-b7d782fdcac4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "nit: I’m generally in favor of not making indentation depend on identifier length so a line-break before the start of the type signature.",
        "createdAt" : "2020-09-17T06:33:42Z",
        "updatedAt" : "2020-09-17T14:27:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d6ef9508-82e6-47c6-997d-5693ee40afa4",
        "parentId" : "8e2469d8-5fd6-43fe-8644-b7d782fdcac4",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "No problem. e58ffae6ec",
        "createdAt" : "2020-09-17T14:28:17Z",
        "updatedAt" : "2020-09-17T14:28:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "46ab21d5880f92828d8a27100457783dfe880bfd",
    "line" : null,
    "diffHunk" : "@@ -67,40 +70,39 @@ adjust k f m =\n \n insertTpl : AnyContractId -> AnyTemplate -> ACS -> ACS\n #ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON\n-insertTpl cid tpl acs = acs { activeContracts = adjust cid.templateId addct acs.activeContracts }\n-  where addct ol = Some $ (cid, tpl) :: fromOptional [] ol\n+insertTpl cid tpl acs = acs { activeContracts = alter cid.templateId addct acs.activeContracts }\n+  where addct = Some . GMap.insert cid tpl . fromOptional mempty\n #else\n insertTpl cid tpl acs = acs { activeContracts = (cid, tpl) :: acs.activeContracts }\n #endif\n \n #ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON\n-groupActiveContracts : [(AnyContractId, AnyTemplate)] -> GMap.Map TemplateTypeRep [(AnyContractId, AnyTemplate)]\n-groupActiveContracts = foldr (\\v@(cid, _) -> adjust cid.templateId (addct v)) GMap.empty\n-  where addct v ol = Some $ v :: fromOptional [] ol\n+groupActiveContracts : [(AnyContractId, AnyTemplate)]"
  },
  {
    "id" : "e9c7eb62-1d1a-4bdd-8b7b-c1820a9638fc",
    "prId" : 7365,
    "comments" : [
      {
        "id" : "45901750-e84b-4390-8652-36c1578924a1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not for this PR but we could consider changing the list in the values to `Map AnyContractId AnyTemplate`. Then we can provide a fast lookup by contract id which is something you need fairly often.",
        "createdAt" : "2020-09-15T06:44:06Z",
        "updatedAt" : "2020-09-15T16:16:18Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34cacb51-8e03-434d-b939-590f9838f694",
        "parentId" : "45901750-e84b-4390-8652-36c1578924a1",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "#7425 ",
        "createdAt" : "2020-09-16T18:32:12Z",
        "updatedAt" : "2020-09-16T18:32:12Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3a96e389dfc2eede6162b56592858ea743a21",
    "line" : 29,
    "diffHunk" : "@@ -30,7 +34,11 @@ import Daml.Trigger.LowLevel hiding (Trigger)\n \n -- This will change to a Map once we have proper maps in DAML-LF\n data ACS = ACS"
  },
  {
    "id" : "1b4fcdd2-ebdc-4490-9eab-7a318ab6c9c7",
    "prId" : 7365,
    "comments" : [
      {
        "id" : "becd3994-d301-467c-9ab2-ed3c96eb3461",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "@sofiafaro-da perhaps something worth adding to `DA.Map`? What do you think? (not in this PR)",
        "createdAt" : "2020-09-15T06:45:04Z",
        "updatedAt" : "2020-09-15T16:16:18Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38f9cb09-7a15-4989-af78-7db926695fd0",
        "parentId" : "becd3994-d301-467c-9ab2-ed3c96eb3461",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "yeah, that looks like a good function to have in DA.Map :) ",
        "createdAt" : "2020-09-15T09:57:13Z",
        "updatedAt" : "2020-09-15T16:16:18Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d7890188-1557-471c-bd12-c4f516d8f4db",
        "parentId" : "becd3994-d301-467c-9ab2-ed3c96eb3461",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "#7427",
        "createdAt" : "2020-09-16T23:15:09Z",
        "updatedAt" : "2020-09-16T23:15:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3a96e389dfc2eede6162b56592858ea743a21",
    "line" : 44,
    "diffHunk" : "@@ -45,15 +53,53 @@ newtype TriggerA a = TriggerA (State TriggerAState a)\n addCommands : Map CommandId [Command] -> Commands -> Map CommandId [Command]\n addCommands m (Commands cid cmds) = Map.insert cid cmds m\n \n+#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON\n+adjust : forall k v. Ord k => k -> (Optional v -> Optional v) -> GMap.Map k v -> GMap.Map k v"
  }
]