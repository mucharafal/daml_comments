[
  {
    "id" : "8889c99b-62c1-4391-a33e-16b226e32c99",
    "prId" : 467,
    "comments" : [
      {
        "id" : "2e19eb0e-d693-4a0a-8c70-e95b20e0341f",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "`git checkout -b feature-xxx --track upstream/da-master` should do the same thing in one command.",
        "createdAt" : "2019-04-15T07:27:32Z",
        "updatedAt" : "2019-04-15T09:40:41Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6088077c-ab10-4c3b-8891-032b8c7cf672",
        "parentId" : "2e19eb0e-d693-4a0a-8c70-e95b20e0341f",
        "author" : null,
        "body" : "You'd think so but in fact it creates a tracking branch.\r\n```\r\nBranch 'feature-xxx' set up to track remote branch 'da-master' from 'upstream'.\r\nSwitched to a new branch 'feature-xxx'\r\n```\r\nI'll change this to \r\n```\r\ngit checkout -t upstream/da-master\r\ngit checkout -b feature-xxx da-master\r\n```\r\nfor clarity.",
        "createdAt" : "2019-04-15T09:24:52Z",
        "updatedAt" : "2019-04-15T09:40:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c6d10c590fee887a46ed27c0d2ef435f6996db2e",
    "line" : 162,
    "diffHunk" : "@@ -183,20 +194,48 @@ git checkout da-master && git rebase master\n git checkout -t origin/da-unit-ids && git rebase master\n ```\n Obviously, you will need to deal with any rebase conflicts that come up (hopefully not often). You can test `ghc-lib` after rebasing by following the [build procedure](#how-to-build-ghc-lib-from-the-da-ghc-fork) replacing the line\n-```\n+```bash\n git remote add upstream git@github.com:digital-asset/ghc.git\n ```\n with\n-```\n+```bash\n git remote add upstream $HOME/tmp/ghc\n ```\n and then the [test procedure](#how-to-test-ghc-lib).\n \n When you are satisfied that the tests pass, you can push the changes to origin with these commands:\n-```\n+```bash\n cd ~/tmp/ghc\n git push origin master:master\n git push -f origin da-master:da-master\n git push -f origin da-unit-ids:da-unit-ids\n ```\n After this, release the updated `ghc-lib` following the usual [deployment procedure](#how-to-deploy-ghc-lib).\n+\n+## How to develop `ghc-lib`\n+\n+The following procedure sets up a new feature branch with starting point `da-master`.\n+```bash\n+mkdir ~/tmp && cd ~/tmp\n+git clone https://gitlab.haskell.org/ghc/ghc.git ghc.git\n+cd ghc.git\n+git remote add upstream git@github.com:digital-asset/ghc.git\n+git fetch upstream da-master\n+git checkout -b da-master --track upstream/da-master\n+git checkout -b feature-xxx da-master"
  },
  {
    "id" : "917e0f3e-9f2d-4210-acdf-0e0b7976b890",
    "prId" : 467,
    "comments" : [
      {
        "id" : "57b6eb02-f9a2-490e-9b98-08bbe258bca6",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "```suggestion\r\ngit push upstream feature-xxx\r\n```\r\nMakes it easier to not have a typo in one of the branch names.",
        "createdAt" : "2019-04-15T07:29:00Z",
        "updatedAt" : "2019-04-15T09:40:41Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c6d10c590fee887a46ed27c0d2ef435f6996db2e",
    "line" : 163,
    "diffHunk" : "@@ -183,20 +194,48 @@ git checkout da-master && git rebase master\n git checkout -t origin/da-unit-ids && git rebase master\n ```\n Obviously, you will need to deal with any rebase conflicts that come up (hopefully not often). You can test `ghc-lib` after rebasing by following the [build procedure](#how-to-build-ghc-lib-from-the-da-ghc-fork) replacing the line\n-```\n+```bash\n git remote add upstream git@github.com:digital-asset/ghc.git\n ```\n with\n-```\n+```bash\n git remote add upstream $HOME/tmp/ghc\n ```\n and then the [test procedure](#how-to-test-ghc-lib).\n \n When you are satisfied that the tests pass, you can push the changes to origin with these commands:\n-```\n+```bash\n cd ~/tmp/ghc\n git push origin master:master\n git push -f origin da-master:da-master\n git push -f origin da-unit-ids:da-unit-ids\n ```\n After this, release the updated `ghc-lib` following the usual [deployment procedure](#how-to-deploy-ghc-lib).\n+\n+## How to develop `ghc-lib`\n+\n+The following procedure sets up a new feature branch with starting point `da-master`.\n+```bash\n+mkdir ~/tmp && cd ~/tmp\n+git clone https://gitlab.haskell.org/ghc/ghc.git ghc.git\n+cd ghc.git\n+git remote add upstream git@github.com:digital-asset/ghc.git\n+git fetch upstream da-master\n+git checkout -b da-master --track upstream/da-master\n+git checkout -b feature-xxx da-master\n+git push upstream feature-xxx:feature-xxx"
  }
]