[
  {
    "id" : "78ebbe6e-e2d2-40b3-8d2f-44103f0c48ba",
    "prId" : 7218,
    "comments" : [
      {
        "id" : "63eccec0-ddf1-43de-af55-eff3b8024167",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can we use consistent indentation?\r\n\r\n```suggestion\r\n      # Some memory segments cannot be removed and fail with \"invalid argument\".\r\n      # We just ignore those for now instead of failing CI.\r\n      ipcrm -m $shmid || true\r\n```",
        "createdAt" : "2020-08-25T08:15:40Z",
        "updatedAt" : "2020-08-25T08:18:52Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "af549f995400d0b760a941a16b7bb645c7c5f1f3",
    "line" : null,
    "diffHunk" : "@@ -34,6 +34,8 @@ steps:\n     # which is what ipcrm expects as its arguments. After the table, ipcs -m\n     # adds an extra blank line, hence the extra sed at the end.\n     for shmid in $(ipcs -m | sed 1,3d | awk '{print $2}' | sed '$d'); do\n-        ipcrm -m $shmid\n+    # Some memory segments cannot be removed and fail with \"invalid argument\".\n+    # We just ignore those for now instead of failing CI.\n+        ipcrm -m $shmid || true"
  },
  {
    "id" : "bf9b532d-320d-44c6-a2ec-0efae6f02416",
    "prId" : 6545,
    "comments" : [
      {
        "id" : "8072a721-2965-4626-9199-81bf8f53a50d",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'd find this easier to read if the important operation was on a new line.\r\n\r\n```suggestion\r\n      for shmid in $(ipcs -m | sed 1,3d | awk '{print $2}' | sed '$d'); do\r\n        ipcrm -m $shmid\r\n      done\r\n```",
        "createdAt" : "2020-06-30T13:13:28Z",
        "updatedAt" : "2020-06-30T13:13:41Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "01f9120c23860d6c7e088b1d40a9a39599db0aa6",
    "line" : 31,
    "diffHunk" : "@@ -0,0 +1,32 @@\n+# Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+\n+# We have a number of tests that require spawning and then destroying an\n+# instance of a PostgreSQL server. PostgreSQL uses a shared memory segment to\n+# coordinate between internal threads. On macOS (and maybe other platforms, but\n+# macOS is the one where we observed the issue), about one in three times Bazel\n+# stops a PostgreSQL server, the shared memory segment does not get reclaimed.\n+# Over time, the shared memory gets full and the machine is not able to start\n+# new instances of PostgreSQL until it gets rebooted. Given that we do not have\n+# an easy way to reboot macOS nodes, this is a Bad Thing™.\n+#\n+# This simple script will mark all of the existing shared memory segments on\n+# the machine for deletion. This has not been extensively tested and may cause\n+# issues. It seems safe enough for now because:\n+#\n+# 1. We currently do not run any other application than PostgreSQL that uses\n+# shared memory segments on CI, and\n+#\n+# 2. The command, despite the `rm` in its name, does not actually delete the\n+# memory segments, but simply marks them for reclamation. They will be kept for\n+# as long as there is at least one process connected to them. Since PostgreSQL,\n+# at least in the configuration we are using, runs from a single process, this\n+# is safe to run even while PostgreSQL is still running (Works On My Machine®).\n+# Segments do get deleted immediately if there is no process connected to them\n+# when the command is run.\n+\n+steps:\n+  - bash: |\n+      set -euo pipefail\n+      for shmid in $(ipcs -m | sed 1,3d | awk '{print $2}' | sed '$d'); do ipcrm -m $shmid; done"
  }
]