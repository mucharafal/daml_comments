[
  {
    "id" : "27d59d05-5c9d-4273-a5cb-72cfb706e52b",
    "prId" : 6073,
    "comments" : [
      {
        "id" : "66e9adf6-0bfc-470c-95e6-a108290e8c34",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "\r\n```suggestion\r\n        controllersDifferFromActors = false,\r\n```\r\nThere is too much argument here. It is probably better to use names for all arguments here. ",
        "createdAt" : "2020-05-28T12:24:53Z",
        "updatedAt" : "2020-06-02T16:45:26Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1210d54c-1c1a-47a9-8ec9-4ee212bcad74",
        "parentId" : "66e9adf6-0bfc-470c-95e6-a108290e8c34",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I'm not sure whether writing `signatories = signatories` instead of `signatories` communicates much valuable information. If you still think we should do it, sure.",
        "createdAt" : "2020-05-28T18:45:28Z",
        "updatedAt" : "2020-06-02T16:45:26Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bb3c0db5-769d-4076-a893-30e7b25983df",
        "parentId" : "66e9adf6-0bfc-470c-95e6-a108290e8c34",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Fair enough. ",
        "createdAt" : "2020-05-29T13:18:15Z",
        "updatedAt" : "2020-06-02T16:45:26Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a43afa0fed0f4c4d2313ac68c27ab2b37dc3636a",
    "line" : 5,
    "diffHunk" : "@@ -318,7 +318,7 @@ object ValueGenerators {\n         chosenValue,\n         stakeholders,\n         signatories,\n-        actingParties,\n+        false,"
  },
  {
    "id" : "63b0ad86-c19d-4b7b-98e2-ab74693a7563",
    "prId" : 5966,
    "comments" : [
      {
        "id" : "d0724792-1fdd-43e7-b5ee-d9a38e81721f",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Where did this `94` come from? Might be worth pulling it out into a constant and explaining it. Is it just to make sure the generator keeps things small enough?",
        "createdAt" : "2020-05-13T15:48:24Z",
        "updatedAt" : "2020-05-13T16:46:59Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f20e760e-a647-4d6c-8068-d749cbb632b0",
        "parentId" : "d0724792-1fdd-43e7-b5ee-d9a38e81721f",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Avoid `filter` unless the price of doing without is very high. (That's why the other code below enforces \"non-empty suffix\" via \"generate another byte and append it so there must have been at least 1\" rather than \"filter out empty suffixes\".)\r\n\r\nIn this case, I would rename `genBytes` to `genBytes94` and define it as\r\n\r\n```scala\r\n  for\r\n    sz <- Gen.chooseNum(0, 94)\r\n    ab <- Gen.containerOfN[Array, Byte](sz, arbitrary[Byte])\r\n  } yield Bytes fromByteArray ab\r\n```",
        "createdAt" : "2020-05-13T15:51:11Z",
        "updatedAt" : "2020-05-13T16:46:59Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c775000b-ea71-47cd-a37d-3e2b64b86228",
        "parentId" : "d0724792-1fdd-43e7-b5ee-d9a38e81721f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Done. Thanks.",
        "createdAt" : "2020-05-13T16:32:55Z",
        "updatedAt" : "2020-05-13T16:46:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1c31fcd6f1afce560a4ef4dba5af7a6f877ec71a",
    "line" : null,
    "diffHunk" : "@@ -154,7 +154,9 @@ object ValueGenerators {\n   val absCoidV0Gen: Gen[AbsoluteContractId.V0] =\n     Gen.alphaStr.map(t => Value.AbsoluteContractId.V0.assertFromString('#' +: t))\n   private val genAbsCidV1: Gen[AbsoluteContractId.V1] =\n-    Gen.zip(genHash, genBytes) map { case (h, b) => AbsoluteContractId.V1.assertBuild(h, b) }\n+    Gen.zip(genHash, genBytes.filter(_.length <= 94)) map {"
  },
  {
    "id" : "6c0d18f4-fd85-4b55-9b25-9c611105ff5a",
    "prId" : 5966,
    "comments" : [
      {
        "id" : "712e3111-1cd9-45b3-94e9-9f5700d6fcdf",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Same with the `93` here.",
        "createdAt" : "2020-05-13T15:48:30Z",
        "updatedAt" : "2020-05-13T16:46:59Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0a07ea16-ec36-43e8-af3e-9143088851cb",
        "parentId" : "712e3111-1cd9-45b3-94e9-9f5700d6fcdf",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Since the append is now more trouble than it was before, given the aforementioned motivation for doing this at all:\r\n\r\n```suggestion\r\n                if (b1.suffix.nonEmpty) b1.suffix else Bytes fromByteArray Array(b)\r\n```",
        "createdAt" : "2020-05-13T15:53:10Z",
        "updatedAt" : "2020-05-13T16:46:59Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1658f868-65da-409d-a15b-119e19332655",
        "parentId" : "712e3111-1cd9-45b3-94e9-9f5700d6fcdf",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Done. Thanks. ",
        "createdAt" : "2020-05-13T16:33:08Z",
        "updatedAt" : "2020-05-13T16:46:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1c31fcd6f1afce560a4ef4dba5af7a6f877ec71a",
    "line" : null,
    "diffHunk" : "@@ -166,7 +168,9 @@ object ValueGenerators {\n         Gen.zip(genAbsCidV1, arbitrary[Byte]) map {\n           case (b1, b) =>\n             AbsoluteContractId.V1\n-              .assertBuild(b1.discriminator, b1.suffix ++ Bytes.fromByteArray(Array(b)))\n+              .assertBuild(\n+                b1.discriminator,\n+                b1.suffix.slice(0, b1.suffix.length min 93) ++ Bytes.fromByteArray(Array(b)))"
  },
  {
    "id" : "2381555f-2b40-4270-9ef9-6c6b5133d926",
    "prId" : 5526,
    "comments" : [
      {
        "id" : "c8f63f66-f8b7-4311-8ce7-a914e7d72011",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I should have done it. \r\nWe will do it soon. ",
        "createdAt" : "2020-04-14T08:05:11Z",
        "updatedAt" : "2020-04-24T20:58:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1355a2c792b820752b3f4a7fe7b384b7ef174c",
    "line" : 4,
    "diffHunk" : "@@ -150,6 +150,8 @@ object ValueGenerators {\n   private val genAbsCidV0: Gen[AbsoluteContractId.V0] =\n     Gen.alphaStr.map(t => Value.AbsoluteContractId.V0.assertFromString('#' +: t))\n \n+  def absCoidGen: Gen[AbsoluteContractId] = genAbsCidV0 // TODO SC gen V1"
  },
  {
    "id" : "9fd57dd4-e008-482a-b871-dbfc8cc40f68",
    "prId" : 4460,
    "comments" : [
      {
        "id" : "1da819d6-b9a2-4b73-a79b-79aca0fec3bf",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Why.",
        "createdAt" : "2020-02-13T14:46:55Z",
        "updatedAt" : "2020-02-13T15:22:25Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "59b8325563e5f1d36534e27674434e055016d4ba",
    "line" : 6,
    "diffHunk" : "@@ -1,7 +1,8 @@\n // Copyright (c) 2020 The DAML Authors. All rights reserved.\n // SPDX-License-Identifier: Apache-2.0\n \n-package com.digitalasset.daml.lf.value\n+package com.digitalasset.daml.lf\n+package value"
  },
  {
    "id" : "433d2b5a-5bc9-47a7-9949-a40e812a73af",
    "prId" : 3583,
    "comments" : [
      {
        "id" : "c59f227f-b74d-4a9f-aca6-55bea5d6ccad",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n        Gen.zip(Gen.lzy(valueGen(nesting)), Gen.lzy(valueGen(nesting)))\r\n```\r\n\r\nWithout the `for` trappings.",
        "createdAt" : "2019-11-22T17:14:57Z",
        "updatedAt" : "2019-11-26T12:53:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c1383fa14c7b88c29c69f359b78fbefb142afbc8",
    "line" : null,
    "diffHunk" : "@@ -196,6 +196,14 @@ object ValueGenerators {\n     } yield ValueTextMap[ContractId](SortedLookupList(Map(list: _*)))\n   def valueMapGen: Gen[ValueTextMap[ContractId]] = valueMapGen(0)\n \n+  private def valueGenMapGen(nesting: Int) =\n+    for {\n+      list <- Gen.listOf(for {\n+        k <- Gen.lzy(valueGen(nesting)); v <- Gen.lzy(valueGen(nesting))"
  },
  {
    "id" : "bf654c81-c130-433b-85d7-40503f8d643b",
    "prId" : 3583,
    "comments" : [
      {
        "id" : "381188a1-c379-4b70-bef0-16a2e78575b8",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      .map(list => ValueGenMap[ContractId](ImmArray(list)))\r\n```\r\n\r\nI'll leave you to 😨 😢 about why it compiled",
        "createdAt" : "2019-11-25T17:22:23Z",
        "updatedAt" : "2019-11-26T12:53:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c1383fa14c7b88c29c69f359b78fbefb142afbc8",
    "line" : null,
    "diffHunk" : "@@ -196,6 +196,13 @@ object ValueGenerators {\n     } yield ValueTextMap[ContractId](SortedLookupList(Map(list: _*)))\n   def valueMapGen: Gen[ValueTextMap[ContractId]] = valueMapGen(0)\n \n+  private def valueGenMapGen(nesting: Int) =\n+    Gen\n+      .listOf(Gen.zip(Gen.lzy(valueGen(nesting)), Gen.lzy(valueGen(nesting))))\n+      .flatMap(list => ValueGenMap[ContractId](ImmArray(list)))"
  },
  {
    "id" : "02f7f53a-0430-414d-a51c-9015d15478dd",
    "prId" : 583,
    "comments" : [
      {
        "id" : "e384687f-236d-45b1-bc5e-64242813bfcd",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "So, as you've surmised, `Some(exerciseResultValue)` is the right thing to have here. But then you have the problem that this gets discarded for encoding transactions < version `minExerciseResult`, right?\r\n\r\nFor the roundtrip tests you need to use a looser comparison. You can just drop the `exerciseResult` from each side:\r\n\r\n```scala\r\ndef withoutExerciseResult[Nid, Cid, Val](gn: GenNode[Nid, Cid, Val])\r\n    : GenNode[Nid, Cid, Val] =\r\n  gn match {\r\n    case ne: NodeExercises[Nid, Cid, Val] => ne copy (exerciseResult = None)\r\n    case _ => gn\r\n  }\r\n\r\ndef withoutExerciseResults[Nid, Cid, Val](t: GenTransaction[Nid, Cid, Val])\r\n    : GenTransaction[Nid, Cid, Val] =\r\n  t copy (nodes = t.nodes transform ((_, gn) => withoutExerciseResult(gn)))\r\n```\r\n\r\nThen you can say something like\r\n\r\n```scala\r\n  roundtripped shouldBe (if (version precedes minExerciseResult)\r\n                           withoutExerciseResults(original)\r\n                         else original)\r\n```",
        "createdAt" : "2019-05-02T18:01:12Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "873145cc-b812-4371-b9cf-47e0bdad38f9",
        "parentId" : "e384687f-236d-45b1-bc5e-64242813bfcd",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-05-03T14:14:51Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -323,7 +326,8 @@ object ValueGenerators {\n         stakeholders,\n         signatories,\n         controllers,\n-        children\n+        children,\n+        None // Some(exerciseResultValue) TODO - See above"
  }
]