[
  {
    "id" : "5b2e8db1-8bf7-4d98-826f-a35770a6e0f3",
    "prId" : 7459,
    "comments" : [
      {
        "id" : "b6f40d32-d399-4ba4-9213-9101784afd03",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's a much better name. ðŸ˜» ",
        "createdAt" : "2020-09-22T12:37:19Z",
        "updatedAt" : "2020-09-22T12:37:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fc43a7ec8c7b1f77c865fe3639b56f6bfcaccabc",
    "line" : 140,
    "diffHunk" : "@@ -118,7 +119,8 @@ object Repl {\n   }\n \n   private implicit class StateOp(val x: (Boolean, State)) extends AnyVal {\n-    def fMap(f: State => (Boolean, State)): (Boolean, State) =\n+\n+    def chain(f: State => (Boolean, State)): (Boolean, State) ="
  },
  {
    "id" : "3e9bdb0f-5f31-4984-b4c3-a04a376b4f12",
    "prId" : 6907,
    "comments" : [
      {
        "id" : "9160453b-29f0-45ea-9717-f29c044a7c2f",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "What does this `x @ _` syntax do? I would have thought it would just be the same as `x`.\r\n\r\nUnfortunately, it's very hard to search the web for this kind of syntax, so I have to ask.",
        "createdAt" : "2020-08-07T07:05:42Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f87c36c7-2030-4a3f-905b-e89a24941323",
        "parentId" : "9160453b-29f0-45ea-9717-f29c044a7c2f",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "it is the same as `_`, but someone may say it is more readable because it includes a descriptive var name (unused).",
        "createdAt" : "2020-08-07T12:28:00Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1e05e540-330f-4db1-bd90-7f26484ed0d5",
        "parentId" : "9160453b-29f0-45ea-9717-f29c044a7c2f",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Sometimes it is helpful, and sometimes it is just noise; I have used one or the other based on my judgment in each case.",
        "createdAt" : "2020-08-07T14:47:24Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0be6183109e0ca2416eea13d320bcf30594c3988",
    "line" : 14,
    "diffHunk" : "@@ -443,7 +443,7 @@ object Repl {\n \n     parser.parseExprs[this.type](args.mkString(\" \")) match {\n \n-      case Left(error) =>\n+      case Left(error @ _) =>"
  },
  {
    "id" : "fbfe223c-df15-4489-aca1-954058bf153e",
    "prId" : 6453,
    "comments" : [
      {
        "id" : "edb711b4-549a-4ae4-a71f-a706d35a1129",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe time to switch to a proper CLI parser?",
        "createdAt" : "2020-06-22T15:21:04Z",
        "updatedAt" : "2020-06-22T15:50:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "811ba3dc-e689-4751-98d7-279cf1f563cd",
        "parentId" : "edb711b4-549a-4ae4-a71f-a706d35a1129",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "maybe in another PR.",
        "createdAt" : "2020-06-22T15:48:21Z",
        "updatedAt" : "2020-06-22T15:50:33Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f6cfae80a15bb5b74646d86e1f230df48fb04ee6",
    "line" : 17,
    "diffHunk" : "@@ -64,25 +64,25 @@ object Main extends App {\n     System.exit(1)\n   } else {\n     var replArgs = args.toList\n-    var allowDev = false\n+    var devMode = false\n     replArgs match {\n-      case \"--decode-lfdev\" :: rest =>\n+      case \"--dev\" :: rest =>"
  },
  {
    "id" : "d37043e4-2115-45f2-aa2f-9499187d626d",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "44891c36-6945-476c-bbba-54b0ff7aeffc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we have a token here now? That doesnâ€™t look right.",
        "createdAt" : "2020-06-17T06:06:55Z",
        "updatedAt" : "2020-06-17T08:59:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a392141e-a9dd-4500-8fdd-5144945362c7",
        "parentId" : "44891c36-6945-476c-bbba-54b0ff7aeffc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch",
        "createdAt" : "2020-06-17T07:17:10Z",
        "updatedAt" : "2020-06-17T08:59:11Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : null,
    "diffHunk" : "@@ -419,13 +418,15 @@ object Repl {\n           case Some(DValue(_, _, body, _)) =>\n             val expr = argExprs.foldLeft(body)((e, arg) => EApp(e, arg))\n \n+            val compiledPackages = PureCompiledPackages(state.packages).right.get\n             val machine =\n-              Speedy.Machine.fromExpr(\n-                expr = expr,\n-                compiledPackages = PureCompiledPackages(state.packages).right.get,\n-                scenario = false,\n+              Speedy.Machine(\n+                compiledPackages = compiledPackages,\n                 submissionTime = Time.Timestamp.now(),\n                 initialSeeding = InitialSeeding.NoSeed,\n+                expr = SEApp(compiledPackages.compiler.unsafeCompile(expr), Array(SEValue.Token)),"
  },
  {
    "id" : "3f022f2f-df81-498e-8b7a-9ce55a987a40",
    "prId" : 5881,
    "comments" : [
      {
        "id" : "fd9b6e8e-0008-47b0-afe1-db72d851b7b8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesnâ€™t make sense. You will never run more than one iteration of this loop.",
        "createdAt" : "2020-05-07T07:08:56Z",
        "updatedAt" : "2020-05-07T07:32:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "099e1986-fa90-4484-a8db-e92e0ed2f6ed",
        "parentId" : "fd9b6e8e-0008-47b0-afe1-db72d851b7b8",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. Thank you. Fixed",
        "createdAt" : "2020-05-07T07:17:09Z",
        "updatedAt" : "2020-05-07T07:32:33Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : null,
    "diffHunk" : "@@ -412,13 +412,15 @@ object Repl {\n               )\n             var count = 0\n             val startTime = System.nanoTime()\n+            var finished: SValue = null\n             var errored = false\n-            while (!machine.isFinal && !errored) {\n+            while (finished == null && !errored) {"
  },
  {
    "id" : "b76dd7bb-c9a1-46d9-8d7a-7ff133d07ed1",
    "prId" : 5881,
    "comments" : [
      {
        "id" : "4d6edf22-55c0-4d71-a4e9-b77622e16f86",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "How about something like `val (finished, errored) = machine.run match { â€¦ }`. Mutating state where we donâ€™t have to feels weird.",
        "createdAt" : "2020-05-07T07:21:00Z",
        "updatedAt" : "2020-05-07T07:32:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7726d7bf-d797-462c-b222-20f68451cf82",
        "parentId" : "4d6edf22-55c0-4d71-a4e9-b77622e16f86",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I removed the mutation. The result is now an optional value.",
        "createdAt" : "2020-05-07T07:34:40Z",
        "updatedAt" : "2020-05-07T07:34:40Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4441bef9-846f-428b-bfac-f25511b3908a",
        "parentId" : "4d6edf22-55c0-4d71-a4e9-b77622e16f86",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2020-05-07T07:39:38Z",
        "updatedAt" : "2020-05-07T07:39:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : null,
    "diffHunk" : "@@ -410,31 +410,24 @@ object Repl {\n                 submissionTime = Time.Timestamp.now(),\n                 transactionSeed = None\n               )\n-            var count = 0\n             val startTime = System.nanoTime()\n+            var finished: SValue = null\n             var errored = false\n-            while (!machine.isFinal && !errored) {\n-              machine.run match {\n-                case SResultError(err) =>\n-                  println(prettyError(err, machine.ptx).render(128))\n-                  errored = true\n-                case SResultFinalValue(_) => ()\n-                case other =>\n-                  sys.error(\"unimplemented callback: \" + other.toString)\n-              }\n-              count += 1\n+            machine.run match {"
  },
  {
    "id" : "05b55b81-4a67-412d-9475-dc66b3f921dd",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "ec491fb1-e8e5-40d5-b6c4-2f604cf19984",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I prefer to leave things like this in actual feature PRs unchanged. If you can't resist your temptation to change it, please put it in a separate PR which does nothing but these style corrections. Having two separate PRs makes reviewing easier.",
        "createdAt" : "2020-05-04T07:02:30Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0ca31278-719c-4e43-9dd7-c129bc3dfc17",
        "parentId" : "ec491fb1-e8e5-40d5-b6c4-2f604cf19984",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This was unintended.\r\nAn accidental hangover from splitting PRs. I'll revert this change back.",
        "createdAt" : "2020-05-04T09:53:09Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : null,
    "diffHunk" : "@@ -432,7 +432,7 @@ object Repl {\n             println(s\"time: ${diff}ms\")\n             if (!errored) {\n               val result = machine.ctrl match {\n-                case Speedy.CtrlValue(sv) =>\n+                case CtrlValue(sv) =>"
  },
  {
    "id" : "f87efbb3-d3aa-47c6-a36b-f8c1d33c5c57",
    "prId" : 5570,
    "comments" : [
      {
        "id" : "d54368a7-f3ba-448f-82a2-87157112a337",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Rename it to `nextSeed`?",
        "createdAt" : "2020-04-16T06:24:04Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : null,
    "diffHunk" : "@@ -103,7 +103,7 @@ object Repl {\n     crypto.Hash.secureRandom(crypto.Hash.hashPrivateKey(\"lf-repl\"))\n \n   private val nextSeedWithTime ="
  },
  {
    "id" : "82fa68e1-d44d-41b0-887a-667267872f95",
    "prId" : 4101,
    "comments" : [
      {
        "id" : "7347384a-37d0-4019-8dbd-f9ea927ebff8",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am fine not pretty print the type synonyms, but you probably should not the initals of @dajmaki in your comment.",
        "createdAt" : "2020-01-20T12:04:03Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c09d093b-a997-4171-9606-444d998caaa9",
        "parentId" : "7347384a-37d0-4019-8dbd-f9ea927ebff8",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "removed the JP",
        "createdAt" : "2020-01-20T19:49:45Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : null,
    "diffHunk" : "@@ -272,6 +272,7 @@ object Repl {\n \n   def prettyDefinitionType(defn: Definition, pkgId: PackageId, modId: ModuleName): String =\n     defn match {\n+      case DTypeSyn(_, _) => \"<type synonym>\" // FIXME(JM): pp this"
  },
  {
    "id" : "59953d7c-efc1-4215-9ef2-af948e032213",
    "prId" : 4101,
    "comments" : [
      {
        "id" : "a96a63c9-6ac1-4d9c-af50-edf3003ee56e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This pretty printer is not very important. \r\nIt should be fine to inline `TSynApp(tyCon, args)` as `TApp(TyCon(tycon), args)`",
        "createdAt" : "2020-01-20T12:06:38Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aafc0ef2-e178-42dd-b460-c74b5e9aad2d",
        "parentId" : "a96a63c9-6ac1-4d9c-af50-edf3003ee56e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I filled in the PP code for this case",
        "createdAt" : "2020-01-20T19:50:11Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : null,
    "diffHunk" : "@@ -295,6 +296,7 @@ object Repl {\n       if (needParens) s\"($s)\" else s\n \n     def prettyType(t0: Type, prec: Int = precTForall): String = t0 match {\n+      case TSynApp(_, _) => \"<TODO: #3616,typeSynApp>\""
  },
  {
    "id" : "bd67974c-6a71-486b-95b2-4cef327d141c",
    "prId" : 2104,
    "comments" : [
      {
        "id" : "2b268f77-7777-46a8-a6ed-451c8fb68ae8",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Minor: no need to keep code that has been commented out.\r\n```suggestion\r\n```",
        "createdAt" : "2019-07-12T14:39:50Z",
        "updatedAt" : "2019-07-15T11:42:34Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2636f18515945f353386a38588cde33b3a5cd839",
    "line" : null,
    "diffHunk" : "@@ -363,58 +360,71 @@ object Repl {\n     }\n   }\n \n+  implicit val parserParameters: parser.ParserParameters[Repl.this.type] =\n+    parser.ParserParameters(\n+      defaultPackageId = Ref.PackageId.assertFromString(\"-dummy-\"),\n+      languageVersion = LanguageVersion.defaultV1,\n+    )\n+\n   // Invoke the given top-level function with given arguments.\n   // The identifier can be fully-qualified (Foo.Bar@<package id>). If package is not\n   // specified, the last used package is used.\n   // If the resulting type is a scenario it is automatically executed.\n   def invokePure(state: State, id: String, args: Seq[String]): Unit = {\n-    //try {\n-    val argExprs = ValueParser.parseArgs(args).map(valueToExpr)\n-    lookup(state, id) match {\n-      case None =>\n-        println(\"Error: definition '\" + id + \"' not found. Try :list.\"); usage\n-      case Some((lfVer, DValue(_, _, body, _))) =>\n-        val expr = argExprs.foldLeft(body)((e, arg) => EApp(e, arg))\n-\n-        val machine =\n-          Speedy.Machine.fromExpr(\n-            expr = expr,\n-            checkSubmitterInMaintainers = VersionTimeline.checkSubmitterInMaintainers(lfVer),\n-            compiledPackages = PureCompiledPackages(state.packages).right.get,\n-            scenario = false\n-          )\n-        var count = 0\n-        val startTime = System.nanoTime()\n-        var errored = false\n-        while (!machine.isFinal && !errored) {\n-          machine.print(count)\n-          machine.step match {\n-            case SResultError(err) =>\n-              println(prettyError(err, machine.ptx).render(128))\n-              errored = true\n-            case SResultContinue =>\n-              ()\n-            case other =>\n-              sys.error(\"unimplemented callback: \" + other.toString)\n-          }\n-          count += 1\n-        }\n-        val endTime = System.nanoTime()\n-        val diff = (endTime - startTime) / 1000 / 1000\n-        machine.print(count)\n-        println(s\"steps: $count\")\n-        println(s\"time: ${diff}ms\")\n-        if (!errored) {\n-          val result = machine.ctrl match {\n-            case Speedy.CtrlValue(sv) =>\n-              prettyValue(true)(sv.toValue).render(128)\n-            case x => x.toString\n-          }\n-          println(\"result:\")\n-          println(result)\n+\n+    parser.parseExprs[this.type](args.mkString(\" \")) match {\n+\n+      case Left(error) =>\n+        println(s\"Error: cannot parser arguments '${args.mkString(\" \")}'\")\n+\n+      case Right(argExprs) =>\n+        lookup(state, id) match {\n+          case None =>\n+            println(\"Error: definition '\" + id + \"' not found. Try :list.\")\n+            usage\n+          case Some((lfVer, DValue(_, _, body, _))) =>\n+            val expr = argExprs.foldLeft(body)((e, arg) => EApp(e, arg))\n+\n+            val machine =\n+              Speedy.Machine.fromExpr(\n+                expr = expr,\n+                checkSubmitterInMaintainers = VersionTimeline.checkSubmitterInMaintainers(lfVer),\n+                compiledPackages = PureCompiledPackages(state.packages).right.get,\n+                scenario = false\n+              )\n+            var count = 0\n+            val startTime = System.nanoTime()\n+            var errored = false\n+            while (!machine.isFinal && !errored) {\n+//              machine.print(count)"
  }
]