[
  {
    "id" : "03c5984f-3d51-4cc0-8a50-aa998d11ff0e",
    "prId" : 3511,
    "comments" : [
      {
        "id" : "72ed5dff-b0f0-49ac-9661-12933cce2f27",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@S11001001, @cocreature: what would be a bit more descriptive name for this?",
        "createdAt" : "2019-11-18T15:47:59Z",
        "updatedAt" : "2019-11-18T17:42:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "86f1eb33-e155-4741-af22-298224e523a0",
        "parentId" : "72ed5dff-b0f0-49ac-9661-12933cce2f27",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "How about `toIfaceType`?",
        "createdAt" : "2019-11-18T15:49:05Z",
        "updatedAt" : "2019-11-18T17:42:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73a840fc-4d4d-4ddd-95c9-b6c036f4eed0",
        "parentId" : "72ed5dff-b0f0-49ac-9661-12933cce2f27",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Renamed to `toIfaceType`. Happy to change it to something else, I donâ€™t care much for the name here.",
        "createdAt" : "2019-11-18T17:18:02Z",
        "updatedAt" : "2019-11-18T17:42:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dab6b871a9e093867c0cd102f19774195691d42c",
    "line" : null,
    "diffHunk" : "@@ -195,7 +195,7 @@ object InterfaceReader {\n     : InterfaceReaderError \\/ ImmArraySeq[(Ref.Name, Type)] =\n     fields.toSeq traverseU { case (fieldName, typ) => type_(ctx, typ).map(x => fieldName -> x) }\n \n-  private def type_(\n+  def type_("
  },
  {
    "id" : "8e5aeae1-3b96-445e-bdc6-a67a10747665",
    "prId" : 3511,
    "comments" : [
      {
        "id" : "4217fcbf-dad0-4f65-81cc-655825c43373",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  private[lf] def toIfaceType(\r\n```",
        "createdAt" : "2019-11-18T17:40:38Z",
        "updatedAt" : "2019-11-18T17:42:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dab6b871a9e093867c0cd102f19774195691d42c",
    "line" : null,
    "diffHunk" : "@@ -193,9 +193,11 @@ object InterfaceReader {\n \n   private[reader] def fieldsOrCons(ctx: QualifiedName, fields: ImmArray[(Ref.Name, Ast.Type)])\n     : InterfaceReaderError \\/ ImmArraySeq[(Ref.Name, Type)] =\n-    fields.toSeq traverseU { case (fieldName, typ) => type_(ctx, typ).map(x => fieldName -> x) }\n+    fields.toSeq traverseU {\n+      case (fieldName, typ) => toIfaceType(ctx, typ).map(x => fieldName -> x)\n+    }\n \n-  private def type_(\n+  def toIfaceType("
  },
  {
    "id" : "d6c393c5-8c1e-4e59-bd4d-e91df00a2f77",
    "prId" : 1529,
    "comments" : [
      {
        "id" : "caaf13f6-aac9-40d6-8a57-b1fcf36ada8d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    def addEnum(k: QualifiedName, tyVars: ImmArraySeq[Ref.Name], a: Enum) =\r\n```",
        "createdAt" : "2019-06-05T15:36:07Z",
        "updatedAt" : "2019-06-06T15:52:39Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "19c9e53f-ae1e-4ee5-a7c8-ee926b3ac37e",
        "parentId" : "caaf13f6-aac9-40d6-8a57-b1fcf36ada8d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-06-05T15:59:23Z",
        "updatedAt" : "2019-06-06T15:52:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "181ced0b995bc7875f05cc8260012e8f7fd9d6aa",
    "line" : null,
    "diffHunk" : "@@ -57,6 +57,9 @@ object InterfaceReader {\n     def addVariant(k: QualifiedName, tyVars: ImmArraySeq[Ref.Name], a: Variant.FWT): State =\n       this.copy(typeDecls = this.typeDecls.updated(k, InterfaceType.Normal(DefDataType(tyVars, a))))\n \n+    def addEnum[E](k: QualifiedName, tyVars: ImmArraySeq[Ref.Name], a: Enum) ="
  },
  {
    "id" : "929d1bad-aefd-40c5-8c2d-2ad5c0e2a5ea",
    "prId" : 1529,
    "comments" : [
      {
        "id" : "040b74ad-51ef-4ebf-a1a3-c79e75268a7d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Variants have constructors too.\r\n\r\n```suggestion\r\n  private def enumConstructors(as: DamlLf1.DefDataType): InterfaceReaderError \\/ ImmArraySeq[Name] =\r\n```",
        "createdAt" : "2019-06-05T15:37:38Z",
        "updatedAt" : "2019-06-06T15:52:39Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e35c7037-147b-445d-a3cf-1444fcb530c5",
        "parentId" : "040b74ad-51ef-4ebf-a1a3-c79e75268a7d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-06-05T15:59:59Z",
        "updatedAt" : "2019-06-06T15:52:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "181ced0b995bc7875f05cc8260012e8f7fd9d6aa",
    "line" : null,
    "diffHunk" : "@@ -266,6 +288,9 @@ object InterfaceReader {\n       ctx: Context): InterfaceReaderError \\/ FieldWithType =\n     type_(a.getType, ctx).flatMap(t => name(a.getField).map(_ -> t))\n \n+  private def constructors(as: DamlLf1.DefDataType): InterfaceReaderError \\/ ImmArray[Name] ="
  },
  {
    "id" : "8874f800-5546-4b9c-86c9-345b6bedafda",
    "prId" : 1529,
    "comments" : [
      {
        "id" : "0973cbe5-e120-454d-be68-4b87e60d8ce9",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`(_:ImmArraySeq[...]).toImmArray.toSeq` = `identity`\r\n\r\n```suggestion\r\n        (k, tyVars.toSeq, Enum(constructors))\r\n```",
        "createdAt" : "2019-06-05T15:39:32Z",
        "updatedAt" : "2019-06-06T15:52:39Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c3a9a2ea-721c-48ab-a19e-a1ee94f47709",
        "parentId" : "0973cbe5-e120-454d-be68-4b87e60d8ce9",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-06-05T16:02:13Z",
        "updatedAt" : "2019-06-06T15:52:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "181ced0b995bc7875f05cc8260012e8f7fd9d6aa",
    "line" : null,
    "diffHunk" : "@@ -170,6 +175,23 @@ object InterfaceReader {\n       (k, tyVars.toSeq, Variant(fields.toSeq))\n     }\n \n+  private def foldEnums(\n+      state: State,\n+      a: (InterfaceReaderError.Tree, Iterable[(QualifiedName, ImmArraySeq[Ref.Name], Enum)]))\n+    : State =\n+    addPartitionToState(state, a) {\n+      case (st, (k, typVars, enum)) => st.addEnum(k, typVars, enum)\n+    }\n+\n+  private[reader] def enum(m: ModuleName)(a: DamlLf1.DefDataType)\n+    : InterfaceReaderError.Tree \\/ (QualifiedName, ImmArraySeq[Ref.Name], Enum) =\n+    (locate('name, rootErrOf[ErrorLoc](fullName(m, a.getName))).validation |@|\n+      locate('typeParams, typeParams(a)).validation |@|\n+      locate('constructors, rootErrOf[ErrorLoc](constructors(a))).validation) {\n+      (k, tyVars, constructors) =>\n+        (k, tyVars.toSeq, Enum(constructors.toSeq))"
  }
]