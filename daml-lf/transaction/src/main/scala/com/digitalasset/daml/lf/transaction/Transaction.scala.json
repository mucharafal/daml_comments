[
  {
    "id" : "b489f317-fe1e-4785-925e-0f73fd1f8505",
    "prId" : 7617,
    "comments" : [
      {
        "id" : "ff3b42d4-755c-4688-a293-a78b710c93b8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We need to improve this. A constructor pattern with so many positional arguments makes me cringe. Let's do it in a separate PR though.",
        "createdAt" : "2020-10-09T14:10:40Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "028bbced28b92a3143f68f3f65bf48954cba4025",
    "line" : 20,
    "diffHunk" : "@@ -501,11 +501,11 @@ object GenTransaction extends value.CidContainer3[GenTransaction] {\n           node match {\n             case Node.NodeCreate(_, c, _, _, _, Some(key)) =>\n               state.created(globalKey(c.template, key.key.value))\n-            case Node.NodeExercises(_, tmplId, _, _, true, _, _, _, _, _, _, _, Some(key)) =>\n+            case Node.NodeExercises(_, tmplId, _, _, true, _, _, _, _, _, _, _, Some(key), _) =>\n               state.consumed(globalKey(tmplId, key.key.value))\n-            case Node.NodeExercises(_, tmplId, _, _, false, _, _, _, _, _, _, _, Some(key)) =>\n+            case Node.NodeExercises(_, tmplId, _, _, false, _, _, _, _, _, _, _, Some(key), _) =>"
  },
  {
    "id" : "4e12c47e-1b4a-47f0-9be1-cb7b1e2ac67a",
    "prId" : 7437,
    "comments" : [
      {
        "id" : "2b7b4d2b-96cc-44a2-8f19-adab1515f0e4",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      fa: FailedAuthorization,\r\n```",
        "createdAt" : "2020-09-18T13:26:21Z",
        "updatedAt" : "2020-09-18T16:01:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2d0de2d68e8b984633eefb02b8cadbe21e6d4dc",
    "line" : null,
    "diffHunk" : "@@ -576,6 +576,9 @@ object Transaction {\n       consumedBy: transaction.NodeId)\n       extends TransactionError\n \n-  final case class AuthErrorsDuringExecution(fail: FailedAuthorizations) extends TransactionError\n+  final case class AuthFailureDuringExecution(\n+      nid: transaction.NodeId,\n+      fa: FailedAuthorization"
  },
  {
    "id" : "3b9ec7a5-992a-48ed-aa1e-ffcbc7febd2e",
    "prId" : 7409,
    "comments" : [
      {
        "id" : "9561e2a4-6af8-4532-ba33-f30b8d8c1cf2",
        "parentId" : null,
        "author" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "body" : "Could drop active check for this an referenced as set operation benign in excluded case.",
        "createdAt" : "2020-09-16T10:19:38Z",
        "updatedAt" : "2020-09-16T11:03:56Z",
        "lastEditedBy" : {
          "login" : "simonmaxen-da",
          "name" : "Simon Maxen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/56595114?u=cfde0812fcba2729e1d8f0b715136950eee6f84f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0b40da9-2d58-4738-a86f-acdfb323747b",
        "parentId" : "9561e2a4-6af8-4532-ba33-f30b8d8c1cf2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This check avoids unnecessary allocation of `State` object.",
        "createdAt" : "2020-09-16T10:40:21Z",
        "updatedAt" : "2020-09-16T11:03:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b5f7530e27f27038aeeee82554ccc3811cc847b8",
    "line" : null,
    "diffHunk" : "@@ -466,6 +466,42 @@ object GenTransaction extends value.CidContainer3[GenTransaction] {\n           Node.GenNode.foreach3(f1, f2, f3)(node)\n       }\n   }\n+\n+  // crashes if transaction's keys contain contract Ids.\n+  @throws[IllegalArgumentException]\n+  def duplicatedContractKeys(tx: VersionedTransaction[NodeId, Value.ContractId]): Set[GlobalKey] = {\n+\n+    import GlobalKey.{assertBuild => globalKey}\n+\n+    case class State(active: Set[GlobalKey], duplicates: Set[GlobalKey]) {\n+      def created(key: GlobalKey): State =\n+        if (active(key)) copy(duplicates = duplicates + key) else copy(active = active + key)\n+      def consumed(key: GlobalKey): State =\n+        if (active(key)) copy(active = active - key) else this"
  },
  {
    "id" : "07048ffe-ec2e-4638-aa12-0a8f7bab019e",
    "prId" : 7405,
    "comments" : [
      {
        "id" : "dfc28827-764a-46d7-98a8-69d0aa377be9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This is different from what we had before, where we used the empty set of submitters for an empty transaction. Do we not care about empty transactions anymore?",
        "createdAt" : "2020-09-16T08:41:42Z",
        "updatedAt" : "2020-09-16T10:22:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4058bc5-a206-4ffa-9b13-1ede9dfcf045",
        "parentId" : "dfc28827-764a-46d7-98a8-69d0aa377be9",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This function is just an utility to help adapt old code to the new API.\r\n\r\nThe API requires now  you provide the submitter of the original submission.  \r\nSince there is no way to find this information in an empty transaction this code does not help in this case.\r\n\r\nThere are two possible workarounds: \r\n- using a dummy party in case the function does not infer a party (e.g. `tx.guessSubmitter.toOption.getOrElse(dummyParty)`) \r\n- skipping the validation on empty transactions as those are trivially valid.\r\n\r\nHowever I do expect the ledger implementation to have recorded the original submitter and to not have to use this utility function at all. Indeed to run the authorization check (`AuthorizingTransaction`) one needs the original submitter.\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-09-16T09:07:10Z",
        "updatedAt" : "2020-09-16T10:57:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6ead7e70-8013-412c-86f2-d7852372839a",
        "parentId" : "dfc28827-764a-46d7-98a8-69d0aa377be9",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That makes sense. Thanks for the explanation.",
        "createdAt" : "2020-09-16T09:40:25Z",
        "updatedAt" : "2020-09-16T10:22:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc39c0b61a9609769c2d1379586116307f1debaf",
    "line" : null,
    "diffHunk" : "@@ -419,6 +420,18 @@ sealed abstract class HasTxNodes[Nid, +Cid, +Val] {\n     acc\n   }\n \n+  final def submitter: Either[String, Party] =\n+    roots.map(nodes(_).requiredAuthorizers) match {\n+      case ImmArray() =>\n+        Left(s\"Empty transaction has no authorizers\")"
  },
  {
    "id" : "4b935de9-bebf-428d-96fe-bdee750d2095",
    "prId" : 6739,
    "comments" : [
      {
        "id" : "a3e5fda9-630f-4e67-b4de-24d281eae8d0",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "So, which is it? 1.3.0 or 1.4.0?",
        "createdAt" : "2020-07-15T11:54:45Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "81ac723e-c5e3-412b-a1b2-5cf87845572f",
        "parentId" : "a3e5fda9-630f-4e67-b4de-24d281eae8d0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "When I wrote my previous PR (#6714), I though it will go in the release of yesterday (1.3.0).\r\nI did not, so I take advantage of this PR, to fix the mistake. \r\n",
        "createdAt" : "2020-07-15T15:24:12Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "56f970d2f86437d6e9b09a51bc1648fd3ae8e4c8",
    "line" : 27,
    "diffHunk" : "@@ -472,9 +470,9 @@ object GenTransaction extends value.CidContainer3[GenTransaction] {\n \n object Transaction {\n \n-  @deprecated(\"use com.daml.lf.transaction.NodeId\", since = \"1.3.0\")\n+  @deprecated(\"use com.daml.lf.transaction.NodeId\", since = \"1.4.0\")"
  },
  {
    "id" : "40a302bc-f372-4e47-bf18-75a9a9fe82a1",
    "prId" : 6714,
    "comments" : [
      {
        "id" : "bcdb40ed-d8c9-48b7-b77c-72d8551da64e",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\nfinal case class GenTransaction[Nid, +Cid, +Val](\r\n```\r\nAny reason to not leave it `final`?",
        "createdAt" : "2020-07-14T09:06:24Z",
        "updatedAt" : "2020-07-14T11:01:31Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "abbbd00618a037c1a12fd6080434dcd3248dfc6e",
    "line" : null,
    "diffHunk" : "@@ -103,8 +102,8 @@ object VersionedTransaction extends value.CidContainer2[VersionedTransaction] {\n   * For performance reasons, users are not required to call `isWellFormed`.\n   * Therefore, it is '''forbidden''' to create ill-formed instances, i.e., instances with `!isWellFormed.isEmpty`.\n   */\n-final private[lf] case class GenTransaction[Nid, +Cid, +Val](\n-    nodes: HashMap[Nid, GenNode[Nid, Cid, Val]],\n+case class GenTransaction[Nid, +Cid, +Val]("
  },
  {
    "id" : "7e5d71f4-905a-4147-9c23-4b96151c8fd8",
    "prId" : 6714,
    "comments" : [
      {
        "id" : "66a049af-3418-4147-a15f-8445414471ae",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Should this be removed?",
        "createdAt" : "2020-07-14T09:59:01Z",
        "updatedAt" : "2020-07-14T11:01:31Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eab8ec7e-3c3b-42d3-b4d0-c7666f2de33f",
        "parentId" : "66a049af-3418-4147-a15f-8445414471ae",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Indeed.",
        "createdAt" : "2020-07-14T10:43:27Z",
        "updatedAt" : "2020-07-14T11:01:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "abbbd00618a037c1a12fd6080434dcd3248dfc6e",
    "line" : null,
    "diffHunk" : "@@ -494,7 +496,9 @@ object Transaction {\n     *  divulgence of contracts.\n     *\n     */\n-  type Transaction = VersionedTransaction[NodeId, Value.ContractId]\n+  def p5 = \"1\""
  },
  {
    "id" : "40c3d790-bb89-4dc0-bb3e-f0b78748b30e",
    "prId" : 6428,
    "comments" : [
      {
        "id" : "53d7170a-b8d5-4610-a1e7-192a0497e0d0",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Why are you removing this piece of ScalaDoc? We still have a `usedPackages` parameter for the below method.",
        "createdAt" : "2020-06-24T16:57:42Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ea642bff-45f3-4109-9e0a-7269c3ca0095",
        "parentId" : "53d7170a-b8d5-4610-a1e7-192a0497e0d0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch.",
        "createdAt" : "2020-06-26T06:54:45Z",
        "updatedAt" : "2020-06-26T06:54:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2832ff8457fca90adb26dc3d71314a458f268fd",
    "line" : null,
    "diffHunk" : "@@ -502,10 +502,6 @@ object Transaction {\n     *        If undefined no seed has been used (the legacy contract ID scheme\n     *        have been used) or it is unknown (output of partial reinterpretation).\n     * @param submissionTime: the submission time\n-    * @param usedPackages The set of packages used during command processing."
  },
  {
    "id" : "6e9d5173-210e-408c-93ae-5cdd9eb18c4f",
    "prId" : 6311,
    "comments" : [
      {
        "id" : "a6beec18-02b2-4151-abd6-0dc974c51a1c",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`transaction` is already a public member. If you want to keep it that way, I would rather keep those methods where they are and not redefining them here.",
        "createdAt" : "2020-06-11T14:42:09Z",
        "updatedAt" : "2020-06-15T12:14:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "94942d85-4b9f-49c7-a580-f2b153528dff",
        "parentId" : "a6beec18-02b2-4151-abd6-0dc974c51a1c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. \r\nThe problem is that I do not want code external to LF relies on `GenTransaction` anymore.\r\n\r\nTo enforce that I make the field private to LF. External code should relies only on the Engine or the protobuf Decoder to produce transaction.\r\n\r\nFor testing,  one should use the `TransactionBuilder` I refactor in #6294 ",
        "createdAt" : "2020-06-12T14:44:33Z",
        "updatedAt" : "2020-06-15T12:14:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d359a928-260b-4ba5-9c44-43dec72b3b40",
        "parentId" : "a6beec18-02b2-4151-abd6-0dc974c51a1c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This looks getter-lensy, so suggestion in branch `remy+s11-control-lf-versions`, specifically 66528f2e4ba0469961f4fb9098de7025d1bda974.\r\n\r\nhttps://github.com/digital-asset/daml/blob/66528f2e4ba0469961f4fb9098de7025d1bda974/daml-lf/transaction/src/main/scala/com/digitalasset/daml/lf/transaction/Transaction.scala#L288-L291",
        "createdAt" : "2020-06-12T18:43:08Z",
        "updatedAt" : "2020-06-15T12:14:10Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0da61dc64d2ba81661f6ee5493ca5c9a0410a8",
    "line" : null,
    "diffHunk" : "@@ -51,9 +51,36 @@ final case class VersionedTransaction[Nid, +Cid](\n       version = latestWhenAllPresent(version, languageVersions map (a => a: SpecifiedVersion): _*),\n     )\n   }\n+\n+  def nodes: HashMap[Nid, GenNode.WithTxValue[Nid, Cid]] =\n+    transaction.nodes\n+\n+  def roots: ImmArray[Nid] =\n+    transaction.roots\n+\n+  def foreach(f: (Nid, GenNode.WithTxValue[Nid, Cid]) => Unit): Unit =\n+    transaction.foreach(f)\n+\n+  def fold[A](z: A)(f: (A, (Nid, GenNode.WithTxValue[Nid, Cid])) => A): A =\n+    transaction.fold[A](z)(f)\n+\n+  def foldWithPathState[A, B](globalState0: A, pathState0: B)(\n+      op: (A, B, Nid, GenNode.WithTxValue[Nid, Cid]) => (A, B)): A =\n+    transaction.foldWithPathState[A, B](globalState0, pathState0)(op)\n+\n+  def localContracts[Cid2 >: Cid]: Map[Cid2, Nid] =\n+    transaction.localContracts\n+\n+  def inputContracts[Cid2 >: Cid]: Set[Cid2] =\n+    transaction.inputContracts"
  },
  {
    "id" : "63640b89-3857-401f-8424-94ab5e1ebde7",
    "prId" : 6223,
    "comments" : [
      {
        "id" : "8b38490c-1c81-4b23-93ab-bcbf4195c66d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  @deprecated(\"Use daml.lf.value.Value.ContractId directly\", since = \"1.3.1\")\r\n```",
        "createdAt" : "2020-06-04T14:56:50Z",
        "updatedAt" : "2020-06-04T16:06:20Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "03b0e5e56b357d7b031dd3af5fb7ccbb5957f1c0",
    "line" : null,
    "diffHunk" : "@@ -424,15 +424,16 @@ object Transaction {\n   type NodeId = Value.NodeId\n   val NodeId = Value.NodeId\n \n+  @deprecated(\"Use daml.lf.value.Value.ContraId directly\", since = \"1.3.1\")"
  },
  {
    "id" : "05d1b5d2-58a5-461d-ac72-d131edc2209f",
    "prId" : 6143,
    "comments" : [
      {
        "id" : "24bb9263-e644-414d-8eb5-54cfd0b42ddc",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "`CommandIdTag` doesn't seem to be used elsewhere in this PR. Is this a left-over?",
        "createdAt" : "2020-06-08T13:49:37Z",
        "updatedAt" : "2020-06-08T14:24:10Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f7a72701-6057-475b-8f75-67efcfb22b94",
        "parentId" : "24bb9263-e644-414d-8eb5-54cfd0b42ddc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "good catch.",
        "createdAt" : "2020-06-08T14:25:42Z",
        "updatedAt" : "2020-06-08T14:25:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89af6d420800adee764159fb1c3073fae07859e9",
    "line" : null,
    "diffHunk" : "@@ -471,6 +472,37 @@ object Transaction {\n       byKeyNodes: ImmArray[Value.NodeId],\n   )\n \n+  sealed abstract class DiscriminatedSubtype[X] {\n+    type T <: X\n+    def apply(x: X): T\n+    def subst[F[_]](fx: F[X]): F[T]\n+  }\n+\n+  object DiscriminatedSubtype {\n+    def apply[X]: DiscriminatedSubtype[X] = new DiscriminatedSubtype[X] {\n+      override type T = X\n+      override def apply(x: X): T = x\n+      override def subst[F[_]](fx: F[X]): F[T] = fx\n+    }\n+  }\n+\n+  val SubmittedTransaction = DiscriminatedSubtype[Transaction]\n+  type SubmittedTransaction = SubmittedTransaction.T\n+\n+  val CommittedTransaction = DiscriminatedSubtype[Transaction]\n+  type CommittedTransaction = CommittedTransaction.T\n+\n+  def commitTransaction(tx: SubmittedTransaction): CommittedTransaction =\n+    CommittedTransaction(tx)\n+\n+  def commitTransaction(\n+      tx: SubmittedTransaction,\n+      f: crypto.Hash => Bytes,\n+  ): Either[String, CommittedTransaction] =\n+    tx.suffixCid(f).map(CommittedTransaction(_))\n+\n+  sealed trait CommandIdTag"
  },
  {
    "id" : "6dd1ad94-899a-4dcc-94fc-2990bcc1cee7",
    "prId" : 5570,
    "comments" : [
      {
        "id" : "dc222477-ab04-43ca-9986-4f5237759799",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Maybe not for this PR: Do you intend to add the nodeSeeds also to `TransactionMeta` used in the `TransactionAccepted` update that's sent over the read service?",
        "createdAt" : "2020-04-16T07:04:44Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "10653eaf-3eb4-447a-9845-121253e86bbd",
        "parentId" : "dc222477-ab04-43ca-9986-4f5237759799",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Definitively not for this PR, but this kind of change is in the scope of #5500.\r\n",
        "createdAt" : "2020-04-16T12:08:47Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : 27,
    "diffHunk" : "@@ -392,9 +392,11 @@ object Transaction {\n    *        time.\n    */\n   final case class Metadata(\n+      submissionSeed: Option[crypto.Hash],\n       submissionTime: Time.Timestamp,\n       usedPackages: Set[PackageId],\n-      dependsOnTime: Boolean\n+      dependsOnTime: Boolean,\n+      nodeSeeds: ImmArray[(Value.NodeId, crypto.Hash)],"
  },
  {
    "id" : "e5d23fc3-0f43-4bfa-9350-8c56e60935c1",
    "prId" : 4776,
    "comments" : [
      {
        "id" : "eb9d29b3-37c2-4794-92ca-02e5b5f0c874",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This param does not exist?",
        "createdAt" : "2020-03-02T20:09:28Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a367032b-2f32-4831-82ba-657fb1d3dac0",
        "parentId" : "eb9d29b3-37c2-4794-92ca-02e5b5f0c874",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "good catch. I will drop the comment.",
        "createdAt" : "2020-03-02T20:15:11Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a94af9a492326522034688b9bdf1cf1d90efd4e4",
    "line" : null,
    "diffHunk" : "@@ -380,6 +374,19 @@ object Transaction {\n     */\n   type Transaction = GenTransaction.WithTxValue[NodeId, TContractId]\n \n+  /* Transaction meta data\n+   * @param submissionSeed: seed use to seed the contract ids"
  },
  {
    "id" : "f4d6f5d7-2cc9-4469-beb4-2bbad983e6b8",
    "prId" : 4776,
    "comments" : [
      {
        "id" : "9b970a3d-b909-4067-a757-82aba74206f7",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "nitpick: should be spelled \"Metadata\" as it's one word.",
        "createdAt" : "2020-03-10T12:46:19Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7c7d82f-cc8b-404f-a07b-fde40502fce0",
        "parentId" : "9b970a3d-b909-4067-a757-82aba74206f7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "nitpicking are welcome",
        "createdAt" : "2020-03-11T08:28:22Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a94af9a492326522034688b9bdf1cf1d90efd4e4",
    "line" : null,
    "diffHunk" : "@@ -384,6 +384,7 @@ object Transaction {\n    *        time.\n    */\n   final case class MetaData("
  },
  {
    "id" : "39190a06-8c8b-4efd-a4c4-2d9bace81001",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "4710cd55-6013-4d26-a794-bceb96ace622",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "why only stakeholders becomes `TreeSet`?",
        "createdAt" : "2020-01-21T15:29:52Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "224e9945-6d19-42c6-9aff-5ba5d889cdcb",
        "parentId" : "4710cd55-6013-4d26-a794-bceb96ace622",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I need the parties to be sorted because I hash them in the `contractId`. \r\n",
        "createdAt" : "2020-01-21T16:03:05Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82ade4da-b2d2-45ce-a9b4-1d83747e33fd",
        "parentId" : "4710cd55-6013-4d26-a794-bceb96ace622",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Changing any `Set[Party]` to `TreeSet[Paty]`` in all the nodes implies a bit more work that I do not want to include in the PR. I changed back to Set and do the ordering just before hashing.",
        "createdAt" : "2020-01-21T16:30:56Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : null,
    "diffHunk" : "@@ -586,7 +617,7 @@ object Transaction {\n         coinst: ContractInst[Value[TContractId]],\n         optLocation: Option[Location],\n         signatories: Set[Party],\n-        stakeholders: Set[Party],\n+        stakeholders: TreeSet[Party],"
  },
  {
    "id" : "f8eaf4d6-5ba6-4cb7-8b41-e94509e3c3b2",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "7ec68ad2-47f4-465e-b800-7f5b0ff698ac",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "```suggestion\r\n  *                        discriminators. If it is unset, the discriminators will not be\r\n```",
        "createdAt" : "2020-01-22T10:29:09Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 15,
    "diffHunk" : "@@ -67,6 +68,10 @@ case class VersionedTransaction[Nid, Cid](\n   *                     This is a hint for what packages are required to validate\n   *                     the transaction using the current interpreter.\n   *                     The used packages are not serialized using [[TransactionCoder]].\n+  * @param transactionSeed master hash used to derived node and relative contractId\n+  *                        discriminators. If it is undefined, the discriminators have not be"
  },
  {
    "id" : "7122b74f-2901-4130-b101-3cd801cc4379",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "7433db8a-9538-47c3-89a7-dfd37b0f5f2a",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "```suggestion\r\n  *                        generated and will be unset in the nodes and the relative\r\n```",
        "createdAt" : "2020-01-22T10:29:31Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 16,
    "diffHunk" : "@@ -67,6 +68,10 @@ case class VersionedTransaction[Nid, Cid](\n   *                     This is a hint for what packages are required to validate\n   *                     the transaction using the current interpreter.\n   *                     The used packages are not serialized using [[TransactionCoder]].\n+  * @param transactionSeed master hash used to derived node and relative contractId\n+  *                        discriminators. If it is undefined, the discriminators have not be\n+  *                        generated and have be let undefined in the nodes and the relative"
  },
  {
    "id" : "ac11af98-ad89-4866-b90a-b986de2d64b9",
    "prId" : 970,
    "comments" : [
      {
        "id" : "6a732fd9-4a0a-473d-a497-ab53cceaf13e",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "perhaps a better way to write this is using `scala.util.Try`:\r\n\r\n```\r\nTry(k.key.mapContractId { ...}).toEither.map { noRels => \r\n  cid -> ptx.copy(keys = ptx.keys + (GlobalKey(coinst.template, noRels) -> Some(cid)))\r\n}\r\n```",
        "createdAt" : "2019-05-07T12:09:52Z",
        "updatedAt" : "2019-05-07T13:23:12Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "35166f2029c9f17bf413c98e2135e6a322523562",
    "line" : null,
    "diffHunk" : "@@ -583,7 +583,27 @@ object Transaction {\n                 stakeholders,\n                 key),\n             None)\n-        Right(ntx.copy(_1 = nodeIdToContractId(ntx._1)))\n+        val cid = nodeIdToContractId(nid)\n+        // if we have a contract key being added, include it in the list of\n+        // active keys\n+\n+        // TODO is there a nicer way of doing this?\n+        try {\n+          key match {\n+            case None => Right((cid, ptx))\n+            case Some(k) =>\n+              val noRels = k.key.mapContractId {"
  }
]