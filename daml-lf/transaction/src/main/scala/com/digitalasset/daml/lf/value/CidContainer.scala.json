[
  {
    "id" : "6dbb82b3-395f-45a9-9783-3a036346672a",
    "prId" : 5805,
    "comments" : [
      {
        "id" : "d52a54d2-7b11-4799-b481-7f48009e7a16",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "cc @andreaslochbihler-da @oliverse-da ",
        "createdAt" : "2020-04-30T17:58:09Z",
        "updatedAt" : "2020-05-05T08:29:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2664365f2e72bcf952999ef3e7ec83798c6f5dc0",
    "line" : 53,
    "diffHunk" : "@@ -119,6 +146,14 @@ trait CidContainer[+A] {\n   ): B =\n     data.assertRight(ensureNoRelCid.left.map(message))\n \n+  final def cids[Cid]("
  },
  {
    "id" : "6b49e1b2-3c55-443d-b435-482d83cd1d2a",
    "prId" : 5319,
    "comments" : [
      {
        "id" : "1b575e1a-0def-4c49-83ae-d9032735dbc0",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@andreaslochbihler-da @oliverse-da \r\nHere is the new method to suffix new Contract ids.\r\nSee the `TransactionSpec` to see how to use it on transaction. It works similarly on nodes, values ... ",
        "createdAt" : "2020-03-31T17:34:41Z",
        "updatedAt" : "2020-03-31T17:40:04Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6c687cf-f1a0-401e-b82a-d4acc5518093",
        "parentId" : "1b575e1a-0def-4c49-83ae-d9032735dbc0",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Thanks for the pointer. I'll study this in more detail when I get to switch to V1 contract ids in Canton.",
        "createdAt" : "2020-04-01T05:42:04Z",
        "updatedAt" : "2020-04-01T05:42:05Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cc8b7d96a1259071bd764cef687263978350d3d9",
    "line" : 34,
    "diffHunk" : "@@ -93,6 +97,23 @@ trait CidContainer[+A] {\n       case rcoid: Value.RelativeContractId => Left(rcoid)\n     }(self)\n \n+  // Sets the suffix of any the V1 AbsoluteContractId `coid` of the container that are not already suffixed.\n+  // Uses `f(coid.discriminator)` as suffix.\n+  // Fails if encounters relative contract id or a V0 contract id.\n+  final def suffixCid[B](f: crypto.Hash => Bytes)("
  },
  {
    "id" : "008b9330-69b6-4073-94b3-6011f9e7d914",
    "prId" : 4411,
    "comments" : [
      {
        "id" : "776fe4e7-4b90-41d2-b627-3419c295ae01",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Seems that we use `mapper` in most places for resolvers.",
        "createdAt" : "2020-02-07T15:56:19Z",
        "updatedAt" : "2020-02-10T08:12:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f4682523e5bcc7e82eb08998241391055840ee84",
    "line" : 128,
    "diffHunk" : "@@ -42,82 +92,118 @@ trait CidContainer[+A] {\n \n   protected val self: A\n \n-  def resolveRelCid[B](f: Value.RelativeContractId => Ref.ContractIdString)(\n-      implicit mapper: RelCidResolverMapper[A, B],\n+  final def resolveRelCidV0[B](f: Value.RelativeContractId => Ref.ContractIdStringV0)(\n+      implicit mapper: RelCidV0Resolver[A, B]\n   ): B =\n-    mapper.map({\n-      case acoid: Value.AbsoluteContractId => acoid\n-      case rcoid: Value.RelativeContractId => Value.AbsoluteContractId(f(rcoid))\n-    })(self)\n-\n-  def ensureNoCid[B](\n-      implicit mapper: NoCidMapper[A, B]\n-  ): Either[Value.ContractId, B] = {\n-    case class Ball(x: Value.ContractId) extends Throwable with NoStackTrace\n-    try {\n-      Right(mapper.map(coid => throw Ball(coid))(self))\n-    } catch {\n-      case Ball(coid) => Left(coid)\n-    }\n-  }\n+    mapper.map(f)(self)\n+\n+  final def resolveRelCidV1[B](\n+      f: Value.RelativeContractId => Either[String, Ref.ContractIdStringV1])(\n+      implicit resolver: RelCidV1Resolver[A, B],"
  }
]