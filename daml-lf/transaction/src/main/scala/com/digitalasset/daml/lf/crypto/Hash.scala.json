[
  {
    "id" : "f26fce8c-f315-4732-931f-af5104d9c067",
    "prId" : 7460,
    "comments" : [
      {
        "id" : "f6c3bac0-188f-4fba-afb5-0fcfbc127754",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Is this related to the package validation?",
        "createdAt" : "2020-09-23T12:33:27Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6043e27f-428f-4793-bbb5-dbd31a678ff8",
        "parentId" : "f6c3bac0-188f-4fba-afb5-0fcfbc127754",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "reverted",
        "createdAt" : "2020-09-24T07:58:53Z",
        "updatedAt" : "2020-10-08T09:30:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0a4599bcbf38cacac4088b9b73021b01c997c440",
    "line" : null,
    "diffHunk" : "@@ -218,9 +218,9 @@ object Hash {\n           add(variant).addTypedValue(v)\n         case Value.ValueEnum(_, v) =>\n           add(v)\n-        case Value.ValueGenMap(_) =>\n-          error(\"Hashing of generic map not implemented\")\n-        // Struct: should never be encountered\n+        case Value.ValueGenMap(entries) =>\n+          iterateOver(entries.iterator, entries.length)((acc, entry) =>"
  },
  {
    "id" : "78fc3266-c039-4faa-8614-af44c054fcbf",
    "prId" : 5566,
    "comments" : [
      {
        "id" : "5360eba4-f05f-4dbd-8850-64c579742298",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I would recommend rephrasing this to clarify _why_ this enables DAML-on-Corda rather than saying that it does.",
        "createdAt" : "2020-04-15T14:18:23Z",
        "updatedAt" : "2020-04-15T14:39:30Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c1b26f5a04cc5830b672148dbd1541e6e5412be8",
    "line" : null,
    "diffHunk" : "@@ -355,4 +356,13 @@ object Hash {\n       .addStringSet(parties)\n       .build\n \n+  // For Corda"
  },
  {
    "id" : "940fb3bf-2518-418c-aa68-c49da7bdd355",
    "prId" : 5140,
    "comments" : [
      {
        "id" : "923627de-e85a-462f-9667-92d5884510dc",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "And this; can it be `AnyVal`? You'd get rid of `equals` and `hashCode` implementations.",
        "createdAt" : "2020-03-23T17:32:53Z",
        "updatedAt" : "2020-03-23T22:49:17Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f5d627bc-b38e-400c-b055-698a2d6cd776",
        "parentId" : "923627de-e85a-462f-9667-92d5884510dc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "same as before. It cannot because Bytes is already a user-defined `AnyVal`",
        "createdAt" : "2020-03-23T17:37:10Z",
        "updatedAt" : "2020-03-23T22:49:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f93cbff-06ce-4f0a-b8db-9dfc8eaf7e07",
        "parentId" : "923627de-e85a-462f-9667-92d5884510dc",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Same as for `Offset`: `Bytes` already is an `AnyVal`.",
        "createdAt" : "2020-03-23T17:38:00Z",
        "updatedAt" : "2020-03-23T22:49:17Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f294ff3bf6e8f914a9259daabba5a33e2634244d",
    "line" : 16,
    "diffHunk" : "@@ -6,40 +6,28 @@ package crypto\n \n import java.nio.ByteBuffer\n import java.security.{MessageDigest, SecureRandom}\n-import java.util\n import java.util.concurrent.atomic.AtomicLong\n \n-import com.digitalasset.daml.lf.data.{ImmArray, Ref, Time, Utf8}\n+import com.digitalasset.daml.lf.data.{Bytes, ImmArray, Ref, Time, Utf8}\n import com.digitalasset.daml.lf.value.Value\n import javax.crypto.Mac\n import javax.crypto.spec.SecretKeySpec\n \n import scala.util.control.NoStackTrace\n \n-final class Hash private (private val bytes: Array[Byte]) {\n+final class Hash private (val bytes: Bytes) {"
  },
  {
    "id" : "c63fa664-f789-42a7-89c6-1d309f176ea4",
    "prId" : 5140,
    "comments" : [
      {
        "id" : "a36a339b-8387-44e6-85f6-f1c15bc107cd",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Why does this exist?",
        "createdAt" : "2020-03-23T17:33:06Z",
        "updatedAt" : "2020-03-23T22:49:17Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6545fa79-21a2-4c22-a11d-8e08199af7a7",
        "parentId" : "a36a339b-8387-44e6-85f6-f1c15bc107cd",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "dropped",
        "createdAt" : "2020-03-23T17:36:49Z",
        "updatedAt" : "2020-03-23T22:49:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f294ff3bf6e8f914a9259daabba5a33e2634244d",
    "line" : null,
    "diffHunk" : "@@ -6,40 +6,28 @@ package crypto\n \n import java.nio.ByteBuffer\n import java.security.{MessageDigest, SecureRandom}\n-import java.util\n import java.util.concurrent.atomic.AtomicLong\n \n-import com.digitalasset.daml.lf.data.{ImmArray, Ref, Time, Utf8}\n+import com.digitalasset.daml.lf.data.{Bytes, ImmArray, Ref, Time, Utf8}\n import com.digitalasset.daml.lf.value.Value\n import javax.crypto.Mac\n import javax.crypto.spec.SecretKeySpec\n \n import scala.util.control.NoStackTrace\n \n-final class Hash private (private val bytes: Array[Byte]) {\n+final class Hash private (val bytes: Bytes) {\n \n-  def toByteArray: Array[Byte] = bytes.clone()\n+  override def clone(): AnyRef = this"
  },
  {
    "id" : "882c363c-0605-45b1-813b-fab60d6af32e",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "399e30ef-14ef-4ed8-ae01-b5adf7cd98fe",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n      throw new IllegalArgumentException(s\"Expected a $underlyingHashLength bytes seed, got ${seed.length} bytes.\")\r\n```",
        "createdAt" : "2020-02-27T14:09:11Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9b6c89ad-e333-4f6a-a769-1f9ce1273829",
        "parentId" : "399e30ef-14ef-4ed8-ae01-b5adf7cd98fe",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed.",
        "createdAt" : "2020-02-27T18:34:52Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -60,23 +72,40 @@ object Hash {\n   def assertFromBytes(a: Array[Byte]): Hash =\n     data.assertRight(fromBytes(a))\n \n-  def secureRandom(seed: Array[Byte]): () => Hash = {\n-    val random = new SecureRandom(seed)\n+  // A pseudo random generator for Hash based on hmac\n+  // We mix the given seed with time to mitigate very bad seed.\n+  def random(seed: Array[Byte]): () => Hash = {\n+    if (seed.length != underlyingHashLength)\n+      throw new IllegalArgumentException(s\"expected a 32 bytes seed, get ${seed.length} bytes.\")"
  },
  {
    "id" : "2d2fe005-fd1d-4613-a299-b5669dc5974f",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "c79a35de-9952-4360-b562-fc6d7d5e28e6",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n    // with another data representing uniquely the type of `value`.\r\n```",
        "createdAt" : "2020-02-27T14:10:10Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b33f0206-962a-4986-9333-38f406e2336d",
        "parentId" : "c79a35de-9952-4360-b562-fc6d7d5e28e6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-02-27T18:35:01Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -136,15 +171,25 @@ object Hash {\n     final def addIdentifier(id: Ref.Identifier): this.type =\n       add(id.packageId).addQualifiedName(id.qualifiedName)\n \n+    final def addStringSet[S <: String](set: Set[S]): this.type = {\n+      val ss = set.toSeq.sorted[String]\n+      iterateOver(ss.iterator, ss.size)(_ add _)\n+    }\n+\n+    @throws[HashingError]\n+    final def addCid(cid: Value.ContractId): this.type =\n+      add(cid2String(cid))\n+\n     // In order to avoid hash collision, this should be used together\n     // with an other data representing uniquely the type of `value`."
  },
  {
    "id" : "f3baf341-b341-4637-b38a-a3f3b6683254",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "f6042103-04cc-47a9-b640-193b2ae1ca72",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Do you really want to extend `java.lang.Error` and not `Exception`?",
        "createdAt" : "2020-02-28T08:08:31Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -50,6 +50,18 @@ object Hash {\n \n   private val hexEncoding = BaseEncoding.base16().lowerCase()\n \n+  private case class HashingError(msg: String) extends Error with NoStackTrace"
  },
  {
    "id" : "eee30e97-3c3c-4933-9494-e15ac45fb65b",
    "prId" : 4608,
    "comments" : [
      {
        "id" : "04934972-fba6-426b-9b0f-0584ac210c0a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do you really want to call `remy.profile` here? :slightly_smiling_face: ",
        "createdAt" : "2020-02-19T14:15:12Z",
        "updatedAt" : "2020-02-19T19:30:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "329b6d2dc890606c0b65b88fb723579336042928",
    "line" : null,
    "diffHunk" : "@@ -263,11 +273,13 @@ object Hash {\n       commandId: Ref.LedgerString,\n       submitter: Ref.Party,\n   ): Hash =\n-    hMacBuilder(nonce)\n-      .add(applicationId)\n-      .add(commandId)\n-      .add(submitter)\n-      .build\n+    remy.profile(0)("
  },
  {
    "id" : "62a149d2-e0b9-49d9-b362-0636f47f239e",
    "prId" : 4608,
    "comments" : [
      {
        "id" : "b6196996-1aa4-4de0-b3d9-a8e4165164fe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like a `for`-loop might be easier to read.",
        "createdAt" : "2020-02-19T14:17:10Z",
        "updatedAt" : "2020-02-19T19:30:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "329b6d2dc890606c0b65b88fb723579336042928",
    "line" : null,
    "diffHunk" : "@@ -20,8 +20,18 @@ final class Hash private (private val bytes: Array[Byte]) {\n \n   def toByteArray: Array[Byte] = bytes.clone()\n \n-  def toHexaString: String =\n-    bytes.map(\"%02x\" format _).mkString\n+  def toHexaString: String = {\n+    import Hash._\n+    // using `bytes.map(\"%02x\" format _).mkString` is 300 times slower\n+    val buff = Array.ofDim[Char](underlyingHashLength * 2)\n+    var i = 0"
  },
  {
    "id" : "a31c4940-6ed5-43e0-97bd-0f0a7e1223db",
    "prId" : 4608,
    "comments" : [
      {
        "id" : "0521d86a-f469-4bdc-bf7a-702a94f6f629",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This makes me sad, I would have expected that converting to `base16` is something that is not something that you have to reinvent but a quick stackoverflow search does not reveal anything better either https://stackoverflow.com/a/332101/3877993 and it’s probably not worth incurring an extra dependency for so happy to keep this for now.",
        "createdAt" : "2020-02-19T14:18:55Z",
        "updatedAt" : "2020-02-19T19:30:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2a1b73aa-8dfa-4083-aa6d-b6a30fdca342",
        "parentId" : "0521d86a-f469-4bdc-bf7a-702a94f6f629",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We are indirectly depending on guava. It must be fine to use the encoder from there. \r\n",
        "createdAt" : "2020-02-19T14:42:21Z",
        "updatedAt" : "2020-02-19T19:30:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "95864f95-95d4-49bc-9a57-7a9a25361331",
        "parentId" : "0521d86a-f469-4bdc-bf7a-702a94f6f629",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-02-19T14:55:56Z",
        "updatedAt" : "2020-02-19T19:30:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "329b6d2dc890606c0b65b88fb723579336042928",
    "line" : null,
    "diffHunk" : "@@ -295,4 +307,7 @@ object Hash {\n       .iterateOver(parties.toSeq.sorted[String].iterator, parties.size)(_ add _)\n       .build\n \n+  private val HexaLookupTable ="
  },
  {
    "id" : "c422fb5e-8ccc-4e05-900e-4ca7b9d81fe1",
    "prId" : 4608,
    "comments" : [
      {
        "id" : "fce1bab9-0b1e-4c9c-8cec-0683729795ec",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "You can probably pull out `BaseEncoding.base16()` into a `private val hexEncoding` for **even more** performance.",
        "createdAt" : "2020-02-19T15:57:55Z",
        "updatedAt" : "2020-02-19T19:30:39Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "329b6d2dc890606c0b65b88fb723579336042928",
    "line" : null,
    "diffHunk" : "@@ -20,8 +21,7 @@ final class Hash private (private val bytes: Array[Byte]) {\n \n   def toByteArray: Array[Byte] = bytes.clone()\n \n-  def toHexaString: String =\n-    bytes.map(\"%02x\" format _).mkString\n+  def toHexaString: String = BaseEncoding.base16().encode(bytes)"
  },
  {
    "id" : "b69089ce-b2f2-41f3-8b97-a9f5cc7d5e2f",
    "prId" : 4542,
    "comments" : [
      {
        "id" : "777a48e3-21ba-4d6d-98d5-1d792ebd63b7",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "`Value[Nothing]`? :thinking: ",
        "createdAt" : "2020-02-17T12:18:57Z",
        "updatedAt" : "2020-02-19T10:57:23Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b96164f2-74cc-4912-a7b3-9be05883d185",
        "parentId" : "777a48e3-21ba-4d6d-98d5-1d792ebd63b7",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "It must not contain contract ids, hence the `Nothing`. This is following @remyhaemmerle-da 's code.",
        "createdAt" : "2020-02-17T13:22:41Z",
        "updatedAt" : "2020-02-19T10:57:23Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fbc2660afe9d3e007e4fd907f341697c73d3cb7c",
    "line" : 68,
    "diffHunk" : "@@ -228,16 +232,26 @@ object Hash {\n   def assertFromString(s: String): Hash =\n     data.assertRight(fromString(s))\n \n+  def fromBytes(a: Array[Byte]): Either[String, Hash] =\n+    Either.cond(\n+      a.length == underlyingHashLength,\n+      new Hash(a.clone()),\n+      s\"hash should have ${underlyingHashLength} bytes, found ${a.length}\",\n+    )\n+\n+  def assertFromBytes(a: Array[Byte]): Hash =\n+    data.assertRight(fromBytes(a))\n+\n   def hashPrivateKey(s: String): Hash =\n     builder(Purpose.PrivateKey).add(s).build\n \n   // This function assumes that key is well typed, i.e. :\n-  // 1 - `key.identifier` is the identifier for a template with a key of type τ\n-  // 2 - `key.key` is a value of type τ\n-  def hashContractKey(key: Node.GlobalKey): Hash =\n+  // 1 - `templateId` is the identifier for a template with a key of type τ\n+  // 2 - `key` is a value of type τ\n+  def hashContractKey(templateId: Identifier, key: Value[Nothing]): Hash ="
  },
  {
    "id" : "1b76037f-6a40-48ef-9600-b43ad75972ba",
    "prId" : 4542,
    "comments" : [
      {
        "id" : "50fece84-e905-40a7-a8bf-bcd8745c5096",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-02-18T12:43:07Z",
        "updatedAt" : "2020-02-19T10:57:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fbc2660afe9d3e007e4fd907f341697c73d3cb7c",
    "line" : 36,
    "diffHunk" : "@@ -154,7 +157,11 @@ object Hash {\n         case Value.ValueText(v) =>\n           add(v)\n         case Value.ValueContractId(v) =>\n-          add(v.coid)\n+          purpose match {\n+            case Purpose.ContractKey =>\n+              sys.error(\"Hashing of contract id for contract keys is not supported\")\n+            case _ => add(v.coid)"
  },
  {
    "id" : "22016e18-0e81-4f5b-957d-e230d4f39427",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "d8322d79-07cd-4acd-8e42-1c5bd700cbbb",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "this isn't thread-safe, but not sure if it's a problem...",
        "createdAt" : "2020-01-21T15:27:55Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "659b8452-cb59-48f0-b3b9-4616cd72983d",
        "parentId" : "d8322d79-07cd-4acd-8e42-1c5bd700cbbb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Data should be hashed in a deterministic way.\r\nYou probably shouldn't play with threads when doing that. \r\n\r\nAnyway the builder is assumed to be build only in a very controlled way inside the `Hash` object. It is accessible from the package  for testing purpose only (see comment 171/172).\r\nI made the abstract class `Builder` `sealed` so you cannot exend it. \r\n\r\n",
        "createdAt" : "2020-01-21T16:00:30Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 56,
    "diffHunk" : "@@ -41,15 +46,35 @@ class Hash private (private val bytes: Array[Byte]) {\n \n object Hash {\n \n+  private val version = 0.toByte\n+  private val underlyingHashLength = 32\n+\n+  implicit val HashOrdering: Ordering[Hash] =\n+    ((hash1, hash2) => implicitly[Ordering[Iterable[Byte]]].compare(hash1.bytes, hash2.bytes))\n+\n   private[crypto] abstract class Builder {\n \n-    def add(a: Array[Byte]): this.type\n+    protected def update(a: Array[Byte]): Unit\n \n-    def add(a: ByteBuffer): this.type\n+    protected def doFinal(buf: Array[Byte], offset: Int): Unit\n \n-    def add(a: Byte): this.type\n+    final def build: Hash = {\n+      val a = Array.ofDim[Byte](underlyingHashLength)\n+      doFinal(a, 0)\n+      new Hash(a)\n+    }\n \n-    def build: Hash\n+    final def add(a: Array[Byte]): this.type = {\n+      update(a)\n+      this\n+    }\n+\n+    private val byteBuff = Array.ofDim[Byte](1)"
  }
]