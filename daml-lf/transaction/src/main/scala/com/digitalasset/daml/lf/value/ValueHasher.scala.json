[
  {
    "id" : "0addbce6-baee-41be-ab7d-47cb5a7f98de",
    "prId" : 3849,
    "comments" : [
      {
        "id" : "78b5383b-adf3-4f94-afb3-59334f236cf5",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Is it intentional that `hashContract` and `hashContractKey` have their arguments reversed?",
        "createdAt" : "2019-12-16T21:13:35Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dac5a3d0-bea6-4bc7-9ef1-6ea28f38f049",
        "parentId" : "78b5383b-adf3-4f94-afb3-59334f236cf5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I let only `hashContractKey`, because jussi wants to use it for kv utils.\r\nWe will add the others one by one.",
        "createdAt" : "2020-01-14T08:16:14Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "234101313181b0ea39c66a646366bd28d3d2adfd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,173 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf\n+package value\n+\n+import java.nio.ByteBuffer\n+import java.security.MessageDigest\n+\n+import com.digitalasset.daml.lf.data.{Numeric, Ref, Utf8}\n+import com.digitalasset.daml.lf.value.Value._\n+\n+abstract class ValueHasher {\n+\n+  private def encode(a: Array[Byte]) =\n+    Ref.LedgerString.assertFromString(\n+      a.foldLeft(StringBuilder.newBuilder)((acc, b) => acc.append(\"%02x\".format(b))).toString()\n+    )\n+\n+  def hashValue(value: Value[AbsoluteContractId]): Array[Byte]\n+\n+  final def hashValueString(value: Value[AbsoluteContractId]): Ref.LedgerString =\n+    encode(hashValue(value))\n+\n+  def hashContract(value: Value[AbsoluteContractId], identifier: Ref.Identifier): Array[Byte]\n+\n+  final def hashContractString(\n+      identifier: Ref.Identifier,\n+      value: Value[AbsoluteContractId]\n+  ): Ref.LedgerString =\n+    encode(hashContract(value, identifier))\n+\n+  def hashContractKey(identifier: Ref.Identifier, value: Value[AbsoluteContractId]): Array[Byte]"
  },
  {
    "id" : "a001333d-2b3a-461c-aeb6-8579bc43c11d",
    "prId" : 3849,
    "comments" : [
      {
        "id" : "36a9a62e-83d1-4e97-86e1-142fefdf9237",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  private val Seq(tagUnit, tagTrue, /*others*/, _*) =\r\n    collection.immutable.NumericRange.inclusive[Byte](1, Byte.MaxValue, 1)\r\n```",
        "createdAt" : "2019-12-16T21:28:35Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7e277d4d-ce03-4d92-ab75-b32036ad4aef",
        "parentId" : "36a9a62e-83d1-4e97-86e1-142fefdf9237",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I prefer the original approach. \r\n1 - the tag should never change \r\n2 - we will have to specify the hashing method somewhere, so it is simpler if the tag are explicit.",
        "createdAt" : "2020-01-14T08:20:21Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "234101313181b0ea39c66a646366bd28d3d2adfd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,173 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf\n+package value\n+\n+import java.nio.ByteBuffer\n+import java.security.MessageDigest\n+\n+import com.digitalasset.daml.lf.data.{Numeric, Ref, Utf8}\n+import com.digitalasset.daml.lf.value.Value._\n+\n+abstract class ValueHasher {\n+\n+  private def encode(a: Array[Byte]) =\n+    Ref.LedgerString.assertFromString(\n+      a.foldLeft(StringBuilder.newBuilder)((acc, b) => acc.append(\"%02x\".format(b))).toString()\n+    )\n+\n+  def hashValue(value: Value[AbsoluteContractId]): Array[Byte]\n+\n+  final def hashValueString(value: Value[AbsoluteContractId]): Ref.LedgerString =\n+    encode(hashValue(value))\n+\n+  def hashContract(value: Value[AbsoluteContractId], identifier: Ref.Identifier): Array[Byte]\n+\n+  final def hashContractString(\n+      identifier: Ref.Identifier,\n+      value: Value[AbsoluteContractId]\n+  ): Ref.LedgerString =\n+    encode(hashContract(value, identifier))\n+\n+  def hashContractKey(identifier: Ref.Identifier, value: Value[AbsoluteContractId]): Array[Byte]\n+\n+  final def hashContractKeyString(\n+      identifier: Ref.Identifier,\n+      value: Value[AbsoluteContractId]\n+  ): Ref.LedgerString =\n+    encode(hashContractKey(identifier, value))\n+\n+}\n+\n+object ValueHasher extends ValueHasher {\n+\n+  // tags are used to avoid hash collisions due to equal encoding for different objects\n+  private val tagUnit: Byte = 1"
  },
  {
    "id" : "e8da399b-21fd-426c-b08c-8d75020e0e6f",
    "prId" : 3849,
    "comments" : [
      {
        "id" : "aebfdde6-b2b6-40b5-a363-a15d1e0c4417",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Variously\r\n\r\n```suggestion\r\n    def mixByte(v: Byte): digest.type = {\r\n```\r\n\r\nIf we took this _really_ seriously we'd have to [handwrite the implicit conversion](https://bazaar.launchpad.net/~scompall/stylish-types/trunk/view/head:/src/test/scala/com/nocandysw/stylishtypes/check/CheckProperties.scala#L46), but there's probably no need to go that far here, just do what compiles.",
        "createdAt" : "2019-12-16T21:29:29Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7c1ba5ee-65f8-4206-9756-ffe61abbbb46",
        "parentId" : "aebfdde6-b2b6-40b5-a363-a15d1e0c4417",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I have change a bit the code. This does not work anymore. ",
        "createdAt" : "2020-01-14T14:43:08Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "234101313181b0ea39c66a646366bd28d3d2adfd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,173 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf\n+package value\n+\n+import java.nio.ByteBuffer\n+import java.security.MessageDigest\n+\n+import com.digitalasset.daml.lf.data.{Numeric, Ref, Utf8}\n+import com.digitalasset.daml.lf.value.Value._\n+\n+abstract class ValueHasher {\n+\n+  private def encode(a: Array[Byte]) =\n+    Ref.LedgerString.assertFromString(\n+      a.foldLeft(StringBuilder.newBuilder)((acc, b) => acc.append(\"%02x\".format(b))).toString()\n+    )\n+\n+  def hashValue(value: Value[AbsoluteContractId]): Array[Byte]\n+\n+  final def hashValueString(value: Value[AbsoluteContractId]): Ref.LedgerString =\n+    encode(hashValue(value))\n+\n+  def hashContract(value: Value[AbsoluteContractId], identifier: Ref.Identifier): Array[Byte]\n+\n+  final def hashContractString(\n+      identifier: Ref.Identifier,\n+      value: Value[AbsoluteContractId]\n+  ): Ref.LedgerString =\n+    encode(hashContract(value, identifier))\n+\n+  def hashContractKey(identifier: Ref.Identifier, value: Value[AbsoluteContractId]): Array[Byte]\n+\n+  final def hashContractKeyString(\n+      identifier: Ref.Identifier,\n+      value: Value[AbsoluteContractId]\n+  ): Ref.LedgerString =\n+    encode(hashContractKey(identifier, value))\n+\n+}\n+\n+object ValueHasher extends ValueHasher {\n+\n+  // tags are used to avoid hash collisions due to equal encoding for different objects\n+  private val tagUnit: Byte = 1\n+  private val tagTrue: Byte = 2\n+  private val tagFalse: Byte = 3\n+  private val tagInt64: Byte = 4\n+  private val tagNumeric: Byte = 5\n+  private val tagDate: Byte = 6\n+  private val tagTimeStamp: Byte = 7\n+  private val tagText: Byte = 8\n+  private val tagParty: Byte = 9\n+  private val tagContractId: Byte = 10\n+  private val tagNone: Byte = 11\n+  private val tagSome: Byte = 12\n+  private val tagList: Byte = 13\n+  private val tagTextMap: Byte = 14\n+  private val tagGenMap: Byte = 15\n+  private val tagRecord: Byte = 16\n+  private val tagVariant: Byte = 17\n+  private val tagEnum: Byte = 18\n+  private val tagContract: Byte = 19\n+  private val tagContractKey: Byte = 20\n+\n+  // used for tagging end of variable length data structure\n+  private val tagEnd: Byte = -1 // Does not appear in any valid UTF8 string\n+\n+  private implicit class MessageDigestOp(val digest: MessageDigest) extends AnyVal {\n+\n+    def mixByte(v: Byte): MessageDigest = {"
  },
  {
    "id" : "44b3d304-d8f8-4d5b-90e0-8411b0dfa246",
    "prId" : 3849,
    "comments" : [
      {
        "id" : "bbeb224c-1b35-427f-b830-680abd81149a",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "I'm not sure about using this end tag.\r\n\r\nVariable length data structures do not only contain strings, records are also variable length data structures. Won't you have a collision between nested record values, e.g., `Record(Record(int64), Record(int64, int64))` and `Record(Record(int64, int64), Record(int64))`, where all int64 values consist of `-1` bytes only?\r\n\r\nHow about using the length of variable length data structures instead of the end tag? E.g.,\r\n```scala\r\ndef iterateOver[T](traversable: Iterator[T], length: Long)(\r\n        mix: (MessageDigest, T) => MessageDigest): MessageDigest =\r\n      traversable.foldLeft(digest.mixLong(length))(mix)\r\n```\r\nIt should be easy to efficiently determine the length of all variable length DAML-LF values. If you worry about variable length data structures larger than the max value of `Long`, you can use a UTF-8 style encoding of the length.",
        "createdAt" : "2019-12-18T10:15:55Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d9dd6081-3013-49bc-a114-48fc6ee4d807",
        "parentId" : "bbeb224c-1b35-427f-b830-680abd81149a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Fixed. ",
        "createdAt" : "2020-01-14T08:16:22Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "234101313181b0ea39c66a646366bd28d3d2adfd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,173 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf\n+package value\n+\n+import java.nio.ByteBuffer\n+import java.security.MessageDigest\n+\n+import com.digitalasset.daml.lf.data.{Numeric, Ref, Utf8}\n+import com.digitalasset.daml.lf.value.Value._\n+\n+abstract class ValueHasher {\n+\n+  private def encode(a: Array[Byte]) =\n+    Ref.LedgerString.assertFromString(\n+      a.foldLeft(StringBuilder.newBuilder)((acc, b) => acc.append(\"%02x\".format(b))).toString()\n+    )\n+\n+  def hashValue(value: Value[AbsoluteContractId]): Array[Byte]\n+\n+  final def hashValueString(value: Value[AbsoluteContractId]): Ref.LedgerString =\n+    encode(hashValue(value))\n+\n+  def hashContract(value: Value[AbsoluteContractId], identifier: Ref.Identifier): Array[Byte]\n+\n+  final def hashContractString(\n+      identifier: Ref.Identifier,\n+      value: Value[AbsoluteContractId]\n+  ): Ref.LedgerString =\n+    encode(hashContract(value, identifier))\n+\n+  def hashContractKey(identifier: Ref.Identifier, value: Value[AbsoluteContractId]): Array[Byte]\n+\n+  final def hashContractKeyString(\n+      identifier: Ref.Identifier,\n+      value: Value[AbsoluteContractId]\n+  ): Ref.LedgerString =\n+    encode(hashContractKey(identifier, value))\n+\n+}\n+\n+object ValueHasher extends ValueHasher {\n+\n+  // tags are used to avoid hash collisions due to equal encoding for different objects\n+  private val tagUnit: Byte = 1\n+  private val tagTrue: Byte = 2\n+  private val tagFalse: Byte = 3\n+  private val tagInt64: Byte = 4\n+  private val tagNumeric: Byte = 5\n+  private val tagDate: Byte = 6\n+  private val tagTimeStamp: Byte = 7\n+  private val tagText: Byte = 8\n+  private val tagParty: Byte = 9\n+  private val tagContractId: Byte = 10\n+  private val tagNone: Byte = 11\n+  private val tagSome: Byte = 12\n+  private val tagList: Byte = 13\n+  private val tagTextMap: Byte = 14\n+  private val tagGenMap: Byte = 15\n+  private val tagRecord: Byte = 16\n+  private val tagVariant: Byte = 17\n+  private val tagEnum: Byte = 18\n+  private val tagContract: Byte = 19\n+  private val tagContractKey: Byte = 20\n+\n+  // used for tagging end of variable length data structure\n+  private val tagEnd: Byte = -1 // Does not appear in any valid UTF8 string"
  }
]