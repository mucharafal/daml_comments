[
  {
    "id" : "d2ef69c0-c170-4d22-b672-ab7e7215fe80",
    "prId" : 7420,
    "comments" : [
      {
        "id" : "e4df3a5e-7c33-43f0-bee2-9b3c0a85bd47",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  * @param max the maximum version included in the range.\r\n```",
        "createdAt" : "2020-09-18T15:52:17Z",
        "updatedAt" : "2020-09-21T18:04:18Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4698f619e0b1718f57f5c1a4193ddca0b7501f54",
    "line" : null,
    "diffHunk" : "@@ -5,6 +5,20 @@ package com.daml.lf\n \n import com.daml.lf.transaction.VersionTimeline\n \n+/**\n+  * [[VersionRange]] represents a range of versions of\n+  * [[com.daml.lf.language.LanguageVersion]],\n+  * [[com.daml.lf.transaction.TransactionVersion]], or\n+  * [[com.daml.lf.value.ValueVersion]].\n+  *\n+  * The order of versions is specified by [[VersionTimeline]].\n+  *\n+  * @param min the minimal version included in the range.\n+  * @param max the maximla version included in the range."
  },
  {
    "id" : "8833a464-a768-4aff-9c2e-26230d236bec",
    "prId" : 7420,
    "comments" : [
      {
        "id" : "967fc26e-9343-4d72-9a57-eca27ef421c4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  * @param max the maximal version included in the range.\r\n```",
        "createdAt" : "2020-09-21T13:29:22Z",
        "updatedAt" : "2020-09-21T18:04:18Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4698f619e0b1718f57f5c1a4193ddca0b7501f54",
    "line" : null,
    "diffHunk" : "@@ -5,6 +5,20 @@ package com.daml.lf\n \n import com.daml.lf.transaction.VersionTimeline\n \n+/**\n+  * [[VersionRange]] represents a range of versions of\n+  * [[com.daml.lf.language.LanguageVersion]],\n+  * [[com.daml.lf.transaction.TransactionVersion]], or\n+  * [[com.daml.lf.value.ValueVersion]].\n+  *\n+  * The order of versions is specified by [[VersionTimeline]].\n+  *\n+  * @param min the minimal version included in the range.\n+  * @param max the maximla version included in the range."
  },
  {
    "id" : "65bc86b6-65a1-4484-9f77-37f03bc13c5f",
    "prId" : 6428,
    "comments" : [
      {
        "id" : "ca625893-c9c5-4cdb-9ddc-3fcf75e9b83e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      min = maxVersion(this.min max that.min),\r\n```\r\n\r\nI didn't define a `minVersion` but you can do that if you want.",
        "createdAt" : "2020-06-19T15:22:07Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2832ff8457fca90adb26dc3d71314a458f268fd",
    "line" : null,
    "diffHunk" : "@@ -3,7 +3,36 @@\n \n package com.daml.lf\n \n+import com.daml.lf.transaction.VersionTimeline\n+\n final case class VersionRange[V](\n     min: V,\n     max: V,\n-)\n+) {\n+  import VersionRange._\n+  import Ordering.Implicits._\n+\n+  def intersect(that: VersionRange[V])(\n+      implicit ev: VersionTimeline.SubVersion[V]): VersionRange[V] = {\n+    VersionRange(\n+      min = this.min max that.min,"
  },
  {
    "id" : "57192b61-1baf-4ccd-8fb9-0e644c2a91b4",
    "prId" : 6428,
    "comments" : [
      {
        "id" : "edc3d2e5-cb3b-44a6-a19a-08f8cc57a05f",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This is why we define `precedes` syntax instead of an `Order` instance in the first place.\r\n\r\n```suggestion\r\n  // do not publish this instance; it is unlawful as it is not antisymmetric\r\n  private implicit def ordering[V](implicit ev: VersionTimeline.SubVersion[V]): Ordering[V] =\r\n```",
        "createdAt" : "2020-06-19T15:22:53Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "505affe3-eb12-4db9-bf28-8da7fd676678",
        "parentId" : "edc3d2e5-cb3b-44a6-a19a-08f8cc57a05f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It was not clear to me that `precedes` is not antisymmetric. Thanks to point that to me. \r\nI understand now why you did not define an `Ordering`, and I agree that is better. \r\nLet's me drop the Ordering here.",
        "createdAt" : "2020-06-22T07:53:03Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2832ff8457fca90adb26dc3d71314a458f268fd",
    "line" : null,
    "diffHunk" : "@@ -3,7 +3,36 @@\n \n package com.daml.lf\n \n+import com.daml.lf.transaction.VersionTimeline\n+\n final case class VersionRange[V](\n     min: V,\n     max: V,\n-)\n+) {\n+  import VersionRange._\n+  import Ordering.Implicits._\n+\n+  def intersect(that: VersionRange[V])(\n+      implicit ev: VersionTimeline.SubVersion[V]): VersionRange[V] = {\n+    VersionRange(\n+      min = this.min max that.min,\n+      max = this.max min that.max\n+    )\n+  }\n+\n+  def nonEmpty(implicit ev: VersionTimeline.SubVersion[V]): Boolean =\n+    min <= max\n+\n+  def contains(v: V)(implicit ev: VersionTimeline.SubVersion[V]): Boolean =\n+    min <= v && v <= max\n+\n+}\n+\n+object VersionRange {\n+\n+  import VersionTimeline.Implicits._\n+\n+  private implicit def ordering[V](implicit ev: VersionTimeline.SubVersion[V]): Ordering[V] ="
  }
]