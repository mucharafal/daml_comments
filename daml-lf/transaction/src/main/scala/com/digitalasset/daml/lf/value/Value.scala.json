[
  {
    "id" : "7a3ad02b-604c-47fe-b0c0-63b79ae7fa9f",
    "prId" : 7241,
    "comments" : [
      {
        "id" : "a782f71e-2e71-48c4-858f-ebcb7394aaff",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    case ValueStruct(a) => (150, k { case ValueStruct(b) => a ?|? b })\r\n```\r\n\r\n`Struct` should have an `Order` and `Equal` instance modeled like that for `ImmArray`.",
        "createdAt" : "2020-09-03T18:41:22Z",
        "updatedAt" : "2020-09-04T15:15:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d205239-872d-4857-8e34-6b0510fbc404",
        "parentId" : "a782f71e-2e71-48c4-858f-ebcb7394aaff",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-09-04T15:51:28Z",
        "updatedAt" : "2020-09-04T15:51:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cb7af8a7663f08908d413d5964f55cb37e10d89b",
    "line" : null,
    "diffHunk" : "@@ -498,7 +496,7 @@ private final class `Value Order instance`[Cid: Order](Scope: Value.LookupVarian\n           ctorOrder(idA, idB, a, b)\n       })\n     case ValueRecord(_, a) => (140, k { case ValueRecord(_, b) => _2.T.subst(a) ?|? _2.T.subst(b) })\n-    case ValueStruct(a) => (150, k { case ValueStruct(b) => a ?|? b })\n+    case ValueStruct(a) => (150, k { case ValueStruct(b) => a.toImmArray ?|? b.toImmArray })"
  },
  {
    "id" : "d787a5fe-5664-4a7a-962e-90463a5b87db",
    "prId" : 7241,
    "comments" : [
      {
        "id" : "a436062f-d668-4ccb-a88a-664614900cae",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Likewise this can be reverted.",
        "createdAt" : "2020-09-03T18:42:05Z",
        "updatedAt" : "2020-09-04T15:15:53Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "72629420-a764-4b43-bd4e-dfa06aa92e5e",
        "parentId" : "a436062f-d668-4ccb-a88a-664614900cae",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-09-04T15:51:21Z",
        "updatedAt" : "2020-09-04T15:51:21Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cb7af8a7663f08908d413d5964f55cb37e10d89b",
    "line" : null,
    "diffHunk" : "@@ -576,7 +574,7 @@ private final class `Value Equal instance`[Cid: Equal] extends Equal[Value[Cid]]\n       }\n       case ValueStruct(fields) => {\n         case ValueStruct(fields2) =>\n-          fields === fields2\n+          fields.toImmArray === fields2.toImmArray"
  },
  {
    "id" : "68073286-ac69-45da-823e-039bfdf2580d",
    "prId" : 6739,
    "comments" : [
      {
        "id" : "7b8d74a6-f80d-40ab-afe2-eadbf2bc14de",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It's not entirely clear why this is being bumped as well.",
        "createdAt" : "2020-07-15T11:55:49Z",
        "updatedAt" : "2020-07-15T19:43:20Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "56f970d2f86437d6e9b09a51bc1648fd3ae8e4c8",
    "line" : 5,
    "diffHunk" : "@@ -445,9 +445,9 @@ object Value extends CidContainer1[Value] {\n       CidMapper.basicMapperInstance[ContractId, ContractId.V1]\n   }\n \n-  @deprecated(\"use com.daml.lf.transaction.NodeId\", since = \"1.3.0\")\n+  @deprecated(\"use com.daml.lf.transaction.NodeId\", since = \"1.4.0\")"
  },
  {
    "id" : "72d6716f-2379-4b78-a443-609a644f524b",
    "prId" : 6315,
    "comments" : [
      {
        "id" : "3492fb73-dc5b-4309-9396-5edba010de99",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n          s\"the suffix is too long, expected at most $MaxSuffixLength bytes, but got ${suffix.length}\"\r\n```",
        "createdAt" : "2020-06-12T08:11:23Z",
        "updatedAt" : "2020-06-12T09:47:35Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b4a15dd1c289bf52540f305f675dd6f4328d7fc3",
    "line" : null,
    "diffHunk" : "@@ -364,15 +364,18 @@ object Value extends CidContainer1[Value] {\n     }\n \n     object V1 {\n-      val maxSuffixLength = 94\n+      // For more details, please refer to  V1 Contract ID allocation scheme\n+      // daml-lf/spec/contract-id.rst\n+\n+      private[lf] val MaxSuffixLength = 94\n \n       def apply(discriminator: Hash): V1 = new V1(discriminator, Bytes.Empty)\n \n       def build(discriminator: crypto.Hash, suffix: Bytes): Either[String, V1] =\n         Either.cond(\n-          suffix.length <= maxSuffixLength,\n+          suffix.length <= MaxSuffixLength,\n           new V1(discriminator, suffix),\n-          s\"the suffix is too long, expected at most ${maxSuffixLength} bytes, but got ${suffix.length}\"\n+          s\"the suffix is too long, expected at most ${MaxSuffixLength} bytes, but got ${suffix.length}\""
  },
  {
    "id" : "a876a653-6b19-499b-b6dc-50b1f44dfda2",
    "prId" : 5991,
    "comments" : [
      {
        "id" : "37ba3e33-8548-41a3-baba-010300bb3c74",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "What's our process for removing deprecated elements such as this? Do we remove them in e.g. the next major SDK version?",
        "createdAt" : "2020-05-20T16:21:11Z",
        "updatedAt" : "2020-05-25T08:54:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9b5016d4-a335-44aa-a090-d623f3b0b696",
        "parentId" : "37ba3e33-8548-41a3-baba-010300bb3c74",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We do not have clearly defined process. My intention was to let this deprecated warning for a least one release.  \r\n",
        "createdAt" : "2020-05-25T07:21:11Z",
        "updatedAt" : "2020-05-25T08:54:03Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0f8d8346-63d7-4c00-ad8a-b027c12475b7",
        "parentId" : "37ba3e33-8548-41a3-baba-010300bb3c74",
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Sounds good.",
        "createdAt" : "2020-05-25T08:29:58Z",
        "updatedAt" : "2020-05-25T08:54:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d70cbbf83f8ff0e01b793b887f877d8f61f7294",
    "line" : 50,
    "diffHunk" : "@@ -344,30 +339,19 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n \n   type NodeIdx = Int\n \n-  /** Possibly relative contract identifiers.\n-    *\n-    * The contract identifiers can be either absolute, referring to a\n-    * specific instance in the contract store, or relative, referring\n-    * to a contract created in the same transaction and hence not yet\n-    * having been assigned an absolute identifier.\n-    *\n-    * Note that relative contract ids are useful only before commit, in\n-    * the context of a transaction. After committing we should never\n-    * mention them.\n-    *\n-    * Why put it here and not just in Transaction.scala? Because we want\n-    * to be able to use AbsoluteContractId elsewhere, so that we can\n-    * automatically upcast to ContractId by subtyping.\n-    */\n-  sealed abstract class ContractId extends Product with Serializable\n+  @deprecated(\"Use ContractId\", since = \"1.1.2\")"
  },
  {
    "id" : "accf02db-7dac-4c58-9377-279a98f45982",
    "prId" : 5966,
    "comments" : [
      {
        "id" : "2e65b9f4-ebcf-4788-a67c-9bbae7f6df9f",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "I'm just wondering: from where does that magic number come from? If you would like to follow the Scala style guide this constant should be `MaxSuffixLength`.",
        "createdAt" : "2020-06-11T15:52:21Z",
        "updatedAt" : "2020-06-11T15:52:21Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1c31fcd6f1afce560a4ef4dba5af7a6f877ec71a",
    "line" : 4,
    "diffHunk" : "@@ -388,13 +388,15 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n     }\n \n     object V1 {\n+      val maxSuffixLength = 94"
  },
  {
    "id" : "324f61c3-abca-4a1c-8c1b-5e85afc61dc6",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "29db32ca-3d81-4591-9c82-26ab0a2d4647",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "```suggestion\r\n    final class V1 private(val discriminator: crypto.Hash, val suffix: Bytes) extends AbsoluteContractId {\r\n```\r\nOtherwise you don't have the control that the suffix length is respected.",
        "createdAt" : "2020-05-08T14:46:03Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "faa2b6ad-7a31-4462-9191-ece3d1a4ca52",
        "parentId" : "29db32ca-3d81-4591-9c82-26ab0a2d4647",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "good catch. ",
        "createdAt" : "2020-05-08T14:48:10Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -378,14 +392,47 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n       implicit val `V0 Order`: Order[V0] = Order.fromScalaOrdering[String] contramap (_.coid)\n     }\n \n-    final case class V1(discriminator: crypto.Hash, suffix: Bytes = Bytes.Empty)\n-        extends AbsoluteContractId {\n+    final class V1(val discriminator: crypto.Hash, val suffix: Bytes) extends AbsoluteContractId {"
  },
  {
    "id" : "4e24ee34-09e3-4418-818d-4fc7d0f7b242",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "639dde01-61d7-4a08-93b6-d11d8bd292f6",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "I recommend to not put the whole suffix into the error message, since we have no idea how long it actually is. How about showing the a length-limited prefix and the number of bytes?",
        "createdAt" : "2020-05-08T14:50:01Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73803426-83f5-4462-82cd-d2e6365a0127",
        "parentId" : "639dde01-61d7-4a08-93b6-d11d8bd292f6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fair enough ",
        "createdAt" : "2020-05-08T14:52:33Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c75711d9-2d48-4f6d-9931-e0029d33a2a7",
        "parentId" : "639dde01-61d7-4a08-93b6-d11d8bd292f6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-05-08T14:56:14Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -378,14 +392,47 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n       implicit val `V0 Order`: Order[V0] = Order.fromScalaOrdering[String] contramap (_.coid)\n     }\n \n-    final case class V1(discriminator: crypto.Hash, suffix: Bytes = Bytes.Empty)\n-        extends AbsoluteContractId {\n+    final class V1(val discriminator: crypto.Hash, val suffix: Bytes) extends AbsoluteContractId {\n       lazy val toBytes: Bytes = V1.prefix ++ discriminator.bytes ++ suffix\n       lazy val coid: Ref.HexString = toBytes.toHexString\n       override def toString: String = s\"AbsoluteContractId($coid)\"\n+\n+      // We copy how hashcode evaluation is cached in String\n+      // http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/lang/String.java\n+      private var _hashCode = 0\n+\n+      override def hashCode(): Int =\n+        if (_hashCode != 0)\n+          _hashCode\n+        else {\n+          val hash = MurmurHash3.mixLast(discriminator.hashCode(), suffix.hashCode())\n+          _hashCode = if (hash == 0) 1 else hash\n+          _hashCode\n+        }\n+\n+      override def equals(obj: Any): Boolean = obj match {\n+        case that: V1 =>\n+          this.discriminator == that.discriminator && this.suffix == that.suffix\n+        case _ => false\n+      }\n+\n     }\n \n     object V1 {\n+      def apply(discriminator: crypto.Hash): V1 = new V1(discriminator, Bytes.Empty)\n+\n+      def unapply(arg: V1): Option[(crypto.Hash, Bytes)] =\n+        Some((arg.discriminator, arg.suffix))\n+\n+      def build(discriminator: crypto.Hash, suffix: Bytes): Either[String, V1] =\n+        Either.cond(\n+          suffix.length <= 94,\n+          new V1(discriminator, suffix),\n+          s\"suffix $suffix to long\""
  },
  {
    "id" : "598f0751-4b72-4d1d-8c85-770ea63edd2d",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "a074452c-b353-4cfe-835d-184d395d2add",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "What's wrong with the `case class`?",
        "createdAt" : "2020-05-08T15:11:51Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9fd825bf-b2bb-4bdf-8269-dcf8b4bdec28",
        "parentId" : "a074452c-b353-4cfe-835d-184d395d2add",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`copy` lets you break construction-enforced invariants. I think you can deal with this by defining a private `copy` instead, but 🤷‍♂️ ",
        "createdAt" : "2020-05-08T16:25:39Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bcba1895-a086-4013-b989-023c7bb3dd87",
        "parentId" : "a074452c-b353-4cfe-835d-184d395d2add",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Cool. I did not know we can override the `copy` method.   \r\n\r\nWith the current settings we cannot make the overriding method private if we do not use it. @S11001001 What do you think of my solution. Do you think to any better way ?  ",
        "createdAt" : "2020-05-08T17:18:38Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73020247-350f-4c0c-af17-aab7b97edda8",
        "parentId" : "a074452c-b353-4cfe-835d-184d395d2add",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Your solution seems perfectly sensible to me. 👍 ",
        "createdAt" : "2020-05-08T22:13:15Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -378,14 +392,47 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n       implicit val `V0 Order`: Order[V0] = Order.fromScalaOrdering[String] contramap (_.coid)\n     }\n \n-    final case class V1(discriminator: crypto.Hash, suffix: Bytes = Bytes.Empty)\n-        extends AbsoluteContractId {\n+    final class V1 private(val discriminator: crypto.Hash, val suffix: Bytes) extends AbsoluteContractId {"
  },
  {
    "id" : "34aaead0-61f9-4c22-85dd-487eb42d2433",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "4a58227a-19f5-42fc-a9be-0ec1c950f878",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  sealed abstract class AbsoluteContractId extends ContractId with Equals {\r\n```",
        "createdAt" : "2020-05-08T16:15:43Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : 16,
    "diffHunk" : "@@ -360,16 +362,28 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n     */\n   sealed abstract class ContractId\n \n-  sealed abstract class AbsoluteContractId extends ContractId with Product with Serializable {\n+  sealed abstract class AbsoluteContractId extends ContractId {"
  },
  {
    "id" : "f659c4a2-e828-4574-82a6-c944d78f8f91",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "73c333ab-d055-4abd-9793-cdde474a96d2",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  sealed abstract class ContractId extends Equals\r\n```",
        "createdAt" : "2020-05-08T16:17:02Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -360,16 +362,28 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n     */\n   sealed abstract class ContractId"
  },
  {
    "id" : "4f951fa3-7eba-42a2-8d3f-e2c2a5d918a1",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "a6a1d81b-3e0a-477c-9478-1e0901fa9be2",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      private[this] var _hashCode = 0\r\n```",
        "createdAt" : "2020-05-08T16:18:14Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -378,14 +392,47 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n       implicit val `V0 Order`: Order[V0] = Order.fromScalaOrdering[String] contramap (_.coid)\n     }\n \n-    final case class V1(discriminator: crypto.Hash, suffix: Bytes = Bytes.Empty)\n-        extends AbsoluteContractId {\n+    final class V1 private(val discriminator: crypto.Hash, val suffix: Bytes) extends AbsoluteContractId {\n       lazy val toBytes: Bytes = V1.prefix ++ discriminator.bytes ++ suffix\n       lazy val coid: Ref.HexString = toBytes.toHexString\n       override def toString: String = s\"AbsoluteContractId($coid)\"\n+\n+      // We copy how hashcode evaluation is cached in String\n+      // http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/lang/String.java\n+      private var _hashCode = 0"
  },
  {
    "id" : "9ac517df-8735-487c-8fcb-b55d52e860f0",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "71faf7ff-1b7e-44fe-890d-bf1ec788731f",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      def unapply(arg: V1): Some[(crypto.Hash, Bytes)] =\r\n```",
        "createdAt" : "2020-05-08T16:19:24Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -378,14 +392,47 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n       implicit val `V0 Order`: Order[V0] = Order.fromScalaOrdering[String] contramap (_.coid)\n     }\n \n-    final case class V1(discriminator: crypto.Hash, suffix: Bytes = Bytes.Empty)\n-        extends AbsoluteContractId {\n+    final class V1 private(val discriminator: crypto.Hash, val suffix: Bytes) extends AbsoluteContractId {\n       lazy val toBytes: Bytes = V1.prefix ++ discriminator.bytes ++ suffix\n       lazy val coid: Ref.HexString = toBytes.toHexString\n       override def toString: String = s\"AbsoluteContractId($coid)\"\n+\n+      // We copy how hashcode evaluation is cached in String\n+      // http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/lang/String.java\n+      private var _hashCode = 0\n+\n+      override def hashCode(): Int =\n+        if (_hashCode != 0)\n+          _hashCode\n+        else {\n+          val hash = MurmurHash3.mixLast(discriminator.hashCode(), suffix.hashCode())\n+          _hashCode = if (hash == 0) 1 else hash\n+          _hashCode\n+        }\n+\n+      override def equals(obj: Any): Boolean = obj match {\n+        case that: V1 =>\n+          this.discriminator == that.discriminator && this.suffix == that.suffix\n+        case _ => false\n+      }\n+\n     }\n \n     object V1 {\n+      def apply(discriminator: crypto.Hash): V1 = new V1(discriminator, Bytes.Empty)\n+\n+      def unapply(arg: V1): Option[(crypto.Hash, Bytes)] ="
  },
  {
    "id" : "822c3eaf-d875-4483-bf10-913162b61c17",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "ad582e74-9184-41cb-9b4a-cd4e57a8a7be",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      def unapply(arg: V0): Some[Ref.ContractIdString] = Some(arg.coid)\r\n```",
        "createdAt" : "2020-05-08T16:19:36Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -360,16 +362,28 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n     */\n   sealed abstract class ContractId\n \n-  sealed abstract class AbsoluteContractId extends ContractId with Product with Serializable {\n+  sealed abstract class AbsoluteContractId extends ContractId {\n     def coid: String\n   }\n \n   object AbsoluteContractId {\n-    final case class V0(coid: Ref.ContractIdString) extends AbsoluteContractId {\n+    final class V0(val coid: Ref.ContractIdString) extends AbsoluteContractId {\n       override def toString: String = s\"AbsoluteContractId($coid)\"\n+\n+      override def hashCode(): Int = coid.hashCode()\n+\n+      override def equals(obj: Any): Boolean = obj match {\n+        case that: V0 => this.coid == that.coid\n+        case _ => false\n+      }\n+\n     }\n \n     object V0 {\n+      def apply(coid: Ref.ContractIdString): V0 = new V0(coid)\n+\n+      def unapply(arg: V0): Option[Ref.ContractIdString] = Some(arg.coid)"
  },
  {
    "id" : "e8b0d3eb-e99a-45fd-878b-8d453d51f37d",
    "prId" : 5913,
    "comments" : [
      {
        "id" : "b3af9ca9-4c78-49a9-8021-ba90f1430ef5",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "With `case class` on all leaves this can percolate all the way up.\r\n\r\n```suggestion\r\n  sealed abstract class ContractId extends Product with Serializable\r\n\r\n  sealed abstract class AbsoluteContractId extends ContractId {\r\n```",
        "createdAt" : "2020-05-08T22:16:23Z",
        "updatedAt" : "2020-05-09T10:32:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e43df9442f6e63fbda69ee802d912e0e1699956",
    "line" : null,
    "diffHunk" : "@@ -358,7 +359,7 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n     * to be able to use AbsoluteContractId elsewhere, so that we can\n     * automatically upcast to ContractId by subtyping.\n     */\n-  sealed abstract class ContractId\n+  sealed abstract class ContractId extends Equals\n \n   sealed abstract class AbsoluteContractId extends ContractId with Product with Serializable {"
  },
  {
    "id" : "fb468756-8123-4705-b86f-99cde3491b10",
    "prId" : 5223,
    "comments" : [
      {
        "id" : "a0708c5f-8bc3-4eab-b85c-a5f98ea99a1c",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am a bit concern we have an order on `Value`. \r\nIt will be very tricky to keep in think with the ordering of  `SValue` `com.digitalasset.daml.lf.speedy.svalue.Ordering` ",
        "createdAt" : "2020-03-30T12:00:28Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "067347d3-45a2-4483-814e-33a97a345b99",
        "parentId" : "a0708c5f-8bc3-4eab-b85c-a5f98ea99a1c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Yes, it will, but it is accompanied by a reasonable scalacheck-based testing tactic, to be implemented. Anyway, we signed up for this by having `ValueGenMap` accept wildly wrong input.",
        "createdAt" : "2020-03-30T14:44:38Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b0a8c7fc-9c60-4324-95e3-700f5763d2f3",
        "parentId" : "a0708c5f-8bc3-4eab-b85c-a5f98ea99a1c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Maybe we could generalize `com.digitalasset.daml.lf.speedy.svalue.OrderingSpec` to test both implementation.",
        "createdAt" : "2020-03-30T15:22:43Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "608e30e5-b363-4cd0-84b9-f4cfa5163aa4",
        "parentId" : "a0708c5f-8bc3-4eab-b85c-a5f98ea99a1c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@remyhaemmerle-da This is what I have in mind 93decad0ffb8c43d70181d401cbfb8f5340de71f , I just need to convert Value to SValue to do a similar check for those.",
        "createdAt" : "2020-04-03T20:42:37Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4c6c7c118876a03f4fb995d33280f39a4f00a91b",
    "line" : null,
    "diffHunk" : "@@ -438,3 +389,100 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n   val ValueNil: ValueList[Nothing] = ValueList(FrontStack.empty)\n   val ValueNone: ValueOptional[Nothing] = ValueOptional(None)\n }\n+\n+sealed abstract class ValueInstances {\n+  // Order of GenMap entries is relevant for this equality.\n+  implicit def `Value Equal instance`[Cid: Equal]: Equal[Value[Cid]] =\n+    new `Value Equal instance`[Cid] {\n+      override val E = Equal[Cid]\n+    }\n+}\n+\n+private final class `Value Order instance`[Cid](implicit val E: Order[Cid])"
  },
  {
    "id" : "7f3b9108-b84c-4283-b1de-002195cb34a5",
    "prId" : 5207,
    "comments" : [
      {
        "id" : "c9e7f109-518c-43ed-b79c-74ce681dc737",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Often a contractId is bound to a name like `coid`. Referencing the hex string the looks like `coid.coid`. How about we call this `toHexString`? Also makes it very explicit what this is.",
        "createdAt" : "2020-03-27T09:24:38Z",
        "updatedAt" : "2020-03-27T15:00:59Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1a8e2a8f-7c45-4d7f-9504-67095ea2fca8",
        "parentId" : "c9e7f109-518c-43ed-b79c-74ce681dc737",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We need the same name for V0 and V1. V0 coid is not a `HexString`.  ",
        "createdAt" : "2020-03-27T09:57:11Z",
        "updatedAt" : "2020-03-27T15:00:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6601ac11-c023-45cb-b71d-e93cdb969422",
        "parentId" : "c9e7f109-518c-43ed-b79c-74ce681dc737",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I definitively do not want to use `toString`. Any suggestion ? ",
        "createdAt" : "2020-03-27T09:59:04Z",
        "updatedAt" : "2020-03-27T15:00:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0fd726fd-ce59-45fa-822e-b5d5ed78d0e9",
        "parentId" : "c9e7f109-518c-43ed-b79c-74ce681dc737",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "okay, let's keep it for now.",
        "createdAt" : "2020-03-27T15:13:04Z",
        "updatedAt" : "2020-03-27T15:13:04Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0a5558b423555a61e77d2e1a7d19227c8ae2134b",
    "line" : 35,
    "diffHunk" : "@@ -347,9 +347,66 @@ object Value extends CidContainer1WithDefaultCidResolver[Value] {\n     * to be able to use AbsoluteContractId elsewhere, so that we can\n     * automatically upcast to ContractId by subtyping.\n     */\n-  sealed trait ContractId\n+  sealed abstract class ContractId\n+\n+  sealed abstract class AbsoluteContractId extends ContractId with Product with Serializable {\n+    def coid: String\n+  }\n+\n+  object AbsoluteContractId {\n+    final case class V0(coid: Ref.ContractIdString) extends AbsoluteContractId {\n+      override def toString: String = s\"AbsoluteContractId($coid)\"\n+    }\n+\n+    object V0 {\n+      def fromString(s: String): Either[String, V0] =\n+        Ref.ContractIdString.fromString(s).map(V0(_))\n+\n+      def assertFromString(s: String): V0 = assertRight(fromString(s))\n+    }\n+\n+    final case class V1(discriminator: crypto.Hash, suffix: Bytes = Bytes.Empty)\n+        extends AbsoluteContractId {\n+      lazy val toBytes: Bytes = V1.prefix ++ discriminator.bytes ++ suffix\n+      lazy val coid: Ref.HexString = toBytes.toHexString"
  },
  {
    "id" : "fadbdbc8-de82-4d9c-bcc5-d0a7272795b0",
    "prId" : 4364,
    "comments" : [
      {
        "id" : "0b19d533-3b94-4848-b80f-2f4cfbfc9ab2",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Did you want to deprecate this method as well?",
        "createdAt" : "2020-02-04T09:58:54Z",
        "updatedAt" : "2020-02-05T15:43:03Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "770f6716-0257-44e2-b5d9-03d2937dbce7",
        "parentId" : "0b19d533-3b94-4848-b80f-2f4cfbfc9ab2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I let the one of Value, because: \r\n- I know it is not versioned\r\n- Navigator uses it heavily",
        "createdAt" : "2020-02-04T15:37:48Z",
        "updatedAt" : "2020-02-05T15:43:03Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ed7aa085e66c23d39da73f99079c0647ab202aa2",
    "line" : 34,
    "diffHunk" : "@@ -17,29 +23,12 @@ import scalaz.syntax.equal._\n /** Values   */\n sealed abstract class Value[+Cid] extends Product with Serializable {\n   import Value._\n-  // TODO (FM) make this tail recursive\n+\n   def mapContractId[Cid2](f: Cid => Cid2): Value[Cid2] =\n-    // TODO (FM) make this tail recursive\n-    this match {\n-      case ValueContractId(coid) => ValueContractId(f(coid))\n-      case ValueRecord(id, fs) =>\n-        ValueRecord(id, fs.map({\n-          case (lbl, value) => (lbl, value.mapContractId(f))\n-        }))\n-      case ValueStruct(fs) =>\n-        ValueStruct(fs.map[(Name, Value[Cid2])] {\n-          case (lbl, value) => (lbl, value.mapContractId(f))\n-        })\n-      case ValueVariant(id, variant, value) =>\n-        ValueVariant(id, variant, value.mapContractId(f))\n-      case x: ValueCidlessLeaf => x\n-      case ValueList(vs) =>\n-        ValueList(vs.map(_.mapContractId(f)))\n-      case ValueOptional(x) => ValueOptional(x.map(_.mapContractId(f)))\n-      case ValueTextMap(x) => ValueTextMap(x.mapValue(_.mapContractId(f)))\n-      case ValueGenMap(entries) =>\n-        ValueGenMap(entries.map { case (k, v) => k.mapContractId(f) -> v.mapContractId(f) })\n-    }\n+    map1(f)"
  },
  {
    "id" : "86801a0d-b75c-40c1-9f7a-b27e6b2990de",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "8a1fcaa1-77e7-4f92-bc9d-4e95983a76fe",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`index.hashCode`?",
        "createdAt" : "2020-01-21T15:32:08Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fa7cdf6c-4ba9-45a8-b79a-59fbbda1278c",
        "parentId" : "8a1fcaa1-77e7-4f92-bc9d-4e95983a76fe",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-01-21T16:01:25Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : null,
    "diffHunk" : "@@ -315,33 +319,29 @@ object Value {\n   /** The constructor is private so that we make sure that only this object constructs\n     * node ids -- we don't want external code to manipulate them.\n     */\n-  final class NodeId private[NodeId] (val index: Int) extends Equals {\n-    def next: NodeId = new NodeId(index + 1)\n-\n-    override def canEqual(that: Any) = that.isInstanceOf[NodeId]\n+  final case class NodeId(index: Int, discriminator: Option[crypto.Hash] = None) extends Equals {\n+    val name: LedgerString = LedgerString.assertFromString(index.toString)\n \n-    override def equals(that: Any) = that match {\n-      case n: NodeId => index == n.index\n-      case _ => false\n+    override def equals(other: Any): Boolean = other match {\n+      case that: NodeId if (this.discriminator == that.discriminator) =>\n+        this.discriminator.isDefined || this.index == that.index\n+      case _ =>\n+        false\n     }\n \n-    override def hashCode() = index.hashCode()\n-\n-    override def toString = \"NodeId(\" + index.toString + \")\"\n-\n-    val name: LedgerString = LedgerString.assertFromString(index.toString)\n+    override def hashCode(): Int =\n+      discriminator.fold(index)(_.hashCode())"
  },
  {
    "id" : "590c9f32-36ee-45b4-9153-75af48667caf",
    "prId" : 983,
    "comments" : [
      {
        "id" : "ad35be37-f2b1-43e6-828f-2bcffcfa3f85",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n```\r\n\r\nto match the previous suggestion about instance definition.",
        "createdAt" : "2019-05-09T23:56:22Z",
        "updatedAt" : "2019-05-13T10:32:19Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64363755-ad48-4a33-8cc2-e53cc2232243",
        "parentId" : "ad35be37-f2b1-43e6-828f-2bcffcfa3f85",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "If I remove this import it does not compile. ",
        "createdAt" : "2019-05-10T13:12:27Z",
        "updatedAt" : "2019-05-13T10:32:19Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f651a1e798c15873f3499c8b7e583ea010b3d99f",
    "line" : null,
    "diffHunk" : "@@ -4,13 +4,13 @@\n package com.digitalasset.daml.lf.value\n \n import com.digitalasset.daml.lf.archive.LanguageVersion\n-import com.digitalasset.daml.lf.data.Ref.Identifier\n+import com.digitalasset.daml.lf.data.Ref.{Identifier, Name}\n import com.digitalasset.daml.lf.data._\n+import com.digitalasset.daml.lf.data.Ref.Name.equalInstance"
  },
  {
    "id" : "c470ebe2-37b7-4801-a910-73eb9bb69f85",
    "prId" : 583,
    "comments" : [
      {
        "id" : "fe41445c-4810-488c-97ee-d6b49fdb185d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Please expand all these cases instead of using `asInstanceOf`. You can also follow the pattern of `GenNode.LeafOnlyNode` and the way some of the `GenNode` constructors inherit from it instead of `GenNode` directly to introduce, say, a `ValueCidless` for these cases as GADT evidence that you can get away with this, then use that as this case.",
        "createdAt" : "2019-04-30T13:21:47Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -46,6 +46,42 @@ sealed abstract class Value[+Cid] extends Product with Serializable {\n       case ValueMap(x) => ValueMap(x.mapValue(_.mapContractId(f)))\n     }\n \n+  // TODO (Nick Smith) - Still not tail-recursive\n+  def mapContractIdOpt[Cid2](f: Cid => Option[Cid2]): Option[Value[Cid2]] = {\n+    @tailrec def _flatten[A](\n+        in: ImmArray[Option[A]],\n+        out: ImmArray.ImmArraySeq[A]): Option[ImmArray[A]] =\n+      in match {\n+        case ImmArray() => Some(out.toImmArray)\n+        case ImmArrayCons(None, _) => None\n+        case ImmArrayCons(Some(v), rest) => _flatten(rest, out :+ v)\n+      }\n+    def flatten[A](in: ImmArray[Option[A]]): Option[ImmArray[A]] =\n+      _flatten(in, ImmArray.ImmArraySeq.empty)\n+\n+    this match {\n+      case prim @ (ValueBool(_) | ValueDate(_) | ValueDecimal(_) | ValueInt64(_) | ValueParty(_) |\n+          ValueText(_) | ValueTimestamp(_) | ValueUnit) =>\n+        Some(prim.asInstanceOf[Value[Cid2]])"
  },
  {
    "id" : "3d34ab1c-1d61-4676-8e6f-0fe6525b75cf",
    "prId" : 583,
    "comments" : [
      {
        "id" : "33dba4b5-b371-4bbf-8c65-e8f8d8449f55",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  def collectContractIdOpt[Cid2](f: Cid => Option[Cid2]): Option[Value[Cid2]] = {\r\n```\r\n\r\nI've given this function its more Scala-aligned name, but I don't see where you use it so I'm not even sure it has the right semantics.",
        "createdAt" : "2019-04-30T13:22:23Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -46,6 +46,42 @@ sealed abstract class Value[+Cid] extends Product with Serializable {\n       case ValueMap(x) => ValueMap(x.mapValue(_.mapContractId(f)))\n     }\n \n+  // TODO (Nick Smith) - Still not tail-recursive\n+  def mapContractIdOpt[Cid2](f: Cid => Option[Cid2]): Option[Value[Cid2]] = {"
  },
  {
    "id" : "2bae1eb1-ed4c-4060-b50d-a32f71adb3e1",
    "prId" : 583,
    "comments" : [
      {
        "id" : "2f2028b3-a493-4f3d-9493-03848f4d944d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      in collect {case Some(a) => a}\r\n```",
        "createdAt" : "2019-04-30T13:24:59Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -46,6 +46,42 @@ sealed abstract class Value[+Cid] extends Product with Serializable {\n       case ValueMap(x) => ValueMap(x.mapValue(_.mapContractId(f)))\n     }\n \n+  // TODO (Nick Smith) - Still not tail-recursive\n+  def mapContractIdOpt[Cid2](f: Cid => Option[Cid2]): Option[Value[Cid2]] = {\n+    @tailrec def _flatten[A](\n+        in: ImmArray[Option[A]],\n+        out: ImmArray.ImmArraySeq[A]): Option[ImmArray[A]] =\n+      in match {\n+        case ImmArray() => Some(out.toImmArray)\n+        case ImmArrayCons(None, _) => None\n+        case ImmArrayCons(Some(v), rest) => _flatten(rest, out :+ v)\n+      }\n+    def flatten[A](in: ImmArray[Option[A]]): Option[ImmArray[A]] =\n+      _flatten(in, ImmArray.ImmArraySeq.empty)"
  }
]