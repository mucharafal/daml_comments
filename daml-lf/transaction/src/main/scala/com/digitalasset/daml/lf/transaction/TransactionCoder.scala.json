[
  {
    "id" : "3df1441a-7880-4821-aba3-3952045e1d13",
    "prId" : 7617,
    "comments" : [
      {
        "id" : "70478287-69a0-42e1-aa05-6301018898b3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why do we always set this to `false` during decoding? Does the encoded version not contain the required information? Same question a bit further down.",
        "createdAt" : "2020-10-09T14:09:18Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "585e13a5-c4e0-481e-996a-c986c2128e0e",
        "parentId" : "70478287-69a0-42e1-aa05-6301018898b3",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The encoded version does not contain the required information.\r\nWe have to add the flag to `transaction.proto`. I will do that in a following up PR.  \r\nThis PR is concerned with replacing the field `PartialTransaction#byKeyNodes` by the `byKey` flag in `GenNode`.",
        "createdAt" : "2020-10-09T16:36:28Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bd540a0d-7c52-4386-a54b-acae8d5b3c85",
        "parentId" : "70478287-69a0-42e1-aa05-6301018898b3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thanks for the explanation.",
        "createdAt" : "2020-10-12T08:58:56Z",
        "updatedAt" : "2020-10-13T08:21:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "028bbced28b92a3143f68f3f65bf48954cba4025",
    "line" : 24,
    "diffHunk" : "@@ -354,7 +354,8 @@ object TransactionCoder {\n           else if (txVersion precedes minContractKeyInFetch)\n             Left(DecodeError(s\"$txVersion is too old to support NodeFetch's `key` field\"))\n           else decodeKeyWithMaintainers(decodeCid, protoFetch.getKeyWithMaintainers).map(Some(_))\n-        } yield (ni, NodeFetch(c, templateId, None, actingParties, signatories, stakeholders, key))\n+        } yield\n+          (ni, NodeFetch(c, templateId, None, actingParties, signatories, stakeholders, key, false))"
  },
  {
    "id" : "966abc28-918a-475d-a1a9-00886361c1b4",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "ece01f66-a171-4f2e-a475-075ba5ba1d3b",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We should check the version here ! \r\n\r\nYou have to add in `TransactionVersions`: \r\n```scala\r\nprivate[transaction] val minChoiceObserver = TransactionVersion(\"11\")\r\n```\r\n\r\nAnd somewhere around here: \r\n```scala\r\nif (transactionVersion precedes minChoiceObserver && ne.observers.nonEmpty) \r\n  throw  EncodeError(\r\n                s\"As of version $minNoControllers, the observer of an exercise node _must_ be empty\",\r\n  )\r\n```",
        "createdAt" : "2020-10-15T08:18:32Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -217,6 +217,7 @@ object TransactionCoder {\n             .addAllChildren(ne.children.map(encodeNid.asString).toList.asJava)\n             .addAllSignatories(ne.signatories.toSet[String].asJava)\n             .addAllStakeholders(ne.stakeholders.toSet[String].asJava)\n+            .addAllObservers(ne.observers.toSet[String].asJava)"
  },
  {
    "id" : "75c80659-1872-4ff9-8d70-d329a0c7f58a",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "3d1c67b9-955d-4312-9280-77848dcfb5ef",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We should check the version !",
        "createdAt" : "2020-10-15T08:18:51Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -420,11 +421,13 @@ object TransactionCoder {\n           }\n           signatories <- toPartySet(protoExe.getSignatoriesList)\n           stakeholders <- toPartySet(protoExe.getStakeholdersList)\n+          observers <- toPartySet(protoExe.getObserversList)"
  },
  {
    "id" : "1b9e5f41-5122-4263-8e28-a41b215c6717",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "367b5655-61cc-451f-8abd-84b386fd6cc4",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We shoudl check the version here as well. ",
        "createdAt" : "2020-10-15T08:27:33Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -656,11 +659,13 @@ object TransactionCoder {\n           actingParties_ <- toPartySet(protoExe.getActorsList)\n           signatories_ <- toPartySet(protoExe.getSignatoriesList)\n           stakeholders_ <- toPartySet(protoExe.getStakeholdersList)\n+          observers_ <- toPartySet(protoExe.getObserversList)"
  },
  {
    "id" : "3603090f-4e3d-42b5-8753-75678d3ec949",
    "prId" : 4460,
    "comments" : [
      {
        "id" : "77abbf94-efb5-4d45-97c1-484a513a8b53",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "All the `_ = ... createBuilder.setXyz` can be moved to the yield block.",
        "createdAt" : "2020-02-13T09:33:13Z",
        "updatedAt" : "2020-02-13T15:22:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "341f577a-1fec-4b2e-9b87-10cc8983dd39",
        "parentId" : "77abbf94-efb5-4d45-97c1-484a513a8b53",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "OK. Is it really better ? ",
        "createdAt" : "2020-02-13T12:26:29Z",
        "updatedAt" : "2020-02-13T15:22:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "710daba6-61ba-45c3-a683-2266d3450870",
        "parentId" : "77abbf94-efb5-4d45-97c1-484a513a8b53",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "For starters, you don't do work in case a generator downstream goes to `Left`.",
        "createdAt" : "2020-02-13T15:01:22Z",
        "updatedAt" : "2020-02-13T15:22:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f833d93-4eda-4a1a-bac3-0ee3dad70fbd",
        "parentId" : "77abbf94-efb5-4d45-97c1-484a513a8b53",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fair enough. ",
        "createdAt" : "2020-02-13T15:07:35Z",
        "updatedAt" : "2020-02-13T15:22:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "59b8325563e5f1d36534e27674434e055016d4ba",
    "line" : null,
    "diffHunk" : "@@ -149,29 +147,29 @@ object TransactionCoder {\n     }\n     node match {\n       case nc @ NodeCreate(_, _, _, _, _, _, _) =>\n-        encodeContractInstance(encodeCid, nc.coinst).flatMap { inst =>\n-          val createBuilder = TransactionOuterClass.NodeCreate\n+        val createBuilder =\n+          TransactionOuterClass.NodeCreate\n             .newBuilder()\n-            .setContractIdOrStruct(encodeCid, transactionVersion, nc.coid)(\n-              _.setContractId(_),\n-              _.setContractIdStruct(_),\n-            )\n-            .setContractInstance(inst)\n             .addAllStakeholders(nc.stakeholders.toSet[String].asJava)\n             .addAllSignatories(nc.signatories.toSet[String].asJava)\n-          nc.key match {\n-            case None => Right(nodeBuilder.setCreate(createBuilder).build())\n+\n+        for {\n+          encodedCid <- encodeCid.encode(transactionVersion, nc.coid)\n+          _ = encodedCid.fold(createBuilder.setContractId, createBuilder.setContractIdStruct)\n+          inst <- encodeContractInstance(encodeCid, nc.coinst)\n+          _ = createBuilder.setContractInstance(inst)\n+          optKey <- nc.key match {\n+            case None => Right(None)\n             case Some(key) =>\n               if (transactionVersion precedes minKeyOrLookupByKey)\n                 Left(EncodeError(transactionVersion, isTooOldFor = \"NodeCreate's `key` field\"))\n               else\n-                encodeKeyWithMaintainers(encodeCid, key).map {\n-                  case (_, encodedKey) =>\n-                    createBuilder.setKeyWithMaintainers(encodedKey)\n-                    nodeBuilder.setCreate(createBuilder).build()\n-                }\n+                encodeKeyWithMaintainers(encodeCid, key).map(Some(_))\n+          }\n+          _ = optKey.foreach {"
  },
  {
    "id" : "fd63feeb-badc-4d6e-9761-5caa020cb15c",
    "prId" : 4425,
    "comments" : [
      {
        "id" : "4f024174-00f1-4d9a-9310-c106c2414e39",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  abstract class EncodeNid[-Nid] private[lf] {\r\n```",
        "createdAt" : "2020-02-06T16:53:52Z",
        "updatedAt" : "2020-02-07T10:48:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "76171aef4450ee340eab6ce616663f8242cf25c9",
    "line" : null,
    "diffHunk" : "@@ -25,56 +25,92 @@ import scala.collection.immutable.HashMap\n object TransactionCoder {\n \n   import ValueCoder.{DecodeCid, EncodeCid, codecContractId}\n-  type EncodeNid[Nid] = Nid => String\n-  type EncodeVal[Cid <: Value.ContractId] =\n-    VersionedValue[Cid] => Either[EncodeError, (ValueVersion, ValueOuterClass.VersionedValue)]\n+\n+  abstract class EncodeNid[Nid] private[lf] {"
  },
  {
    "id" : "3df2663e-3cf5-49e7-8e7b-436c557f0a85",
    "prId" : 4425,
    "comments" : [
      {
        "id" : "f89187b9-3b51-45d6-a67d-b92ca5914fbb",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  abstract class DecodeNid[+Nid] private[lf] {\r\n```",
        "createdAt" : "2020-02-06T16:54:01Z",
        "updatedAt" : "2020-02-07T10:48:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "76171aef4450ee340eab6ce616663f8242cf25c9",
    "line" : null,
    "diffHunk" : "@@ -25,56 +25,92 @@ import scala.collection.immutable.HashMap\n object TransactionCoder {\n \n   import ValueCoder.{DecodeCid, EncodeCid, codecContractId}\n-  type EncodeNid[Nid] = Nid => String\n-  type EncodeVal[Cid <: Value.ContractId] =\n-    VersionedValue[Cid] => Either[EncodeError, (ValueVersion, ValueOuterClass.VersionedValue)]\n+\n+  abstract class EncodeNid[Nid] private[lf] {\n+    def asString(id: Nid): String\n+  }\n+  abstract class DecodeNid[Nid] private[lf] {"
  },
  {
    "id" : "43a5ca6d-1090-4fb9-b692-586b7b4b378e",
    "prId" : 4425,
    "comments" : [
      {
        "id" : "1e90b011-54d4-4f8e-b918-2881f033dc34",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  val NidEncoder: EncodeNid[Value.NodeId] = _.index.toString\r\n```",
        "createdAt" : "2020-02-06T16:54:33Z",
        "updatedAt" : "2020-02-07T10:48:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "54df840a-1606-40cc-a192-4cb6b9127d31",
        "parentId" : "1e90b011-54d4-4f8e-b918-2881f033dc34",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "does not work with the `private[lf]`at line 29 ",
        "createdAt" : "2020-02-06T17:50:50Z",
        "updatedAt" : "2020-02-07T10:48:52Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76171aef4450ee340eab6ce616663f8242cf25c9",
    "line" : 24,
    "diffHunk" : "@@ -25,56 +25,92 @@ import scala.collection.immutable.HashMap\n object TransactionCoder {\n \n   import ValueCoder.{DecodeCid, EncodeCid, codecContractId}\n-  type EncodeNid[Nid] = Nid => String\n-  type EncodeVal[Cid <: Value.ContractId] =\n-    VersionedValue[Cid] => Either[EncodeError, (ValueVersion, ValueOuterClass.VersionedValue)]\n+\n+  abstract class EncodeNid[Nid] private[lf] {\n+    def asString(id: Nid): String\n+  }\n+  abstract class DecodeNid[Nid] private[lf] {\n+    def fromString(s: String): Either[DecodeError, Nid]\n+  }\n+\n+  val NidEncoder: EncodeNid[Value.NodeId] = new EncodeNid[Value.NodeId] {"
  },
  {
    "id" : "eb922e21-a977-463f-af3e-52f5259a652c",
    "prId" : 4425,
    "comments" : [
      {
        "id" : "8767dc23-320c-4e8c-aa76-a97853b3e7c7",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  val NidDecoder: DecodeNid[Value.NodeId] = s => parseInt(s).fold(...)\r\n```\r\n\r\nand so on for the other instances.",
        "createdAt" : "2020-02-06T16:55:20Z",
        "updatedAt" : "2020-02-07T10:48:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76171aef4450ee340eab6ce616663f8242cf25c9",
    "line" : 28,
    "diffHunk" : "@@ -25,56 +25,92 @@ import scala.collection.immutable.HashMap\n object TransactionCoder {\n \n   import ValueCoder.{DecodeCid, EncodeCid, codecContractId}\n-  type EncodeNid[Nid] = Nid => String\n-  type EncodeVal[Cid <: Value.ContractId] =\n-    VersionedValue[Cid] => Either[EncodeError, (ValueVersion, ValueOuterClass.VersionedValue)]\n+\n+  abstract class EncodeNid[Nid] private[lf] {\n+    def asString(id: Nid): String\n+  }\n+  abstract class DecodeNid[Nid] private[lf] {\n+    def fromString(s: String): Either[DecodeError, Nid]\n+  }\n+\n+  val NidEncoder: EncodeNid[Value.NodeId] = new EncodeNid[Value.NodeId] {\n+    override def asString(id: Value.NodeId): String = id.index.toString\n+  }\n+\n+  val NidDecoder: DecodeNid[Value.NodeId] = new DecodeNid[Value.NodeId] {"
  },
  {
    "id" : "dd6db5b5-893c-4f1a-ac33-a0be0d6039c3",
    "prId" : 4425,
    "comments" : [
      {
        "id" : "affda776-d36a-42ab-930e-313ce04cc6fc",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "🆒 ",
        "createdAt" : "2020-02-06T16:56:45Z",
        "updatedAt" : "2020-02-07T10:48:52Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76171aef4450ee340eab6ce616663f8242cf25c9",
    "line" : 70,
    "diffHunk" : "@@ -25,56 +25,92 @@ import scala.collection.immutable.HashMap\n object TransactionCoder {\n \n   import ValueCoder.{DecodeCid, EncodeCid, codecContractId}\n-  type EncodeNid[Nid] = Nid => String\n-  type EncodeVal[Cid <: Value.ContractId] =\n-    VersionedValue[Cid] => Either[EncodeError, (ValueVersion, ValueOuterClass.VersionedValue)]\n+\n+  abstract class EncodeNid[Nid] private[lf] {\n+    def asString(id: Nid): String\n+  }\n+  abstract class DecodeNid[Nid] private[lf] {\n+    def fromString(s: String): Either[DecodeError, Nid]\n+  }\n+\n+  val NidEncoder: EncodeNid[Value.NodeId] = new EncodeNid[Value.NodeId] {\n+    override def asString(id: Value.NodeId): String = id.index.toString\n+  }\n+\n+  val NidDecoder: DecodeNid[Value.NodeId] = new DecodeNid[Value.NodeId] {\n+    override def fromString(s: String): Either[DecodeError, Value.NodeId] =\n+      scalaz.std.string\n+        .parseInt(s)\n+        .fold(_ => Left(DecodeError(s\"cannot parse node Id $s\")), idx => Right(Value.NodeId(idx)))\n+  }\n+\n+  val EventIdEncoder: EncodeNid[Ref.LedgerString] = new EncodeNid[Ref.LedgerString] {\n+    override def asString(id: LedgerString): String = id\n+  }\n+\n+  val EventIdDecoder: DecodeNid[Ref.LedgerString] = new DecodeNid[Ref.LedgerString] {\n+    override def fromString(s: String): Either[DecodeError, LedgerString] =\n+      Ref.LedgerString\n+        .fromString(s)\n+        .left\n+        .map(_ => DecodeError(s\"cannot decode noid: $s\"))\n+  }\n+\n+  def encodeValue[Cid](\n+      cidEncoder: ValueCoder.EncodeCid[Cid],\n+      value: VersionedValue[Cid],\n+  ): Either[EncodeError, (ValueVersion, ValueOuterClass.VersionedValue)] =\n+    ValueCoder.encodeVersionedValueWithCustomVersion(cidEncoder, value).map((value.version, _))\n+\n+  def decodeValue[Cid](\n+      cidDecoder: ValueCoder.DecodeCid[Cid],\n+      value: ValueOuterClass.VersionedValue,\n+  ): Either[DecodeError, Value.VersionedValue[Cid]] =\n+    ValueCoder.decodeVersionedValue(cidDecoder, value)\n \n   private val valueVersion1Only: Set[TransactionVersion] = Set(\"1\") map TransactionVersion\n \n   /**\n     * Encodes a contract instance with the help of the contractId encoding function\n     * @param coinst the contract instance to be encoded\n-    * @param encodeVal function to encode a value to protobuf\n+    * @param encodeCid function to encode a cid to protobuf\n     * @return protobuf wire format contract instance\n     */\n-  def encodeContractInstance[Cid <: Value.ContractId](\n-      encodeVal: EncodeVal[Cid],\n+  def encodeContractInstance[Cid]("
  },
  {
    "id" : "1bc65965-7de3-4798-b153-e4b7e4c6d6f6",
    "prId" : 4414,
    "comments" : [
      {
        "id" : "6ddfd4c2-1ad3-470b-aa34-2d2c7714d28f",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "At this point there is no need for having the type parameter `Val` anymore.",
        "createdAt" : "2020-02-06T09:53:15Z",
        "updatedAt" : "2020-02-06T12:50:58Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "68fabf2c-8a26-48f2-89a3-76dff9a008d3",
        "parentId" : "6ddfd4c2-1ad3-470b-aa34-2d2c7714d28f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "good catch ! ",
        "createdAt" : "2020-02-06T10:15:26Z",
        "updatedAt" : "2020-02-06T12:50:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "80a244c86d38bb166724924247e7584b9875595d",
    "line" : null,
    "diffHunk" : "@@ -36,9 +38,9 @@ object TransactionCoder {\n     * @tparam Val value type\n     * @return protobuf wire format contract instance\n     */\n-  def encodeContractInstance[Val](\n+  def encodeContractInstance[Val <: Value.VersionedValue[Value.ContractId]]("
  },
  {
    "id" : "c747941a-12e2-4390-a54b-d17c0fb6b753",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "c8ae2c51-2869-4666-9307-1baff44fd719",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "[Cosmetic] \r\nI found this pattern matching with booleans a bit confusing. \r\nI woul prefer something like \r\n```\r\n  _ <- e.key match {\r\n            case Some(KeyWithMaintainers(k, maintainers))\r\n                if !(transactionVersion precedes minContractKeyInExercise) =>\r\n              if ((transactionVersion precedes minMaintainersInExercise) && maintainers.nonEmpty)\r\n                Left(EncodeError(transactionVersion, isTooOldFor = \"maintainers in NodeExercises\"))\r\n              else\r\n                encodeVal(k).map { encodedKey =>\r\n                  exBuilder.setContractKey(encodedKey._2)\r\n                  exBuilder.addAllKeyMaintainers(maintainers.toSet[String].asJava)\r\n                  ()\r\n                }\r\n            case _ =>\r\n              Right(())\r\n          }\r\n```",
        "createdAt" : "2020-01-15T10:14:15Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7f5234a-876f-4578-9e15-3484c644f237",
        "parentId" : "c8ae2c51-2869-4666-9307-1baff44fd719",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "I also messed up the logic here. I also changed the style now but I'm ambivalent to that.",
        "createdAt" : "2020-01-15T11:06:28Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : null,
    "diffHunk" : "@@ -193,13 +194,19 @@ object TransactionCoder {\n                 s\"Trying to encode transaction of version $transactionVersion, which requires the exercise return value, but did not get exercise return value in node.\"))\n             case (_, true) => Right(())\n           }\n-          _ <- (e.key, transactionVersion precedes minContractKeyInExercise) match {\n-            case (Some(k), false) =>\n+          _ <- (\n+            e.key,\n+            transactionVersion precedes minContractKeyInExercise,\n+            transactionVersion precedes minMaintainersInExercise) match {\n+            case (Some(KeyWithMaintainers(_, maintainers)), _, true) if maintainers.nonEmpty =>\n+              Left(EncodeError(transactionVersion, isTooOldFor = \"maintainers in NodeExercises\"))\n+            case (Some(KeyWithMaintainers(k, maintainers)), false, _) =>\n               encodeVal(k).map { encodedKey =>\n                 exBuilder.setContractKey(encodedKey._2)\n+                exBuilder.addAllKeyMaintainers(maintainers.toSet[String].asJava)\n                 ()\n               }\n-            case (None, _) | (Some(_), true) =>\n+            case (None, _, _) | (Some(_), true, _) =>\n               Right(())"
  },
  {
    "id" : "532e4175-8fb6-4989-ae3f-c15e786f16cc",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "3e55697a-ee50-486a-b343-87de6b128305",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-01-15T10:14:56Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : 45,
    "diffHunk" : "@@ -232,9 +239,9 @@ object TransactionCoder {\n       keyWithMaintainers: TransactionOuterClass.KeyWithMaintainers)\n     : Either[DecodeError, KeyWithMaintainers[Val]] =\n     for {\n-      mainteners <- toPartySet(keyWithMaintainers.getMaintainersList)"
  },
  {
    "id" : "ced739e1-01ab-4eab-aeed-842f479d09f7",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "8042882a-83e3-4aa2-ae4d-fb7ae0402bae",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n          _ <- Either.cond(\r\n            (txVersion precedes minMaintainersInExercise) && maintainers.nonEmpty,\r\n            DecodeError(txVersion, isTooOldFor = \"NodeExercises maintainers\")\r\n            ()\r\n          )\r\n```",
        "createdAt" : "2020-01-15T10:18:06Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : null,
    "diffHunk" : "@@ -316,6 +324,10 @@ object TransactionCoder {\n             else\n               decodeVal(protoExe.getContractKey).map(Some(_))\n           } else Right(None)\n+          maintainers <- toPartySet(protoExe.getKeyMaintainersList)\n+          _ <- if ((txVersion precedes minMaintainersInExercise) && maintainers.nonEmpty)"
  },
  {
    "id" : "721e4da3-9119-40fa-b888-08b2beae6ae5",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "f445706a-3002-4bcc-b82c-1e626193cae9",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-15T10:18:16Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : null,
    "diffHunk" : "@@ -316,6 +324,10 @@ object TransactionCoder {\n             else\n               decodeVal(protoExe.getContractKey).map(Some(_))\n           } else Right(None)\n+          maintainers <- toPartySet(protoExe.getKeyMaintainersList)\n+          _ <- if ((txVersion precedes minMaintainersInExercise) && maintainers.nonEmpty)\n+            Left(DecodeError(txVersion, isTooOldFor = \"NodeExercises maintainers\"))"
  },
  {
    "id" : "83006c47-6d28-49c1-9da5-73d4f4fcc1ae",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "2d323a8a-a34b-421e-a739-0315ddb5adad",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-15T10:18:29Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : null,
    "diffHunk" : "@@ -316,6 +324,10 @@ object TransactionCoder {\n             else\n               decodeVal(protoExe.getContractKey).map(Some(_))\n           } else Right(None)\n+          maintainers <- toPartySet(protoExe.getKeyMaintainersList)\n+          _ <- if ((txVersion precedes minMaintainersInExercise) && maintainers.nonEmpty)\n+            Left(DecodeError(txVersion, isTooOldFor = \"NodeExercises maintainers\"))\n+          else Right(())"
  },
  {
    "id" : "b857673f-595c-4561-929b-062c98dac360",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "8189791d-b4a8-438f-99f3-f835b86b5a47",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-15T10:18:38Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : 87,
    "diffHunk" : "@@ -316,6 +324,10 @@ object TransactionCoder {\n             else\n               decodeVal(protoExe.getContractKey).map(Some(_))\n           } else Right(None)\n+          maintainers <- toPartySet(protoExe.getKeyMaintainersList)\n+          _ <- if ((txVersion precedes minMaintainersInExercise) && maintainers.nonEmpty)\n+            Left(DecodeError(txVersion, isTooOldFor = \"NodeExercises maintainers\"))\n+          else Right(())\n "
  },
  {
    "id" : "dd9cc8bb-bdc6-45e4-8286-0d7d7387e3d2",
    "prId" : 766,
    "comments" : [
      {
        "id" : "4f9c91f7-1139-4034-b2bd-d71351b1d3d1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Did you intend to clear the controllers from `exBuilder` instead of this noop statement?",
        "createdAt" : "2019-04-29T13:46:48Z",
        "updatedAt" : "2019-05-03T13:49:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8fa5f1a7-1069-4412-88fa-6ad27d0cb078",
        "parentId" : "4f9c91f7-1139-4034-b2bd-d71351b1d3d1",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-29T13:58:58Z",
        "updatedAt" : "2019-05-03T13:49:25Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "296332ca23791717faee6e5d5787d0262be907ad",
    "line" : null,
    "diffHunk" : "@@ -169,6 +169,10 @@ object TransactionCoder {\n                 .addAllSignatories(e.signatories.map(_.underlyingString).asJava)\n                 .addAllStakeholders(e.stakeholders.map(_.underlyingString).asJava)\n \n+            if (transactionVersion precedes minNoControllers) {\n+              nodeBuilder.setExercise(exBuilder).build()"
  },
  {
    "id" : "44a81a71-3535-4571-9b2f-ea37cda19686",
    "prId" : 766,
    "comments" : [
      {
        "id" : "71515dcf-64f2-4715-8606-5e2581147111",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n              Left(DecodeError(s\"$txVersion is too new to have exercise controllers\"))\r\n```",
        "createdAt" : "2019-04-29T13:47:34Z",
        "updatedAt" : "2019-05-03T13:49:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fad87995-499f-47e5-a40a-c4a8f0d94fa8",
        "parentId" : "71515dcf-64f2-4715-8606-5e2581147111",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I would also phrase it more like: `As of version $txVersion, exercise controllers must be empty`.",
        "createdAt" : "2019-04-29T13:48:32Z",
        "updatedAt" : "2019-05-03T13:49:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fe69a941-d2eb-45f5-b8b8-560eb464a8f9",
        "parentId" : "71515dcf-64f2-4715-8606-5e2581147111",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-04-29T14:00:08Z",
        "updatedAt" : "2019-05-03T13:49:25Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "296332ca23791717faee6e5d5787d0262be907ad",
    "line" : null,
    "diffHunk" : "@@ -274,10 +278,19 @@ object TransactionCoder {\n           children <- childrenOrError\n           cv <- decodeVal(protoExe.getChosenValue)\n           templateId <- ValueCoder.decodeIdentifier(protoExe.getTemplateId)\n-          controllers <- toPartySet(protoExe.getControllersList)\n+          actingParties <- toPartySet(protoExe.getActorsList)\n+          encodedControllers <- toPartySet(protoExe.getControllersList)\n+          controllers <- if (!(txVersion precedes minNoControllers)) {\n+            if (encodedControllers.isEmpty) {\n+              Right(actingParties)\n+            } else {\n+              Left(DecodeError(s\"$txVersion is to new to have exercise controllers\"))"
  },
  {
    "id" : "c45f9e81-761c-4616-9d3e-5a87f14dc906",
    "prId" : 766,
    "comments" : [
      {
        "id" : "72be3f1f-25d4-465a-b347-ee6280827a63",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n          decodedControllers <- toPartySet(protoExe.getControllersList)\r\n```",
        "createdAt" : "2019-05-02T16:44:47Z",
        "updatedAt" : "2019-05-03T13:49:25Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "296332ca23791717faee6e5d5787d0262be907ad",
    "line" : 57,
    "diffHunk" : "@@ -274,10 +284,19 @@ object TransactionCoder {\n           children <- childrenOrError\n           cv <- decodeVal(protoExe.getChosenValue)\n           templateId <- ValueCoder.decodeIdentifier(protoExe.getTemplateId)\n-          controllers <- toPartySet(protoExe.getControllersList)\n+          actingParties <- toPartySet(protoExe.getActorsList)\n+          encodedControllers <- toPartySet(protoExe.getControllersList)"
  },
  {
    "id" : "50611a4e-5a0b-433d-b63d-1f8586669b41",
    "prId" : 766,
    "comments" : [
      {
        "id" : "d0638e97-9ca6-4b52-8e72-9271e5bd0f1e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@bitonic As you say,\r\n\r\n> we can't [delete the controllers field] if we keep the validation separate.\r\n\r\nI want to remove the possibility that the field is used for anything but that separate validation, then, rather than leaving the separate `controllers` field open to \"interpretation\", so to speak; depending on how we report validation failures here, that can be as simple as\r\n\r\n```suggestion\r\n            Right(decodedControllers != actingParties)\r\n```\r\n\r\nand the other case on line 291 is `Right(false)`.",
        "createdAt" : "2019-05-02T16:49:54Z",
        "updatedAt" : "2019-05-03T13:49:25Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "296332ca23791717faee6e5d5787d0262be907ad",
    "line" : 65,
    "diffHunk" : "@@ -274,10 +284,19 @@ object TransactionCoder {\n           children <- childrenOrError\n           cv <- decodeVal(protoExe.getChosenValue)\n           templateId <- ValueCoder.decodeIdentifier(protoExe.getTemplateId)\n-          controllers <- toPartySet(protoExe.getControllersList)\n+          actingParties <- toPartySet(protoExe.getActorsList)\n+          encodedControllers <- toPartySet(protoExe.getControllersList)\n+          controllers <- if (!(txVersion precedes minNoControllers)) {\n+            if (encodedControllers.isEmpty) {\n+              Right(actingParties)\n+            } else {\n+              Left(DecodeError(s\"As of version $txVersion, exercise controllers must be empty.\"))\n+            }\n+          } else {\n+            Right(encodedControllers)"
  },
  {
    "id" : "f53207df-abaa-4526-87e2-5dc1a497a666",
    "prId" : 583,
    "comments" : [
      {
        "id" : "48555647-f49c-46da-b9ca-81a3d88c0063",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@bitonic: Can `exerciseResult` and `chosenValue` have different versions (e.g. in the future by returning a value defined in an older DAR)? And if yes, which version should be used for encoding the templateId?",
        "createdAt" : "2019-04-18T07:34:00Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1c33a64a-c9d3-4c5f-9b8a-3e685659ad4a",
        "parentId" : "48555647-f49c-46da-b9ca-81a3d88c0063",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> Can exerciseResult and chosenValue have different versions (e.g. in the future by returning a value defined in an older DAR)?\r\n\r\nYes, by design.\r\n\r\n> And if yes, which version should be used for encoding the templateId?\r\n\r\n`chosen_value`'s, as formally specified.",
        "createdAt" : "2019-04-25T15:54:47Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c34934de-fa65-47b4-9d59-489abb336ca9",
        "parentId" : "48555647-f49c-46da-b9ca-81a3d88c0063",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "So there shouldn't be anything to do as this the version of `exerciseResult` is ignored - correct?",
        "createdAt" : "2019-04-26T13:03:52Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -151,27 +151,31 @@ object TransactionCoder {\n         }\n \n       case e: NodeExercises[Nid, Cid, Val] =>\n-        encodeVal(e.chosenValue).map {\n-          case (vversion, arg) =>\n-            val exBuilder =\n-              TransactionOuterClass.NodeExercise\n-                .newBuilder()\n-                .setChoice(e.choiceId)\n-                .setTemplateId(ValueCoder.encodeIdentifier(e.templateId, Some(vversion))._2)\n-                .setChosenValue(arg)\n-                .setConsuming(e.consuming)\n-                .setContractIdOrStruct(encodeCid, transactionVersion, e.targetCoid)(\n-                  _.setContractId(_),\n-                  _.setContractIdStruct(_))\n-                .addAllActors(e.actingParties.map(_.underlyingString).asJava)\n-                .addAllChildren(e.children.map(encodeNid).toList.asJava)\n-                .addAllControllers(e.controllers.map(_.underlyingString).asJava)\n-                .addAllSignatories(e.signatories.map(_.underlyingString).asJava)\n-                .addAllStakeholders(e.stakeholders.map(_.underlyingString).asJava)\n+        for {\n+          retValue <- encodeVal(e.exerciseResult)\n+          argValue <- encodeVal(e.chosenValue)\n+        } yield {\n+          val (_, exerciseResult) = retValue"
  },
  {
    "id" : "9824eb0a-dd9b-4395-8cf6-503bbf1fc92c",
    "prId" : 583,
    "comments" : [
      {
        "id" : "14320fd4-96f2-471a-be5b-47cba0aef91f",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Add `minExerciseReturnValue` to `TransactionVersion` (see other examples), and if `transactionVersion precedes minExerciseReturnValue`, require `getReturnValue` to be absent (null or placeholder), otherwise require it to be present. See other `precedes` references for examples.",
        "createdAt" : "2019-04-25T15:56:46Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73f19946-ab5e-4925-bfed-38f0cfbf45c7",
        "parentId" : "14320fd4-96f2-471a-be5b-47cba0aef91f",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done (I think)",
        "createdAt" : "2019-04-29T13:00:18Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dba29425-682f-450b-a32d-a5e3d22b280b",
        "parentId" : "14320fd4-96f2-471a-be5b-47cba0aef91f",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "No, this unconditionally rejects transactions before v6; you only reject in such cases if `protoExe.getReturnValue` is neither null nor the placeholder.",
        "createdAt" : "2019-04-30T13:16:52Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -278,6 +282,7 @@ object TransactionCoder {\n           signatories <- toPartySet(protoExe.getSignatoriesList)\n           stakeholders <- toPartySet(protoExe.getStakeholdersList)\n           actingParties <- toPartySet(protoExe.getActorsList)\n+          rv <- decodeVal(protoExe.getReturnValue)"
  },
  {
    "id" : "eae631cb-69d6-4890-9523-d72e98cbcde5",
    "prId" : 583,
    "comments" : [
      {
        "id" : "3d080dfd-fd3f-4265-bc75-fde9768f850e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "We similarly guard with `transactionVersion precedes` in encoding.",
        "createdAt" : "2019-04-25T16:33:52Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "84d5f751-6f71-4e2e-b838-a19ca2d04842",
        "parentId" : "3d080dfd-fd3f-4265-bc75-fde9768f850e",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-30T07:52:23Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -151,27 +151,31 @@ object TransactionCoder {\n         }\n \n       case e: NodeExercises[Nid, Cid, Val] =>\n-        encodeVal(e.chosenValue).map {\n-          case (vversion, arg) =>\n-            val exBuilder =\n-              TransactionOuterClass.NodeExercise\n-                .newBuilder()\n-                .setChoice(e.choiceId)\n-                .setTemplateId(ValueCoder.encodeIdentifier(e.templateId, Some(vversion))._2)\n-                .setChosenValue(arg)\n-                .setConsuming(e.consuming)\n-                .setContractIdOrStruct(encodeCid, transactionVersion, e.targetCoid)(\n-                  _.setContractId(_),\n-                  _.setContractIdStruct(_))\n-                .addAllActors(e.actingParties.map(_.underlyingString).asJava)\n-                .addAllChildren(e.children.map(encodeNid).toList.asJava)\n-                .addAllControllers(e.controllers.map(_.underlyingString).asJava)\n-                .addAllSignatories(e.signatories.map(_.underlyingString).asJava)\n-                .addAllStakeholders(e.stakeholders.map(_.underlyingString).asJava)\n+        for {\n+          retValue <- encodeVal(e.exerciseResult)"
  },
  {
    "id" : "555189b8-4f21-49ac-b1df-1270e0942f15",
    "prId" : 583,
    "comments" : [
      {
        "id" : "6cf0eef2-2f61-438b-b7ea-418382db9554",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "I'm pretty sure that's wrong -- this makes it impossible to serialize transactions of version < 6. The right thing to do would be to check that if the transaction precedes `minExerciseResult` `exerciseResult` is `None`, and otherwise that it is `Some`",
        "createdAt" : "2019-04-30T07:47:19Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "16cc4539-051f-45ac-a557-040179b6d201",
        "parentId" : "6cf0eef2-2f61-438b-b7ea-418382db9554",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-30T10:54:50Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -151,27 +151,40 @@ object TransactionCoder {\n         }\n \n       case e: NodeExercises[Nid, Cid, Val] =>\n-        encodeVal(e.chosenValue).map {\n-          case (vversion, arg) =>\n+        if (transactionVersion precedes minExerciseResult)\n+          Left(EncodeError(transactionVersion, isTooOldFor = \"NodeExercise transaction nodes\"))"
  },
  {
    "id" : "50b38ae8-8be3-48c1-82ea-621998744c37",
    "prId" : 583,
    "comments" : [
      {
        "id" : "28b8b9b6-4c0a-4e18-a46b-fa6dd7f0c3b4",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n          import scalaz.std.option._ // at top of file\r\n          retValue <- e.exerciseResult traverseU encodeVal\r\n          // and delete the map/getOrElse\r\n```",
        "createdAt" : "2019-04-30T13:05:00Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "143d75e4-2b42-4d35-ac6e-fd897d884690",
        "parentId" : "28b8b9b6-4c0a-4e18-a46b-fa6dd7f0c3b4",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "More of an organizational problem, but: here we unconditionally fail if encoding `exerciseResult` fails. But as described in another comment, we don't care whether encoding `exerciseResult` succeeds or not if  `transactionVersion precedes ...`. So this probably needs to move closer to the point of use.",
        "createdAt" : "2019-04-30T13:45:36Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -151,27 +151,41 @@ object TransactionCoder {\n         }\n \n       case e: NodeExercises[Nid, Cid, Val] =>\n-        encodeVal(e.chosenValue).map {\n-          case (vversion, arg) =>\n-            val exBuilder =\n-              TransactionOuterClass.NodeExercise\n-                .newBuilder()\n-                .setChoice(e.choiceId)\n-                .setTemplateId(ValueCoder.encodeIdentifier(e.templateId, Some(vversion))._2)\n-                .setChosenValue(arg)\n-                .setConsuming(e.consuming)\n-                .setContractIdOrStruct(encodeCid, transactionVersion, e.targetCoid)(\n-                  _.setContractId(_),\n-                  _.setContractIdStruct(_))\n-                .addAllActors(e.actingParties.map(_.underlyingString).asJava)\n-                .addAllChildren(e.children.map(encodeNid).toList.asJava)\n-                .addAllControllers(e.controllers.map(_.underlyingString).asJava)\n-                .addAllSignatories(e.signatories.map(_.underlyingString).asJava)\n-                .addAllStakeholders(e.stakeholders.map(_.underlyingString).asJava)\n+        for {\n+          argValue <- encodeVal(e.chosenValue)\n+          retValue <- e.exerciseResult"
  },
  {
    "id" : "c7663930-bb85-43b5-9ee0-674715da1a9c",
    "prId" : 583,
    "comments" : [
      {
        "id" : "7ea2a0df-4391-4011-8fab-7f89cc692c79",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "We're going with @bitonic's plan elsewhere so when precedes, ignore `retValue`, otherwise fold it (do not use `get` or `nonEmpty`). Also this expression has to occur as the result of the whole containing block; you're just dropping the `Left` or `Right` on the floor right now.",
        "createdAt" : "2019-04-30T13:14:18Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : 74,
    "diffHunk" : "@@ -151,27 +151,41 @@ object TransactionCoder {\n         }\n \n       case e: NodeExercises[Nid, Cid, Val] =>\n-        encodeVal(e.chosenValue).map {\n-          case (vversion, arg) =>\n-            val exBuilder =\n-              TransactionOuterClass.NodeExercise\n-                .newBuilder()\n-                .setChoice(e.choiceId)\n-                .setTemplateId(ValueCoder.encodeIdentifier(e.templateId, Some(vversion))._2)\n-                .setChosenValue(arg)\n-                .setConsuming(e.consuming)\n-                .setContractIdOrStruct(encodeCid, transactionVersion, e.targetCoid)(\n-                  _.setContractId(_),\n-                  _.setContractIdStruct(_))\n-                .addAllActors(e.actingParties.map(_.underlyingString).asJava)\n-                .addAllChildren(e.children.map(encodeNid).toList.asJava)\n-                .addAllControllers(e.controllers.map(_.underlyingString).asJava)\n-                .addAllSignatories(e.signatories.map(_.underlyingString).asJava)\n-                .addAllStakeholders(e.stakeholders.map(_.underlyingString).asJava)\n+        for {\n+          argValue <- encodeVal(e.chosenValue)\n+          retValue <- e.exerciseResult\n+            .map(er => encodeVal(er).map(Some(_)))\n+            .getOrElse(\n+              Right[EncodeError, Option[(ValueVersion, ValueOuterClass.VersionedValue)]](None))\n+        } yield {\n+          val (vversion, arg) = argValue\n+          val exBuilder =\n+            TransactionOuterClass.NodeExercise\n+              .newBuilder()\n+              .setChoice(e.choiceId)\n+              .setTemplateId(\n+                ValueCoder.encodeIdentifier(e.templateId, Some(vversion))._2\n+              )\n+              .setChosenValue(arg)\n+              .setConsuming(e.consuming)\n+              .setContractIdOrStruct(encodeCid, transactionVersion, e.targetCoid)(\n+                _.setContractId(_),\n+                _.setContractIdStruct(_)\n+              )\n+              .addAllActors(e.actingParties.map(_.underlyingString).asJava)\n+              .addAllChildren(e.children.map(encodeNid).toList.asJava)\n+              .addAllControllers(e.controllers.map(_.underlyingString).asJava)\n+              .addAllSignatories(e.signatories.map(_.underlyingString).asJava)\n+              .addAllStakeholders(e.stakeholders.map(_.underlyingString).asJava)\n+          if (transactionVersion precedes minExerciseResult) {\n+            if (e.exerciseResult.nonEmpty)\n+              Left(EncodeError(transactionVersion, isTooOldFor = \"NodeExercise result value\"))\n+            else\n+              Right(nodeBuilder.setExercise(exBuilder.setReturnValue(retValue.get._2)))\n+          }"
  },
  {
    "id" : "8d09212a-07c2-46b3-8465-5a37bafc0b34",
    "prId" : 583,
    "comments" : [
      {
        "id" : "cae393a0-4fec-496b-98f5-0c3476273629",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "This will succeed if txVersion >= 6 and return_value, a required field, is absent.",
        "createdAt" : "2019-05-03T15:17:22Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f9e58a16-e4a7-4245-aadf-66cdea2be218",
        "parentId" : "cae393a0-4fec-496b-98f5-0c3476273629",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I pushed 08badbc2986b2e74a3acb7b5528ab0ae2268b036 to solve this.",
        "createdAt" : "2019-05-03T16:56:07Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -267,6 +279,9 @@ object TransactionCoder {\n           .map(_.toImmArray)\n \n         for {\n+          rv <- if (!protoExe.hasReturnValue || (txVersion precedes minExerciseResult))\n+            Right(None)\n+          else decodeVal(protoExe.getReturnValue).map(Some(_))"
  }
]