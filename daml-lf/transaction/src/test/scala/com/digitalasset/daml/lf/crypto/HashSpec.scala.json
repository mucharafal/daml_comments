[
  {
    "id" : "d90722b3-a0d9-4c88-a3e8-237db90532ca",
    "prId" : 5526,
    "comments" : [
      {
        "id" : "becf9f7c-d685-4938-bd31-4e43344f1a5d",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "not clear from the context where it is being used and why it is needed.",
        "createdAt" : "2020-04-10T15:21:42Z",
        "updatedAt" : "2020-04-24T20:58:40Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e374135e-624f-428f-bf97-6b0224bd9b43",
        "parentId" : "becf9f7c-d685-4938-bd31-4e43344f1a5d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> not clear from the context where it is being used\r\n\r\nThe scope of the annotation is the following definition, which is one line long.\r\n\r\n> and why it is needed.\r\n\r\nThe warning is a dead code warning. How many lines of comments should I devote to detailing it?",
        "createdAt" : "2020-04-10T15:32:26Z",
        "updatedAt" : "2020-04-24T20:58:40Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "94de7efb-8d77-41e2-94c3-52baada80f4f",
        "parentId" : "becf9f7c-d685-4938-bd31-4e43344f1a5d",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I did not mean the annotation... I meant it is not clear why we need `scalaz.Order[Nothing]`",
        "createdAt" : "2020-04-13T16:38:23Z",
        "updatedAt" : "2020-04-24T20:58:40Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0960420d-a5a8-4a1f-a6a2-66e4e4f0c2cc",
        "parentId" : "becf9f7c-d685-4938-bd31-4e43344f1a5d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Well, the short version is, \"the code will not compile without it\".\r\n\r\nThe long version: this sort of thing happens in systems with subtyping. Let's say that you want to define list comparison inductively, i.e. `[A] Order[A] => Order[List[A]]`. Then, let's say that you want a property of your ordering to be that \"if all of `xs...` and `ys...` expressions unify to a comparable type, then `List(xs...) ?|? List(ys...)` (where `?|?` is comparison) is well-typed.\"\r\n\r\nIf `xs...` and `ys...` are empty, then they unify to `Nothing`. And it is perfectly sensible to expect `List() ?|? List()` to be well-typed, even though the only reasonable type of the arguments is `List[Nothing]`. (`List[Any]` is *not* a reasonable choice, because it literally fits nothing but itself, whereas `List[Nothing]` fits anything.) But the only way to get `List[Nothing]` to have an `Order` is, by reading our induction backwards, to have an `Order[Nothing]`.\r\n\r\nIn our data model, the spiritual equivalent of \"empty list\", \"value with no contract IDs\", is quite common, so it is quite likely for the unified contract ID type to be `Nothing`.\r\n\r\nThe good news is, unlike the other `Order` instance I define in this file, the `Order[Nothing]` is guaranteed to be correct as declared; the way we interpret the principle of explosion here is \"if an argument's type is `Nothing` then literally all implementations are correct\".\r\n\r\nI seriously considered several times defining a context unifier for `IntroCtx` to prove implicitly those cases that would not need an `Order`, but decided that this was not worth the maintenance (or code review) burden; thus, it is simply defined as an alias for `Order`, causing this instance to be needed.",
        "createdAt" : "2020-04-13T19:11:13Z",
        "updatedAt" : "2020-04-24T20:58:40Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1355a2c792b820752b3f4a7fe7b384b7ef174c",
    "line" : 4,
    "diffHunk" : "@@ -18,6 +18,9 @@ import scala.language.implicitConversions\n @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n class HashSpec extends WordSpec with Matchers {\n \n+  @com.github.ghik.silencer.silent // dead code. Well, yeah"
  }
]