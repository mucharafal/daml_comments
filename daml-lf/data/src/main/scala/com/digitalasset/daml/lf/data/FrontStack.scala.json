[
  {
    "id" : "97b3fc5c-d3cf-418b-abac-b0a80212430f",
    "prId" : 6960,
    "comments" : [
      {
        "id" : "6b5b2dd1-8606-4b34-96b2-05fb5cc24ae3",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'm not sure that it's helpful to know who wrote this note; if only one person understands this, it won't be merged. `git blame` will tell us if we need it.\r\n\r\n```suggestion\r\n            // NOTE: We maintain the invariant that `head` is never empty.\r\n```",
        "createdAt" : "2020-08-03T11:01:06Z",
        "updatedAt" : "2020-08-03T11:03:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ac3182c2-7224-4336-8105-793dac8f65a9",
        "parentId" : "6b5b2dd1-8606-4b34-96b2-05fb5cc24ae3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-08-03T11:08:01Z",
        "updatedAt" : "2020-08-03T11:08:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10029badc3b30695ea343133f8b90a2a5770ff51",
    "line" : null,
    "diffHunk" : "@@ -76,10 +76,9 @@ final class FrontStack[+A] private (fq: FQ[A], val length: Int) {\n         case FQPrepend(head, tail) =>\n           if (head.length > 1) {\n             Some((head.head, new FrontStack(FQPrepend(head.tail, tail), length - 1)))\n-          } else if (head.length > 0) {\n-            Some((head.head, new FrontStack(tail, length - 1)))\n           } else {\n-            throw new RuntimeException(s\"FrontStack had FQPrepend with non-empty head: $head\")\n+            // NOTE(MH): We maintain the invariant that `head` is never empty."
  },
  {
    "id" : "7bd534c5-0794-4e35-95ac-420e5f6f9b45",
    "prId" : 6960,
    "comments" : [
      {
        "id" : "863ee472-87a4-49d6-8de0-ee05f3993814",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can you add a test case for this?",
        "createdAt" : "2020-08-03T11:01:23Z",
        "updatedAt" : "2020-08-03T11:03:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be90ad66-0b66-45c9-90f0-2b157c966ad1",
        "parentId" : "863ee472-87a4-49d6-8de0-ee05f3993814",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't see how I could test this in the given test structure. `FQPrepend` is a private implementation detail that seems to be unreachable from the tests.",
        "createdAt" : "2020-08-03T11:08:43Z",
        "updatedAt" : "2020-08-03T11:08:43Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "91eb8c3c-cd3f-4e73-810e-aa4eb485d681",
        "parentId" : "863ee472-87a4-49d6-8de0-ee05f3993814",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Fair. ðŸ™‚ ",
        "createdAt" : "2020-08-03T12:11:53Z",
        "updatedAt" : "2020-08-03T12:11:53Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10029badc3b30695ea343133f8b90a2a5770ff51",
    "line" : 21,
    "diffHunk" : "@@ -151,7 +150,11 @@ object FrontStack extends FrontStackInstances {\n   def empty[A]: FrontStack[A] = emptySingleton\n \n   def apply[A](xs: ImmArray[A]): FrontStack[A] =\n-    new FrontStack(FQPrepend(xs, FQEmpty), length = xs.length)\n+    if (xs.length > 0) {\n+      new FrontStack(FQPrepend(xs, FQEmpty), length = xs.length)\n+    } else {\n+      empty"
  },
  {
    "id" : "3837b4c2-962e-48dd-b5dc-8651878b0e9c",
    "prId" : 5493,
    "comments" : [
      {
        "id" : "bd5ef3fe-0d14-4d31-bbf8-aaaadb9db4fb",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "\"Clean up imports\" doesn't.\r\n```suggestion\r\nimport FrontStack.{FQ, FQCons, FQEmpty, FQPrepend}\r\n```",
        "createdAt" : "2020-04-08T14:31:21Z",
        "updatedAt" : "2020-04-08T15:00:44Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "be4c3065-7560-456b-8ed0-e51dbda910dd",
        "parentId" : "bd5ef3fe-0d14-4d31-bbf8-aaaadb9db4fb",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Clearly. I'll fix this and the one in `BackStack`.",
        "createdAt" : "2020-04-08T14:37:49Z",
        "updatedAt" : "2020-04-08T15:00:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "930c6c92ed59962388bc205b255213a2385c9a4d",
    "line" : null,
    "diffHunk" : "@@ -3,11 +3,10 @@\n \n package com.daml.lf.data\n \n-import FrontStack.{FQ, FQCons, FQEmpty, FQPrepend}\n-\n-import scalaz.{Applicative, Equal, Traverse}\n+import com.daml.lf.data.FrontStack.{FQ, FQCons, FQEmpty, FQPrepend}"
  },
  {
    "id" : "e31b3ae0-1685-4608-9698-1c0cf0e04825",
    "prId" : 2053,
    "comments" : [
      {
        "id" : "d628dcfb-bd97-46a9-91db-135d69039671",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Whoever runs into this may appreciate a more telling error message.",
        "createdAt" : "2019-07-12T09:00:07Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1699d1a72a141e994b450b4078470a298e34bab3",
    "line" : null,
    "diffHunk" : "@@ -8,16 +8,31 @@ import FrontStack.{FQ, FQCons, FQEmpty, FQPrepend}\n \n import scalaz.Equal\n \n+import scala.collection.generic.CanBuildFrom\n import scala.collection.mutable\n \n-/** A stackk which allows to cons, prepend, and pop in constant time, and generate an ImmArray in linear time.\n+/** A stack which allows to cons, prepend, and pop in constant time, and generate an ImmArray in linear time.\n   * Very useful when needing to traverse stuff in topological order or similar situations.\n   */\n final class FrontStack[+A] private (fq: FQ[A], len: Int) {\n \n   /** O(1) */\n   def length: Int = len\n \n+  /** O(n) */\n+  @throws[IndexOutOfBoundsException]\n+  def slowApply(ix: Int): A = {\n+    if (ix < 0) throw new IndexOutOfBoundsException(\"ix\")"
  },
  {
    "id" : "70413734-5879-4ba6-aca4-0fdc9ce03163",
    "prId" : 2053,
    "comments" : [
      {
        "id" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Same as above, it's probably worth having a more telling error message.",
        "createdAt" : "2019-07-12T09:00:27Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e109172f-7dfd-4d78-b1b4-3949e3c20683",
        "parentId" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@stefanobaghino-da What do you think of these messages?\r\n\r\n```scala\r\nscala> List(3)(-1)\r\njava.lang.IndexOutOfBoundsException: -1\r\n  at scala.collection.LinearSeqOptimized.apply(LinearSeqOptimized.scala:67)\r\n  at scala.collection.LinearSeqOptimized.apply$(LinearSeqOptimized.scala:65)\r\n  at scala.collection.immutable.List.apply(List.scala:89)\r\n  ... 28 elided\r\n\r\nscala> List(3)(4)\r\njava.lang.IndexOutOfBoundsException: 4\r\n  at scala.collection.LinearSeqOptimized.apply(LinearSeqOptimized.scala:67)\r\n  at scala.collection.LinearSeqOptimized.apply$(LinearSeqOptimized.scala:65)\r\n  at scala.collection.immutable.List.apply(List.scala:89)\r\n  ... 28 elided\r\n```",
        "createdAt" : "2019-07-15T16:14:21Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "103ff158-6c40-4480-abdc-4cdea75a0a57",
        "parentId" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@S11001001 did you mean: `throw new IndexOutOfBoundsException(ix.toString)`\r\nThe index won't be printed out the way it is right now\r\n",
        "createdAt" : "2019-07-15T16:31:21Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dbae6704-8d10-45b2-ac54-d098a8a8f75a",
        "parentId" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "with the current change it will print: `java.lang.IndexOutOfBoundsException: ix`",
        "createdAt" : "2019-07-15T16:31:59Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6e5b0998-2321-44cb-a026-07cb93f368a1",
        "parentId" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@leo-da I'm asking if what List does is good to do here.",
        "createdAt" : "2019-07-15T16:32:23Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e6d8db16-256a-4df9-b439-4f61fdf382be",
        "parentId" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "I understand, but I also think there is a typo. If we just print the invalid index, I think that is perfectly fine. However we don't print the index.",
        "createdAt" : "2019-07-15T16:33:56Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "35d8a251-49f6-42ad-81b1-f187042b5b06",
        "parentId" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@leo-da It's not a typo; I deliberately put \"ix\" there, and I won't put anything else there until everyone who actually cares about what's there has settled on what should be there.",
        "createdAt" : "2019-07-15T16:35:09Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ef4dea49-0944-4bf5-85ea-e05e92716fbe",
        "parentId" : "793d57e0-19c8-41c6-bb58-188ee3025075",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I believe that the index that is being accessed is fine. It's what happens on Scala's `List` and Java's `Array`. At the very least it's familiar. From what I see you fixed it in https://github.com/digital-asset/daml/pull/2053/commits/1699d1a72a141e994b450b4078470a298e34bab3 so LGTM. :slightly_smiling_face: ",
        "createdAt" : "2019-07-15T20:33:35Z",
        "updatedAt" : "2019-07-15T20:33:36Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1699d1a72a141e994b450b4078470a298e34bab3",
    "line" : null,
    "diffHunk" : "@@ -8,16 +8,31 @@ import FrontStack.{FQ, FQCons, FQEmpty, FQPrepend}\n \n import scalaz.Equal\n \n+import scala.collection.generic.CanBuildFrom\n import scala.collection.mutable\n \n-/** A stackk which allows to cons, prepend, and pop in constant time, and generate an ImmArray in linear time.\n+/** A stack which allows to cons, prepend, and pop in constant time, and generate an ImmArray in linear time.\n   * Very useful when needing to traverse stuff in topological order or similar situations.\n   */\n final class FrontStack[+A] private (fq: FQ[A], len: Int) {\n \n   /** O(1) */\n   def length: Int = len\n \n+  /** O(n) */\n+  @throws[IndexOutOfBoundsException]\n+  def slowApply(ix: Int): A = {\n+    if (ix < 0) throw new IndexOutOfBoundsException(\"ix\")\n+    val i = iterator\n+    @tailrec def lp(ix: Int): A =\n+      if (!i.hasNext) throw new IndexOutOfBoundsException(\"ix\")"
  },
  {
    "id" : "f7b77c4e-bfa8-4fff-a1c6-30fe65430933",
    "prId" : 2053,
    "comments" : [
      {
        "id" : "935ebbb7-8322-4f00-a404-72bd8bd198c0",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Curiosity: do you know what's going to happen to `CanBuildFrom` in the upcoming Scala versions? I believe it's on its way out starting from 2.13, right?",
        "createdAt" : "2019-07-12T09:01:22Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c428b651-040b-44cc-ac93-5b329514ba31",
        "parentId" : "935ebbb7-8322-4f00-a404-72bd8bd198c0",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It still has its use cases and accordingly replacements in 2.13, which we would define, in fact they are even high-_er_ kinded; the idea of doing away with the typeclass entirely was never in the cards, practically speaking.",
        "createdAt" : "2019-07-12T16:29:36Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34f6e85e-3de8-4e5d-8d10-af410a034c10",
        "parentId" : "935ebbb7-8322-4f00-a404-72bd8bd198c0",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Since most of your other suggestions are CanBuildFrom related, I'll expand:\r\n\r\nCanBuildFrom was used so ubiquitously to try to avoid having higher-kinded types permeate the library. So it was only natural that when they tried to reduce (not completely eliminate, as I already stated) its usage in 2.13, they ended up with...[ubiquitous higher-kinded types](https://github.com/scala/scala/blob/v2.13.0/src/library/scala/collection/immutable/List.scala#L85-L88). So, many cases that used to use CBF as an implicit-based method to do HK type application without HKs, instead just throw up their hands and directly use HKs. An outcome I'm perfectly satisfied with.\r\n\r\nSo when it comes to those operations that will be HK'd in 2.13, like map, collect, ++, I'm thinking about phasing out breakOut in new code. Not really having a rule against it, because it's still just too useful, but more thinking about making the 2.13 transition easier on us. For example, if we want to fuse some operations, it might be good to try putting them on `iterator` or `view`, terminating with `to`, all of which exist in 2.12 and 2.13 (though the pattern of usage is a little different for `to`).\r\n\r\n2.13 collections have a collection (sorry) of new type...classes to play some different roles of `CanBuildFrom`, like [the `*Factory` types](https://github.com/scala/scala/blob/v2.13.0/src/library/scala/collection/Factory.scala), and, er, [BuildFrom](https://github.com/scala/scala/blob/v2.13.0/src/library/scala/collection/BuildFrom.scala). A rose by any other name is a completely different type, you know. Among these are straightforward replacements for everything we currently define, so I'm not worried about the 2.13 transition for daml.",
        "createdAt" : "2019-07-12T16:51:17Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fcd2031a-35fa-4e44-bde8-8b4707dce13b",
        "parentId" : "935ebbb7-8322-4f00-a404-72bd8bd198c0",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Great, thanks!",
        "createdAt" : "2019-07-15T08:09:23Z",
        "updatedAt" : "2019-07-15T17:48:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1699d1a72a141e994b450b4078470a298e34bab3",
    "line" : 37,
    "diffHunk" : "@@ -129,6 +144,17 @@ object FrontStack {\n \n   def unapply[T](xs: FrontStack[T]): Boolean = xs.isEmpty\n \n+  private[data] final class FSCanBuildFrom[A]"
  },
  {
    "id" : "34adda1c-b59a-4a06-90fb-8ca5a57f156c",
    "prId" : 1641,
    "comments" : [
      {
        "id" : "bf3e85f9-51a0-4d24-a541-9e924448be82",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "we need the same fix for BackStack ",
        "createdAt" : "2019-06-13T14:00:34Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9f3d9af4-af4c-4329-9c17-43144c15f0f3",
        "parentId" : "bf3e85f9-51a0-4d24-a541-9e924448be82",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We need tests for that as well. ",
        "createdAt" : "2019-06-13T14:02:53Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bd3c01aa-3bb9-4d2b-bfd8-8d12b6ca6ed4",
        "parentId" : "bf3e85f9-51a0-4d24-a541-9e924448be82",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yes, there are no tests at all yet for FrontStack and BackStack, at least as far as I can tell.",
        "createdAt" : "2019-06-13T15:24:04Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a79c882e-1519-429b-abb4-db8d63e61e66",
        "parentId" : "bf3e85f9-51a0-4d24-a541-9e924448be82",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@remyhaemmerle-da: if you want to add tests, please feel free to take over the PR.",
        "createdAt" : "2019-06-13T15:25:40Z",
        "updatedAt" : "2019-06-13T17:57:10Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cffe9b54d6989c9b9f1f9dbef08effcb0f43169a",
    "line" : 5,
    "diffHunk" : "@@ -109,6 +109,8 @@ final class FrontStack[+A] private (fq: FQ[A], len: Int) {\n     case _ => false\n   }\n \n+  override def hashCode(): Int = toImmArray.hashCode()\n+"
  }
]