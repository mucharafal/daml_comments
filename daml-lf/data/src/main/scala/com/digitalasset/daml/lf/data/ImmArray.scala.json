[
  {
    "id" : "f69635ab-6ba8-4d8f-80ea-4c8935cbc322",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "d26ccc8e-615c-4752-bd56-1f47ac52cee4",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Because ImmArray array is immutable there is no point in calling `this(0)` each time this function is called. Same story for other `lazy` updates in this class",
        "createdAt" : "2020-01-06T03:04:26Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2cc604f2-84f5-4e63-84c3-4a14519f1444",
        "parentId" : "d26ccc8e-615c-4752-bd56-1f47ac52cee4",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Same story here. It is not necessary to use extra memory to cache an O(1) operation.\r\nNote that Scala immutable collections have `head`, `tail`, `isEmpty` and `nonEmpty`  defined as `def`.",
        "createdAt" : "2020-01-06T08:29:09Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -87,13 +87,13 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(1), crashes on empty list */\n-  def head: A = this(0)\n+  lazy val head: A = this(0)"
  },
  {
    "id" : "f64a878d-7867-489e-9892-179921e4d83e",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "a529adec-1348-42b9-93e1-6661fba8e7b0",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "lifting is not very efficient here, it creates too many useless objects in the process",
        "createdAt" : "2020-01-06T03:06:22Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 8,
    "diffHunk" : "@@ -259,10 +262,8 @@ final class ImmArray[+A] private (\n     val builder = ImmArray.newBuilder[B]\n     var i = 0\n     while (i < len) {\n-      f.lift(uncheckedGet(i)) match {\n-        case None => ()\n-        case Some(x) => builder += x\n-      }\n+      val a = uncheckedGet(i)"
  },
  {
    "id" : "d98b19e2-8584-472e-a781-e8478f68dd1d",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "d9dd1fda-ac70-46ff-8566-b9e4d22feb34",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "looks not as nice as original way, but much quicker",
        "createdAt" : "2020-01-06T03:06:50Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "74075657-676f-4fcf-84a9-0fd5199688b5",
        "parentId" : "d9dd1fda-ac70-46ff-8566-b9e4d22feb34",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Not a big deal, but I would prefer a tail recursive way. something like : \r\n\r\n```\r\ndef find(p: A => Boolean): Option[A] = {\r\n  @tailrec \r\n  go(i: Int): Option[A] = \r\n    if (i < len) {\r\n       val e = uncheckedGet(i)\r\n       if (p(e)) Some(e)\r\n       else go(i+1)\r\n    } \r\n    else None \r\n  go(0)\r\n``` ",
        "createdAt" : "2020-01-06T15:32:10Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9c2b87b8-adc0-446a-a06e-67e277f9d391",
        "parentId" : "d9dd1fda-ac70-46ff-8566-b9e4d22feb34",
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "ScalaMeter showed me the following results (tested with ImmArray of 1m entries):\r\n1. The original code\r\nParameters(number of iterations -> 150000000): 8.776301 ms\r\n2. My modification\r\nParameters(number of iterations -> 150000000): 3.860562 ms\r\n3. Your proposed solution\r\nParameters(number of iterations -> 150000000): 3.972929 ms\r\n\r\nYour proposed solution is similar-ish performance, on my next benchmark run it was actually quicker than my solution. \r\nThank you for suggestion, I'll commit it",
        "createdAt" : "2020-01-07T22:36:27Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -289,13 +290,16 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(n) */\n-  def find(f: A => Boolean): Option[A] =\n-    indices collectFirst (Function unlift { i =>\n+  def find(f: A => Boolean): Option[A] = {\n+    var i = 0\n+    var found: Option[A] = None\n+    while (i < len && found.isEmpty) {"
  },
  {
    "id" : "3375ba16-7df3-4c50-aef8-aec8e79caf29",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "9433788e-cba9-4eac-a40c-f2a0c0536915",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "There is no point to use extra memory to cache O(1) operation.",
        "createdAt" : "2020-01-06T08:20:54Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -72,7 +72,7 @@ final class ImmArray[+A] private (\n   private def uncheckedGet(idx: Int): A = array(start + idx)\n \n   /** O(1) */\n-  def length: Int = len\n+  val length: Int = len"
  },
  {
    "id" : "d91e5c85-1cd1-4356-ae82-4a4cbb372c4f",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "7b0c3253-bf50-4132-be63-e48c3c620924",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "reverse is very rarely called. We probably do not want to use extra memory to cache this result. \r\nNote that reverse is scala immutable collection is also defined as `def`",
        "createdAt" : "2020-01-06T08:30:29Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "084ad9d2-dc6b-4c29-b15b-feff63c0c019",
        "parentId" : "7b0c3253-bf50-4132-be63-e48c3c620924",
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "agreed",
        "createdAt" : "2020-01-07T21:05:57Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -156,12 +156,15 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(n) */\n-  def reverse: ImmArray[A] = {\n-    val newArray: mutable.ArraySeq[A] = new mutable.ArraySeq(len)\n-    for (i <- indices) {\n-      newArray(i) = array(start + len - (i + 1))\n+  lazy val reverse: ImmArray[A] = {"
  },
  {
    "id" : "1a7910c8-327c-4fae-a187-07fab36468f3",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "f00367ae-61c0-4d27-868f-014fd2a3aef3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def nonEmpty: Boolean = len != 0\r\n```",
        "createdAt" : "2020-01-06T08:31:30Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -219,10 +222,10 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(1) */\n-  def isEmpty: Boolean = len == 0\n+  lazy val isEmpty: Boolean = len == 0\n \n   /** O(1) */\n-  def nonEmpty: Boolean = len != 0\n+  lazy val nonEmpty: Boolean = len != 0"
  },
  {
    "id" : "b6a723a7-8483-4271-920e-6d0c1f15a64d",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "05d86ed2-a856-43d2-be06-aa7f6be2f129",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def isEmpty: Boolean = len == 0\r\n```",
        "createdAt" : "2020-01-06T08:31:40Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -219,10 +222,10 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(1) */\n-  def isEmpty: Boolean = len == 0\n+  lazy val isEmpty: Boolean = len == 0"
  },
  {
    "id" : "cfc448f8-6b11-496a-96f7-33dff37a9d8e",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "e0cd527d-fb6e-4f32-b7d5-6bf1e032c27a",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def init: ImmArray[A] = {\r\n```",
        "createdAt" : "2020-01-06T08:32:24Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -102,7 +102,7 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(1), crashes on empty list */\n-  def init: ImmArray[A] = {\n+  lazy val init: ImmArray[A] = {"
  },
  {
    "id" : "9ac0f40c-2813-45c6-843e-21649239431d",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "8910db67-66d4-46c2-91f8-1ec1393892c4",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def tail: ImmArray[A] = {\r\n```",
        "createdAt" : "2020-01-06T08:32:32Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -87,13 +87,13 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(1), crashes on empty list */\n-  def head: A = this(0)\n+  lazy val head: A = this(0)\n \n   /** O(1), crashes on empty list */\n-  def last: A = this(this.length - 1)\n+  lazy val last: A = this(this.length - 1)\n \n   /** O(1), crashes on empty list */\n-  def tail: ImmArray[A] = {\n+  lazy val tail: ImmArray[A] = {"
  },
  {
    "id" : "205dc157-f0c3-4a92-920c-266bf75e55bf",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "90b381fe-b9e4-4db6-ad58-f53daee78e87",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def last: A = this(this.length - 1)\r\n```",
        "createdAt" : "2020-01-06T08:32:41Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -87,13 +87,13 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(1), crashes on empty list */\n-  def head: A = this(0)\n+  lazy val head: A = this(0)\n \n   /** O(1), crashes on empty list */\n-  def last: A = this(this.length - 1)\n+  lazy val last: A = this(this.length - 1)"
  },
  {
    "id" : "6a49d95c-14b0-47a6-bd02-4c9a7897f1e9",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "bd77062b-6538-495d-9629-63cec67f2eff",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def head: A = this(0)\r\n```",
        "createdAt" : "2020-01-06T08:32:50Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -87,13 +87,13 @@ final class ImmArray[+A] private (\n   }\n \n   /** O(1), crashes on empty list */\n-  def head: A = this(0)\n+  lazy val head: A = this(0)"
  },
  {
    "id" : "993aba20-805a-4c9f-b549-75048ef85cb3",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "1465fa01-89d8-481f-ae5d-0c2e3109abf7",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def length: Int = len\r\n```",
        "createdAt" : "2020-01-06T08:33:00Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -72,7 +72,7 @@ final class ImmArray[+A] private (\n   private def uncheckedGet(idx: Int): A = array(start + idx)\n \n   /** O(1) */\n-  def length: Int = len\n+  val length: Int = len"
  },
  {
    "id" : "a17a4e76-86b1-46f1-a5fe-67db0cab0b3e",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "bb3cad0c-68c8-4c6e-b437-d9809f6795db",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  def indices: Range = 0 until len\r\n```",
        "createdAt" : "2020-01-06T08:52:16Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -304,7 +308,7 @@ final class ImmArray[+A] private (\n     } getOrElse -1\n \n   /** O(1) */\n-  def indices(): Range = 0 until len\n+  lazy val indices: Range = 0 until len"
  },
  {
    "id" : "fee6d3b1-df11-4880-9887-c813dfe7a109",
    "prId" : 2076,
    "comments" : [
      {
        "id" : "f4acdd86-2d6a-4aa8-83f3-27b5d5bf7fdb",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@S11001001 what about `flatMap`.. we should also override it, applying the same approach.",
        "createdAt" : "2019-07-09T20:03:24Z",
        "updatedAt" : "2019-07-10T14:59:35Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "18d1b59b-7f98-4311-b44c-1fa97815e2a0",
        "parentId" : "f4acdd86-2d6a-4aa8-83f3-27b5d5bf7fdb",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Not really; it can't quite benefit from this in the same way. We don't know the size of the output for flatMap, and the default implementation is already quite well-optimized for building a result ImmArraySeq of unknown size.\r\n\r\nNow, if you're talking about things where we know the output size, like `++`? Absolutely. The trick is \"is there a more optimal implementation _using the specific properties of ImmArray_\", as the ones we already have are quite good for efficiently indexable underlying stores that can be built up element-by-element from left to right. For example, there wouldn't be any point to collectFirst, or collect, and even the `iterator` that's there, we probably shouldn't have bothered.",
        "createdAt" : "2019-07-09T20:08:40Z",
        "updatedAt" : "2019-07-10T14:59:35Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "94513a5f3bcfaa27547ef56c07446b0da900b3bc",
    "line" : 17,
    "diffHunk" : "@@ -410,6 +411,12 @@ object ImmArray {\n     override def copyToArray[B >: A](xs: Array[B], dstStart: Int, dstLen: Int): Unit =\n       array.copyToArray(xs, dstStart, dstLen)\n \n+    override def map[B, That](f: A => B)(implicit bf: CanBuildFrom[ImmArraySeq[A], B, That]): That =\n+      bf match {\n+        case _: IASCanBuildFrom[B] => array.map(f).toSeq\n+        case _ => super.map(f)(bf)\n+      }\n+"
  },
  {
    "id" : "907575c0-7a02-4c47-b633-49b272f2e53c",
    "prId" : 1117,
    "comments" : [
      {
        "id" : "8de858cd-c769-48de-afeb-3c0996da2ac8",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "not a big fan of one-liners :) really hard to follow. I would have just assigned the value returned by `foldLeft` to a `val` and passed it to the `map`.",
        "createdAt" : "2019-05-15T16:44:40Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a1e6949-e55d-446a-8623-b58d615be31a",
        "parentId" : "8de858cd-c769-48de-afeb-3c0996da2ac8",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Alas Scala inference disagrees with you :) I'll rewrite it to use the syntax extension, though.",
        "createdAt" : "2019-05-15T17:10:06Z",
        "updatedAt" : "2019-05-15T22:56:55Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a933c9948d4fd9990fc99ba78d4a2703561922c0",
    "line" : null,
    "diffHunk" : "@@ -367,8 +367,8 @@ object ImmArray {\n   implicit val immArrayInstance: Traverse[ImmArray] = new Traverse[ImmArray] {\n     override def traverseImpl[F[_], A, B](immArr: ImmArray[A])(f: A => F[B])(\n         implicit F: Applicative[F]): F[ImmArray[B]] = {\n-      F.map(immArr.foldLeft[F[BackStack[B]]](F.point(BackStack.empty)) {\n-        case (ys, x) => F.apply2(ys, f(x))(_ :+ _)\n+      F.map(immArr.foldLeft[F[BackStack[B]]](F.point(BackStack.empty)) { (ys, x) =>"
  }
]