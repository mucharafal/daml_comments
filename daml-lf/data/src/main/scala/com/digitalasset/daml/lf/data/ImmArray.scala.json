[
  {
    "id" : "e63fa4f3-f947-40fa-911b-f41c62db6792",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "6dd70c06-3a60-4fb6-82e2-3fa9761b53ee",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "lifting is not very efficient here, it creates too many useless objects in the process",
        "createdAt" : "2020-01-06T03:06:22Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +260,264 @@    var i = 0\n    while (i < len) {\n      val a = uncheckedGet(i)\n      if (f.isDefinedAt(a)) builder += f(a)\n      i += 1"
  },
  {
    "id" : "522e085d-889b-4a45-a71a-fe3c01fefb7e",
    "prId" : 2076,
    "comments" : [
      {
        "id" : "3ad29537-66c0-43bb-b6c0-f69cb120d46d",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "@S11001001 what about `flatMap`.. we should also override it, applying the same approach.",
        "createdAt" : "2019-07-09T20:03:24Z",
        "updatedAt" : "2019-07-10T14:59:35Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c2991366-92df-4ef5-9a1d-50db089c7aaa",
        "parentId" : "3ad29537-66c0-43bb-b6c0-f69cb120d46d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Not really; it can't quite benefit from this in the same way. We don't know the size of the output for flatMap, and the default implementation is already quite well-optimized for building a result ImmArraySeq of unknown size.\r\n\r\nNow, if you're talking about things where we know the output size, like `++`? Absolutely. The trick is \"is there a more optimal implementation _using the specific properties of ImmArray_\", as the ones we already have are quite good for efficiently indexable underlying stores that can be built up element-by-element from left to right. For example, there wouldn't be any point to collectFirst, or collect, and even the `iterator` that's there, we probably shouldn't have bothered.",
        "createdAt" : "2019-07-09T20:08:40Z",
        "updatedAt" : "2019-07-10T14:59:35Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "94513a5f3bcfaa27547ef56c07446b0da900b3bc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +417,421 @@        case _ => super.map(f)(bf)\n      }\n\n    override def companion: GenericCompanion[ImmArraySeq] = ImmArraySeq\n"
  }
]