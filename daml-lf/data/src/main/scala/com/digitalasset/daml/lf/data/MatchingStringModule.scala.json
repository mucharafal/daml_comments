[
  {
    "id" : "b8c299c3-5922-4b77-a6bf-425268a27234",
    "prId" : 983,
    "comments" : [
      {
        "id" : "c460a2ff-9860-4e9c-abaf-1a295770cb3c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Exactly what I had in mind.\r\n\r\nThere is an implication you should be aware of: `null` is generally rejected as an inhabitant of `Name`, in other words `null: Name` fails at type-checking, not wartremover. However, IIUC `ofDim` effectively backdoors a `null` inhabitant. This isn't really enough of a bother to avoid this, necessarily (you can also get a `null` inhabitant by getting the 0th item of an empty java ArrayList), but worth keeping in mind.\r\n\r\nWe might also want to provide a `CanBuildFrom[Array[_], T, Array[T]]` instance, but see my other comment.",
        "createdAt" : "2019-05-13T02:14:23Z",
        "updatedAt" : "2019-05-13T10:32:19Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f651a1e798c15873f3499c8b7e583ea010b3d99f",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +33,37 @@  def apply(xs: T*): Array[T] = xs.toArray\n\n  def ofDim(n: Int): Array[T] = Array.ofDim(n)\n\n  val empty: Array[T] = ofDim(0)"
  }
]