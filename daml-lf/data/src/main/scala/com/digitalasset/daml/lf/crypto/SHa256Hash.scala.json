[
  {
    "id" : "3a036a0e-b88d-41dc-9de0-799d22e1fc44",
    "prId" : 3849,
    "comments" : [
      {
        "id" : "e6c5bd5d-18be-4c60-830f-27acd6f5abb3",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    def add(a: Array[Byte]): this.type\r\n```\r\n\r\n&c.",
        "createdAt" : "2020-01-14T20:23:59Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f8e95876-01ff-4b5c-9492-dfd71b28e394",
        "parentId" : "e6c5bd5d-18be-4c60-830f-27acd6f5abb3",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Nice. Thanks.",
        "createdAt" : "2020-01-15T08:16:35Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "234101313181b0ea39c66a646366bd28d3d2adfd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.crypto\n+\n+import java.nio.ByteBuffer\n+import java.security.MessageDigest\n+import java.util\n+\n+import com.digitalasset.daml.lf.data.{Ref, Utf8}\n+\n+class SHa256Hash private (private val bytes: Array[Byte]) {\n+\n+  def toByteArray: Array[Byte] = bytes.clone()\n+\n+  def toHexa: Ref.LedgerString =\n+    Ref.LedgerString.assertFromString(bytes.map(\"%02x\" format _).mkString)\n+\n+  override def toString: String = s\"Hash($toHexa)\"\n+\n+  override def equals(other: Any): Boolean =\n+    other match {\n+      case otherHash: SHa256Hash => util.Arrays.equals(bytes, otherHash.bytes)\n+      case _ => false\n+    }\n+\n+  private var _hashCode: Int = 0\n+\n+  override def hashCode(): Int = {\n+    if (_hashCode == 0) {\n+      val code = util.Arrays.hashCode(bytes)\n+      _hashCode = if (code == 0) 1 else code\n+    }\n+    _hashCode\n+  }\n+\n+}\n+\n+object SHa256Hash {\n+\n+  /**\n+    * The methods of [[Builder]] change its internal state and return `this` for convenience.\n+    */\n+  sealed abstract class Builder {\n+\n+    def add(a: Array[Byte]): Builder"
  },
  {
    "id" : "6fc08ce0-4b70-4321-bddb-e152a1aa87a7",
    "prId" : 3849,
    "comments" : [
      {
        "id" : "46a1c11a-20e0-4796-a8fd-ed91b0b5e71f",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    def iterateOver[T, U](i: Iterator[T], length: Int)(f: (this.type, T) => U): this.type =\r\n```",
        "createdAt" : "2020-01-14T20:47:16Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "709d30e7-7ec4-42d8-8eea-3c120e2ffdd5",
        "parentId" : "46a1c11a-20e0-4796-a8fd-ed91b0b5e71f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I use a phantom type in Builder to ensure I am always using the same builder.",
        "createdAt" : "2020-01-15T09:33:07Z",
        "updatedAt" : "2020-01-16T15:17:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "234101313181b0ea39c66a646366bd28d3d2adfd",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2020 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.crypto\n+\n+import java.nio.ByteBuffer\n+import java.security.MessageDigest\n+import java.util\n+\n+import com.digitalasset.daml.lf.data.{Ref, Utf8}\n+\n+class SHa256Hash private (private val bytes: Array[Byte]) {\n+\n+  def toByteArray: Array[Byte] = bytes.clone()\n+\n+  def toHexa: Ref.LedgerString =\n+    Ref.LedgerString.assertFromString(bytes.map(\"%02x\" format _).mkString)\n+\n+  override def toString: String = s\"Hash($toHexa)\"\n+\n+  override def equals(other: Any): Boolean =\n+    other match {\n+      case otherHash: SHa256Hash => util.Arrays.equals(bytes, otherHash.bytes)\n+      case _ => false\n+    }\n+\n+  private var _hashCode: Int = 0\n+\n+  override def hashCode(): Int = {\n+    if (_hashCode == 0) {\n+      val code = util.Arrays.hashCode(bytes)\n+      _hashCode = if (code == 0) 1 else code\n+    }\n+    _hashCode\n+  }\n+\n+}\n+\n+object SHa256Hash {\n+\n+  /**\n+    * The methods of [[Builder]] change its internal state and return `this` for convenience.\n+    */\n+  sealed abstract class Builder {\n+\n+    def add(a: Array[Byte]): Builder\n+\n+    def add(a: ByteBuffer): Builder\n+\n+    def add(a: Byte): Builder\n+\n+    final def add(a: SHa256Hash): Builder =\n+      add(a.bytes)\n+\n+    final def add(s: String): Builder = {\n+      val a = Utf8.getBytes(s)\n+      add(a.length).add(a)\n+    }\n+\n+    private val intBuffer = ByteBuffer.allocate(java.lang.Integer.BYTES)\n+\n+    def add(a: Int): Builder = {\n+      intBuffer.rewind()\n+      add(intBuffer.putInt(a).array())\n+    }\n+\n+    private val longBuffer = ByteBuffer.allocate(java.lang.Long.BYTES)\n+\n+    def add(a: Long): Builder = {\n+      longBuffer.rewind()\n+      add(longBuffer.putLong(a).array())\n+    }\n+\n+    def iterateOver[T](i: Iterator[T], length: Int)(f: (Builder, T) => Builder): Builder ="
  }
]