[
  {
    "id" : "4e22943c-51aa-492e-9a81-190302428fad",
    "prId" : 2594,
    "comments" : [
      {
        "id" : "d1fdd833-c243-435b-9097-5c0a3bd7c0b5",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\npackage com.digitalasset.daml.lf\r\npackage data\r\n```",
        "createdAt" : "2019-08-20T16:55:11Z",
        "updatedAt" : "2019-08-22T14:59:59Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "285b713ebef9aaf0d6506d3a7272a7263cf505ad",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,36 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data"
  },
  {
    "id" : "b38c0fb4-cab5-43c7-a325-6ee59f0c1672",
    "prId" : 2594,
    "comments" : [
      {
        "id" : "0061bba8-552a-48ac-b4c5-89507b247ef2",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-08-20T16:55:47Z",
        "updatedAt" : "2019-08-22T14:59:59Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "285b713ebef9aaf0d6506d3a7272a7263cf505ad",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,36 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+import java.math.BigDecimal\n+\n+import com.digitalasset.daml.lf.data"
  },
  {
    "id" : "b8ab1150-d142-44f5-a5ec-659d5d37d227",
    "prId" : 606,
    "comments" : [
      {
        "id" : "c8e3140c-03fc-4d8f-8dad-964ea27478fa",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Unfortunately if you don't do this the whole expression goes in the lambda body:\r\n\r\n```suggestion\r\n    {\r\n      val p = \"\"\"[+-]?\\d{1,28}(\\.\\d{1,10})?\"\"\".r.pattern\r\n      p.matcher(_).matches()\r\n    }\r\n```\r\n\r\n```scala\r\nscala> reify({\r\n     |       val p = \"\"\"[+-]?\\d{1,28}(\\.\\d{1,10})?\"\"\".r.pattern\r\n     |       p.matcher(_).matches()\r\n     | }: String => Boolean)\r\nres1: reflect.runtime.universe.Expr[String => Boolean] =\r\nExpr[String => Boolean](({\r\n  val p = Predef.augmentString(\"[+-]?\\\\d{1,28}(\\\\.\\\\d{1,10})?\").r.pattern;\r\n  ((x$1) => p.matcher(x$1).matches())\r\n}: Function1[Predef.String, Boolean]))\r\n\r\nreify((\"\"\"[+-]?\\d{1,28}(\\.\\d{1,10})?\"\"\".r.pattern.matcher(_).matches()): String => Boolean)\r\nres5: reflect.runtime.universe.Expr[String => Boolean] = Expr[String => Boolean]((((x$1) => Predef.augmentString(\"[+-]?\\\\d{1,28}(\\\\.\\\\d{1,10})?\").r.pattern.matcher(x$1).matches()): Function1[Predef.String, Boolean]))\r\n```",
        "createdAt" : "2019-04-18T16:14:33Z",
        "updatedAt" : "2019-04-24T23:45:20Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c13f14ed-c4ed-4f76-8e89-d133246b6501",
        "parentId" : "c8e3140c-03fc-4d8f-8dad-964ea27478fa",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thx.",
        "createdAt" : "2019-04-23T07:26:40Z",
        "updatedAt" : "2019-04-24T23:45:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b6368f541c8ac07e1b0e9babb831481db8ecd406",
    "line" : null,
    "diffHunk" : "@@ -72,14 +72,14 @@ object Decimal {\n             .setScale(scale))\n     })\n \n+  private val hasExpectedFormat: String => Boolean =\n+    \"\"\"[+-]?\\d{1,28}(\\.\\d{1,10})?\"\"\".r.pattern.matcher(_).matches()"
  },
  {
    "id" : "aa5997a3-d956-4e1e-97ec-0d2c40b009fc",
    "prId" : 439,
    "comments" : [
      {
        "id" : "76c17be0-4800-45e1-a095-e367fb514b51",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n     x2 <- Either.cond(x0 == x1)(s\"out-of-bounds Decimal $x0\")(x1)\r\n```",
        "createdAt" : "2019-04-12T12:41:51Z",
        "updatedAt" : "2019-04-12T21:43:19Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "31c13b1ebc831050204d0e87c152898a65678eae",
    "line" : null,
    "diffHunk" : "@@ -28,24 +27,45 @@ object Decimal {\n \n   val min: Decimal = unlimitedBigDecimal(\"-9999999999999999999999999999.9999999999\")\n \n-  def check(x0: Decimal): Either[String, Decimal] = {\n+  /** Checks that a `Decimal` falls between `min` and `max`, and\n+    * round the number according to `scale`. Note that it does _not_\n+    * fail if the number contains data beyond `scale`.\n+    */\n+  def checkWithinBoundsAndRound(x0: Decimal): Either[String, Decimal] = {\n+    val err = Left(s\"out-of-bounds Decimal $x0\")\n     if (x0 > max || x0 < min) {\n-      Left(s\"out-of-bounds Decimal $x0\")\n+      err\n     } else {\n       val x1 = new BigDecimal(x0.bigDecimal, context)\n       val x2 = x1.setScale(scale, BigDecimal.RoundingMode.HALF_EVEN)\n       Right(x2)\n     }\n   }\n \n-  def add(x: Decimal, y: Decimal): Either[String, Decimal] = check(x + y)\n-  def div(x: Decimal, y: Decimal): Either[String, Decimal] = check(x / y)\n-  def mult(x: Decimal, y: Decimal): Either[String, Decimal] = check(x * y)\n-  def sub(x: Decimal, y: Decimal): Either[String, Decimal] = check(x - y)\n+  /** Like `checkWithinBoundsAndRound`, but _fails_ if the given number contains\n+    * any data beyond `scale`.\n+    */\n+  def checkWithinBoundsAndWithinScale(x0: Decimal): Either[String, Decimal] = {\n+    for {\n+      x1 <- checkWithinBoundsAndRound(x0)\n+      // if we've lost any data at all, it means that we weren't within the\n+      // scale.\n+      x2 <- if (x0 == x1) {"
  },
  {
    "id" : "2387da2f-f12e-4b58-8e12-e257937882b9",
    "prId" : 439,
    "comments" : [
      {
        "id" : "9a09ccd0-8f24-46c1-a4b5-a5312bcb6318",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I will have let the creation of the left inside the `if` as it is not use anywhere else",
        "createdAt" : "2019-04-12T12:48:16Z",
        "updatedAt" : "2019-04-12T21:43:19Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "31c13b1ebc831050204d0e87c152898a65678eae",
    "line" : null,
    "diffHunk" : "@@ -28,24 +27,45 @@ object Decimal {\n \n   val min: Decimal = unlimitedBigDecimal(\"-9999999999999999999999999999.9999999999\")\n \n-  def check(x0: Decimal): Either[String, Decimal] = {\n+  /** Checks that a `Decimal` falls between `min` and `max`, and\n+    * round the number according to `scale`. Note that it does _not_\n+    * fail if the number contains data beyond `scale`.\n+    */\n+  def checkWithinBoundsAndRound(x0: Decimal): Either[String, Decimal] = {\n+    val err = Left(s\"out-of-bounds Decimal $x0\")\n     if (x0 > max || x0 < min) {\n-      Left(s\"out-of-bounds Decimal $x0\")"
  }
]