[
  {
    "id" : "9c11af11-1b09-40ba-afea-6f5d65ff6b33",
    "prId" : 7220,
    "comments" : [
      {
        "id" : "500c20a6-3c32-4620-8ece-52f14924c3e5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "reminder to myself and others we used to do the linear lookup before as well.",
        "createdAt" : "2020-08-25T16:04:07Z",
        "updatedAt" : "2020-08-25T17:10:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bd81ff2e34267fdcb710110ff30af3aa4fa0256f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@\n  def lookup(name: Ref.Name): Option[X] =\n    sortedFields.find(_._1 == name).map(_._2)\n\n  def mapValue[Y](f: X => Y) = new Struct(sortedFields.map { case (k, v) => k -> f(v) })"
  },
  {
    "id" : "b3a5e5ba-e298-404c-b3b7-0197d10ad184",
    "prId" : 7220,
    "comments" : [
      {
        "id" : "e683f4d4-0577-4861-8591-c0b4504f6422",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This currently doesn’t appear to enforce uniqueness of fields. Given that we rely on this and have a lookup method, should it?",
        "createdAt" : "2020-08-25T16:10:27Z",
        "updatedAt" : "2020-08-25T17:10:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "667d8a19-6a81-4018-8d85-747d99b4f663",
        "parentId" : "e683f4d4-0577-4861-8591-c0b4504f6422",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I was also wondering if I should enforce uniqueness. \r\n\r\nI preferred to not do so, in order to have a nicer constructor: `Struct.apply(fields: (Name, X)*): Struct[X]  that does not throw exception nor return an `Either`. \r\n\r\nThe lookup is used only in the type checker that verifies itself that fields are not duplicated.  \r\n",
        "createdAt" : "2020-08-25T16:23:00Z",
        "updatedAt" : "2020-08-25T17:16:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b494fdd9-c33c-45f4-8809-953fcee3b035",
        "parentId" : "e683f4d4-0577-4861-8591-c0b4504f6422",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ll leave it up to you, I don’t feel particularly strongly here.",
        "createdAt" : "2020-08-25T17:20:56Z",
        "updatedAt" : "2020-08-25T17:20:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bd81ff2e34267fdcb710110ff30af3aa4fa0256f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@import com.daml.lf.data.Ref.Name\n\nfinal case class Struct[+X] private (sortedFields: ImmArray[(Ref.Name, X)]) extends NoCopy {\n\n  def lookup(name: Ref.Name): Option[X] ="
  }
]