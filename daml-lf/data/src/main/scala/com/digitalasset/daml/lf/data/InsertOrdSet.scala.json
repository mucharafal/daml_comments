[
  {
    "id" : "a7d311f6-f48e-4ba9-9284-4b07a1c9d9ec",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "27347003-fa26-41a4-bbb4-a74a19715ea6",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You can create an empty  `NonEmtpyInsertOrderSet`. I found that pretty confussing.",
        "createdAt" : "2019-11-13T19:33:08Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+sealed abstract class InsertOrdSet[T] extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}\n+\n+final case class NonEmptyInsertOrdSet[T](\n+    override val _items: Queue[T],"
  },
  {
    "id" : "f45c1996-b444-4a7a-83f8-bdafa9c1a0bb",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "f1e06e69-8a25-4b3f-9413-7cc9e958ace3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\nfinal class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\r\n```",
        "createdAt" : "2019-11-13T21:22:55Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7814d984-3f22-4d13-9c60-a35f5459a168",
        "parentId" : "f1e06e69-8a25-4b3f-9413-7cc9e958ace3",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "And moreover\r\n\r\n```suggestion\r\nsealed abstract class InsertOrdSet[T] extends AbstractSet[T] with Set[T] with GenericSetTemplate[T, InsertOrdSet] with SetLike[T, InsertOrdSet[T]] with Serializable {\r\n```",
        "createdAt" : "2019-11-13T21:29:49Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f04d327b-eafd-4bbb-b761-5591a8707b14",
        "parentId" : "f1e06e69-8a25-4b3f-9413-7cc9e958ace3",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You should problably not use `case` object/class for anything like that where you have to maintain invariant between the  This  `_items` and `_hahsSet`. This can be broken using the `copy` method. Furhtermore those internal fields should problably not leak outside. \r\n\r\nI think it is better to follow the approach of ImmArray, that is to say having a final class with private constructor. \r\nAn letting the method of the companion object do the instantiation.\r\n",
        "createdAt" : "2019-11-13T21:30:36Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+sealed abstract class InsertOrdSet[T] extends Set[T] {"
  },
  {
    "id" : "ec37e3a9-f780-495c-80b5-ed2aafed9d7f",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "a0c5416c-e77b-494e-bfbd-d62881ce9d63",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    new InsertOrdSet(Queue(s.reverse: _*), HashSet(s: _*))\r\n```",
        "createdAt" : "2019-11-13T21:25:40Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+sealed abstract class InsertOrdSet[T] extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}\n+\n+final case class NonEmptyInsertOrdSet[T](\n+    override val _items: Queue[T],\n+    override val _hashSet: HashSet[T])\n+    extends InsertOrdSet[T]\n+\n+object InsertOrdSet {\n+  def empty[T] = EmptyInsertOrdSet.asInstanceOf[InsertOrdSet[T]]\n+\n+  def fromSeq[T](s: Seq[T]): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(Queue(s.reverse: _*), HashSet(s: _*))"
  },
  {
    "id" : "27a64a62-111b-48a9-974c-b3ab2674b00d",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "0616ee6b-dda2-4f02-b0d1-87f1b0600d29",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  private val Empty =  new InsertOrdSet(Queue.empty, HashSet.empty)\r\n  def empty[T] = Empty.asInstanceOf[InsertOrdSet[T]]\r\n```",
        "createdAt" : "2019-11-13T21:37:24Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,63 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+sealed abstract class InsertOrdSet[T] extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}\n+\n+final case class NonEmptyInsertOrdSet[T](\n+    override val _items: Queue[T],\n+    override val _hashSet: HashSet[T])\n+    extends InsertOrdSet[T]\n+\n+object InsertOrdSet {\n+  def empty[T] = EmptyInsertOrdSet.asInstanceOf[InsertOrdSet[T]]"
  },
  {
    "id" : "91b30f39-00c3-48b5-9653-27b5350eed45",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "d5085a4c-3c20-4bb7-96c4-87145b393159",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:32:10Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}\n+\n+final case class NonEmptyInsertOrdSet[T]("
  },
  {
    "id" : "318a6369-4ea9-4bad-9982-f3abc1f78864",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "ab0d7c37-536e-4f73-97a4-b9d942bb49fe",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:32:24Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}\n+\n+final case class NonEmptyInsertOrdSet[T](\n+    override val _items: Queue[T],"
  },
  {
    "id" : "81aa3b52-3fe9-45aa-aa34-79da498f28bf",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "196be337-9574-4d94-bcdb-f81fda8f1e76",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:32:32Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}\n+\n+final case class NonEmptyInsertOrdSet[T](\n+    override val _items: Queue[T],\n+    override val _hashSet: HashSet[T])"
  },
  {
    "id" : "b494a286-44bd-46e6-a217-685b4a3d1654",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "e4ef3c42-ad20-42c6-a576-1136c14c6afc",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:32:40Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}\n+\n+final case class NonEmptyInsertOrdSet[T](\n+    override val _items: Queue[T],\n+    override val _hashSet: HashSet[T])\n+    extends InsertOrdSet[T]"
  },
  {
    "id" : "55153c80-c2cc-4c27-bf07-c534134e529b",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "073387fc-1d87-4842-b4a3-25c8c34b6e20",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n\r\n```",
        "createdAt" : "2019-11-19T14:32:54Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))"
  },
  {
    "id" : "f51aba4b-b8cb-4368-96e7-a4313f12a962",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "2c5d5d1c-bb48-4125-bce0-10119d57075b",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:33:01Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {"
  },
  {
    "id" : "6af823d9-b030-4dad-a25c-be08fe07d740",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "00364a37-8c19-4852-8591-f1ebc888b7d5",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:33:12Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()"
  },
  {
    "id" : "94391f69-fb0c-4e0f-8f0e-0e67ba3e6d5c",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "8e3dbfbf-1920-4825-b6d4-6d1a5afb1f25",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:33:24Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()"
  },
  {
    "id" : "420a7056-f473-4299-abad-7b339666691c",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "1187ce4a-0e40-44e0-bc03-950302c70c11",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-11-19T14:33:32Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet(\n+      _items.filter(elem2 => elem != elem2),\n+      _hashSet - elem\n+    )\n+}\n+\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n+final case object EmptyInsertOrdSet extends InsertOrdSet[Any] {\n+  override def _items = Queue[Any]()\n+  override def _hashSet = HashSet[Any]()\n+}"
  },
  {
    "id" : "e93198d2-0865-4835-9a65-766450b23aa2",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "e6041804-6d07-4b48-8e20-41bba38bc67c",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    new InsertOrdSet(\r\n```",
        "createdAt" : "2019-11-19T14:34:07Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet(\n+        elem +: _items,\n+        _hashSet + elem\n+      )\n+\n+  override def -(elem: T): InsertOrdSet[T] =\n+    NonEmptyInsertOrdSet("
  },
  {
    "id" : "fdcf4777-ae01-49ba-b7a1-2261171f96d1",
    "prId" : 3456,
    "comments" : [
      {
        "id" : "52070652-3186-47fa-9cbe-efb360be17e7",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      new InsertOrdSet(\r\n```",
        "createdAt" : "2019-11-19T14:34:19Z",
        "updatedAt" : "2019-11-19T15:24:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "32337fe72cb29729f24144232dab7afd4ecb1e54",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf.data\n+\n+/**\n+  * Insert-ordered Set.\n+  *\n+  * Implemented as (Queue[T], HashSet[T]).\n+  * Asymptotics:\n+  *  get: O(1)\n+  *  insert: O(1)\n+  *  remove: O(n)\n+  */\n+import scala.collection.immutable.{HashSet, Set, Queue}\n+\n+final class InsertOrdSet[T] private (_items: Queue[T], _hashSet: HashSet[T]) extends Set[T] {\n+  def _items: Queue[T]\n+  def _hashSet: HashSet[T]\n+\n+  override def empty: InsertOrdSet[T] = InsertOrdSet.empty\n+\n+  override def size: Int = _hashSet.size\n+\n+  def iterator: Iterator[T] =\n+    _items.reverseIterator\n+\n+  override def contains(elem: T): Boolean =\n+    _hashSet.contains(elem)\n+\n+  override def +(elem: T): InsertOrdSet[T] =\n+    if (_hashSet.contains(elem))\n+      this\n+    else\n+      NonEmptyInsertOrdSet("
  }
]