[
  {
    "id" : "116cf864-3700-41ab-b42e-225aeb8d3701",
    "prId" : 6143,
    "comments" : [
      {
        "id" : "173bb505-40f7-47f7-8e1c-02adb28137fd",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I discourage anyone from thinking there is any one-size-fits-all approach to tagging. Capturing common patterns is valuable, but it would be unwise to attempt to fit all such newtypes into one library's pattern. I briefly discuss some of that here https://youtu.be/ej-_FUZClWc?t=2314 (38:34 to 39:17). One example in this case might be if you wanted `SubmittedTransaction` and `CommittedTransaction` to have a direct relationship.\r\n\r\nWith respect to allowing subtyping there are two major caveats, which I talk about earlier in the same talk https://youtu.be/ej-_FUZClWc?t=1587 (26:27 to 30:01). If neither of these apply to a particular use case then it is fine to use subtyping. Note however that both caveats take the form of “you can’t decide later that a particular feature should be added”.\r\n\r\nFor inspiration you have taken the form most similar to the \"bespoke\" style that we use for most newtypes in the daml-lf codebase: the one where the tag is the singleton type of the containing structure. There are actually two other ways to define a general-purpose subtype tag.\r\n\r\n```scala\r\n// one is closer to @@; the only change is to add the upper bound to the visible signature\r\ntype <@[+X, T] <: X\r\n\r\n// the other is to use scala's `with` instead of a custom infix tag attacher\r\ntype T  // define as type T = Any in the concrete structure\r\ndef apply(x: X): X with T  // = x in the concrete structure\r\ndef subst[F[_]](fx: F[X]): F[X with T] // likewise\r\n```\r\n\r\nAs in Scalaz you only have one structure instead of one-per-tagged-type for the former. Consider one possibility with the latter: suppose `type Submitted; type Committed <: Submitted`. Then by implication `Transaction with Committed <: Transaction with Submitted <: Transaction`.\r\n\r\nFinally I suggest a name that suggests the properties of this particular tag, like `SubtypeTagged` or `TranslucentTagged`.",
        "createdAt" : "2020-05-28T15:04:06Z",
        "updatedAt" : "2020-06-08T14:24:10Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e106d0d8-37f6-4985-8427-1986a9a7443f",
        "parentId" : "173bb505-40f7-47f7-8e1c-02adb28137fd",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thanks a lot for the explanation. \r\nI went for the subtype approach, because a least one of the \"caveats\" your are speaking about is a property I am in fact looking for. \r\nI want that any construction (from scratch or using mapping operation) of new Submitted/Committed transactions are explicitly tagged each time.  ",
        "createdAt" : "2020-05-29T10:28:13Z",
        "updatedAt" : "2020-06-08T14:24:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89af6d420800adee764159fb1c3073fae07859e9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,20 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.data\n+\n+import scala.language.higherKinds\n+\n+abstract class Tagged[X] {\n+  type T <: X\n+  def apply(t: X): T\n+  def subst[F[_]](fx: F[X]): F[T]\n+}\n+\n+object Tagged {\n+  def apply[X]: Tagged[X] = new Tagged[X] {\n+    override type T = X\n+    override def apply(x: X): T = x\n+    override def subst[F[_]](fx: F[X]): F[T] = fx\n+  }\n+}"
  }
]