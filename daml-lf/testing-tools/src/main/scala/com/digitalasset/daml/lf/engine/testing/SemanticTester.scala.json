[
  {
    "id" : "934cfce3-4889-4522-a216-9a4b30e24620",
    "prId" : 583,
    "comments" : [
      {
        "id" : "01b34c3c-6c61-4cd1-a5eb-d346ec2e554b",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "this is wrong, since it's not the case that the exercise return value _always_ contains a child contract id",
        "createdAt" : "2019-04-30T08:08:16Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0ecbf1d5-49c0-4c1b-acc6-76894ddce6b8",
        "parentId" : "01b34c3c-6c61-4cd1-a5eb-d346ec2e554b",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-30T09:15:20Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -195,34 +194,63 @@ class SemanticTester(\n                       \"exercise event\",\n                       scenarioNode,\n                       state.remainingLedgerEventIds)\n-                  // create synthetic exercise event, again rewriting the appropriate bits. note that we intentionally\n-                  // blank the children because we compare them in the recursive call anyway.\n-                  val scenarioExerciseEvent = ExerciseEvent(\n-                    state.scenarioCoidToLedgerCoid(scenarioExercisesNode.targetCoid),\n-                    scenarioExercisesNode.templateId,\n-                    scenarioExercisesNode.choiceId,\n-                    scenarioExercisesNode.chosenValue.mapContractId(state.scenarioCoidToLedgerCoid),\n-                    scenarioExercisesNode.actingParties,\n-                    scenarioExercisesNode.consuming,\n-                    ImmArray.empty,\n-                    scenarioExercisesNode.stakeholders intersect scenarioWitnesses(scenarioNodeId),\n-                    scenarioWitnesses(scenarioNodeId),\n-                  )\n-                  val ledgerExerciseEventToCompare =\n-                    ledgerExerciseEvent.copy(children = ImmArray.empty, stakeholders = Set.empty)\n-                  val comparedScenarioExerciseEvent =\n-                    scenarioExerciseEvent.copy(stakeholders = Set.empty)\n-                  if (comparedScenarioExerciseEvent != ledgerExerciseEventToCompare) {\n-                    throw SemanticTesterError(\n-                      reference,\n-                      s\"Expected exercise event $comparedScenarioExerciseEvent but got $ledgerExerciseEventToCompare\"\n-                    )\n+\n+                  // Check if the contract ID of the result of exercising the contract choice can be mapped.\n+                  // If the contract ID cannot be mapped, then delay the check until the children have been processed\n+                  // which will add the Contract ID mappings required to test the exercise result.\n+                  // Note: If the exercise choice is not defined, then we cannot determine if the children nodes/events\n+                  // have been added or not. Perhaps we could keep track of nodes/events that have been processed to\n+                  // avoid this.\n+                  scenarioExercisesNode.exerciseResult"
  },
  {
    "id" : "6c352cff-f15c-498f-9f49-90b40587a386",
    "prId" : 583,
    "comments" : [
      {
        "id" : "c8b06a3f-a15d-4014-8560-93905be8e4dc",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "```suggestion\r\n                      // iterate over the children FIRST because we need the Coid mapping updated to check the exercise\r\n```",
        "createdAt" : "2019-04-30T08:09:32Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -195,34 +194,63 @@ class SemanticTester(\n                       \"exercise event\",\n                       scenarioNode,\n                       state.remainingLedgerEventIds)\n-                  // create synthetic exercise event, again rewriting the appropriate bits. note that we intentionally\n-                  // blank the children because we compare them in the recursive call anyway.\n-                  val scenarioExerciseEvent = ExerciseEvent(\n-                    state.scenarioCoidToLedgerCoid(scenarioExercisesNode.targetCoid),\n-                    scenarioExercisesNode.templateId,\n-                    scenarioExercisesNode.choiceId,\n-                    scenarioExercisesNode.chosenValue.mapContractId(state.scenarioCoidToLedgerCoid),\n-                    scenarioExercisesNode.actingParties,\n-                    scenarioExercisesNode.consuming,\n-                    ImmArray.empty,\n-                    scenarioExercisesNode.stakeholders intersect scenarioWitnesses(scenarioNodeId),\n-                    scenarioWitnesses(scenarioNodeId),\n-                  )\n-                  val ledgerExerciseEventToCompare =\n-                    ledgerExerciseEvent.copy(children = ImmArray.empty, stakeholders = Set.empty)\n-                  val comparedScenarioExerciseEvent =\n-                    scenarioExerciseEvent.copy(stakeholders = Set.empty)\n-                  if (comparedScenarioExerciseEvent != ledgerExerciseEventToCompare) {\n-                    throw SemanticTesterError(\n-                      reference,\n-                      s\"Expected exercise event $comparedScenarioExerciseEvent but got $ledgerExerciseEventToCompare\"\n-                    )\n+\n+                  // Check if the contract ID of the result of exercising the contract choice can be mapped.\n+                  // If the contract ID cannot be mapped, then delay the check until the children have been processed\n+                  // which will add the Contract ID mappings required to test the exercise result.\n+                  // Note: If the exercise choice is not defined, then we cannot determine if the children nodes/events\n+                  // have been added or not. Perhaps we could keep track of nodes/events that have been processed to\n+                  // avoid this.\n+                  scenarioExercisesNode.exerciseResult\n+                    .getOrElse(\n+                      throw new IllegalStateException(\"Expecting the exercise result to be set\"))\n+                    .mapContractIdOpt(state.scenarioCoidToLedgerCoid.get) match {\n+                    case Some(exerciseResultValue) =>\n+                      // create synthetic exercise event, again rewriting the appropriate bits. note that we intentionally\n+                      // blank the children because we compare them in the recursive call anyway.\n+                      val scenarioExerciseEvent = ExerciseEvent(\n+                        state.scenarioCoidToLedgerCoid(scenarioExercisesNode.targetCoid),\n+                        scenarioExercisesNode.templateId,\n+                        scenarioExercisesNode.choiceId,\n+                        scenarioExercisesNode.chosenValue.mapContractId(\n+                          state.scenarioCoidToLedgerCoid),\n+                        scenarioExercisesNode.actingParties,\n+                        scenarioExercisesNode.consuming,\n+                        ImmArray.empty,\n+                        scenarioExercisesNode.stakeholders intersect scenarioWitnesses(\n+                          scenarioNodeId),\n+                        scenarioWitnesses(scenarioNodeId),\n+                        Some(exerciseResultValue),\n+                      )\n+                      val ledgerExerciseEventToCompare =\n+                        ledgerExerciseEvent.copy(\n+                          children = ImmArray.empty,\n+                          stakeholders = Set.empty)\n+                      val comparedScenarioExerciseEvent =\n+                        scenarioExerciseEvent.copy(stakeholders = Set.empty)\n+                      if (comparedScenarioExerciseEvent != ledgerExerciseEventToCompare) {\n+                        throw SemanticTesterError(\n+                          reference,\n+                          s\"Expected exercise event $comparedScenarioExerciseEvent but got $ledgerExerciseEventToCompare\"\n+                        )\n+                      }\n+                      state.copy(\n+                        remainingScenarioNodeIds = remainingScenarioNodeIds,\n+                        remainingLedgerEventIds = remainingLedgerEventIds,\n+                      )\n+\n+                    case None =>\n+                      // iterate overt the children FIRST because we need the Coid mapping updated to check the exercise"
  },
  {
    "id" : "c0a71b37-d71c-414b-b402-dd7e2608e2be",
    "prId" : 583,
    "comments" : [
      {
        "id" : "f3529c41-61de-4159-bb84-35300a294062",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "make this a bit more explicit by immediately getting the `._1.children` out",
        "createdAt" : "2019-04-30T09:38:22Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36e0946f-a062-4506-8d78-241130a7297b",
        "parentId" : "f3529c41-61de-4159-bb84-35300a294062",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-30T10:55:19Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -218,11 +224,31 @@ class SemanticTester(\n                       s\"Expected exercise event $comparedScenarioExerciseEvent but got $ledgerExerciseEventToCompare\"\n                     )\n                   }\n-                  // add the exercise children to the stack\n                   state.copy(\n-                    remainingLedgerEventIds = ledgerExerciseEvent.children ++: remainingLedgerEventIds,\n-                    remainingScenarioNodeIds = scenarioExercisesNode.children ++: remainingScenarioNodeIds,\n+                    remainingScenarioNodeIds = remainingScenarioNodeIds,\n+                    remainingLedgerEventIds = remainingLedgerEventIds,\n                   )\n+\n+                case scenarioExercisesNode: NodeExercises[\n+                      L.NodeId,\n+                      AbsoluteContractId,\n+                      Tx.Value[AbsoluteContractId]] if !exerciseAddedChildren =>\n+                  val (ledgerExerciseEvent, _) ="
  },
  {
    "id" : "c6124b3f-33de-4dd4-bef8-d790bf955537",
    "prId" : 583,
    "comments" : [
      {
        "id" : "f2be05fd-5d2d-496d-9d59-5db793fa7719",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "please explain why this is required",
        "createdAt" : "2019-04-30T09:38:31Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0348b91e-7ce8-4800-8356-38ae14bb6842",
        "parentId" : "f2be05fd-5d2d-496d-9d59-5db793fa7719",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-30T10:55:25Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -75,11 +74,13 @@ class SemanticTester(\n     val scenarioLedger = allScenarioLedgers(scenario)\n     val ledger: GenericLedger = createLedger(packageParties)\n \n+    case class StackNode(nid: L.NodeId, exerciseAddedChildren: Boolean)"
  }
]