[
  {
    "id" : "8d97fdb4-e04b-440d-8142-bd916c7d0888",
    "prId" : 5771,
    "comments" : [
      {
        "id" : "db77d637-36d1-436c-ba9d-a2ceb65d2769",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I donâ€™t really like the underscore stuff. Just setting the default explicitly is easier to read imho.",
        "createdAt" : "2020-04-29T06:34:36Z",
        "updatedAt" : "2020-04-29T10:14:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e0070e7f-2084-4143-a498-de464036108e",
        "parentId" : "db77d637-36d1-436c-ba9d-a2ceb65d2769",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't see an easy way to avoid those underscores without duplicating the body of the `init` method here. DO you have an idea?",
        "createdAt" : "2020-04-29T07:29:02Z",
        "updatedAt" : "2020-04-29T10:14:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88174345-3551-493a-af9c-a37d468e0722",
        "parentId" : "db77d637-36d1-436c-ba9d-a2ceb65d2769",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "the underscore will just set it to `null` so just set it to `null` explicitly, i.e., `private var expr: Expr = null`.",
        "createdAt" : "2020-04-29T07:38:36Z",
        "updatedAt" : "2020-04-29T10:14:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "12c7736e-bf8f-4c13-8312-b771ec800339",
        "parentId" : "db77d637-36d1-436c-ba9d-a2ceb65d2769",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Oh right, there was this weird `null` thingy...",
        "createdAt" : "2020-04-29T08:03:43Z",
        "updatedAt" : "2020-04-29T10:14:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3debe3961ddcfa54223cf2af4c3cbcbff596f718",
    "line" : null,
    "diffHunk" : "@@ -15,27 +15,37 @@ import java.io.File\n import java.util.concurrent.TimeUnit\n import org.openjdk.jmh.annotations._\n \n-@State(Scope.Thread)\n+@State(Scope.Benchmark)\n class CollectAuthorityState {\n-  private val darFile = new File(rlocation(\"daml-lf/scenario-interpreter/CollectAuthority.dar\"))\n-  private val packages = UniversalArchiveReader().readFile(darFile).get\n-  private val packagesMap = Map(packages.all.map {\n-    case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\n-  }: _*)\n-\n-  // NOTE(MH): We use a static seed to get reproducible runs.\n-  private val seeding = crypto.Hash.secureRandom(crypto.Hash.hashPrivateKey(\"scenario-perf\"))\n-  private val buildMachine = Speedy.Machine\n-    .newBuilder(\n-      PureCompiledPackages(packagesMap).right.get,\n-      Time.Timestamp.MinValue,\n-      Some(seeding()))\n-    .fold(err => sys.error(err.toString), identity)\n-  private val expr = EVal(\n-    Identifier(packages.main._1, QualifiedName.assertFromString(\"CollectAuthority:test\")))\n-  // NOTE(MH): We run the machine once to initialize all data that is shared\n-  // between runs.\n-  run()\n+  private var buildMachine: Expr => Speedy.Machine = _\n+  private var expr: Expr = _"
  },
  {
    "id" : "27381a48-6505-4237-9ef1-e2f5dd133e3f",
    "prId" : 5771,
    "comments" : [
      {
        "id" : "b20f17db-9ded-4dcd-8196-46ea48183098",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    val packagesMap = packages.all.map {\r\n      case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\r\n    }.toMap\r\n```",
        "createdAt" : "2020-04-29T06:35:24Z",
        "updatedAt" : "2020-04-29T10:14:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3dc03aae-7451-4229-adc9-fc46f565b005",
        "parentId" : "b20f17db-9ded-4dcd-8196-46ea48183098",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I just copied that from `daml-lf/repl` and I have no clue what the weird smiley operator `: _*` exactly does. Your suggestion is definitely way easier to read.",
        "createdAt" : "2020-04-29T07:31:09Z",
        "updatedAt" : "2020-04-29T10:14:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3debe3961ddcfa54223cf2af4c3cbcbff596f718",
    "line" : null,
    "diffHunk" : "@@ -15,27 +15,37 @@ import java.io.File\n import java.util.concurrent.TimeUnit\n import org.openjdk.jmh.annotations._\n \n-@State(Scope.Thread)\n+@State(Scope.Benchmark)\n class CollectAuthorityState {\n-  private val darFile = new File(rlocation(\"daml-lf/scenario-interpreter/CollectAuthority.dar\"))\n-  private val packages = UniversalArchiveReader().readFile(darFile).get\n-  private val packagesMap = Map(packages.all.map {\n-    case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\n-  }: _*)\n-\n-  // NOTE(MH): We use a static seed to get reproducible runs.\n-  private val seeding = crypto.Hash.secureRandom(crypto.Hash.hashPrivateKey(\"scenario-perf\"))\n-  private val buildMachine = Speedy.Machine\n-    .newBuilder(\n-      PureCompiledPackages(packagesMap).right.get,\n-      Time.Timestamp.MinValue,\n-      Some(seeding()))\n-    .fold(err => sys.error(err.toString), identity)\n-  private val expr = EVal(\n-    Identifier(packages.main._1, QualifiedName.assertFromString(\"CollectAuthority:test\")))\n-  // NOTE(MH): We run the machine once to initialize all data that is shared\n-  // between runs.\n-  run()\n+  private var buildMachine: Expr => Speedy.Machine = _\n+  private var expr: Expr = _\n+\n+  @Param(Array(\"//daml-lf/scenario-interpreter/CollectAuthority.dar\"))\n+  private var dar: String = _\n+  @Param(Array(\"CollectAuthority:test\"))\n+  private var scenario: String = _\n+\n+  @Setup(Level.Trial)\n+  def init(): Unit = {\n+    val darFile = new File(if (dar.startsWith(\"//\")) rlocation(dar.substring(2)) else dar)\n+    val packages = UniversalArchiveReader().readFile(darFile).get\n+    val packagesMap = Map(packages.all.map {\n+      case (pkgId, pkgArchive) => Decode.readArchivePayloadAndVersion(pkgId, pkgArchive)._1\n+    }: _*)"
  }
]