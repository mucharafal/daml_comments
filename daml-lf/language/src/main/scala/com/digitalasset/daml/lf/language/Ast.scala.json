[
  {
    "id" : "a0f98715-34cd-453e-ac4f-ef9048a3c34c",
    "prId" : 7740,
    "comments" : [
      {
        "id" : "8ec0f062-4032-45aa-8b9c-cbf411eecebf",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  final case class EStructProj(field: FieldName, struct: Expr) extends Expr {\r\n    private[lf] var fieldIndex: Option[Int] = None\r\n  }\r\n```",
        "createdAt" : "2020-10-19T14:40:49Z",
        "updatedAt" : "2020-10-19T18:09:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2c9ff02de54582aa2ae4421ef2c53adf9307ee16",
    "line" : null,
    "diffHunk" : "@@ -84,8 +84,8 @@ object Ast {\n   /** Struct construction. */\n   final case class EStructCon(fields: ImmArray[(FieldName, Expr)]) extends Expr\n \n-  /** Struct projection. */\n-  final case class EStructProj(field: FieldName, struct: Expr) extends Expr\n+  /** Struct projection. The value for `fieldIndex` is fillen in by the type checker. */\n+  final case class EStructProj(field: FieldName, var fieldIndex: Option[Int], struct: Expr) extends Expr"
  },
  {
    "id" : "4950dba5-d6b2-4bb5-a6f8-cde7e6ab77e7",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The names here feel a bit off. This is abstract but so is `Definition`. I assume you want to keep the `Definition` name for backwards compatibility which seems reasonable. Otherwise, this would be a natural candidate for the name `Definition` and the other one could be `DefinitionE` or something like that. Not quite sure what the best approach here is. Naming is hard.",
        "createdAt" : "2020-10-06T17:55:41Z",
        "updatedAt" : "2020-10-12T12:30:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7f621ae9-15af-4b46-ae67-60f8971e1e0b",
        "parentId" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I agree the name is off. We should find another one.\r\nHowever I want to reserve `Definition`  for the type alias `AbstractDefinition[Expr]`.\r\nAny other suggestion ? ",
        "createdAt" : "2020-10-07T09:26:06Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e908da93-aa16-4e22-ba05-8bb84a6b8500",
        "parentId" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not really unfortunately. Naming is hard :crying_cat_face: ",
        "createdAt" : "2020-10-08T08:47:10Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0c71cae1-d649-4ec7-9b05-3d836636bc7f",
        "parentId" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I would have called this `GenDefinition`, if that helps.",
        "createdAt" : "2020-10-09T11:21:59Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5f03e6c1-e4cc-4725-bfbf-ebb71067032d",
        "parentId" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I would also have called the type parameter `Expr` instead of `E`, to keep the diff smaller. But that's a matter of priorities and taste I guess.",
        "createdAt" : "2020-10-09T11:31:54Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "54ca543f-64cc-4575-a96f-963dd181444c",
        "parentId" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "> I would have called this `GenDefinition`, if that helps.\r\n\r\n:+1: ",
        "createdAt" : "2020-10-12T12:10:33Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "92555049-c59c-4d2c-8fa4-465ad55c5326",
        "parentId" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "> I would also have called the type parameter `Expr` instead of `E`, to keep the diff smaller. But that's a matter of priorities and taste I guess.\r\n\r\nIf we do this  we get \"nice\" warnings like this:\r\n```\r\ndaml-lf/language/src/main/scala/com/digitalasset/daml/lf/language/Ast.scala:679: warning: type parameter Expr defined in class GenModule shadows class Expr defined in object Ast. You may want to rename your type parameter, or possibly remove it.\r\n  case class GenModule[Expr] private[Ast] (\r\n```\r\nWhat should I do ?\r\n1 - find another renaming (e.g. \"Expression\")\r\n2 - add a least 11 `@silent` anotations\r\n",
        "createdAt" : "2020-10-12T12:14:05Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7524f50-5bcb-4d7e-ad52-bbc6aaa882ff",
        "parentId" : "9ddaf0dc-2469-4426-b2c4-b00d09ffc4ca",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "> What should I do ?\r\n\r\nLet's stick with `E` then. Minimizing diff noise should not be done at the expense of creating compiler warnings, even in my world. ðŸ˜„ ",
        "createdAt" : "2020-10-13T10:32:45Z",
        "updatedAt" : "2020-10-13T10:32:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : null,
    "diffHunk" : "@@ -488,67 +488,101 @@ object Ast {\n   // Definitions\n   //\n \n-  sealed abstract class Definition extends Product with Serializable\n+  sealed abstract class AbstractDefinition[+E] extends Product with Serializable"
  },
  {
    "id" : "dcae33dc-64db-490b-8813-b9c57f7c9f1d",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "630187bb-5653-4347-83df-1f44d34ede5b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is even more confusing. This isnâ€™t even abstract!",
        "createdAt" : "2020-10-06T17:56:56Z",
        "updatedAt" : "2020-10-12T12:30:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "82a23d81-5239-4b7a-bc92-e1a6337e7d81",
        "parentId" : "630187bb-5653-4347-83df-1f44d34ede5b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right.",
        "createdAt" : "2020-10-07T09:26:18Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : null,
    "diffHunk" : "@@ -488,67 +488,101 @@ object Ast {\n   // Definitions\n   //\n \n-  sealed abstract class Definition extends Product with Serializable\n+  sealed abstract class AbstractDefinition[+E] extends Product with Serializable\n \n-  final case class DTypeSyn(params: ImmArray[(TypeVarName, Kind)], typ: Type) extends Definition\n-  final case class DDataType(\n+  type Definition = AbstractDefinition[Expr]\n+\n+  final case class DTypeSyn(params: ImmArray[(TypeVarName, Kind)], typ: Type)\n+      extends AbstractDefinition[Nothing]\n+  final case class AbstractDDataType[+E]("
  },
  {
    "id" : "2f50b305-5d6b-49fa-beeb-cbfd428b4e8e",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "b837db25-f033-446b-b706-dcd9b4e10120",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why not use `DataRecord` instead of `AbstractDataRecord` if youâ€™re already using `DDataType`?",
        "createdAt" : "2020-10-06T17:59:12Z",
        "updatedAt" : "2020-10-12T12:30:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "585a5c83-02da-4460-a064-0aa97304e70e",
        "parentId" : "b837db25-f033-446b-b706-dcd9b4e10120",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "One more argument, why there should not be a `AbstractDataRecord` (and `AbstractDDataType`) at all. ðŸ˜„",
        "createdAt" : "2020-10-09T11:33:13Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6a824e05-1154-4894-959e-e8916d61267b",
        "parentId" : "b837db25-f033-446b-b706-dcd9b4e10120",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done in #7631 ",
        "createdAt" : "2020-10-12T12:14:54Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : null,
    "diffHunk" : "@@ -633,27 +712,35 @@ object Ast {\n       val updatedRecords = templates.map {\n         case (templName, template) =>\n           defsMap.get(templName) match {\n-            case Some(DDataType(serializable, params, DataRecord(fields, _))) =>\n-              templName -> DDataType(serializable, params, DataRecord(fields, Some(template)))\n+            case Some(DDataType(serializable, params, AbstractDataRecord(fields, _))) =>"
  },
  {
    "id" : "6d007497-4588-4bfa-a96c-650e9f4554f5",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "c7f76ef4-78e6-4d1d-a75f-5a87c3fea64e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Making this covariant will permit most cases where you've written `_` to be written `Any` instead. But your choice on which you think is nicer.\r\n\r\nI warn that while this stack will remain perfectly sane with parametric treatment of the former `Package`, `Module`, &c components, if you decide that you want nominal subtypes (i.e. `extends`) later, that will cause some trouble. I think you're making a statement with this code that you don't want to see nominal subtypes at all here (as if in Haskell), but if I'm mistaken, then you might want to tie some knots in this code instead.",
        "createdAt" : "2020-10-06T19:37:46Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88e7d85a-86c5-4d41-a658-6f1bfae5379f",
        "parentId" : "c7f76ef4-78e6-4d1d-a75f-5a87c3fea64e",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'd prefer to _not_ mark this a covariant. I don't want to think about subtyping unless I really have to. \r\n\r\n_Rant_: I think having both parametric polymorphism and subtyping in a language is borderline insane, with the exception of OCaml, where all coercions into supertypes are explicit.",
        "createdAt" : "2020-10-09T11:42:19Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "271154f2-369f-4fc8-b107-6d77cccc17b7",
        "parentId" : "c7f76ef4-78e6-4d1d-a75f-5a87c3fea64e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I prefer `_` as `Any` ",
        "createdAt" : "2020-10-12T12:15:49Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : null,
    "diffHunk" : "@@ -633,27 +712,35 @@ object Ast {\n       val updatedRecords = templates.map {\n         case (templName, template) =>\n           defsMap.get(templName) match {\n-            case Some(DDataType(serializable, params, DataRecord(fields, _))) =>\n-              templName -> DDataType(serializable, params, DataRecord(fields, Some(template)))\n+            case Some(DDataType(serializable, params, AbstractDataRecord(fields, _))) =>\n+              templName -> DDataType(\n+                serializable,\n+                params,\n+                AbstractDataRecord(fields, Some(template)))\n             case _ =>\n               throw PackageError(\n                 s\"Data type definition not found for template ${templName.toString}\")\n           }\n       }\n \n-      new Module(name, defsMap ++ updatedRecords, featureFlags)\n+      new AbstractModule[E](name, defsMap ++ updatedRecords, featureFlags)\n     }\n   }\n \n+  type Module = AbstractModule[Expr]\n+  val Module = new AbstractModuleCompanion[Expr]\n+\n+  type ModuleInterface = AbstractModule[Unit]\n+\n   case class PackageMetadata(name: PackageName, version: PackageVersion)\n \n-  case class Package(\n-      modules: Map[ModuleName, Module],\n+  case class AbstractPackage[E](\n+      modules: Map[ModuleName, AbstractModule[E]],"
  },
  {
    "id" : "e27edf5f-7ae0-40e4-a6cc-794d80f8a957",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "39061f77-23c0-4cbd-8d58-aca05401541b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This link from a data type definition to a template seems to be the only reason why we need to have an `AbstractDDataType` which is parameterized by `E`. I was honestly wondering \"Why the heck would a data type definition contain an expression? This makes no sense.\"\r\n\r\nIn the Haskell implementation of the DAML-LF AST we have the link the other way around, from the template to the data type definition. If we could do this here, we could drop `AbstractDDataType` and only have `DDataType`. Do you think that would be possible and a good idea at the same time? If so, let's do it in a follow-up PR.",
        "createdAt" : "2020-10-09T11:30:04Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "91931ca6-4b6f-41d0-89e8-721afbcd7e53",
        "parentId" : "39061f77-23c0-4cbd-8d58-aca05401541b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The further I review this change the more I form the opinion that we should remove the link from data type definitions to templates in a PR that gets merged _before_ this PR. This would remove quite some noise from this PR.",
        "createdAt" : "2020-10-09T11:54:33Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9df7b7d2-f348-4c94-bbe8-fd1aa80c5c81",
        "parentId" : "39061f77-23c0-4cbd-8d58-aca05401541b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done in #7631 ",
        "createdAt" : "2020-10-12T12:16:47Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : null,
    "diffHunk" : "@@ -488,67 +488,114 @@ object Ast {\n   // Definitions\n   //\n \n-  sealed abstract class Definition extends Product with Serializable\n+  sealed abstract class AbstractDefinition[+E] extends Product with Serializable\n \n-  final case class DTypeSyn(params: ImmArray[(TypeVarName, Kind)], typ: Type) extends Definition\n-  final case class DDataType(\n+  type Definition = AbstractDefinition[Expr]\n+  type DefinitionSignature = AbstractDefinition[Unit]\n+\n+  final case class DTypeSyn(params: ImmArray[(TypeVarName, Kind)], typ: Type)\n+      extends AbstractDefinition[Nothing]\n+  final case class AbstractDDataType[+E](\n       serializable: Boolean,\n       params: ImmArray[(TypeVarName, Kind)],\n-      cons: DataCons)\n-      extends Definition\n-  final case class DValue(\n+      cons: AbstractDataCons[E],\n+  ) extends AbstractDefinition[E]\n+  final case class AbstractDValue[E](\n       typ: Type,\n       noPartyLiterals: Boolean,\n-      body: Expr,\n+      body: E,\n       isTest: Boolean\n-  ) extends Definition\n+  ) extends AbstractDefinition[E]\n+\n+  type DValue = AbstractDValue[Expr]\n+  val DValue = AbstractDValue\n+\n+  type DValueSignature = AbstractDValue[Unit]\n+  val DValueSignature = AbstractDValue\n+\n+  type DDataType = AbstractDDataType[Expr]\n+  val DDataType = AbstractDDataType\n+\n+  type DDataTypeSignature = AbstractDDataType[Unit]\n+  val DDataTypeSignature = AbstractDDataType\n \n   // Data constructor in data type definition.\n-  sealed abstract class DataCons extends Product with Serializable\n-  final case class DataRecord(fields: ImmArray[(FieldName, Type)], optTemplate: Option[Template])\n-      extends DataCons\n-  final case class DataVariant(variants: ImmArray[(VariantConName, Type)]) extends DataCons {\n+  sealed abstract class AbstractDataCons[+E] extends Product with Serializable\n+\n+  type DataCons = AbstractDataCons[Expr]\n+\n+  final case class AbstractDataRecord[E](\n+      fields: ImmArray[(FieldName, Type)],\n+      optTemplate: Option[AbstractTemplate[E]])"
  },
  {
    "id" : "0156dea2-4d2d-422e-8c91-12350e4893d1",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "32fb48e8-5114-4c9b-8e6c-d993a6222c86",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I assume we need to mark `E` as covariant to allow for the `class DTypeSynonym(...) extends AbstractDefinition[Nothing]` below. Is that correct? If so, I would say Scala is just mad that it forces you to think about variance as soon as you want to have a generic ADT where one of the constructors does not use the type parameter.",
        "createdAt" : "2020-10-09T11:39:00Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : null,
    "diffHunk" : "@@ -488,67 +488,114 @@ object Ast {\n   // Definitions\n   //\n \n-  sealed abstract class Definition extends Product with Serializable\n+  sealed abstract class AbstractDefinition[+E] extends Product with Serializable"
  },
  {
    "id" : "18aed7b9-654b-4f03-94d9-cf46dd4463b4",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "2e7bb4af-8e7a-45ea-a997-86130fadd9a5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Maybe it's a good idea to leave a comment explaining the difference between _signature_ and _interface_ somewhere in this file.",
        "createdAt" : "2020-10-09T11:51:06Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed24e088-efac-488e-9a0a-53b5e02bc759",
        "parentId" : "2e7bb4af-8e7a-45ea-a997-86130fadd9a5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good point. I add a comment.",
        "createdAt" : "2020-10-12T12:24:11Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8376288f-f6c5-4d78-a1ca-920c55d94ca9",
        "parentId" : "2e7bb4af-8e7a-45ea-a997-86130fadd9a5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thanks a lot.",
        "createdAt" : "2020-10-13T10:33:34Z",
        "updatedAt" : "2020-10-13T10:33:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : 2,
    "diffHunk" : "@@ -488,67 +488,114 @@ object Ast {\n   // Definitions\n   //"
  },
  {
    "id" : "f54bcfc7-5bee-4d10-a9eb-6227dda4d55a",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "164b9dfd-b3e2-4e35-8b7f-3a75fdeaf633",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Same as in Haskell land:\r\n```suggestion\r\n      observers: Option[Expr], // Additional parties that can observe the choice.\r\n```",
        "createdAt" : "2020-10-14T10:57:51Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -564,6 +564,7 @@ object Ast {\n       name: ChoiceName, // Name of the choice.\n       consuming: Boolean, // Flag indicating whether exercising the choice consumes the contract.\n       controllers: Expr, // Parties that can exercise the choice.\n+      observers: Expr, // Additional parties that can observe the choice."
  },
  {
    "id" : "212a1414-4765-40ea-aeec-ac31d7afb5bf",
    "prId" : 3293,
    "comments" : [
      {
        "id" : "e13aecd7-c45f-45a7-a7fd-d6bded5d9b40",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Rename to `typeCon`?\r\n```suggestion\r\n  final case class EToTextTypeConName(typeCon: TypeConName) extends Expr\r\n```",
        "createdAt" : "2019-10-30T14:28:32Z",
        "updatedAt" : "2019-10-30T14:54:14Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9f83ecfb-02b4-40f6-a616-36a835cac994",
        "parentId" : "e13aecd7-c45f-45a7-a7fd-d6bded5d9b40",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-10-30T14:50:10Z",
        "updatedAt" : "2019-10-30T14:54:14Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21966e0332a605efb87463491d305a573f02db43",
    "line" : null,
    "diffHunk" : "@@ -152,7 +152,7 @@ object Ast {\n   final case class EFromAny(ty: Type, body: Expr) extends Expr\n \n   /** Unique textual representation of template Id **/\n-  final case class EToTextTemplateId(tmplId: TypeConName) extends Expr\n+  final case class EToTextTypeConName(tmplId: TypeConName) extends Expr"
  }
]