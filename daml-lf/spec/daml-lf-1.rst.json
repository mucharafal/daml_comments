[
  {
    "id" : "60db9a25-feb6-4347-a324-43f45c09da4d",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "eca90eb9-d39d-4b95-ba00-1f27eeab314b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Unrelated to this PR, what do you think about renaming `exercise` into `exercise_with_actors` and `exercise_without_actors` into `exercise`? The only name existing in the protobuf is `exercise` and the with/without part is controlled via the optionality of the `actors` field. ",
        "createdAt" : "2020-10-15T16:47:24Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3284d85d-99f6-4eb4-8210-7908e6bcc9a1",
        "parentId" : "eca90eb9-d39d-4b95-ba00-1f27eeab314b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "As 'exercise' is supported only by LF < 1.5, we should just kill `exercise` and rename `exercise_without_actors` into exercise. ",
        "createdAt" : "2020-10-15T17:48:04Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "430f773c-7346-481f-918f-90d55bf746c4",
        "parentId" : "eca90eb9-d39d-4b95-ba00-1f27eeab314b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm fine with that too.",
        "createdAt" : "2020-10-16T07:44:47Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : 12,
    "diffHunk" : "@@ -700,6 +702,7 @@ Then we can define our kinds, types, and expressions::\n        |  'fetch' @Mod:T e                          -- UpdateFetch\n        |  'exercise' @Mod:T Ch e₁ e₂ e₃             -- UpdateExercise\n        |  'exercise_without_actors' @Mod:T Ch e₁ e₂ -- UpdateExerciseWithoutActors"
  },
  {
    "id" : "479db2f0-c1e8-4c66-a43d-a0c0fab6d655",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "a146615b-3541-43bd-b0f4-3603be5e5c27",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n          ↦ { …, 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' … ↦ …, … }, 'key' τₖ … }\r\n```",
        "createdAt" : "2020-10-15T16:49:46Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : null,
    "diffHunk" : "@@ -1248,6 +1251,14 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— UpdExerciseWithouActors\n       Γ  ⊢  'exercise_without_actors' @Mod:T Ch e₁ e₂  : 'Update' σ\n \n+      'tpl' (x : T)\n+          ↦ { …, 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' … ↦ …, …, 'key' τₖ …  } }"
  },
  {
    "id" : "6314cad0-f037-4034-b53c-3189abdc6cdb",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "e04374ee-16ef-40ce-9b63-af819b9a8ecf",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      Γ  ⊢  'exercise_by_key' @Mod:T Ch e₁ e₂  : 'Update' σ\r\n```",
        "createdAt" : "2020-10-15T17:09:45Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : null,
    "diffHunk" : "@@ -1248,6 +1251,14 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— UpdExerciseWithouActors\n       Γ  ⊢  'exercise_without_actors' @Mod:T Ch e₁ e₂  : 'Update' σ\n \n+      'tpl' (x : T)\n+          ↦ { …, 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' … ↦ …, …, 'key' τₖ …  } }\n+        ∈ 〚Ξ〛Mod\n+      Γ  ⊢  e₁  :  τₖ\n+      Γ  ⊢  e₂  :  τ\n+    ——————————————————————————————————————————————————————————————— UpdExerciseByKey\n+      Γ  ⊢  'exercise' @Mod:T Ch e₁ e₂  : 'Update' σ"
  },
  {
    "id" : "be1dac22-8769-4b40-9ea8-76b5d42a2df3",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "219fccf8-b993-4949-b542-6d274b99a98d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Something is off here but I can't exactly tell what. Should it be\r\n```suggestion\r\n     'exercise_without_actor' Mod:T.Ch cid v₁ ‖ (st'; keys')  ⇓ᵤ  ur\r\n   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyExercise\r\n     'exercise_by_key' Mod:T.Ch vₖ v₁ ‖ (st; keys)  ⇓ᵤ  ur\r\n```",
        "createdAt" : "2020-10-15T17:15:25Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : null,
    "diffHunk" : "@@ -2889,6 +2920,17 @@ as described by the ledger model::\n        ⇓ᵤ\n      Ok ('Some' @('ContractId' Mod:T) cid, ε) ‖ (st; keys)\n \n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyFetchErr\n+     'exercise_by_key' Mod:T.Ch cid vₖ v ‖ (st; keys)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     'lookup_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ (st'; keys')\n+     'exercise_without_actor' Mod:T.Ch v₁ v ‖ (st'; keys')  ⇓ᵤ  ur\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyExercise\n+     'exercise_by_key' Mod:T.Ch cid vₖ v₁ ‖ (st; keys)  ⇓ᵤ  ur"
  },
  {
    "id" : "225ae513-fd0d-4ef9-9f34-fcabd5a6b93a",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "a8ad400c-3de7-49f4-ac4b-cd125fca93e7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n     'exercise_by_key' Mod:T.Ch vₖ v₁ ‖ (st; keys)  ⇓ᵤ  Err t\r\n```",
        "createdAt" : "2020-10-16T07:46:03Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : null,
    "diffHunk" : "@@ -2889,6 +2920,17 @@ as described by the ledger model::\n        ⇓ᵤ\n      Ok ('Some' @('ContractId' Mod:T) cid, ε) ‖ (st; keys)\n \n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyFetchErr\n+     'exercise_by_key' Mod:T.Ch cid vₖ v ‖ (st; keys)  ⇓ᵤ  Err t"
  },
  {
    "id" : "0eff5326-3721-43ce-9b1e-e9faccc2f77b",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "15afc399-c882-4c23-87bf-00153aae8e8a",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "You used `fetch_by_key` in one rule and `lookup_by_key` in the other.\r\nI think it should be `fetch_by_key` in both cases?\r\n\r\n```suggestion\r\n     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Err t\r\n   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyFetchErr\r\n     'exercise_by_key' Mod:T.Ch vₖ v₁ ‖ (st; keys)  ⇓ᵤ  Err t\r\n\r\n     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\r\n     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ (st'; keys')\r\n```",
        "createdAt" : "2020-10-16T12:03:03Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "33993a9d-9b11-4e56-b106-ec1563418649",
        "parentId" : "15afc399-c882-4c23-87bf-00153aae8e8a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch.",
        "createdAt" : "2020-10-19T07:44:43Z",
        "updatedAt" : "2020-10-19T07:54:26Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : null,
    "diffHunk" : "@@ -2889,6 +2920,17 @@ as described by the ledger model::\n        ⇓ᵤ\n      Ok ('Some' @('ContractId' Mod:T) cid, ε) ‖ (st; keys)\n \n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyFetchErr\n+     'exercise_by_key' Mod:T.Ch vₖ v₁ ‖ (st; keys)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     'lookup_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ (st'; keys')"
  },
  {
    "id" : "2f28597d-b864-4363-8b87-21eece56c618",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "42a0f2b5-c692-40ce-a229-db1eafe6087b",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "good catch!",
        "createdAt" : "2020-10-16T12:05:20Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : 71,
    "diffHunk" : "@@ -2835,7 +2867,6 @@ as described by the ledger model::\n \n      'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n      (eₘ vₖ)  ⇓  Err t\n-     (Mod:T, vₖ) ∉ dom(keys₀)"
  },
  {
    "id" : "4f2f9dc4-6ecb-4761-bed6-0bb0e0c4b3a8",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "66e1bf26-ea2c-4fb3-b3b1-e3e424585090",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "This is a nice approach, but the `ur` includes the ledger transaction, which means we aren't distinguishing between \"exercise\" and \"exercise by key\". Maybe the semantics needs to be reformulated anyway to track the transaction structure more closely, so I'm ok leaving it like this for now.",
        "createdAt" : "2020-10-16T12:09:51Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5697327d-9369-4979-adb6-03304a96aac8",
        "parentId" : "66e1bf26-ea2c-4fb3-b3b1-e3e424585090",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right, this does not make the distinction between \"exercise\" and \"exercise by key\". But currently the implementation does not neither, so it is probably fine to let the semantics like that until we introduce a new transaction format. ",
        "createdAt" : "2020-10-19T07:48:47Z",
        "updatedAt" : "2020-10-19T07:54:26Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7176a925-47cc-4b94-9727-9dbe3bb81a57",
        "parentId" : "66e1bf26-ea2c-4fb3-b3b1-e3e424585090",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's leave it as is for now and fix it when we've introduced the new transaction format.",
        "createdAt" : "2020-10-19T08:17:11Z",
        "updatedAt" : "2020-10-19T08:17:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : 97,
    "diffHunk" : "@@ -2889,6 +2920,17 @@ as described by the ledger model::\n        ⇓ᵤ\n      Ok ('Some' @('ContractId' Mod:T) cid, ε) ‖ (st; keys)\n \n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyFetchErr\n+     'exercise_by_key' Mod:T.Ch vₖ v₁ ‖ (st; keys)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     'lookup_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ (st'; keys')\n+     'exercise_without_actor' Mod:T.Ch cid v₁ ‖ (st'; keys')  ⇓ᵤ  ur\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyExercise\n+     'exercise_by_key' Mod:T.Ch vₖ v₁ ‖ (st; keys)  ⇓ᵤ  ur"
  },
  {
    "id" : "ff387cdf-2311-466a-bb9b-48231b0ab5ec",
    "prId" : 7578,
    "comments" : [
      {
        "id" : "6be4e337-8deb-4e0a-a4fc-96892d755f5b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  + **Change** ``Update.Exercise`` such that ``actor`` must not be set anymore.\r\n```",
        "createdAt" : "2020-10-06T09:16:23Z",
        "updatedAt" : "2020-10-07T07:21:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2478ace645101483f34f6bc5e2c6ec8af2f19c37",
    "line" : null,
    "diffHunk" : "@@ -200,7 +200,7 @@ Version: 1.5 (deprecated)\n \n   + **Add** ``COERCE_CONTRACT_ID`` primitive for coercing ``ContractId``.\n \n-  + **Change** ``Update.Exercise`` such that ``actor`` is now optional.\n+  + **Change** ``Update.Exercise`` such that ``actor`` is dropped."
  },
  {
    "id" : "e602a6cb-7aba-41bc-96d4-cf1b964968a2",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "e65a4ccc-21e1-4ede-b9de-10c31b62c783",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n",
        "createdAt" : "2020-10-21T07:30:21Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : 7,
    "diffHunk" : "@@ -4163,6 +4163,12 @@ The type checker will reject any DAML-LF < 1.2 program that tries to access\n the choice argument in a controller expression.\n \n \n+Choice observers\n+................\n+\n+  FIXME: https://github.com/digital-asset/daml/issues/7709"
  },
  {
    "id" : "ed1f2069-7859-4a9b-8f31-0f5eac9582a1",
    "prId" : 7323,
    "comments" : [
      {
        "id" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "This isn't necessary, since the `TyStruct` rule enforces distinct field names (`f₁ < … < fₙ lexicographically`), and sorting would preserve the non-uniqueness of field names.",
        "createdAt" : "2020-09-04T11:55:16Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd680ab1-03ac-462b-859d-a96773ea60ec",
        "parentId" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Doesn't the `TyStruct` rule only speak about _well-formed_ types? By adding this condition we make sure that this rule only applied if the resulting type is well-formed. Thus, it would transform ill-formed structural records into well-formed ones.",
        "createdAt" : "2020-09-04T12:13:37Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f430d158-77a0-4126-80f8-aa6ce2c7321e",
        "parentId" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "`TyStruct` and all the other rules in that section are what *defines* well-formed types. When we sort a badly-ordered struct into a well-ordered struct, we may still have duplicate fields. At that point, `TyStruct` will say \"hey, that's not well-formed\" and reject the struct.",
        "createdAt" : "2020-09-04T12:17:42Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "296341b4-b1d2-432f-a56f-0d9c6ea2aab1",
        "parentId" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "This type normalization rules are operating on pure syntax. They make no well-formedness guarantees. E.g. `'Numeric' 'Int64'` is a possible outcome of type normalization, even though it's not well-formed. ",
        "createdAt" : "2020-09-04T12:21:59Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dc499096-6160-425a-9396-dda02f2e62ad",
        "parentId" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We don't have a requirement anywhere that an expression is only well-formed if its type is well-formed, do we? Without this requirement or the condition I added here, the expression\r\n```\r\n< a = 1, a = 2>\r\n```\r\nwould be well-formed but have an ill-formed type.\r\n\r\nMy understanding was that the typing rules are such that you can _prove_ that all well-formed expressions have a well-formed type rather than well-formedness of the type being a requirement. Am I mistaken here?",
        "createdAt" : "2020-09-04T12:22:50Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "de3c411c-a3fa-4cd3-b2da-5eaa6e615b10",
        "parentId" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Ah, that sounds like a missing hypothesis in `ExpStructCon`. It should require `σ` be well-formed. (IIRC it did require this at some point before the struct-field-order PR was merged.)",
        "createdAt" : "2020-09-04T12:28:49Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "695fa413-2ffb-4111-ac11-bb5770f8e11f",
        "parentId" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Compare with `ExpVarCon` where each ` σ₁  ↠  σ₁'` has an accompanying `Γ  ⊢  σ₁' : k₁`, for example.",
        "createdAt" : "2020-09-04T12:33:26Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fb667fd1-35bb-46c4-b970-4c9f209b0dd3",
        "parentId" : "da2752e0-57ee-4895-90fc-dc132cb5226d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's a good point. I'll fix the `ExpStructCon` rule then.",
        "createdAt" : "2020-09-04T13:23:57Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8676a95a356729b3e2ead7d36e9850236bcc1940",
    "line" : null,
    "diffHunk" : "@@ -867,6 +867,7 @@ to remove dependence on the order of fields ::\n    |Mod:S τ₁ … τₙ|   ↠   σ[α₁ ↦ σ₁, …, αₙ ↦ σₙ]\n \n    τ₁ ↠ σ₁   ⋯   τₙ  ↠  σₙ\n+   f₁, …, fₘ are mutually distinct"
  },
  {
    "id" : "f4c1729a-0173-46e9-9803-945bb6637e73",
    "prId" : 7323,
    "comments" : [
      {
        "id" : "324261ee-ac7d-4605-99be-2d13c9f1c923",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Nice catch!",
        "createdAt" : "2020-09-04T11:55:24Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8676a95a356729b3e2ead7d36e9850236bcc1940",
    "line" : 5,
    "diffHunk" : "@@ -1150,7 +1151,7 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpEnumCon\n       Γ  ⊢  Mod:T:Eᵢ  :  Mod:T\n \n-      ⟨ f₁: τ₁, …, fⱼ: τⱼ ⟩ ↠ σ\n+      ⟨ f₁: τ₁, …, fₘ: τₘ ⟩ ↠ σ"
  },
  {
    "id" : "35179b39-afcd-45cb-abb5-27f3ed695735",
    "prId" : 7228,
    "comments" : [
      {
        "id" : "16fc3f5f-a18d-43b9-a2ad-212e177cddb5",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      ⟨ f₁: τ₁, …, fⱼ: τⱼ ⟩ ↠ σ\r\n```",
        "createdAt" : "2020-08-25T14:00:33Z",
        "updatedAt" : "2020-08-25T14:22:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6cfd1c5b-3462-4310-bc76-b6659b4d6752",
        "parentId" : "16fc3f5f-a18d-43b9-a2ad-212e177cddb5",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Ah, that makes more sense! Thanks!",
        "createdAt" : "2020-08-25T14:09:57Z",
        "updatedAt" : "2020-08-25T14:22:13Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "23651f00241216eff9d781163d541da4330a23a0",
    "line" : null,
    "diffHunk" : "@@ -1147,9 +1150,11 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpEnumCon\n       Γ  ⊢  Mod:T:Eᵢ  :  Mod:T\n \n+      [f₁, …, fₙ] sorts lexicographically to [fⱼ₁, …, fⱼₙ]\n+      τ ↠ ⟨ fⱼ₁: τⱼ₁, …, fⱼₘ: τⱼₘ ⟩"
  },
  {
    "id" : "95f3b20b-6abd-4a63-b5e7-a489ff8144e7",
    "prId" : 7228,
    "comments" : [
      {
        "id" : "a112d56d-70dd-40c5-a0b5-6b92a1ce6480",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      Γ  ⊢  ⟨ f₁ = e₁, …, fₘ = eₘ ⟩  :  σ\r\n```",
        "createdAt" : "2020-08-25T14:01:39Z",
        "updatedAt" : "2020-08-25T14:22:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "23651f00241216eff9d781163d541da4330a23a0",
    "line" : null,
    "diffHunk" : "@@ -1147,9 +1150,11 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpEnumCon\n       Γ  ⊢  Mod:T:Eᵢ  :  Mod:T\n \n+      [f₁, …, fₙ] sorts lexicographically to [fⱼ₁, …, fⱼₙ]\n+      τ ↠ ⟨ fⱼ₁: τⱼ₁, …, fⱼₘ: τⱼₘ ⟩\n       Γ  ⊢  e₁  :  τ₁      ⋯      Γ  ⊢  eₘ  :  τₘ\n     ——————————————————————————————————————————————————————————————— ExpStructCon\n-      Γ  ⊢  ⟨ f₁ = e₁, …, fₘ = eₘ ⟩  :  ⟨ f₁: τ₁, …, fₘ: τₘ ⟩\n+      Γ  ⊢  ⟨ f₁ = e₁, …, fₘ = eₘ ⟩  :  τ"
  },
  {
    "id" : "c000a293-3a45-455b-8f2e-7a06a7e150e3",
    "prId" : 7228,
    "comments" : [
      {
        "id" : "2e8de3ad-5263-4491-bf85-df6748c7d906",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "```suggestion\r\nto remove dependence on the order of fields ::\r\n```",
        "createdAt" : "2020-08-25T14:22:01Z",
        "updatedAt" : "2020-08-25T14:22:13Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "23651f00241216eff9d781163d541da4330a23a0",
    "line" : null,
    "diffHunk" : "@@ -842,11 +842,12 @@ as ``𝕋(F)``. See the `Built-in functions`_ section for the complete\n list of built-in functions and their respective types.\n \n \n-Type synonym resolution\n-.......................\n+Type normalization\n+..................\n \n-First, we define the synonym resolution relation ``↠`` over types,\n-which inline type synonym definitions inside types::\n+First, we define the type normalization relation ``↠`` over types,\n+which inlines type synonym definitions, and normalizes struct types\n+to remove order dependence ::"
  },
  {
    "id" : "bb4d24b6-4cda-4f8f-99bd-c6f13a7d95e3",
    "prId" : 7204,
    "comments" : [
      {
        "id" : "291eca74-801b-4599-81a6-d5600fca6122",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Wouldn't it be easier to say something like\r\n```\r\n  [f_1, ..., f_m] is lexicographically less than [g_1, ..., g_n]\r\n------------------------------------------------------------------\r\n  <f_1: s_1, ..., f_m: s_m> <_t <g_1: t_1, ..., g_n: t_n>\r\n```\r\n?",
        "createdAt" : "2020-09-02T10:51:04Z",
        "updatedAt" : "2020-09-08T12:21:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "85d4d9a3-4f41-49ff-ac13-c7a10283635b",
        "parentId" : "291eca74-801b-4599-81a6-d5600fca6122",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It is simpler. We agree with @cocreature to go this way. \r\nNote the resulting order is not the same. It is somehow less natural as it does not behave like map.",
        "createdAt" : "2020-09-02T14:01:44Z",
        "updatedAt" : "2020-09-08T12:21:35Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c317fab399ab50a2350ce6f5c719ebdaafd9d41a",
    "line" : null,
    "diffHunk" : "@@ -2005,17 +2005,17 @@ types that satisfies the following rules::\n     n <ₜ ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩\n \n     fᵢ comes lexicographically before gᵢ\n-  ——————————————————————————————————————————————————— TypeOrderStructFieldName\n-    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n-      ⟨ f₁ : σ₁, …, fᵢ₋1 : σᵢ₋₁, gᵢ : σᵢ, …, gₙ : σₙ ⟩\n+  ——————————————————————————————————————————————————— TypeOrderStructFieldNameDiff\n+    ⟨  f₁ : τ₁, …, fᵢ₋₁ : τᵢ₋₁, fᵢ : τᵢ, …, fₘ : τₘ ⟩ <ₜ\n+        ⟨  f₁ : σ₁, …, fᵢ₋₁ : σᵢ₋₁, gᵢ : σᵢ, …, gₘ : σₘ⟩"
  },
  {
    "id" : "427374fd-ba42-4582-a353-6866c5e077fa",
    "prId" : 7204,
    "comments" : [
      {
        "id" : "6381b825-1231-4c4b-9b05-2d2898d09fdd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The second struct contains the field `f_m` twice. I assume that second one should be `f_n`? However, this rule would be unnecessary if we follow my suggestion above.",
        "createdAt" : "2020-09-02T10:52:16Z",
        "updatedAt" : "2020-09-08T12:21:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "840f8754-bae8-44c7-97e2-b0c843e9e4e7",
        "parentId" : "6381b825-1231-4c4b-9b05-2d2898d09fdd",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed in other PR.",
        "createdAt" : "2020-09-07T08:21:13Z",
        "updatedAt" : "2020-09-08T12:21:35Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c317fab399ab50a2350ce6f5c719ebdaafd9d41a",
    "line" : null,
    "diffHunk" : "@@ -2005,17 +2005,17 @@ types that satisfies the following rules::\n     n <ₜ ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩\n \n     fᵢ comes lexicographically before gᵢ\n-  ——————————————————————————————————————————————————— TypeOrderStructFieldName\n-    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n-      ⟨ f₁ : σ₁, …, fᵢ₋1 : σᵢ₋₁, gᵢ : σᵢ, …, gₙ : σₙ ⟩\n+  ——————————————————————————————————————————————————— TypeOrderStructFieldNameDiff\n+    ⟨  f₁ : τ₁, …, fᵢ₋₁ : τᵢ₋₁, fᵢ : τᵢ, …, fₘ : τₘ ⟩ <ₜ\n+        ⟨  f₁ : σ₁, …, fᵢ₋₁ : σᵢ₋₁, gᵢ : σᵢ, …, gₘ : σₘ⟩\n \n-  ——————————————————————————————————————————————————— TypeOrderStructFieldNumber\n-    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n-      ⟨ f₁ : τ₁, …, fₘ : τₘ, fₘ₊₁ : τₘ₊₁ ⟩\n+  ——————————————————————————————————————————————————— TypeOrderStructFieldNameShorter\n+    ⟨  f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n+         ⟨ f₁ : σ₁, …, fₘ : σₘ, fₘ₊₁ : σₘ₊₁, …, fₘ : σₘ⟩⟩"
  },
  {
    "id" : "841ed04a-c85e-44d8-bbc6-131d97241dc6",
    "prId" : 7050,
    "comments" : [
      {
        "id" : "0bc81981-2da2-479e-85e4-fee6300ee184",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n* Each package ``p`` only depends on packages whose LF version is older\r\n  than or the same as the LF version of ``p`` itself.\r\n```",
        "createdAt" : "2020-08-07T05:56:11Z",
        "updatedAt" : "2020-08-07T15:26:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "edd5726604b0278196086666e0c0dae724cae3ff",
    "line" : null,
    "diffHunk" : "@@ -1635,6 +1635,8 @@ Then, a collection of packages ``Ξ`` is well-formed if:\n   package of ``Ξ``.\n * There are no cycles between type synonym definitions, modules, and\n   packages references.\n+* The dependencies of each modules are compiled to an LF version equal or\n+  older than the one that module is compiled to."
  },
  {
    "id" : "56f80c5c-d469-49e4-8b03-311daa92f74b",
    "prId" : 6955,
    "comments" : [
      {
        "id" : "57df8baf-f84d-4653-bae4-18cc647541a4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Shouldn't that refer to `fetch` rather than `exercise`?\r\n```suggestion\r\n     Err \"Fetch of unknown contract\"\r\n```",
        "createdAt" : "2020-08-03T10:49:47Z",
        "updatedAt" : "2020-08-03T11:14:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "41fe53cb-4682-4986-8ce5-562b9b88eaf7",
        "parentId" : "57df8baf-f84d-4653-bae4-18cc647541a4",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "No, it's not a mistake. Fetch errors look like exercise errors (see the other fetch error case). I don't know if this is desirable, but it's closer to the implementation. My guess is that we'll have to redo all the errors at some point (looking at the future w/ exception handling) and we can fix this then.",
        "createdAt" : "2020-08-03T11:11:48Z",
        "updatedAt" : "2020-08-03T11:14:29Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9aac3c3394fb6245884f63524ea6db94d04e8e05",
    "line" : 34,
    "diffHunk" : "@@ -2785,6 +2797,12 @@ as described by the ledger model::\n    —————————————————————————————————————————————————————————————————————— EvUpdExercWithoutActors\n      'exercise_without_actors' Mod:T.Ch cid v₁ ‖ (st₀, keys₀)  ⇓ᵤ  ur\n \n+     cid ∉ dom(st)\n+   —————————————————————————————————————————————————————————————————————— EvUpdFetchMissing\n+     'fetch' @Mod:T cid ‖ (st; keys)\n+       ⇓ᵤ\n+     Err \"Exercise on unknown contract\""
  },
  {
    "id" : "15925917-4b07-4687-818d-3dffe80fcfd6",
    "prId" : 6955,
    "comments" : [
      {
        "id" : "4ab9d644-7b8b-4239-bd5a-c86ef54033f2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we need the `0` indices here and below?",
        "createdAt" : "2020-08-03T10:51:02Z",
        "updatedAt" : "2020-08-03T11:14:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "915337dc-4c6a-4bb6-8311-b5354d8ed3ea",
        "parentId" : "4ab9d644-7b8b-4239-bd5a-c86ef54033f2",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Removed!",
        "createdAt" : "2020-08-03T11:14:29Z",
        "updatedAt" : "2020-08-03T11:14:29Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9aac3c3394fb6245884f63524ea6db94d04e8e05",
    "line" : null,
    "diffHunk" : "@@ -2672,6 +2672,12 @@ as described by the ledger model::\n        ⇓ᵤ\n      Ok (cid, tr) ‖ (st₁, keys₁)\n \n+     cid ∉ dom(st₀)"
  },
  {
    "id" : "5649e965-1f5a-4772-b356-722ca5f5aecd",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "2443ba6c-5e5c-4f01-a095-15e4be7de181",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "At the risk of being too verbose, maybe `ExUpdExercErrActors`?",
        "createdAt" : "2020-07-27T09:45:57Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : null,
    "diffHunk" : "@@ -2673,12 +2673,67 @@ as described by the ledger model::\n      Ok (cid, tr) ‖ (st₁, keys₁)\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' 'consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'inactive')\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercInactive\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀; keys₀)\n+       ⇓ᵤ\n+     Err \"Exercise on inactive contract\"\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercErr1"
  },
  {
    "id" : "024d03c0-55f1-40a2-88c7-1e7ec82a1a40",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "6f807f66-337e-4b3d-86e0-c546ff94dee0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe use more descriptive names than `v_1` and `v_2` here?, e.g., `actors` or `acts` for `v_1`.",
        "createdAt" : "2020-07-27T10:38:17Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f0743dfd-8cb4-4769-b7ba-4654c3ed01b5",
        "parentId" : "6f807f66-337e-4b3d-86e0-c546ff94dee0",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I like the idea but don't want to break the convention of using `v` for values, and `vₐ` is already taken here (see EvUpdExercConsum)... ",
        "createdAt" : "2020-07-27T12:19:30Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "819cc592-b147-4500-a08f-0c8b4f9a142a",
        "parentId" : "6f807f66-337e-4b3d-86e0-c546ff94dee0",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The pattern we use here of giving a grammar for `v` and then using indexed versions of `v` is very customary. Unfortunately, we can't have more complex indices like \"actor\" here unlike in LaTeX.",
        "createdAt" : "2020-07-27T13:35:59Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 26,
    "diffHunk" : "@@ -2673,12 +2673,67 @@ as described by the ledger model::\n      Ok (cid, tr) ‖ (st₁, keys₁)\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' 'consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'inactive')\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercInactive\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀; keys₀)\n+       ⇓ᵤ\n+     Err \"Exercise on inactive contract\"\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercErr1\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ"
  },
  {
    "id" : "a372f6cd-7d63-4ef3-95da-4ddf8abe2385",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "fa940344-0064-4b33-860a-1ef996dda10d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n   —————————————————————————————————————————————————————————————————————— EvUpdExercErrChcBodyEval\r\n```",
        "createdAt" : "2020-07-27T10:43:39Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : null,
    "diffHunk" : "@@ -2673,12 +2673,67 @@ as described by the ledger model::\n      Ok (cid, tr) ‖ (st₁, keys₁)\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' 'consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'inactive')\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercInactive\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀; keys₀)\n+       ⇓ᵤ\n+     Err \"Exercise on inactive contract\"\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercErr1\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n+     v₁ ≠ₛ vₚ\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercBadActors\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st; keys)\n+       ⇓ᵤ\n+     Err \"Exercise actors do not match\"\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n      v₁ =ₛ vₚ\n-     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok uₐ\n+     eₐ[x ↦ vₜ, y ↦ cid, z ↦ v₂]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercErr2"
  },
  {
    "id" : "e6f22834-ff5b-4233-8031-8b2e18ea4810",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "239f6eb3-8ae6-4ec4-8ebe-0d34e4fe84d4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n   —————————————————————————————————————————————————————————————————————— EvUpdExercChcBodyExec\r\n```",
        "createdAt" : "2020-07-27T10:45:06Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "186762c3-5566-44f2-a19e-e35a052e0e86",
        "parentId" : "239f6eb3-8ae6-4ec4-8ebe-0d34e4fe84d4",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "The other rule name change are good -- I went ahead and used them (putting the `Err` at the end to make it more obvious that these are error cases).\r\n\r\nThis particular suggestion is less good, because the name `EvUpdExercConsumErr` doesn't have any ambiguity, and it draws parallels to the similar but different error that can arise out of a non-consuming choice. I'm going to leave this one as it is.",
        "createdAt" : "2020-07-27T12:27:55Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 56,
    "diffHunk" : "@@ -2673,12 +2673,67 @@ as described by the ledger model::\n      Ok (cid, tr) ‖ (st₁, keys₁)\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' 'consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'inactive')\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercInactive\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀; keys₀)\n+       ⇓ᵤ\n+     Err \"Exercise on inactive contract\"\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercErr1\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n+     v₁ ≠ₛ vₚ\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercBadActors\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st; keys)\n+       ⇓ᵤ\n+     Err \"Exercise actors do not match\"\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n      v₁ =ₛ vₚ\n-     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok uₐ\n+     eₐ[x ↦ vₜ, y ↦ cid, z ↦ v₂]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercErr2\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n+       ⇓ᵤ\n+     Err t\n+\n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' 'consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n+     v₁ =ₛ vₚ\n+     eₐ[x ↦ vₜ, y ↦ cid, z ↦ v₂]  ⇓  Ok uₐ\n+     keys₁ = keys₀ - keys₀⁻¹(cid)\n+     st₁ = st₀[cid ↦ (Mod:T, vₜ, 'inactive')]\n+     uₐ ‖ (st₁, keys₁)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercConsumErr"
  },
  {
    "id" : "fe39178b-8f89-4f44-af73-2e3466b3bf56",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "6900febe-31b0-4e27-91b0-b4d12d36c3d2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n     Err \"Fetch of inactive contract\"\r\n```",
        "createdAt" : "2020-07-27T11:28:55Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38f6b008-d62f-49f6-a857-d6cde2513bfc",
        "parentId" : "6900febe-31b0-4e27-91b0-b4d12d36c3d2",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I disagree on the basis that the current error messages that you get don't distinguish between archives/fetches/exercises on inactive contracts, saying they are all \"exercise on inactive contract\"-type errors.",
        "createdAt" : "2020-07-27T12:07:03Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f6193c6-e3e1-49dd-bc6f-50cf17429f2b",
        "parentId" : "6900febe-31b0-4e27-91b0-b4d12d36c3d2",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense :+1:",
        "createdAt" : "2020-07-27T12:12:20Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 146,
    "diffHunk" : "@@ -2688,48 +2743,55 @@ as described by the ledger model::\n      Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'consuming' trₐ) ‖ (st₂, keys₂)\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' 'non-consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' 'non-consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[z ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n      v₁ =ₛ vₚ\n-     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok uₐ\n-     uₐ ‖ (st₀; keys₀)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ (st₁, keys₁)\n-   —————————————————————————————————————————————————————————————————————— EvUpdExercNonConsum\n+     eₐ[x ↦ vₜ, y ↦ cid, z ↦ v₂]  ⇓  Ok uₐ\n+     uₐ ‖ (st₀; keys₀)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercNonConsumErr\n      'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'non-consuming' trₐ) ‖ (st₁, keys₁)\n+     Err t\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' 'non-consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n-     st₀(cid) = (Mod:T, vₜ, 'inactive')\n-   —————————————————————————————————————————————————————————————————————— EvUpdExercInactive\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀; keys₀)\n+     st₀(cid) = (Mod:T, vₜ, 'active')\n+     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n+     v₁ =ₛ vₚ\n+     eₐ[x ↦ vₜ, y ↦ cid, z ↦ v₂]  ⇓  Ok uₐ\n+     uₐ ‖ (st₀; keys₀)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ (st₁, keys₁)\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercNonConsum\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Err \"Exercise on inactive contract\" ‖ (st₀; keys₀)\n+     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'non-consuming' trₐ) ‖ (st₁, keys₁)\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[x ↦ vₜ]  ⇓  Ok vₚ\n-     v₁ ≠ₛ vₚ\n-   —————————————————————————————————————————————————————————————————————— EvUpdExercBadActors\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st; keys)\n-       ⇓ᵤ\n-     Err \"Exercise actors do not match\"  ‖ (st; keys)\n+     eₚ[x ↦ vₜ, z ↦ v₁]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdExercWithoutActorsErr\n+     'exercise_without_actors' Mod:T.Ch cid v₁ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n \n      'tpl' (x : T)\n-         ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : 'ContractId' Mod:T) (z : τ) : σ 'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n-     'exercise' Mod:T.Ch cid vₚ v₁ ‖ (st₀, keys₀)  ⇓ᵤ  ur ‖ (st₁, keys₁)\n+     eₚ[x ↦ vₜ, z ↦ v₁]  ⇓  Ok vₚ\n+     'exercise' Mod:T.Ch cid vₚ v₁ ‖ (st₀, keys₀)  ⇓ᵤ  ur\n    —————————————————————————————————————————————————————————————————————— EvUpdExercWithoutActors\n-     'exercise_without_actors' Mod:T.Ch cid v₁ ‖ (st₀, keys₀)\n+     'exercise_without_actors' Mod:T.Ch cid v₁ ‖ (st₀, keys₀)  ⇓ᵤ  ur\n+\n+     'tpl' (x : T) ↦ …  ∈  〚Ξ〛Mod\n+     cid ∈ dom(st)\n+     st(cid) = (Mod:T, vₜ, 'inactive')\n+   —————————————————————————————————————————————————————————————————————— EvUpdFetchInactive\n+     'fetch' @Mod:T cid ‖ (st; keys)\n        ⇓ᵤ\n-     ur ‖ (st₁, keys₁)\n+     Err \"Exercise on inactive contract\""
  },
  {
    "id" : "0256119f-7e0d-44dd-9444-d67e8ab6d008",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "57e49fa1-7072-411a-9b01-0868c2926013",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n     Err \"Fetch of inactive contract\"\r\n```",
        "createdAt" : "2020-07-27T11:33:50Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 192,
    "diffHunk" : "@@ -2739,58 +2801,62 @@ as described by the ledger model::\n        ⇓ᵤ\n      Ok (vₜ, ε) ‖ (st; keys)\n \n-      e  ⇓  Ok vₖ\n-      (Mod:T, vₖ) ∈ dom(keys₀)      cid = keys((Mod:T, v))\n-      st(cid) = (Mod:T, vₜ, 'active')\n-   —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyFound\n-     'fetch_by_key' @Mod:T e ‖ (st; keys)\n-        ⇓ᵤ\n-     Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ (st; keys)\n+     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈ 〚Ξ〛Mod\n+     (eₘ vₖ)  ⇓  Err t\n+     (Mod:T, vₖ) ∉ dom(keys₀)\n+    —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyErr\n+     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)  ⇓ᵤ  Err t\n \n      'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     e  ⇓  Ok vₖ\n-     (eₘ vₖ)  ⇓  vₘ\n+     (eₘ vₖ)  ⇓  Ok  vₘ\n      (Mod:T, vₖ) ∉ dom(keys₀)\n     —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyNotFound\n-     'fetch_by_key' @Mod:T e ‖ (st; keys)\n+     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)\n         ⇓ᵤ\n-     Err \"Lookup key not found\"  ‖ (st; keys)\n+     Err \"Lookup key not found\"\n \n      'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     e  ⇓  Ok vₖ\n-     (eₘ vₖ)  ⇓  vₘ\n-     (Mod:T, vₖ) ∈ dom(keys)   cid = keys((Mod:T, v))\n-   —————————————————————————————————————————————————————————————————————— EvUpdLookupByKeyErr1\n-     'lookup_by_key' @Mod:T e ‖ (st; keys) ⇓ᵤ Err t\n+     (eₘ vₖ)  ⇓  Ok  vₘ\n+     (Mod:T, vₖ) ∈ dom(keys)\n+     cid = keys((Mod:T, v))\n+     st(cid) = (Mod:T, vₜ, 'inactive')\n+   —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyInactive\n+     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)\n+        ⇓ᵤ\n+     Err \"Exercise on inactive contract\""
  },
  {
    "id" : "6d1b485c-7b38-4892-85e0-167d8b81941a",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "1d9fa30f-b3f2-4de1-a6e6-2998ec30aecc",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The comment should not be there. This log tracks semantics changes or serialization changes by version. Here we did not change the `dev` version of LF, but \"fix\" a bug in the spec for all version of LF.\r\nWe usually do not track bug fixes in the specification, I will do the same for this change. ",
        "createdAt" : "2020-07-06T08:19:06Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : null,
    "diffHunk" : "@@ -298,6 +298,11 @@ Version: 1.dev\n \n   + **Add** generic map type ``GenMap``.\n \n+  + **Change** the operational semantics to make the evaluation order of\n+    sub-expressions, and memoization of values, implementation-defined.\n+    This change preserves the determinism of ``Ok`` results, but makes\n+    ``Err`` results non-deterministic.\n+"
  },
  {
    "id" : "4e4a219f-652a-4cda-af09-a893f2f1506d",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "8052bb7f-1f7f-4ed1-a044-9a277bebff8c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Isn't this is a breaking change because we removed the (uninhabited) kind `k -> nat`? This would be a problem since DAML Engine needs to be able to load DARs which contain type abstractions of this kind.\r\nI would suggest we keep the definition of kinds as is and add the notion of \"erasable kinds\" as defined above on top of that. Then one can prove that each kind `k` satisfies one of the following three:\r\n1. `k` is erasable.\r\n2. There are `k_1, ..., k_n` with `n >= 1` and `k = k_1 -> k2 -> ... -> k_n -> nat` and hence `k` is uninhabited and can hence be erased at runtime as well.\r\n3. `k = nat`. This is the case where we need to demote from the type to the value level.",
        "createdAt" : "2020-07-08T16:20:20Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f53e115e-e3c6-4025-a387-968651856cdb",
        "parentId" : "8052bb7f-1f7f-4ed1-a044-9a277bebff8c",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "The problem is that the speedy compiler currently blows up if you try to apply `f` when it has kind `* -> nat`. You can introduce such variables with a forall or type lambda. This makes it an illegal kind in some ways but not others. It sounds like you want to do something else in these cases?\r\n\r\nFor example, the term `/\\(f : * -> nat). ADD_NUMERIC @(f Unit)` is perfectly valid under current LF spec, but speedy will balk before it even tries to run it. \r\n\r\nI feel like outlawing this kind construction outright is better than giving it any sort of semantics in Speedy.",
        "createdAt" : "2020-07-08T16:57:35Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4ad50717-af44-45a7-93da-3f113b1c4c2b",
        "parentId" : "8052bb7f-1f7f-4ed1-a044-9a277bebff8c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@sofiafaro-da I understand that the change to the spec you suggested would bring it in line with the implementation. The implementation would not stop accepting DARs it has accepted before. Is that correct? If so, then I'm on board.",
        "createdAt" : "2020-07-09T07:35:02Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "62dc60bd-c397-4d51-b3ae-0b8d745319e1",
        "parentId" : "8052bb7f-1f7f-4ed1-a044-9a277bebff8c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@sofiafaro-da The implementation will not blow up, because as stated  by @hurryabit the kind `⋆ →nat` is uninhabited. Speedy compiler will handle `/\\(f : * -> nat). ADD_NUMERIC @(f Unit)` (producing some garbage code), \r\nbut one cannot run this latter, because there exists no `f` of kind  `⋆ →nat`\r\n\r\nI add 3 tests in #6618 (could you merge it with the current PR):\r\n* One checks that `⋆ →nat` is a valid kind\r\n* One checks that `⋆ →nat` is inhabited. \r\n* `/\\(f : * -> nat). ADD_NUMERIC @(f Unit)` can be evaluated without blowing up.",
        "createdAt" : "2020-07-09T08:20:05Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9824b5bd-9d2a-4a6f-8198-5d9efa4876ee",
        "parentId" : "8052bb7f-1f7f-4ed1-a044-9a277bebff8c",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "We discussed this extensively and came up with a counterexample, where keeping `* -> nat` causes problems in the engine (causes a runtime type error):\r\n\r\n```\r\nlet g: forall(n:nat). Int64 = /\\(n: nat). 1\r\nin /\\(f: * -> nat). ADD_INT64 10 (g @(f Unit))\r\n```\r\n\r\nBecause of the interaction between the erasable kind `* -> nat` and non-erasable kind `nat`. We definitely want to avoid this by outlawing `* -> nat` as I proposed here.",
        "createdAt" : "2020-07-20T15:29:00Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 12,
    "diffHunk" : "@@ -593,9 +593,13 @@ Then we can define our kinds, types, and expressions::\n \n   Kinds\n     k\n+      ::= 'nat'                                     -- KindNat\n+       | ek                                         -- KindErasable\n+\n+  Erasable Kind\n+    ek\n       ::= ⋆                                         -- KindStar\n-       |  'nat'                                     -- KindNat\n-       |  k₁ → k₂                                   -- KindArrow\n+       | k → ek                                     -- KindArrow"
  },
  {
    "id" : "ad550807-272f-4b5e-9fe8-4a98a7b5e7c7",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "7fee8a9a-4739-4991-bbab-5cb5dc959ec4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In the long run we probably need to distinguish different error classes, such as errors raised via `error`, arithmetic errors, pattern match failures, etc. I would suggest making that the subject of a separate PR though.",
        "createdAt" : "2020-07-08T16:30:36Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ab222df5-a177-42e8-8c06-fef535e241a2",
        "parentId" : "7fee8a9a-4739-4991-bbab-5cb5dc959ec4",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I think that can be done easily enough by giving `t` some structure, without really changing most of the semantics.",
        "createdAt" : "2020-07-08T17:01:31Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 160,
    "diffHunk" : "@@ -1955,187 +1975,326 @@ exact output.\n \n ::\n \n-  Evaluation environment\n-    E ::= ε                                         -- EnvEmpty\n-       |  Mod:W ↦ v · E                             -- EnvVal\n-\n   Evaluation result\n     r ::= Ok v                                      -- ResOk\n        |  Err t                                     -- ResErr"
  },
  {
    "id" : "7e4c0b0c-7803-4412-a795-1365329bbd3c",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "438e724d-7df6-47c8-8979-3b3fa768959c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we make it clearer that `e_2, ..., e_{i-1}` need to succeed as well? The same occurs a few more times below.",
        "createdAt" : "2020-07-08T16:32:56Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ffd9b6f-2573-4002-a285-d773d957d99b",
        "parentId" : "438e724d-7df6-47c8-8979-3b3fa768959c",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Would it be clear enough as:\r\n\r\n```\r\n      e₁  ⇓  Ok v₁\r\n        ⋮\r\n      eᵢ₋₁  ⇓  Ok ᵢ₋₁\r\n      eᵢ  ⇓  Err t\r\n```",
        "createdAt" : "2020-07-08T16:45:45Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "095232c1-2ad4-46ab-a689-4c9891ee370d",
        "parentId" : "438e724d-7df6-47c8-8979-3b3fa768959c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yes, that should make it crystal clear. (There's a `v` missing in the penultimate line.)",
        "createdAt" : "2020-07-08T16:54:54Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 316,
    "diffHunk" : "@@ -1955,187 +1975,326 @@ exact output.\n \n ::\n \n-  Evaluation environment\n-    E ::= ε                                         -- EnvEmpty\n-       |  Mod:W ↦ v · E                             -- EnvVal\n-\n   Evaluation result\n     r ::= Ok v                                      -- ResOk\n        |  Err t                                     -- ResErr\n \n-                           ┌───────────────────┐\n-  Big-step evaluation      │ e ‖ E₁  ⇓  r ‖ E₂ │\n-                           └───────────────────┘\n+                           ┌──────────┐\n+  Big-step evaluation      │ e  ⇓  r  │\n+                           └──────────┘\n \n     —————————————————————————————————————————————————————————————————————— EvValue\n-      v ‖ E  ⇓  Ok v ‖ E\n+      v   ⇓  Ok v\n+\n+\n+      e   ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasableErr\n+      Λ α : ek . e  ⇓  Err t\n+\n+\n+      e   ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasable\n+      Λ α : ek . e  ⇓  Ok (Λ α : ek . v)\n+\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr1\n+      e₁ e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr2\n+      e₁ e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok (λ x : τ . e) ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-      e[x ↦ v₂] ‖ E₂  ⇓  r ‖ E₃\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Ok v₂\n+      e[x ↦ v₂]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpApp\n-      e₁ e₂ ‖ E₀  ⇓  r ‖ E₃\n+      e₁ e₂  ⇓  r\n \n-      e₁ ‖ E₀  ⇓  Ok (Λ α : k . e) ‖ E₁\n-      e[α ↦ τ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpTyAppErr\n+      e₁ @τ  ⇓  Err t\n+\n+      e₁  ⇓  Ok (Λ α : k . e)\n+      e[α ↦ τ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpTyApp\n-      e₁ @τ ‖ E₀  ⇓  r ‖ E₂\n+      e₁ @τ  ⇓  r\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpLetErr\n+      'let' x : τ = e₁ 'in' e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂[x ↦ v₁] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁\n+      e₂[x ↦ v₁]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n-      'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n+      'let' x : τ = e₁ 'in' e₂  ⇓  r\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpToAnyErr\n+      'to_any' @τ e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpToAny\n-      'to_any' @τ e ‖ E₀  ⇓  Ok('to_any' @τ v) ‖ E₁\n+      'to_any' @τ e  ⇓  Ok ('to_any' @τ v)\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ v) ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyErr\n+      'from_any' @τ e  ⇓  Err t\n+\n+      e  ⇓  Ok ('to_any' @τ v)\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnySucc\n-      'from_any' @τ e ‖ E₀  ⇓  'Some' @τ v ‖ E₁\n+      'from_any' @τ e  ⇓  Ok ('Some' @τ v)\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ₁ v) ‖ E₁     τ₁ ≠ τ₂\n+      e  ⇓  Ok ('to_any' @τ₁ v)     τ₁ ≠ τ₂\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnyFail\n-      'from_any' @τ₂ e ‖ E₀  ⇓  'None' ‖ E₁\n+      'from_any' @τ₂ e  ⇓  Ok 'None'\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n       v 'matches' p₁  ⇝  Succ (x₁ ↦ v₁ · … · xₘ ↦ vₘ · ε)\n-      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseSucc\n-      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ } ‖ E₀  ⇓  r ‖ E₂\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁    v₁ 'matches' p₁  ⇝  Fail\n-      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ } ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁    v₁ 'matches' p₁  ⇝  Fail\n+      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ }  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseFail\n-      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ‖ E₀\n-        ⇓\n-      r ‖ E₂\n+      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ⇓ r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁     v 'matches' p  ⇝  Fail\n-    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n-      'case' e₁ 'of' { p → e } ‖ E₀  ⇓  Err \"match error\" ‖ E₁\n+      e₁  ⇓  Ok v₁     v 'matches' p  ⇝  Fail\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseEmpty\n+      'case' e₁ 'of' { p → e }  ⇓  Err \"match error\"\n+\n+       eₕ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr1\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n \n-       eₕ ‖ E₀  ⇓  Ok vₕ ‖ E₁\n-       eₜ ‖ E₁  ⇓  Ok vₜ ‖ E₂\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr2\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n+\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Ok vₜ\n     —————————————————————————————————————————————————————————————————————— EvExpCons\n-      'Cons' @τ eₕ eₜ ‖ E₀  ⇓  Ok ('Cons' @τ vₕ vₜ) ‖ E₂\n+      'Cons' @τ eₕ eₜ  ⇓  Ok ('Cons' @τ vₕ vₜ)\n+\n+       e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpSomeErr\n+      'Some' @τ e  ⇓  Err t\n \n-       e ‖ E₀  ⇓  Ok v ‖ E₁\n+       e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpSome\n-      'Some' @τ e ‖ E₀  ⇓  Ok ('Some' @τ v) ‖ E₂\n+      'Some' @τ e  ⇓  Ok ('Some' @τ v)\n+\n+      𝕋(F) = ∀ (α₁: ⋆). … ∀ (αₘ: ⋆). σ₁ → … → σₙ → σ\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eᵢ  ⇓  Err t"
  },
  {
    "id" : "902e6958-d7a9-4842-8bc5-ebe90becbca3",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "3361a89c-40b1-4018-9d17-19a6f8ee6acb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Our syntax for record projections looks really weird. 🤔 ",
        "createdAt" : "2020-07-08T16:34:25Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fb85230e-0948-48bf-b25f-c6d0ded697a5",
        "parentId" : "3361a89c-40b1-4018-9d17-19a6f8ee6acb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@hurryabit please propose a syntax that we can easily add to the daml-lf parser. ",
        "createdAt" : "2020-07-09T08:22:34Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 364,
    "diffHunk" : "@@ -1955,187 +1975,326 @@ exact output.\n \n ::\n \n-  Evaluation environment\n-    E ::= ε                                         -- EnvEmpty\n-       |  Mod:W ↦ v · E                             -- EnvVal\n-\n   Evaluation result\n     r ::= Ok v                                      -- ResOk\n        |  Err t                                     -- ResErr\n \n-                           ┌───────────────────┐\n-  Big-step evaluation      │ e ‖ E₁  ⇓  r ‖ E₂ │\n-                           └───────────────────┘\n+                           ┌──────────┐\n+  Big-step evaluation      │ e  ⇓  r  │\n+                           └──────────┘\n \n     —————————————————————————————————————————————————————————————————————— EvValue\n-      v ‖ E  ⇓  Ok v ‖ E\n+      v   ⇓  Ok v\n+\n+\n+      e   ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasableErr\n+      Λ α : ek . e  ⇓  Err t\n+\n+\n+      e   ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasable\n+      Λ α : ek . e  ⇓  Ok (Λ α : ek . v)\n+\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr1\n+      e₁ e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr2\n+      e₁ e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok (λ x : τ . e) ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-      e[x ↦ v₂] ‖ E₂  ⇓  r ‖ E₃\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Ok v₂\n+      e[x ↦ v₂]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpApp\n-      e₁ e₂ ‖ E₀  ⇓  r ‖ E₃\n+      e₁ e₂  ⇓  r\n \n-      e₁ ‖ E₀  ⇓  Ok (Λ α : k . e) ‖ E₁\n-      e[α ↦ τ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpTyAppErr\n+      e₁ @τ  ⇓  Err t\n+\n+      e₁  ⇓  Ok (Λ α : k . e)\n+      e[α ↦ τ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpTyApp\n-      e₁ @τ ‖ E₀  ⇓  r ‖ E₂\n+      e₁ @τ  ⇓  r\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpLetErr\n+      'let' x : τ = e₁ 'in' e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂[x ↦ v₁] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁\n+      e₂[x ↦ v₁]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n-      'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n+      'let' x : τ = e₁ 'in' e₂  ⇓  r\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpToAnyErr\n+      'to_any' @τ e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpToAny\n-      'to_any' @τ e ‖ E₀  ⇓  Ok('to_any' @τ v) ‖ E₁\n+      'to_any' @τ e  ⇓  Ok ('to_any' @τ v)\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ v) ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyErr\n+      'from_any' @τ e  ⇓  Err t\n+\n+      e  ⇓  Ok ('to_any' @τ v)\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnySucc\n-      'from_any' @τ e ‖ E₀  ⇓  'Some' @τ v ‖ E₁\n+      'from_any' @τ e  ⇓  Ok ('Some' @τ v)\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ₁ v) ‖ E₁     τ₁ ≠ τ₂\n+      e  ⇓  Ok ('to_any' @τ₁ v)     τ₁ ≠ τ₂\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnyFail\n-      'from_any' @τ₂ e ‖ E₀  ⇓  'None' ‖ E₁\n+      'from_any' @τ₂ e  ⇓  Ok 'None'\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n       v 'matches' p₁  ⇝  Succ (x₁ ↦ v₁ · … · xₘ ↦ vₘ · ε)\n-      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseSucc\n-      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ } ‖ E₀  ⇓  r ‖ E₂\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁    v₁ 'matches' p₁  ⇝  Fail\n-      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ } ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁    v₁ 'matches' p₁  ⇝  Fail\n+      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ }  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseFail\n-      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ‖ E₀\n-        ⇓\n-      r ‖ E₂\n+      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ⇓ r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁     v 'matches' p  ⇝  Fail\n-    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n-      'case' e₁ 'of' { p → e } ‖ E₀  ⇓  Err \"match error\" ‖ E₁\n+      e₁  ⇓  Ok v₁     v 'matches' p  ⇝  Fail\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseEmpty\n+      'case' e₁ 'of' { p → e }  ⇓  Err \"match error\"\n+\n+       eₕ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr1\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n \n-       eₕ ‖ E₀  ⇓  Ok vₕ ‖ E₁\n-       eₜ ‖ E₁  ⇓  Ok vₜ ‖ E₂\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr2\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n+\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Ok vₜ\n     —————————————————————————————————————————————————————————————————————— EvExpCons\n-      'Cons' @τ eₕ eₜ ‖ E₀  ⇓  Ok ('Cons' @τ vₕ vₜ) ‖ E₂\n+      'Cons' @τ eₕ eₜ  ⇓  Ok ('Cons' @τ vₕ vₜ)\n+\n+       e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpSomeErr\n+      'Some' @τ e  ⇓  Err t\n \n-       e ‖ E₀  ⇓  Ok v ‖ E₁\n+       e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpSome\n-      'Some' @τ e ‖ E₀  ⇓  Ok ('Some' @τ v) ‖ E₂\n+      'Some' @τ e  ⇓  Ok ('Some' @τ v)\n+\n+      𝕋(F) = ∀ (α₁: ⋆). … ∀ (αₘ: ⋆). σ₁ → … → σₙ → σ\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpBuiltinErr\n+      F @τ₁ … @τₘ e₁ … eₙ  ⇓  Err t\n \n       𝕋(F) = ∀ (α₁: ⋆). … ∀ (αₘ: ⋆). σ₁ → … → σₙ → σ\n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpBuiltin\n-      F @τ₁ … @τₘ eᵢ … eₙ ‖ E₀  ⇓  𝕆(F @τ₁ … @τₘ v₁ … vₙ) ‖ Eₙ\n+      F @τ₁ … @τₘ e₁ … eₙ  ⇓  𝕆(F @τ₁ … @τₘ v₁ … vₙ)\n \n-      'val' W : τ ↦ e  ∈ 〚Ξ〛Mod      Mod:W ↦ … ∉ Eₒ\n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpNonCachedVal\n-      Mod:W ‖ E₀  ⇓  Ok v ‖ Mod:W ↦ v · E₁\n+      'val' W : τ ↦ e  ∈ 〚Ξ〛Mod\n+      e  ⇓  r\n+    —————————————————————————————————————————————————————————————————————— EvExpVal\n+      Mod:W  ⇓  r\n \n-      Mod:W ↦ v ∈ E₀\n-    —————————————————————————————————————————————————————————————————————— EvExpCachedVal\n-      Mod:W ‖ E₀  ⇓  Ok v ‖ E₀\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecConErr\n+      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ}\n+        ⇓\n+      Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpRecCon\n-      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ} ‖ E₀\n+      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ}\n         ⇓\n-      Ok (Mod:T @τ₁ … @τₘ {f₁ = v₁, …, fₙ = ₙ}) ‖ Eₙ\n+      Ok (Mod:T @τ₁ … @τₘ {f₁ = v₁, …, fₙ = ₙ})\n \n-      e ‖ E₀  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ}) ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecProjErr\n+      Mod:T @τ₁ … @τₘ {fᵢ} e  ⇓  Err t"
  },
  {
    "id" : "1030ad04-ddc0-4cc3-a020-dd571c4c572d",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "e59cfd04-893b-4766-9ec7-37f2a5bac686",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What happens in these cases?",
        "createdAt" : "2020-07-08T16:38:09Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5f49dee-a4fc-4cfc-82cb-f3ebecbd2418",
        "parentId" : "e59cfd04-893b-4766-9ec7-37f2a5bac686",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I will specify this -- was waiting for some feedback first. :-)",
        "createdAt" : "2020-07-08T17:02:15Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "74fa0e74-fe97-4522-b465-bc5958b195f6",
        "parentId" : "e59cfd04-893b-4766-9ec7-37f2a5bac686",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yeah, I only read the PR description after reviewing the code. It's not the first time that happens to me. I should change my habits in this regard... Apologies.",
        "createdAt" : "2020-07-09T07:08:46Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : null,
    "diffHunk" : "@@ -2218,179 +2377,177 @@ as described by the ledger model::\n         |  Err v\n \n \n-                                    ┌──────────────────────────────┐\n-  Big-step update interpretation    │ u ‖ E₀ ; S₀ ⇓ᵤ ur ‖ E₁ ; S₁  │\n-                                    └──────────────────────────────┘\n+                                    ┌───────────────────┐\n+  Big-step update interpretation    │ u ‖ S₀ ⇓ᵤ ur ‖ S₁ │\n+                                    └───────────────────┘\n \n    —————————————————————————————————————————————————————————————————————— EvUpdPure\n-     'pure' v ‖ E ; (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ E ; (st, keys)\n+     'pure' v ‖ (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ (st, keys)\n \n-     u₁ ‖ E₀ ; (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ E₁ ; (st₁, keys₁)\n-     e₂[x ↦ v₁] ‖ E₁  ⇓  Ok u₂ ‖ E₂\n-     u₂ ‖ E₂ ; (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ E₃ ; (st₂, keys₂)\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Ok u₂\n+     u₂ ‖ (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ (st₂, keys₂)\n    —————————————————————————————————————————————————————————————————————— EvUpdBind\n-     'bind' x : τ ← u₁ ; e₂ ‖ E₀ ;  (st₀, keys₀)\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (v₂, tr₁ · tr₂) ‖ E₃ ;  (st₂, keys₂)\n+     Ok (v₂, tr₁ · tr₂) ‖ (st₂, keys₂)\n \n      'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     eₘ vₖ ‖ E₁  ⇓  Ok vₘ ‖ E₂\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Ok vₘ\n      cid ∉ dom(st₀)      vₖ ∉ dom(keys₀)\n      tr = 'create' (cid, Mod:T, vₜ)\n      st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n      keys₁ = keys₀[(Mod:T, vₖ) ↦ cid]\n    —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeySucceed\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (cid, tr) ‖ E₁ ; (st₁,  keys₁)\n+     Ok (cid, tr) ‖ (st₁,  keys₁)\n \n      'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n      cid ∉ dom(st₀)      (Mod:T, vₖ) ∈ dom(keys₀)\n    —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyFail\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Err \"Mod:T template key violation\"  ‖ E₁ ; (st₀, keys₀)\n+     Err \"Mod:T template key violation\"  ‖ (st₀, keys₀)\n \n      'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n      cid ∉ dom(st₀)\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ  ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     eₘ vₖ ‖ E₂  ⇓  Ok vₘ ‖ E₃\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₖ   ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Ok vₘ\n      tr = 'create' (cid, Mod:T, vₜ, 'no_key')\n      st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n    —————————————————————————————————————————————————————————————————————— EvUpdCreateWihoutKeySucceed\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (cid, tr) ‖ E₁ ; (st₁, keys₀)\n+     Ok (cid, tr) ‖ (st₁, keys₀)\n \n      'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₁  ⇓  Ok 'False' ‖ E₂\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'False'\n    —————————————————————————————————————————————————————————————————————— EvUpdCreateFail\n-     'create' @Mod:T vₜ ‖ E₀ ; (st, keys)\n+     'create' @Mod:T vₜ ‖ (st, keys)\n        ⇓ᵤ\n-     Err \"template precondition violated\"  ‖ E_ ; (st, keys)\n+     Err \"template precondition violated\"  ‖ (st, keys)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' 'consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ v₂, x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n+     eₚ[y ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n      v₁ =ₛ vₚ\n-     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ] ‖ E₁  ⇓  Ok uₐ ‖ E₂\n+     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok uₐ\n      keys₁ = keys₀ - keys₀⁻¹(cid)\n      st₁ = st₀[cid ↦ (Mod:T, vₜ, 'inactive')]\n-     uₐ ‖ E₂ ; (st₁, keys₁)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ E₃ ; (st₂, keys₂)\n+     uₐ ‖ (st₁, keys₁)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ (st₂, keys₂)\n    —————————————————————————————————————————————————————————————————————— EvUpdExercConsum\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st₀, keys₀)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'consuming' trₐ) ‖ E₃ ; (st₂, keys₂)\n+     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'consuming' trₐ) ‖ (st₂, keys₂)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' 'non-consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[z ↦ v₂, x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n+     eₚ[z ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n      v₁ =ₛ vₚ\n-     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ] ‖ E₁  ⇓  Ok uₐ ‖ E₂\n-     uₐ ‖ E₂ ; (st₀; keys₀)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ E₃ ; (st₁, keys₁)\n+     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok uₐ\n+     uₐ ‖ (st₀; keys₀)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ (st₁, keys₁)\n    —————————————————————————————————————————————————————————————————————— EvUpdExercNonConsum\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st₀, keys₀)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'non-consuming' trₐ) ‖ E₃ ; (st₁, keys₁)\n+     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'non-consuming' trₐ) ‖ (st₁, keys₁)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'inactive')\n    —————————————————————————————————————————————————————————————————————— EvUpdExercInactive\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st₀; keys₀)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀; keys₀)\n        ⇓ᵤ\n-     Err \"Exercise on inactive contract\" ‖ E₀ ; (st₀; keys₀)\n+     Err \"Exercise on inactive contract\" ‖ (st₀; keys₀)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n+     eₚ[x ↦ vₜ]  ⇓  Ok vₚ\n      v₁ ≠ₛ vₚ\n    —————————————————————————————————————————————————————————————————————— EvUpdExercBadActors\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st; keys)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st; keys)\n        ⇓ᵤ\n-     Err \"Exercise actors do not match\"  ‖ E₁ ; (st; keys)\n+     Err \"Exercise actors do not match\"  ‖ (st; keys)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ cid, z ↦ v₂, x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n-     'exercise' Mod:T.Ch cid vₚ v₁ ‖ E₁ ; (st₀, keys₀)  ⇓ᵤ  ur ‖ E₂ ; (st₁, keys₁)\n+     eₚ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n+     'exercise' Mod:T.Ch cid vₚ v₁ ‖ (st₀, keys₀)  ⇓ᵤ  ur ‖ (st₁, keys₁)\n    —————————————————————————————————————————————————————————————————————— EvUpdExercWithoutActors\n-     'exercise_without_actors' Mod:T.Ch cid v₁ ‖ E₀ ; (st₀, keys₀)\n+     'exercise_without_actors' Mod:T.Ch cid v₁ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     ur ‖ E₂ ; (st₁, keys₁)\n+     ur ‖ (st₁, keys₁)\n \n      'tpl' (x : T) ↦ …  ∈  〚Ξ〛Mod\n      cid ∈ dom(st)\n      st(cid) = (Mod:T, vₜ, 'active')\n    —————————————————————————————————————————————————————————————————————— EvUpdFetch\n-     'fetch' @Mod:T cid ‖ E ; (st; keys)\n+     'fetch' @Mod:T cid ‖ (st; keys)\n        ⇓ᵤ\n-     Ok (vₜ, ε) ‖ E ; (st; keys)\n+     Ok (vₜ, ε) ‖ (st; keys)\n \n-      e ‖ E₀  ⇓  Ok vₖ ‖ E₁\n+      e  ⇓  Ok vₖ\n       (Mod:T, vₖ) ∈ dom(keys₀)      cid = keys((Mod:T, v))\n       st(cid) = (Mod:T, vₜ, 'active')\n    —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyFound\n-     'fetch_by_key' @Mod:T e ‖ E₀ ; (st; keys)\n+     'fetch_by_key' @Mod:T e ‖ (st; keys)\n         ⇓ᵤ\n-     Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ E₁ ; (st; keys)\n+     Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ (st; keys)\n \n      'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     e ‖ E₀  ⇓  Ok vₖ ‖ E₁\n-     (eₘ vₖ) ‖ E₁  ⇓  vₘ ‖ E₂\n+     e  ⇓  Ok vₖ\n+     (eₘ vₖ)  ⇓  vₘ\n      (Mod:T, vₖ) ∉ dom(keys₀)\n     —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyNotFound\n-     'fetch_by_key' @Mod:T e ‖ E₀ ; (st; keys)\n+     'fetch_by_key' @Mod:T e ‖ (st; keys)\n         ⇓ᵤ\n-     Err \"Lookup key not found\"  ‖ E₂ ; (st; keys)\n+     Err \"Lookup key not found\"  ‖ (st; keys)\n \n      'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     e ‖ E₀  ⇓  Ok vₖ ‖ E₁\n-     (eₘ vₖ) ‖ E₁  ⇓  vₘ ‖ E₂\n+     e  ⇓  Ok vₖ\n+     (eₘ vₖ)  ⇓  vₘ\n      (Mod:T, vₖ) ∈ dom(keys)   cid = keys((Mod:T, v))\n    —————————————————————————————————————————————————————————————————————— EvUpdLookupByKeyFound\n-     'look_by_key' @Mod:T e ‖ E₀ ; (st; keys)\n+     'look_by_key' @Mod:T e ‖ (st; keys)\n        ⇓ᵤ\n-     Ok ('Some' @(Contract:Id Mod:T) cid) ‖ E₁ ; (st; keys)\n+     Ok ('Some' @(Contract:Id Mod:T) cid) ‖ (st; keys)\n \n      'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     e ‖ E₀  ⇓  Ok vₖ ‖ E₁\n-     (eₘ vₖ) ‖ E₁  ⇓  vₘ ‖ E₂\n+     e  ⇓  Ok vₖ\n+     (eₘ vₖ)  ⇓  vₘ\n      (Mod:T, vₖ) ∉ dom(keys)\n    —————————————————————————————————————————————————————————————————————— EvUpdLookupByKeyNotFound\n-     'look_by_key' @Mod:T e ‖ E₀ ; (st; keys)\n+     'look_by_key' @Mod:T e ‖ (st; keys)\n          ⇓ᵤ\n-     Ok ('None' @(Contract:Id Mod:T)) ‖ E₁ ; (st; keys)\n+     Ok ('None' @(Contract:Id Mod:T)) ‖ (st; keys)\n \n      LitTimestamp is the current ledger time\n    —————————————————————————————————————————————————————————————————————— EvUpdGetTime\n-     'get_time' ‖ E ; (st; keys)\n+     'get_time' ‖ (st; keys)\n        ⇓ᵤ\n-     Ok (LitTimestamp, ε) ‖ E ; (st; keys)\n+     Ok (LitTimestamp, ε) ‖ (st; keys)\n \n-     e  ‖ E₀  ⇓  Ok u ‖ E₁\n-     u ‖ E₁ ; st₀  ⇓ᵤ  ur ‖ E₂ ; st₁\n+     e   ⇓  Ok u\n+     u ‖ st₀  ⇓ᵤ  ur ‖ st₁\n    —————————————————————————————————————————————————————————————————————— EvUpdEmbedExpr\n-     'embed_expr' @τ e ‖ E₀; st₀  ⇓ᵤ  ur ‖ E₂ ; st₁\n+     'embed_expr' @τ e; st₀  ⇓ᵤ  ur ‖ st₁\n \n \n-Similar to expression evaluation, we do not explicitly specify the\n-cases where sub-expressions fail. Those case can be inferred in a\n-straightforward way by following the left-to-right evaluation order.\n+We do not explicitly specify the cases where sub-expressions fail."
  },
  {
    "id" : "69c509b9-104d-4bc7-81d9-251bcd6eddf9",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "af3d6d0e-d722-4f7c-b36c-5915b0bb1000",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-21T07:39:40Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : null,
    "diffHunk" : "@@ -1740,17 +1752,108 @@ need to be evaluated further. ::\n    ——————————————————————————————————————————————————— ValExpTypeRep\n      ⊢ᵥ  'type_rep' @τ\n \n+     ⊢ᵥᵤ  u\n    ——————————————————————————————————————————————————— ValUpdate\n      ⊢ᵥ  u\n \n+     ⊢ᵥₛ  s\n    ——————————————————————————————————————————————————— ValScenario\n      ⊢ᵥ  s\n \n \n+                           ┌────────┐\n+   Update Values           │ ⊢ᵥᵤ  u │\n+                           └────────┘\n+\n+     ⊢ᵥ  e\n+   ——————————————————————————————————————————————————— ValUpdatePure\n+     ⊢ᵥᵤ  'pure' @τ e\n+\n+     ⊢ᵥ  e₁\n+   ——————————————————————————————————————————————————— ValUpdateBind\n+     ⊢ᵥᵤ  'bind' x₁ : τ₁ ← e₁ 'in' e₂\n+\n+     ⊢ᵥ  e\n+   ——————————————————————————————————————————————————— ValUpdateCreate\n+     ⊢ᵥᵤ  'create' @Mod:T e\n+\n+     ⊢ᵥ  e\n+   ——————————————————————————————————————————————————— ValUpdateFetch\n+     ⊢ᵥᵤ  'fetch' @Mod:T e\n+\n+     ⊢ᵥ  e₁\n+     ⊢ᵥ  e₂\n+     ⊢ᵥ  e₃\n+   ——————————————————————————————————————————————————— ValUpdateExercise\n+     ⊢ᵥᵤ  'exercise' @Mod:T Ch e₁ e₂ e₃\n+\n+     ⊢ᵥ  e₁\n+     ⊢ᵥ  e₂\n+   ——————————————————————————————————————————————————— ValUpdateExerciseWithoutActors\n+     ⊢ᵥᵤ  'exercise_without_actors' @Mod:T Ch e₁ e₂\n+\n+     ⊢ᵥ  e\n+   ——————————————————————————————————————————————————— ValUpdateFetchByKey\n+     ⊢ᵥᵤ  'fetch_by_key' @Mod:T e\n+\n+     ⊢ᵥ  e\n+   ——————————————————————————————————————————————————— ValUpdateLookupByKey\n+     ⊢ᵥᵤ  'lookup_by_key' @Mod:T e\n+\n+   ——————————————————————————————————————————————————— ValUpdateEmbedExpr\n+     ⊢ᵥᵤ   'embed_expr' @τ e\n+\n+\n+                           ┌────────┐\n+   Scenario Values         │ ⊢ᵥₛ  s │\n+                           └────────┘\n+\n+     ⊢ᵥ  e\n+   ——————————————————————————————————————————————————— ValScenarioPure\n+     ⊢ᵥₛ  'spure' @τ e\n+\n+     ⊢ᵥ  e₁\n+   ——————————————————————————————————————————————————— ValScenarioBind\n+     ⊢ᵥₛ  'sbind' x₁ : τ₁ ← e₁ 'in' e₂\n+\n+"
  },
  {
    "id" : "4edb21a5-187f-4243-ab0b-507541e63493",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "d602a519-7c2c-4f57-9e0f-c43032739569",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-21T07:41:55Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 626,
    "diffHunk" : "@@ -1955,187 +2058,408 @@ exact output.\n \n ::\n \n-  Evaluation environment\n-    E ::= ε                                         -- EnvEmpty\n-       |  Mod:W ↦ v · E                             -- EnvVal\n-\n   Evaluation result\n     r ::= Ok v                                      -- ResOk\n        |  Err t                                     -- ResErr\n \n-                           ┌───────────────────┐\n-  Big-step evaluation      │ e ‖ E₁  ⇓  r ‖ E₂ │\n-                           └───────────────────┘\n+                           ┌──────────┐\n+  Big-step evaluation      │ e  ⇓  r  │\n+                           └──────────┘\n \n     —————————————————————————————————————————————————————————————————————— EvValue\n-      v ‖ E  ⇓  Ok v ‖ E\n+      v  ⇓  Ok v\n+\n+\n+      e   ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasableErr\n+      Λ α : ek . e  ⇓  Err t\n+\n+\n+      e   ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasable\n+      Λ α : ek . e  ⇓  Ok (Λ α : ek . v)\n+\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr1\n+      e₁ e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok (λ x : τ . e) ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-      e[x ↦ v₂] ‖ E₂  ⇓  r ‖ E₃\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr2\n+      e₁ e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Ok v₂\n+      e[x ↦ v₂]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpApp\n-      e₁ e₂ ‖ E₀  ⇓  r ‖ E₃\n+      e₁ e₂  ⇓  r\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpTyAppErr\n+      e₁ @τ  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok (Λ α : k . e) ‖ E₁\n-      e[α ↦ τ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok (Λ α : k . e)\n+      e[α ↦ τ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpTyApp\n-      e₁ @τ ‖ E₀  ⇓  r ‖ E₂\n+      e₁ @τ  ⇓  r\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpLetErr\n+      'let' x : τ = e₁ 'in' e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂[x ↦ v₁] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁\n+      e₂[x ↦ v₁]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n-      'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n+      'let' x : τ = e₁ 'in' e₂  ⇓  r\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpToAnyErr\n+      'to_any' @τ e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpToAny\n-      'to_any' @τ e ‖ E₀  ⇓  Ok('to_any' @τ v) ‖ E₁\n+      'to_any' @τ e  ⇓  Ok ('to_any' @τ v)\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyErr\n+      'from_any' @τ e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ v) ‖ E₁\n+      e  ⇓  Ok ('to_any' @τ v)\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnySucc\n-      'from_any' @τ e ‖ E₀  ⇓  'Some' @τ v ‖ E₁\n+      'from_any' @τ e  ⇓  Ok ('Some' @τ v)\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ₁ v) ‖ E₁     τ₁ ≠ τ₂\n+      e  ⇓  Ok ('to_any' @τ₁ v)     τ₁ ≠ τ₂\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnyFail\n-      'from_any' @τ₂ e ‖ E₀  ⇓  'None' ‖ E₁\n+      'from_any' @τ₂ e  ⇓  Ok 'None'\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n       v 'matches' p₁  ⇝  Succ (x₁ ↦ v₁ · … · xₘ ↦ vₘ · ε)\n-      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseSucc\n-      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ } ‖ E₀  ⇓  r ‖ E₂\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁    v₁ 'matches' p₁  ⇝  Fail\n-      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ } ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁    v₁ 'matches' p₁  ⇝  Fail\n+      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ }  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseFail\n-      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ‖ E₀\n-        ⇓\n-      r ‖ E₂\n+      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ⇓ r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁     v 'matches' p  ⇝  Fail\n-    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n-      'case' e₁ 'of' { p → e } ‖ E₀  ⇓  Err \"match error\" ‖ E₁\n+      e₁  ⇓  Ok v₁     v 'matches' p  ⇝  Fail\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseEmpty\n+      'case' e₁ 'of' { p → e }  ⇓  Err \"match error\"\n \n-       eₕ ‖ E₀  ⇓  Ok vₕ ‖ E₁\n-       eₜ ‖ E₁  ⇓  Ok vₜ ‖ E₂\n+       eₕ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr1\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n+\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr2\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n+\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Ok vₜ\n     —————————————————————————————————————————————————————————————————————— EvExpCons\n-      'Cons' @τ eₕ eₜ ‖ E₀  ⇓  Ok ('Cons' @τ vₕ vₜ) ‖ E₂\n+      'Cons' @τ eₕ eₜ  ⇓  Ok ('Cons' @τ vₕ vₜ)\n+\n+       e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpSomeErr\n+      'Some' @τ e  ⇓  Err t\n \n-       e ‖ E₀  ⇓  Ok v ‖ E₁\n+       e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpSome\n-      'Some' @τ e ‖ E₀  ⇓  Ok ('Some' @τ v) ‖ E₂\n+      'Some' @τ e  ⇓  Ok ('Some' @τ v)\n \n       𝕋(F) = ∀ (α₁: ⋆). … ∀ (αₘ: ⋆). σ₁ → … → σₙ → σ\n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eᵢ₋₁  ⇓  Ok vᵢ₋₁\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpBuiltinErr\n+      F @τ₁ … @τₘ e₁ … eₙ  ⇓  Err t\n+\n+      𝕋(F) = ∀ (α₁: ⋆). … ∀ (αₘ: ⋆). σ₁ → … → σₙ → σ\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpBuiltin\n-      F @τ₁ … @τₘ eᵢ … eₙ ‖ E₀  ⇓  𝕆(F @τ₁ … @τₘ v₁ … vₙ) ‖ Eₙ\n+      F @τ₁ … @τₘ e₁ … eₙ  ⇓  𝕆(F @τ₁ … @τₘ v₁ … vₙ)\n \n-      'val' W : τ ↦ e  ∈ 〚Ξ〛Mod      Mod:W ↦ … ∉ Eₒ\n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpNonCachedVal\n-      Mod:W ‖ E₀  ⇓  Ok v ‖ Mod:W ↦ v · E₁\n+      'val' W : τ ↦ e  ∈ 〚Ξ〛Mod\n+      e  ⇓  r\n+    —————————————————————————————————————————————————————————————————————— EvExpVal\n+      Mod:W  ⇓  r\n \n-      Mod:W ↦ v ∈ E₀\n-    —————————————————————————————————————————————————————————————————————— EvExpCachedVal\n-      Mod:W ‖ E₀  ⇓  Ok v ‖ E₀\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eᵢ₋₁  ⇓  Ok vᵢ₋₁\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecConErr\n+      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ}\n+        ⇓\n+      Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpRecCon\n-      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ} ‖ E₀\n+      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ}\n         ⇓\n-      Ok (Mod:T @τ₁ … @τₘ {f₁ = v₁, …, fₙ = ₙ}) ‖ Eₙ\n+      Ok (Mod:T @τ₁ … @τₘ {f₁ = v₁, …, fₙ = ₙ})\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecProjErr\n+      Mod:T @τ₁ … @τₘ {fᵢ} e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ}) ‖ E₁\n+      e  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ})\n     —————————————————————————————————————————————————————————————————————— EvExpRecProj\n-      Mod:T @τ₁ … @τₘ {fᵢ} e ‖ E₀  ⇓  Ok vᵢ ‖ E₁\n+      Mod:T @τ₁ … @τₘ {fᵢ} e  ⇓  Ok vᵢ\n \n-      e ‖ E₀  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ}) ‖ E₁\n-      eᵢ ‖ E₁  ⇓  Ok vᵢ' ‖ E₂\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecUpdErr1\n+      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ } ⇓ Err t\n+\n+      e  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ})\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecUpdErr2\n+      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ } ⇓ Err t\n+\n+      e  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ})\n+      eᵢ  ⇓  Ok vᵢ'\n     —————————————————————————————————————————————————————————————————————— EvExpRecUpd\n-      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ } ‖ E₀\n+      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ }\n         ⇓\n-      Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ}) ‖ E₂\n+      Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ})\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpVarConErr\n+      Mod:T:V @τ₁ … @τₙ e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpVarCon\n-      Mod:T:V @τ₁ … @τₙ e ‖ E₀  ⇓  Ok (Mod:T:V @τ₁ … @τₙ v) ‖ E₁\n+      Mod:T:V @τ₁ … @τₙ e  ⇓  Ok (Mod:T:V @τ₁ … @τₙ v)\n+\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eᵢ₋₁  ⇓  Ok vᵢ₋₁\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructConErr\n+      ⟨f₁ = e₁, …, fₙ = eₙ⟩  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpStructCon\n-      ⟨f₁ = e₁, …, fₙ = eₙ⟩ ‖ E₀  ⇓  Ok ⟨f₁ = v₁, …, fₙ = vₙ⟩ ‖ Eₙ\n+      ⟨f₁ = e₁, …, fₙ = eₙ⟩  ⇓  Ok ⟨f₁ = v₁, …, fₙ = vₙ⟩\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructProj\n+      e.fᵢ  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩ ‖ E₁\n+      e  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩\n     —————————————————————————————————————————————————————————————————————— EvExpStructProj\n-      e.fᵢ ‖ E₀  ⇓  Ok vᵢ ‖ E₁\n+      e.fᵢ  ⇓  Ok vᵢ\n \n-      e ‖ E₀  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩ ‖ E₁\n-      eᵢ ‖ E₁  ⇓  Ok vᵢ' ‖ E₂\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructUpdErr1\n+      ⟨ e 'with' fᵢ = eᵢ ⟩ ⇓ Err t\n+\n+      e  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructUpdErr2\n+      ⟨ e 'with' fᵢ = eᵢ ⟩ ⇓ Err t\n+\n+      e  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩\n+      eᵢ  ⇓  Ok vᵢ'\n     —————————————————————————————————————————————————————————————————————— EvExpStructUpd\n-      ⟨ e 'with' fᵢ = eᵢ ⟩ ‖ E₀\n+      ⟨ e 'with' fᵢ = eᵢ ⟩\n         ⇓\n-      Ok ⟨ f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ ⟩ ‖ E₂\n+      Ok ⟨ f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ ⟩\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpPureErr\n+      'pure' @τ e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpUpdPure\n-      'pure' @τ e ‖ E₀  ⇓  Ok ('pure' @τ v) ‖ E₁\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpUpPure\n+      'pure' @τ e  ⇓  Ok ('pure' @τ v)\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpUpdBind\n-      'bind' x₁ : τ₁ ← e₁ 'in' e₂ ‖ E₀\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpBindErr\n+      'bind' x₁ : τ₁ ← e₁ 'in' e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+    —————————————————————————————————————————————————————————————————————— EvExpUpBind\n+      'bind' x₁ : τ₁ ← e₁ 'in' e₂\n         ⇓\n-      Ok ('bind' x₁ : τ₁ ← v₁ 'in' e₂) ‖ E₁\n+      Ok ('bind' x₁ : τ₁ ← v₁ 'in' e₂)\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpCreateErr\n+      'create' @Mod:T e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpUpCreate\n-      'create' @Mod:T e ‖ E₀  ⇓  Ok ('create' @Mod:T v) ‖ E₁\n+      'create' @Mod:T e  ⇓  Ok ('create' @Mod:T v)\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpUpFetch\n-      'fetch' @Mod:T e ‖ E₀  ⇓  Ok ('fetch' @Mod:T v) ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetchErr\n+      'fetch' @Mod:T e  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-      e₃ ‖ E₂  ⇓  Ok v₃ ‖ E₃\n-    —————————————————————————————————————————————————————————————————————— EvExpUpExcerise\n-      'exercise' @Mod:T Ch e₁ e₂ e₃ ‖ E₀\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetch\n+      'fetch' @Mod:T e  ⇓  Ok ('fetch' @Mod:T v)\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseErr1\n+      'exercise' @Mod:T Ch e₁ e₂ e₃  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseErr2\n+      'exercise' @Mod:T Ch e₁ e₂ e₃  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Ok v₂\n+      e₃  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseErr3\n+      'exercise' @Mod:T Ch e₁ e₂ e₃  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Ok v₂\n+      e₃  ⇓  Ok v₃\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExercise\n+      'exercise' @Mod:T Ch e₁ e₂ e₃\n         ⇓\n-      Ok ('exercise' @Mod:T Ch v₁ v₂ v₃) ‖ E₃\n+      Ok ('exercise' @Mod:T Ch v₁ v₂ v₃)\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseWithoutActorsErr1\n+      'exercise_without_actors' @Mod:T Ch e₁ e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseWithoutActorsErr2\n+      'exercise_without_actors' @Mod:T Ch e₁ e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-    —————————————————————————————————————————————————————————————————————— EvExpUpExceriseWithoutActors\n-      'exercise_without_actors' @Mod:T Ch e₁ e₂ ‖ E₀\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Ok v₂\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseWithoutActors\n+      'exercise_without_actors' @Mod:T Ch e₁ e₂\n         ⇓\n-      Ok ('exercise_without_actors' @Mod:T Ch v₁ v₂) ‖ E₂\n+      Ok ('exercise_without_actors' @Mod:T Ch v₁ v₂)\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpFetchByKey\n-      'fetch_by_key' @Mod:T e ‖ E₀\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetchByKeyErr\n+      'fetch_by_key' @Mod:T e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetchByKey\n+      'fetch_by_key' @Mod:T e\n         ⇓\n-      Ok ('fetch_by_key' @Mod:T v) ‖ E₁\n+      Ok ('fetch_by_key' @Mod:T v)\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpLookupByKeyErr\n+      'lookup_by_key' @Mod:T e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpUpLookupByKey\n-      'lookup_by_key' @Mod:T e ‖ E₀\n+      'lookup_by_key' @Mod:T e\n        ⇓\n-      Ok ('lookup_by_key' @Mod:T v) ‖ E₁\n+      Ok ('lookup_by_key' @Mod:T v)\n+\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioPureErr\n+      'spure' @τ e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioPure\n+      'spure' @τ e  ⇓  Ok ('spure' @τ v)\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioBindErr\n+      'sbind' x₁ : τ₁ ← e₁ 'in' e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioBind\n+      'sbind' x₁ : τ₁ ← e₁ 'in' e₂\n+        ⇓\n+      Ok ('sbind' x₁ : τ₁ ← v₁ 'in' e₂)\n+\n \n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioCommitErr1\n+      'commit' @τ e u  ⇓  Err t\n+\n+      e  ⇓  Ok v₁\n+      u  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioCommitErr2\n+      'commit' @τ e u  ⇓  Err t\n+\n+      e  ⇓  Ok v₁\n+      u  ⇓  Ok v₂\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioCommit\n+      'commit' @τ e u  ⇓  Ok ('commit' @τ v₁ v₂)\n+\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioMustFailAtErr1\n+      'must_fail_at' @τ e u  ⇓  Err t\n+\n+      e  ⇓  Ok v₁\n+      u  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioMustFailAtErr2\n+      'must_fail_at' @τ e u  ⇓  Err t\n+\n+      e  ⇓  Ok v₁\n+      u  ⇓  Ok v₂\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioMustFailAt\n+      'must_fail_at' @τ e u  ⇓  Ok ('must_fail_at' @τ v₁ v₂)\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioPassErr\n+      'pass' e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioPass\n+      'pass' e  ⇓  Ok ('pass' v)\n+"
  },
  {
    "id" : "3069f335-a218-4ed6-bf35-58777297b949",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "8229b25b-a9f5-4e3e-871b-8c927d0ac635",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-21T07:47:20Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : null,
    "diffHunk" : "@@ -2214,183 +2538,278 @@ as described by the ledger model::\n      keys ∈ finite injective map from GlobalKey to cid\n \n   Update result\n-    ur ::= Ok (v, tr)\n-        |  Err v\n+    ur ::= Ok (v, tr) ‖ S\n+        |  Err t\n+    S ::= (st, keys)\n \n \n-                                    ┌──────────────────────────────┐\n-  Big-step update interpretation    │ u ‖ E₀ ; S₀ ⇓ᵤ ur ‖ E₁ ; S₁  │\n-                                    └──────────────────────────────┘\n+                                    ┌──────────────┐\n+  Big-step update interpretation    │ u ‖ S₀ ⇓ᵤ ur │\n+                                    └──────────────┘\n \n    —————————————————————————————————————————————————————————————————————— EvUpdPure\n-     'pure' v ‖ E ; (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ E ; (st, keys)\n-\n-     u₁ ‖ E₀ ; (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ E₁ ; (st₁, keys₁)\n-     e₂[x ↦ v₁] ‖ E₁  ⇓  Ok u₂ ‖ E₂\n-     u₂ ‖ E₂ ; (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ E₃ ; (st₂, keys₂)\n+     'pure' v ‖ (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ (st, keys)\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr1\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr2\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Ok u₂\n+     u₂ ‖ (st₁, keys₁)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr3\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Ok u₂\n+     u₂ ‖ (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ (st₂, keys₂)\n    —————————————————————————————————————————————————————————————————————— EvUpdBind\n-     'bind' x : τ ← u₁ ; e₂ ‖ E₀ ;  (st₀, keys₀)\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (v₂, tr₁ · tr₂) ‖ E₃ ;  (st₂, keys₂)\n+     Ok (v₂, tr₁ · tr₂) ‖ (st₂, keys₂)\n \n-     'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     eₘ vₖ ‖ E₁  ⇓  Ok vₘ ‖ E₂\n-     cid ∉ dom(st₀)      vₖ ∉ dom(keys₀)\n-     tr = 'create' (cid, Mod:T, vₜ)\n-     st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n-     keys₁ = keys₀[(Mod:T, vₖ) ↦ cid]\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeySucceed\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n-       ⇓ᵤ\n-     Ok (cid, tr) ‖ E₁ ; (st₁,  keys₁)\n-\n-     'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     cid ∉ dom(st₀)      (Mod:T, vₖ) ∈ dom(keys₀)\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyFail\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n-       ⇓ᵤ\n-     Err \"Mod:T template key violation\"  ‖ E₁ ; (st₀, keys₀)\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr1\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n \n      'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'False'\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateFail\n+     'create' @Mod:T vₜ ‖ (st, keys)\n+       ⇓ᵤ\n+     Err \"template precondition violated\"\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr2\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ, 'signatories' eₛ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr3\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr4\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'no_key' }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n      cid ∉ dom(st₀)\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ  ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     eₘ vₖ ‖ E₂  ⇓  Ok vₘ ‖ E₃\n      tr = 'create' (cid, Mod:T, vₜ, 'no_key')\n      st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWihoutKeySucceed\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithoutKeySucceed\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (cid, tr) ‖ E₁ ; (st₁, keys₀)\n-\n-     'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₁  ⇓  Ok 'False' ‖ E₂\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateFail\n-     'create' @Mod:T vₜ ‖ E₀ ; (st, keys)\n+     Ok (cid, tr) ‖ (st₁, keys₀)\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyErr1\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyErr2\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Ok vₘ\n+     (Mod:T, vₖ) ∈ dom(keys₀)\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyFail\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n+       ⇓ᵤ\n+     Err \"Mod:T template key violation\"\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Ok vₘ\n+     (Mod:T, vₖ) ∉ dom(keys₀)\n+     cid ∉ dom(st₀)\n+     tr = 'create' (cid, Mod:T, vₜ)\n+     st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n+     keys₁ = keys₀[(Mod:T, vₖ) ↦ cid]\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeySucceed\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Err \"template precondition violated\"  ‖ E_ ; (st, keys)\n+     Ok (cid, tr) ‖ (st₁,  keys₁)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' 'consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ v₂, x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n+     eₚ[y ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n      v₁ =ₛ vₚ\n-     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ] ‖ E₁  ⇓  Ok uₐ ‖ E₂\n+     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok uₐ\n      keys₁ = keys₀ - keys₀⁻¹(cid)\n      st₁ = st₀[cid ↦ (Mod:T, vₜ, 'inactive')]\n-     uₐ ‖ E₂ ; (st₁, keys₁)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ E₃ ; (st₂, keys₂)\n+     uₐ ‖ (st₁, keys₁)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ (st₂, keys₂)\n    —————————————————————————————————————————————————————————————————————— EvUpdExercConsum\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st₀, keys₀)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'consuming' trₐ) ‖ E₃ ; (st₂, keys₂)\n+     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'consuming' trₐ) ‖ (st₂, keys₂)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' 'non-consuming' Ch (y : 'ContractId' Mod:T) (z : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[z ↦ v₂, x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n+     eₚ[z ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n      v₁ =ₛ vₚ\n-     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ] ‖ E₁  ⇓  Ok uₐ ‖ E₂\n-     uₐ ‖ E₂ ; (st₀; keys₀)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ E₃ ; (st₁, keys₁)\n+     eₐ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok uₐ\n+     uₐ ‖ (st₀; keys₀)  ⇓ᵤ  Ok (vₐ, trₐ) ‖ (st₁, keys₁)\n    —————————————————————————————————————————————————————————————————————— EvUpdExercNonConsum\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st₀, keys₀)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'non-consuming' trₐ) ‖ E₃ ; (st₁, keys₁)\n+     Ok (vₐ, 'exercise' v₁ (cid, Mod:T, vₜ) 'non-consuming' trₐ) ‖ (st₁, keys₁)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'inactive')\n    —————————————————————————————————————————————————————————————————————— EvUpdExercInactive\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st₀; keys₀)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀; keys₀)\n        ⇓ᵤ\n-     Err \"Exercise on inactive contract\" ‖ E₀ ; (st₀; keys₀)\n+     Err \"Exercise on inactive contract\" ‖ (st₀; keys₀)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n+     eₚ[x ↦ vₜ]  ⇓  Ok vₚ\n      v₁ ≠ₛ vₚ\n    —————————————————————————————————————————————————————————————————————— EvUpdExercBadActors\n-     'exercise' Mod:T.Ch cid v₁ v₂ ‖ E₀ ; (st; keys)\n+     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st; keys)\n        ⇓ᵤ\n-     Err \"Exercise actors do not match\"  ‖ E₁ ; (st; keys)\n+     Err \"Exercise actors do not match\"  ‖ (st; keys)\n \n      'tpl' (x : T)\n          ↦ { 'choices' { …, 'choice' ChKind Ch (z : 'ContractId' Mod:T) (y : τ) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n      cid ∈ dom(st₀)\n      st₀(cid) = (Mod:T, vₜ, 'active')\n-     eₚ[y ↦ cid, z ↦ v₂, x ↦ vₜ] ‖ E₀  ⇓  Ok vₚ ‖ E₁\n-     'exercise' Mod:T.Ch cid vₚ v₁ ‖ E₁ ; (st₀, keys₀)  ⇓ᵤ  ur ‖ E₂ ; (st₁, keys₁)\n+     eₚ[y ↦ cid, z ↦ v₂, x ↦ vₜ]  ⇓  Ok vₚ\n+     'exercise' Mod:T.Ch cid vₚ v₁ ‖ (st₀, keys₀)  ⇓ᵤ  ur ‖ (st₁, keys₁)\n    —————————————————————————————————————————————————————————————————————— EvUpdExercWithoutActors\n-     'exercise_without_actors' Mod:T.Ch cid v₁ ‖ E₀ ; (st₀, keys₀)\n+     'exercise_without_actors' Mod:T.Ch cid v₁ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     ur ‖ E₂ ; (st₁, keys₁)\n+     ur ‖ (st₁, keys₁)\n \n      'tpl' (x : T) ↦ …  ∈  〚Ξ〛Mod\n      cid ∈ dom(st)\n      st(cid) = (Mod:T, vₜ, 'active')\n    —————————————————————————————————————————————————————————————————————— EvUpdFetch\n-     'fetch' @Mod:T cid ‖ E ; (st; keys)\n+     'fetch' @Mod:T cid ‖ (st; keys)\n        ⇓ᵤ\n-     Ok (vₜ, ε) ‖ E ; (st; keys)\n+     Ok (vₜ, ε) ‖ (st; keys)\n \n-      e ‖ E₀  ⇓  Ok vₖ ‖ E₁\n+      e  ⇓  Ok vₖ\n       (Mod:T, vₖ) ∈ dom(keys₀)      cid = keys((Mod:T, v))\n       st(cid) = (Mod:T, vₜ, 'active')\n    —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyFound\n-     'fetch_by_key' @Mod:T e ‖ E₀ ; (st; keys)\n+     'fetch_by_key' @Mod:T e ‖ (st; keys)\n         ⇓ᵤ\n-     Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ E₁ ; (st; keys)\n+     Ok ⟨'contractId': cid, 'contract': vₜ⟩ ‖ (st; keys)\n \n      'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     e ‖ E₀  ⇓  Ok vₖ ‖ E₁\n-     (eₘ vₖ) ‖ E₁  ⇓  vₘ ‖ E₂\n+     e  ⇓  Ok vₖ\n+     (eₘ vₖ)  ⇓  vₘ\n      (Mod:T, vₖ) ∉ dom(keys₀)\n     —————————————————————————————————————————————————————————————————————— EvUpdFetchByKeyNotFound\n-     'fetch_by_key' @Mod:T e ‖ E₀ ; (st; keys)\n+     'fetch_by_key' @Mod:T e ‖ (st; keys)\n         ⇓ᵤ\n-     Err \"Lookup key not found\"  ‖ E₂ ; (st; keys)\n+     Err \"Lookup key not found\"  ‖ (st; keys)\n+\n+"
  },
  {
    "id" : "1a757d88-eb2e-4c7f-84ae-df062f019052",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "7d967a69-9be3-4aca-b1ba-0fc746bedddd",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-21T07:51:09Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : null,
    "diffHunk" : "@@ -1955,187 +2058,408 @@ exact output.\n \n ::\n \n-  Evaluation environment\n-    E ::= ε                                         -- EnvEmpty\n-       |  Mod:W ↦ v · E                             -- EnvVal\n-\n   Evaluation result\n     r ::= Ok v                                      -- ResOk\n        |  Err t                                     -- ResErr\n \n-                           ┌───────────────────┐\n-  Big-step evaluation      │ e ‖ E₁  ⇓  r ‖ E₂ │\n-                           └───────────────────┘\n+                           ┌──────────┐\n+  Big-step evaluation      │ e  ⇓  r  │\n+                           └──────────┘\n \n     —————————————————————————————————————————————————————————————————————— EvValue\n-      v ‖ E  ⇓  Ok v ‖ E\n+      v  ⇓  Ok v\n+\n+\n+      e   ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasableErr\n+      Λ α : ek . e  ⇓  Err t\n+\n+\n+      e   ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvTyAbsErasable\n+      Λ α : ek . e  ⇓  Ok (Λ α : ek . v)\n+\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr1\n+      e₁ e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok (λ x : τ . e) ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-      e[x ↦ v₂] ‖ E₂  ⇓  r ‖ E₃\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpAppErr2\n+      e₁ e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok (λ x : τ . e)\n+      e₂  ⇓  Ok v₂\n+      e[x ↦ v₂]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpApp\n-      e₁ e₂ ‖ E₀  ⇓  r ‖ E₃\n+      e₁ e₂  ⇓  r\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpTyAppErr\n+      e₁ @τ  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok (Λ α : k . e) ‖ E₁\n-      e[α ↦ τ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok (Λ α : k . e)\n+      e[α ↦ τ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpTyApp\n-      e₁ @τ ‖ E₀  ⇓  r ‖ E₂\n+      e₁ @τ  ⇓  r\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpLetErr\n+      'let' x : τ = e₁ 'in' e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂[x ↦ v₁] ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁\n+      e₂[x ↦ v₁]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n-      'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n+      'let' x : τ = e₁ 'in' e₂  ⇓  r\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpToAnyErr\n+      'to_any' @τ e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpToAny\n-      'to_any' @τ e ‖ E₀  ⇓  Ok('to_any' @τ v) ‖ E₁\n+      'to_any' @τ e  ⇓  Ok ('to_any' @τ v)\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyErr\n+      'from_any' @τ e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ v) ‖ E₁\n+      e  ⇓  Ok ('to_any' @τ v)\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnySucc\n-      'from_any' @τ e ‖ E₀  ⇓  'Some' @τ v ‖ E₁\n+      'from_any' @τ e  ⇓  Ok ('Some' @τ v)\n \n-      e ‖ E₀  ⇓  Ok ('to_any' @τ₁ v) ‖ E₁     τ₁ ≠ τ₂\n+      e  ⇓  Ok ('to_any' @τ₁ v)     τ₁ ≠ τ₂\n     —————————————————————————————————————————————————————————————————————— EvExpFromAnyFail\n-      'from_any' @τ₂ e ‖ E₀  ⇓  'None' ‖ E₁\n+      'from_any' @τ₂ e  ⇓  Ok 'None'\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n       v 'matches' p₁  ⇝  Succ (x₁ ↦ v₁ · … · xₘ ↦ vₘ · ε)\n-      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ] ‖ E₁  ⇓  r ‖ E₂\n+      e₁[x₁ ↦ v₁, …, xₘ ↦ vₘ]  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseSucc\n-      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ } ‖ E₀  ⇓  r ‖ E₂\n+      'case' e₁ 'of' {  p₁ → e₁ | … |  pₙ → eₙ }  ⇓  r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁    v₁ 'matches' p₁  ⇝  Fail\n-      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ } ‖ E₁  ⇓  r ‖ E₂\n+      e₁  ⇓  Ok v₁    v₁ 'matches' p₁  ⇝  Fail\n+      'case' v₁ 'of' { p₂ → e₂ … | pₙ → eₙ }  ⇓  r\n     —————————————————————————————————————————————————————————————————————— EvExpCaseFail\n-      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ‖ E₀\n-        ⇓\n-      r ‖ E₂\n+      'case' e₁ 'of' { p₁ → e₁ | p₂ → e₂ | … | pₙ → eₙ } ⇓ r\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁     v 'matches' p  ⇝  Fail\n-    —————————————————————————————————————————————————————————————————————— EvExpCaseErr\n-      'case' e₁ 'of' { p → e } ‖ E₀  ⇓  Err \"match error\" ‖ E₁\n+      e₁  ⇓  Ok v₁     v 'matches' p  ⇝  Fail\n+    —————————————————————————————————————————————————————————————————————— EvExpCaseEmpty\n+      'case' e₁ 'of' { p → e }  ⇓  Err \"match error\"\n \n-       eₕ ‖ E₀  ⇓  Ok vₕ ‖ E₁\n-       eₜ ‖ E₁  ⇓  Ok vₜ ‖ E₂\n+       eₕ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr1\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n+\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpConsErr2\n+      'Cons' @τ eₕ eₜ  ⇓  Err t\n+\n+       eₕ  ⇓  Ok vₕ\n+       eₜ  ⇓  Ok vₜ\n     —————————————————————————————————————————————————————————————————————— EvExpCons\n-      'Cons' @τ eₕ eₜ ‖ E₀  ⇓  Ok ('Cons' @τ vₕ vₜ) ‖ E₂\n+      'Cons' @τ eₕ eₜ  ⇓  Ok ('Cons' @τ vₕ vₜ)\n+\n+       e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpSomeErr\n+      'Some' @τ e  ⇓  Err t\n \n-       e ‖ E₀  ⇓  Ok v ‖ E₁\n+       e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpSome\n-      'Some' @τ e ‖ E₀  ⇓  Ok ('Some' @τ v) ‖ E₂\n+      'Some' @τ e  ⇓  Ok ('Some' @τ v)\n \n       𝕋(F) = ∀ (α₁: ⋆). … ∀ (αₘ: ⋆). σ₁ → … → σₙ → σ\n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eᵢ₋₁  ⇓  Ok vᵢ₋₁\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpBuiltinErr\n+      F @τ₁ … @τₘ e₁ … eₙ  ⇓  Err t\n+\n+      𝕋(F) = ∀ (α₁: ⋆). … ∀ (αₘ: ⋆). σ₁ → … → σₙ → σ\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpBuiltin\n-      F @τ₁ … @τₘ eᵢ … eₙ ‖ E₀  ⇓  𝕆(F @τ₁ … @τₘ v₁ … vₙ) ‖ Eₙ\n+      F @τ₁ … @τₘ e₁ … eₙ  ⇓  𝕆(F @τ₁ … @τₘ v₁ … vₙ)\n \n-      'val' W : τ ↦ e  ∈ 〚Ξ〛Mod      Mod:W ↦ … ∉ Eₒ\n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpNonCachedVal\n-      Mod:W ‖ E₀  ⇓  Ok v ‖ Mod:W ↦ v · E₁\n+      'val' W : τ ↦ e  ∈ 〚Ξ〛Mod\n+      e  ⇓  r\n+    —————————————————————————————————————————————————————————————————————— EvExpVal\n+      Mod:W  ⇓  r\n \n-      Mod:W ↦ v ∈ E₀\n-    —————————————————————————————————————————————————————————————————————— EvExpCachedVal\n-      Mod:W ‖ E₀  ⇓  Ok v ‖ E₀\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eᵢ₋₁  ⇓  Ok vᵢ₋₁\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecConErr\n+      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ}\n+        ⇓\n+      Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpRecCon\n-      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ} ‖ E₀\n+      Mod:T @τ₁ … @τₘ {f₁ = e₁, …, fₙ = eₙ}\n         ⇓\n-      Ok (Mod:T @τ₁ … @τₘ {f₁ = v₁, …, fₙ = ₙ}) ‖ Eₙ\n+      Ok (Mod:T @τ₁ … @τₘ {f₁ = v₁, …, fₙ = ₙ})\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecProjErr\n+      Mod:T @τ₁ … @τₘ {fᵢ} e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ}) ‖ E₁\n+      e  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ})\n     —————————————————————————————————————————————————————————————————————— EvExpRecProj\n-      Mod:T @τ₁ … @τₘ {fᵢ} e ‖ E₀  ⇓  Ok vᵢ ‖ E₁\n+      Mod:T @τ₁ … @τₘ {fᵢ} e  ⇓  Ok vᵢ\n \n-      e ‖ E₀  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ}) ‖ E₁\n-      eᵢ ‖ E₁  ⇓  Ok vᵢ' ‖ E₂\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecUpdErr1\n+      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ } ⇓ Err t\n+\n+      e  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ})\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpRecUpdErr2\n+      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ } ⇓ Err t\n+\n+      e  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ})\n+      eᵢ  ⇓  Ok vᵢ'\n     —————————————————————————————————————————————————————————————————————— EvExpRecUpd\n-      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ } ‖ E₀\n+      Mod:T @τ₁ … @τₘ { e 'with' fᵢ = eᵢ }\n         ⇓\n-      Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ}) ‖ E₂\n+      Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ})\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpVarConErr\n+      Mod:T:V @τ₁ … @τₙ e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpVarCon\n-      Mod:T:V @τ₁ … @τₙ e ‖ E₀  ⇓  Ok (Mod:T:V @τ₁ … @τₙ v) ‖ E₁\n+      Mod:T:V @τ₁ … @τₙ e  ⇓  Ok (Mod:T:V @τ₁ … @τₙ v)\n+\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n+      e₁  ⇓  Ok v₁\n         ⋮\n-      eₙ ‖ Eₙ₋₁  ⇓  Ok vₙ ‖ Eₙ\n+      eᵢ₋₁  ⇓  Ok vᵢ₋₁\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructConErr\n+      ⟨f₁ = e₁, …, fₙ = eₙ⟩  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+        ⋮\n+      eₙ  ⇓  Ok vₙ\n     —————————————————————————————————————————————————————————————————————— EvExpStructCon\n-      ⟨f₁ = e₁, …, fₙ = eₙ⟩ ‖ E₀  ⇓  Ok ⟨f₁ = v₁, …, fₙ = vₙ⟩ ‖ Eₙ\n+      ⟨f₁ = e₁, …, fₙ = eₙ⟩  ⇓  Ok ⟨f₁ = v₁, …, fₙ = vₙ⟩\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructProj\n+      e.fᵢ  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩ ‖ E₁\n+      e  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩\n     —————————————————————————————————————————————————————————————————————— EvExpStructProj\n-      e.fᵢ ‖ E₀  ⇓  Ok vᵢ ‖ E₁\n+      e.fᵢ  ⇓  Ok vᵢ\n \n-      e ‖ E₀  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩ ‖ E₁\n-      eᵢ ‖ E₁  ⇓  Ok vᵢ' ‖ E₂\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructUpdErr1\n+      ⟨ e 'with' fᵢ = eᵢ ⟩ ⇓ Err t\n+\n+      e  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩\n+      eᵢ  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpStructUpdErr2\n+      ⟨ e 'with' fᵢ = eᵢ ⟩ ⇓ Err t\n+\n+      e  ⇓  Ok ⟨ f₁= v₁, …, fᵢ = vᵢ, …, fₙ = vₙ ⟩\n+      eᵢ  ⇓  Ok vᵢ'\n     —————————————————————————————————————————————————————————————————————— EvExpStructUpd\n-      ⟨ e 'with' fᵢ = eᵢ ⟩ ‖ E₀\n+      ⟨ e 'with' fᵢ = eᵢ ⟩\n         ⇓\n-      Ok ⟨ f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ ⟩ ‖ E₂\n+      Ok ⟨ f₁= v₁, …, fᵢ= vᵢ', …, fₙ= vₙ ⟩\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpPureErr\n+      'pure' @τ e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpUpdPure\n-      'pure' @τ e ‖ E₀  ⇓  Ok ('pure' @τ v) ‖ E₁\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpUpPure\n+      'pure' @τ e  ⇓  Ok ('pure' @τ v)\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpUpdBind\n-      'bind' x₁ : τ₁ ← e₁ 'in' e₂ ‖ E₀\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpBindErr\n+      'bind' x₁ : τ₁ ← e₁ 'in' e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+    —————————————————————————————————————————————————————————————————————— EvExpUpBind\n+      'bind' x₁ : τ₁ ← e₁ 'in' e₂\n         ⇓\n-      Ok ('bind' x₁ : τ₁ ← v₁ 'in' e₂) ‖ E₁\n+      Ok ('bind' x₁ : τ₁ ← v₁ 'in' e₂)\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpCreateErr\n+      'create' @Mod:T e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpUpCreate\n-      'create' @Mod:T e ‖ E₀  ⇓  Ok ('create' @Mod:T v) ‖ E₁\n+      'create' @Mod:T e  ⇓  Ok ('create' @Mod:T v)\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpUpFetch\n-      'fetch' @Mod:T e ‖ E₀  ⇓  Ok ('fetch' @Mod:T v) ‖ E₁\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetchErr\n+      'fetch' @Mod:T e  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-      e₃ ‖ E₂  ⇓  Ok v₃ ‖ E₃\n-    —————————————————————————————————————————————————————————————————————— EvExpUpExcerise\n-      'exercise' @Mod:T Ch e₁ e₂ e₃ ‖ E₀\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetch\n+      'fetch' @Mod:T e  ⇓  Ok ('fetch' @Mod:T v)\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseErr1\n+      'exercise' @Mod:T Ch e₁ e₂ e₃  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseErr2\n+      'exercise' @Mod:T Ch e₁ e₂ e₃  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Ok v₂\n+      e₃  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseErr3\n+      'exercise' @Mod:T Ch e₁ e₂ e₃  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Ok v₂\n+      e₃  ⇓  Ok v₃\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExercise\n+      'exercise' @Mod:T Ch e₁ e₂ e₃\n         ⇓\n-      Ok ('exercise' @Mod:T Ch v₁ v₂ v₃) ‖ E₃\n+      Ok ('exercise' @Mod:T Ch v₁ v₂ v₃)\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseWithoutActorsErr1\n+      'exercise_without_actors' @Mod:T Ch e₁ e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseWithoutActorsErr2\n+      'exercise_without_actors' @Mod:T Ch e₁ e₂  ⇓  Err t\n \n-      e₁ ‖ E₀  ⇓  Ok v₁ ‖ E₁\n-      e₂ ‖ E₁  ⇓  Ok v₂ ‖ E₂\n-    —————————————————————————————————————————————————————————————————————— EvExpUpExceriseWithoutActors\n-      'exercise_without_actors' @Mod:T Ch e₁ e₂ ‖ E₀\n+      e₁  ⇓  Ok v₁\n+      e₂  ⇓  Ok v₂\n+    —————————————————————————————————————————————————————————————————————— EvExpUpExerciseWithoutActors\n+      'exercise_without_actors' @Mod:T Ch e₁ e₂\n         ⇓\n-      Ok ('exercise_without_actors' @Mod:T Ch v₁ v₂) ‖ E₂\n+      Ok ('exercise_without_actors' @Mod:T Ch v₁ v₂)\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n-    —————————————————————————————————————————————————————————————————————— EvExpFetchByKey\n-      'fetch_by_key' @Mod:T e ‖ E₀\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetchByKeyErr\n+      'fetch_by_key' @Mod:T e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpUpFetchByKey\n+      'fetch_by_key' @Mod:T e\n         ⇓\n-      Ok ('fetch_by_key' @Mod:T v) ‖ E₁\n+      Ok ('fetch_by_key' @Mod:T v)\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpUpLookupByKeyErr\n+      'lookup_by_key' @Mod:T e  ⇓  Err t\n \n-      e ‖ E₀  ⇓  Ok v ‖ E₁\n+      e  ⇓  Ok v\n     —————————————————————————————————————————————————————————————————————— EvExpUpLookupByKey\n-      'lookup_by_key' @Mod:T e ‖ E₀\n+      'lookup_by_key' @Mod:T e\n        ⇓\n-      Ok ('lookup_by_key' @Mod:T v) ‖ E₁\n+      Ok ('lookup_by_key' @Mod:T v)\n+\n+\n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioPureErr\n+      'spure' @τ e  ⇓  Err t\n+\n+      e  ⇓  Ok v\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioPure\n+      'spure' @τ e  ⇓  Ok ('spure' @τ v)\n+\n+      e₁  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioBindErr\n+      'sbind' x₁ : τ₁ ← e₁ 'in' e₂  ⇓  Err t\n+\n+      e₁  ⇓  Ok v₁\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioBind\n+      'sbind' x₁ : τ₁ ← e₁ 'in' e₂\n+        ⇓\n+      Ok ('sbind' x₁ : τ₁ ← v₁ 'in' e₂)\n+\n \n+      e  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioCommitErr1\n+      'commit' @τ e u  ⇓  Err t\n+\n+      e  ⇓  Ok v₁\n+      u  ⇓  Err t\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioCommitErr2\n+      'commit' @τ e u  ⇓  Err t\n+\n+      e  ⇓  Ok v₁\n+      u  ⇓  Ok v₂\n+    —————————————————————————————————————————————————————————————————————— EvExpScenarioCommit\n+      'commit' @τ e u  ⇓  Ok ('commit' @τ v₁ v₂)\n+\n+"
  },
  {
    "id" : "38e0def4-2066-4ecf-b3d6-0ef0f8177060",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "dcfd6419-8462-4e22-aec0-b96b4e8d58ed",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We should make clear that the update interpretation work only on update value (maybe explaining how are handle non value update statement), or add a rule like:\r\n\r\n```\r\nu not a value\r\nu ⇓  Ok v\r\nv ‖ E ; (st, keys)   ⇓ᵤ   ur  || S\r\n-----------------------------------------\r\nu ‖ E ; (st, keys)   ⇓ᵤ   ur  || S\r\n```\r\n\r\nIn the second case I think we could simplify some other rules.",
        "createdAt" : "2020-07-21T08:03:15Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5ce2899c-de6c-47fc-8f8d-b30e677150c9",
        "parentId" : "dcfd6419-8462-4e22-aec0-b96b4e8d58ed",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I think we should keep the expression evaluation and update interpretation separate, so I'll add something saying that this relation is only defined for update values `u`.",
        "createdAt" : "2020-07-21T09:57:50Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "299279b9-e4c0-4760-8490-a50ddbf366ab",
        "parentId" : "dcfd6419-8462-4e22-aec0-b96b4e8d58ed",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n",
        "createdAt" : "2020-07-21T09:59:55Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8b6031d6-e07a-46d3-8611-e873c34e8cd5",
        "parentId" : "dcfd6419-8462-4e22-aec0-b96b4e8d58ed",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "So, the comments before this section already mention this (every `u` in this section has to be a value). But I added a little reminder next to the \"box\".",
        "createdAt" : "2020-07-21T10:06:38Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 695,
    "diffHunk" : "@@ -2214,183 +2538,278 @@ as described by the ledger model::\n      keys ∈ finite injective map from GlobalKey to cid\n \n   Update result\n-    ur ::= Ok (v, tr)\n-        |  Err v\n+    ur ::= Ok (v, tr) ‖ S\n+        |  Err t\n+    S ::= (st, keys)\n \n \n-                                    ┌──────────────────────────────┐\n-  Big-step update interpretation    │ u ‖ E₀ ; S₀ ⇓ᵤ ur ‖ E₁ ; S₁  │\n-                                    └──────────────────────────────┘\n+                                    ┌──────────────┐\n+  Big-step update interpretation    │ u ‖ S₀ ⇓ᵤ ur │\n+                                    └──────────────┘\n \n    —————————————————————————————————————————————————————————————————————— EvUpdPure"
  },
  {
    "id" : "2dd1d628-ffae-4720-acb7-ce1f7461fd40",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "0e47df7e-9acd-4499-a149-286a397f53df",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-21T08:10:23Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : null,
    "diffHunk" : "@@ -2214,183 +2538,278 @@ as described by the ledger model::\n      keys ∈ finite injective map from GlobalKey to cid\n \n   Update result\n-    ur ::= Ok (v, tr)\n-        |  Err v\n+    ur ::= Ok (v, tr) ‖ S\n+        |  Err t\n+    S ::= (st, keys)\n \n \n-                                    ┌──────────────────────────────┐\n-  Big-step update interpretation    │ u ‖ E₀ ; S₀ ⇓ᵤ ur ‖ E₁ ; S₁  │\n-                                    └──────────────────────────────┘\n+                                    ┌──────────────┐\n+  Big-step update interpretation    │ u ‖ S₀ ⇓ᵤ ur │\n+                                    └──────────────┘\n \n    —————————————————————————————————————————————————————————————————————— EvUpdPure\n-     'pure' v ‖ E ; (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ E ; (st, keys)\n-\n-     u₁ ‖ E₀ ; (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ E₁ ; (st₁, keys₁)\n-     e₂[x ↦ v₁] ‖ E₁  ⇓  Ok u₂ ‖ E₂\n-     u₂ ‖ E₂ ; (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ E₃ ; (st₂, keys₂)\n+     'pure' v ‖ (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ (st, keys)\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr1\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr2\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Ok u₂\n+     u₂ ‖ (st₁, keys₁)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr3\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Ok u₂\n+     u₂ ‖ (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ (st₂, keys₂)\n    —————————————————————————————————————————————————————————————————————— EvUpdBind\n-     'bind' x : τ ← u₁ ; e₂ ‖ E₀ ;  (st₀, keys₀)\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (v₂, tr₁ · tr₂) ‖ E₃ ;  (st₂, keys₂)\n+     Ok (v₂, tr₁ · tr₂) ‖ (st₂, keys₂)\n \n-     'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     eₘ vₖ ‖ E₁  ⇓  Ok vₘ ‖ E₂\n-     cid ∉ dom(st₀)      vₖ ∉ dom(keys₀)\n-     tr = 'create' (cid, Mod:T, vₜ)\n-     st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n-     keys₁ = keys₀[(Mod:T, vₖ) ↦ cid]\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeySucceed\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n-       ⇓ᵤ\n-     Ok (cid, tr) ‖ E₁ ; (st₁,  keys₁)\n-\n-     'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     cid ∉ dom(st₀)      (Mod:T, vₖ) ∈ dom(keys₀)\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyFail\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n-       ⇓ᵤ\n-     Err \"Mod:T template key violation\"  ‖ E₁ ; (st₀, keys₀)\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr1\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n \n      'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'False'\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateFail\n+     'create' @Mod:T vₜ ‖ (st, keys)\n+       ⇓ᵤ\n+     Err \"template precondition violated\"\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr2\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+"
  },
  {
    "id" : "b3a19143-dd48-4634-a05b-fefd2adea82f",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "1531a291-d30e-4759-a467-fb6cd3dbb718",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n     Ok (cid, tr) ‖ (st₁, keys₁)\r\n```",
        "createdAt" : "2020-07-21T08:13:29Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : null,
    "diffHunk" : "@@ -2214,183 +2538,278 @@ as described by the ledger model::\n      keys ∈ finite injective map from GlobalKey to cid\n \n   Update result\n-    ur ::= Ok (v, tr)\n-        |  Err v\n+    ur ::= Ok (v, tr) ‖ S\n+        |  Err t\n+    S ::= (st, keys)\n \n \n-                                    ┌──────────────────────────────┐\n-  Big-step update interpretation    │ u ‖ E₀ ; S₀ ⇓ᵤ ur ‖ E₁ ; S₁  │\n-                                    └──────────────────────────────┘\n+                                    ┌──────────────┐\n+  Big-step update interpretation    │ u ‖ S₀ ⇓ᵤ ur │\n+                                    └──────────────┘\n \n    —————————————————————————————————————————————————————————————————————— EvUpdPure\n-     'pure' v ‖ E ; (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ E ; (st, keys)\n-\n-     u₁ ‖ E₀ ; (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ E₁ ; (st₁, keys₁)\n-     e₂[x ↦ v₁] ‖ E₁  ⇓  Ok u₂ ‖ E₂\n-     u₂ ‖ E₂ ; (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ E₃ ; (st₂, keys₂)\n+     'pure' v ‖ (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ (st, keys)\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr1\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr2\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Ok u₂\n+     u₂ ‖ (st₁, keys₁)  ⇓ᵤ  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdBindErr3\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     u₁ ‖ (st₀, keys₀)  ⇓ᵤ  Ok (v₁, tr₁) ‖ (st₁, keys₁)\n+     e₂[x ↦ v₁]  ⇓  Ok u₂\n+     u₂ ‖ (st₁, keys₁)  ⇓ᵤ  Ok (v₂, tr₂) ‖ (st₂, keys₂)\n    —————————————————————————————————————————————————————————————————————— EvUpdBind\n-     'bind' x : τ ← u₁ ; e₂ ‖ E₀ ;  (st₀, keys₀)\n+     'bind' x : τ ← u₁ ; e₂ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (v₂, tr₁ · tr₂) ‖ E₃ ;  (st₂, keys₂)\n+     Ok (v₂, tr₁ · tr₂) ‖ (st₂, keys₂)\n \n-     'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     eₘ vₖ ‖ E₁  ⇓  Ok vₘ ‖ E₂\n-     cid ∉ dom(st₀)      vₖ ∉ dom(keys₀)\n-     tr = 'create' (cid, Mod:T, vₜ)\n-     st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n-     keys₁ = keys₀[(Mod:T, vₖ) ↦ cid]\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeySucceed\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n-       ⇓ᵤ\n-     Ok (cid, tr) ‖ E₁ ; (st₁,  keys₁)\n-\n-     'tpl' (x : T) ↦ { 'precondition' eₚ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ[x ↦ vₜ] ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     cid ∉ dom(st₀)      (Mod:T, vₖ) ∈ dom(keys₀)\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyFail\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n-       ⇓ᵤ\n-     Err \"Mod:T template key violation\"  ‖ E₁ ; (st₀, keys₀)\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr1\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n \n      'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'False'\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateFail\n+     'create' @Mod:T vₜ ‖ (st, keys)\n+       ⇓ᵤ\n+     Err \"template precondition violated\"\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr2\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ, 'signatories' eₛ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr3\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, … }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateErr4\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'no_key' }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n      cid ∉ dom(st₀)\n-     eₚ[x ↦ vₜ] ‖ E₀  ⇓  Ok 'True' ‖ E₁\n-     eₖ  ‖ E₁  ⇓  Ok vₖ ‖ E₂\n-     eₘ vₖ ‖ E₂  ⇓  Ok vₘ ‖ E₃\n      tr = 'create' (cid, Mod:T, vₜ, 'no_key')\n      st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateWihoutKeySucceed\n-     'create' @Mod:T vₜ ‖ E₀ ; (st₀, keys₀)\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithoutKeySucceed\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Ok (cid, tr) ‖ E₁ ; (st₁, keys₀)\n-\n-     'tpl' (x : T) ↦ { 'precondition' eₚ, … }  ∈  〚Ξ〛Mod\n-     eₚ[x ↦ vₜ] ‖ E₁  ⇓  Ok 'False' ‖ E₂\n-   —————————————————————————————————————————————————————————————————————— EvUpdCreateFail\n-     'create' @Mod:T vₜ ‖ E₀ ; (st, keys)\n+     Ok (cid, tr) ‖ (st₁, keys₀)\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyErr1\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Err t\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyErr2\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)  ⇓ᵤ  Err t\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Ok vₘ\n+     (Mod:T, vₖ) ∈ dom(keys₀)\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeyFail\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n+       ⇓ᵤ\n+     Err \"Mod:T template key violation\"\n+\n+     'tpl' (x : T) ↦ { 'precondition' eₚ, 'agreement' eₐ,\n+        'signatories' eₛ, 'observers' eₒ, …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod\n+     eₚ[x ↦ vₜ]  ⇓  Ok 'True'\n+     eₐ[x ↦ vₜ]  ⇓  Ok vₐ\n+     eₛ[x ↦ vₜ]  ⇓  Ok vₛ\n+     eₒ[x ↦ vₜ]  ⇓  Ok vₒ\n+     eₖ[x ↦ vₜ]  ⇓  Ok vₖ\n+     eₘ vₖ  ⇓  Ok vₘ\n+     (Mod:T, vₖ) ∉ dom(keys₀)\n+     cid ∉ dom(st₀)\n+     tr = 'create' (cid, Mod:T, vₜ)\n+     st₁ = st₀[cid ↦ (Mod:T, vₜ, 'active')]\n+     keys₁ = keys₀[(Mod:T, vₖ) ↦ cid]\n+   —————————————————————————————————————————————————————————————————————— EvUpdCreateWithKeySucceed\n+     'create' @Mod:T vₜ ‖ (st₀, keys₀)\n        ⇓ᵤ\n-     Err \"template precondition violated\"  ‖ E_ ; (st, keys)\n+     Ok (cid, tr) ‖ (st₁,  keys₁)"
  },
  {
    "id" : "670c2c0a-25f7-4387-9c9b-03a5d973ac32",
    "prId" : 6303,
    "comments" : [
      {
        "id" : "88fb3d3a-c29f-4ca5-a891-8e737888e471",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "This length limitation hasn't been enforced for a while, neither does the implementation do so at the moment. I don't know whether there are any ledgers out there that produced longer contract IDs that might be stored somewhere.",
        "createdAt" : "2020-06-11T07:35:04Z",
        "updatedAt" : "2020-06-11T07:39:56Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5e8ee7d-91d8-454d-a7cd-e9617881aeed",
        "parentId" : "88fb3d3a-c29f-4ca5-a891-8e737888e471",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The limitation is enforced in the code, See the definition of [ContractIdString](https://github.com/digital-asset/daml/blob/a79377cb2d6eb488314c9468d8653b621fcb1d09/daml-lf/data/src/main/scala/com/digitalasset/daml/lf/data/IdString.scala#L275)\r\n\r\nPreviously V0 was a `LegerString`, `LegerString` was always limited to 255 since its introduction last year in #1192.\r\n",
        "createdAt" : "2020-06-11T07:47:57Z",
        "updatedAt" : "2020-06-11T07:47:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6788a01a-c23e-4e5b-a823-854b0132f379",
        "parentId" : "88fb3d3a-c29f-4ca5-a891-8e737888e471",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Thanks for clarifying.",
        "createdAt" : "2020-06-11T07:53:02Z",
        "updatedAt" : "2020-06-11T07:53:02Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a0e6d6b6c2011193ecdd54d82733b2e92970ba88",
    "line" : null,
    "diffHunk" : "@@ -558,10 +558,10 @@ strings as *package identifiers*.  ::\n            pversion ::= PackageVersionString        -- PackageVersion\n \n   V0 Contract identifiers:\n-          cidV0  ∈  #[a-zA-Z0-9\\._:-#/ ]+           -- V0ContractId\n+          cidV0  ∈  #[a-zA-Z0-9\\._:-#/ ]{1,254}     -- V0ContractId"
  },
  {
    "id" : "f98cf8f9-877f-4603-b0ce-d0cc31453e44",
    "prId" : 5784,
    "comments" : [
      {
        "id" : "7f4967f9-85c8-4115-a16a-937952198769",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "```suggestion\r\nscheme is described in the `V1 Contract ID allocation\r\n```",
        "createdAt" : "2020-05-04T09:29:48Z",
        "updatedAt" : "2020-05-05T12:28:37Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1740b4aad8b549fda29ee37d8663f4d503545a20",
    "line" : null,
    "diffHunk" : "@@ -573,8 +573,10 @@ those interactions. Depending on its configuration, a DAML-LF engine\n can produce V0 or V1 contract identifiers.  When configured to produce\n V0 contract identifiers, a DAML-LF compliant engine must refuse to\n load any DAML-LF >= 1.dev archives.  On the contrary, when configured\n-to produce V1 contract ids, a DAML-LF compliant engine must accept to\n-load any non-deprecated DAML-LF version.\n+to produce V1 contract IDs, a DAML-LF compliant engine must accept to\n+load any non-deprecated DAML-LF version. V1 Contract IDs allocation\n+scheme is described in the Contract IDs a `V1 Contract ID allocation"
  },
  {
    "id" : "82968a22-7ec5-44dd-9ce7-2643e7f3554f",
    "prId" : 5444,
    "comments" : [
      {
        "id" : "5097fa1c-1a53-4c30-bae0-28cf018e9061",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would prefer having the type here. Yes, it is redundant but there is tons of redundant information in DAML-LF, I don’t really see why this one should be special.",
        "createdAt" : "2020-04-06T09:42:09Z",
        "updatedAt" : "2020-04-06T13:19:44Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "70a46e8d-75ff-49d0-b988-efa0dec32627",
        "parentId" : "5097fa1c-1a53-4c30-bae0-28cf018e9061",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I put it back the type in the spec. (I also reverse the self binder with the choice parameter to agree with `damlc inspect`).\r\n\r\nNote however, I cannot put it easily in the LF parser.",
        "createdAt" : "2020-04-06T12:46:01Z",
        "updatedAt" : "2020-04-06T13:19:44Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "91ced5395b52a3e7a16e3a3ff378c748a87e8b8a",
    "line" : 4,
    "diffHunk" : "@@ -731,7 +731,7 @@ available for usage::\n        |  'key' τ eₖ eₘ\n \n   Template choice definition\n-    ChDef ::= 'choice' ChKind Ch (y : τ) (z: 'ContractId' Mod:T) : σ 'by' eₚ ↦ e"
  },
  {
    "id" : "c1f664fe-e156-457c-b78b-dd1a93245b95",
    "prId" : 5344,
    "comments" : [
      {
        "id" : "61b3b75e-9dd7-4c6f-8733-f091a01117f2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ninterpreted. An engine compliant with this specification does not have\r\n```",
        "createdAt" : "2020-04-01T14:08:19Z",
        "updatedAt" : "2020-04-02T12:01:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f3e99fe570d6d6948c946adcee18b6f542f3c7ed",
    "line" : null,
    "diffHunk" : "@@ -2372,6 +2391,24 @@ cases where sub-expressions fail. Those case can be inferred in a\n straightforward way by following the left-to-right evaluation order.\n \n \n+About scenario interpretation\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+The interpretation of scenarios is a feature an engine can provide to\n+test business logic within a DAML-LF archive. Nevertheless, the\n+present specification does not define how scenarios should be actually\n+interpreted. A engine compliant with this specification does not have"
  },
  {
    "id" : "869b3beb-8aa9-40c7-9299-0e387f6106a9",
    "prId" : 5344,
    "comments" : [
      {
        "id" : "6eebeaef-7d9e-4c1d-8b64-7cd7cb7cea95",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "So many unnecessary changes :slightly_frowning_face: ",
        "createdAt" : "2020-04-01T14:21:16Z",
        "updatedAt" : "2020-04-02T12:01:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ed2a12a-58a1-4ee5-959a-95cf343a84c3",
        "parentId" : "6eebeaef-7d9e-4c1d-8b64-7cd7cb7cea95",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "github has a nice feature  \"Hide whitespace changes\"",
        "createdAt" : "2020-04-01T14:53:09Z",
        "updatedAt" : "2020-04-02T12:01:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f3e99fe570d6d6948c946adcee18b6f542f3c7ed",
    "line" : 59,
    "diffHunk" : "@@ -883,90 +894,93 @@ We now formally defined *well-formed types*. ::\n       |  x : τ · Γ                         -- CtxVarExpType\n \n                        ┌───────────────┐\n-  Well-formed types    │ Γ  ⊢  τ  :  k │\n+ Well-formed types    │ Γ  ⊢  τ  :  k │\n                        └───────────────┘\n \n-      α : k ∈ Γ\n-    ————————————————————————————————————————————— TyVar\n-      Γ  ⊢  α  :  k\n+     α : k ∈ Γ"
  },
  {
    "id" : "799d2f6b-69cb-452c-a933-bf2f495a5a5e",
    "prId" : 5344,
    "comments" : [
      {
        "id" : "4ff7cbc2-b11a-4055-a596-7267dc5c7102",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Is this missing an `of`?\r\n```suggestion\r\npackage if and only if the latter of these two validation passes.\r\n```",
        "createdAt" : "2020-04-02T09:39:42Z",
        "updatedAt" : "2020-04-02T12:01:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f3e99fe570d6d6948c946adcee18b6f542f3c7ed",
    "line" : null,
    "diffHunk" : "@@ -3592,6 +3632,10 @@ validation phases can be distinguished.\n   abstract syntax tree of the package. It is concerned with the\n   `well-formedness <Well-formed packages_>`_ of the package.\n \n+An engine compliant with the present specification must accept loading a\n+package if and only if the latter these two validation passes."
  },
  {
    "id" : "06449d2a-123b-4212-93f0-60ceb1505ae5",
    "prId" : 5344,
    "comments" : [
      {
        "id" : "558f9b91-5535-428e-902a-80dae2c057d0",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n  ``ExpGenMap``) is forbidden in serialized programs. It is specified\r\n```",
        "createdAt" : "2020-04-02T11:16:30Z",
        "updatedAt" : "2020-04-02T12:01:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f3e99fe570d6d6948c946adcee18b6f542f3c7ed",
    "line" : null,
    "diffHunk" : "@@ -695,13 +697,22 @@ Then we can define our kinds, types, and expressions::\n        |  'lookup_by_key' @τ e                      -- UpdateLookUpByKey\n        |  'embed_expr' @τ e                         -- UpdateEmbedExpr\n \n+  Scenario\n+    s ::= 'spure' @τ e                              -- ScenarioPure\n+       |  'sbind' x₁ : τ₁ ← e₁ 'in' e₂              -- ScenarioBlock\n+       |  'commit' @τ e u                           -- ScenarioCommit\n+       |  'must_fail_at' @τ e u                     -- ScenarioMustFailAt\n+       |  'pass' e                                  -- ScenarioPass\n+       |  'sget_time'                               -- ScenarioGetTime\n+       |  'sget_party' e                            -- ScenarioGetParty\n+       |  'sembed_expr' @τ e                        -- ScenarioEmbedExpr\n \n .. note:: The explicit syntax for maps (cases ``ExpTextMap`` and\n   ``ExpGenMap``) is forbidden in serialized programs. It is specifies"
  },
  {
    "id" : "5c9fffa8-f95a-4218-9c94-107c62a1e47a",
    "prId" : 5321,
    "comments" : [
      {
        "id" : "2c4dd460-01ab-4546-af2e-6648a10255df",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nStarting from DAML SDK 1.0, DAML-LF versions older than 1.6 are\r\n```",
        "createdAt" : "2020-03-31T18:02:04Z",
        "updatedAt" : "2020-03-31T18:22:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "052763d581b46dda90478bba8fcdc3d4e7f49df3",
    "line" : 4,
    "diffHunk" : "@@ -66,6 +66,11 @@ and operate on the same major version of the serialization format in\n a backward compatible way. This document describes DAML-LF major version\n 1, including all its minor versions.\n \n+Starting from DAML SDK 1.0 release, DAML-LF versions older than 1.6 are"
  },
  {
    "id" : "1f89bc76-59aa-4292-8eeb-60fecd02ec6c",
    "prId" : 5237,
    "comments" : [
      {
        "id" : "6f4e99f3-5a8a-4617-b852-55cadbad8bb4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I always got confused why this wasn’t just a regex before. Thanks for cleaning it up!",
        "createdAt" : "2020-03-27T09:55:15Z",
        "updatedAt" : "2020-03-27T09:55:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d427215df455289944bd62db60dd8a4d1d0fe70",
    "line" : 6,
    "diffHunk" : "@@ -413,14 +413,7 @@ and other similar pitfalls. ::\n      PackageIdChar  ∈  [a-zA-Z0-9\\-_ ]               -- PackageIdChar\n \n   PartyId strings\n-     PartyIdString ::= ' PartyIdChars '               -- PartyIdString\n-\n-  Sequences of PartyId character"
  },
  {
    "id" : "aeb20183-c366-46d6-b77a-438a8d83e31d",
    "prId" : 5106,
    "comments" : [
      {
        "id" : "b42796e7-0ae8-4160-b308-7176f5eac2d9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why is 190 the upper limit? I don’t have an issue with it. Just wondering where the magic number comes from.",
        "createdAt" : "2020-03-20T13:47:16Z",
        "updatedAt" : "2020-03-23T14:06:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4716c1b4-1223-4e04-8da0-20076c05d5bb",
        "parentId" : "b42796e7-0ae8-4160-b308-7176f5eac2d9",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are so quick ;) \r\nI change it to 96 (3 x 32 bytes) ",
        "createdAt" : "2020-03-20T13:55:36Z",
        "updatedAt" : "2020-03-23T14:06:00Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3fbdc46f-3b0b-4025-874c-2fa64476bbc2",
        "parentId" : "b42796e7-0ae8-4160-b308-7176f5eac2d9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-03-20T13:57:46Z",
        "updatedAt" : "2020-03-23T14:06:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8611d5667dad9aec2246efb66fce34fb42c530e8",
    "line" : null,
    "diffHunk" : "@@ -565,12 +560,24 @@ strings as *package identifiers*.  ::\n   Package versions\n            pversion ::= PackageVersionString        -- PackageVersion\n \n-We do not specify an explicit syntax for contract identifiers as it is\n-not possible to refer to them statically within a program. In\n-practice, contract identifiers can be created dynamically through\n-interactions with the underlying ledger. See the `operation semantics\n-of update statements <Update Interpretation_>`_ for the formal\n-specification of those interactions.\n+  V0 Contract identifiers:\n+          cidV0  ∈  #[a-zA-Z0-9\\._:-#/ ]+           -- V0ContractId\n+\n+  V1 Contract identifiers:\n+          cidV1  ∈  00([0-9a-f][0-9a-f]){32,190}    -- V1ContractId"
  },
  {
    "id" : "fd9336df-811c-41ff-b808-41e6dd7a2cdd",
    "prId" : 5106,
    "comments" : [
      {
        "id" : "8735b2ad-7f29-4c3c-a6c3-e61b30524ac1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What is a DAML-LF 1.dev program? Most programs (the default output of any `daml build`) consist of multiple LF versions. I assume what you mean is that a contract id of a template in 1.dev will always use the new format?",
        "createdAt" : "2020-03-20T13:49:24Z",
        "updatedAt" : "2020-03-23T14:06:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d7c728c7-eca1-40c1-83be-852cf8fe8e8b",
        "parentId" : "8735b2ad-7f29-4c3c-a6c3-e61b30524ac1",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good point. Let's me reformulate that. \r\n",
        "createdAt" : "2020-03-20T14:13:12Z",
        "updatedAt" : "2020-03-23T14:06:00Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8611d5667dad9aec2246efb66fce34fb42c530e8",
    "line" : null,
    "diffHunk" : "@@ -565,12 +560,24 @@ strings as *package identifiers*.  ::\n   Package versions\n            pversion ::= PackageVersionString        -- PackageVersion\n \n-We do not specify an explicit syntax for contract identifiers as it is\n-not possible to refer to them statically within a program. In\n-practice, contract identifiers can be created dynamically through\n-interactions with the underlying ledger. See the `operation semantics\n-of update statements <Update Interpretation_>`_ for the formal\n-specification of those interactions.\n+  V0 Contract identifiers:\n+          cidV0  ∈  #[a-zA-Z0-9\\._:-#/ ]+           -- V0ContractId\n+\n+  V1 Contract identifiers:\n+          cidV1  ∈  00([0-9a-f][0-9a-f]){32,190}    -- V1ContractId\n+\n+  Contract identifiers:\n+          cid := cidV0 | cidV1                      -- ContractId\n+\n+Contract identifiers can be created dynamically through interactions\n+with the underlying ledger. See the `operation semantics of update\n+statements <Update Interpretation_>`_ for the formal specification of\n+those interactions. Contract identifiers are naturally ordered\n+lexicographically. DAML-LF >= 1.dev programs creates only V1 Contract"
  },
  {
    "id" : "e7d7a6b4-4d24-4eff-83c0-36dfbfecb4ca",
    "prId" : 5106,
    "comments" : [
      {
        "id" : "49babd62-9209-45d6-8f0a-0b36c917fc14",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ncreate both kinds of contract identifiers depending on the\r\n```",
        "createdAt" : "2020-03-20T13:49:59Z",
        "updatedAt" : "2020-03-23T14:06:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8611d5667dad9aec2246efb66fce34fb42c530e8",
    "line" : null,
    "diffHunk" : "@@ -565,12 +560,24 @@ strings as *package identifiers*.  ::\n   Package versions\n            pversion ::= PackageVersionString        -- PackageVersion\n \n-We do not specify an explicit syntax for contract identifiers as it is\n-not possible to refer to them statically within a program. In\n-practice, contract identifiers can be created dynamically through\n-interactions with the underlying ledger. See the `operation semantics\n-of update statements <Update Interpretation_>`_ for the formal\n-specification of those interactions.\n+  V0 Contract identifiers:\n+          cidV0  ∈  #[a-zA-Z0-9\\._:-#/ ]+           -- V0ContractId\n+\n+  V1 Contract identifiers:\n+          cidV1  ∈  00([0-9a-f][0-9a-f]){32,190}    -- V1ContractId\n+\n+  Contract identifiers:\n+          cid := cidV0 | cidV1                      -- ContractId\n+\n+Contract identifiers can be created dynamically through interactions\n+with the underlying ledger. See the `operation semantics of update\n+statements <Update Interpretation_>`_ for the formal specification of\n+those interactions. Contract identifiers are naturally ordered\n+lexicographically. DAML-LF >= 1.dev programs creates only V1 Contract\n+identifiers but can handle identifiers for contracts previously\n+created with an older version of DAML-LF. Older version of DAML-LF can\n+created both kinds of contract identifiers depending on the"
  },
  {
    "id" : "b87fc954-6615-4f9e-997a-4e77d3a2f8de",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "e566d63c-7c6d-4f59-836f-187ca778d832",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n**Entry order**: The operations below always return a map with entries\r\n```",
        "createdAt" : "2020-03-13T15:07:52Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3076,7 +3076,7 @@ List functions\n Text map functions\n ~~~~~~~~~~~~~~~~~~\n \n-**Entry order**: The operations above return always a map with entries\n+**Entry order**: The operations under return always a map with entries"
  },
  {
    "id" : "14ac07fd-7ead-425c-b7d6-1aa65ea7db83",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "7d975f07-9a10-4436-bafe-5656bdfb1856",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n**Entry order**: The operations below always return a map with entries\r\n```",
        "createdAt" : "2020-03-13T15:08:33Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3122,25 +3122,8 @@ ordered by keys.\n Generic map functions\n ~~~~~~~~~~~~~~~~~~~~~\n \n-**Validity of Keys:** A key is valid if and only if it is equivalent\n-to itself according to the relation ``~ᵥ`` defined in `value equality`\n-section. Attempts to use an invalid key in the operations listed under\n-always result in a runtime error.\n-\n-Of particular note, the following values are never valid keys:\n-\n-* Lambda expressions ``λ x : τ . e``\n-* Type abstractions ``Λ α : k . e``\n-* (Partially applied) built-in functions\n-* Update statement\n-* Any value containing an invalid key\n-\n-**Comparison of Keys:** The `value equality`_ is used for key\n- comparison.\n-\n-**Entries ordering**: The builtins listed below maintain the order\n-in which keys were inserted into the map (insertion-order).\n-\n+**Entry order**: The operations under return always a map with entries"
  },
  {
    "id" : "942f2510-8e05-4fed-8174-b4cc92b4d18c",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "a4119020-5e73-4836-9184-facc38d467ce",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\nordered by keys according to the comparison function ``LESS``.\r\n```",
        "createdAt" : "2020-03-13T15:08:54Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3122,25 +3122,8 @@ ordered by keys.\n Generic map functions\n ~~~~~~~~~~~~~~~~~~~~~\n \n-**Validity of Keys:** A key is valid if and only if it is equivalent\n-to itself according to the relation ``~ᵥ`` defined in `value equality`\n-section. Attempts to use an invalid key in the operations listed under\n-always result in a runtime error.\n-\n-Of particular note, the following values are never valid keys:\n-\n-* Lambda expressions ``λ x : τ . e``\n-* Type abstractions ``Λ α : k . e``\n-* (Partially applied) built-in functions\n-* Update statement\n-* Any value containing an invalid key\n-\n-**Comparison of Keys:** The `value equality`_ is used for key\n- comparison.\n-\n-**Entries ordering**: The builtins listed below maintain the order\n-in which keys were inserted into the map (insertion-order).\n-\n+**Entry order**: The operations under return always a map with entries\n+ordered by keys according the comparison function ``LESS``."
  },
  {
    "id" : "327c89bd-cb9d-4bda-b82f-f12f08f6830b",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "bd1eedb5-7bfa-4c86-896f-ee2c124afc10",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n  is inserted in order according to the builtin function ``LESS`` applied\r\n```",
        "createdAt" : "2020-03-13T15:09:48Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied"
  },
  {
    "id" : "441c1e76-12c6-4323-83ca-6b3a1d8f5ec4",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "parentId" : null,
        "author" : null,
        "body" : "One question that the spec should answer: does it raise a runtime error when inserting a value that is incomparable in an empty map? (I think it should raise an error, for the sake of consistency.)",
        "createdAt" : "2020-03-13T15:11:05Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "bfb069c9-fe63-40ff-b0ea-796575e99528",
        "parentId" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It does not. \r\nIt raise an exception exactly once `LESS` or `EQUAL` does. \r\n\r\nWe agreed with @hurryabit and @hurryabit that is the only semantics that is reasonable. Otherwise you will have to always traverse all the keys to ensure there is no function nested inside. \r\n\r\nImagine you have the type\r\n\r\n``` \r\ndata D = \r\n    FUN (Int -> Int) \r\n  | INT Int\r\n```\r\n\r\nYou can insert `(Fun (\\x -> x))` in any `GenMap` that does not content `Fun` variant.\r\nYou can also try to lookup the entry of key  `(Fun (\\x -> x))` without raising an exception in any `GenMap` that does not content `Fun` variant.\r\n\r\nHowever as soon you have an entry with a key `(Fun ...)` in your map you cannot do anymore any operation  that invole a other key of the form  `(Fun ...)` without raising an exception. \r\n\r\nThis choices is simpler and more efficient. Furthermore the compiler will never produce such case.\r\n\r\n\r\n",
        "createdAt" : "2020-03-13T16:25:54Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8863434f-c9ff-4224-a833-93d84e4a84ae",
        "parentId" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "author" : null,
        "body" : "Ok, if @hurryabit and @hurryabit can confirm ;-) \r\n\r\nThe reason I don't like this is that you are creating the potential for latent runtime errors when you perform inserts -- i.e. creating a runtime error that will only be found on a subsequent lookup, instead of when the real error occurs. This is particularly bad for e.g. people using genmaps during testing, or choice validation.\r\n\r\nWhen adding a new key to the map, It should be easy to compare a key to itself using EQUAL, to make sure it doesn't introduce latent runtime errors.",
        "createdAt" : "2020-03-13T16:34:08Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b4e05387-9f93-496b-8d08-7d60fb33de39",
        "parentId" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "author" : null,
        "body" : "In the proposed semantics, you are only saving 1 comparison, but you are introducing latent runtime errors, so I don't think it's worth it.",
        "createdAt" : "2020-03-13T16:37:51Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3609c883-5363-4686-a6c2-1d5409867ff2",
        "parentId" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It depends on what kind of values you have. If you have ADT-like trees, being able to short circuit on comparisons can make a pretty large difference. Given that we prevent this runtime error in DAML, I’m not sure that missing out on better performance here in favor of “nicer semantics” for DAML-LF is worth it. That said, I don’t feel particularly strongly about this.",
        "createdAt" : "2020-03-13T16:42:35Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5cf29d6d-8e15-486f-ac7b-e1ef47daa11d",
        "parentId" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "In fact, @associahedron I like your proposal.\r\nThe advantage I see, is that we can switch the implementation to hashmap, if we realize the implementation is too slow (we will sorted the map only for serialization). \r\n \r\nIn other words, in each case (insertion, deletion and lookup) we check the value is equal to itself. Hence we have a nice definition of \"comparable\" value.",
        "createdAt" : "2020-03-13T17:09:01Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34534d12-ceff-4e35-b35b-74e39ddbe39b",
        "parentId" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "author" : null,
        "body" : "@cocreature If you use nested trees as keys, maps are going to be slow regardless. I'm also not confident that this case will never ever occur at runtime in DAML.\r\n\r\n@remyhaemmerle-da 👍",
        "createdAt" : "2020-03-13T17:41:05Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d0d4c849-9569-44e7-8f09-da54339d4c1e",
        "parentId" : "d6fe3e1a-60d5-4c06-93f5-347dcbc7cbd8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Alright, then let’s error out for now.",
        "createdAt" : "2020-03-13T18:31:03Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : 51,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values."
  },
  {
    "id" : "93cdbb23-0ca3-409c-a7bc-23e62058eb3d",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "68798784-64f1-407b-804d-fe98b756f12d",
        "parentId" : null,
        "author" : null,
        "body" : "We are missing rules for insertion in empty maps.\r\n\r\nAgain, for the empty map, I think the rule should perform a comparison in order to verify that the key is a comparable value.",
        "createdAt" : "2020-03-13T15:14:00Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5a094805-89e4-4620-8bdc-a252edc4a403",
        "parentId" : "68798784-64f1-407b-804d-fe98b756f12d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch for the empty maps case",
        "createdAt" : "2020-03-13T16:29:46Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : 88,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+  Formally the builtin function ``GENMAP_INSERT`` semantics is defined\n+  by the following rules. ::\n \n-  Looks up the value at a key in the map.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplaceErr\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplace\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ ↦ w;  vᵢ₊₁ ↦ wᵢ₊₁; …; vₙ ↦ wₙ〛\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to the rules listed below.\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrLeft\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v vᵢ) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrRight\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v v₁) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertFirst\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v ↦ w; v₁ ↦ w₁; …; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Ok 'True'\n+      𝕆('LESS' @σ v vᵢ) = Ok 'True'\n+      for some i ∈ 2, …, n-1\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertMiddle\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; v ↦ w;  vᵢ ↦ wᵢ; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vₙ v) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertLast\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n+"
  },
  {
    "id" : "5a4fc884-ac2f-46ce-8af4-3241eb92c22d",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "eb37dd0f-c33f-4c69-9062-46df088013f5",
        "parentId" : null,
        "author" : null,
        "body" : "Spec should say what happens in the case of empty map lookup of incomparable keys. (I favor more runtime errors.)",
        "createdAt" : "2020-03-13T15:14:55Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b8d633b2-0568-41c7-b47c-5d292c6cd8bb",
        "parentId" : "eb37dd0f-c33f-4c69-9062-46df088013f5",
        "author" : null,
        "body" : "At lookup it is not super critical to check the key for self-equality, but I think that at insertion time it is more important.",
        "createdAt" : "2020-03-13T16:35:31Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c06165f7-6d17-4cf0-ad75-40e71c36e4fc",
        "parentId" : "eb37dd0f-c33f-4c69-9062-46df088013f5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "no error ;)",
        "createdAt" : "2020-03-13T16:37:35Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "69f2ef70-0dcc-4177-a8e4-98e7b027b138",
        "parentId" : "eb37dd0f-c33f-4c69-9062-46df088013f5",
        "author" : null,
        "body" : "if you want to leave the possibility for hashtable-based implementation open, you should error on bad lookup keys",
        "createdAt" : "2020-03-13T17:45:53Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "29f16762-7203-490a-90c2-9c3cb5efd414",
        "parentId" : "eb37dd0f-c33f-4c69-9062-46df088013f5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "As agreed in previous thread, we raise an error",
        "createdAt" : "2020-03-16T11:36:12Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : 96,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+  Formally the builtin function ``GENMAP_INSERT`` semantics is defined\n+  by the following rules. ::\n \n-  Looks up the value at a key in the map.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplaceErr\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplace\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ ↦ w;  vᵢ₊₁ ↦ wᵢ₊₁; …; vₙ ↦ wₙ〛\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to the rules listed below.\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrLeft\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v vᵢ) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrRight\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v v₁) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertFirst\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v ↦ w; v₁ ↦ w₁; …; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Ok 'True'\n+      𝕆('LESS' @σ v vᵢ) = Ok 'True'\n+      for some i ∈ 2, …, n-1\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertMiddle\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; v ↦ w;  vᵢ ↦ wᵢ; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vₙ v) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertLast\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n+\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Looks up the value at a key in the map using the builtin function\n+  ``EQUAL`` to test key equality. This raises a runtime error if it\n+  try to compare incomparable values."
  },
  {
    "id" : "fd95b5ed-0c62-442c-81eb-c48d678efbce",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "b44881d8-f2af-49c8-ae75-6d317d027b58",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for all i ∈ 1, …, n\r\n```\r\n\r\nBut I think we should also add the requirement that `n >= 1`, and add a separate rules for lookups in empty maps to ensure that a lookup with bad key is caught.",
        "createdAt" : "2020-03-13T15:17:14Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+  Formally the builtin function ``GENMAP_INSERT`` semantics is defined\n+  by the following rules. ::\n \n-  Looks up the value at a key in the map.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplaceErr\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplace\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ ↦ w;  vᵢ₊₁ ↦ wᵢ₊₁; …; vₙ ↦ wₙ〛\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to the rules listed below.\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrLeft\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v vᵢ) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrRight\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v v₁) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertFirst\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v ↦ w; v₁ ↦ w₁; …; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Ok 'True'\n+      𝕆('LESS' @σ v vᵢ) = Ok 'True'\n+      for some i ∈ 2, …, n-1\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertMiddle\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; v ↦ w;  vᵢ ↦ wᵢ; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vₙ v) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertLast\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n+\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Looks up the value at a key in the map using the builtin function\n+  ``EQUAL`` to test key equality. This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+  Formally the builtin function ``GENMAP_LOOKUP`` semantics is defined\n+  by the following rules. ::\n \n-  Deletes a key and its value from the map. When the key is not a\n-  member of the map, the original map is returned.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupErr\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupPresent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' (Some wᵢ)\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for any i ∈ 1, …, n"
  },
  {
    "id" : "7a2cbbcb-269b-4186-89b3-ed5d0568ffd1",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "745f40c4-4e0f-4d65-860f-8e7df7701f88",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for all i ∈ 1, …, n\r\n```\r\n\r\nAgain, same thing with empty maps as lookup.",
        "createdAt" : "2020-03-13T15:22:48Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+  Formally the builtin function ``GENMAP_INSERT`` semantics is defined\n+  by the following rules. ::\n \n-  Looks up the value at a key in the map.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplaceErr\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplace\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ ↦ w;  vᵢ₊₁ ↦ wᵢ₊₁; …; vₙ ↦ wₙ〛\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to the rules listed below.\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrLeft\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v vᵢ) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrRight\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v v₁) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertFirst\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v ↦ w; v₁ ↦ w₁; …; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Ok 'True'\n+      𝕆('LESS' @σ v vᵢ) = Ok 'True'\n+      for some i ∈ 2, …, n-1\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertMiddle\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; v ↦ w;  vᵢ ↦ wᵢ; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vₙ v) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertLast\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n+\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Looks up the value at a key in the map using the builtin function\n+  ``EQUAL`` to test key equality. This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+  Formally the builtin function ``GENMAP_LOOKUP`` semantics is defined\n+  by the following rules. ::\n \n-  Deletes a key and its value from the map. When the key is not a\n-  member of the map, the original map is returned.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupErr\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupPresent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' (Some wᵢ)\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for any i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupAbsent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' None\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  Deletes a key and its value from the map, using the builtin function\n+  ``EQUAL`` to test key equality. When the key is not a member of the\n+  map, the original map is returned.  This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n+  Formally the builtin function ``GENMAP_DELETE`` semantics is defined\n+  by the following rules. ::\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeleteErr\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeletePresent\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ₊₁ ↦ wᵢ₊₁; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for any i ∈ 1, …, n"
  },
  {
    "id" : "35ca9fa2-fd2e-4482-afa9-41bcdf5d2a42",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "90c1b943-a789-4671-8a83-85f33d2d9dd3",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n  they appear in the map.\r\n```",
        "createdAt" : "2020-03-13T15:23:28Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+  Formally the builtin function ``GENMAP_INSERT`` semantics is defined\n+  by the following rules. ::\n \n-  Looks up the value at a key in the map.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplaceErr\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplace\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ ↦ w;  vᵢ₊₁ ↦ wᵢ₊₁; …; vₙ ↦ wₙ〛\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to the rules listed below.\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrLeft\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v vᵢ) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrRight\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v v₁) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertFirst\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v ↦ w; v₁ ↦ w₁; …; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Ok 'True'\n+      𝕆('LESS' @σ v vᵢ) = Ok 'True'\n+      for some i ∈ 2, …, n-1\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertMiddle\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; v ↦ w;  vᵢ ↦ wᵢ; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vₙ v) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertLast\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n+\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Looks up the value at a key in the map using the builtin function\n+  ``EQUAL`` to test key equality. This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+  Formally the builtin function ``GENMAP_LOOKUP`` semantics is defined\n+  by the following rules. ::\n \n-  Deletes a key and its value from the map. When the key is not a\n-  member of the map, the original map is returned.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupErr\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupPresent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' (Some wᵢ)\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for any i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupAbsent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' None\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  Deletes a key and its value from the map, using the builtin function\n+  ``EQUAL`` to test key equality. When the key is not a member of the\n+  map, the original map is returned.  This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n+  Formally the builtin function ``GENMAP_DELETE`` semantics is defined\n+  by the following rules. ::\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeleteErr\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeletePresent\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ₊₁ ↦ wᵢ₊₁; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for any i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeleteAbsent\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛\n+\n * ``GENMAP_KEYS : ∀ α. ∀ β.  'GenMap' α β → 'List' α``\n \n-  Get the list of keys in the map. The keys are returned by insertion\n-  order, so if you insert key ``x`` before key ``y``, then ``x`` will\n-  appear before ``y`` in the list.\n+  Get the list of keys in the map. The keys are returned in the order\n+  they appears in the map."
  },
  {
    "id" : "a1ce001f-5405-49a2-9643-a4a8d332dfc3",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "c4a14c2f-bd82-4510-985b-911c2df5fdd2",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n  Get the list of values in the map. The values are returned in the\r\n  order they appear in the map (i.e. sorted by key).\r\n```",
        "createdAt" : "2020-03-13T15:24:05Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : null,
    "diffHunk" : "@@ -3151,68 +3134,144 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+  Formally the builtin function ``GENMAP_INSERT`` semantics is defined\n+  by the following rules. ::\n \n-  Looks up the value at a key in the map.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplaceErr\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplace\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ ↦ w;  vᵢ₊₁ ↦ wᵢ₊₁; …; vₙ ↦ wₙ〛\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to the rules listed below.\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrLeft\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v vᵢ) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrRight\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v v₁) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertFirst\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v ↦ w; v₁ ↦ w₁; …; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Ok 'True'\n+      𝕆('LESS' @σ v vᵢ) = Ok 'True'\n+      for some i ∈ 2, …, n-1\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertMiddle\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; v ↦ w;  vᵢ ↦ wᵢ; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vₙ v) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertLast\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n+\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Looks up the value at a key in the map using the builtin function\n+  ``EQUAL`` to test key equality. This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+  Formally the builtin function ``GENMAP_LOOKUP`` semantics is defined\n+  by the following rules. ::\n \n-  Deletes a key and its value from the map. When the key is not a\n-  member of the map, the original map is returned.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupErr\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupPresent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' (Some wᵢ)\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for any i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupAbsent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' None\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  Deletes a key and its value from the map, using the builtin function\n+  ``EQUAL`` to test key equality. When the key is not a member of the\n+  map, the original map is returned.  This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n+  Formally the builtin function ``GENMAP_DELETE`` semantics is defined\n+  by the following rules. ::\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeleteErr\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeletePresent\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ₊₁ ↦ wᵢ₊₁; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for any i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeleteAbsent\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛\n+\n * ``GENMAP_KEYS : ∀ α. ∀ β.  'GenMap' α β → 'List' α``\n \n-  Get the list of keys in the map. The keys are returned by insertion\n-  order, so if you insert key ``x`` before key ``y``, then ``x`` will\n-  appear before ``y`` in the list.\n+  Get the list of keys in the map. The keys are returned in the order\n+  they appears in the map.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_VALUES : ∀ α. ∀ β.  'GenMap' α β → 'List' β``\n+  Formally the builtin function ``GENMAP_KEYS`` semantics is defined\n+  by the following rules. ::\n \n-  Get the list of values in the map. The values are returned in the\n-  same order as ``GENMAP_KEYS``, so the ith element of ``GENMAP_KEYS``\n-  maps to the ith element of ``GENMAP_VALUES``.\n+    —————————————————————————————————————————————————————————————————————— EvGenMapKeysEmpty\n+      𝕆('GENMAP_KEYS' @σ @τ 〚〛) = 'Ok' (Nil @σ)\n \n-  [*Available in versions >= 1.dev*]\n+      𝕆('GENMAP_KEYS' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛) = 'Ok' vₗ\n+    —————————————————————————————————————————————————————————————————————— EvGenMapKeysNonEmpty\n+      𝕆('GENMAP_KEYS' @σ @τ 〚v₀ ↦ w₀; v₁ ↦ w₁; … ; vₙ ↦ wₙ〛) =\n+        'Ok' (Cons @σ v₀ vₗ)\n \n-* ``GENMAP_SIZE : ∀ α. ∀ β.  'GenMap' α β → 'Int64'``\n+* ``GENMAP_VALUES : ∀ α. ∀ β.  'GenMap' α β → 'List' β``\n \n-  Return the number of elements in the map.\n+  Get the list of values in the map. The keys are returned in the\n+  order they appears in the map."
  },
  {
    "id" : "2bdfb11e-5459-4b56-9b38-16c4a2b6c2d6",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "fc677323-0ec6-4b04-962e-4010cf64bb2d",
        "parentId" : null,
        "author" : null,
        "body" : "You can simply reinstate this paragraph if you want to leave the possibility for hashtable-based implementation open (but use ``EQUAL`` instead of ``~ᵥ``).",
        "createdAt" : "2020-03-13T17:47:29Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "011859eb-1d65-4a74-ab59-3f5471ba108c",
        "parentId" : "fc677323-0ec6-4b04-962e-4010cf64bb2d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-16T11:36:18Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : 202,
    "diffHunk" : "@@ -3151,69 +3134,148 @@ in which keys were inserted into the map (insertion-order).\n * ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n \n   Inserts a new key and value in the map. If the key is already\n-  present in the map, the associated value is replaced with the\n-  supplied value, otherwise the new key/value entry is appended at the\n-  ends of the map.\n-\n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  present according the builtin function ``EQUAL``, the associated\n+  value is replaced with the supplied value, otherwise the key/value\n+  is inserted in order according to the builtin function ``LESS`` applied\n+  on keys. This raises a runtime error if it tries to compare\n+  incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+  Formally the builtin function ``GENMAP_INSERT`` semantics is defined\n+  by the following rules. ::\n \n-  Looks up the value at a key in the map.\n+   —————————————————————————————————————————————————————————————————————— EvGenMapInsertEmpty\n+      𝕆('GENMAP_INSERT' @σ @τ 〚〛 v w) = 〚v ↦ w〛\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplaceErr\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertReplace\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ ↦ w;  vᵢ₊₁ ↦ wᵢ₊₁; …; vₙ ↦ wₙ〛\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to the rules listed below.\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrLeft\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v vᵢ) = Err t    for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertErrRight\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) = Err t\n+\n+      𝕆('LESS' @σ v v₁) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertFirst\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v ↦ w; v₁ ↦ w₁; …; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vᵢ₋₁ v) = Ok 'True'\n+      𝕆('LESS' @σ v vᵢ) = Ok 'True'\n+      for some i ∈ 2, …, n-1\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertMiddle\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; v ↦ w;  vᵢ ↦ wᵢ; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('LESS' @σ vₙ v) = Ok 'True'\n+    —————————————————————————————————————————————————————————————————————— EvGenMapInsertInsertLast\n+      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n+        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n+\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Looks up the value at a key in the map using the builtin function\n+  ``EQUAL`` to test key equality. This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n-* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+  Formally the builtin function ``GENMAP_LOOKUP`` semantics is defined\n+  by the following rules. ::\n \n-  Deletes a key and its value from the map. When the key is not a\n-  member of the map, the original map is returned.\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupErr\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupPresent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' (Some wᵢ)\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for all i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapLookupAbsent\n+      𝕆('GENMAP_LOOKUP' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' None\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n \n-  This raises an error if the key is not a valid map key. Keys are\n-  compared according to ``~ᵥ``.\n+  Deletes a key and its value from the map, using the builtin function\n+  ``EQUAL`` to test key equality. When the key is not a member of the\n+  map, the original map is returned.  This raises a runtime error if it\n+  try to compare incomparable values.\n \n   [*Available in versions >= 1.dev*]\n \n+  Formally the builtin function ``GENMAP_DELETE`` semantics is defined\n+  by the following rules. ::\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Err t  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeleteErr\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) = Err t\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'True'  for some i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeletePresent\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        Ok' 〚v₁ ↦ w₁; … ; vᵢ₋₁ ↦ wᵢ₋₁; vᵢ₊₁ ↦ wᵢ₊₁; … ; vₙ ↦ wₙ〛\n+\n+      𝕆('EQUAL' @σ vᵢ v) = Ok 'False'  for all i ∈ 1, …, n\n+    —————————————————————————————————————————————————————————————————————— EvGenMapDeleteAbsent\n+      𝕆('GENMAP_DELETE' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛 v) =\n+        'Ok' 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛\n+\n * ``GENMAP_KEYS : ∀ α. ∀ β.  'GenMap' α β → 'List' α``\n \n-  Get the list of keys in the map. The keys are returned by insertion\n-  order, so if you insert key ``x`` before key ``y``, then ``x`` will\n-  appear before ``y`` in the list.\n+  Get the list of keys in the map. The keys are returned in the order\n+  they appear in the map.\n \n   [*Available in versions >= 1.dev*]\n \n+  Formally the builtin function ``GENMAP_KEYS`` semantics is defined\n+  by the following rules. ::\n+\n+    —————————————————————————————————————————————————————————————————————— EvGenMapKeysEmpty\n+      𝕆('GENMAP_KEYS' @σ @τ 〚〛) = 'Ok' (Nil @σ)\n+\n+      𝕆('GENMAP_KEYS' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛) = 'Ok' vₗ\n+    —————————————————————————————————————————————————————————————————————— EvGenMapKeysNonEmpty\n+      𝕆('GENMAP_KEYS' @σ @τ 〚v₀ ↦ w₀; v₁ ↦ w₁; … ; vₙ ↦ wₙ〛) =\n+        'Ok' (Cons @σ v₀ vₗ)\n+\n * ``GENMAP_VALUES : ∀ α. ∀ β.  'GenMap' α β → 'List' β``\n \n   Get the list of values in the map. The values are returned in the\n-  same order as ``GENMAP_KEYS``, so the ith element of ``GENMAP_KEYS``\n-  maps to the ith element of ``GENMAP_VALUES``.\n+  order they appear in the map (i.e. sorted by key).\n \n   [*Available in versions >= 1.dev*]\n \n+  Formally the builtin function ``GENMAP_VALUES`` semantics is defined\n+  by the following rules. ::\n+\n+    —————————————————————————————————————————————————————————————————————— EvGenMapValuesEmpty\n+      𝕆('GENMAP_VALUES' @σ @τ 〚〛) = 'Ok' (Nil @τ)\n+\n+      𝕆('GENMAP_VALUES' @σ @τ 〚v₁ ↦ w₁; … ; vₙ ↦ wₙ〛) = 'Ok' wₗ\n+    —————————————————————————————————————————————————————————————————————— EvGenMapValuesNonEmpty\n+      𝕆('GENMAP_KEYS' @σ @τ 〚v₀ ↦ w₀; v₁ ↦ w₁; … ; vₙ ↦ wₙ〛) =\n+        'Ok' (Cons @τ w₀ wₗ)\n+  \n * ``GENMAP_SIZE : ∀ α. ∀ β.  'GenMap' α β → 'Int64'``\n \n   Return the number of elements in the map.\n \n   [*Available in versions >= 1.dev*]\n \n-\n-**Validity of Keys:** A key is valid if and only if it is equivalent\n-to itself according to the relation ``~ᵥ`` defined below. Attempts to\n-use an invalid key in the operations above always result in a runtime\n-error."
  },
  {
    "id" : "6bad6025-07ab-4ee4-b2db-b045143ee7cf",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "09a3cc9c-093d-4a50-a9d3-e8d5bc24c4d7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there something missing here? Maybe you intended to say “the strict and non-strict lexicographic ordering”?",
        "createdAt" : "2020-03-12T08:20:31Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0cb1156b-2c21-41bc-ae62-d431400c82ac",
        "parentId" : "09a3cc9c-093d-4a50-a9d3-e8d5bc24c4d7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. This replaced by  ``≤ₗ`` defined in the literal section. ",
        "createdAt" : "2020-03-12T12:46:58Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict"
  },
  {
    "id" : "34684782-ef0e-4866-b2b1-90613f403023",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "ef1021a3-db4e-4ed8-8c55-4d7f7dddb0c8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You’re calling this section “Type order” and then you start by talking about numeric values. That doesn’t make sense to me.",
        "createdAt" : "2020-03-12T08:21:22Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "65adaa9c-672d-45a8-a6b2-99c41fbfa121",
        "parentId" : "ef1021a3-db4e-4ed8-8c55-4d7f7dddb0c8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right, this is confusing. \r\nThis section is about *only* type ordering. \r\nThe main difference between type ordering and value ordering is that we need to specify the latter *operationally* to explain how it fails when encounter non comparable values. We do not need an operation specification for the former because the type checker will ensure that comparison of is always defined (the rules for typing ``'to_any'`` and ``'type_rep'``  ensure the type used do not contains variable, quanitifier not type synonyms).\r\n\r\n\r\nValue ordering is define in the section ``Generic comparison functions``.",
        "createdAt" : "2020-03-12T11:29:21Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order"
  },
  {
    "id" : "195a4fff-2fa8-4240-871d-344e5fc69a16",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "ec71ca5a-38da-4a76-9a76-75aabd4b0b43",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think it’s crucial to state at the beginning that the value order only applies to things of the same type. You removed that part or at least moved it down.",
        "createdAt" : "2020-03-12T08:24:21Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da55e8dd-258f-44d0-9856-00c2d87d580d",
        "parentId" : "ec71ca5a-38da-4a76-9a76-75aabd4b0b43",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I add a sentence in the `Generic comparison functions` section\r\n",
        "createdAt" : "2020-03-12T12:42:10Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and"
  },
  {
    "id" : "2f5bee6a-2fdf-4c2b-a032-904d497d4e8a",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "06297dcb-ea8f-4e95-bb15-57b0a7eee43b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\non types that satisfies the following constraints::\r\n```",
        "createdAt" : "2020-03-12T08:24:51Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict\n+when applied on string-like values (i.e. ``Text`` and ``Party``\n+literals).\n \n-We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n-``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n-It is a total order when comparing serialized values of the same type.\n+Formally, ``<ₜ`` is defined as the least transitive relation\n+on types that verifies the following rules::"
  },
  {
    "id" : "890d5394-001e-4f11-b9e3-4824aa55245e",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "5852ab36-bfa8-49c3-b1d4-3cba2c5fc7ba",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we define ordering on package ids and module names anywhere?",
        "createdAt" : "2020-03-12T09:41:15Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a8656f04-22c2-49df-b69b-3459968b39f5",
        "parentId" : "5852ab36-bfa8-49c3-b1d4-3cba2c5fc7ba",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I replace by \"comes lexicographically before\"",
        "createdAt" : "2020-03-12T10:58:46Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict\n+when applied on string-like values (i.e. ``Text`` and ``Party``\n+literals).\n \n-We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n-``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n-It is a total order when comparing serialized values of the same type.\n+Formally, ``<ₜ`` is defined as the least transitive relation\n+on types that verifies the following rules::\n \n-                          ┌────────┐\n-  Value Order Relation    │ v <ᵥ w │\n-                          └────────┘\n+  ———————————————————————————————————————————————————\n+    'Unit' <ₜ 'Bool'\n \n-  ——————————————————————————————————————————————————— GenLtTrueFalse\n-   'False' <ᵥ 'True'\n+  ———————————————————————————————————————————————————\n+    'Bool' <ₜ 'Int64'\n \n-   LitNumeric₁ is less than LitNumeric₂ as numbers.\n-  ——————————————————————————————————————————————————— GenLtLitNumeric\n-   LitNumeric₁ <ᵥ LitNumeric₂\n+  ———————————————————————————————————————————————————\n+    'Int64' <ₜ 'Date'\n \n-   t₁ comes lexicographically strictly before t₂,\n-   when viewed as sequences of Unicode code points\n-  ——————————————————————————————————————————————————— GenLtLitText\n-   t₁ <ᵥ t₂\n+  ———————————————————————————————————————————————————\n+    'Date' <ₜ 'Timestamp'\n \n-   LitDate₁ is strictly before LitDate₂ as dates\n-  ——————————————————————————————————————————————————— GenLtLitDate\n-   LitDate₁ <ᵥ LitDate₂\n+  ———————————————————————————————————————————————————\n+    'Timestamp' <ₜ 'Text'\n \n-   LitTimestamp₁ is strictly before LitTimestamp₂ as\n-   timestamps\n-  ——————————————————————————————————————————————————— GenLtLitTimestamp\n-   LitTimestamp₁ <ᵥ LitTimestamp₂\n+  ———————————————————————————————————————————————————\n+    'Text' <ₜ 'Party'\n \n-   LitParty₁ comes lexicographically before\n-   LitParty₂ when viewed as sequences of Unicode\n-   code points\n-  ——————————————————————————————————————————————————— GenLtLitParty\n-   LitParty₁ <ᵥ LitParty₂\n+  ———————————————————————————————————————————————————\n+    'Party' <ₜ 'Numeric'\n \n-   cid₁ is ordered before cid₂ according to\n-   their internal representations\n-  ——————————————————————————————————————————————————— GenLtLitContractId\n-   cid₁ <ᵥ cid₂\n+  ———————————————————————————————————————————————————\n+    'Numeric' <ₜ 'ContractId'\n \n-  ——————————————————————————————————————————————————— GenLtListNil\n-   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'ContractId' <ₜ'Arrow'\n \n-   vₕ <ᵥ wₕ\n-  ——————————————————————————————————————————————————— GenLtListConsHead\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Arrow' <ₜ 'Optional'\n \n-   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n-  ——————————————————————————————————————————————————— GenLtListConsTail\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Optional' <ₜ 'List'\n \n-  ——————————————————————————————————————————————————— GenLtOptionalNone\n-   'None' @τ <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'List' <ₜ 'TextMap'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtOptionalSome\n-   'Some' @τ v <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'TextMap' <ₜ 'GenMap'\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtRecCon\n-  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n-    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+  ———————————————————————————————————————————————————\n+    'GenMap' <ₜ 'Any'\n \n-   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n-   constructors for variant type Mod:T\n-  ——————————————————————————————————————————————————— GenLtVariantCon1\n-   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'Any' <ₜ 'TypeRep'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtVariantCon2\n-   Mod:T:V @τ₁ … @τₙ v <ᵥ Mod:T:V @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'TypeRep' <ₜ 'Update'\n \n-   Mod:T:E₁ comes before Mod:T:E₂ in the list of\n-   constructors for enum type Mod:T\n-  ——————————————————————————————————————————————————— GenLtEnumCon\n-   Mod:T:E₁ <ᵥ Mod:T:E₂\n+  ———————————————————————————————————————————————————\n+    'Update' <ₜ Mod:T\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtStructCon\n-   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    PkgId₁ < PkgId₂\n+  ———————————————————————————————————————————————————\n+    (PkgId₁:ModName₁):T₁ <ₜ (PkgId₂:ModName₂):T₂\n+\n+    ModName₁ < ModName₂"
  },
  {
    "id" : "cb7e359b-b0e6-4857-88af-ffb0d399f94b",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "43c7422e-1cfe-4d8d-9ac3-325dac28dac6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this supposed to be lexicographic ordering on type constructor names? It’s not very clear to me.",
        "createdAt" : "2020-03-12T09:41:47Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "039b0504-8438-4a87-bf53-f9692b4427db",
        "parentId" : "43c7422e-1cfe-4d8d-9ac3-325dac28dac6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I replace by \"comes lexicographically before\"",
        "createdAt" : "2020-03-12T10:59:12Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict\n+when applied on string-like values (i.e. ``Text`` and ``Party``\n+literals).\n \n-We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n-``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n-It is a total order when comparing serialized values of the same type.\n+Formally, ``<ₜ`` is defined as the least transitive relation\n+on types that verifies the following rules::\n \n-                          ┌────────┐\n-  Value Order Relation    │ v <ᵥ w │\n-                          └────────┘\n+  ———————————————————————————————————————————————————\n+    'Unit' <ₜ 'Bool'\n \n-  ——————————————————————————————————————————————————— GenLtTrueFalse\n-   'False' <ᵥ 'True'\n+  ———————————————————————————————————————————————————\n+    'Bool' <ₜ 'Int64'\n \n-   LitNumeric₁ is less than LitNumeric₂ as numbers.\n-  ——————————————————————————————————————————————————— GenLtLitNumeric\n-   LitNumeric₁ <ᵥ LitNumeric₂\n+  ———————————————————————————————————————————————————\n+    'Int64' <ₜ 'Date'\n \n-   t₁ comes lexicographically strictly before t₂,\n-   when viewed as sequences of Unicode code points\n-  ——————————————————————————————————————————————————— GenLtLitText\n-   t₁ <ᵥ t₂\n+  ———————————————————————————————————————————————————\n+    'Date' <ₜ 'Timestamp'\n \n-   LitDate₁ is strictly before LitDate₂ as dates\n-  ——————————————————————————————————————————————————— GenLtLitDate\n-   LitDate₁ <ᵥ LitDate₂\n+  ———————————————————————————————————————————————————\n+    'Timestamp' <ₜ 'Text'\n \n-   LitTimestamp₁ is strictly before LitTimestamp₂ as\n-   timestamps\n-  ——————————————————————————————————————————————————— GenLtLitTimestamp\n-   LitTimestamp₁ <ᵥ LitTimestamp₂\n+  ———————————————————————————————————————————————————\n+    'Text' <ₜ 'Party'\n \n-   LitParty₁ comes lexicographically before\n-   LitParty₂ when viewed as sequences of Unicode\n-   code points\n-  ——————————————————————————————————————————————————— GenLtLitParty\n-   LitParty₁ <ᵥ LitParty₂\n+  ———————————————————————————————————————————————————\n+    'Party' <ₜ 'Numeric'\n \n-   cid₁ is ordered before cid₂ according to\n-   their internal representations\n-  ——————————————————————————————————————————————————— GenLtLitContractId\n-   cid₁ <ᵥ cid₂\n+  ———————————————————————————————————————————————————\n+    'Numeric' <ₜ 'ContractId'\n \n-  ——————————————————————————————————————————————————— GenLtListNil\n-   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'ContractId' <ₜ'Arrow'\n \n-   vₕ <ᵥ wₕ\n-  ——————————————————————————————————————————————————— GenLtListConsHead\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Arrow' <ₜ 'Optional'\n \n-   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n-  ——————————————————————————————————————————————————— GenLtListConsTail\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Optional' <ₜ 'List'\n \n-  ——————————————————————————————————————————————————— GenLtOptionalNone\n-   'None' @τ <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'List' <ₜ 'TextMap'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtOptionalSome\n-   'Some' @τ v <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'TextMap' <ₜ 'GenMap'\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtRecCon\n-  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n-    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+  ———————————————————————————————————————————————————\n+    'GenMap' <ₜ 'Any'\n \n-   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n-   constructors for variant type Mod:T\n-  ——————————————————————————————————————————————————— GenLtVariantCon1\n-   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'Any' <ₜ 'TypeRep'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtVariantCon2\n-   Mod:T:V @τ₁ … @τₙ v <ᵥ Mod:T:V @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'TypeRep' <ₜ 'Update'\n \n-   Mod:T:E₁ comes before Mod:T:E₂ in the list of\n-   constructors for enum type Mod:T\n-  ——————————————————————————————————————————————————— GenLtEnumCon\n-   Mod:T:E₁ <ᵥ Mod:T:E₂\n+  ———————————————————————————————————————————————————\n+    'Update' <ₜ Mod:T\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtStructCon\n-   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    PkgId₁ < PkgId₂\n+  ———————————————————————————————————————————————————\n+    (PkgId₁:ModName₁):T₁ <ₜ (PkgId₂:ModName₂):T₂\n+\n+    ModName₁ < ModName₂\n+  ———————————————————————————————————————————————————\n+    (PkgId:ModName₁):T₁ <ₜ (PkgId:ModName₂):T₂\n+\n+    T₁ < T₂"
  },
  {
    "id" : "84ee9d8a-ebb2-4311-9c11-43d9e1b7b3a4",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "8c0adfbb-1a34-4fd8-a9c0-d9556586ef97",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Shouldn’t the types of the fields be the same, i.e, `t_i` everywhere?",
        "createdAt" : "2020-03-12T10:14:04Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fe0c7b87-6213-4ba9-be8d-49d51c51a85a",
        "parentId" : "8c0adfbb-1a34-4fd8-a9c0-d9556586ef97",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Struct may have different type for each field",
        "createdAt" : "2020-03-12T11:00:16Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : 171,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict\n+when applied on string-like values (i.e. ``Text`` and ``Party``\n+literals).\n \n-We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n-``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n-It is a total order when comparing serialized values of the same type.\n+Formally, ``<ₜ`` is defined as the least transitive relation\n+on types that verifies the following rules::\n \n-                          ┌────────┐\n-  Value Order Relation    │ v <ᵥ w │\n-                          └────────┘\n+  ———————————————————————————————————————————————————\n+    'Unit' <ₜ 'Bool'\n \n-  ——————————————————————————————————————————————————— GenLtTrueFalse\n-   'False' <ᵥ 'True'\n+  ———————————————————————————————————————————————————\n+    'Bool' <ₜ 'Int64'\n \n-   LitNumeric₁ is less than LitNumeric₂ as numbers.\n-  ——————————————————————————————————————————————————— GenLtLitNumeric\n-   LitNumeric₁ <ᵥ LitNumeric₂\n+  ———————————————————————————————————————————————————\n+    'Int64' <ₜ 'Date'\n \n-   t₁ comes lexicographically strictly before t₂,\n-   when viewed as sequences of Unicode code points\n-  ——————————————————————————————————————————————————— GenLtLitText\n-   t₁ <ᵥ t₂\n+  ———————————————————————————————————————————————————\n+    'Date' <ₜ 'Timestamp'\n \n-   LitDate₁ is strictly before LitDate₂ as dates\n-  ——————————————————————————————————————————————————— GenLtLitDate\n-   LitDate₁ <ᵥ LitDate₂\n+  ———————————————————————————————————————————————————\n+    'Timestamp' <ₜ 'Text'\n \n-   LitTimestamp₁ is strictly before LitTimestamp₂ as\n-   timestamps\n-  ——————————————————————————————————————————————————— GenLtLitTimestamp\n-   LitTimestamp₁ <ᵥ LitTimestamp₂\n+  ———————————————————————————————————————————————————\n+    'Text' <ₜ 'Party'\n \n-   LitParty₁ comes lexicographically before\n-   LitParty₂ when viewed as sequences of Unicode\n-   code points\n-  ——————————————————————————————————————————————————— GenLtLitParty\n-   LitParty₁ <ᵥ LitParty₂\n+  ———————————————————————————————————————————————————\n+    'Party' <ₜ 'Numeric'\n \n-   cid₁ is ordered before cid₂ according to\n-   their internal representations\n-  ——————————————————————————————————————————————————— GenLtLitContractId\n-   cid₁ <ᵥ cid₂\n+  ———————————————————————————————————————————————————\n+    'Numeric' <ₜ 'ContractId'\n \n-  ——————————————————————————————————————————————————— GenLtListNil\n-   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'ContractId' <ₜ'Arrow'\n \n-   vₕ <ᵥ wₕ\n-  ——————————————————————————————————————————————————— GenLtListConsHead\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Arrow' <ₜ 'Optional'\n \n-   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n-  ——————————————————————————————————————————————————— GenLtListConsTail\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Optional' <ₜ 'List'\n \n-  ——————————————————————————————————————————————————— GenLtOptionalNone\n-   'None' @τ <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'List' <ₜ 'TextMap'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtOptionalSome\n-   'Some' @τ v <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'TextMap' <ₜ 'GenMap'\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtRecCon\n-  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n-    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+  ———————————————————————————————————————————————————\n+    'GenMap' <ₜ 'Any'\n \n-   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n-   constructors for variant type Mod:T\n-  ——————————————————————————————————————————————————— GenLtVariantCon1\n-   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'Any' <ₜ 'TypeRep'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtVariantCon2\n-   Mod:T:V @τ₁ … @τₙ v <ᵥ Mod:T:V @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'TypeRep' <ₜ 'Update'\n \n-   Mod:T:E₁ comes before Mod:T:E₂ in the list of\n-   constructors for enum type Mod:T\n-  ——————————————————————————————————————————————————— GenLtEnumCon\n-   Mod:T:E₁ <ᵥ Mod:T:E₂\n+  ———————————————————————————————————————————————————\n+    'Update' <ₜ Mod:T\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtStructCon\n-   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    PkgId₁ < PkgId₂\n+  ———————————————————————————————————————————————————\n+    (PkgId₁:ModName₁):T₁ <ₜ (PkgId₂:ModName₂):T₂\n+\n+    ModName₁ < ModName₂\n+  ———————————————————————————————————————————————————\n+    (PkgId:ModName₁):T₁ <ₜ (PkgId:ModName₂):T₂\n+\n+    T₁ < T₂\n+  ———————————————————————————————————————————————————\n+    Mod:T₁ <ₜ Mod:T₂\n+\n+  ———————————————————————————————————————————————————\n+    Mod:T <ₜ n\n+\n+    n₁ is strictly less that n₂\n+  ———————————————————————————————————————————————————\n+    n₁ <ₜ n₂\n+\n+  ———————————————————————————————————————————————————\n+    n <ₜ ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩\n+\n+    fᵢ < gᵢ\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ"
  },
  {
    "id" : "f30b7d33-5b3f-4504-9090-466d2fc9067d",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "d86527e5-1674-4b7b-9011-cd42490983b5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t understand this rule. Are you trying to say that adding extra fields makes it bigger? If so, I don’t understand why `f_n` is at the end in both cases and what the point of `f_m` is.",
        "createdAt" : "2020-03-12T10:15:26Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c44d47a3-19bb-42e5-bc4e-5c62e7c26b8c",
        "parentId" : "d86527e5-1674-4b7b-9011-cd42490983b5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It is better now ? ",
        "createdAt" : "2020-03-12T12:48:57Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : 178,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict\n+when applied on string-like values (i.e. ``Text`` and ``Party``\n+literals).\n \n-We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n-``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n-It is a total order when comparing serialized values of the same type.\n+Formally, ``<ₜ`` is defined as the least transitive relation\n+on types that verifies the following rules::\n \n-                          ┌────────┐\n-  Value Order Relation    │ v <ᵥ w │\n-                          └────────┘\n+  ———————————————————————————————————————————————————\n+    'Unit' <ₜ 'Bool'\n \n-  ——————————————————————————————————————————————————— GenLtTrueFalse\n-   'False' <ᵥ 'True'\n+  ———————————————————————————————————————————————————\n+    'Bool' <ₜ 'Int64'\n \n-   LitNumeric₁ is less than LitNumeric₂ as numbers.\n-  ——————————————————————————————————————————————————— GenLtLitNumeric\n-   LitNumeric₁ <ᵥ LitNumeric₂\n+  ———————————————————————————————————————————————————\n+    'Int64' <ₜ 'Date'\n \n-   t₁ comes lexicographically strictly before t₂,\n-   when viewed as sequences of Unicode code points\n-  ——————————————————————————————————————————————————— GenLtLitText\n-   t₁ <ᵥ t₂\n+  ———————————————————————————————————————————————————\n+    'Date' <ₜ 'Timestamp'\n \n-   LitDate₁ is strictly before LitDate₂ as dates\n-  ——————————————————————————————————————————————————— GenLtLitDate\n-   LitDate₁ <ᵥ LitDate₂\n+  ———————————————————————————————————————————————————\n+    'Timestamp' <ₜ 'Text'\n \n-   LitTimestamp₁ is strictly before LitTimestamp₂ as\n-   timestamps\n-  ——————————————————————————————————————————————————— GenLtLitTimestamp\n-   LitTimestamp₁ <ᵥ LitTimestamp₂\n+  ———————————————————————————————————————————————————\n+    'Text' <ₜ 'Party'\n \n-   LitParty₁ comes lexicographically before\n-   LitParty₂ when viewed as sequences of Unicode\n-   code points\n-  ——————————————————————————————————————————————————— GenLtLitParty\n-   LitParty₁ <ᵥ LitParty₂\n+  ———————————————————————————————————————————————————\n+    'Party' <ₜ 'Numeric'\n \n-   cid₁ is ordered before cid₂ according to\n-   their internal representations\n-  ——————————————————————————————————————————————————— GenLtLitContractId\n-   cid₁ <ᵥ cid₂\n+  ———————————————————————————————————————————————————\n+    'Numeric' <ₜ 'ContractId'\n \n-  ——————————————————————————————————————————————————— GenLtListNil\n-   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'ContractId' <ₜ'Arrow'\n \n-   vₕ <ᵥ wₕ\n-  ——————————————————————————————————————————————————— GenLtListConsHead\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Arrow' <ₜ 'Optional'\n \n-   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n-  ——————————————————————————————————————————————————— GenLtListConsTail\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Optional' <ₜ 'List'\n \n-  ——————————————————————————————————————————————————— GenLtOptionalNone\n-   'None' @τ <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'List' <ₜ 'TextMap'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtOptionalSome\n-   'Some' @τ v <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'TextMap' <ₜ 'GenMap'\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtRecCon\n-  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n-    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+  ———————————————————————————————————————————————————\n+    'GenMap' <ₜ 'Any'\n \n-   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n-   constructors for variant type Mod:T\n-  ——————————————————————————————————————————————————— GenLtVariantCon1\n-   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'Any' <ₜ 'TypeRep'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtVariantCon2\n-   Mod:T:V @τ₁ … @τₙ v <ᵥ Mod:T:V @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'TypeRep' <ₜ 'Update'\n \n-   Mod:T:E₁ comes before Mod:T:E₂ in the list of\n-   constructors for enum type Mod:T\n-  ——————————————————————————————————————————————————— GenLtEnumCon\n-   Mod:T:E₁ <ᵥ Mod:T:E₂\n+  ———————————————————————————————————————————————————\n+    'Update' <ₜ Mod:T\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtStructCon\n-   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    PkgId₁ < PkgId₂\n+  ———————————————————————————————————————————————————\n+    (PkgId₁:ModName₁):T₁ <ₜ (PkgId₂:ModName₂):T₂\n+\n+    ModName₁ < ModName₂\n+  ———————————————————————————————————————————————————\n+    (PkgId:ModName₁):T₁ <ₜ (PkgId:ModName₂):T₂\n+\n+    T₁ < T₂\n+  ———————————————————————————————————————————————————\n+    Mod:T₁ <ₜ Mod:T₂\n+\n+  ———————————————————————————————————————————————————\n+    Mod:T <ₜ n\n+\n+    n₁ is strictly less that n₂\n+  ———————————————————————————————————————————————————\n+    n₁ <ₜ n₂\n+\n+  ———————————————————————————————————————————————————\n+    n <ₜ ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩\n+\n+    fᵢ < gᵢ\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n+      ⟨ f₁ : σ₁, …, fᵢ₋1 : σᵢ₋₁, gᵢ : σᵢ, …, gₙ : σₙ ⟩\n \n-  ——————————————————————————————————————————————————— GenLtTextMap1\n-   [ ] <ᵥ [s₁ ↦ w₁, …, sₘ ↦ wₘ]\n-\n-   t₁ < t₂ < … < tₘ\n-   s₁ < s₂ < … < sₙ\n-   t₁ < s₁\n-  ——————————————————————————————————————————————————— GenLtTextMap2\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ < t₂ < … < tₘ\n-   s₁ < s₂ < … < sₙ\n-   t₁ = s₁\n-   v₁ <ᵥ w₁\n-  ——————————————————————————————————————————————————— GenLtTextMap3\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ = s₁\n-   v₁ ~ᵥ w₁\n-   [t₂ ↦ v₂, …, tₘ ↦ vₘ] <ᵥ [s₂ ↦ w₂, …, sₙ ↦ wₙ]\n-  ——————————————————————————————————————————————————— GenLtTextMap4\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-  ——————————————————————————————————————————————————— GenLtGenMap1\n-   [ ] <ᵥ [s₁ ↦ w₁, …, sₘ ↦ wₘ]\n-\n-   t₁ <ᵥ t₂ <ᵥ … <ᵥ tₘ\n-   s₁ <ᵥ s₂ <ᵥ … <ᵥ sₙ\n-   t₁ <ᵥ s₁\n-  ——————————————————————————————————————————————————— GenLtGenMap2\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ <ᵥ t₂ <ᵥ … <ᵥ tₘ\n-   s₁ <ᵥ s₂ <ᵥ … <ᵥ sₙ\n-   t₁ ~ᵥ s₁\n-   v₁ <ᵥ w₁\n-  ——————————————————————————————————————————————————— GenLtGenMap3\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ ~ᵥ s₁\n-   v₁ ~ᵥ w₁\n-   [t₂ ↦ v₂, …, tₘ ↦ vₘ] <ᵥ [s₂ ↦ w₂, …, sₙ ↦ wₙ]\n-  ——————————————————————————————————————————————————— GenLtGenMap4\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-.. note: In the above rules, map entries for TextMap and GenMap are ordered\n-   by key. The rules make this assumption explicit.\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ"
  },
  {
    "id" : "d66b519d-311d-44b0-815d-261af7fea818",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "c152d31d-1a3f-480a-91a4-acd8009ab704",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think these rules would be significantly easier to understand if we give them somewhat descriptive names or a comment.",
        "createdAt" : "2020-03-12T10:18:11Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "68386e36-6ec6-47a3-9f65-a94a07f0a029",
        "parentId" : "c152d31d-1a3f-480a-91a4-acd8009ab704",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good point, though not easy. Will try my best.",
        "createdAt" : "2020-03-12T11:15:55Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict\n+when applied on string-like values (i.e. ``Text`` and ``Party``\n+literals).\n \n-We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n-``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n-It is a total order when comparing serialized values of the same type.\n+Formally, ``<ₜ`` is defined as the least transitive relation\n+on types that verifies the following rules::\n \n-                          ┌────────┐\n-  Value Order Relation    │ v <ᵥ w │\n-                          └────────┘\n+  ———————————————————————————————————————————————————\n+    'Unit' <ₜ 'Bool'\n \n-  ——————————————————————————————————————————————————— GenLtTrueFalse\n-   'False' <ᵥ 'True'\n+  ———————————————————————————————————————————————————\n+    'Bool' <ₜ 'Int64'\n \n-   LitNumeric₁ is less than LitNumeric₂ as numbers.\n-  ——————————————————————————————————————————————————— GenLtLitNumeric\n-   LitNumeric₁ <ᵥ LitNumeric₂\n+  ———————————————————————————————————————————————————\n+    'Int64' <ₜ 'Date'\n \n-   t₁ comes lexicographically strictly before t₂,\n-   when viewed as sequences of Unicode code points\n-  ——————————————————————————————————————————————————— GenLtLitText\n-   t₁ <ᵥ t₂\n+  ———————————————————————————————————————————————————\n+    'Date' <ₜ 'Timestamp'\n \n-   LitDate₁ is strictly before LitDate₂ as dates\n-  ——————————————————————————————————————————————————— GenLtLitDate\n-   LitDate₁ <ᵥ LitDate₂\n+  ———————————————————————————————————————————————————\n+    'Timestamp' <ₜ 'Text'\n \n-   LitTimestamp₁ is strictly before LitTimestamp₂ as\n-   timestamps\n-  ——————————————————————————————————————————————————— GenLtLitTimestamp\n-   LitTimestamp₁ <ᵥ LitTimestamp₂\n+  ———————————————————————————————————————————————————\n+    'Text' <ₜ 'Party'\n \n-   LitParty₁ comes lexicographically before\n-   LitParty₂ when viewed as sequences of Unicode\n-   code points\n-  ——————————————————————————————————————————————————— GenLtLitParty\n-   LitParty₁ <ᵥ LitParty₂\n+  ———————————————————————————————————————————————————\n+    'Party' <ₜ 'Numeric'\n \n-   cid₁ is ordered before cid₂ according to\n-   their internal representations\n-  ——————————————————————————————————————————————————— GenLtLitContractId\n-   cid₁ <ᵥ cid₂\n+  ———————————————————————————————————————————————————\n+    'Numeric' <ₜ 'ContractId'\n \n-  ——————————————————————————————————————————————————— GenLtListNil\n-   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'ContractId' <ₜ'Arrow'\n \n-   vₕ <ᵥ wₕ\n-  ——————————————————————————————————————————————————— GenLtListConsHead\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Arrow' <ₜ 'Optional'\n \n-   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n-  ——————————————————————————————————————————————————— GenLtListConsTail\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Optional' <ₜ 'List'\n \n-  ——————————————————————————————————————————————————— GenLtOptionalNone\n-   'None' @τ <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'List' <ₜ 'TextMap'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtOptionalSome\n-   'Some' @τ v <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'TextMap' <ₜ 'GenMap'\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtRecCon\n-  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n-    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+  ———————————————————————————————————————————————————\n+    'GenMap' <ₜ 'Any'\n \n-   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n-   constructors for variant type Mod:T\n-  ——————————————————————————————————————————————————— GenLtVariantCon1\n-   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'Any' <ₜ 'TypeRep'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtVariantCon2\n-   Mod:T:V @τ₁ … @τₙ v <ᵥ Mod:T:V @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'TypeRep' <ₜ 'Update'\n \n-   Mod:T:E₁ comes before Mod:T:E₂ in the list of\n-   constructors for enum type Mod:T\n-  ——————————————————————————————————————————————————— GenLtEnumCon\n-   Mod:T:E₁ <ᵥ Mod:T:E₂\n+  ———————————————————————————————————————————————————\n+    'Update' <ₜ Mod:T\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtStructCon\n-   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    PkgId₁ < PkgId₂\n+  ———————————————————————————————————————————————————\n+    (PkgId₁:ModName₁):T₁ <ₜ (PkgId₂:ModName₂):T₂\n+\n+    ModName₁ < ModName₂\n+  ———————————————————————————————————————————————————\n+    (PkgId:ModName₁):T₁ <ₜ (PkgId:ModName₂):T₂\n+\n+    T₁ < T₂\n+  ———————————————————————————————————————————————————\n+    Mod:T₁ <ₜ Mod:T₂\n+\n+  ———————————————————————————————————————————————————\n+    Mod:T <ₜ n\n+\n+    n₁ is strictly less that n₂\n+  ———————————————————————————————————————————————————\n+    n₁ <ₜ n₂\n+\n+  ———————————————————————————————————————————————————\n+    n <ₜ ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩\n+\n+    fᵢ < gᵢ\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n+      ⟨ f₁ : σ₁, …, fᵢ₋1 : σᵢ₋₁, gᵢ : σᵢ, …, gₙ : σₙ ⟩\n \n-  ——————————————————————————————————————————————————— GenLtTextMap1\n-   [ ] <ᵥ [s₁ ↦ w₁, …, sₘ ↦ wₘ]\n-\n-   t₁ < t₂ < … < tₘ\n-   s₁ < s₂ < … < sₙ\n-   t₁ < s₁\n-  ——————————————————————————————————————————————————— GenLtTextMap2\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ < t₂ < … < tₘ\n-   s₁ < s₂ < … < sₙ\n-   t₁ = s₁\n-   v₁ <ᵥ w₁\n-  ——————————————————————————————————————————————————— GenLtTextMap3\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ = s₁\n-   v₁ ~ᵥ w₁\n-   [t₂ ↦ v₂, …, tₘ ↦ vₘ] <ᵥ [s₂ ↦ w₂, …, sₙ ↦ wₙ]\n-  ——————————————————————————————————————————————————— GenLtTextMap4\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-  ——————————————————————————————————————————————————— GenLtGenMap1\n-   [ ] <ᵥ [s₁ ↦ w₁, …, sₘ ↦ wₘ]\n-\n-   t₁ <ᵥ t₂ <ᵥ … <ᵥ tₘ\n-   s₁ <ᵥ s₂ <ᵥ … <ᵥ sₙ\n-   t₁ <ᵥ s₁\n-  ——————————————————————————————————————————————————— GenLtGenMap2\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ <ᵥ t₂ <ᵥ … <ᵥ tₘ\n-   s₁ <ᵥ s₂ <ᵥ … <ᵥ sₙ\n-   t₁ ~ᵥ s₁\n-   v₁ <ᵥ w₁\n-  ——————————————————————————————————————————————————— GenLtGenMap3\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ ~ᵥ s₁\n-   v₁ ~ᵥ w₁\n-   [t₂ ↦ v₂, …, tₘ ↦ vₘ] <ᵥ [s₂ ↦ w₂, …, sₙ ↦ wₙ]\n-  ——————————————————————————————————————————————————— GenLtGenMap4\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-.. note: In the above rules, map entries for TextMap and GenMap are ordered\n-   by key. The rules make this assumption explicit.\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n+      ⟨ f₁ : τ₁, …, fₘ : τₘ, …, fₙ : σₙ ⟩\n \n+    τᵢ <ₜ σᵢ\n+  ———————————————————————————————————————————————————"
  },
  {
    "id" : "e086fa66-82ae-45c4-9d9f-03d93700fb6f",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe I’m missing something but which rules allows me to deduce that `Int64 < Numeric 10`?",
        "createdAt" : "2020-03-12T10:19:46Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b9c8df96-3eec-4652-bc2d-addfe594c377",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "By transitivity (stated in the text)  you have  ``Int64 <ₜ  τ σ``  for all ``τ`` and ``σ``.\r\n\r\nI replace the text by an explicit rule.",
        "createdAt" : "2020-03-12T11:09:37Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fdeac93b-e084-4098-8000-bab89e9e5769",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : null,
        "body" : "I don't see it @remyhaemmerle-da . There's no rule that lets you infer, for example, that ` τ₁ <ₜ τ₂ σ` whenever ` τ₁` is not a type application.",
        "createdAt" : "2020-03-12T13:28:38Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4dbb3d52-4555-4a68-9e99-3a391582bf8c",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yeah I also cannot find it in the text.",
        "createdAt" : "2020-03-12T13:32:00Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "378cea94-40a8-4ab0-b174-f5ba8e1e343e",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@associahedron \r\n`TypeOrderStructTyApp` allows you to infer trivially `⟨  ⟩ <ₜ τ₂ σ`\r\n\r\n@moritzkiefer-da Here is how I infer `Int64 < Numeric 10`\r\n- Using `TypeOrderTransitivity`, `TypeOrderInt64Date`, and `TypeOrderDateTimestamp` you can infer that 'Int64' <ₜ 'Timestamp'.\r\n- Combining with  `TypeOrderTransitivity`, and  `TypeOrderTimestampText` you can infer that  `'Int64' <ₜ 'Text'`\r\n ...\r\n- Combining with  `TypeOrderTransitivity`, and  `TypeOrderNatStruct` you can infer that ` 'Int64' <ₜ ⟨  ⟩`\r\n- Combining with  `TypeOrderTransitivity` and `TypeOrderStructTyApp` you can infer that  `'Int64' <ₜ Numeric 10`\r\n",
        "createdAt" : "2020-03-12T13:52:48Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bac61742-5637-4f35-9ece-c6a496cc0b08",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : null,
        "body" : "Oh, I see! That's very hard to see, but it checks out. \r\n\r\nMaybe it would be easier to understand if we used the type rank notion from the scala implementation? We could define a formal type rank function, and then have just one rule for comparing all the types with different type rank.",
        "createdAt" : "2020-03-12T14:05:32Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ebf01ac1-5215-44c4-a431-7d9200f8421e",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not like to define the rank explicitly (mapping types to integers)  ",
        "createdAt" : "2020-03-12T14:12:54Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22e7d2d2-7446-475a-a5b7-692c94ac00fd",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : null,
        "body" : "I think it would make the spec match the code more closely, and be easier to understand, which are both better for maintenance, but if you are sure about this way then I'm not opposed.",
        "createdAt" : "2020-03-12T14:19:56Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "79522408-c0c5-4c75-885b-006bd5bbb050",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I want to be able to introduce a new type between two already existing.  \r\nThis will oblige me to have different ranks between two specs.  ",
        "createdAt" : "2020-03-12T14:25:40Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "036679d0-bbe3-4512-9807-512770b1cc4d",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : null,
        "body" : "That's fine. The type rank function is entirely formal, and would only exist in the spec, not be exposed in DAML/DAML-LF. Alternatively, you can define a formal enumeration of type ranks (instead of an type rank integer) and use the order from the enumeration.\r\n\r\nAnyway, it is up to you.",
        "createdAt" : "2020-03-12T14:32:58Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d8421a54-babd-4314-894b-1573614151e7",
        "parentId" : "5aa107e4-3291-4d9a-8bd6-f1415c808ed2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I did not include the rank. ",
        "createdAt" : "2020-03-12T21:07:03Z",
        "updatedAt" : "2020-03-12T21:07:03Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : 193,
    "diffHunk" : "@@ -1887,140 +1887,123 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n-Value order\n+Type order\n ~~~~~~~~~~~\n \n-In this section, we define a strict partial order relation ``<ᵥ`` on values.\n-This is a strict order when comparing serialized values of the same type.\n+In this section, we define a strict partial order relation ``<ₜ`` on\n+types. In the following we assume that ``<`` and ``≤`` are\n+respectively the strict and non-strict natural ordering when applied\n+on numeric values (i.e., ``Int64``, ``Numeric``, ``Date``, and\n+``Timestamp`` literals) or the respectively the strict and non-strict\n+when applied on string-like values (i.e. ``Text`` and ``Party``\n+literals).\n \n-We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n-``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n-It is a total order when comparing serialized values of the same type.\n+Formally, ``<ₜ`` is defined as the least transitive relation\n+on types that verifies the following rules::\n \n-                          ┌────────┐\n-  Value Order Relation    │ v <ᵥ w │\n-                          └────────┘\n+  ———————————————————————————————————————————————————\n+    'Unit' <ₜ 'Bool'\n \n-  ——————————————————————————————————————————————————— GenLtTrueFalse\n-   'False' <ᵥ 'True'\n+  ———————————————————————————————————————————————————\n+    'Bool' <ₜ 'Int64'\n \n-   LitNumeric₁ is less than LitNumeric₂ as numbers.\n-  ——————————————————————————————————————————————————— GenLtLitNumeric\n-   LitNumeric₁ <ᵥ LitNumeric₂\n+  ———————————————————————————————————————————————————\n+    'Int64' <ₜ 'Date'\n \n-   t₁ comes lexicographically strictly before t₂,\n-   when viewed as sequences of Unicode code points\n-  ——————————————————————————————————————————————————— GenLtLitText\n-   t₁ <ᵥ t₂\n+  ———————————————————————————————————————————————————\n+    'Date' <ₜ 'Timestamp'\n \n-   LitDate₁ is strictly before LitDate₂ as dates\n-  ——————————————————————————————————————————————————— GenLtLitDate\n-   LitDate₁ <ᵥ LitDate₂\n+  ———————————————————————————————————————————————————\n+    'Timestamp' <ₜ 'Text'\n \n-   LitTimestamp₁ is strictly before LitTimestamp₂ as\n-   timestamps\n-  ——————————————————————————————————————————————————— GenLtLitTimestamp\n-   LitTimestamp₁ <ᵥ LitTimestamp₂\n+  ———————————————————————————————————————————————————\n+    'Text' <ₜ 'Party'\n \n-   LitParty₁ comes lexicographically before\n-   LitParty₂ when viewed as sequences of Unicode\n-   code points\n-  ——————————————————————————————————————————————————— GenLtLitParty\n-   LitParty₁ <ᵥ LitParty₂\n+  ———————————————————————————————————————————————————\n+    'Party' <ₜ 'Numeric'\n \n-   cid₁ is ordered before cid₂ according to\n-   their internal representations\n-  ——————————————————————————————————————————————————— GenLtLitContractId\n-   cid₁ <ᵥ cid₂\n+  ———————————————————————————————————————————————————\n+    'Numeric' <ₜ 'ContractId'\n \n-  ——————————————————————————————————————————————————— GenLtListNil\n-   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'ContractId' <ₜ'Arrow'\n \n-   vₕ <ᵥ wₕ\n-  ——————————————————————————————————————————————————— GenLtListConsHead\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Arrow' <ₜ 'Optional'\n \n-   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n-  ——————————————————————————————————————————————————— GenLtListConsTail\n-   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+  ———————————————————————————————————————————————————\n+    'Optional' <ₜ 'List'\n \n-  ——————————————————————————————————————————————————— GenLtOptionalNone\n-   'None' @τ <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'List' <ₜ 'TextMap'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtOptionalSome\n-   'Some' @τ v <ᵥ 'Some' @σ w\n+  ———————————————————————————————————————————————————\n+    'TextMap' <ₜ 'GenMap'\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtRecCon\n-  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n-    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+  ———————————————————————————————————————————————————\n+    'GenMap' <ₜ 'Any'\n \n-   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n-   constructors for variant type Mod:T\n-  ——————————————————————————————————————————————————— GenLtVariantCon1\n-   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'Any' <ₜ 'TypeRep'\n \n-   v <ᵥ w\n-  ——————————————————————————————————————————————————— GenLtVariantCon2\n-   Mod:T:V @τ₁ … @τₙ v <ᵥ Mod:T:V @σ₁ … @σₙ w\n+  ———————————————————————————————————————————————————\n+    'TypeRep' <ₜ 'Update'\n \n-   Mod:T:E₁ comes before Mod:T:E₂ in the list of\n-   constructors for enum type Mod:T\n-  ——————————————————————————————————————————————————— GenLtEnumCon\n-   Mod:T:E₁ <ᵥ Mod:T:E₂\n+  ———————————————————————————————————————————————————\n+    'Update' <ₜ Mod:T\n \n-   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n-  ——————————————————————————————————————————————————— GenLtStructCon\n-   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    PkgId₁ < PkgId₂\n+  ———————————————————————————————————————————————————\n+    (PkgId₁:ModName₁):T₁ <ₜ (PkgId₂:ModName₂):T₂\n+\n+    ModName₁ < ModName₂\n+  ———————————————————————————————————————————————————\n+    (PkgId:ModName₁):T₁ <ₜ (PkgId:ModName₂):T₂\n+\n+    T₁ < T₂\n+  ———————————————————————————————————————————————————\n+    Mod:T₁ <ₜ Mod:T₂\n+\n+  ———————————————————————————————————————————————————\n+    Mod:T <ₜ n\n+\n+    n₁ is strictly less that n₂\n+  ———————————————————————————————————————————————————\n+    n₁ <ₜ n₂\n+\n+  ———————————————————————————————————————————————————\n+    n <ₜ ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩\n+\n+    fᵢ < gᵢ\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n+      ⟨ f₁ : σ₁, …, fᵢ₋1 : σᵢ₋₁, gᵢ : σᵢ, …, gₙ : σₙ ⟩\n \n-  ——————————————————————————————————————————————————— GenLtTextMap1\n-   [ ] <ᵥ [s₁ ↦ w₁, …, sₘ ↦ wₘ]\n-\n-   t₁ < t₂ < … < tₘ\n-   s₁ < s₂ < … < sₙ\n-   t₁ < s₁\n-  ——————————————————————————————————————————————————— GenLtTextMap2\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ < t₂ < … < tₘ\n-   s₁ < s₂ < … < sₙ\n-   t₁ = s₁\n-   v₁ <ᵥ w₁\n-  ——————————————————————————————————————————————————— GenLtTextMap3\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ = s₁\n-   v₁ ~ᵥ w₁\n-   [t₂ ↦ v₂, …, tₘ ↦ vₘ] <ᵥ [s₂ ↦ w₂, …, sₙ ↦ wₙ]\n-  ——————————————————————————————————————————————————— GenLtTextMap4\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-  ——————————————————————————————————————————————————— GenLtGenMap1\n-   [ ] <ᵥ [s₁ ↦ w₁, …, sₘ ↦ wₘ]\n-\n-   t₁ <ᵥ t₂ <ᵥ … <ᵥ tₘ\n-   s₁ <ᵥ s₂ <ᵥ … <ᵥ sₙ\n-   t₁ <ᵥ s₁\n-  ——————————————————————————————————————————————————— GenLtGenMap2\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ <ᵥ t₂ <ᵥ … <ᵥ tₘ\n-   s₁ <ᵥ s₂ <ᵥ … <ᵥ sₙ\n-   t₁ ~ᵥ s₁\n-   v₁ <ᵥ w₁\n-  ——————————————————————————————————————————————————— GenLtGenMap3\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-   t₁ ~ᵥ s₁\n-   v₁ ~ᵥ w₁\n-   [t₂ ↦ v₂, …, tₘ ↦ vₘ] <ᵥ [s₂ ↦ w₂, …, sₙ ↦ wₙ]\n-  ——————————————————————————————————————————————————— GenLtGenMap4\n-   [t₁ ↦ v₁, …, tₘ ↦ vₘ] <ᵥ [s₁ ↦ w₁, …, sₙ ↦ wₙ]\n-\n-.. note: In the above rules, map entries for TextMap and GenMap are ordered\n-   by key. The rules make this assumption explicit.\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n+      ⟨ f₁ : τ₁, …, fₘ : τₘ, …, fₙ : σₙ ⟩\n \n+    τᵢ <ₜ σᵢ\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n+      ⟨ f₁ : τ₁, …, fᵢ₋₁ : τᵢ₋₁, fᵢ : σᵢ, …, fₘ : σₘ ⟩\n+\n+  ———————————————————————————————————————————————————\n+    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ τ σ\n+\n+    τ₁ <ₜ τ₂"
  },
  {
    "id" : "ec604e3e-6d43-4926-9175-b8b8b5723bed",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "a0e6621c-71a1-4609-9e37-72212df84244",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n      'LESS_EQ' @⟨ f₀: τ₀,  f₁: τ₁, …,  fₙ: τₙ ⟩\r\n```",
        "createdAt" : "2020-03-12T13:32:31Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b3693688-4d71-4416-935f-dec6b60adfc5",
        "parentId" : "a0e6621c-71a1-4609-9e37-72212df84244",
        "author" : null,
        "body" : "And the same change to all the previous struct head rules. ",
        "createdAt" : "2020-03-12T13:33:54Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8c8b20c2-58eb-4797-8fdb-82f36696ea2b",
        "parentId" : "a0e6621c-71a1-4609-9e37-72212df84244",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch. Thanks.",
        "createdAt" : "2020-03-12T13:55:33Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -2493,48 +2375,258 @@ This section lists the built-in functions supported by DAML LF 1.\n The functions come with their types and a description of their\n behavior.\n \n-Generic equality and order functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Generic comparison functions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ``EQUAL : ∀ (α:*). α → α → 'Bool'``\n+The following builtin functions defines an order on the so-called\n+`comparable` values. Comparable values are LF values except type\n+abstractions, functions, partially applied builtin functions, and\n+updates.\n \n-  Returns ``'True'`` if the two argument are equal according ``~ᵥ``,\n-  ``'False'`` otherwise.\n+* ``LESS_EQ : ∀ (α:*). α → α → 'Bool'``\n+\n+  The builtin function ``LESS_EQ`` returns ``'True'`` if the first\n+  argument is smaller than or equal to the second argument,\n+  ``'False'`` otherwise. The function raises a runtime error if the\n+  arguments are incomparable.\n \n   [*Available in version >= 1.dev*]\n \n-* ``LESS : ∀ (α:*). α → α → 'Bool'``\n+  Formally the builtin function ``LESS_EQ`` semantics is defined by\n+  the following rules. Note the rules assume ``LESS_EQ`` is fully\n+  applied and well-typed, in particular ``LESS_EQ`` always compared\n+  value of the same type.::\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqUnit\n+      𝕆('LESS_EQ' @σ () ()) = Ok 'True'\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqBool\n+      𝕆('LESS_EQ' @σ b₁ b₂) = Ok (¬b₁ ∨ b₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqInt64\n+      𝕆('LESS_EQ' @σ LitInt64₁ LitInt64₂) = Ok (LitInt64₁ ≤ₗ LitInt64₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqDate\n+      𝕆('LESS_EQ' @σ LitDate₁ LitDate₂) = Ok (LitDate₁ ≤ₗ LitDate₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqTimestamp\n+      𝕆('LESS_EQ' @σ LitTimestamp₁ LitTimestamp₂) =\n+          Ok (LitTimestamp₁ ≤ LitTimestamp₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqText\n+      𝕆('LESS_EQ' @σ LitText₁ LitText₂) = Ok (LitText₁ ≤ₗ LitText₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqParty\n+      𝕆('LESS_EQ' @σ LitParty₁ LitParty₂) = Ok (LitParty₁ ≤ₗ LitParty₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqNumeric\n+      𝕆('LESS_EQ' @σ LitNumeric₁ LitNumeric₂) =\n+          Ok (LitNumeric₁ ≤ LitNumeric₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructEmpty\n+      𝕆('LESS_EQ' @⟨ ⟩ ⟨ ⟩ ⟨ ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr1\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadBigger\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'False'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr2\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadSmaller\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'True'\n+      𝕆('LESS_EQ' @⟨ f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₁= v₁, …,  fₘ= vₘ  ⟩\n+   \t           ⟨ f₁= v₁', …, fₘ= vₘ' ⟩) = r\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyTail\n+      'LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩"
  },
  {
    "id" : "64f701ee-3e7e-499d-9996-93f499072d67",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "2e12d70b-ced7-4a51-9206-94fe3dc0bc77",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n      𝕆('LESS_EQ' @τ₀ v₀' v₀) = Ok 'True'\r\n```",
        "createdAt" : "2020-03-12T13:33:01Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -2493,48 +2375,258 @@ This section lists the built-in functions supported by DAML LF 1.\n The functions come with their types and a description of their\n behavior.\n \n-Generic equality and order functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Generic comparison functions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ``EQUAL : ∀ (α:*). α → α → 'Bool'``\n+The following builtin functions defines an order on the so-called\n+`comparable` values. Comparable values are LF values except type\n+abstractions, functions, partially applied builtin functions, and\n+updates.\n \n-  Returns ``'True'`` if the two argument are equal according ``~ᵥ``,\n-  ``'False'`` otherwise.\n+* ``LESS_EQ : ∀ (α:*). α → α → 'Bool'``\n+\n+  The builtin function ``LESS_EQ`` returns ``'True'`` if the first\n+  argument is smaller than or equal to the second argument,\n+  ``'False'`` otherwise. The function raises a runtime error if the\n+  arguments are incomparable.\n \n   [*Available in version >= 1.dev*]\n \n-* ``LESS : ∀ (α:*). α → α → 'Bool'``\n+  Formally the builtin function ``LESS_EQ`` semantics is defined by\n+  the following rules. Note the rules assume ``LESS_EQ`` is fully\n+  applied and well-typed, in particular ``LESS_EQ`` always compared\n+  value of the same type.::\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqUnit\n+      𝕆('LESS_EQ' @σ () ()) = Ok 'True'\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqBool\n+      𝕆('LESS_EQ' @σ b₁ b₂) = Ok (¬b₁ ∨ b₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqInt64\n+      𝕆('LESS_EQ' @σ LitInt64₁ LitInt64₂) = Ok (LitInt64₁ ≤ₗ LitInt64₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqDate\n+      𝕆('LESS_EQ' @σ LitDate₁ LitDate₂) = Ok (LitDate₁ ≤ₗ LitDate₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqTimestamp\n+      𝕆('LESS_EQ' @σ LitTimestamp₁ LitTimestamp₂) =\n+          Ok (LitTimestamp₁ ≤ LitTimestamp₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqText\n+      𝕆('LESS_EQ' @σ LitText₁ LitText₂) = Ok (LitText₁ ≤ₗ LitText₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqParty\n+      𝕆('LESS_EQ' @σ LitParty₁ LitParty₂) = Ok (LitParty₁ ≤ₗ LitParty₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqNumeric\n+      𝕆('LESS_EQ' @σ LitNumeric₁ LitNumeric₂) =\n+          Ok (LitNumeric₁ ≤ LitNumeric₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructEmpty\n+      𝕆('LESS_EQ' @⟨ ⟩ ⟨ ⟩ ⟨ ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr1\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadBigger\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'False'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr2\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadSmaller\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'True'"
  },
  {
    "id" : "63d5b8f5-889f-40d6-90a8-7545a2fe4d71",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "744e7236-604d-4011-8ee4-bceb704d7f1a",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n      𝕆('LESS_EQ' @τ₀ v₀ v₀') = Ok 'True'\r\n```",
        "createdAt" : "2020-03-12T13:33:11Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -2493,48 +2375,258 @@ This section lists the built-in functions supported by DAML LF 1.\n The functions come with their types and a description of their\n behavior.\n \n-Generic equality and order functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Generic comparison functions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ``EQUAL : ∀ (α:*). α → α → 'Bool'``\n+The following builtin functions defines an order on the so-called\n+`comparable` values. Comparable values are LF values except type\n+abstractions, functions, partially applied builtin functions, and\n+updates.\n \n-  Returns ``'True'`` if the two argument are equal according ``~ᵥ``,\n-  ``'False'`` otherwise.\n+* ``LESS_EQ : ∀ (α:*). α → α → 'Bool'``\n+\n+  The builtin function ``LESS_EQ`` returns ``'True'`` if the first\n+  argument is smaller than or equal to the second argument,\n+  ``'False'`` otherwise. The function raises a runtime error if the\n+  arguments are incomparable.\n \n   [*Available in version >= 1.dev*]\n \n-* ``LESS : ∀ (α:*). α → α → 'Bool'``\n+  Formally the builtin function ``LESS_EQ`` semantics is defined by\n+  the following rules. Note the rules assume ``LESS_EQ`` is fully\n+  applied and well-typed, in particular ``LESS_EQ`` always compared\n+  value of the same type.::\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqUnit\n+      𝕆('LESS_EQ' @σ () ()) = Ok 'True'\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqBool\n+      𝕆('LESS_EQ' @σ b₁ b₂) = Ok (¬b₁ ∨ b₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqInt64\n+      𝕆('LESS_EQ' @σ LitInt64₁ LitInt64₂) = Ok (LitInt64₁ ≤ₗ LitInt64₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqDate\n+      𝕆('LESS_EQ' @σ LitDate₁ LitDate₂) = Ok (LitDate₁ ≤ₗ LitDate₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqTimestamp\n+      𝕆('LESS_EQ' @σ LitTimestamp₁ LitTimestamp₂) =\n+          Ok (LitTimestamp₁ ≤ LitTimestamp₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqText\n+      𝕆('LESS_EQ' @σ LitText₁ LitText₂) = Ok (LitText₁ ≤ₗ LitText₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqParty\n+      𝕆('LESS_EQ' @σ LitParty₁ LitParty₂) = Ok (LitParty₁ ≤ₗ LitParty₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqNumeric\n+      𝕆('LESS_EQ' @σ LitNumeric₁ LitNumeric₂) =\n+          Ok (LitNumeric₁ ≤ LitNumeric₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructEmpty\n+      𝕆('LESS_EQ' @⟨ ⟩ ⟨ ⟩ ⟨ ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr1\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadBigger\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'False'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr2\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadSmaller\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'"
  },
  {
    "id" : "e5f8d13a-12fa-4386-b5a1-9f7209fd2009",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "7ac8fa12-29f3-4395-b18e-7c74c7d77abf",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n                   ⟨ h= vₕ,  t= vₜ       ⟩\r\n                   ⟨ h= vₕ', t= vₜ'      ⟩) = r\r\n    —————————————————————————————————————————————————————————————————————— EvLessEqListConsCons\r\n      𝕆('LESS_EQ' @σ (Cons @τ vₕ vₜ) (Cons @τ' vₕ' vₜ')) = r\r\n```",
        "createdAt" : "2020-03-12T13:42:55Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -2493,48 +2375,258 @@ This section lists the built-in functions supported by DAML LF 1.\n The functions come with their types and a description of their\n behavior.\n \n-Generic equality and order functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Generic comparison functions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ``EQUAL : ∀ (α:*). α → α → 'Bool'``\n+The following builtin functions defines an order on the so-called\n+`comparable` values. Comparable values are LF values except type\n+abstractions, functions, partially applied builtin functions, and\n+updates.\n \n-  Returns ``'True'`` if the two argument are equal according ``~ᵥ``,\n-  ``'False'`` otherwise.\n+* ``LESS_EQ : ∀ (α:*). α → α → 'Bool'``\n+\n+  The builtin function ``LESS_EQ`` returns ``'True'`` if the first\n+  argument is smaller than or equal to the second argument,\n+  ``'False'`` otherwise. The function raises a runtime error if the\n+  arguments are incomparable.\n \n   [*Available in version >= 1.dev*]\n \n-* ``LESS : ∀ (α:*). α → α → 'Bool'``\n+  Formally the builtin function ``LESS_EQ`` semantics is defined by\n+  the following rules. Note the rules assume ``LESS_EQ`` is fully\n+  applied and well-typed, in particular ``LESS_EQ`` always compared\n+  value of the same type.::\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqUnit\n+      𝕆('LESS_EQ' @σ () ()) = Ok 'True'\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqBool\n+      𝕆('LESS_EQ' @σ b₁ b₂) = Ok (¬b₁ ∨ b₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqInt64\n+      𝕆('LESS_EQ' @σ LitInt64₁ LitInt64₂) = Ok (LitInt64₁ ≤ₗ LitInt64₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqDate\n+      𝕆('LESS_EQ' @σ LitDate₁ LitDate₂) = Ok (LitDate₁ ≤ₗ LitDate₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqTimestamp\n+      𝕆('LESS_EQ' @σ LitTimestamp₁ LitTimestamp₂) =\n+          Ok (LitTimestamp₁ ≤ LitTimestamp₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqText\n+      𝕆('LESS_EQ' @σ LitText₁ LitText₂) = Ok (LitText₁ ≤ₗ LitText₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqParty\n+      𝕆('LESS_EQ' @σ LitParty₁ LitParty₂) = Ok (LitParty₁ ≤ₗ LitParty₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqNumeric\n+      𝕆('LESS_EQ' @σ LitNumeric₁ LitNumeric₂) =\n+          Ok (LitNumeric₁ ≤ LitNumeric₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructEmpty\n+      𝕆('LESS_EQ' @⟨ ⟩ ⟨ ⟩ ⟨ ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr1\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadBigger\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'False'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr2\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadSmaller\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'True'\n+      𝕆('LESS_EQ' @⟨ f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₁= v₁, …,  fₘ= vₘ  ⟩\n+   \t           ⟨ f₁= v₁', …, fₘ= vₘ' ⟩) = r\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyTail\n+      'LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩\n+                 ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ ⟩\n+   \t         ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = r\n+\n+      'enum' T ↦ E₁: σ₁ | … | Eₘ: σₘ  ∈  〚Ξ〛Mod\n+    —————————————————————————————————————————————————————————————————————— EvLessEqEnum\n+      𝕆('LESS_EQ' @σ Mod:T:Eᵢ Mod:T:Eⱼ) = OK (i ≤ j)\n+\n+      'variant' T α₁ … αₙ ↦ V₁: σ₁ | … | Vₘ: σₘ  ∈  〚Ξ〛Mod     i ≠ j\n+    —————————————————————————————————————————————————————————————————————— EvLessEqVariantConstructor\n+      𝕆('LESS_EQ' @σ (Mod:T:Vᵢ @σ₁ … @σₙ v) (Mod:T:Vⱼ @σ₁' … @σₙ' v') =\n+          OK (i ≤ j)\n+\n+      'variant' T α₁ … αₙ ↦ V₁: τ₁ | … | Vₘ: τₘ  ∈  〚Ξ〛Mod\n+      τᵢ  ↠  τᵢ'    𝕆('LESS_EQ' @(τᵢ'[α₁ ↦ σ₁, …, αₙ ↦ σₙ]) v v') = r\n+    —————————————————————————————————————————————————————————————————————— EvLessEqVariantValue\n+      𝕆('LESS_EQ' @σ (Mod:T:Vᵢ @σ₁ … @σₙ v) (Mod:T:Vᵢ @σ₁' … @σₙ' v')) = r\n+\n+      'record' T (α₁:k₁) … (αₙ:kₙ) ↦ { f₁:τ₁, …, fₘ:τₘ }  ∈ 〚Ξ〛Mod\n+      'τ₁  ↠  τ₁'  …   τᵢ  ↠  τᵢ'\n+      𝕆('LESS_EQ' @⟨ f₁: τ₁'[α₁ ↦ σ₁, …, αₙ ↦ σₙ],\n+                       …, fₙ: τₙ'[α₁ ↦ σ₁, …, αₙ ↦ σₙ]⟩\n+                   ⟨ f₁= v₁, …,  fₘ = vₘ ⟩\n+   \t           ⟨ f₁= v₁', …, fₘ = vₘ' ⟩) = r\n+    —————————————————————————————————————————————————————————————————————— EvLessEqRecord\n+      𝕆('LESS_EQ' @σ (Mod:T @σ₁  … @σₙ  { f₁ = v₁ , …, fₘ = vₘ  })\n+                     (Mod:T @σ₁' … @σₙ' { f₁ = v₁', …, fₘ = vₘ' })) =  r\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqListNil\n+      𝕆('LESS_EQ' @σ (Nil @τ) v) = Ok 'True'\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqListConsNil\n+      𝕆('LESS_EQ' @σ (Cons @τ vₕ vₜ)  (Nil @τ')) = Ok 'False'\n+\n+      𝕆('LESS_EQ' @⟨ h:τ,    t: 'List' τ ⟩\n+                   ⟨ h= v₁,  t= vₘ       ⟩\n+                   ⟨ h= v₁', t= vₘ'      ⟩) = r\n+    —————————————————————————————————————————————————————————————————————— EvLessEqListConsCons\n+      𝕆('LESS_EQ' @σ (Cons @τ vₕ vₜ) (Cons @τ' vₕ vₜ)) = r"
  },
  {
    "id" : "3633c985-e634-4c84-b664-61ca9e03db12",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "80ad641b-a302-45a4-9774-3a97892df261",
        "parentId" : null,
        "author" : null,
        "body" : "This is fine for the spec, but if we were to actually implement `LESS_EQ` this way it becomes an O(n^2) algorithm. The actual implementation should calculate the relative order of two items (less than, equal, or greater than) in a single step, rather than needing two boolean steps to make the comparison.",
        "createdAt" : "2020-03-12T13:49:19Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b8ba3013-8dd8-4481-9aaa-f17a46c0d68e",
        "parentId" : "80ad641b-a302-45a4-9774-3a97892df261",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is indeed a spec. The implementation is based on `compare` that return `-1`, `0` or `+1` .\r\nThis was a bitter cumbersome to use formally (use the cases 'less than', 'equal to', or 'greater than'). ",
        "createdAt" : "2020-03-12T14:00:11Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "77a1c85b-7b3e-4075-b518-bba5cf1a727d",
        "parentId" : "80ad641b-a302-45a4-9774-3a97892df261",
        "author" : null,
        "body" : "Sounds good 👍 ",
        "createdAt" : "2020-03-12T14:02:28Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -2493,48 +2375,258 @@ This section lists the built-in functions supported by DAML LF 1.\n The functions come with their types and a description of their\n behavior.\n \n-Generic equality and order functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Generic comparison functions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ``EQUAL : ∀ (α:*). α → α → 'Bool'``\n+The following builtin functions defines an order on the so-called\n+`comparable` values. Comparable values are LF values except type\n+abstractions, functions, partially applied builtin functions, and\n+updates.\n \n-  Returns ``'True'`` if the two argument are equal according ``~ᵥ``,\n-  ``'False'`` otherwise.\n+* ``LESS_EQ : ∀ (α:*). α → α → 'Bool'``\n+\n+  The builtin function ``LESS_EQ`` returns ``'True'`` if the first\n+  argument is smaller than or equal to the second argument,\n+  ``'False'`` otherwise. The function raises a runtime error if the\n+  arguments are incomparable.\n \n   [*Available in version >= 1.dev*]\n \n-* ``LESS : ∀ (α:*). α → α → 'Bool'``\n+  Formally the builtin function ``LESS_EQ`` semantics is defined by\n+  the following rules. Note the rules assume ``LESS_EQ`` is fully\n+  applied and well-typed, in particular ``LESS_EQ`` always compared\n+  value of the same type.::\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqUnit\n+      𝕆('LESS_EQ' @σ () ()) = Ok 'True'\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqBool\n+      𝕆('LESS_EQ' @σ b₁ b₂) = Ok (¬b₁ ∨ b₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqInt64\n+      𝕆('LESS_EQ' @σ LitInt64₁ LitInt64₂) = Ok (LitInt64₁ ≤ₗ LitInt64₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqDate\n+      𝕆('LESS_EQ' @σ LitDate₁ LitDate₂) = Ok (LitDate₁ ≤ₗ LitDate₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqTimestamp\n+      𝕆('LESS_EQ' @σ LitTimestamp₁ LitTimestamp₂) =\n+          Ok (LitTimestamp₁ ≤ LitTimestamp₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqText\n+      𝕆('LESS_EQ' @σ LitText₁ LitText₂) = Ok (LitText₁ ≤ₗ LitText₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqParty\n+      𝕆('LESS_EQ' @σ LitParty₁ LitParty₂) = Ok (LitParty₁ ≤ₗ LitParty₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqNumeric\n+      𝕆('LESS_EQ' @σ LitNumeric₁ LitNumeric₂) =\n+          Ok (LitNumeric₁ ≤ LitNumeric₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructEmpty\n+      𝕆('LESS_EQ' @⟨ ⟩ ⟨ ⟩ ⟨ ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr1\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadBigger\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'False'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr2\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Ok 'False'"
  },
  {
    "id" : "fe4f3882-8938-4c3f-bcb2-3dff4076a2c8",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "100b8fce-ad56-4ded-ae2c-290cbe5d4584",
        "parentId" : null,
        "author" : null,
        "body" : "Do you anticipate this situation being possible? I.e. v0 <= v0' is fine but v0' <= v0 leads to error?",
        "createdAt" : "2020-03-12T13:50:09Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a24f5f47-245d-49a3-8ff7-4a59e08466bf",
        "parentId" : "100b8fce-ad56-4ded-ae2c-290cbe5d4584",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I don't. I though it was simpler to specify explicitly this error case, than to prove this never happen.  This would indeed go away with the `compare` function way. I will try once last time to go this way (I abandon twice already).  ",
        "createdAt" : "2020-03-12T14:03:48Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bf5e22a9-cbbf-454f-aaee-d5eb79552edc",
        "parentId" : "100b8fce-ad56-4ded-ae2c-290cbe5d4584",
        "author" : null,
        "body" : "IMO it's fine if you want to keep the boolean presentation, but change this rule into a note that says that\r\n\r\n```\r\n     𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\r\n      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Err t\r\n```\r\n\r\ncannot happen, and that if it happens, that's a bug.",
        "createdAt" : "2020-03-12T14:17:39Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e5772663-59eb-410e-a107-3467e7871814",
        "parentId" : "100b8fce-ad56-4ded-ae2c-290cbe5d4584",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I simply drop  the rule. I gave up a third time trying to specify with the compare approach.",
        "createdAt" : "2020-03-12T21:05:55Z",
        "updatedAt" : "2020-03-12T21:05:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : null,
    "diffHunk" : "@@ -2493,48 +2375,258 @@ This section lists the built-in functions supported by DAML LF 1.\n The functions come with their types and a description of their\n behavior.\n \n-Generic equality and order functions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Generic comparison functions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ``EQUAL : ∀ (α:*). α → α → 'Bool'``\n+The following builtin functions defines an order on the so-called\n+`comparable` values. Comparable values are LF values except type\n+abstractions, functions, partially applied builtin functions, and\n+updates.\n \n-  Returns ``'True'`` if the two argument are equal according ``~ᵥ``,\n-  ``'False'`` otherwise.\n+* ``LESS_EQ : ∀ (α:*). α → α → 'Bool'``\n+\n+  The builtin function ``LESS_EQ`` returns ``'True'`` if the first\n+  argument is smaller than or equal to the second argument,\n+  ``'False'`` otherwise. The function raises a runtime error if the\n+  arguments are incomparable.\n \n   [*Available in version >= 1.dev*]\n \n-* ``LESS : ∀ (α:*). α → α → 'Bool'``\n+  Formally the builtin function ``LESS_EQ`` semantics is defined by\n+  the following rules. Note the rules assume ``LESS_EQ`` is fully\n+  applied and well-typed, in particular ``LESS_EQ`` always compared\n+  value of the same type.::\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqUnit\n+      𝕆('LESS_EQ' @σ () ()) = Ok 'True'\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqBool\n+      𝕆('LESS_EQ' @σ b₁ b₂) = Ok (¬b₁ ∨ b₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqInt64\n+      𝕆('LESS_EQ' @σ LitInt64₁ LitInt64₂) = Ok (LitInt64₁ ≤ₗ LitInt64₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqDate\n+      𝕆('LESS_EQ' @σ LitDate₁ LitDate₂) = Ok (LitDate₁ ≤ₗ LitDate₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqTimestamp\n+      𝕆('LESS_EQ' @σ LitTimestamp₁ LitTimestamp₂) =\n+          Ok (LitTimestamp₁ ≤ LitTimestamp₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqText\n+      𝕆('LESS_EQ' @σ LitText₁ LitText₂) = Ok (LitText₁ ≤ₗ LitText₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqParty\n+      𝕆('LESS_EQ' @σ LitParty₁ LitParty₂) = Ok (LitParty₁ ≤ₗ LitParty₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqNumeric\n+      𝕆('LESS_EQ' @σ LitNumeric₁ LitNumeric₂) =\n+          Ok (LitNumeric₁ ≤ LitNumeric₂)\n+\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructEmpty\n+      𝕆('LESS_EQ' @⟨ ⟩ ⟨ ⟩ ⟨ ⟩) = Ok 'True'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Err t\n+    —————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadErr1\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ ⟩\n+   \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Err t\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'False'\n+    ————————————————————————————————————————————————————————————————————— EvLessEqStructNonEmptyHeadBigger\n+      𝕆('LESS_EQ' @⟨ f₀: τ₁,  f₁: τ₁, …,  fₙ: τₙ  ⟩\n+                   ⟨ f₀= v₀,  f₁= v₁, …,  fₘ= vₘ  ⟩\n+      \t           ⟨ f₀= v₀', f₁= v₁', …, fₘ= vₘ' ⟩) = Ok 'False'\n+\n+      𝕆('LESS_EQ' @τ₁ v₀ v₀') = Ok 'True'\n+      𝕆('LESS_EQ' @τ₁ v₀' v₀) = Err t"
  },
  {
    "id" : "6fb6b606-3779-44a0-a779-7c6c365a02fd",
    "prId" : 4764,
    "comments" : [
      {
        "id" : "760d46d4-6ef1-436a-a01b-10e7467a93c3",
        "parentId" : null,
        "author" : null,
        "body" : "Can the package name contain spaces?",
        "createdAt" : "2020-03-02T09:08:51Z",
        "updatedAt" : "2020-03-02T09:11:00Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e61dabef-f241-41d0-9882-fb17667840aa",
        "parentId" : "760d46d4-6ef1-436a-a01b-10e7467a93c3",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "good catch! Removed.",
        "createdAt" : "2020-03-02T09:11:02Z",
        "updatedAt" : "2020-03-02T09:11:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "441017fb75f98eb81f759846d4c5de52b388d620",
    "line" : null,
    "diffHunk" : "@@ -411,6 +413,13 @@ and other similar pitfalls. ::\n   PartyId character\n        PartyIdChar  ∈  [a-zA-Z0-9:\\-_ ]              -- PartyIdChar\n \n+  PackageName strings\n+   PackageNameString ∈ [a-zA-Z0-9:\\-_ ]+             -- PackageNameString"
  },
  {
    "id" : "7b21f86a-0373-40cc-a2be-625c97c1118f",
    "prId" : 4116,
    "comments" : [
      {
        "id" : "38b497b2-627a-4e1f-8cf8-c0d9dcd29137",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we need this to be determined by the ledger? I thought the ledger determines how they are generated but ordering can be specified independent of the ledger.",
        "createdAt" : "2020-01-20T15:43:31Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bf5fe5f7-8cc8-4dc0-8413-3e6fb2b74e85",
        "parentId" : "38b497b2-627a-4e1f-8cf8-c0d9dcd29137",
        "author" : null,
        "body" : "I changed it to say that contract IDs are ordered by their \"internal representation\". The spec does not specify the internal representation, so it's the same as saying there is some order, but you can't rely on a specific order.",
        "createdAt" : "2020-01-22T12:21:21Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a17567d4d853f3eaa0100a84487c93323612db34",
    "line" : null,
    "diffHunk" : "@@ -466,9 +468,9 @@ The literals represent actual DAML-LF values:\n \n Number-like literals (``LitNatTyp``, ``LitInt64``, ``LitNumeric``,\n ``LitDate``, ``LitTimestamp``) are ordered by natural\n-ordering. Text-like literals (``LitText`` and ``LitParty`` are ordered\n-lexicographically.  Contract Ids are not ordered.\n-\n+ordering. Text-like literals (``LitText`` and ``LitParty``) are ordered\n+lexicographically.  Contract Ids are ordered as determined by the"
  },
  {
    "id" : "20cd7b11-8aec-4711-857e-b95a0131c9e0",
    "prId" : 4116,
    "comments" : [
      {
        "id" : "3ddecb4b-3e00-43e6-8a02-6ed96e9bba79",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "As for `Any` and `TypeRep`:\r\n\r\n* I would like to be able to use `TypeRep` as map keys in DAML triggers. Specifically, the ACS is basically a map indexed by the type of the template. That makes `getContracts` quite efficient. Otherwise, I’m basically stuck doing a linear search through the whole ACS.\r\n* For things like `dedupCreate` it would be convenient to have a set of create commands which roughly boils down to having a set of `AnyTemplate` so I can do a fast lookup to see if I have to send it again.\r\n\r\nSo given that this primitive is intended to be used for map keys, it would be great if we could specify an order for this (I don’t care which one).\r\n\r\nThat said, I’m totally fine to do this in a separate PR or maybe even as a separate step wtr to the implementation of the spec.",
        "createdAt" : "2020-01-20T15:56:33Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a17567d4d853f3eaa0100a84487c93323612db34",
    "line" : null,
    "diffHunk" : "@@ -1854,6 +1856,95 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n+Value order\n+~~~~~~~~~~~\n+\n+In this section, we define a strict partial order relation ``<ᵥ`` on values.\n+This is a strict order when comparing serialized values of the same type.\n+\n+We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n+``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n+It is a total order when comparing serialized values of the same type.\n+\n+\n+                          ┌────────┐\n+  Value Order Relation    │ v <ᵥ w │\n+                          └────────┘\n+\n+  ——————————————————————————————————————————————————— GenLtTrueFalse\n+   'False' <ᵥ 'True'\n+\n+   LitNumeric₁ is less than LitNumeric₂ as numbers.\n+  ——————————————————————————————————————————————————— GenLtLitNumeric\n+   LitNumeric₁ <ᵥ LitNumeric₂\n+\n+   t₁ comes lexicographically strictly before t₂,\n+   when viewed as sequences of Unicode code points\n+  ——————————————————————————————————————————————————— GenLtLitText\n+   t₁ <ᵥ t₂\n+\n+   LitDate₁ is strictly before LitDate₂ as dates\n+  ——————————————————————————————————————————————————— GenLtLitDate\n+   LitDate₁ <ᵥ LitDate₂\n+\n+   LitTimestamp₁ is strictly before LitTimestamp₂ as\n+   timestamps\n+  ——————————————————————————————————————————————————— GenLtLitTimestamp\n+   LitTimestamp₁ <ᵥ LitTimestamp₂\n+\n+   LitParty₁ comes lexicographically before\n+   LitParty₂ when viewed as sequences of Unicode\n+   code points\n+  ——————————————————————————————————————————————————— GenLtLitParty\n+   LitParty₁ <ᵥ LitParty₂\n+\n+   cid₁ is ordered strictly before cid₂ according\n+   to the ledger's rules\n+  ——————————————————————————————————————————————————— GenLtLitContractId\n+   cid₁ <ᵥ cid₂\n+\n+  ——————————————————————————————————————————————————— GenLtListNil\n+   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+\n+   vₕ <ᵥ wₕ\n+  ——————————————————————————————————————————————————— GenLtListConsHead\n+   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+\n+   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n+  ——————————————————————————————————————————————————— GenLtListConsTail\n+   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+\n+  ——————————————————————————————————————————————————— GenLtOptionalNone\n+   'None' @τ <ᵥ 'Some' @σ w\n+\n+   v <ᵥ w\n+  ——————————————————————————————————————————————————— GenLtOptionalSome\n+   'Some' @τ v <ᵥ 'Some' @σ w\n+\n+   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n+  ——————————————————————————————————————————————————— GenLtRecCon\n+  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n+    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+\n+   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n+   constructors for variant type Mod:T\n+  ——————————————————————————————————————————————————— GenLtVariantCon1\n+   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w\n+\n+   v <ᵥ w\n+  ——————————————————————————————————————————————————— GenLtVariantCon2\n+   Mod:T:V @τ₁ … @τₙ v <ᵥ Mod:T:V @σ₁ … @σₙ w\n+\n+   Mod:T:E₁ comes before Mod:T:E₂ in the list of\n+   constructors for enum type Mod:T\n+  ——————————————————————————————————————————————————— GenLtEnumCon\n+   Mod:T:E₁ <ᵥ Mod:T:E₂\n+\n+   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n+  ——————————————————————————————————————————————————— GenLtStructCon\n+   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+\n+"
  },
  {
    "id" : "73265038-801a-4e09-9d60-d8ef2f038add",
    "prId" : 4116,
    "comments" : [
      {
        "id" : "c1841a0b-eb61-4075-a3ef-1c9cd34dcf50",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "As for maps, given that we want to switch to ordered map, can we define the order of a map based on the order of the result of converting it to a list of key-value pairs (orderered by keys)?",
        "createdAt" : "2020-01-20T16:09:35Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "67581bd1-47e5-417b-a11a-02a655bc1ff3",
        "parentId" : "c1841a0b-eb61-4075-a3ef-1c9cd34dcf50",
        "author" : null,
        "body" : "That sounds like the best option :)",
        "createdAt" : "2020-01-22T11:57:30Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "eeae0f3a-a7f8-48d0-a0c0-bf74213669f5",
        "parentId" : "c1841a0b-eb61-4075-a3ef-1c9cd34dcf50",
        "author" : null,
        "body" : "I added rules for maps. I think cleaning up the spec to get rid of the dependency on insertion order in generic maps should happen in the next PR (if CI ever accepts this one).",
        "createdAt" : "2020-01-22T14:21:24Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2f052368-eba6-48d0-9398-2a77b59a0d39",
        "parentId" : "c1841a0b-eb61-4075-a3ef-1c9cd34dcf50",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-01-23T10:21:53Z",
        "updatedAt" : "2020-01-23T10:21:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a17567d4d853f3eaa0100a84487c93323612db34",
    "line" : 168,
    "diffHunk" : "@@ -2327,8 +2418,8 @@ This section lists the built-in functions supported by DAML LF 1.\n The functions come with their types and a description of their\n behavior.\n \n-Generic equality function\n-~~~~~~~~~~~~~~~~~~~~~~~~~\n+Generic equality and order functions"
  },
  {
    "id" : "8476ffa0-0bf4-4e42-9266-d4d63f6a717d",
    "prId" : 4116,
    "comments" : [
      {
        "id" : "96a39b59-a248-48ca-a0c9-75d927ab335d",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is currently tricky to do in the engine as we do not have enough info at run time.\r\nI was thinking to go lexicographically, but this is definitively better. ",
        "createdAt" : "2020-01-20T16:10:25Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2c0205a-aeb3-4ac8-a855-180ce384aa6b",
        "parentId" : "96a39b59-a248-48ca-a0c9-75d927ab335d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think lexicographic ordering is a reasonable option. The default `Ord` instance in DAML works like the one that @associahedron has used in the spec here and diverging from that is going to cause a lot of confusion.",
        "createdAt" : "2020-01-20T16:13:49Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a3147ecc-4677-4529-b8df-c55164bd9e2c",
        "parentId" : "96a39b59-a248-48ca-a0c9-75d927ab335d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We probably add an index in the variant and the enum.",
        "createdAt" : "2020-01-20T16:19:51Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a17567d4d853f3eaa0100a84487c93323612db34",
    "line" : 96,
    "diffHunk" : "@@ -1854,6 +1856,95 @@ will always be used to compare values of same types::\n .. note:: the equality of generic map is not sensitive to the order of\n           its entries. See rules ``'GenEqNonEmptyGenMap'``.\n \n+Value order\n+~~~~~~~~~~~\n+\n+In this section, we define a strict partial order relation ``<ᵥ`` on values.\n+This is a strict order when comparing serialized values of the same type.\n+\n+We also define the transitive relation ``≲ᵥ`` as the union of ``~ᵥ`` and\n+``<ᵥ``. This relation is transitive, and antisymmetric with respect to ``~ᵥ``.\n+It is a total order when comparing serialized values of the same type.\n+\n+\n+                          ┌────────┐\n+  Value Order Relation    │ v <ᵥ w │\n+                          └────────┘\n+\n+  ——————————————————————————————————————————————————— GenLtTrueFalse\n+   'False' <ᵥ 'True'\n+\n+   LitNumeric₁ is less than LitNumeric₂ as numbers.\n+  ——————————————————————————————————————————————————— GenLtLitNumeric\n+   LitNumeric₁ <ᵥ LitNumeric₂\n+\n+   t₁ comes lexicographically strictly before t₂,\n+   when viewed as sequences of Unicode code points\n+  ——————————————————————————————————————————————————— GenLtLitText\n+   t₁ <ᵥ t₂\n+\n+   LitDate₁ is strictly before LitDate₂ as dates\n+  ——————————————————————————————————————————————————— GenLtLitDate\n+   LitDate₁ <ᵥ LitDate₂\n+\n+   LitTimestamp₁ is strictly before LitTimestamp₂ as\n+   timestamps\n+  ——————————————————————————————————————————————————— GenLtLitTimestamp\n+   LitTimestamp₁ <ᵥ LitTimestamp₂\n+\n+   LitParty₁ comes lexicographically before\n+   LitParty₂ when viewed as sequences of Unicode\n+   code points\n+  ——————————————————————————————————————————————————— GenLtLitParty\n+   LitParty₁ <ᵥ LitParty₂\n+\n+   cid₁ is ordered strictly before cid₂ according\n+   to the ledger's rules\n+  ——————————————————————————————————————————————————— GenLtLitContractId\n+   cid₁ <ᵥ cid₂\n+\n+  ——————————————————————————————————————————————————— GenLtListNil\n+   'Nil' @τ <ᵥ 'Cons' @σ wₜ wₜ\n+\n+   vₕ <ᵥ wₕ\n+  ——————————————————————————————————————————————————— GenLtListConsHead\n+   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+\n+   vₕ ~ᵥ wₕ    vₜ <ᵥ wₜ\n+  ——————————————————————————————————————————————————— GenLtListConsTail\n+   'Cons' @τ vₕ vₜ  <ᵥ 'Cons' @σ wₜ wₜ\n+\n+  ——————————————————————————————————————————————————— GenLtOptionalNone\n+   'None' @τ <ᵥ 'Some' @σ w\n+\n+   v <ᵥ w\n+  ——————————————————————————————————————————————————— GenLtOptionalSome\n+   'Some' @τ v <ᵥ 'Some' @σ w\n+\n+   v₁ ~ᵥ v₁   ⋯   vᵢ₋₁ ~ᵥ wᵢ₋₁     vᵢ <ᵥ wᵢ    i <= n\n+  ——————————————————————————————————————————————————— GenLtRecCon\n+  Mod:T @τ1 … @τₙ { f₁ = v₁, …, fₙ = wₘ }\n+    <ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₙ = wₘ }\n+\n+   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n+   constructors for variant type Mod:T"
  },
  {
    "id" : "c22de4a1-4ed2-4cdf-a46c-c5219d37313f",
    "prId" : 3817,
    "comments" : [
      {
        "id" : "6ac9acf8-1865-45a9-9539-6de9d20fb5ba",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think we ever discussed this and I still use this in DAML script and DAML triggers. Did you mean to change `EQUAL_CONTRACT_ID` instead of `COERCE_CONTRACT_ID`?",
        "createdAt" : "2019-12-11T12:25:09Z",
        "updatedAt" : "2019-12-11T12:30:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "99a613c2-cf23-4c6d-b133-be294fad1c12",
        "parentId" : "6ac9acf8-1865-45a9-9539-6de9d20fb5ba",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "~~My mistake. Thanks to catch that~~\r\n",
        "createdAt" : "2019-12-11T12:31:27Z",
        "updatedAt" : "2019-12-11T12:42:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6e201abb-05c3-4cea-a896-511c9da3c25a",
        "parentId" : "6ac9acf8-1865-45a9-9539-6de9d20fb5ba",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The ``[*Available in version ...*]`` in the built-in section are always at the end of the description of the built. That is to say this annotation is about ``EQUAL_CONTRACT_ID`` not ``COERCE_CONTRACT_ID``",
        "createdAt" : "2019-12-11T12:43:50Z",
        "updatedAt" : "2019-12-11T12:44:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "492577fd-dd85-4933-8213-fcd0fd3e004d",
        "parentId" : "6ac9acf8-1865-45a9-9539-6de9d20fb5ba",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, I got confused by the diff. LGTM  to me then :+1:",
        "createdAt" : "2019-12-11T12:44:52Z",
        "updatedAt" : "2019-12-11T12:44:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7211a4fb244cd3ddf7a3e698e6b86f78f4e02e2e",
    "line" : 4,
    "diffHunk" : "@@ -2711,6 +2711,8 @@ ContractId functions\n   Returns ``'True'`` if the first contact id is equal to the second,\n   ``'False'`` otherwise.\n \n+  [*Available in versions < 1.dev*]"
  },
  {
    "id" : "f61b59de-8240-424e-baa7-16594e827589",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should this be `τ[α_1 -> σ_1, …] -> σ`? Does it make a difference?",
        "createdAt" : "2019-12-09T10:27:12Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6de42bb4-4d40-4514-9a28-22e47c60760c",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Does not make any difference. \r\nI prefer My notation, as it suggest we can resolve synonym in the body of definition independently of its usage. ",
        "createdAt" : "2019-12-09T12:21:41Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2b800257-100e-46f4-93c7-dd2931c6a0ed",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : null,
        "body" : "I don't think you can resolve the arguments and body independently. \r\n\r\nExample,\r\n\r\n```\r\nsynonym Foo t = t -> Int64\r\nsynonym Bar f = f Int64\r\n```\r\n\r\nThe rule above would give \r\n```\r\nBar Foo ↠ Foo Int64\r\n```\r\nBut the correct result (obtained from @cocreature's rule) is\r\n\r\n```\r\nBar Foo ↠ Int64 -> Int64 \r\n```\r\n",
        "createdAt" : "2019-12-10T11:18:48Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9276b20a-b78d-424b-912f-c7160dffa3dc",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Nice example!",
        "createdAt" : "2019-12-10T12:08:55Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c2d1ac92-28db-4dc2-b97e-4c181fad7910",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We agree with @cocreature that type synonyms are always fully applied. It is not in the ``Bar Foo`` .\r\n\r\n",
        "createdAt" : "2019-12-10T12:35:24Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4acb724b-fa97-49e6-afee-70337ee75302",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : null,
        "body" : "Always applied type synonyms should be enough for now, but I don't see a good reason to leave this rule susceptible to the above problems if, in future, we don't guarantee type synonyms are fully applied.\r\n\r\n(Also, is it in the spec that type synonyms must be fully applied?)",
        "createdAt" : "2019-12-10T12:41:55Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3da34a5c-b30e-4be2-bc91-1cf4eb45ed19",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It should be in the spec but I might have screwed it up :slightly_smiling_face:",
        "createdAt" : "2019-12-10T12:43:05Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a3488381-6a2d-41b0-8e8c-d120d5be8694",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The rewriting approach does not really work if type synonym are not fully applied. \r\nThe crux of my spec is that once you applied ``↠`` there is no more type synonym (or if there is still some is that you use an undefined type synonym (or partially applied) in which case the type is not well-formed)\r\n   ",
        "createdAt" : "2019-12-10T12:47:40Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "49d3b09a-1a23-4578-903b-7237c235405d",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "in other terms, `Foo Int64 : *` does not kind check.",
        "createdAt" : "2019-12-10T12:48:48Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "99b973c6-ce53-4a6f-b853-38413a3fdf0a",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : null,
        "body" : "I think if we're going down this route we should not be reusing `TApp` in defining type synonyms -- a type synonym application should be considered a separate primitive type operation.",
        "createdAt" : "2019-12-10T12:53:45Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "176be1e0-f5b9-4e60-931b-d1816b25179f",
        "parentId" : "cb047ba6-8c6f-4bdb-bc82-9be9f5f7800e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "OK. ",
        "createdAt" : "2019-12-10T12:55:06Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 54,
    "diffHunk" : "@@ -763,11 +780,59 @@ as ``𝕋(F)``. See the `Built-in functions`_ section for the complete\n list of built-in functions and their respective types.\n \n \n+Type synonym resolution\n+.......................\n+\n+First, we define the synonym resolution relation ``↠`` over types,\n+which inline type synonym definitions inside types::\n+\n+  ——————————————————————————————————————————————— RewriteVar\n+   α  ↠  α\n+\n+  ——————————————————————————————————————————————— RewriteNat\n+   n  ↠  n\n+\n+  ——————————————————————————————————————————————— RewriteBuiltin\n+   BuiltinType ↠ BuiltinType\n+\n+  ———————————————————————————————————————————————— RewriteTyCon\n+   Mod:T ↠  Mod:T\n+\n+   'synonym' S (α₁:k₁) … (αₙ:kₙ) ↦ τ  ∈ 〚Ξ〛Mod\n+   τ  ↠  σ      τ₁  ↠  σ₁  ⋯  τₙ  ↠  σₙ"
  },
  {
    "id" : "cd75aab6-b737-40f4-9551-0d55533839c2",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "a90ee164-444c-4fcf-bbaf-0d0485d58ed4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  ———————————————————————————————————————————————— RewriteStruct\r\n```",
        "createdAt" : "2019-12-09T10:28:24Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 59,
    "diffHunk" : "@@ -763,11 +780,59 @@ as ``𝕋(F)``. See the `Built-in functions`_ section for the complete\n list of built-in functions and their respective types.\n \n \n+Type synonym resolution\n+.......................\n+\n+First, we define the synonym resolution relation ``↠`` over types,\n+which inline type synonym definitions inside types::\n+\n+  ——————————————————————————————————————————————— RewriteVar\n+   α  ↠  α\n+\n+  ——————————————————————————————————————————————— RewriteNat\n+   n  ↠  n\n+\n+  ——————————————————————————————————————————————— RewriteBuiltin\n+   BuiltinType ↠ BuiltinType\n+\n+  ———————————————————————————————————————————————— RewriteTyCon\n+   Mod:T ↠  Mod:T\n+\n+   'synonym' S (α₁:k₁) … (αₙ:kₙ) ↦ τ  ∈ 〚Ξ〛Mod\n+   τ  ↠  σ      τ₁  ↠  σ₁  ⋯  τₙ  ↠  σₙ\n+  ——————————————————————————————————————————————— RewriteSynonym\n+   Mod:S τ₁ … τₙ   ↠   σ[α₁ ↦ σ₁, …, αₙ ↦ σₙ]\n+\n+   τ₁ ↠ σ₁  ⋯  τₙ  ↠  σₙ\n+  ———————————————————————————————————————————————— RewriteText"
  },
  {
    "id" : "060a0cb8-0be0-483b-9061-6c851471898d",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "2aedbf02-bb3c-46fc-84f9-e79c309142ee",
        "parentId" : null,
        "author" : null,
        "body" : "I think you need to split it out into two cases, in case `σ₁` happens to be a partially applied synonym.\r\n\r\n```\r\n τ₁  ↠  σ₁        τ₂  ↠  σ₂\r\nσ₁ σ₂ is not a fully saturated type synonym application\r\n———————————————————————————————————————————————— RewriteApp1\r\n    τ₁ τ₂  ↠  σ₁ σ₂\r\n\r\n\r\n τ₁  ↠  σ₁        τ₂  ↠  σ₂\r\nσ₁ σ₂ is a fully saturated type synonym application\r\nσ₁ σ₂ ↠ σ \r\n———————————————————————————————————————————————— RewriteApp2\r\n    τ₁ τ₂  ↠  σ\r\n```\r\n",
        "createdAt" : "2019-12-10T11:29:42Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6e8078b6-4ca9-409d-8f11-f7641f22aa73",
        "parentId" : "2aedbf02-bb3c-46fc-84f9-e79c309142ee",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Won’t we already all in the `RewriteSynonym` case for `RewriteApp2` here?",
        "createdAt" : "2019-12-10T12:14:39Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d3c77a85-28b1-4e1a-a02c-6b66f5f71536",
        "parentId" : "2aedbf02-bb3c-46fc-84f9-e79c309142ee",
        "author" : null,
        "body" : "Not if `σ₁` is a partially applied type synonym. Of course, that can't happen if type synonyms must be fully applied in every case.\r\n\r\nConcrete example:\r\n\r\n```\r\nsynonym Foo a b = a -> b \r\nsynonym Bar = Foo Int64\r\n```\r\n\r\nthen `Bar Int64 ` doesn't fall into either `RewriteSynonym` or `RewriteApp1`, you would need `RewriteApp2` to make progress with `Bar ↠ Foo Int64` before getting `Bar Int64 ↠ Int64 -> Int64`.",
        "createdAt" : "2019-12-10T12:49:49Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 64,
    "diffHunk" : "@@ -763,11 +767,59 @@ as ``𝕋(F)``. See the `Built-in functions`_ section for the complete\n list of built-in functions and their respective types.\n \n \n+Type synonym resolution\n+.......................\n+\n+First, we define the synonym resolution relation ``↠`` over types,\n+which inline type synonym definitions inside types::\n+\n+  ——————————————————————————————————————————————— RewriteVar\n+   α  ↠  α\n+\n+  ——————————————————————————————————————————————— RewriteNat\n+   n  ↠  n\n+\n+  ——————————————————————————————————————————————— RewriteBuiltin\n+   BuiltinType ↠ BuiltinType\n+\n+  ———————————————————————————————————————————————— RewriteTyCon\n+   Mod:T ↠  Mod:T\n+\n+   'synonym' S (α₁:k₁) … (αₙ:kₙ) ↦ τ  ∈ 〚Ξ〛Mod\n+   τ  ↠  σ      τ₁  ↠  σ₁  ⋯  τₙ  ↠  σₙ\n+  ——————————————————————————————————————————————— RewriteSynonym\n+   Mod:S τ₁ … τₙ   ↠   σ[α₁ ↦ σ₁, …, αₙ ↦ σₙ]\n+\n+   τ₁ ↠ σ₁  ⋯  τₙ  ↠  σₙ\n+  ———————————————————————————————————————————————— RewriteText\n+   ⟨ f₁: τ₁, …, fₘ: τₘ ⟩ ↠ ⟨ f₁: σ₁, …, fₘ: σₘ ⟩\n+\n+   τ₁  ↠  σ₁        τ₂  ↠  σ₂\n+  ———————————————————————————————————————————————— RewriteApp\n+   τ₁ τ₂  ↠  σ₁ σ₂"
  },
  {
    "id" : "8c19e439-82fe-4085-bf36-8f9a92cb2210",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "75f94126-18fc-4460-8333-2c4b2b863af0",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n      Γ  ⊢  'Some' @τ e  :  'Optional' τ'\r\n```",
        "createdAt" : "2019-12-10T11:33:38Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : null,
    "diffHunk" : "@@ -914,21 +966,23 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpFalse\n       Γ  ⊢  'False'  :  'Bool'\n \n-      Γ  ⊢  τ  :  ⋆\n+      τ ↠ τ'      Γ  ⊢  τ  :  ⋆\n     ——————————————————————————————————————————————————————————————— ExpListNil\n-      Γ  ⊢  'Nil' @τ  :  'List' τ\n+      Γ  ⊢  'Nil' @τ  :  'List' τ'\n \n-      Γ  ⊢  τ  :  ⋆     Γ  ⊢  eₕ  :  τ     Γ  ⊢  eₜ  :  'List' τ\n+      τ ↠ τ'\n+      Γ  ⊢  τ'  :  ⋆     Γ  ⊢  eₕ  :  τ'     Γ  ⊢  eₜ  :  'List' τ'\n     ——————————————————————————————————————————————————————————————— ExpListCons\n-      Γ  ⊢  'Cons' @τ eₕ eₜ  :  'List' τ\n+      Γ  ⊢  'Cons' @τ eₕ eₜ  :  'List' τ'\n+\n+      τ ↠ τ'     Γ  ⊢  τ'  :  ⋆\n+     —————————————————————————————————————————————————————————————— ExpOptionalNone\n+      Γ  ⊢  'None' @τ  :  'Optional' τ'\n \n-      Γ  ⊢  τ  :  ⋆\n-     —————————————————————————————————————————————————————————————— ExpOptionNone\n-      Γ  ⊢  'None' @τ  :  'Option' τ\n+      τ ↠ τ'     Γ  ⊢  τ'  :  ⋆     Γ  ⊢  e  :  τ'\n+    ——————————————————————————————————————————————————————————————— ExpOptionalSome\n+      Γ  ⊢  'Some' @τ' e  :  'Optional' τ'"
  },
  {
    "id" : "cdffeb45-7849-4286-a8d3-bb1c38ac39b1",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "5522ff47-7a7d-4923-acb5-2aceb3d30ded",
        "parentId" : null,
        "author" : null,
        "body" : "Why not?\r\n\r\n```suggestion\r\n      τ ↠ τ'      ε  ⊢  τ' : *     τ' contains no quantifiers nor type synonyms\r\n```",
        "createdAt" : "2019-12-10T11:37:18Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 200,
    "diffHunk" : "@@ -940,17 +994,17 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpGenMap (*)\n       Γ  ⊢  〚e₁ ↦ e₁'; …; eₙ ↦ eₙ'〛: GenMap σ τ\n \n-      τ contains no quantifiers\n+      τ contains no quantifiers nor type synonyms\n       ε  ⊢  τ : *     Γ  ⊢  e  : τ\n     ——————————————————————————————————————————————————————————————— ExpToAny\n       Γ  ⊢  'to_any' @τ e  :  'Any'\n \n-      τ contains no quantifiers\n+      τ contains no quantifiers nor type synonyms\n       ε  ⊢  τ : *     Γ  ⊢  e  : Any\n     ——————————————————————————————————————————————————————————————— ExpFromAny\n-      Γ  ⊢  'from_any' @τ e  :  'Optional' τ\n+      Γ  ⊢  'from_any' @τ e  :  'Optional' τ'\n \n-      ε  ⊢  τ : *     τ contains no quantifiers\n+      ε  ⊢  τ : *     τ contains no quantifiers nor type synonyms"
  },
  {
    "id" : "c14cd5c5-4e7a-4289-ac71-c7eb2f81341e",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "f9b86417-8af5-4f86-8552-684a208a64f2",
        "parentId" : null,
        "author" : null,
        "body" : "Why not?\r\n\r\n```suggestion\r\n      τ' contains no quantifiers nor type synonyms\r\n      τ ↠ τ'       ε  ⊢  τ' : *     Γ  ⊢  e  : Any\r\n```",
        "createdAt" : "2019-12-10T11:39:24Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8a4bfa2e-4cc6-4a29-9055-ec78bb6e04a6",
        "parentId" : "f9b86417-8af5-4f86-8552-684a208a64f2",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It’s a bit annoying to implement since you would need to expand it in the speedy compiler so given that we don’t need it, it seems reasonable to simply forbid it at least for now.",
        "createdAt" : "2019-12-10T11:52:46Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5ed08c4e-09ae-44d1-9634-fae98e64e72a",
        "parentId" : "f9b86417-8af5-4f86-8552-684a208a64f2",
        "author" : null,
        "body" : "I see, that seems reasonable. The idea is that any user-defined type synonyms DAML will be expanded already in DAML-LF, and any type synonym in DAML-LF will be from constraints/typeclasses in DAML, which we don't care to marshal in or out of `Any`.",
        "createdAt" : "2019-12-10T11:59:57Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 195,
    "diffHunk" : "@@ -940,17 +994,17 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpGenMap (*)\n       Γ  ⊢  〚e₁ ↦ e₁'; …; eₙ ↦ eₙ'〛: GenMap σ τ\n \n-      τ contains no quantifiers\n+      τ contains no quantifiers nor type synonyms\n       ε  ⊢  τ : *     Γ  ⊢  e  : τ\n     ——————————————————————————————————————————————————————————————— ExpToAny\n       Γ  ⊢  'to_any' @τ e  :  'Any'\n \n-      τ contains no quantifiers\n+      τ contains no quantifiers nor type synonyms\n       ε  ⊢  τ : *     Γ  ⊢  e  : Any"
  },
  {
    "id" : "2cf61ffa-da39-4a6f-9d42-f869cdaffbb5",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "c2ec019a-bc0d-4a2f-a024-5047bf12b50f",
        "parentId" : null,
        "author" : null,
        "body" : "Similarly to `from_any` and `type_rep`, why not allow `τ ↠ τ'` and place the \"no quantifiers nor type synonym\" requirements on `τ'` instead.",
        "createdAt" : "2019-12-10T11:41:30Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 189,
    "diffHunk" : "@@ -940,17 +994,17 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpGenMap (*)\n       Γ  ⊢  〚e₁ ↦ e₁'; …; eₙ ↦ eₙ'〛: GenMap σ τ\n \n-      τ contains no quantifiers\n+      τ contains no quantifiers nor type synonyms\n       ε  ⊢  τ : *     Γ  ⊢  e  : τ"
  },
  {
    "id" : "971fd410-3bf8-4718-9dc2-6cbd1a5061d9",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "dadb58e4-16e7-4409-beb2-dbf0e0d76fbe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why did this change? I don’t understand why text literals here are different from other literals.",
        "createdAt" : "2019-12-05T10:27:46Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e359c188-c2e1-48b3-8ecd-c27a153ccd34",
        "parentId" : "dadb58e4-16e7-4409-beb2-dbf0e0d76fbe",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "See below.",
        "createdAt" : "2019-12-05T12:20:24Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 65,
    "diffHunk" : "@@ -591,13 +594,9 @@ Then we can define our kinds, types, and expressions::\n        |  ()                                        -- ExpUnit\n        |  'True'                                    -- ExpTrue\n        |  'False'                                   -- ExpFalse\n-       |  'Nil' @τ                                  -- ExpListNil: Empty list\n-       |  'Cons' @τ e₁ e₂                           -- ExpListCons: Cons list\n-       |  'None' @τ                                 -- ExpOptionNone: Empty Option\n-       |  'Some' @τ e                               -- ExpOptionSome: Non-empty Option\n        |  LitInt64                                  -- ExpLitInt64: 64-bit integer literal\n        |  LitNumeric                                -- ExpLitNumeric: Numeric literal\n-       |  LitText                                   -- ExpLitText: UTF-8 string literal\n+       |  t                                         -- ExpLitText: UTF-8 string literal"
  },
  {
    "id" : "2ceab65f-b648-4364-82cf-881b0d440741",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "affcaf5e-3f83-4d73-aacb-fb02285230bb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I guess this is why we switched from `TextLit` to `t`?",
        "createdAt" : "2019-12-05T10:32:29Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87983ee3-1835-4e32-ae80-39bd65336942",
        "parentId" : "affcaf5e-3f83-4d73-aacb-fb02285230bb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Indeed.",
        "createdAt" : "2019-12-05T11:00:05Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 164,
    "diffHunk" : "@@ -1521,6 +1545,15 @@ need to be evaluated further. ::\n    ——————————————————————————————————————————————————— ValExpOptionSome\n      ⊢ᵥ  'Some' @τ e\n \n+     ⊢ᵥ  e₁    ⋯    ⊢ᵥ eₙ\n+   ——————————————————————————————————————————————————— ValExpTextMap\n+     ⊢ᵥ  [t₁ ↦ e₁; ⋯ ; tₙ ↦ eₙ]"
  },
  {
    "id" : "bca513b4-0e66-4bdc-b2cd-5ad8b7172656",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "7b25e574-17fa-4490-91fb-2550ae5ee4b4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Shouldn’t we also allow for `t1` and `t1'`? You can argue that it doesn’t matter since a text literal is only equal to itself but if you follow that argument the rule for text literals should probably also be\r\n```\r\n--------------- GenEqLitText\r\nt ~_v t\r\n```\r\ninstead of what you have right now.",
        "createdAt" : "2019-12-05T10:41:44Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38fe4f66-f9d4-489f-8c30-29f12f70d2c2",
        "parentId" : "7b25e574-17fa-4490-91fb-2550ae5ee4b4",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. I change the `GenEq` rules",
        "createdAt" : "2019-12-05T12:23:35Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 261,
    "diffHunk" : "@@ -1653,7 +1686,101 @@ bound by pattern.\n     —————————————————————————————————————————————————————————————————————— MatchFail\n        v 'matches' p  ⇝  Fail\n \n+       \n+Value equality\n+~~~~~~~~~~~~~~\n+\n+We define here the relation ``~ᵥ`` on values that is used as equality\n+check. This is a partial equivalence relation over all values, but a\n+(total) equivalence relation over serialized values. This relation\n+will always be used to compare values of same types::\n \n+                                  ┌────────┐\n+  Generic Equivalence Relation    │ v ~ᵥ w │\n+                                  └────────┘\n+\t   \n+   LitNumeric₁ and LitNumeric₂ have the same scale and value\n+  ——————————————————————————————————————————————————— GenEqLitNumeric\n+   LitNumeric₁ ~ᵥ LitNumeric₂\n+\n+   t₁ and t₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitText\n+   t₁ ~ᵥ t₂\n+\n+   LitDate₁ and LitDate₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitDate\n+   LitDate₁ ~ᵥ LitDate₂\n+\n+   LitTimestamp₁ and LitTimestamp₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitTimestamp\n+   LitTimestamp₁ ~ᵥ LitTimestamp₂\n+\n+   cid₁ and cid₂ are the same\n+  ——————————————————————————————————————————————————— GenEqLitContractId\n+   cid₁ ~ᵥ cid₂\n+\n+  ——————————————————————————————————————————————————— GenEqUnit\n+   () ~ᵥ ()\n+\n+  ——————————————————————————————————————————————————— GenEqTrue\n+   'True' ~ᵥ 'True'\n+\n+  ——————————————————————————————————————————————————— GenEqFalse\n+   'False' ~ᵥ 'False'\n+\n+  ——————————————————————————————————————————————————— GenEqListNil\n+   'Nil' @τ₁ ~ᵥ 'Nil' @τ₂\n+\n+   vₕ ~ᵥ wₕ  vₜ ~ᵥ wₜ\n+  ——————————————————————————————————————————————————— GenEqListCons\n+   'Cons' @τ vₕ vₜ  ~ᵥ 'Cons' @τ wₜ wₜ\n+\n+  ——————————————————————————————————————————————————— GenEqOptionNone\n+   'None' @τ ~ᵥ 'None' @σ\n+\n+   v ~ᵥ w\n+  ——————————————————————————————————————————————————— GenEqOptionSome\n+   'Some' @τ v ~ᵥ 'Some' @τ w\n+\n+   v₁ ~ᵥ w₁     …       vₘ ~ᵥ wₘ\n+  ——————————————————————————————————————————————————— GenEqRecCon\n+  Mod:T @τ₁ … @τₙ { f₁ = v₁, …, fₘ = wₘ }\n+    ~ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₘ = wₘ }\n+\n+   v ~ᵥ w\n+  ——————————————————————————————————————————————————— GenEqVariantCon\n+   Mod:T:V @τ₁ … @τₙ v ~ᵥ Mod:T:V @σ₁ … @σₙ w\n+\n+  ——————————————————————————————————————————————————— GenEqEnumCon\n+   Mod:T:E ~ᵥ Mod:T:E\n+\n+   v₁ ~ᵥ w₁     …       vₙ ~ᵥ wₘ\n+  ——————————————————————————————————————————————————— GenEqStructCon\n+   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    \n+    v₁ ~ᵥ w₁     …       vₙ ~ᵥ wₙ"
  },
  {
    "id" : "6232495d-9173-4846-8891-8b7feb65ce50",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "cba3596a-3740-45f2-96f5-997167920f86",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This isn’t true is it? We only added this in 1.5 or 1.6 iirc",
        "createdAt" : "2019-12-05T10:45:15Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1a41d5e8-4493-491e-90d3-aee5c0fd9dc8",
        "parentId" : "cba3596a-3740-45f2-96f5-997167920f86",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I seems it was there from the beginning. At least it is there since the open sourcing. \r\nalso in the proto it is mapped to 87 which is lower that `EQUAL_LIST` and `TRACE`.",
        "createdAt" : "2019-12-05T11:51:30Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 383,
    "diffHunk" : "@@ -2540,6 +2690,8 @@ ContractId functions\n   Returns ``'True'`` if the first contact id is equal to the second,\n   ``'False'`` otherwise.\n \n+  [*Available in version < 1.dev*]"
  },
  {
    "id" : "80da50f0-e52b-49ce-94d6-11ee3445729a",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "59003c0d-dc28-410e-aeb5-16598bcb6234",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think it would be good to point out explicitly that this is sensitive to insertion order. This seems like something that might trip people up.",
        "createdAt" : "2019-12-05T10:55:16Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0265e744-2506-474d-8799-9253fbfb5f67",
        "parentId" : "59003c0d-dc28-410e-aeb5-16598bcb6234",
        "author" : null,
        "body" : "The generic equality for genmap should not be sensitive to insertion order. This is what we agreed before and this is how equality for genmaps has been implemented in general.\r\n\r\nThis rule here is not correct.",
        "createdAt" : "2019-12-05T11:38:54Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a3f35ee7-f939-485e-86d2-da11875b8cfa",
        "parentId" : "59003c0d-dc28-410e-aeb5-16598bcb6234",
        "author" : null,
        "body" : "A fixed version of the rule might be the following three statements in first-order logic (all three are necessary, although the third could be combined with either of the first two):\r\n\r\n- forall i in 1 .. m  there exists a unique j in 1 .. n such that v_i ~ v'_j\r\n- forall j in 1 .. n there exists a unique i in 1 .. m such that v_i ~ v'_j\r\n- forall i in 1 .. m, forall j in 1 .. n, if v_i ~ v'_j then w_i ~ w'_j\r\n\r\nThe \"unique\" in \"exists a unique\" prevents the consideration of maps that have repeated keys, which is fine.",
        "createdAt" : "2019-12-05T11:46:25Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5ca2af94-f831-4444-9329-b006b321cadf",
        "parentId" : "59003c0d-dc28-410e-aeb5-16598bcb6234",
        "author" : null,
        "body" : "Ah, I see the rule here is *not sensitive* to insertion order, which is good. It's not very easy to see. (-:",
        "createdAt" : "2019-12-05T11:50:41Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "26339a8e-4b06-4fc1-a366-66280d85dd44",
        "parentId" : "59003c0d-dc28-410e-aeb5-16598bcb6234",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh thanks, I got confused by all the indices.",
        "createdAt" : "2019-12-05T12:06:14Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b1e3e150-7bf8-4eff-9404-448355b2aa48",
        "parentId" : "59003c0d-dc28-410e-aeb5-16598bcb6234",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I had a comment to underline the underline the equality of generic map is not sensitive to order of entries.\r\n",
        "createdAt" : "2019-12-05T12:39:25Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : null,
    "diffHunk" : "@@ -1653,7 +1686,101 @@ bound by pattern.\n     —————————————————————————————————————————————————————————————————————— MatchFail\n        v 'matches' p  ⇝  Fail\n \n+       \n+Value equality\n+~~~~~~~~~~~~~~\n+\n+We define here the relation ``~ᵥ`` on values that is used as equality\n+check. This is a partial equivalence relation over all values, but a\n+(total) equivalence relation over serialized values. This relation\n+will always be used to compare values of same types::\n \n+                                  ┌────────┐\n+  Generic Equivalence Relation    │ v ~ᵥ w │\n+                                  └────────┘\n+\t   \n+   LitNumeric₁ and LitNumeric₂ have the same scale and value\n+  ——————————————————————————————————————————————————— GenEqLitNumeric\n+   LitNumeric₁ ~ᵥ LitNumeric₂\n+\n+   t₁ and t₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitText\n+   t₁ ~ᵥ t₂\n+\n+   LitDate₁ and LitDate₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitDate\n+   LitDate₁ ~ᵥ LitDate₂\n+\n+   LitTimestamp₁ and LitTimestamp₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitTimestamp\n+   LitTimestamp₁ ~ᵥ LitTimestamp₂\n+\n+   cid₁ and cid₂ are the same\n+  ——————————————————————————————————————————————————— GenEqLitContractId\n+   cid₁ ~ᵥ cid₂\n+\n+  ——————————————————————————————————————————————————— GenEqUnit\n+   () ~ᵥ ()\n+\n+  ——————————————————————————————————————————————————— GenEqTrue\n+   'True' ~ᵥ 'True'\n+\n+  ——————————————————————————————————————————————————— GenEqFalse\n+   'False' ~ᵥ 'False'\n+\n+  ——————————————————————————————————————————————————— GenEqListNil\n+   'Nil' @τ₁ ~ᵥ 'Nil' @τ₂\n+\n+   vₕ ~ᵥ wₕ  vₜ ~ᵥ wₜ\n+  ——————————————————————————————————————————————————— GenEqListCons\n+   'Cons' @τ vₕ vₜ  ~ᵥ 'Cons' @τ wₜ wₜ\n+\n+  ——————————————————————————————————————————————————— GenEqOptionNone\n+   'None' @τ ~ᵥ 'None' @σ\n+\n+   v ~ᵥ w\n+  ——————————————————————————————————————————————————— GenEqOptionSome\n+   'Some' @τ v ~ᵥ 'Some' @τ w\n+\n+   v₁ ~ᵥ w₁     …       vₘ ~ᵥ wₘ\n+  ——————————————————————————————————————————————————— GenEqRecCon\n+  Mod:T @τ₁ … @τₙ { f₁ = v₁, …, fₘ = wₘ }\n+    ~ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₘ = wₘ }\n+\n+   v ~ᵥ w\n+  ——————————————————————————————————————————————————— GenEqVariantCon\n+   Mod:T:V @τ₁ … @τₙ v ~ᵥ Mod:T:V @σ₁ … @σₙ w\n+\n+  ——————————————————————————————————————————————————— GenEqEnumCon\n+   Mod:T:E ~ᵥ Mod:T:E\n+\n+   v₁ ~ᵥ w₁     …       vₙ ~ᵥ wₘ\n+  ——————————————————————————————————————————————————— GenEqStructCon\n+   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    \n+    v₁ ~ᵥ w₁     …       vₙ ~ᵥ wₙ\n+  ——————————————————————————————————————————————————— GenEqTextMap\n+   [ t₁ ↦ w₁; …; tₘ ↦ wₘ ]\n+     ~ᵥ  [t₁ ↦ w₁; …;x tₘ ↦ wₘ]\n+\n+  ——————————————————————————————————————————————————— GenEqEmptyGenMap\n+   〚 〛 ~ᵥ 〚 〛\n+\n+    i ∈ { 1 … m }      vᵢ ~ᵥ v₁'      wᵢ ~ᵥ w₁'"
  },
  {
    "id" : "bbb76cb5-81bb-4fbd-8113-90374836614e",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "88b544c6-2477-4e69-8670-39128d048a7d",
        "parentId" : null,
        "author" : null,
        "body" : "I think it makes sense to allow different types between the `'Some'` constructors, as we do for the `'None'` case and for other constructors, because types are erased. Even if we only ever compare values of the same type.\r\n\r\n```suggestion\r\n   'Some' @τ v ~ᵥ 'Some' @σ w\r\n```",
        "createdAt" : "2019-12-05T11:35:57Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0ce7ae10-6184-4dae-9c8c-e9cdeb611f9d",
        "parentId" : "88b544c6-2477-4e69-8670-39128d048a7d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed.",
        "createdAt" : "2019-12-05T12:31:51Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : null,
    "diffHunk" : "@@ -1653,7 +1686,101 @@ bound by pattern.\n     —————————————————————————————————————————————————————————————————————— MatchFail\n        v 'matches' p  ⇝  Fail\n \n+       \n+Value equality\n+~~~~~~~~~~~~~~\n+\n+We define here the relation ``~ᵥ`` on values that is used as equality\n+check. This is a partial equivalence relation over all values, but a\n+(total) equivalence relation over serialized values. This relation\n+will always be used to compare values of same types::\n \n+                                  ┌────────┐\n+  Generic Equivalence Relation    │ v ~ᵥ w │\n+                                  └────────┘\n+\t   \n+   LitNumeric₁ and LitNumeric₂ have the same scale and value\n+  ——————————————————————————————————————————————————— GenEqLitNumeric\n+   LitNumeric₁ ~ᵥ LitNumeric₂\n+\n+   t₁ and t₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitText\n+   t₁ ~ᵥ t₂\n+\n+   LitDate₁ and LitDate₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitDate\n+   LitDate₁ ~ᵥ LitDate₂\n+\n+   LitTimestamp₁ and LitTimestamp₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitTimestamp\n+   LitTimestamp₁ ~ᵥ LitTimestamp₂\n+\n+   cid₁ and cid₂ are the same\n+  ——————————————————————————————————————————————————— GenEqLitContractId\n+   cid₁ ~ᵥ cid₂\n+\n+  ——————————————————————————————————————————————————— GenEqUnit\n+   () ~ᵥ ()\n+\n+  ——————————————————————————————————————————————————— GenEqTrue\n+   'True' ~ᵥ 'True'\n+\n+  ——————————————————————————————————————————————————— GenEqFalse\n+   'False' ~ᵥ 'False'\n+\n+  ——————————————————————————————————————————————————— GenEqListNil\n+   'Nil' @τ₁ ~ᵥ 'Nil' @τ₂\n+\n+   vₕ ~ᵥ wₕ  vₜ ~ᵥ wₜ\n+  ——————————————————————————————————————————————————— GenEqListCons\n+   'Cons' @τ vₕ vₜ  ~ᵥ 'Cons' @τ wₜ wₜ\n+\n+  ——————————————————————————————————————————————————— GenEqOptionNone\n+   'None' @τ ~ᵥ 'None' @σ\n+\n+   v ~ᵥ w\n+  ——————————————————————————————————————————————————— GenEqOptionSome\n+   'Some' @τ v ~ᵥ 'Some' @τ w"
  },
  {
    "id" : "52ce26ca-67cc-4a25-8d41-f102823dd063",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "fd3e05bf-2086-4afe-9f47-332e03ed28bf",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n   [ t₁ ↦ v₁; …; tₘ ↦ vₘ ]\r\n```",
        "createdAt" : "2019-12-05T11:37:21Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c300b130-63cf-429c-bfd0-3cb300c1e786",
        "parentId" : "fd3e05bf-2086-4afe-9f47-332e03ed28bf",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed. Thanks.",
        "createdAt" : "2019-12-05T12:32:28Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : null,
    "diffHunk" : "@@ -1653,7 +1686,101 @@ bound by pattern.\n     —————————————————————————————————————————————————————————————————————— MatchFail\n        v 'matches' p  ⇝  Fail\n \n+       \n+Value equality\n+~~~~~~~~~~~~~~\n+\n+We define here the relation ``~ᵥ`` on values that is used as equality\n+check. This is a partial equivalence relation over all values, but a\n+(total) equivalence relation over serialized values. This relation\n+will always be used to compare values of same types::\n \n+                                  ┌────────┐\n+  Generic Equivalence Relation    │ v ~ᵥ w │\n+                                  └────────┘\n+\t   \n+   LitNumeric₁ and LitNumeric₂ have the same scale and value\n+  ——————————————————————————————————————————————————— GenEqLitNumeric\n+   LitNumeric₁ ~ᵥ LitNumeric₂\n+\n+   t₁ and t₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitText\n+   t₁ ~ᵥ t₂\n+\n+   LitDate₁ and LitDate₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitDate\n+   LitDate₁ ~ᵥ LitDate₂\n+\n+   LitTimestamp₁ and LitTimestamp₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitTimestamp\n+   LitTimestamp₁ ~ᵥ LitTimestamp₂\n+\n+   cid₁ and cid₂ are the same\n+  ——————————————————————————————————————————————————— GenEqLitContractId\n+   cid₁ ~ᵥ cid₂\n+\n+  ——————————————————————————————————————————————————— GenEqUnit\n+   () ~ᵥ ()\n+\n+  ——————————————————————————————————————————————————— GenEqTrue\n+   'True' ~ᵥ 'True'\n+\n+  ——————————————————————————————————————————————————— GenEqFalse\n+   'False' ~ᵥ 'False'\n+\n+  ——————————————————————————————————————————————————— GenEqListNil\n+   'Nil' @τ₁ ~ᵥ 'Nil' @τ₂\n+\n+   vₕ ~ᵥ wₕ  vₜ ~ᵥ wₜ\n+  ——————————————————————————————————————————————————— GenEqListCons\n+   'Cons' @τ vₕ vₜ  ~ᵥ 'Cons' @τ wₜ wₜ\n+\n+  ——————————————————————————————————————————————————— GenEqOptionNone\n+   'None' @τ ~ᵥ 'None' @σ\n+\n+   v ~ᵥ w\n+  ——————————————————————————————————————————————————— GenEqOptionSome\n+   'Some' @τ v ~ᵥ 'Some' @τ w\n+\n+   v₁ ~ᵥ w₁     …       vₘ ~ᵥ wₘ\n+  ——————————————————————————————————————————————————— GenEqRecCon\n+  Mod:T @τ₁ … @τₙ { f₁ = v₁, …, fₘ = wₘ }\n+    ~ᵥ Mod:T @σ₁ … @σₙ { f₁ = w₁, …, fₘ = wₘ }\n+\n+   v ~ᵥ w\n+  ——————————————————————————————————————————————————— GenEqVariantCon\n+   Mod:T:V @τ₁ … @τₙ v ~ᵥ Mod:T:V @σ₁ … @σₙ w\n+\n+  ——————————————————————————————————————————————————— GenEqEnumCon\n+   Mod:T:E ~ᵥ Mod:T:E\n+\n+   v₁ ~ᵥ w₁     …       vₙ ~ᵥ wₘ\n+  ——————————————————————————————————————————————————— GenEqStructCon\n+   ⟨ f₁ = v₁, …, fₘ = vₘ ⟩ ~ᵥ ⟨ f₁ = w₁, …, fₘ = wₘ ⟩\n+    \n+    v₁ ~ᵥ w₁     …       vₙ ~ᵥ wₙ\n+  ——————————————————————————————————————————————————— GenEqTextMap\n+   [ t₁ ↦ w₁; …; tₘ ↦ wₘ ]"
  },
  {
    "id" : "20a1c023-8d4e-48ae-9e83-5fae83341fdd",
    "prId" : 3715,
    "comments" : [
      {
        "id" : "a360cf69-c03a-461c-b67c-af1a494355e1",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "```suggestion\r\nencode either `TextMap` or `GenMap`. DAML-LF programs can create\r\n```",
        "createdAt" : "2019-12-05T15:06:43Z",
        "updatedAt" : "2019-12-06T15:11:20Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0703e5eb35d9a96c6ea7a07d0899920f5b3df5d7",
    "line" : null,
    "diffHunk" : "@@ -2929,6 +3040,15 @@ comments::\n   // * must be non empty *\n \n \n+Maps\n+....\n+\n+The program serialization format does not provide any direct way to\n+encode neither `TextMap` not `GenMap`. DAML-LF programs can create"
  },
  {
    "id" : "2acd43fb-9e05-4d00-bf56-4c7b7b3cec95",
    "prId" : 3715,
    "comments" : [
      {
        "id" : "5bb0e988-d886-4a15-9f68-4928d190dfd2",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Typos:\r\n\r\n```rst\r\n**Entry order**: The operations above preserve the order of\r\nthe map according to the lexicographic order of its keys.\r\n```",
        "createdAt" : "2019-12-05T15:08:25Z",
        "updatedAt" : "2019-12-06T15:11:20Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0703e5eb35d9a96c6ea7a07d0899920f5b3df5d7",
    "line" : null,
    "diffHunk" : "@@ -2564,8 +2728,11 @@ List functions\n   predicate give as first argument.\n \n \n-TextMap functions\n-~~~~~~~~~~~~~~~~~\n+Text map functions\n+~~~~~~~~~~~~~~~~~~\n+\n+**Entries ordering**: All the operation above preserved the order of\n+ the map according the lexicographic order of its keys."
  },
  {
    "id" : "358ed40a-af31-4b62-8016-bd8691cd9ba8",
    "prId" : 3715,
    "comments" : [
      {
        "id" : "6035b99b-9734-4303-8cd9-7ccca3a5c3d8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "I'm not sure what it means to both \"preserve\" the order and also use lexicographic ordering. (I'm probably missing something.) If it's ordered lexicographically, then it's sorted, and it's not necessary to \"preserve\" anything; there's an invariant in place.",
        "createdAt" : "2019-12-05T15:10:50Z",
        "updatedAt" : "2019-12-06T15:11:20Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0703e5eb35d9a96c6ea7a07d0899920f5b3df5d7",
    "line" : null,
    "diffHunk" : "@@ -2564,8 +2728,11 @@ List functions\n   predicate give as first argument.\n \n \n-TextMap functions\n-~~~~~~~~~~~~~~~~~\n+Text map functions\n+~~~~~~~~~~~~~~~~~~\n+\n+**Entries ordering**: All the operation above preserved the order of\n+ the map according the lexicographic order of its keys."
  },
  {
    "id" : "db45e400-fb12-4bd7-97cc-43e6c5f205b6",
    "prId" : 3715,
    "comments" : [
      {
        "id" : "8921aacc-ae5a-4859-9322-d131559c0760",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Either add a space here or remove from the previous line.\r\n\r\n```suggestion\r\n       |  Err t                                     -- ResErr\r\n```",
        "createdAt" : "2019-12-05T15:11:17Z",
        "updatedAt" : "2019-12-06T15:11:20Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0703e5eb35d9a96c6ea7a07d0899920f5b3df5d7",
    "line" : null,
    "diffHunk" : "@@ -1686,7 +1825,7 @@ exact output.\n \n   Evaluation result\n     r ::= Ok v                                      -- ResOk\n-       |  Err LitText                               -- ResErr\n+       |  Err t                                    -- ResErr"
  },
  {
    "id" : "22b1885f-7f84-41dc-a318-2a87dfffd680",
    "prId" : 3660,
    "comments" : [
      {
        "id" : "fd68482e-e964-46c6-929e-12fde27d7545",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should explain somewhere that \"record\" means nominal record and \"struct\" means structural records.",
        "createdAt" : "2019-11-28T08:40:20Z",
        "updatedAt" : "2019-11-28T09:11:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5d899584-f5f3-46dd-bf46-740c23e5d5c4",
        "parentId" : "fd68482e-e964-46c6-929e-12fde27d7545",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-11-28T09:06:31Z",
        "updatedAt" : "2019-11-28T09:11:53Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bd5134affa807d790e2d801c4393bb4684926d63",
    "line" : 14,
    "diffHunk" : "@@ -475,7 +475,7 @@ DAML-LF as a \"not an Ident\" notation, so should not be considered for\n future addition to allowed identifier characters.\n \n In the following, we will use identifiers to represent *built-in\n-functions*, term and type *variable names*, record and tuple *field\n+functions*, term and type *variable names*, record and struct *field"
  },
  {
    "id" : "515ba977-04a8-4269-a85d-63d638fd27bd",
    "prId" : 3635,
    "comments" : [
      {
        "id" : "a0716261-f356-46db-8172-43dbd3d6852f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n       |  'synonym' S (α₁: k₁)… (αₙ: kₙ) ↦ τ        -- DefTypeSynonym\r\n```",
        "createdAt" : "2019-11-26T14:03:56Z",
        "updatedAt" : "2019-11-26T14:40:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dfc3adf4d1e94695c10c9e19497754dae883b65c",
    "line" : null,
    "diffHunk" : "@@ -676,6 +681,7 @@ available for usage::\n        |  'variant' T (α₁: k₁)… (αₙ: kₙ) ↦ V₁ : τ₁ | … | Vₘ : τₘ\n                                                     -- DefVariant\n        |  'enum' T  ↦ E₁ | … | Eₘ                    -- DefEnum\n+       |  'synonym' T (α₁: k₁)… (αₙ: kₙ) ↦ τ        -- DefTypeSynonym"
  },
  {
    "id" : "87dcfe41-6417-410d-a8fc-5fad242f7fe3",
    "prId" : 3635,
    "comments" : [
      {
        "id" : "1c949fab-0a85-46a7-911d-f84ce203f509",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      'synonym' S (α₁:k₁) … (αₙ:kₙ) ↦ τ ∈ 〚Ξ〛Mod\r\n```",
        "createdAt" : "2019-11-26T14:04:11Z",
        "updatedAt" : "2019-11-26T14:40:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dfc3adf4d1e94695c10c9e19497754dae883b65c",
    "line" : null,
    "diffHunk" : "@@ -846,6 +852,14 @@ First, we formally defined *well-formed types*. ::\n     ————————————————————————————————————————————— TyTuple\n       Γ  ⊢  ⟨ f₁: τ₁, …, fₙ: τₙ ⟩  :  ⋆\n \n+      'synonym' T (α₁:k₁) … (αₙ:kₙ) ↦ τ ∈ 〚Ξ〛Mod"
  },
  {
    "id" : "dde37993-20ff-4c86-a58f-70a9cfb23ab8",
    "prId" : 3635,
    "comments" : [
      {
        "id" : "1b53eb5c-67ad-40a6-aa0d-2aa50167c36d",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```\r\n\r\nThis line would better go in **Well-formed definitions** paragraph.\r\n\r\n```\r\n    αₙ : kₙ · ⋯ · α₁ : k₁  ⊢  τ  :  ⋆\r\n  ——————————————————————————————————————————————————————————————— DefSyn\r\n    ⊢  'synonym' S (α₁: k₁) … (αₙ: kₙ) ↦ τ \r\n```",
        "createdAt" : "2019-11-26T14:25:58Z",
        "updatedAt" : "2019-11-26T14:40:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dfc3adf4d1e94695c10c9e19497754dae883b65c",
    "line" : null,
    "diffHunk" : "@@ -846,6 +852,14 @@ First, we formally defined *well-formed types*. ::\n     ————————————————————————————————————————————— TyTuple\n       Γ  ⊢  ⟨ f₁: τ₁, …, fₙ: τₙ ⟩  :  ⋆\n \n+      'synonym' S (α₁:k₁) … (αₙ:kₙ) ↦ τ ∈ 〚Ξ〛Mod\n+      (α₁:k₁) … (αₙ:kₙ) · Γ  ⊢  τ  :  ⋆"
  },
  {
    "id" : "d431675b-86a1-4d77-8f13-65e4d695dd5d",
    "prId" : 3635,
    "comments" : [
      {
        "id" : "b698599d-4266-4485-b855-7c337f34ff76",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      Γ  ⊢  Mod:S τ₁ … τₙ  :  ⋆\r\n```",
        "createdAt" : "2019-11-26T14:29:25Z",
        "updatedAt" : "2019-11-26T14:40:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eb439449-9faa-4076-8a95-e9bccb2f1606",
        "parentId" : "b698599d-4266-4485-b855-7c337f34ff76",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Apparently it was not fixed. ",
        "createdAt" : "2019-11-26T15:05:07Z",
        "updatedAt" : "2019-11-26T15:05:08Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dfc3adf4d1e94695c10c9e19497754dae883b65c",
    "line" : 45,
    "diffHunk" : "@@ -846,6 +852,14 @@ First, we formally defined *well-formed types*. ::\n     ————————————————————————————————————————————— TyTuple\n       Γ  ⊢  ⟨ f₁: τ₁, …, fₙ: τₙ ⟩  :  ⋆\n \n+      'synonym' S (α₁:k₁) … (αₙ:kₙ) ↦ τ ∈ 〚Ξ〛Mod\n+      (α₁:k₁) … (αₙ:kₙ) · Γ  ⊢  τ  :  ⋆\n+      Γ  ⊢  τ₁ : k₁  …  Γ  ⊢  τₙ : kₙ\n+    ————————————————————————————————————————————— TyTypeSynonym\n+      Γ  ⊢  S τ₁ … τₙ  :  ⋆"
  },
  {
    "id" : "9e0089fe-9148-49c9-a212-9949498bd644",
    "prId" : 3589,
    "comments" : [
      {
        "id" : "97ca5df4-ace0-4544-99b5-59df5ea25e0c",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n``'TextMap'`` was called ``'Map'`` in versions <= 1.dev.\r\n```",
        "createdAt" : "2019-11-22T16:25:37Z",
        "updatedAt" : "2019-11-25T11:44:14Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a84f590b351ebece449308a443df333eb4b8de57",
    "line" : null,
    "diffHunk" : "@@ -3052,14 +3054,17 @@ The deserialization process will reject any DAML-LF 1.2 (or earlier)\n program using the two statements above or the field ``key`` within\n the message ``DefTemplate`` .\n \n-Map\n-...\n+TextMap\n+.......\n \n [*Available in versions >= 1.3*]\n \n The deserialization process will reject any DAML-LF 1.2 (or earlier)\n-program using the builtin functions : ``MAP_EMPTY``, ``MAP_INSERT``,\n-``MAP_LOOKUP``, ``MAP_DELETE``, ``MAP_LIST``, ``MAP_SIZE``,\n+program using the builtin functions : ``TEXTMAP_EMPTY``,\n+``TEXTMAP_INSERT``, ``TEXTMAP_LOOKUP``, ``TEXTMAP_DELETE``,\n+``TEXTMAP_LIST``, ``TEXTMAP_SIZE``,\n+\n+TextMpa was called ``Map`` in versions <= 1.dev."
  },
  {
    "id" : "a72ccde9-6080-407c-802a-0a0d39353a68",
    "prId" : 3340,
    "comments" : [
      {
        "id" : "e45abe70-aa29-4ed9-98eb-e79e0c1c8109",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "When did we decide to do this? I'm not convinced requiring the submitter of a `fetchByKey` to be a maintainer of the key is a good idea. This definitely hurts the compositionality of workflows. I also don't see the technical necessity of this change. Being a stakeholder of the contract should absolutely be enough. If you know a contract with the right key exists, then it must be the unique contract with this key. If you don't see a contract with such a key, you can't submit the transaction anyway. (I'm not talking about `lookupByKey` here!)\r\n\r\ncc @bame-da @gerolf-da ",
        "createdAt" : "2019-11-05T19:18:12Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "401f431a-9fd6-4226-9113-92faa343ab64",
        "parentId" : "e45abe70-aa29-4ed9-98eb-e79e0c1c8109",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In fact, this restriction is pretty much against the spirit of https://github.com/digital-asset/daml/issues/2311, which we all seem to have agreed on.",
        "createdAt" : "2019-11-05T19:24:46Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca5ef3ce-584d-4237-b50f-778ffeb907a5",
        "parentId" : "e45abe70-aa29-4ed9-98eb-e79e0c1c8109",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is not recent. This was done by francesco. See #1866 already referenced in #2311. \r\n",
        "createdAt" : "2019-11-05T20:22:51Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e40d0121-72ac-4445-b8f9-3f8f441b477a",
        "parentId" : "e45abe70-aa29-4ed9-98eb-e79e0c1c8109",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I just moved the comment from line 227/232 to line 246/252",
        "createdAt" : "2019-11-05T20:24:36Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f0b37d7d468279b3d9d07dd3ddc2a48b8c618884",
    "line" : 49,
    "diffHunk" : "@@ -247,6 +243,13 @@ Version: 1.dev\n \n   * **Add** ``type_rep``, a value presenting a type.\n \n+Version: 1.dev\n+..............\n+\n+  * **Change** Transaction submitter must be in the contract key"
  },
  {
    "id" : "f2fff8b9-3324-4051-9c50-43c3ca66259f",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "13cd1f96-3e8c-41b5-964e-4261ad33c205",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nlist. An `interned string` is interpreted as the string it points to\r\n```",
        "createdAt" : "2019-11-01T12:54:28Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f1497a51-0a92-4839-be02-d1dfe97ad8b5",
        "parentId" : "13cd1f96-3e8c-41b5-964e-4261ad33c205",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-01T13:30:52Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to"
  },
  {
    "id" : "43b30c5e-c979-4ee3-9429-60d7be1cc374",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "b7da2b5e-b39b-497b-8366-022ce7ef8996",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n1.6*] maybe be used instead of ``PackageRef.package_id_str``\r\n```",
        "createdAt" : "2019-11-01T12:55:36Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1812beb8-87d5-4906-8e15-c9509f197b85",
        "parentId" : "b7da2b5e-b39b-497b-8366-022ce7ef8996",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-01T13:31:11Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such"
  },
  {
    "id" : "b0453ca2-b075-48c6-93d9-59207979ee09",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "b5695b31-530b-4295-ad78-281de6d0e657",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nand must be a valid *interned packageId*.\r\n```",
        "createdAt" : "2019-11-01T12:55:49Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d5d0c044-0378-4f0f-a4e9-25ced2df81f6",
        "parentId" : "b5695b31-530b-4295-ad78-281de6d0e657",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-01T13:31:54Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*."
  },
  {
    "id" : "4a9ef5b2-3c68-4e99-8ca9-d3e60db4261f",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "606d1ffe-51e9-4fea-9904-b6701a58bba5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nreject any DAML-LF 1.dev (or later) that does not comply with this\r\n```",
        "createdAt" : "2019-11-01T12:56:35Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f802cc9a-ea23-4934-a827-198850d060df",
        "parentId" : "606d1ffe-51e9-4fea-9904-b6701a58bba5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed. fixed",
        "createdAt" : "2019-11-01T13:32:25Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*.\n+\n+Starting from DAML-LF 1.dev, all ``string`` (or ``repeated string``)\n+fields with the suffix ``_str`` are forbidden. Alternative fields of\n+type ``int32`` (or ``repeated int32``) with the suffix\n+``_interned_str`` must be used instead.  Except\n+``PackageRef.package_id_interned_str`` which is [*Available in\n+versions >= 1.6*], all fields with suffix ``_interned_str`` are\n+[*Available in versions >= 1.dev*].  The deserialization process will\n+reject any DAML-LF 1.dev (or latter) that that does not comply this"
  },
  {
    "id" : "a1014b4b-b1f0-4d93-bf6b-1418226fb3b6",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "6596322f-ed8a-4e59-9d97-12c8bf252427",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nTo allow string sharing, the so-called *string interning* mechanism\r\n```",
        "createdAt" : "2019-11-01T12:57:25Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a2b8b962-cb76-47f7-bd0d-2b85a8c78a21",
        "parentId" : "6596322f-ed8a-4e59-9d97-12c8bf252427",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-01T13:33:12Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,"
  },
  {
    "id" : "059fcb3f-7566-4bf4-884d-9c7175123493",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "7e3b1081-7ce3-4302-8b39-e89e71672060",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nallows the strings within messages to be stored in a global table and\r\n```",
        "createdAt" : "2019-11-01T12:57:35Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e2c4b81-f959-4c03-8555-d20478da629e",
        "parentId" : "7e3b1081-7ce3-4302-8b39-e89e71672060",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed. fixed.",
        "createdAt" : "2019-11-01T13:33:28Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and"
  },
  {
    "id" : "d4901591-6dc6-4b10-a98b-82ff5b126461",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "7af53f5c-a55b-4c86-86d2-b4da0368323a",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\ninterning* mechanism, allow the *names* within messages to be stored\r\n```",
        "createdAt" : "2019-11-01T12:57:57Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "89d1abbd-953f-4e4c-8d36-f686aff15a49",
        "parentId" : "7af53f5c-a55b-4c86-86d2-b4da0368323a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "not sure :S. \r\nI follow the correction above an remove the comma, but let the 's'",
        "createdAt" : "2019-11-01T13:34:51Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*.\n+\n+Starting from DAML-LF 1.dev, all ``string`` (or ``repeated string``)\n+fields with the suffix ``_str`` are forbidden. Alternative fields of\n+type ``int32`` (or ``repeated int32``) with the suffix\n+``_interned_str`` must be used instead.  Except\n+``PackageRef.package_id_interned_str`` which is [*Available in\n+versions >= 1.6*], all fields with suffix ``_interned_str`` are\n+[*Available in versions >= 1.dev*].  The deserialization process will\n+reject any DAML-LF 1.dev (or latter) that that does not comply this\n+restriction.\n+\n+Name Interning\n+..............\n+\n+[*Available in versions >= 1.dev*]\n+\n+To allow sharing of `names <Identifiers_>`_, the so-called *name\n+interning* mechanism, allows the *names* within messages to be stored"
  },
  {
    "id" : "e5f7a37e-7969-4508-9a38-72c33d7fcb53",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "8b79ac83-fb70-4b85-b943-3aa3951a449b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nin a global table and be referenced by their index.\r\n```\r\nAlthough I'm not totally sure about his.",
        "createdAt" : "2019-11-01T12:58:25Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b8e8f2c2-a0c1-4a6b-9c78-9639c19d1847",
        "parentId" : "8b79ac83-fb70-4b85-b943-3aa3951a449b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-01T13:35:04Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*.\n+\n+Starting from DAML-LF 1.dev, all ``string`` (or ``repeated string``)\n+fields with the suffix ``_str`` are forbidden. Alternative fields of\n+type ``int32`` (or ``repeated int32``) with the suffix\n+``_interned_str`` must be used instead.  Except\n+``PackageRef.package_id_interned_str`` which is [*Available in\n+versions >= 1.6*], all fields with suffix ``_interned_str`` are\n+[*Available in versions >= 1.dev*].  The deserialization process will\n+reject any DAML-LF 1.dev (or latter) that that does not comply this\n+restriction.\n+\n+Name Interning\n+..............\n+\n+[*Available in versions >= 1.dev*]\n+\n+To allow sharing of `names <Identifiers_>`_, the so-called *name\n+interning* mechanism, allows the *names* within messages to be stored\n+in a global table and referenced by their index."
  },
  {
    "id" : "49028d26-dd52-46e0-85fd-66002d01fd7e",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "a1d25c2d-e0f1-49ca-9afc-49f62c4d13fe",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n`interned name` is interpreted as the name built form the `name` it\r\n```",
        "createdAt" : "2019-11-01T12:59:11Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "efcdba68-46e9-4d3f-a8ad-b1a11800ad5a",
        "parentId" : "a1d25c2d-e0f1-49ca-9afc-49f62c4d13fe",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-01T13:35:26Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*.\n+\n+Starting from DAML-LF 1.dev, all ``string`` (or ``repeated string``)\n+fields with the suffix ``_str`` are forbidden. Alternative fields of\n+type ``int32`` (or ``repeated int32``) with the suffix\n+``_interned_str`` must be used instead.  Except\n+``PackageRef.package_id_interned_str`` which is [*Available in\n+versions >= 1.6*], all fields with suffix ``_interned_str`` are\n+[*Available in versions >= 1.dev*].  The deserialization process will\n+reject any DAML-LF 1.dev (or latter) that that does not comply this\n+restriction.\n+\n+Name Interning\n+..............\n+\n+[*Available in versions >= 1.dev*]\n+\n+To allow sharing of `names <Identifiers_>`_, the so-called *name\n+interning* mechanism, allows the *names* within messages to be stored\n+in a global table and referenced by their index.\n+\n+``InternedDottedName`` is a non-empty list of valid `interned\n+identifiers`. Such message is interpreted as the name built from the\n+sequence the interned identifiers it contains.  The field\n+``Package.interned_dotted_names`` is a list of such messages. A\n+so-called `interned name` is a valid zero-based index of this list. An\n+`interned names` is interpreted as the name built form the `name` it"
  },
  {
    "id" : "2396cbdf-3670-47f1-b40d-e4c1db64b982",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "dc15be5b-4be2-44d5-b6a8-640d2bbc89ba",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nfields of type ``int32`` with the suffix ``_interned_dname``\r\n```",
        "createdAt" : "2019-11-01T12:59:34Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e886391e-844c-407b-98f6-546bf8a2321a",
        "parentId" : "dc15be5b-4be2-44d5-b6a8-640d2bbc89ba",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed\r\n",
        "createdAt" : "2019-11-01T13:35:45Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*.\n+\n+Starting from DAML-LF 1.dev, all ``string`` (or ``repeated string``)\n+fields with the suffix ``_str`` are forbidden. Alternative fields of\n+type ``int32`` (or ``repeated int32``) with the suffix\n+``_interned_str`` must be used instead.  Except\n+``PackageRef.package_id_interned_str`` which is [*Available in\n+versions >= 1.6*], all fields with suffix ``_interned_str`` are\n+[*Available in versions >= 1.dev*].  The deserialization process will\n+reject any DAML-LF 1.dev (or latter) that that does not comply this\n+restriction.\n+\n+Name Interning\n+..............\n+\n+[*Available in versions >= 1.dev*]\n+\n+To allow sharing of `names <Identifiers_>`_, the so-called *name\n+interning* mechanism, allows the *names* within messages to be stored\n+in a global table and referenced by their index.\n+\n+``InternedDottedName`` is a non-empty list of valid `interned\n+identifiers`. Such message is interpreted as the name built from the\n+sequence the interned identifiers it contains.  The field\n+``Package.interned_dotted_names`` is a list of such messages. A\n+so-called `interned name` is a valid zero-based index of this list. An\n+`interned names` is interpreted as the name built form the `name` it\n+points to in ``Package.interned_dotted_names``.\n+\n+Starting from DAML-LF 1.dev, all ``DottedName`` (or ``repeated\n+string``) fields with the suffix ``_dname`` are forbidden. Alternative\n+fields of type ``int32` with the suffix ``_interned_dname``"
  },
  {
    "id" : "3487c065-547e-484c-adfe-ac3cf09cf2b2",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "b158e88c-fe49-4a7e-8f10-687291145c86",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\ndeserialization process will reject any DAML-LF 1.dev (or later) that\r\n```",
        "createdAt" : "2019-11-01T12:59:48Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*.\n+\n+Starting from DAML-LF 1.dev, all ``string`` (or ``repeated string``)\n+fields with the suffix ``_str`` are forbidden. Alternative fields of\n+type ``int32`` (or ``repeated int32``) with the suffix\n+``_interned_str`` must be used instead.  Except\n+``PackageRef.package_id_interned_str`` which is [*Available in\n+versions >= 1.6*], all fields with suffix ``_interned_str`` are\n+[*Available in versions >= 1.dev*].  The deserialization process will\n+reject any DAML-LF 1.dev (or latter) that that does not comply this\n+restriction.\n+\n+Name Interning\n+..............\n+\n+[*Available in versions >= 1.dev*]\n+\n+To allow sharing of `names <Identifiers_>`_, the so-called *name\n+interning* mechanism, allows the *names* within messages to be stored\n+in a global table and referenced by their index.\n+\n+``InternedDottedName`` is a non-empty list of valid `interned\n+identifiers`. Such message is interpreted as the name built from the\n+sequence the interned identifiers it contains.  The field\n+``Package.interned_dotted_names`` is a list of such messages. A\n+so-called `interned name` is a valid zero-based index of this list. An\n+`interned names` is interpreted as the name built form the `name` it\n+points to in ``Package.interned_dotted_names``.\n+\n+Starting from DAML-LF 1.dev, all ``DottedName`` (or ``repeated\n+string``) fields with the suffix ``_dname`` are forbidden. Alternative\n+fields of type ``int32` with the suffix ``_interned_dname``\n+[*Available in versions >= 1.dev*] must be used instead. The\n+deserialization process will reject any DAML-LF 1.dev (or latter) that"
  },
  {
    "id" : "4f410c13-5e59-4126-9865-1c7ec4303334",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "6972e070-3b92-4075-9f22-4bcba708de21",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nthat does not comply with this restriction.\r\n```",
        "createdAt" : "2019-11-01T13:00:00Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "160566ca-93d5-4eba-88df-bce4614477fa",
        "parentId" : "6972e070-3b92-4075-9f22-4bcba708de21",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed\r\n",
        "createdAt" : "2019-11-01T13:37:00Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : 125,
    "diffHunk" : "@@ -2900,18 +2895,73 @@ Enum\n \n The deserialization process will reject any DAML-LF 1.5 (or earlier)\n program using the field ``enum`` in ``DefDataType`` messages, the\n-field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con``\n+field ``enum`` in  ``CaseAlt`` messages, or the field ``enum_con_str``\n in ``Expr`` messages.\n \n-intern package IDs\n-..................\n+\n+String Interning\n+................\n \n [*Available in versions >= 1.6*]\n \n-In ``PackageRef``, the alternative ``interned_id`` may be used in place\n-of ``package_id``, in which case the package ID will be that at the\n-given index into ``Package.interned_package_ids``.\n-See `Package reference`_.\n+To allow string sharing, the so-called *string interning* mechanism,\n+allow the strings withing messages to be stored in a global table and\n+referenced by their index.\n+\n+The field ``Package.interned_strings`` is a list of strings. A\n+so-called `interned string` is a valid zero-based index of this\n+list. An `interned string` is interpreted as the string its points to\n+in ``Package.interned_strings``.\n+\n++ An `interned package id` is an `interned string` that can be\n+  interpreted as a valid `PackageId string`.\n++ An `interned party` is an `interned string` that can be interpreted\n+  as a valid `Party string`.\n++ An `interned numeric id` is an `interned string` that can be\n+  interpreted as a valid `numeric` literal.\n++ An `interned text` is an `interned string` interpreted as a text\n+  literal\n++ An `interned identifier` is an `interned string` that can be\n+  interpreted as a valid `identifier`\n+\n+Starting from DAML-LF 1.6, the field\n+``PackageRef.package_id_interned_str`` [*Available in versions >=\n+1.6*] maybe be used instead ``PackageRef.package_id_str``.  If such\n+case it must be a valid *interned packageId*.\n+\n+Starting from DAML-LF 1.dev, all ``string`` (or ``repeated string``)\n+fields with the suffix ``_str`` are forbidden. Alternative fields of\n+type ``int32`` (or ``repeated int32``) with the suffix\n+``_interned_str`` must be used instead.  Except\n+``PackageRef.package_id_interned_str`` which is [*Available in\n+versions >= 1.6*], all fields with suffix ``_interned_str`` are\n+[*Available in versions >= 1.dev*].  The deserialization process will\n+reject any DAML-LF 1.dev (or latter) that that does not comply this\n+restriction.\n+\n+Name Interning\n+..............\n+\n+[*Available in versions >= 1.dev*]\n+\n+To allow sharing of `names <Identifiers_>`_, the so-called *name\n+interning* mechanism, allows the *names* within messages to be stored\n+in a global table and referenced by their index.\n+\n+``InternedDottedName`` is a non-empty list of valid `interned\n+identifiers`. Such message is interpreted as the name built from the\n+sequence the interned identifiers it contains.  The field\n+``Package.interned_dotted_names`` is a list of such messages. A\n+so-called `interned name` is a valid zero-based index of this list. An\n+`interned names` is interpreted as the name built form the `name` it\n+points to in ``Package.interned_dotted_names``.\n+\n+Starting from DAML-LF 1.dev, all ``DottedName`` (or ``repeated\n+string``) fields with the suffix ``_dname`` are forbidden. Alternative\n+fields of type ``int32` with the suffix ``_interned_dname``\n+[*Available in versions >= 1.dev*] must be used instead. The\n+deserialization process will reject any DAML-LF 1.dev (or latter) that\n+that does not comply this restriction."
  },
  {
    "id" : "f4600443-03e0-4512-8896-ad8430c4f05f",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "1f2d53a6-1d23-4e97-b726-8839abb5b938",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nThe curious reader can temporarily refer to the following PRs for more details:\r\n```",
        "createdAt" : "2019-11-01T13:00:24Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "58f72e0e-73e0-4ed6-9e04-9297f14156de",
        "parentId" : "1f2d53a6-1d23-4e97-b726-8839abb5b938",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-01T13:37:22Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -2999,6 +3049,20 @@ On the other hand, starting from DAML-LF 1.dev:\n   deserialization process will reject any DAML-LF 1.dev (or latter)\n   that does not comply those restrictions.\n \n+Any template\n+............\n+\n+[*Available in versions >= 1.dev*]\n+\n+This is an experimental feature used in DAML Triggers.\n+More details will be provided in a near future.\n+\n+The curious reader can temporaly refer to the following PRs for more details:"
  },
  {
    "id" : "990ba7f5-56bd-471a-a578-61a3a41059d6",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "d39b0681-48a9-4dfe-8f15-ad7da01bf9ec",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nwith the built-in equality for any given type, if that built-in is defined. ::\r\n```",
        "createdAt" : "2019-10-28T17:07:40Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : null,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Lookups the value at a key in the map.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+\n+  Deletes a key and its value from the map. When the key is not a\n+  member of the map, the original map is returned.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LIST : ∀ α. ∀ β.  'GenMap' α β → 'List' ⟨ key: α, value: β ⟩``\n+\n+  Converts to a list of key/value pairs. Unlike ``'MAP_LIST'``, the output\n+  list is guaranteed to be in the order that the keys were first inserted.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_SIZE : ∀ α. ∀ β.  'GenMap' α β → 'Int64'``\n+\n+  Return the number of elements in the map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+\n+**Validity of Keys:** A key is valid if and only if it is equivalent\n+to itself according to the relation ``~ᵥ`` defined below. Attempts to\n+use an invalid key in the operations above always result in a runtime\n+error.\n+\n+Of particular note, the following values are never valid keys:\n+\n+* Lambda expressions ``λ x : τ . e``\n+* Type abstractions ``Λ α : k . e``\n+* (Partially applied) built-in functions\n+* (Un-evaluated) Update/Scenario values\n+* Any value containing an invalid key\n+\n+**Comparison of Keys:** We define here the relation ``~ᵥ`` on value\n+expressions that is used for key comparison. This is a partial\n+equivalence relation over all values, but a (total) equivalence\n+relation over valid keys.\n+\n+This relation is not exposed as a builtin function, but it coincides\n+with the built-in equality for any given type, if that built-in isdefined. ::"
  },
  {
    "id" : "a4638a6d-0c5a-4bde-bd6c-4c224067bf15",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "3cfeca08-e95e-44e8-9876-cd170e666aa3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Currently you are switching between `builtin` and `built-in`, it would probably be good to stick to one of those.",
        "createdAt" : "2019-10-28T17:08:05Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 158,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Lookups the value at a key in the map.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+\n+  Deletes a key and its value from the map. When the key is not a\n+  member of the map, the original map is returned.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LIST : ∀ α. ∀ β.  'GenMap' α β → 'List' ⟨ key: α, value: β ⟩``\n+\n+  Converts to a list of key/value pairs. Unlike ``'MAP_LIST'``, the output\n+  list is guaranteed to be in the order that the keys were first inserted.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_SIZE : ∀ α. ∀ β.  'GenMap' α β → 'Int64'``\n+\n+  Return the number of elements in the map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+\n+**Validity of Keys:** A key is valid if and only if it is equivalent\n+to itself according to the relation ``~ᵥ`` defined below. Attempts to\n+use an invalid key in the operations above always result in a runtime\n+error.\n+\n+Of particular note, the following values are never valid keys:\n+\n+* Lambda expressions ``λ x : τ . e``\n+* Type abstractions ``Λ α : k . e``\n+* (Partially applied) built-in functions\n+* (Un-evaluated) Update/Scenario values\n+* Any value containing an invalid key\n+\n+**Comparison of Keys:** We define here the relation ``~ᵥ`` on value\n+expressions that is used for key comparison. This is a partial\n+equivalence relation over all values, but a (total) equivalence\n+relation over valid keys.\n+\n+This relation is not exposed as a builtin function, but it coincides"
  },
  {
    "id" : "0b4d1bf9-710a-4fc2-9ffd-72c10b13af89",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "31eea42c-5c46-4fa9-b390-c34a27ae8013",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we want to allow contract ids? The absolute vs relative thing makes that a bit dangerous so at least on the DAML level I probably wouldn’t expose it.",
        "createdAt" : "2019-10-28T17:10:14Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "942e8cd3-f630-4527-8312-6e55425f038a",
        "parentId" : "31eea42c-5c46-4fa9-b390-c34a27ae8013",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Contract IDs are fine here as long as we stick to the following two assumptions:\r\n(1) the rewriting from relative to absolute IDs is injective and no relative ID is ever rewritten to an absolute ID that is in use already,\r\n(2) the rewriting of all contract IDs in a transaction happens in one go without any map operations performed in the middle.\r\nI wonder if we should document these assumptions (in better words than mine)?",
        "createdAt" : "2019-10-28T17:34:29Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "019174aa-fa83-4419-920f-e47dd53600d7",
        "parentId" : "31eea42c-5c46-4fa9-b390-c34a27ae8013",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, I think I didn’t realize how the rewriting works until now. Makes sense now but yeah we should definitely document this imho.",
        "createdAt" : "2019-10-28T17:43:52Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 186,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Lookups the value at a key in the map.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+\n+  Deletes a key and its value from the map. When the key is not a\n+  member of the map, the original map is returned.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LIST : ∀ α. ∀ β.  'GenMap' α β → 'List' ⟨ key: α, value: β ⟩``\n+\n+  Converts to a list of key/value pairs. Unlike ``'MAP_LIST'``, the output\n+  list is guaranteed to be in the order that the keys were first inserted.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_SIZE : ∀ α. ∀ β.  'GenMap' α β → 'Int64'``\n+\n+  Return the number of elements in the map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+\n+**Validity of Keys:** A key is valid if and only if it is equivalent\n+to itself according to the relation ``~ᵥ`` defined below. Attempts to\n+use an invalid key in the operations above always result in a runtime\n+error.\n+\n+Of particular note, the following values are never valid keys:\n+\n+* Lambda expressions ``λ x : τ . e``\n+* Type abstractions ``Λ α : k . e``\n+* (Partially applied) built-in functions\n+* (Un-evaluated) Update/Scenario values\n+* Any value containing an invalid key\n+\n+**Comparison of Keys:** We define here the relation ``~ᵥ`` on value\n+expressions that is used for key comparison. This is a partial\n+equivalence relation over all values, but a (total) equivalence\n+relation over valid keys.\n+\n+This relation is not exposed as a builtin function, but it coincides\n+with the built-in equality for any given type, if that built-in isdefined. ::\n+\n+                                  ┌──────────┐\n+  Generic Equivalence Relation    │ e₁ ~ᵥ e₂ │\n+                                  └──────────┘\n+\n+  LitInt64₁ and LitInt64₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitInt64\n+  LitInt64₁ ~ᵥ LitInt64₂\n+\n+  LitNumeric₁ and LitNumeric₂ have the same scale and value\n+  ——————————————————————————————————————————————————— GenEqLitNumeric\n+  LitNumeric₁ ~ᵥ LitNumeric₂\n+\n+  LitText₁ and LitText₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitText\n+  LitText₁ ~ᵥ LitText₂\n+\n+  LitDate₁ and LitDate₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitDate\n+  LitDate₁ ~ᵥ LitDate₂\n+\n+  LitTimestamp₁ and LitTimestamp₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitTimestamp\n+  LitTimestamp₁ ~ᵥ LitTimestamp₂\n+\n+  cid₁ and cid₂ are the same"
  },
  {
    "id" : "2b01625f-fd01-48c5-9769-5572a5c39278",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "f90b2c86-48d7-4e28-9872-2ade9973c21b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should specify how this affects the \"order in which keys were inserted\" which is relevant for the conversion to lists, do we first-inserted-order or last-inserted-order? If we go with the former, the latter can be _efficiently_ expressed in terms of the former (and `GENMAP_DELETE`). I don't see how this would be possible _efficiently_ the other way around.",
        "createdAt" : "2019-10-28T17:17:27Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "232b6fe9-161a-4e5a-8767-254d39264851",
        "parentId" : "f90b2c86-48d7-4e28-9872-2ade9973c21b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am inclined toward  `last-inserted-order`. ",
        "createdAt" : "2019-10-29T12:58:42Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43dcd34a-798c-47cc-bbf5-1f7150f26df2",
        "parentId" : "f90b2c86-48d7-4e28-9872-2ade9973c21b",
        "author" : null,
        "body" : "I think first inserted order makes more sense. It's certainly what I meant in the spec. It implies that if you insert the same (key, value) pair in a map that is already there, it will not modify the map, i.e. inserts are idempotent. That's nice.",
        "createdAt" : "2019-10-29T14:03:06Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "079b3af6-9e15-4d7c-86bc-e445fcef6dd8",
        "parentId" : "f90b2c86-48d7-4e28-9872-2ade9973c21b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't know what you mean _exactly_ by \"inserts are idempotent\". I assume you mean\r\n```\r\ninsert k v . insert k v  ==  insert k v\r\n```\r\nfor all `k` and `v`. This is true for last-inserted order as well. I think what is more compelling about first-inserted order is that we get\r\n```\r\ninsert k (lookup k m) m  ==  m\r\n```\r\nfor all `m` and keys `k` of `m`.\r\n\r\nWe can also define\r\n```\r\ninsertLast k v = insertFirst k v . delete k\r\n```\r\nThus, insert-first order is at least as \"powerful\" as insert-last order.",
        "createdAt" : "2019-10-29T14:13:24Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "61ca5cca-112a-4e24-98c9-98c432b02fa8",
        "parentId" : "f90b2c86-48d7-4e28-9872-2ade9973c21b",
        "author" : null,
        "body" : "Ah, you're right. My sentence was better before the `i.e.`.",
        "createdAt" : "2019-10-29T14:20:01Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 92,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value."
  },
  {
    "id" : "94b035ae-a973-4bb9-8ae3-bed4400159bd",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "f98d223f-b841-4a9c-99f3-a4ced145ea1f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  Looks up the value at a key in the map.\r\n```",
        "createdAt" : "2019-10-28T17:18:06Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : null,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Lookups the value at a key in the map."
  },
  {
    "id" : "cc188a2b-c324-41f7-b526-ec6a16ab46e2",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "9fcfc888-3532-451d-87f5-4af1f3877ec9",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```\r\nUpdate/Scenario are not `values` as defined in the `Values` section ",
        "createdAt" : "2019-10-29T12:46:34Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : null,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Lookups the value at a key in the map.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+\n+  Deletes a key and its value from the map. When the key is not a\n+  member of the map, the original map is returned.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LIST : ∀ α. ∀ β.  'GenMap' α β → 'List' ⟨ key: α, value: β ⟩``\n+\n+  Converts to a list of key/value pairs. Unlike ``'MAP_LIST'``, the output\n+  list is guaranteed to be in the order that the keys were first inserted.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_SIZE : ∀ α. ∀ β.  'GenMap' α β → 'Int64'``\n+\n+  Return the number of elements in the map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+\n+**Validity of Keys:** A key is valid if and only if it is equivalent\n+to itself according to the relation ``~ᵥ`` defined below. Attempts to\n+use an invalid key in the operations above always result in a runtime\n+error.\n+\n+Of particular note, the following values are never valid keys:\n+\n+* Lambda expressions ``λ x : τ . e``\n+* Type abstractions ``Λ α : k . e``\n+* (Partially applied) built-in functions\n+* (Un-evaluated) Update/Scenario values"
  },
  {
    "id" : "175dff61-45ec-46d3-98d2-5bdd35938749",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "07e9a18e-b257-4a45-85eb-106d96581475",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thanks!",
        "createdAt" : "2019-10-29T12:55:42Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 47,
    "diffHunk" : "@@ -1474,11 +1480,11 @@ need to be evaluated further. ::\n    ——————————————————————————————————————————————————— ValExpListCons\n      ⊢ᵥ  'Cons' @τ eₕ eₜ\n \n-   ——————————————————————————————————————————————————— ValExpListNil"
  },
  {
    "id" : "6fa89514-f8df-449c-b913-2d27f85b3b3c",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are forgetting the \"nice\" case where keys are maps. \r\nOf course we can a first implementation without map keys. \r\n",
        "createdAt" : "2019-10-29T13:01:48Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "599a8809-36a6-4176-8aca-96acb1b0848f",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "That's not nice! We probably will need to add them, but I'm worried the \"insertion order\" issue will mess people up.\r\n\r\nBut also I don't see map values under the values section (including `'Map'`). Probably should add them?",
        "createdAt" : "2019-11-01T16:35:00Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5c323e43-ad3d-4dd3-8923-537f10826faf",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We can postpone this problem for later. ",
        "createdAt" : "2019-11-04T10:41:44Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "025f4a2e-7ebf-45ce-bd0b-e69bbc52bb2b",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "TextMap (simply called 'Map' in the spec) are not concern with the insertion order.\r\nThey are sorted by key when converted to list or serialized in the ledger. ",
        "createdAt" : "2019-11-04T12:23:53Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5edbc941-cc31-4062-8240-830f35c4a8ae",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "Right. I propose that two `'Map'` (i.e. TextMap) are considered equal if they have the same key-value pairs, and two `'GenMap'` are considered equal if they have the same key-value pairs *in the same insertion order*, so they result in the same output when using `GENMAP_KEYS` and `GENMAP_VALUES`.",
        "createdAt" : "2019-11-04T12:36:50Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3a99ab9f-eb6b-4e64-80e4-049190edcafd",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "(We could make the insertion order irrelevant for map key comparison, but then two \"equal keys\" could result in different outputs when passed through `GENMAP_KEYS`. Furthermore, the equality instance `(Eq a, Eq b) => Eq (GenMap a b)` that will be defined in DAML, in terms of `GENMAP_KEYS` and `GENMAP_VALUES`, is sensitive to insertion order, so it makes sense to make key comparison sensitive to that as well.)",
        "createdAt" : "2019-11-04T12:40:14Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "fccd077a-a907-4f71-92de-cf6ec19283d6",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "Following discussion with @bame-da, we decided that equality for GenMaps should not consider insertion order.",
        "createdAt" : "2019-11-04T13:46:18Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "394c7685-e1ce-4676-9178-6705fe6ead2e",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Are we planning to add a builtin `GENMAP_EQ : forall k v. (v -> v -> Bool) -> GenMap k v -> GenMap k v -> Bool`? (I assume we need to use the builtin equality for keys to make this work. I'm slowly starting to despise user-defined equality...)",
        "createdAt" : "2019-11-04T15:21:30Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f7d22d21-bbd6-4f36-9940-a135daf95a2a",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We were not planning to add this function as it was not here for `TextMap`. \r\n\r\nBut I am planning to add a generic equality `EQUAL: forall v. v -> v -> Bool` using the builin equality. This will obviously work with `GenMap`. Is it not enough ?  ",
        "createdAt" : "2019-11-04T15:27:42Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5b218f4-3e47-4f77-8346-7e43860e1e59",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "@remyhaemmerle-da The issue is that `Eq` (the DAML typeclass) does not necessarily match the built-in equality, so you may get unexpected results when using something like `EQUAL`. In any case we can define `GENMAP_EQ` in Daml without problem, it just won't be fast.\r\n",
        "createdAt" : "2019-11-04T16:44:42Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4a4bdfe9-cbc2-4ee5-ae66-590a696965e3",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "@hurryabit Could we remove user-defined equality from DAML? Should we?",
        "createdAt" : "2019-11-04T16:47:44Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "98addbe1-cc0a-4f6d-be55-5db0b0fed0b4",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "OK. Let's start without it. We can still add it letter. ",
        "createdAt" : "2019-11-04T16:48:36Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1d08740b-7cdd-4dd5-9374-fa04ccb99479",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not averse to removing user-defined equality from DAML. Particularly if we find a way to keep the `Eq` type class as a marker but have no (or at least no user-implementable) methods in it. I'm not sure if that feasible though since `Eq` is probably wired quite deep into GHC.\r\n@associahedron do you have some time at hand to investigate this a bit?\r\n@bame-da what do you think about this?",
        "createdAt" : "2019-11-04T21:53:53Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8eefd6b6-9bd7-4f04-af0f-a3c66ea6f28d",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "@hurryabit I think we can outlaw custom `Eq` instances in the preprocessor, and tell users to use `deriving Eq` instead.",
        "createdAt" : "2019-11-05T09:46:39Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c941861e-e692-44e6-b3d7-838fc87cf89f",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : null,
        "body" : "We could make it a warning for a while, and turn it into an outright error later.",
        "createdAt" : "2019-11-05T12:54:33Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9ad66db5-c002-475d-83fb-31cac958ed8d",
        "parentId" : "cfd2dcd2-b0a6-4c1f-9354-66c4b8726491",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That sounds reasonable to me. We should then also replace the derived `Eq` instances with calls to our DAML-LF primitive during our conversion to DAML-LF.",
        "createdAt" : "2019-11-05T16:47:29Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 76,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Lookups the value at a key in the map.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+\n+  Deletes a key and its value from the map. When the key is not a\n+  member of the map, the original map is returned.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LIST : ∀ α. ∀ β.  'GenMap' α β → 'List' ⟨ key: α, value: β ⟩``\n+\n+  Converts to a list of key/value pairs. Unlike ``'MAP_LIST'``, the output\n+  list is guaranteed to be in the order that the keys were first inserted.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_SIZE : ∀ α. ∀ β.  'GenMap' α β → 'Int64'``\n+\n+  Return the number of elements in the map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+\n+**Validity of Keys:** A key is valid if and only if it is equivalent\n+to itself according to the relation ``~ᵥ`` defined below. Attempts to\n+use an invalid key in the operations above always result in a runtime\n+error.\n+\n+Of particular note, the following values are never valid keys:\n+\n+* Lambda expressions ``λ x : τ . e``\n+* Type abstractions ``Λ α : k . e``\n+* (Partially applied) built-in functions\n+* (Un-evaluated) Update/Scenario values\n+* Any value containing an invalid key\n+\n+**Comparison of Keys:** We define here the relation ``~ᵥ`` on value\n+expressions that is used for key comparison. This is a partial\n+equivalence relation over all values, but a (total) equivalence\n+relation over valid keys.\n+\n+This relation is not exposed as a builtin function, but it coincides\n+with the built-in equality for any given type, if that built-in isdefined. ::\n+\n+                                  ┌──────────┐\n+  Generic Equivalence Relation    │ e₁ ~ᵥ e₂ │\n+                                  └──────────┘\n+\n+  LitInt64₁ and LitInt64₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitInt64\n+  LitInt64₁ ~ᵥ LitInt64₂\n+\n+  LitNumeric₁ and LitNumeric₂ have the same scale and value\n+  ——————————————————————————————————————————————————— GenEqLitNumeric\n+  LitNumeric₁ ~ᵥ LitNumeric₂\n+\n+  LitText₁ and LitText₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitText\n+  LitText₁ ~ᵥ LitText₂\n+\n+  LitDate₁ and LitDate₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitDate\n+  LitDate₁ ~ᵥ LitDate₂\n+\n+  LitTimestamp₁ and LitTimestamp₂ have the same value\n+  ——————————————————————————————————————————————————— GenEqLitTimestamp\n+  LitTimestamp₁ ~ᵥ LitTimestamp₂\n+\n+  cid₁ and cid₂ are the same\n+  ——————————————————————————————————————————————————— GenEqLitContractId\n+  cid₁ ~ᵥ cid₂\n+\n+  ——————————————————————————————————————————————————— GenEqUnit\n+  () ~ᵥ ()\n+\n+  ——————————————————————————————————————————————————— GenEqTrue\n+  'True' ~ᵥ 'True'\n+\n+  ——————————————————————————————————————————————————— GenEqFalse\n+  'False' ~ᵥ 'False'\n+\n+  ——————————————————————————————————————————————————— GenEqListNil\n+  'Nil' @τ₁ ~ᵥ 'Nil' @τ₂\n+\n+  e₁ ~ᵥ e₁'\n+  e₂ ~ᵥ e₂'\n+  ——————————————————————————————————————————————————— GenEqListCons\n+  'Cons' @τ e₁ e₂  ~ᵥ 'Cons' @τ' e₁' e₂'\n+\n+  ——————————————————————————————————————————————————— GenEqOptionNone\n+  'None' @τ₁ ~ᵥ 'None' @τ₂\n+\n+  e₁ ~ᵥ e₂\n+  ——————————————————————————————————————————————————— GenEqOptionSome\n+  'Some' @τ₁ e₁ ~ᵥ 'Some' @τ₂ e₂\n+\n+  e₁ ~ᵥ e₁'     …       eₙ ~ᵥ eₙ'\n+  ——————————————————————————————————————————————————— GenEqRecCon\n+  Mod:T @τ₁ … @τₙ { f₁ = e₁, …, fₙ = eₙ }\n+    ~ᵥ Mod:T @τ₁' … @τₙ' { f₁ = e₁', …, fₙ = eₙ' }\n+\n+  e ~ᵥ e'\n+  ——————————————————————————————————————————————————— GenEqVariantCon\n+  Mod:T:V @τ₁ … @τₙ e ~ᵥ Mod:T:V @τ₁' … @τₙ' e'\n+\n+  ——————————————————————————————————————————————————— GenEqEnumCon\n+  Mod:T:E ~ᵥ Mod:T:E\n+\n+  e₁ ~ᵥ e₁'     …       eₙ ~ᵥ eₙ'\n+  ——————————————————————————————————————————————————— GenEqTupleCon\n+  ⟨ f₁ = e₁, …, fₘ = eₘ ⟩ ~ᵥ ⟨ f₁ = e₁', …, fₘ = eₘ' ⟩\n+"
  },
  {
    "id" : "b3f73a44-14e6-4204-aa3b-a826381942e2",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "ce5211d2-9c1b-4482-bbfb-23a44b0f1d49",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@hurryabit Do we want to get ride of tuples ? ",
        "createdAt" : "2019-10-29T13:04:17Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "249c8fd3-d335-4774-a092-e343f2f5b88a",
        "parentId" : "ce5211d2-9c1b-4482-bbfb-23a44b0f1d49",
        "author" : null,
        "body" : "If so, we could have separate `GENMAP_KEYS` and `GENMAP_VALUES` . All I did was copy the existing operations from `'Map'`.",
        "createdAt" : "2019-10-29T13:59:33Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "12fa2798-97e5-4c7d-82c9-5659702ee243",
        "parentId" : "ce5211d2-9c1b-4482-bbfb-23a44b0f1d49",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "IIRC, we had considered this for `TextMap` already but then decided against having `keys` and `values` separately. Unfortunately, I can't remember why. Doing the zipping in DAML land seems reasonable. If we go with the structural records, we would need to map them into proper DAML pairs anyway. Thus, the performance characteristics don't differ too much. Let's go with `GENMAP_KEYS` and `GENMAP_VALUES`.",
        "createdAt" : "2019-10-29T14:22:02Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "644b2c13-7daf-42c0-bb06-f32a6039fccc",
        "parentId" : "ce5211d2-9c1b-4482-bbfb-23a44b0f1d49",
        "author" : null,
        "body" : ":+1:",
        "createdAt" : "2019-11-01T14:45:36Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : null,
    "diffHunk" : "@@ -2569,6 +2575,150 @@ Map functions\n \n   [*Available in versions >= 1.3*]\n \n+\n+Generic Map functions\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+* ``GENMAP_EMPTY : ∀ α. ∀ β. 'GenMap' α β``\n+\n+  Returns the empty generic map.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_INSERT : ∀ α. ∀ β.  α → β → 'GenMap' α β → 'GenMap' α β``\n+\n+  Inserts a new key and value in the map. If the key is already\n+  present in the map, the associated value is replaced with the\n+  supplied value.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``\n+\n+  Lookups the value at a key in the map.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_DELETE : ∀ α. ∀ β.  α → 'GenMap' α β → 'GenMap' α β``\n+\n+  Deletes a key and its value from the map. When the key is not a\n+  member of the map, the original map is returned.\n+\n+  This raises an error if the key is not a valid map key. Keys are\n+  compared according to the rules listed below.\n+\n+  [*Available in versions >= 1.dev*]\n+\n+* ``GENMAP_LIST : ∀ α. ∀ β.  'GenMap' α β → 'List' ⟨ key: α, value: β ⟩``"
  },
  {
    "id" : "10d78dc4-2082-4dec-a1e7-d2d59722f8ae",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "0f2a7992-a106-4d42-a3b9-419e95bc07a8",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "small issue with the merge",
        "createdAt" : "2019-11-04T10:42:11Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f0238d69-9796-4ab7-9a50-3d158332b638",
        "parentId" : "0f2a7992-a106-4d42-a3b9-419e95bc07a8",
        "author" : null,
        "body" : "oops! fixed, thanks",
        "createdAt" : "2019-11-04T11:22:55Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : null,
    "diffHunk" : "@@ -541,10 +543,19 @@ Then we can define our kinds, types, and expressions::\n        |  'List'                                    -- BTyList\n        |  'Option'                                  -- BTyOption\n        |  'Map'                                     -- BTMap\n+       |  'GenMap'                                  -- BTGenMap\n        |  'Update'                                  -- BTyUpdate\n        |  'ContractId'                              -- BTyContractId\n        |  'Any'                                     -- BTyAny\n \n+<<<<<<< HEAD\n+=======\n+  Type constraints\n+    K ::= ε                                         -- ConstraintTrivial\n+       |  Eq α, K\n+       |  Serial α, K\n+\n+>>>>>>> Add GenMap to DAML-LF 1.dev"
  },
  {
    "id" : "13dbdd2d-0b77-4be1-b882-cf814acf542a",
    "prId" : 3196,
    "comments" : [
      {
        "id" : "214c0d38-725a-4b1c-b952-c466e9d8dc78",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should probably get the old preconditions back and add `τ does not contain quantifiers`.",
        "createdAt" : "2019-10-16T12:30:56Z",
        "updatedAt" : "2019-10-16T12:31:04Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "21c7e8fd-7d23-400d-8c57-890480c51158",
        "parentId" : "214c0d38-725a-4b1c-b952-c466e9d8dc78",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ll change it together with changing the Haskell typechecker.",
        "createdAt" : "2019-10-16T12:32:33Z",
        "updatedAt" : "2019-10-16T12:32:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e74a0d2d-9c67-4b75-9cef-a02bf5cc040b",
        "parentId" : "214c0d38-725a-4b1c-b952-c466e9d8dc78",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "(I forget the haskell typechecker. )\r\n\r\nThis is closer to what I implement in scala. \r\nFell free to change everything as you wish.",
        "createdAt" : "2019-10-16T12:42:56Z",
        "updatedAt" : "2019-10-16T12:43:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81d42fab427c6588a392d965600919058f32aa47",
    "line" : 12,
    "diffHunk" : "@@ -890,11 +890,13 @@ Then we define *well-formed expressions*. ::\n     ——————————————————————————————————————————————————————————————— ExpOptionSome\n       Γ  ⊢  'Some' @τ e  :  'Option' τ\n \n-      ε ⊢ τ : *     Γ  ⊢  e  : τ\n+      τ contains neither variables nor quantifiers\n+      Γ  ⊢  τ : *     Γ  ⊢  e  : τ\n     ——————————————————————————————————————————————————————————————— ExpToAny\n       Γ  ⊢  'to_any' @τ e  :  'Any'\n \n-      ε ⊢ τ : *     Γ  ⊢  e  : Any\n+      τ contains neither variables nor quantifiers\n+      Γ  ⊢  τ : *     Γ  ⊢  e  : Any"
  },
  {
    "id" : "1143bb70-7a9e-45e4-a569-874d723c0e0b",
    "prId" : 3141,
    "comments" : [
      {
        "id" : "5378ef95-166d-410a-8ac5-515b520bd6a8",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\nEquality on types is defined as structural equality and is only defined on\r\n```",
        "createdAt" : "2019-10-09T13:03:07Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9f33ac4e3d1ffe96883e634244b43469966c6fd2",
    "line" : null,
    "diffHunk" : "@@ -724,6 +724,9 @@ built-in function ``F`` comes with a fixed type, which we will denote\n as ``𝕋(F)``. See the `Built-in functions`_ section for the complete\n list of built-in functions and their respective types.\n \n+Equality on types is defined as structural equalityt and is only defined on"
  },
  {
    "id" : "4f0476a0-fe2f-406a-81dd-4ad0ca29f30b",
    "prId" : 3141,
    "comments" : [
      {
        "id" : "d2ccdaac-3231-4c0c-ba2a-9f31a37af0ae",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Naive question. \r\n Why not `'to_any' @τ : τ -> Any` instead of `'to_any' @τ e: Any`  ?  ",
        "createdAt" : "2019-10-09T15:45:39Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7fc86233-84b3-4767-9f77-5307ad9f7913",
        "parentId" : "d2ccdaac-3231-4c0c-ba2a-9f31a37af0ae",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Two reasons:\r\n1. For `to_any`, you would end up with applications sometimes being values if the function is `to_any τ` which is a bit awkward. This does not apply to `from_any`.\r\n2. Consistency: Changing only `from_any` while keeping `to_any` the way it is due to 1 feels weird and also doesn’t fit in with things like `Cons`, `create`, … that are all defined similarly.",
        "createdAt" : "2019-10-09T18:30:18Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9f33ac4e3d1ffe96883e634244b43469966c6fd2",
    "line" : 28,
    "diffHunk" : "@@ -584,8 +584,8 @@ Then we can define our kinds, types, and expressions::\n        |  e.f                                       -- ExpTupleProj: Tuple projection\n        |  ⟨ e₁ 'with' f = e₂ ⟩                      -- ExpTupleUpdate: Tuple update\n        |  u                                         -- ExpUpdate: Update expression\n-       | 'to_any_template' @Mod:T t                 -- ExpToAnyTemplate: Wrap a template in AnyTemplate\n-       | 'from_any_template' @Mod:T t               -- ExpToAnyTemplate: Extract the given template from AnyTemplate or return None\n+       | 'to_any' @τ t                              -- ExpToAny: Wrap a value of the given type in Any"
  },
  {
    "id" : "0155d2b4-2792-44f7-836d-8eb49b337af6",
    "prId" : 3141,
    "comments" : [
      {
        "id" : "12eb45ec-61d0-42ae-87f6-ac4ded33940c",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It is a bit wrong in general. We use implicitly everywhere equality  on non-ground types.\r\nFurthermore it is not structural equality but alpha-equivalence. \r\n\r\nI think it just better not saying anything. \r\n\r\n",
        "createdAt" : "2019-10-09T15:47:19Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e2fd2f92-0465-41e8-a64d-20ea85f8f34c",
        "parentId" : "12eb45ec-61d0-42ae-87f6-ac4ded33940c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Fair point, I’ve removed it for now. I think there is still something different about the equality used in the type system and the equality used in the runtime check in `from_any` but I don’t recall how other systems define this properly and I agree that the current wording is more confusing than helpful.",
        "createdAt" : "2019-10-09T18:19:04Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9f33ac4e3d1ffe96883e634244b43469966c6fd2",
    "line" : null,
    "diffHunk" : "@@ -724,6 +724,9 @@ built-in function ``F`` comes with a fixed type, which we will denote\n as ``𝕋(F)``. See the `Built-in functions`_ section for the complete\n list of built-in functions and their respective types.\n \n+Equality on types is defined as structural equality and is only defined on"
  },
  {
    "id" : "6d236be6-b0dc-4d76-a4b5-ab677c6e4944",
    "prId" : 3070,
    "comments" : [
      {
        "id" : "a5b44870-337d-4b8f-8398-a37324033919",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Assume the 4 builtin  functions with the following type: \r\n```\r\n   𝕋(F₀₀) =  σ\r\n   𝕋(F₁₀) = ∀ α₁. σ\r\n   𝕋(F₀₁) = σ₁ → σ\r\n   𝕋(F₁₁) = ∀ α₁. σ₁ → σ\r\n```\r\n  \r\nAnd the followin proposition \r\n \r\n\r\n\r\n00.  `⊢ᵥ F₀₀` must **not** hold \r\n  This was not holding before.  \r\n  This does not hold after.\r\n\r\n10.  `⊢ᵥ F₁₀` must hold, \r\n    *This was not holding before.* \r\n    This hold after using  `ValBuiltin₂` with `k=0`\r\n  \r\n01.  `⊢ᵥ  F₀₁` must hold,\r\n    *This was not holding before.* \r\n    This hold after using  `ValBuiltin₂` with `k=0`\r\n\r\n11.   `⊢ᵥ  F₁₁` must hold,  \r\n      This was holding before using  `ValExpBuiltin₁` with k = 1\r\n      This hold after using ValBuiltin₂ with k = 0\r\n\r\n110.  `⊢ᵥ   F₁₀ @τ` must **not** hold\r\n     This was holding before using  `ValExpBuiltin₁` with k = 1\r\n     This does not hold after\r\n\r\n111.  `⊢ᵥ F₁₁ @τ` must hold,\r\n     This was holding before using  `ValExpBuiltin₁` with k = 1\r\n     This hold after using `ValBuiltin₂` with k = 0\r\n   ",
        "createdAt" : "2019-09-30T12:50:03Z",
        "updatedAt" : "2019-10-15T11:29:05Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90e1730c4b293b3c2ff55f52a48960d84581f10c",
    "line" : null,
    "diffHunk" : "@@ -1413,121 +1413,117 @@ need to be evaluated further. ::\n    Values                  │ ⊢ᵥ  e │\n                            └───────┘\n \n-   ——————————————————————————————————————————————————— ValExpAbs\n+   ——————————————————————————————————————————————————— ValAbs\n      ⊢ᵥ  λ x : τ . e\n \n-   ——————————————————————————————————————————————————— ValExpTyAbs\n+   ——————————————————————————————————————————————————— ValTyAbs\n      ⊢ᵥ  Λ α : k . e\n \n-   ——————————————————————————————————————————————————— ValExpLitInt64\n+   ——————————————————————————————————————————————————— ValLitInt64\n      ⊢ᵥ  LitInt64\n \n-   ——————————————————————————————————————————————————— ValExpLitNumeric\n+   ——————————————————————————————————————————————————— ValLitNumeric\n      ⊢ᵥ  LitNumeric\n \n-   ——————————————————————————————————————————————————— ValExpLitText\n+   ——————————————————————————————————————————————————— ValLitText\n      ⊢ᵥ  LitText\n \n-   ——————————————————————————————————————————————————— ValExpLitDate\n+   ——————————————————————————————————————————————————— ValLitDate\n      ⊢ᵥ  LitDate\n \n-   ——————————————————————————————————————————————————— ValExpLitTimestamp\n+   ——————————————————————————————————————————————————— ValLitTimestamp\n      ⊢ᵥ  LitTimestamp\n \n-   ——————————————————————————————————————————————————— ValExpLitContractId\n+   ——————————————————————————————————————————————————— ValLitContractId\n      ⊢ᵥ  cid\n \n-   ——————————————————————————————————————————————————— ValExpUnit\n+   ——————————————————————————————————————————————————— ValUnit\n      ⊢ᵥ  ()\n \n-   ——————————————————————————————————————————————————— ValExpTrue\n+   ——————————————————————————————————————————————————— ValTrue\n      ⊢ᵥ  'True'\n \n-   ——————————————————————————————————————————————————— ValExpFalse\n+   ——————————————————————————————————————————————————— ValFalse\n      ⊢ᵥ  'False'\n \n-   ——————————————————————————————————————————————————— ValExpListNil\n+   ——————————————————————————————————————————————————— ValListNil\n      ⊢ᵥ  'Nil' @τ\n \n-     ⊢ᵥ  e₁     ⊢ᵥ  e₂\n-   ——————————————————————————————————————————————————— ValExpListCons\n+     ⊢ᵥ  eₕ     ⊢ᵥ  eₜ\n+   ——————————————————————————————————————————————————— ValListCons\n      ⊢ᵥ  'Cons' @τ eₕ eₜ\n \n-   ——————————————————————————————————————————————————— ValExpListNil\n+   ——————————————————————————————————————————————————— ValListNil\n      ⊢ᵥ  'None' @τ\n \n      ⊢ᵥ  e\n-   ——————————————————————————————————————————————————— ValExpListCons\n+   ——————————————————————————————————————————————————— ValListCons\n      ⊢ᵥ  'Some' @τ e\n \n-     ⊢ᵥ  e₁      …      ⊢ᵥ  eₙ\n-   ——————————————————————————————————————————————————— ValExpRecCon\n-     ⊢ᵥ  Mod:T @τ₁ … @τₙ { f₁ = e₁, …, fₙ = eₙ }\n-\n-     1 ≤ k ≤ m\n+     0 ≤ k < m\n      𝕋(F) = ∀ (α₁: ⋆) … (αₘ: ⋆). σ₁ → … → σₙ → σ\n-   ——————————————————————————————————————————————————— ValExpBuiltin₁\n+   ——————————————————————————————————————————————————— ValBuiltin₁\n      ⊢ᵥ  F @τ₁ … @τₖ\n \n-     1 ≤ k < n\n+     0 ≤ k < n\n      𝕋(F) = ∀ (α₁: ⋆) … (αₘ: ⋆). σ₁ → … → σₙ → σ\n      ⊢ᵥ  e₁      …      ⊢ᵥ  eₖ\n-   ——————————————————————————————————————————————————— ValExpBuiltin₂\n+   ——————————————————————————————————————————————————— ValBuiltin₂\n      ⊢ᵥ  F @τ₁ … @τₘ e₁ … eₖ\n "
  },
  {
    "id" : "a2a05a21-b9ec-4cb4-874a-e5df079b101e",
    "prId" : 2937,
    "comments" : [
      {
        "id" : "5eebe71f-74f7-4af3-86e7-423d082db662",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "There's an interesting mixture of ',`, and ) being used here.",
        "createdAt" : "2019-09-18T15:55:45Z",
        "updatedAt" : "2019-09-18T16:23:11Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aa79dfc0-b3e2-4075-9471-9a2bd37b5d23",
        "parentId" : "5eebe71f-74f7-4af3-86e7-423d082db662",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed. Tanks. ",
        "createdAt" : "2019-09-18T16:23:27Z",
        "updatedAt" : "2019-09-18T16:23:27Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5aa2c2df5cec26681a5e56a0e5635d1a63a2fd28",
    "line" : null,
    "diffHunk" : "@@ -233,8 +233,9 @@ Version: 1.dev\n \n   * **Add** Nat kind and Nat type.\n \n-  * **Replace** fixed scaled 'Decimal' type by parametrically scaled\n-    'Numeric' type.\n+  * **Add** parametrically scaled 'Numeric' type.\n+\n+  * **Drop** support for 'Decimal` type. Use `Numeric 10) instead."
  },
  {
    "id" : "05042bcc-bbec-4bdb-b70b-d37013251f09",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "69a1e409-ac44-45fa-8c00-a9bba8508bde",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n     ⊢ᵥ  'to_any_template' @Mod:T e\r\n```",
        "createdAt" : "2019-09-17T11:23:06Z",
        "updatedAt" : "2019-09-17T12:00:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : null,
    "diffHunk" : "@@ -1467,6 +1485,11 @@ need to be evaluated further. ::\n    ——————————————————————————————————————————————————— ValExpTupleCon\n      ⊢ᵥ  ⟨ f₁ = e₁, …, fₘ = eₘ ⟩\n \n+\n+     ⊢ᵥ e\n+   ——————————————————————————————————————————————————— ValExpToAnyTemplate\n+     ⊢ᵥ  'to_any_template' e"
  },
  {
    "id" : "e64c23ef-cded-49fc-b46b-5db906286f01",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "b8138ed5-0597-4bf8-94e7-29d1f85ba5c4",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      'from_any_template' @Mod:T e ‖ E₀  ⇓  'Some' @Mod:T v ‖ E₁\r\n```",
        "createdAt" : "2019-09-17T11:25:09Z",
        "updatedAt" : "2019-09-17T12:00:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : null,
    "diffHunk" : "@@ -1625,6 +1648,15 @@ exact output.\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n       'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n \n+      e₁ ‖ E₀  ⇓  Ok (to_any_template @Mod:T v₁) ‖ E₁\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyTemplateSucc\n+      'from_any_template' @Mod:T e₁ ‖ E₀  ⇓  'Some' @Mod:T v₁ ‖ E₁"
  },
  {
    "id" : "44952e68-c43e-426e-a100-53ff289fd511",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "901c972d-9719-4729-ab8d-084f2f5426ef",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      'from_any_template' @Mod₁:T₁ e ‖ E₀  ⇓  'None' ‖ E₁\r\n```",
        "createdAt" : "2019-09-17T11:25:44Z",
        "updatedAt" : "2019-09-17T12:00:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : null,
    "diffHunk" : "@@ -1625,6 +1648,15 @@ exact output.\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n       'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n \n+      e₁ ‖ E₀  ⇓  Ok (to_any_template @Mod:T v₁) ‖ E₁\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyTemplateSucc\n+      'from_any_template' @Mod:T e₁ ‖ E₀  ⇓  'Some' @Mod:T v₁ ‖ E₁\n+\n+      e₁ ‖ E₀  ⇓  Ok (to_any_template @Mod₂:T₂ v₂) ‖ E₁, Mod₁:T₁ ≠ Mod₂:T₂\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyTemplateFail\n+      'from_any_template' @Mod₁:T₁ e₁ ‖ E₀  ⇓  'None' ‖ E₁"
  },
  {
    "id" : "984992b2-43d9-4b94-9029-2475aaa5e2fb",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "fefcc40f-84ce-4191-9ffa-28f6dba69867",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      e ‖ E₀  ⇓  Ok ('to_any_template' @Mod₂:T₂ v) ‖ E₁     Mod₁:T₁ ≠ Mod₂:T₂\r\n```",
        "createdAt" : "2019-09-17T11:27:10Z",
        "updatedAt" : "2019-09-17T12:00:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : null,
    "diffHunk" : "@@ -1625,6 +1648,15 @@ exact output.\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n       'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n \n+      e₁ ‖ E₀  ⇓  Ok (to_any_template @Mod:T v₁) ‖ E₁\n+    —————————————————————————————————————————————————————————————————————— EvExpFromAnyTemplateSucc\n+      'from_any_template' @Mod:T e₁ ‖ E₀  ⇓  'Some' @Mod:T v₁ ‖ E₁\n+\n+      e₁ ‖ E₀  ⇓  Ok (to_any_template @Mod₂:T₂ v₂) ‖ E₁, Mod₁:T₁ ≠ Mod₂:T₂"
  },
  {
    "id" : "5b7b5a48-2f72-4043-96b5-ae80ad75869d",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "3b80afed-f592-4171-bf6b-185a5346b40a",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      e ‖ E₀  ⇓  Ok ('to_any_template' @Mod:T v) ‖ E₁\r\n```",
        "createdAt" : "2019-09-17T11:37:22Z",
        "updatedAt" : "2019-09-17T12:00:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d8f9475-742d-4c21-a840-45cc61f5a2c1",
        "parentId" : "3b80afed-f592-4171-bf6b-185a5346b40a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We also need the rule\r\n```\r\n      e ‖ E₀  ⇓  Ok v ‖ E₁    \r\n—————————————————————————————————————————————————————————————————————— EvExpToAnyTemplate\r\n      'to_any_template' @Mod:T e ‖ E₀  \r\n         ⇓ \r\n      Ok('to_any_template' @Mod:T v) ‖ E₁\r\n```",
        "createdAt" : "2019-09-17T11:39:45Z",
        "updatedAt" : "2019-09-17T12:00:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : null,
    "diffHunk" : "@@ -1625,6 +1648,15 @@ exact output.\n     —————————————————————————————————————————————————————————————————————— EvExpLet\n       'let' x : τ = e₁ 'in' e₂ ‖ E₀  ⇓  r ‖ E₂\n \n+      e₁ ‖ E₀  ⇓  Ok (to_any_template @Mod:T v₁) ‖ E₁"
  },
  {
    "id" : "982731e1-242e-4872-b6cd-f9b1b976ff1b",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "151ccfce-61d1-4a1b-8a09-25d791ef3be3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n     ⊢ᵥ  e\r\n```",
        "createdAt" : "2019-09-23T14:34:59Z",
        "updatedAt" : "2019-09-23T15:58:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : 58,
    "diffHunk" : "@@ -1467,6 +1485,11 @@ need to be evaluated further. ::\n    ——————————————————————————————————————————————————— ValExpTupleCon\n      ⊢ᵥ  ⟨ f₁ = e₁, …, fₘ = eₘ ⟩\n \n+\n+     ⊢ᵥ e"
  },
  {
    "id" : "e5294879-6ae3-42c1-8330-91a56bd3bf11",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "455053fc-5616-4c72-b4aa-cef76add3711",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suppose that's the value representation of a an `AnyTemplate`. Is that correct?",
        "createdAt" : "2019-09-23T14:35:27Z",
        "updatedAt" : "2019-09-23T15:58:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : 60,
    "diffHunk" : "@@ -1467,6 +1485,11 @@ need to be evaluated further. ::\n    ——————————————————————————————————————————————————— ValExpTupleCon\n      ⊢ᵥ  ⟨ f₁ = e₁, …, fₘ = eₘ ⟩\n \n+\n+     ⊢ᵥ e\n+   ——————————————————————————————————————————————————— ValExpToAnyTemplate\n+     ⊢ᵥ  'to_any_template' @Mod:T e"
  },
  {
    "id" : "4b4f9c1d-93a9-4117-9c7f-48fd15383b87",
    "prId" : 2919,
    "comments" : [
      {
        "id" : "c5557742-e29b-496d-9139-b9d1bbf228ee",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n* ``SHIFT_NUMERIC : ∀ (α₁, α₂: nat) . 'Int64' → 'Numeric' α₁ → 'Numeric' α₂``\r\n```",
        "createdAt" : "2019-09-16T14:51:10Z",
        "updatedAt" : "2019-09-17T07:35:32Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "032e942826df6b060c55e082f7197f48870f324c",
    "line" : null,
    "diffHunk" : "@@ -2148,6 +2148,19 @@ Numeric functions\n   `α`.  Throws an exception if the integer is not between `α-37` and\n   `α` inclusive.\n \n+\n+* ``CAST_NUMERIC : ∀ (α₁, α₂: nat) . 'Numeric' α₁ → 'Numeric' α₂``\n+\n+  Converts a decimal of scale `α₁` to a decimal scale `α₂` while\n+  keeping the value the same. Throws an exception in case of\n+  overflow or precision loss.\n+\n+* ``SHIFT_NUMERIC : ∀ (α₁, α₂: nat) . 'Int64' → 'Numeric' α → 'Numeric' α``"
  },
  {
    "id" : "7815392c-a266-4acb-99dc-f79d30ba3688",
    "prId" : 2766,
    "comments" : [
      {
        "id" : "8877fdd3-9735-4810-afbe-a6f60697f29e",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "🤦‍♂ what a great format",
        "createdAt" : "2019-09-05T12:09:17Z",
        "updatedAt" : "2019-09-05T12:09:18Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00fd4274b0214e6d6d6284320c5a3714cea9975b",
    "line" : 7,
    "diffHunk" : "@@ -492,7 +492,7 @@ Also note that package identifiers are typically `cryptographic hash\n \n \n Kinds, types, and expressions\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  },
  {
    "id" : "6344886d-3d5b-4d42-ad3e-fa446232b4be",
    "prId" : 2649,
    "comments" : [
      {
        "id" : "44590962-bf81-4609-bda1-cff5f6c2290b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  + ``ADD_DECIMAL`` message is translated to ``(ADD_NUMERIC @10)``\r\n```\r\nSame below.",
        "createdAt" : "2019-08-26T11:22:39Z",
        "updatedAt" : "2019-08-26T11:34:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4b9f86ae2ceecae15c4e5d70035e0989229041d7",
    "line" : null,
    "diffHunk" : "@@ -2900,13 +2890,32 @@ On the one hand, in case of DAML-LF 1.6 (or earlier) archive:\n   contains such field to a numeric literal of scale 10. The\n   deserialization process will reject any non-compliant program.\n \n-- ``PrimType`` message with a field ``numeric`` set are translated to\n+- ``PrimType`` message with a field ``decimal`` set are translated to\n   ``(Numeric 10)`` type when deserialized.\n \n-- Any ``BuiltinFunction`` message that corresponds to a numeric\n-  builtin (all those builtins that contains ``NUMERIC`` within their\n-  name) are silently applied to the ``nat`` type ``10`` when\n-  deserialized to expression.\n+- Decimal ``BuiltinFunction`` messages are translated as follows :\n+\n+  + ``ADD_DECIMAL`` message is translated to ``(ADD_NUMERIC @10)"
  },
  {
    "id" : "99da5bda-a259-4bb1-889f-e0edc94cefd8",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "1d4c0d43-b922-4220-8794-b80fd488f6d4",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "¯\\\\\\_(ツ)\\_/¯\r\n\r\n```suggestion\r\n          LitDate  ∈  \\d{4}-\\d{2}-\\d{2}               -- LitDate\r\n```",
        "createdAt" : "2019-07-29T18:30:06Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 51,
    "diffHunk" : "@@ -366,11 +369,14 @@ and other similar pitfalls. ::\n \n We can now define all the literals that a program can handle::\n \n+  Nat type literals:                                -- LitNatType  \n+       n ∈ \\d+                                         \n+  \n   64-bits integer literals:\n-        LitInt64  ∈ (-?)[0-9]+                       -- LitInt64:\n+        LitInt64  ∈ (-?)\\d+                         -- LitInt64:\n \n-  Decimal literals:\n-      LitDecimal  ∈  ([+-]?)\\d{1,28}(.[0-9]\\d{1-10})?  -- LitDecimal\n+  Numeric literals:\n+      LitNumeric  ∈  ([+-]?)([1-9]\\d+|0).\\d*        -- LitNumeric\n \n   Date literals:\n          LitDate  ∈  \\d{4}-\\d{4}-\\d{4}               -- LitDate"
  },
  {
    "id" : "036bd0f4-efa5-47d9-9f42-4af599e577aa",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "e095830e-7d77-47ab-be43-138f9b32baf6",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Several other cases below as well.\r\n\r\n```suggestion\r\n  Adds the two decimals.  The scale of the inputs and the output is\r\n```",
        "createdAt" : "2019-07-29T18:33:29Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 180,
    "diffHunk" : "@@ -2087,84 +2103,98 @@ Int64 functions\n * ``FROM_TEXT_INT64 : 'Text' → 'Optional' 'Int64'``\n \n   Given a string representation of an integer returns the integer wrapped\n-  in ``Some``. If the input does not match the regexp ``[+-]?[0-9]+`` or\n+  in ``Some``. If the input does not match the regexp ``[+-]?\\d+`` or\n   if the result of the conversion overflows, returns ``None``.\n \n   [*Available since version 1.5*]\n \n-Decimal functions\n+Numeric functions\n ~~~~~~~~~~~~~~~~~\n \n-* ``ADD_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``ADD_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α  → 'Numeric' α``\n \n-  Adds the two decimals. Throws an error in case of overflow.\n+  Adds the two decimals.  The scale of the inputs and the ouput is"
  },
  {
    "id" : "3a8b9db4-8fd8-4f6e-b8d8-57286b9ff633",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "70cc05e8-8b3b-4e83-9d3a-574cdded71d1",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n1. Renaming the fields and the enum values containing \"``decimal``\" in\r\n```",
        "createdAt" : "2019-07-29T18:36:15Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 397,
    "diffHunk" : "@@ -2823,6 +2856,84 @@ of ``package_id``, in which case the package ID will be that at the\n given index into ``Package.interned_package_ids``.\n See `Package reference`_.\n \n+Nat kind and Nat types\n+......................\n+\n+[*Available since version 1.dev*]\n+\n+The deserialization process will reject any DAML-LF 1.6 (or earlier)\n+that uses ``nat`` field in ``Kind`` or ``Type`` messages.\n+\n+Starting from DAML-LF 1.dev those messages are deserialized to ``nat``\n+kind and ``nat`` type respectively. The field ``nat`` of ``Type``\n+message must be a positive integer.\n+\n+Note that despite their is no concrete way to build Nat types in a\n+DAML-LF 1.6 (or earlier) program, those are implicitly generated when\n+reading as Numeric type and Numeric builtin as described in the next\n+section.\n+\n+Parametric scaled Decimals\n+..........................\n+\n+[*Available since version 1.dev*]\n+\n+DAML-LF 1.dev is the first version that supports parametric scaled\n+decimals. Prior versions have decimal number with a fix scale of 10\n+called Decimal. Backward compatibility with the current specification\n+is achieved by\n+\n+1. Renaming the fields and the emum values containing \"``decimal``\" in"
  },
  {
    "id" : "3ace8644-ee21-47e0-a556-802d258e8f8f",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "ee3783ea-fd60-4704-92c7-cbd38fa16057",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Is this a sufficient specification to include that the engine implementation of this primitive requires `α` to be reified? Consider\r\n\r\n```hs\r\nparseDecimal : Text -> Optional (Numeric n)\r\nparseDecimal = primitive @\"BEDecimalFromText\"\r\n\r\nparseDecimals : [Text] -> [Optional (Numeric n)]\r\nparseDecimals = fmap parseDecimal\r\n\r\nfives : [Optional (Numeric 3)]\r\nfives = parseDecimals [\"5\"]",
        "createdAt" : "2019-07-29T18:41:50Z",
        "updatedAt" : "2019-07-29T18:43:11Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 290,
    "diffHunk" : "@@ -2087,84 +2103,98 @@ Int64 functions\n * ``FROM_TEXT_INT64 : 'Text' → 'Optional' 'Int64'``\n \n   Given a string representation of an integer returns the integer wrapped\n-  in ``Some``. If the input does not match the regexp ``[+-]?[0-9]+`` or\n+  in ``Some``. If the input does not match the regexp ``[+-]?\\d+`` or\n   if the result of the conversion overflows, returns ``None``.\n \n   [*Available since version 1.5*]\n \n-Decimal functions\n+Numeric functions\n ~~~~~~~~~~~~~~~~~\n \n-* ``ADD_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``ADD_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α  → 'Numeric' α``\n \n-  Adds the two decimals. Throws an error in case of overflow.\n+  Adds the two decimals.  The scale of the inputs and the ouput is\n+  given by the type parameter `α`.  Throws an error in case of\n+  overflow.\n \n-* ``SUB_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``SUB_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Numeric' α``\n \n-  Subtracts the second decimal from the first one. Throws an error\n-  if overflow.\n+  Subtracts the second decimal from the first one.  The\n+  scale of the inputs and the ouput is given by the type parameter\n+  `α`.  Throws an error if overflow.\n \n-* ``MUL_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``MUL_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Numeric' α``\n \n   Multiplies the two decimals and rounds the result to the closest\n-  multiple of ``10⁻¹⁰`` using `banker's rounding convention\n-  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_.\n-  Throws an error in case of overflow.\n+  multiple of ``10⁻ᵅ`` using `banker's rounding convention\n+  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_.  The\n+  scale of the inputs and the ouput is given by the type parameter\n+  `α`. Throws an error in case of overflow.\n \n-* ``DIV_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``DIV_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Numeric' α``\n \n   Divides the first decimal by the second one and rounds the result to\n-  the closest multiple of ``10⁻¹⁰`` using `banker's rounding\n-  convention\n-  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_. Throws\n-  an error in case of overflow.\n+  the closest multiple of ``10⁻ᵅ`` using `banker's rounding convention\n+  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_ (where\n+  `n` is given as the type parameter).  The scale of the inputs and\n+  the ouput is given by the type parameter `α`.  Throws an error in\n+  case of overflow.\n \n-* ``ROUND_DECIMAL : 'Int64' → 'Decimal' → 'Decimal'``\n+* ``ROUND_NUMERIC : ∀ (α : nat) . 'Int64' → 'Numeric' α → 'Numeric' α``\n \n-  Round the decimal to the closest multiple of ``10ⁱ`` where ``i`` is\n-  integer argument.  Rounds the decimal argument to the closest\n-  multiple of ``10ⁱ`` where ``i`` is integer argument. In case the\n-  value to be rounded is exactly half-way between two multiples,\n-  rounds toward the even one, following the `banker's rounding\n-  convention\n-  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_. Throws\n-  an exception if the integer is not between -27 and 10 inclusive.\n+  Rounds the decimal to the closest multiple of ``10ⁱ`` where ``i`` is\n+  integer argument.  In case the value to be rounded is exactly\n+  half-way between two multiples, rounds toward the even one,\n+  following the `banker's rounding convention\n+  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_.  The\n+  scale of the inputs and the ouput is given by the type parameter\n+  `α`.  Throws an exception if the integer is not between `α-37` and\n+  `α` inclusive.\n \n-* ``LESS_EQ_DECIMAL : 'Decimal' → 'Decimal' → 'Bool'``\n+* ``LESS_EQ_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Bool'``\n \n   Returns ``'True'`` if the first decimal is less or equal than the\n-  second, ``'False'`` otherwise.\n+  second, ``'False'`` otherwise.  The scale of the inputs is given by\n+  the type parameter `α`.\n \n-* ``GREATER_EQ_DECIMAL : 'Decimal' → 'Decimal' → 'Bool'``\n+* ``GREATER_EQ_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Bool'``\n \n-  Returns ``'True'`` if the first decimal is greater or equal than\n-  the second, ``'False'`` otherwise.\n+  Returns ``'True'`` if the first decimal is greater or equal than the\n+  second, ``'False'`` otherwise. The scale of the inputs is given by\n+  the type parameter `α`.\n \n-* ``LESS_DECIMAL : 'Decimal' → 'Decimal' → 'Bool'``\n+* ``LESS_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Bool'``\n \n   Returns ``'True'`` if the first decimal is strictly less than the\n-  second, ``'False'`` otherwise.\n+  second, ``'False'`` otherwise.  The scale of the inputs is given by\n+  the type parameter `α`.\n \n-* ``GREATER_DECIMAL : 'Decimal' → 'Decimal' → 'Bool'``\n \n-  Returns ``'True'`` if the first decimal is strictly greater than\n-  the second, ``'False'`` otherwise.\n+* ``GREATER_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Bool'``\n+\n+  Returns ``'True'`` if the first decimal is strictly greater than the\n+  second, ``'False'`` otherwise.  The scale of the inputs is given by\n+  the type parameter `α`.\n \n-* ``EQUAL_DECIMAL : 'Decimal' → 'Decimal' → 'Bool'``\n+* ``EQUAL_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Bool'``\n \n   Returns ``'True'`` if the first decimal is equal to the second,\n-  ``'False'`` otherwise.\n+  ``'False'`` otherwise.  The scale of the inputs is given by the type\n+  parameter `α`.\n \n-* ``TO_TEXT_DECIMAL : 'Decimal' → 'Text'``\n+* ``TO_TEXT_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Text'``\n \n-  Returns the decimal string representation of the decimal.\n+  Returns the decimal string representation of the decimal.  The scale\n+  of the input is given by the type parameter `α`.\n \n-* ``FROM_TEXT_DECIMAL : 'Text' → 'Optional' 'DECIMAL'``\n+* ``FROM_TEXT_NUMERIC : ∀ (α : nat) .'Text' → 'Optional' 'Numeric' α``"
  },
  {
    "id" : "713c7dea-6402-4284-b877-167e2d7a149b",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "d5ed4a1e-35b5-4c52-a412-4c216fccc690",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is this actually true? Isn't it rounding to `i` digits after the dot?",
        "createdAt" : "2019-07-30T11:33:59Z",
        "updatedAt" : "2019-07-30T11:52:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b38ff014-3a46-4db1-842c-fd72ab82e535",
        "parentId" : "d5ed4a1e-35b5-4c52-a412-4c216fccc690",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "you'r right it is the the closet multiple of ``10⁻ⁱ`` !",
        "createdAt" : "2019-07-30T12:13:04Z",
        "updatedAt" : "2019-07-30T12:13:05Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 230,
    "diffHunk" : "@@ -2087,84 +2103,98 @@ Int64 functions\n * ``FROM_TEXT_INT64 : 'Text' → 'Optional' 'Int64'``\n \n   Given a string representation of an integer returns the integer wrapped\n-  in ``Some``. If the input does not match the regexp ``[+-]?[0-9]+`` or\n+  in ``Some``. If the input does not match the regexp ``[+-]?\\d+`` or\n   if the result of the conversion overflows, returns ``None``.\n \n   [*Available since version 1.5*]\n \n-Decimal functions\n+Numeric functions\n ~~~~~~~~~~~~~~~~~\n \n-* ``ADD_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``ADD_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α  → 'Numeric' α``\n \n-  Adds the two decimals. Throws an error in case of overflow.\n+  Adds the two decimals.  The scale of the inputs and the ouput is\n+  given by the type parameter `α`.  Throws an error in case of\n+  overflow.\n \n-* ``SUB_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``SUB_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Numeric' α``\n \n-  Subtracts the second decimal from the first one. Throws an error\n-  if overflow.\n+  Subtracts the second decimal from the first one.  The\n+  scale of the inputs and the ouput is given by the type parameter\n+  `α`.  Throws an error if overflow.\n \n-* ``MUL_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``MUL_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Numeric' α``\n \n   Multiplies the two decimals and rounds the result to the closest\n-  multiple of ``10⁻¹⁰`` using `banker's rounding convention\n-  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_.\n-  Throws an error in case of overflow.\n+  multiple of ``10⁻ᵅ`` using `banker's rounding convention\n+  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_.  The\n+  scale of the inputs and the ouput is given by the type parameter\n+  `α`. Throws an error in case of overflow.\n \n-* ``DIV_DECIMAL : 'Decimal' → 'Decimal' → 'Decimal'``\n+* ``DIV_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α → 'Numeric' α``\n \n   Divides the first decimal by the second one and rounds the result to\n-  the closest multiple of ``10⁻¹⁰`` using `banker's rounding\n-  convention\n-  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_. Throws\n-  an error in case of overflow.\n+  the closest multiple of ``10⁻ᵅ`` using `banker's rounding convention\n+  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_ (where\n+  `n` is given as the type parameter).  The scale of the inputs and\n+  the ouput is given by the type parameter `α`.  Throws an error in\n+  case of overflow.\n \n-* ``ROUND_DECIMAL : 'Int64' → 'Decimal' → 'Decimal'``\n+* ``ROUND_NUMERIC : ∀ (α : nat) . 'Int64' → 'Numeric' α → 'Numeric' α``\n \n-  Round the decimal to the closest multiple of ``10ⁱ`` where ``i`` is\n-  integer argument.  Rounds the decimal argument to the closest\n-  multiple of ``10ⁱ`` where ``i`` is integer argument. In case the\n-  value to be rounded is exactly half-way between two multiples,\n-  rounds toward the even one, following the `banker's rounding\n-  convention\n-  <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>`_. Throws\n-  an exception if the integer is not between -27 and 10 inclusive.\n+  Rounds the decimal to the closest multiple of ``10ⁱ`` where ``i`` is"
  },
  {
    "id" : "9562ae69-5e7c-4e44-b2cd-7e6666964e03",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "3b05a408-2d4e-42fa-8d64-173d43366bd8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we actually enforce these bounds anywhere?",
        "createdAt" : "2019-07-30T11:40:41Z",
        "updatedAt" : "2019-07-30T11:52:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f06bd5e3-427e-4f5f-a63e-6bd0a63a9da5",
        "parentId" : "3b05a408-2d4e-42fa-8d64-173d43366bd8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We will check during deserialization.\r\nSee https://github.com/digital-asset/daml/pull/2298/files/33e6b1950b738efc874e833e075c7c7044405865#diff-55b02b80bc6355ad225115dd9046ce2eR302\r\n\r\nWe could relax this in the future if needed. ",
        "createdAt" : "2019-07-30T12:10:14Z",
        "updatedAt" : "2019-07-30T12:10:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 56,
    "diffHunk" : "@@ -386,12 +392,16 @@ We can now define all the literals that a program can handle::\n \n The literals represent actual DAML-LF values:\n \n+* A ``LitNatType`` represents a natural number between ``0`` and"
  },
  {
    "id" : "21116ce6-c1f2-4d56-880a-6fa2cf8fc79c",
    "prId" : 1937,
    "comments" : [
      {
        "id" : "e3fb6a77-2686-4335-b1ba-e500858d1005",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is that actually useful information?",
        "createdAt" : "2019-06-28T13:31:29Z",
        "updatedAt" : "2019-07-12T17:22:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46628393-09bf-45db-aa67-6adacca41a41",
        "parentId" : "e3fb6a77-2686-4335-b1ba-e500858d1005",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I want the placeholder to be there for future update of `1.dev`. \r\n\r\nI added the following description, I found in the git history:\r\n \r\n> * Description:\r\n>\r\n>    * **Change** nothing yet.\r\n\r\n",
        "createdAt" : "2019-07-01T10:01:56Z",
        "updatedAt" : "2019-07-12T17:22:08Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "83f5bd24-4cec-4904-9b11-8f7fd27de98b",
        "parentId" : "e3fb6a77-2686-4335-b1ba-e500858d1005",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I was not specific enough. Sorry. I'm wondering if the last amendment date is useful information?",
        "createdAt" : "2019-07-01T10:13:07Z",
        "updatedAt" : "2019-07-12T17:22:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ab51e280-6f7e-485d-a2f3-5df9fe890306",
        "parentId" : "e3fb6a77-2686-4335-b1ba-e500858d1005",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I dropped the line.",
        "createdAt" : "2019-07-01T15:02:37Z",
        "updatedAt" : "2019-07-12T17:22:08Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7a9443ebd3345db86ae245d80d9ee2d9a5d9ab47",
    "line" : null,
    "diffHunk" : "@@ -232,6 +228,13 @@ Version: 1.dev\n \n   * **Add** intern package IDs in external package references.\n \n+Version: 1.dev\n+..............\n+\n+  * Last amendment date:"
  },
  {
    "id" : "f4363947-526e-4348-9606-a65357293e0c",
    "prId" : 1408,
    "comments" : [
      {
        "id" : "219a5b34-bdd4-4dcf-8d73-6eca9dcedb85",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "what's the `(z)`?",
        "createdAt" : "2019-05-27T14:35:32Z",
        "updatedAt" : "2019-05-27T20:35:10Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4cba9b55-3b21-4bca-b8e3-7d23a25cca7b",
        "parentId" : "219a5b34-bdd4-4dcf-8d73-6eca9dcedb85",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It's for the contract id of the contract the choice is exercised on, called `self` in the surface language. It's the same in the rule above.",
        "createdAt" : "2019-05-27T14:40:21Z",
        "updatedAt" : "2019-05-27T20:35:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e31c10751036e29879110fc543da4d1ea01cac35",
    "line" : 116,
    "diffHunk" : "@@ -1822,6 +1851,17 @@ as described by the ledger model::\n        ⇓ᵤ\n      Err \"Exercise actors do not match\"  ‖ E₁ ; (st; keys)\n \n+     'tpl' (x : T)\n+         ↦ { 'choices' { …, 'choice' ChKind Ch (y : τ) (z) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod"
  },
  {
    "id" : "a9cb11ce-7194-41b9-8a8b-b27219434132",
    "prId" : 1408,
    "comments" : [
      {
        "id" : "010afc3a-d9b5-45dd-8912-51efd05fc76a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@remyhaemmerle-da It should be \"loss of precision\".",
        "createdAt" : "2019-05-27T15:39:24Z",
        "updatedAt" : "2019-05-27T20:35:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e31c10751036e29879110fc543da4d1ea01cac35",
    "line" : null,
    "diffHunk" : "@@ -2061,6 +2068,14 @@ Decimal functions\n \n   Returns the decimal string representation of the decimal.\n \n+* ``FROM_TEXT_DECIMAL : 'Text' → 'Optional' 'DECIMAL'``\n+\n+  Given a string representation of a decimal returns the decimal\n+  wrapped in ``Some``. If the input does not match the regexp \n+  ``[+-]?[0-9]+(\\.[0-9]+)?`` or if the result of the conversion\n+  cannot be mapped into a decimal without lost of precision, returns None."
  },
  {
    "id" : "68bb4196-3c12-45e1-a8cb-2fb7d6f37a17",
    "prId" : 1407,
    "comments" : [
      {
        "id" : "68bec317-7a27-494d-95dc-5eed00b8c316",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "The one before was right, wasn't it? We had those kind of CKs for exactly one version, I think.\r\n\r\nI guess they're both fine, but I'm curious on why you changed it.",
        "createdAt" : "2019-05-27T14:29:00Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "929fa02f-1283-4a31-b04a-8983741e434b",
        "parentId" : "68bec317-7a27-494d-95dc-5eed00b8c316",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I changed it because ``[DAML-LF 1.3]`` does not respect the convention describe in the intro.\r\n\r\n> [...] In addition, we will\r\n> mark lines within inference rules with annotations of the form\r\n> ``[DAML-LF < x.y]`` and ``[DAML-LF ≥ x.y]`` to make the respective\r\n> line conditional upon the DAML-LF version.```",
        "createdAt" : "2019-05-27T15:07:22Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ce880b30-a4af-4acf-a322-20741bfac22c",
        "parentId" : "68bec317-7a27-494d-95dc-5eed00b8c316",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "I see, that's fair.",
        "createdAt" : "2019-05-27T15:13:55Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea16d985a1397393fa2f0e0f0f3c58f1b23bb4ab",
    "line" : null,
    "diffHunk" : "@@ -1109,7 +1109,7 @@ for the ``DefTemplate`` rule). ::\n    Γ  ⊢  'no_key'\n \n     ⊢ₛ τ      Γ  ⊢  eₖ  :  τ\n-    ⊢ₖ eₖ                                                               [DAML-LF 1.3]\n+    ⊢ₖ eₖ                                                               [DAML-LF < 1.4]"
  },
  {
    "id" : "52cc146e-e378-4fde-b66c-0ee2928374b6",
    "prId" : 709,
    "comments" : [
      {
        "id" : "0f6c7556-f100-4d55-ac28-3b4af6add453",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Below, we list the full versions of DAML-LF 1.x that a DAML-LF engine compliant with the present specification must handle...",
        "createdAt" : "2019-05-01T15:15:41Z",
        "updatedAt" : "2019-05-02T20:20:27Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5d8dfec8-43cf-42df-a8d6-ad6bb85ad63e",
        "parentId" : "0f6c7556-f100-4d55-ac28-3b4af6add453",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "0074aecea2",
        "createdAt" : "2019-05-01T18:33:14Z",
        "updatedAt" : "2019-05-02T20:20:27Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ac279d9f4f667d6203c27b5f0318762a261142ed",
    "line" : null,
    "diffHunk" : "@@ -79,12 +79,13 @@ mark lines within inference rules with annotations of the form\n ``[DAML-LF < x.y]`` and ``[DAML-LF ≥ x.y]`` to make the respective\n line conditional upon the DAML-LF version.\n \n-Below, we list the versions of DAML-LF that a DAML-LF engine\n-compliant with the present specification must handle.  The list comes\n-with a brief description of the changes, and some links to help\n-unfamiliar readers learn about the features involved in the change.\n-One can refer also to the `Serialization` section which is\n-particularly concerned about versioning and backward compatibility.\n+Below, we list the versions of DAML-LF major version 1 that a DAML-LF"
  },
  {
    "id" : "fb456e90-d71e-494e-8611-0599d801647d",
    "prId" : 709,
    "comments" : [
      {
        "id" : "857b056a-ebd0-43b1-976a-93bc6981f044",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Maybe we can add a comment on what is `1.dev` version. ",
        "createdAt" : "2019-05-02T06:58:04Z",
        "updatedAt" : "2019-05-02T20:20:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "574963af-03b6-4b0a-8dfb-c52dac8e46b7",
        "parentId" : "857b056a-ebd0-43b1-976a-93bc6981f044",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "10dd4a9fd10654ec8e9fc606ac9788c79eeba146",
        "createdAt" : "2019-05-02T16:26:48Z",
        "updatedAt" : "2019-05-02T20:20:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ac279d9f4f667d6203c27b5f0318762a261142ed",
    "line" : 33,
    "diffHunk" : "@@ -79,12 +79,13 @@ mark lines within inference rules with annotations of the form\n ``[DAML-LF < x.y]`` and ``[DAML-LF ≥ x.y]`` to make the respective\n line conditional upon the DAML-LF version.\n \n-Below, we list the versions of DAML-LF that a DAML-LF engine\n-compliant with the present specification must handle.  The list comes\n-with a brief description of the changes, and some links to help\n-unfamiliar readers learn about the features involved in the change.\n-One can refer also to the `Serialization` section which is\n-particularly concerned about versioning and backward compatibility.\n+Below, we list the versions of DAML-LF 1.x that a DAML-LF\n+engine compliant with the present specification must handle [except for\n+1.dev], in ascending order.  The list comes with a brief description of\n+the changes, and some links to help unfamiliar readers learn about the\n+features involved in the change.  One can refer also to the\n+`Serialization` section which is particularly concerned about versioning\n+and backward compatibility.\n "
  },
  {
    "id" : "470750f6-c468-484f-b9dc-5bb2e9359824",
    "prId" : 606,
    "comments" : [
      {
        "id" : "43d7f4c3-2039-45aa-a408-9d1ff3a97798",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n      LitDecimal  ∈  ([+-]?)\\d{1,28}(.[0-9]\\d{1-10})?  -- LitDecimal\r\n```",
        "createdAt" : "2019-04-18T16:16:35Z",
        "updatedAt" : "2019-04-24T23:45:20Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "77660260-3821-4a5a-b4ce-060fd515ffc5",
        "parentId" : "43d7f4c3-2039-45aa-a408-9d1ff3a97798",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thx",
        "createdAt" : "2019-04-23T07:29:13Z",
        "updatedAt" : "2019-04-24T23:45:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b6368f541c8ac07e1b0e9babb831481db8ecd406",
    "line" : null,
    "diffHunk" : "@@ -285,7 +285,7 @@ We can now define all the literals that a program can handle::\n         LitInt64  ∈ (-?)[0-9]+                      -- LitInt64:\n \n   Decimal literals:\n-      LitDecimal  ∈  (-?)[0-9]+.[0-9]*              -- LitDecimal\n+      LitDecimal  ∈  ([-/+]?)\\d{1,28}(.[0-9]\\d{1-10})?  -- LitDecimal"
  }
]