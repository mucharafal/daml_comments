[
  {
    "id" : "7bb29548-351c-430b-8345-b9b405849216",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "c60ca432-b8fd-4bfc-a271-f157580e7996",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Unrelated to this PR, what do you think about renaming `exercise` into `exercise_with_actors` and `exercise_without_actors` into `exercise`? The only name existing in the protobuf is `exercise` and the with/without part is controlled via the optionality of the `actors` field. ",
        "createdAt" : "2020-10-15T16:47:24Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed7d5e43-067e-412d-b2a6-cf9faee91787",
        "parentId" : "c60ca432-b8fd-4bfc-a271-f157580e7996",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "As 'exercise' is supported only by LF < 1.5, we should just kill `exercise` and rename `exercise_without_actors` into exercise. ",
        "createdAt" : "2020-10-15T17:48:04Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "172106c3-5e70-4cd6-9b39-aa60b4dded96",
        "parentId" : "c60ca432-b8fd-4bfc-a271-f157580e7996",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm fine with that too.",
        "createdAt" : "2020-10-16T07:44:47Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +702,706 @@       |  'fetch' @Mod:T e                          -- UpdateFetch\n       |  'exercise' @Mod:T Ch e₁ e₂ e₃             -- UpdateExercise\n       |  'exercise_without_actors' @Mod:T Ch e₁ e₂ -- UpdateExerciseWithoutActors\n       |  'exercise_by_key' @Mod:T Ch e₁ e₂         -- UpdateExerciseByKey\n       |  'get_time'                                -- UpdateGetTime"
  },
  {
    "id" : "34032bb6-875d-4613-bdbe-4bf1b0a7a0e9",
    "prId" : 7702,
    "comments" : [
      {
        "id" : "3b9f5a1e-f8fd-4f74-8648-da566023a822",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "This is a nice approach, but the `ur` includes the ledger transaction, which means we aren't distinguishing between \"exercise\" and \"exercise by key\". Maybe the semantics needs to be reformulated anyway to track the transaction structure more closely, so I'm ok leaving it like this for now.",
        "createdAt" : "2020-10-16T12:09:51Z",
        "updatedAt" : "2020-10-19T07:48:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0c02643a-28e2-4c9d-bd42-7dc3ca2bcc15",
        "parentId" : "3b9f5a1e-f8fd-4f74-8648-da566023a822",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right, this does not make the distinction between \"exercise\" and \"exercise by key\". But currently the implementation does not neither, so it is probably fine to let the semantics like that until we introduce a new transaction format. ",
        "createdAt" : "2020-10-19T07:48:47Z",
        "updatedAt" : "2020-10-19T07:54:26Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "93a469d2-bdd9-4d74-ace3-e3341dd10af3",
        "parentId" : "3b9f5a1e-f8fd-4f74-8648-da566023a822",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's leave it as is for now and fix it when we've introduced the new transaction format.",
        "createdAt" : "2020-10-19T08:17:11Z",
        "updatedAt" : "2020-10-19T08:17:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6604ac53017e1398a66910a2038fbf56eb93d36c",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +2930,2934 @@     'exercise_without_actor' Mod:T.Ch cid v₁ ‖ (st'; keys')  ⇓ᵤ  ur\n   —————————————————————————————————————————————————————————————————————— EvUpdExercByKeyExercise\n     'exercise_by_key' Mod:T.Ch vₖ v₁ ‖ (st; keys)  ⇓ᵤ  ur\n\n     LitTimestamp is the current ledger time"
  },
  {
    "id" : "6acfe270-cf84-4b33-8e12-40043cab7cba",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "09003fed-8bbe-4c50-89a1-0ebfe486a99f",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n",
        "createdAt" : "2020-10-21T07:30:21Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4167,4171 @@................\n\n  FIXME: https://github.com/digital-asset/daml/issues/7709\n\n"
  },
  {
    "id" : "c4973266-a450-454e-9299-8799d4b73e23",
    "prId" : 7323,
    "comments" : [
      {
        "id" : "ce03b7b8-9190-4ccb-832b-63db79f85867",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Nice catch!",
        "createdAt" : "2020-09-04T11:55:24Z",
        "updatedAt" : "2020-09-04T13:26:39Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8676a95a356729b3e2ead7d36e9850236bcc1940",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1151,1155 @@      Γ  ⊢  Mod:T:Eᵢ  :  Mod:T\n\n      ⟨ f₁: τ₁, …, fₘ: τₘ ⟩ ↠ σ\n      Γ  ⊢  σ  :  ⋆\n      Γ  ⊢  e₁  :  τ₁      ⋯      Γ  ⊢  eₘ  :  τₘ"
  },
  {
    "id" : "e5d390df-da99-426f-97f1-c53e30abf005",
    "prId" : 6955,
    "comments" : [
      {
        "id" : "6389a90c-db05-410d-8d81-5983ce560742",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Shouldn't that refer to `fetch` rather than `exercise`?\r\n```suggestion\r\n     Err \"Fetch of unknown contract\"\r\n```",
        "createdAt" : "2020-08-03T10:49:47Z",
        "updatedAt" : "2020-08-03T11:14:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f3517f4-c53b-4a3a-a846-6c2566c9e08b",
        "parentId" : "6389a90c-db05-410d-8d81-5983ce560742",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "No, it's not a mistake. Fetch errors look like exercise errors (see the other fetch error case). I don't know if this is desirable, but it's closer to the implementation. My guess is that we'll have to redo all the errors at some point (looking at the future w/ exception handling) and we can fix this then.",
        "createdAt" : "2020-08-03T11:11:48Z",
        "updatedAt" : "2020-08-03T11:14:29Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9aac3c3394fb6245884f63524ea6db94d04e8e05",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2802,2806 @@     'fetch' @Mod:T cid ‖ (st; keys)\n       ⇓ᵤ\n     Err \"Exercise on unknown contract\"\n\n     'tpl' (x : T) ↦ …  ∈  〚Ξ〛Mod"
  },
  {
    "id" : "49ebe548-6e36-4b83-bb3b-fbe7161ec43f",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "d1c0afb1-12b4-4900-9ddd-675fc37e836b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe use more descriptive names than `v_1` and `v_2` here?, e.g., `actors` or `acts` for `v_1`.",
        "createdAt" : "2020-07-27T10:38:17Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b25fb67b-2246-4db7-afa1-ada0293a0f9a",
        "parentId" : "d1c0afb1-12b4-4900-9ddd-675fc37e836b",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I like the idea but don't want to break the convention of using `v` for values, and `vₐ` is already taken here (see EvUpdExercConsum)... ",
        "createdAt" : "2020-07-27T12:19:30Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f89f60c8-b52c-4f08-b346-4b5841f66717",
        "parentId" : "d1c0afb1-12b4-4900-9ddd-675fc37e836b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The pattern we use here of giving a grammar for `v` and then using indexed versions of `v` is very customary. Unfortunately, we can't have more complex indices like \"actor\" here unlike in LaTeX.",
        "createdAt" : "2020-07-27T13:35:59Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2694,2698 @@     cid ∈ dom(st₀)\n     st₀(cid) = (Mod:T, vₜ, 'active')\n     eₚ[x ↦ vₜ, z ↦ v₂]  ⇓  Ok vₚ\n     v₁ ≠ₛ vₚ\n   —————————————————————————————————————————————————————————————————————— EvUpdExercBadActors"
  },
  {
    "id" : "924c7808-77f0-4664-aa55-e80e5cdc6f0b",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "d53315cd-8e09-4623-9f27-e7c2cf93c765",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n   —————————————————————————————————————————————————————————————————————— EvUpdExercChcBodyExec\r\n```",
        "createdAt" : "2020-07-27T10:45:06Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b28a0b3e-c055-4cd0-bf97-b5278d83fd90",
        "parentId" : "d53315cd-8e09-4623-9f27-e7c2cf93c765",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "The other rule name change are good -- I went ahead and used them (putting the `Err` at the end to make it more obvious that these are error cases).\r\n\r\nThis particular suggestion is less good, because the name `EvUpdExercConsumErr` doesn't have any ambiguity, and it draws parallels to the similar but different error that can arise out of a non-consuming choice. I'm going to leave this one as it is.",
        "createdAt" : "2020-07-27T12:27:55Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +2723,2727 @@     st₁ = st₀[cid ↦ (Mod:T, vₜ, 'inactive')]\n     uₐ ‖ (st₁, keys₁)  ⇓ᵤ  Err t\n   —————————————————————————————————————————————————————————————————————— EvUpdExercConsumErr\n     'exercise' Mod:T.Ch cid v₁ v₂ ‖ (st₀, keys₀)\n       ⇓ᵤ"
  },
  {
    "id" : "777d522d-b747-41f0-bd5f-f0bc4b057dc4",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "c70df471-d231-4135-a719-0f4ac9e7bada",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n     Err \"Fetch of inactive contract\"\r\n```",
        "createdAt" : "2020-07-27T11:28:55Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c3fb54a2-46eb-4773-b788-620cd4b1bd74",
        "parentId" : "c70df471-d231-4135-a719-0f4ac9e7bada",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I disagree on the basis that the current error messages that you get don't distinguish between archives/fetches/exercises on inactive contracts, saying they are all \"exercise on inactive contract\"-type errors.",
        "createdAt" : "2020-07-27T12:07:03Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8b4368de-12f3-476a-a612-9ad26cc20232",
        "parentId" : "c70df471-d231-4135-a719-0f4ac9e7bada",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense :+1:",
        "createdAt" : "2020-07-27T12:12:20Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +2792,2796 @@     'fetch' @Mod:T cid ‖ (st; keys)\n       ⇓ᵤ\n     Err \"Exercise on inactive contract\"\n\n     'tpl' (x : T) ↦ …  ∈  〚Ξ〛Mod"
  },
  {
    "id" : "69c9a2ac-d186-47ec-9ee4-8cdbc5cb870a",
    "prId" : 6867,
    "comments" : [
      {
        "id" : "45c0a75f-ea2c-4e2c-8812-b5891e1289e5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n     Err \"Fetch of inactive contract\"\r\n```",
        "createdAt" : "2020-07-27T11:33:50Z",
        "updatedAt" : "2020-07-27T14:36:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0c743f6386697c27bf1f9dad3dc5bd2def557e",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +2824,2828 @@     'fetch_by_key' @Mod:T vₖ ‖ (st; keys)\n        ⇓ᵤ\n     Err \"Exercise on inactive contract\"\n\n     'tpl' (x : T) ↦ { …, 'key' @σ eₖ eₘ }  ∈  〚Ξ〛Mod"
  },
  {
    "id" : "7604ab69-73d6-4561-8461-e95645108501",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "1e00e25d-e843-4686-9102-d890cd60f9bb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Isn't this is a breaking change because we removed the (uninhabited) kind `k -> nat`? This would be a problem since DAML Engine needs to be able to load DARs which contain type abstractions of this kind.\r\nI would suggest we keep the definition of kinds as is and add the notion of \"erasable kinds\" as defined above on top of that. Then one can prove that each kind `k` satisfies one of the following three:\r\n1. `k` is erasable.\r\n2. There are `k_1, ..., k_n` with `n >= 1` and `k = k_1 -> k2 -> ... -> k_n -> nat` and hence `k` is uninhabited and can hence be erased at runtime as well.\r\n3. `k = nat`. This is the case where we need to demote from the type to the value level.",
        "createdAt" : "2020-07-08T16:20:20Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fdc2d1a9-133a-41a5-ae2a-4969e5713fde",
        "parentId" : "1e00e25d-e843-4686-9102-d890cd60f9bb",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "The problem is that the speedy compiler currently blows up if you try to apply `f` when it has kind `* -> nat`. You can introduce such variables with a forall or type lambda. This makes it an illegal kind in some ways but not others. It sounds like you want to do something else in these cases?\r\n\r\nFor example, the term `/\\(f : * -> nat). ADD_NUMERIC @(f Unit)` is perfectly valid under current LF spec, but speedy will balk before it even tries to run it. \r\n\r\nI feel like outlawing this kind construction outright is better than giving it any sort of semantics in Speedy.",
        "createdAt" : "2020-07-08T16:57:35Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "23867691-37c5-487c-9047-5edc1408676d",
        "parentId" : "1e00e25d-e843-4686-9102-d890cd60f9bb",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@sofiafaro-da I understand that the change to the spec you suggested would bring it in line with the implementation. The implementation would not stop accepting DARs it has accepted before. Is that correct? If so, then I'm on board.",
        "createdAt" : "2020-07-09T07:35:02Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "67f4ae43-d048-4ff4-b329-b637a6fdabf1",
        "parentId" : "1e00e25d-e843-4686-9102-d890cd60f9bb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@sofiafaro-da The implementation will not blow up, because as stated  by @hurryabit the kind `⋆ →nat` is uninhabited. Speedy compiler will handle `/\\(f : * -> nat). ADD_NUMERIC @(f Unit)` (producing some garbage code), \r\nbut one cannot run this latter, because there exists no `f` of kind  `⋆ →nat`\r\n\r\nI add 3 tests in #6618 (could you merge it with the current PR):\r\n* One checks that `⋆ →nat` is a valid kind\r\n* One checks that `⋆ →nat` is inhabited. \r\n* `/\\(f : * -> nat). ADD_NUMERIC @(f Unit)` can be evaluated without blowing up.",
        "createdAt" : "2020-07-09T08:20:05Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4cf74a0a-bfa2-4828-994d-656c4ae75741",
        "parentId" : "1e00e25d-e843-4686-9102-d890cd60f9bb",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "We discussed this extensively and came up with a counterexample, where keeping `* -> nat` causes problems in the engine (causes a runtime type error):\r\n\r\n```\r\nlet g: forall(n:nat). Int64 = /\\(n: nat). 1\r\nin /\\(f: * -> nat). ADD_INT64 10 (g @(f Unit))\r\n```\r\n\r\nBecause of the interaction between the erasable kind `* -> nat` and non-erasable kind `nat`. We definitely want to avoid this by outlawing `* -> nat` as I proposed here.",
        "createdAt" : "2020-07-20T15:29:00Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +600,604 @@    ek\n      ::= ⋆                                         -- KindStar\n       | k → ek                                     -- KindArrow\n\n  Module references"
  },
  {
    "id" : "7b742bb1-a481-4686-bdbf-2f4e2318494f",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "ac3680e9-355d-4ca0-a1c4-afdd412b663a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In the long run we probably need to distinguish different error classes, such as errors raised via `error`, arithmetic errors, pattern match failures, etc. I would suggest making that the subject of a separate PR though.",
        "createdAt" : "2020-07-08T16:30:36Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8829dc3a-3047-4998-b3a9-e548618a5dec",
        "parentId" : "ac3680e9-355d-4ca0-a1c4-afdd412b663a",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I think that can be done easily enough by giving `t` some structure, without really changing most of the semantics.",
        "createdAt" : "2020-07-08T17:01:31Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +2060,2064 @@  Evaluation result\n    r ::= Ok v                                      -- ResOk\n       |  Err t                                     -- ResErr\n\n                           ┌──────────┐"
  },
  {
    "id" : "50446a1a-0938-4217-ab13-02a86807f945",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "7fcc0afa-7e55-4549-90a9-01f3caed2266",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we make it clearer that `e_2, ..., e_{i-1}` need to succeed as well? The same occurs a few more times below.",
        "createdAt" : "2020-07-08T16:32:56Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d418c861-2b80-4e30-9922-fbf7f4273dd0",
        "parentId" : "7fcc0afa-7e55-4549-90a9-01f3caed2266",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Would it be clear enough as:\r\n\r\n```\r\n      e₁  ⇓  Ok v₁\r\n        ⋮\r\n      eᵢ₋₁  ⇓  Ok ᵢ₋₁\r\n      eᵢ  ⇓  Err t\r\n```",
        "createdAt" : "2020-07-08T16:45:45Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ffa453cd-8bc4-40e9-b364-30a58336eb98",
        "parentId" : "7fcc0afa-7e55-4549-90a9-01f3caed2266",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yes, that should make it crystal clear. (There's a `v` missing in the penultimate line.)",
        "createdAt" : "2020-07-08T16:54:54Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 316,
    "diffHunk" : "@@ -1,1 +2178,2182 @@        ⋮\n      eᵢ₋₁  ⇓  Ok vᵢ₋₁\n      eᵢ  ⇓  Err t\n    —————————————————————————————————————————————————————————————————————— EvExpBuiltinErr\n      F @τ₁ … @τₘ e₁ … eₙ  ⇓  Err t"
  },
  {
    "id" : "b533e14b-bbc0-4a5f-be58-841252a131d6",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "86a64dbb-9460-428b-947e-9d0b61ec6472",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Our syntax for record projections looks really weird. 🤔 ",
        "createdAt" : "2020-07-08T16:34:25Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "44dc77c9-b7cf-4110-8eea-d1bd921921c8",
        "parentId" : "86a64dbb-9460-428b-947e-9d0b61ec6472",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@hurryabit please propose a syntax that we can easily add to the daml-lf parser. ",
        "createdAt" : "2020-07-09T08:22:34Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 364,
    "diffHunk" : "@@ -1,1 +2213,2217 @@      e  ⇓  Err t\n    —————————————————————————————————————————————————————————————————————— EvExpRecProjErr\n      Mod:T @τ₁ … @τₘ {fᵢ} e  ⇓  Err t\n\n      e  ⇓  Ok (Mod:T @τ₁ … @τₘ {f₁= v₁, …, fᵢ= vᵢ, …, fₙ= vₙ})"
  },
  {
    "id" : "4e2decd5-593b-40b9-93b9-966fe5a449a5",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "4406efd6-c5ef-42db-a709-ce10cfb5a23b",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-07-21T07:41:55Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 626,
    "diffHunk" : "@@ -1,1 +2429,2433 @@    —————————————————————————————————————————————————————————————————————— EvExpScenarioPass\n      'pass' e  ⇓  Ok ('pass' v)\n\n      e  ⇓  Err t\n    —————————————————————————————————————————————————————————————————————— EvExpScenarioGetPartyErr"
  },
  {
    "id" : "7b5bbea5-0f8c-440e-a3d2-f78b74ab621c",
    "prId" : 6598,
    "comments" : [
      {
        "id" : "1e84b4bf-f287-4bbf-9aae-6950cb67fb1e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We should make clear that the update interpretation work only on update value (maybe explaining how are handle non value update statement), or add a rule like:\r\n\r\n```\r\nu not a value\r\nu ⇓  Ok v\r\nv ‖ E ; (st, keys)   ⇓ᵤ   ur  || S\r\n-----------------------------------------\r\nu ‖ E ; (st, keys)   ⇓ᵤ   ur  || S\r\n```\r\n\r\nIn the second case I think we could simplify some other rules.",
        "createdAt" : "2020-07-21T08:03:15Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "066ce590-1084-423b-aef3-929822cc98ef",
        "parentId" : "1e84b4bf-f287-4bbf-9aae-6950cb67fb1e",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I think we should keep the expression evaluation and update interpretation separate, so I'll add something saying that this relation is only defined for update values `u`.",
        "createdAt" : "2020-07-21T09:57:50Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2c68d6b8-fc73-4582-a665-ee5917a68985",
        "parentId" : "1e84b4bf-f287-4bbf-9aae-6950cb67fb1e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n",
        "createdAt" : "2020-07-21T09:59:55Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f121a96-d777-405b-a270-06adbd9f3188",
        "parentId" : "1e84b4bf-f287-4bbf-9aae-6950cb67fb1e",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "So, the comments before this section already mention this (every `u` in this section has to be a value). But I added a little reminder next to the \"box\".",
        "createdAt" : "2020-07-21T10:06:38Z",
        "updatedAt" : "2020-07-21T15:04:55Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b5b8d6f9826b681bfc839a684099b92c822db82",
    "line" : 695,
    "diffHunk" : "@@ -1,1 +2545,2549 @@                                    └──────────────┘\n\n   —————————————————————————————————————————————————————————————————————— EvUpdPure\n     'pure' v ‖ (st, keys)  ⇓ᵤ  Ok (v, ε) ‖ (st, keys)\n"
  },
  {
    "id" : "4cee6b52-c312-4f1a-ab0a-03477dd7b2ce",
    "prId" : 5344,
    "comments" : [
      {
        "id" : "341df5f8-5a9e-47b0-8df2-2596c0e34c5d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "So many unnecessary changes :slightly_frowning_face: ",
        "createdAt" : "2020-04-01T14:21:16Z",
        "updatedAt" : "2020-04-02T12:01:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4058c818-68da-4a42-ad7a-1b974755caae",
        "parentId" : "341df5f8-5a9e-47b0-8df2-2596c0e34c5d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "github has a nice feature  \"Hide whitespace changes\"",
        "createdAt" : "2020-04-01T14:53:09Z",
        "updatedAt" : "2020-04-02T12:01:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f3e99fe570d6d6948c946adcee18b6f542f3c7ed",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +898,902 @@                       └───────────────┘\n\n     α : k ∈ Γ\n   ————————————————————————————————————————————— TyVar\n     Γ  ⊢  α  :  k"
  },
  {
    "id" : "434f055a-5e7a-43a1-a692-f2971e131601",
    "prId" : 5321,
    "comments" : [
      {
        "id" : "9783dbdf-4a47-4da1-813e-931eb9b93bb0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nStarting from DAML SDK 1.0, DAML-LF versions older than 1.6 are\r\n```",
        "createdAt" : "2020-03-31T18:02:04Z",
        "updatedAt" : "2020-03-31T18:22:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "052763d581b46dda90478bba8fcdc3d4e7f49df3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +67,71 @@1, including all its minor versions.\n\nStarting from DAML SDK 1.0 release, DAML-LF versions older than 1.6 are\ndeprecated. An engine compliant with the present specification must handle\nall versions newer than or equal to DAML-LF 1.6, no requirement is made on"
  },
  {
    "id" : "3a5ae8c6-2b64-4d59-9bd6-18c1a8771696",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "parentId" : null,
        "author" : null,
        "body" : "One question that the spec should answer: does it raise a runtime error when inserting a value that is incomparable in an empty map? (I think it should raise an error, for the sake of consistency.)",
        "createdAt" : "2020-03-13T15:11:05Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f268f8ee-9998-4462-bffe-f88df976e098",
        "parentId" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It does not. \r\nIt raise an exception exactly once `LESS` or `EQUAL` does. \r\n\r\nWe agreed with @hurryabit and @hurryabit that is the only semantics that is reasonable. Otherwise you will have to always traverse all the keys to ensure there is no function nested inside. \r\n\r\nImagine you have the type\r\n\r\n``` \r\ndata D = \r\n    FUN (Int -> Int) \r\n  | INT Int\r\n```\r\n\r\nYou can insert `(Fun (\\x -> x))` in any `GenMap` that does not content `Fun` variant.\r\nYou can also try to lookup the entry of key  `(Fun (\\x -> x))` without raising an exception in any `GenMap` that does not content `Fun` variant.\r\n\r\nHowever as soon you have an entry with a key `(Fun ...)` in your map you cannot do anymore any operation  that invole a other key of the form  `(Fun ...)` without raising an exception. \r\n\r\nThis choices is simpler and more efficient. Furthermore the compiler will never produce such case.\r\n\r\n\r\n",
        "createdAt" : "2020-03-13T16:25:54Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7db43262-9752-4be7-9e2c-0e614b4b480a",
        "parentId" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "author" : null,
        "body" : "Ok, if @hurryabit and @hurryabit can confirm ;-) \r\n\r\nThe reason I don't like this is that you are creating the potential for latent runtime errors when you perform inserts -- i.e. creating a runtime error that will only be found on a subsequent lookup, instead of when the real error occurs. This is particularly bad for e.g. people using genmaps during testing, or choice validation.\r\n\r\nWhen adding a new key to the map, It should be easy to compare a key to itself using EQUAL, to make sure it doesn't introduce latent runtime errors.",
        "createdAt" : "2020-03-13T16:34:08Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "456217a7-3eb3-48ce-b68e-c0e9c8fcd6a4",
        "parentId" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "author" : null,
        "body" : "In the proposed semantics, you are only saving 1 comparison, but you are introducing latent runtime errors, so I don't think it's worth it.",
        "createdAt" : "2020-03-13T16:37:51Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "cb4256de-e75e-45d0-8b1c-17215183a4af",
        "parentId" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It depends on what kind of values you have. If you have ADT-like trees, being able to short circuit on comparisons can make a pretty large difference. Given that we prevent this runtime error in DAML, I’m not sure that missing out on better performance here in favor of “nicer semantics” for DAML-LF is worth it. That said, I don’t feel particularly strongly about this.",
        "createdAt" : "2020-03-13T16:42:35Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34e97c7f-486e-4226-9425-f0d7b19ebe24",
        "parentId" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "In fact, @associahedron I like your proposal.\r\nThe advantage I see, is that we can switch the implementation to hashmap, if we realize the implementation is too slow (we will sorted the map only for serialization). \r\n \r\nIn other words, in each case (insertion, deletion and lookup) we check the value is equal to itself. Hence we have a nice definition of \"comparable\" value.",
        "createdAt" : "2020-03-13T17:09:01Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c2203774-5533-4665-8d42-ced189642627",
        "parentId" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "author" : null,
        "body" : "@cocreature If you use nested trees as keys, maps are going to be slow regardless. I'm also not confident that this case will never ever occur at runtime in DAML.\r\n\r\n@remyhaemmerle-da 👍",
        "createdAt" : "2020-03-13T17:41:05Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2d8bda91-e538-4cc1-a3aa-810bd368a031",
        "parentId" : "8b2142ff-9548-440a-bff8-c34297d4cf60",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Alright, then let’s error out for now.",
        "createdAt" : "2020-03-13T18:31:03Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +3152,3156 @@  is inserted in order according to the builtin function ``LESS`` applied\n  on keys. This raises a runtime error if it tries to compare\n  incomparable values.\n\n  [*Available in versions >= 1.dev*]"
  },
  {
    "id" : "79be98f5-d1fd-477c-9533-28302eedc396",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "0f0fe2ad-a046-4a15-bc8b-e149988a54eb",
        "parentId" : null,
        "author" : null,
        "body" : "We are missing rules for insertion in empty maps.\r\n\r\nAgain, for the empty map, I think the rule should perform a comparison in order to verify that the key is a comparable value.",
        "createdAt" : "2020-03-13T15:14:00Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "80742b43-3805-4aa6-826e-4e8782fce681",
        "parentId" : "0f0fe2ad-a046-4a15-bc8b-e149988a54eb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch for the empty maps case",
        "createdAt" : "2020-03-13T16:29:46Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +3187,3191 @@      𝕆('GENMAP_INSERT' @σ @τ 〚v₁ ↦ w₁; …; vₙ ↦ wₙ〛 v w) =\n        'Ok' 〚v₁ ↦ w₁; …; vₙ ↦ wₙ; v ↦ w〛\n\n\n* ``GENMAP_LOOKUP : ∀ α. ∀ β.  α → 'GenMap' α β → 'Optional' α``"
  },
  {
    "id" : "75830f37-7163-443b-826e-402c1b2af52f",
    "prId" : 4981,
    "comments" : [
      {
        "id" : "f189460d-22f8-4d96-b71c-3ce770596201",
        "parentId" : null,
        "author" : null,
        "body" : "Spec should say what happens in the case of empty map lookup of incomparable keys. (I favor more runtime errors.)",
        "createdAt" : "2020-03-13T15:14:55Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "18390c4f-3e5d-4a0b-888f-bfbe66475102",
        "parentId" : "f189460d-22f8-4d96-b71c-3ce770596201",
        "author" : null,
        "body" : "At lookup it is not super critical to check the key for self-equality, but I think that at insertion time it is more important.",
        "createdAt" : "2020-03-13T16:35:31Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "05d88d6b-a086-4b5b-9231-44612df234fe",
        "parentId" : "f189460d-22f8-4d96-b71c-3ce770596201",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "no error ;)",
        "createdAt" : "2020-03-13T16:37:35Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d0bb0aa6-4c43-472f-a935-5fc5afeaa9fb",
        "parentId" : "f189460d-22f8-4d96-b71c-3ce770596201",
        "author" : null,
        "body" : "if you want to leave the possibility for hashtable-based implementation open, you should error on bad lookup keys",
        "createdAt" : "2020-03-13T17:45:53Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4e423af5-e961-4a83-abb6-3f1ad3b45b61",
        "parentId" : "f189460d-22f8-4d96-b71c-3ce770596201",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "As agreed in previous thread, we raise an error",
        "createdAt" : "2020-03-16T11:36:12Z",
        "updatedAt" : "2020-03-16T11:39:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f38d1e03c596ac36159ab0ba5c28c7b89ff02cd9",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +3193,3197 @@  Looks up the value at a key in the map using the builtin function\n  ``EQUAL`` to test key equality. This raises a runtime error if it\n  try to compare incomparable values.\n\n  [*Available in versions >= 1.dev*]"
  },
  {
    "id" : "80ede52b-177b-4645-89d4-6470ccd1b596",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "569843d2-9069-4eeb-9454-f18148e8c422",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Shouldn’t the types of the fields be the same, i.e, `t_i` everywhere?",
        "createdAt" : "2020-03-12T10:14:04Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cf2c8a7a-f1af-44b2-9220-9b4308f91c7f",
        "parentId" : "569843d2-9069-4eeb-9454-f18148e8c422",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Struct may have different type for each field",
        "createdAt" : "2020-03-12T11:00:16Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +1876,1880 @@    fᵢ comes lexicographically before gᵢ\n  ——————————————————————————————————————————————————— TypeOrderStructFieldName\n    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n      ⟨ f₁ : σ₁, …, fᵢ₋1 : σᵢ₋₁, gᵢ : σᵢ, …, gₙ : σₙ ⟩\n"
  },
  {
    "id" : "729a1905-a28c-4465-8fd0-b3ef73b8aadf",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "f4e87f9b-df43-4846-b0b8-1eb9723757d4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t understand this rule. Are you trying to say that adding extra fields makes it bigger? If so, I don’t understand why `f_n` is at the end in both cases and what the point of `f_m` is.",
        "createdAt" : "2020-03-12T10:15:26Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f095bd14-c5d3-4766-8a5f-fca2699a213f",
        "parentId" : "f4e87f9b-df43-4846-b0b8-1eb9723757d4",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It is better now ? ",
        "createdAt" : "2020-03-12T12:48:57Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +1880,1884 @@\n  ——————————————————————————————————————————————————— TypeOrderStructFieldNumber\n    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ\n      ⟨ f₁ : τ₁, …, fₘ : τₘ, fₘ₊₁ : τₘ₊₁ ⟩\n"
  },
  {
    "id" : "e6a66d01-5ce7-450d-97bc-4161cf0d7d17",
    "prId" : 4942,
    "comments" : [
      {
        "id" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe I’m missing something but which rules allows me to deduce that `Int64 < Numeric 10`?",
        "createdAt" : "2020-03-12T10:19:46Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "49eb8c20-f39d-4203-8318-644e09a74407",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "By transitivity (stated in the text)  you have  ``Int64 <ₜ  τ σ``  for all ``τ`` and ``σ``.\r\n\r\nI replace the text by an explicit rule.",
        "createdAt" : "2020-03-12T11:09:37Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "908ae504-cc75-4d11-a3bb-77c859fee7b9",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : null,
        "body" : "I don't see it @remyhaemmerle-da . There's no rule that lets you infer, for example, that ` τ₁ <ₜ τ₂ σ` whenever ` τ₁` is not a type application.",
        "createdAt" : "2020-03-12T13:28:38Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "819e16fa-bd0f-4c98-9590-610421bada9d",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yeah I also cannot find it in the text.",
        "createdAt" : "2020-03-12T13:32:00Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0062706e-dbe3-485d-9606-135aedc2d436",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@associahedron \r\n`TypeOrderStructTyApp` allows you to infer trivially `⟨  ⟩ <ₜ τ₂ σ`\r\n\r\n@moritzkiefer-da Here is how I infer `Int64 < Numeric 10`\r\n- Using `TypeOrderTransitivity`, `TypeOrderInt64Date`, and `TypeOrderDateTimestamp` you can infer that 'Int64' <ₜ 'Timestamp'.\r\n- Combining with  `TypeOrderTransitivity`, and  `TypeOrderTimestampText` you can infer that  `'Int64' <ₜ 'Text'`\r\n ...\r\n- Combining with  `TypeOrderTransitivity`, and  `TypeOrderNatStruct` you can infer that ` 'Int64' <ₜ ⟨  ⟩`\r\n- Combining with  `TypeOrderTransitivity` and `TypeOrderStructTyApp` you can infer that  `'Int64' <ₜ Numeric 10`\r\n",
        "createdAt" : "2020-03-12T13:52:48Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05606c83-9524-4745-bc5b-08239f12b9ea",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : null,
        "body" : "Oh, I see! That's very hard to see, but it checks out. \r\n\r\nMaybe it would be easier to understand if we used the type rank notion from the scala implementation? We could define a formal type rank function, and then have just one rule for comparing all the types with different type rank.",
        "createdAt" : "2020-03-12T14:05:32Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8255cb25-e43d-472c-b36b-8a9f9d3d4837",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not like to define the rank explicitly (mapping types to integers)  ",
        "createdAt" : "2020-03-12T14:12:54Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a1a70723-48e9-4eec-a0a1-2f3c122cc82b",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : null,
        "body" : "I think it would make the spec match the code more closely, and be easier to understand, which are both better for maintenance, but if you are sure about this way then I'm not opposed.",
        "createdAt" : "2020-03-12T14:19:56Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ff2f4f45-7263-4df8-a376-d5d9cd50ee7f",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I want to be able to introduce a new type between two already existing.  \r\nThis will oblige me to have different ranks between two specs.  ",
        "createdAt" : "2020-03-12T14:25:40Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b94c369a-f70e-46b2-9dc1-a1a17314868d",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : null,
        "body" : "That's fine. The type rank function is entirely formal, and would only exist in the spec, not be exposed in DAML/DAML-LF. Alternatively, you can define a formal enumeration of type ranks (instead of an type rank integer) and use the order from the enumeration.\r\n\r\nAnyway, it is up to you.",
        "createdAt" : "2020-03-12T14:32:58Z",
        "updatedAt" : "2020-03-12T17:41:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5c1b40b9-44b0-41cd-9f48-1548ea645eb9",
        "parentId" : "221df4a8-95cd-439a-a9b0-f8918a67ac63",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I did not include the rank. ",
        "createdAt" : "2020-03-12T21:07:03Z",
        "updatedAt" : "2020-03-12T21:07:03Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c930223f08a9f9f104427ac4a4fe184ffe1450b4",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +1891,1895 @@    ⟨ f₁ : τ₁, …, fₘ : τₘ ⟩ <ₜ τ σ\n\n    τ₁ <ₜ τ₂\n  ——————————————————————————————————————————————————— TypeOrderTyAppLeft\n    τ₁ σ₁ <ₜ τ₂ σ₂"
  },
  {
    "id" : "d77de7a1-9047-4b6a-acd5-2999e1cb834b",
    "prId" : 4116,
    "comments" : [
      {
        "id" : "27378344-f719-4492-b903-231c054884cb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "As for maps, given that we want to switch to ordered map, can we define the order of a map based on the order of the result of converting it to a list of key-value pairs (orderered by keys)?",
        "createdAt" : "2020-01-20T16:09:35Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "963acbdb-7bd7-4cc0-84da-b7b24998a2bd",
        "parentId" : "27378344-f719-4492-b903-231c054884cb",
        "author" : null,
        "body" : "That sounds like the best option :)",
        "createdAt" : "2020-01-22T11:57:30Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6c4359b4-a61f-42b5-a029-12c1d9e059d7",
        "parentId" : "27378344-f719-4492-b903-231c054884cb",
        "author" : null,
        "body" : "I added rules for maps. I think cleaning up the spec to get rid of the dependency on insertion order in generic maps should happen in the next PR (if CI ever accepts this one).",
        "createdAt" : "2020-01-22T14:21:24Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "983397c0-c71e-422d-8032-5dedfa76d116",
        "parentId" : "27378344-f719-4492-b903-231c054884cb",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-01-23T10:21:53Z",
        "updatedAt" : "2020-01-23T10:21:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a17567d4d853f3eaa0100a84487c93323612db34",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +2463,2467 @@behavior.\n\nGeneric equality and order functions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  },
  {
    "id" : "ccfc6cee-4482-4452-bfb8-703242147a24",
    "prId" : 4116,
    "comments" : [
      {
        "id" : "8ac3f23e-fcd8-4c38-990f-89a643427bbd",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is currently tricky to do in the engine as we do not have enough info at run time.\r\nI was thinking to go lexicographically, but this is definitively better. ",
        "createdAt" : "2020-01-20T16:10:25Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6d753e06-a9ca-4c8e-a42e-0721b6407984",
        "parentId" : "8ac3f23e-fcd8-4c38-990f-89a643427bbd",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think lexicographic ordering is a reasonable option. The default `Ord` instance in DAML works like the one that @associahedron has used in the spec here and diverging from that is going to cause a lot of confusion.",
        "createdAt" : "2020-01-20T16:13:49Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83bd25ba-20be-405f-a413-4ca95bf54b60",
        "parentId" : "8ac3f23e-fcd8-4c38-990f-89a643427bbd",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We probably add an index in the variant and the enum.",
        "createdAt" : "2020-01-20T16:19:51Z",
        "updatedAt" : "2020-01-23T10:14:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a17567d4d853f3eaa0100a84487c93323612db34",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1927,1931 @@\n   Mod:T:V₁ comes before Mod:T:V₂ in the list of\n   constructors for variant type Mod:T\n  ——————————————————————————————————————————————————— GenLtVariantCon1\n   Mod:T:V₁ @τ₁ … @τₙ v <ᵥ Mod:T:V₂ @σ₁ … @σₙ w"
  },
  {
    "id" : "3cbb0247-1fdc-492c-964c-a9e465099837",
    "prId" : 3817,
    "comments" : [
      {
        "id" : "776ad7a3-9cdf-4660-bd4a-87d11ba7bbc7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think we ever discussed this and I still use this in DAML script and DAML triggers. Did you mean to change `EQUAL_CONTRACT_ID` instead of `COERCE_CONTRACT_ID`?",
        "createdAt" : "2019-12-11T12:25:09Z",
        "updatedAt" : "2019-12-11T12:30:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "708fde31-8a1e-4c59-86d1-518ceeaca739",
        "parentId" : "776ad7a3-9cdf-4660-bd4a-87d11ba7bbc7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "~~My mistake. Thanks to catch that~~\r\n",
        "createdAt" : "2019-12-11T12:31:27Z",
        "updatedAt" : "2019-12-11T12:42:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "52ea488e-321c-439b-8cdb-ab2a810289fb",
        "parentId" : "776ad7a3-9cdf-4660-bd4a-87d11ba7bbc7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The ``[*Available in version ...*]`` in the built-in section are always at the end of the description of the built. That is to say this annotation is about ``EQUAL_CONTRACT_ID`` not ``COERCE_CONTRACT_ID``",
        "createdAt" : "2019-12-11T12:43:50Z",
        "updatedAt" : "2019-12-11T12:44:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05d0e1b9-0075-4095-81e0-3f52a5f5f34e",
        "parentId" : "776ad7a3-9cdf-4660-bd4a-87d11ba7bbc7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, I got confused by the diff. LGTM  to me then :+1:",
        "createdAt" : "2019-12-11T12:44:52Z",
        "updatedAt" : "2019-12-11T12:44:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7211a4fb244cd3ddf7a3e698e6b86f78f4e02e2e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2712,2716 @@  ``'False'`` otherwise.\n\n  [*Available in versions < 1.dev*]\n\n* ``COERCE_CONTRACT_ID  : ∀ (α : ⋆) (β : ⋆) . 'ContractId' α → 'ContractId' β``"
  },
  {
    "id" : "4d83fb21-f448-4b8e-90df-058ee902f361",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should this be `τ[α_1 -> σ_1, …] -> σ`? Does it make a difference?",
        "createdAt" : "2019-12-09T10:27:12Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "852853cf-7521-4a76-b778-f78f4ca7bc12",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Does not make any difference. \r\nI prefer My notation, as it suggest we can resolve synonym in the body of definition independently of its usage. ",
        "createdAt" : "2019-12-09T12:21:41Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5a9b8f70-1212-417c-a085-6732456381be",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : null,
        "body" : "I don't think you can resolve the arguments and body independently. \r\n\r\nExample,\r\n\r\n```\r\nsynonym Foo t = t -> Int64\r\nsynonym Bar f = f Int64\r\n```\r\n\r\nThe rule above would give \r\n```\r\nBar Foo ↠ Foo Int64\r\n```\r\nBut the correct result (obtained from @cocreature's rule) is\r\n\r\n```\r\nBar Foo ↠ Int64 -> Int64 \r\n```\r\n",
        "createdAt" : "2019-12-10T11:18:48Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "fdabb6b7-7363-4f23-a7a8-7e19f7266013",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Nice example!",
        "createdAt" : "2019-12-10T12:08:55Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43a0e765-489e-435c-a461-1f46368e4d2f",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We agree with @cocreature that type synonyms are always fully applied. It is not in the ``Bar Foo`` .\r\n\r\n",
        "createdAt" : "2019-12-10T12:35:24Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "928327e8-858c-41e7-b985-0091e9a4200b",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : null,
        "body" : "Always applied type synonyms should be enough for now, but I don't see a good reason to leave this rule susceptible to the above problems if, in future, we don't guarantee type synonyms are fully applied.\r\n\r\n(Also, is it in the spec that type synonyms must be fully applied?)",
        "createdAt" : "2019-12-10T12:41:55Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "414e4224-417e-46b2-8925-26bdc096ab9b",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It should be in the spec but I might have screwed it up :slightly_smiling_face:",
        "createdAt" : "2019-12-10T12:43:05Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9719d2a3-100e-4489-9667-986b6bf04014",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The rewriting approach does not really work if type synonym are not fully applied. \r\nThe crux of my spec is that once you applied ``↠`` there is no more type synonym (or if there is still some is that you use an undefined type synonym (or partially applied) in which case the type is not well-formed)\r\n   ",
        "createdAt" : "2019-12-10T12:47:40Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3fb957bf-332a-4eca-97b4-cc77db997fb5",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "in other terms, `Foo Int64 : *` does not kind check.",
        "createdAt" : "2019-12-10T12:48:48Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2066c280-ce4a-43ff-ab5e-101b4f4ce912",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : null,
        "body" : "I think if we're going down this route we should not be reusing `TApp` in defining type synonyms -- a type synonym application should be considered a separate primitive type operation.",
        "createdAt" : "2019-12-10T12:53:45Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "08713108-3126-4d22-b3e2-189a00c976ab",
        "parentId" : "54895bb1-8671-4e37-96b0-dc95a34d1b83",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "OK. ",
        "createdAt" : "2019-12-10T12:55:06Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +800,804 @@\n   'synonym' S (α₁:k₁) … (αₙ:kₙ) ↦ τ  ∈ 〚Ξ〛Mod\n   τ  ↠  σ      τ₁  ↠  σ₁  ⋯  τₙ  ↠  σₙ\n  ——————————————————————————————————————————————— RewriteSynonym\n   |Mod:S τ₁ … τₙ|   ↠   σ[α₁ ↦ σ₁, …, αₙ ↦ σₙ]"
  },
  {
    "id" : "d076f013-8ae8-4e28-9ffc-ff57a82d75b0",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "83bb70e9-98ef-4db6-98ec-a0fc5cd47273",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  ———————————————————————————————————————————————— RewriteStruct\r\n```",
        "createdAt" : "2019-12-09T10:28:24Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +805,809 @@\n   τ₁ ↠ σ₁  ⋯  τₙ  ↠  σₙ\n  ———————————————————————————————————————————————— RewriteText\n   ⟨ f₁: τ₁, …, fₘ: τₘ ⟩ ↠ ⟨ f₁: σ₁, …, fₘ: σₘ ⟩\n"
  },
  {
    "id" : "75088efe-9f08-4112-abfd-ef3ca1f1a8ec",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "c7fc6202-9963-474a-a023-c31cc1577391",
        "parentId" : null,
        "author" : null,
        "body" : "I think you need to split it out into two cases, in case `σ₁` happens to be a partially applied synonym.\r\n\r\n```\r\n τ₁  ↠  σ₁        τ₂  ↠  σ₂\r\nσ₁ σ₂ is not a fully saturated type synonym application\r\n———————————————————————————————————————————————— RewriteApp1\r\n    τ₁ τ₂  ↠  σ₁ σ₂\r\n\r\n\r\n τ₁  ↠  σ₁        τ₂  ↠  σ₂\r\nσ₁ σ₂ is a fully saturated type synonym application\r\nσ₁ σ₂ ↠ σ \r\n———————————————————————————————————————————————— RewriteApp2\r\n    τ₁ τ₂  ↠  σ\r\n```\r\n",
        "createdAt" : "2019-12-10T11:29:42Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "017f631f-33ac-45ff-a48b-0789662990ee",
        "parentId" : "c7fc6202-9963-474a-a023-c31cc1577391",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Won’t we already all in the `RewriteSynonym` case for `RewriteApp2` here?",
        "createdAt" : "2019-12-10T12:14:39Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e736584d-1b06-4ae4-880b-6fdb4549993b",
        "parentId" : "c7fc6202-9963-474a-a023-c31cc1577391",
        "author" : null,
        "body" : "Not if `σ₁` is a partially applied type synonym. Of course, that can't happen if type synonyms must be fully applied in every case.\r\n\r\nConcrete example:\r\n\r\n```\r\nsynonym Foo a b = a -> b \r\nsynonym Bar = Foo Int64\r\n```\r\n\r\nthen `Bar Int64 ` doesn't fall into either `RewriteSynonym` or `RewriteApp1`, you would need `RewriteApp2` to make progress with `Bar ↠ Foo Int64` before getting `Bar Int64 ↠ Int64 -> Int64`.",
        "createdAt" : "2019-12-10T12:49:49Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +810,814 @@   τ₁  ↠  σ₁        τ₂  ↠  σ₂\n  ———————————————————————————————————————————————— RewriteApp\n   τ₁ τ₂  ↠  σ₁ σ₂\n\n   τ  ↠  σ"
  },
  {
    "id" : "c6b4e84b-4a87-4e01-be9d-7683d7ea7abb",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "8cbd0f11-f9c0-4fe4-bbb7-d84c3bc88f9c",
        "parentId" : null,
        "author" : null,
        "body" : "Why not?\r\n\r\n```suggestion\r\n      τ ↠ τ'      ε  ⊢  τ' : *     τ' contains no quantifiers nor type synonyms\r\n```",
        "createdAt" : "2019-12-10T11:37:18Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +1012,1016 @@      Γ  ⊢  'from_any' @τ e  :  'Optional' τ\n\n      ε  ⊢  τ : *     τ contains no quantifiers nor type synonyms\n    ——————————————————————————————————————————————————————————————— ExpTypeRep\n      Γ  ⊢  'type_rep' @τ  :  'TypeRep'"
  },
  {
    "id" : "ee8bb5a1-91c5-4807-bcc5-75ead6a58011",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "e27e2613-a2ed-4f50-9f36-f984eade2c6e",
        "parentId" : null,
        "author" : null,
        "body" : "Why not?\r\n\r\n```suggestion\r\n      τ' contains no quantifiers nor type synonyms\r\n      τ ↠ τ'       ε  ⊢  τ' : *     Γ  ⊢  e  : Any\r\n```",
        "createdAt" : "2019-12-10T11:39:24Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "17f7ab9c-5081-4053-81ef-55b91746fa89",
        "parentId" : "e27e2613-a2ed-4f50-9f36-f984eade2c6e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It’s a bit annoying to implement since you would need to expand it in the speedy compiler so given that we don’t need it, it seems reasonable to simply forbid it at least for now.",
        "createdAt" : "2019-12-10T11:52:46Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d84398c0-17bb-4f3e-9e3b-bebd21fded4a",
        "parentId" : "e27e2613-a2ed-4f50-9f36-f984eade2c6e",
        "author" : null,
        "body" : "I see, that seems reasonable. The idea is that any user-defined type synonyms DAML will be expanded already in DAML-LF, and any type synonym in DAML-LF will be from constraints/typeclasses in DAML, which we don't care to marshal in or out of `Any`.",
        "createdAt" : "2019-12-10T11:59:57Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +1008,1012 @@\n      τ contains no quantifiers nor type synonyms\n      ε  ⊢  τ : *     Γ  ⊢  e  : Any\n    ——————————————————————————————————————————————————————————————— ExpFromAny\n      Γ  ⊢  'from_any' @τ e  :  'Optional' τ"
  },
  {
    "id" : "60e49941-610e-4b3a-842d-4f478a8f06b0",
    "prId" : 3782,
    "comments" : [
      {
        "id" : "a4e7bcd9-357f-4a3b-83fa-b2b70c317e45",
        "parentId" : null,
        "author" : null,
        "body" : "Similarly to `from_any` and `type_rep`, why not allow `τ ↠ τ'` and place the \"no quantifiers nor type synonym\" requirements on `τ'` instead.",
        "createdAt" : "2019-12-10T11:41:30Z",
        "updatedAt" : "2019-12-12T17:03:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "92ac13a29a297aa565d84f8bc700222e7b467019",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +1003,1007 @@\n      τ contains no quantifiers nor type synonyms\n      ε  ⊢  τ : *     Γ  ⊢  e  : τ\n    ——————————————————————————————————————————————————————————————— ExpToAny\n      Γ  ⊢  'to_any' @τ e  :  'Any'"
  },
  {
    "id" : "df1e87cc-7a80-4aa9-9442-d9d8b537c654",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "aad36ce5-2566-47d7-a4b1-92e57b60fa78",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why did this change? I don’t understand why text literals here are different from other literals.",
        "createdAt" : "2019-12-05T10:27:46Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "39503a50-25a7-4f3a-bb4e-b24c7e419643",
        "parentId" : "aad36ce5-2566-47d7-a4b1-92e57b60fa78",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "See below.",
        "createdAt" : "2019-12-05T12:20:24Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +596,600 @@       |  LitInt64                                  -- ExpLitInt64: 64-bit integer literal\n       |  LitNumeric                                -- ExpLitNumeric: Numeric literal\n       |  t                                         -- ExpLitText: UTF-8 string literal\n       |  LitDate                                   -- ExpLitDate: Date literal\n       |  LitTimestamp                              -- ExpLitTimestamp: UTC timestamp literal"
  },
  {
    "id" : "8e02e4b9-5208-4a58-966f-1a3302ae6429",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "3c30a1e5-bbaf-4a9d-a94c-c521d022e04d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I guess this is why we switched from `TextLit` to `t`?",
        "createdAt" : "2019-12-05T10:32:29Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "10df544e-04e4-45b0-bef5-b5036afddabe",
        "parentId" : "3c30a1e5-bbaf-4a9d-a94c-c521d022e04d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Indeed.",
        "createdAt" : "2019-12-05T11:00:05Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +1553,1557 @@     ⊢ᵥ  e₁    ⋯    ⊢ᵥ eₙ\n   ——————————————————————————————————————————————————— ValExpTextMap\n     ⊢ᵥ  [t₁ ↦ e₁; ⋯ ; tₙ ↦ eₙ]\n\n     ⊢ᵥ  e₁    ⋯    ⊢ᵥ eₙ"
  },
  {
    "id" : "b2bae153-5122-4c2f-9452-3df0fbc3c6b9",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "8a4beba9-affe-4784-8022-82e33044f8d0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Shouldn’t we also allow for `t1` and `t1'`? You can argue that it doesn’t matter since a text literal is only equal to itself but if you follow that argument the rule for text literals should probably also be\r\n```\r\n--------------- GenEqLitText\r\nt ~_v t\r\n```\r\ninstead of what you have right now.",
        "createdAt" : "2019-12-05T10:41:44Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3b8b94a5-0e18-4469-a439-dac178e0e67b",
        "parentId" : "8a4beba9-affe-4784-8022-82e33044f8d0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. I change the `GenEq` rules",
        "createdAt" : "2019-12-05T12:23:35Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +1767,1771 @@\n\n    v₁ ~ᵥ w₁     …       vₙ ~ᵥ wₙ\n  ——————————————————————————————————————————————————— GenEqTextMap\n   [ t₁ ↦ v₁, …, tₘ ↦ vₘ ]"
  },
  {
    "id" : "92664298-a762-4a5f-a56f-887c035b8301",
    "prId" : 3740,
    "comments" : [
      {
        "id" : "d80f1d2d-8272-4936-8005-2d2bc2c79036",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This isn’t true is it? We only added this in 1.5 or 1.6 iirc",
        "createdAt" : "2019-12-05T10:45:15Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3dd7d67c-576e-4b03-8d67-e1c28e7b9ef2",
        "parentId" : "d80f1d2d-8272-4936-8005-2d2bc2c79036",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I seems it was there from the beginning. At least it is there since the open sourcing. \r\nalso in the proto it is mapped to 87 which is lower that `EQUAL_LIST` and `TRACE`.",
        "createdAt" : "2019-12-05T11:51:30Z",
        "updatedAt" : "2019-12-05T15:24:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3afd6c9f06a2dbdbec412feeb5518d703dd1f",
    "line" : 383,
    "diffHunk" : "@@ -1,1 +2703,2707 @@  ``'False'`` otherwise.\n\n  [*Available in version < 1.dev*]\n\n* ``COERCE_CONTRACT_ID  : ∀ (α : ⋆) (β : ⋆) . 'ContractId' α → 'ContractId' β``"
  },
  {
    "id" : "31ca425a-4c83-41bb-921e-215f44bd77cd",
    "prId" : 3660,
    "comments" : [
      {
        "id" : "3b1eb50b-103b-4909-aa31-c7df71e497f2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should explain somewhere that \"record\" means nominal record and \"struct\" means structural records.",
        "createdAt" : "2019-11-28T08:40:20Z",
        "updatedAt" : "2019-11-28T09:11:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7a55d294-2b58-4291-927f-70ce849ad3c4",
        "parentId" : "3b1eb50b-103b-4909-aa31-c7df71e497f2",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2019-11-28T09:06:31Z",
        "updatedAt" : "2019-11-28T09:11:53Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bd5134affa807d790e2d801c4393bb4684926d63",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +478,482 @@\nIn the following, we will use identifiers to represent *built-in\nfunctions*, term and type *variable names*, record and struct *field\nnames*, *variant constructors* and *template choices*. On the other\nhand, we will use names to represent *type constructors*, *type synonyms*, *value"
  },
  {
    "id" : "8142842c-d531-487f-8a08-22d24383e36c",
    "prId" : 3635,
    "comments" : [
      {
        "id" : "138d70f8-8572-4b74-9198-196d0f6bf175",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      Γ  ⊢  Mod:S τ₁ … τₙ  :  ⋆\r\n```",
        "createdAt" : "2019-11-26T14:29:25Z",
        "updatedAt" : "2019-11-26T14:40:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0a0264f1-d053-486f-b3a9-5cad974cdacd",
        "parentId" : "138d70f8-8572-4b74-9198-196d0f6bf175",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Apparently it was not fixed. ",
        "createdAt" : "2019-11-26T15:05:07Z",
        "updatedAt" : "2019-11-26T15:05:08Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dfc3adf4d1e94695c10c9e19497754dae883b65c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +856,860 @@      Γ  ⊢  τ₁ : k₁  …  Γ  ⊢  τₙ : kₙ\n    ————————————————————————————————————————————— TyTypeSynonym\n      Γ  ⊢  S τ₁ … τₙ  :  ⋆\n\n"
  },
  {
    "id" : "1c7f21da-5903-450b-bfa0-09a6f1ecd0ae",
    "prId" : 3340,
    "comments" : [
      {
        "id" : "576b5d0c-6428-4e36-b1e2-f2150f3a0656",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "When did we decide to do this? I'm not convinced requiring the submitter of a `fetchByKey` to be a maintainer of the key is a good idea. This definitely hurts the compositionality of workflows. I also don't see the technical necessity of this change. Being a stakeholder of the contract should absolutely be enough. If you know a contract with the right key exists, then it must be the unique contract with this key. If you don't see a contract with such a key, you can't submit the transaction anyway. (I'm not talking about `lookupByKey` here!)\r\n\r\ncc @bame-da @gerolf-da ",
        "createdAt" : "2019-11-05T19:18:12Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d705fd78-23bc-471c-b8da-5942cf86538e",
        "parentId" : "576b5d0c-6428-4e36-b1e2-f2150f3a0656",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In fact, this restriction is pretty much against the spirit of https://github.com/digital-asset/daml/issues/2311, which we all seem to have agreed on.",
        "createdAt" : "2019-11-05T19:24:46Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e3ce9fcf-7cc9-4651-9cf5-af4b24c9cc14",
        "parentId" : "576b5d0c-6428-4e36-b1e2-f2150f3a0656",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is not recent. This was done by francesco. See #1866 already referenced in #2311. \r\n",
        "createdAt" : "2019-11-05T20:22:51Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "da0d8d10-2852-4528-87ec-786b76bb09a8",
        "parentId" : "576b5d0c-6428-4e36-b1e2-f2150f3a0656",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I just moved the comment from line 227/232 to line 246/252",
        "createdAt" : "2019-11-05T20:24:36Z",
        "updatedAt" : "2019-11-07T08:46:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f0b37d7d468279b3d9d07dd3ddc2a48b8c618884",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +260,264 @@..............\n\n  * **Change** Transaction submitter must be in the contract key\n    maintainers when performing lookup or fetches by key. See\n    `issue #1866 <https://github.com/digital-asset/daml/issues/1866>`_"
  },
  {
    "id" : "f1b782a7-d027-45d2-86ab-0944833a3933",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "8116dc53-7231-423c-8f4e-586fc5934947",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\nthat does not comply with this restriction.\r\n```",
        "createdAt" : "2019-11-01T13:00:00Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8f22bd5-a9f5-4c7d-9009-4c95feb98c22",
        "parentId" : "8116dc53-7231-423c-8f4e-586fc5934947",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed\r\n",
        "createdAt" : "2019-11-01T13:37:00Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +2962,2966 @@[*Available in versions >= 1.dev*] must be used instead. The\ndeserialization process will reject any DAML-LF 1.dev (or later) that\nthat does not comply this restriction.\n\nNat kind and Nat types"
  },
  {
    "id" : "c7862528-15c8-4e07-952c-63738c99380c",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "c52c3a5c-ebc8-4c23-8e02-307cc416b794",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Currently you are switching between `builtin` and `built-in`, it would probably be good to stick to one of those.",
        "createdAt" : "2019-10-28T17:08:05Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +2671,2675 @@relation over valid keys.\n\nThis relation is not exposed as a builtin function, but it coincides\nwith the builtin equality for any given type, if that builtin is\ndefined. ::"
  },
  {
    "id" : "dbc4dba5-9f93-4551-9154-fdb3638480f9",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "1f416924-0b46-4696-b0b0-57dc01fa279d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we want to allow contract ids? The absolute vs relative thing makes that a bit dangerous so at least on the DAML level I probably wouldn’t expose it.",
        "createdAt" : "2019-10-28T17:10:14Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e8de9208-1343-4884-b21f-b8c5467f08c9",
        "parentId" : "1f416924-0b46-4696-b0b0-57dc01fa279d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Contract IDs are fine here as long as we stick to the following two assumptions:\r\n(1) the rewriting from relative to absolute IDs is injective and no relative ID is ever rewritten to an absolute ID that is in use already,\r\n(2) the rewriting of all contract IDs in a transaction happens in one go without any map operations performed in the middle.\r\nI wonder if we should document these assumptions (in better words than mine)?",
        "createdAt" : "2019-10-28T17:34:29Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f8798684-43b7-490e-8e08-8be8de5be9aa",
        "parentId" : "1f416924-0b46-4696-b0b0-57dc01fa279d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, I think I didn’t realize how the rewriting works until now. Makes sense now but yeah we should definitely document this imho.",
        "createdAt" : "2019-10-28T17:43:52Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +2699,2703 @@  LitTimestamp₁ ~ᵥ LitTimestamp₂\n\n  cid₁ and cid₂ are the same\n  ——————————————————————————————————————————————————— GenEqLitContractId\n  cid₁ ~ᵥ cid₂"
  },
  {
    "id" : "eb99acc1-ce99-4bf4-855e-ee38285832f8",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "2c042618-6429-4d1f-8229-87205f61d8ab",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should specify how this affects the \"order in which keys were inserted\" which is relevant for the conversion to lists, do we first-inserted-order or last-inserted-order? If we go with the former, the latter can be _efficiently_ expressed in terms of the former (and `GENMAP_DELETE`). I don't see how this would be possible _efficiently_ the other way around.",
        "createdAt" : "2019-10-28T17:17:27Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8e4709cd-62e3-478b-a453-40eb391a9322",
        "parentId" : "2c042618-6429-4d1f-8229-87205f61d8ab",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am inclined toward  `last-inserted-order`. ",
        "createdAt" : "2019-10-29T12:58:42Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6851d606-d954-4e97-abd4-ddc549cbbd68",
        "parentId" : "2c042618-6429-4d1f-8229-87205f61d8ab",
        "author" : null,
        "body" : "I think first inserted order makes more sense. It's certainly what I meant in the spec. It implies that if you insert the same (key, value) pair in a map that is already there, it will not modify the map, i.e. inserts are idempotent. That's nice.",
        "createdAt" : "2019-10-29T14:03:06Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5b877ba3-9482-4cbe-bb3a-18306ea0ceb3",
        "parentId" : "2c042618-6429-4d1f-8229-87205f61d8ab",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't know what you mean _exactly_ by \"inserts are idempotent\". I assume you mean\r\n```\r\ninsert k v . insert k v  ==  insert k v\r\n```\r\nfor all `k` and `v`. This is true for last-inserted order as well. I think what is more compelling about first-inserted order is that we get\r\n```\r\ninsert k (lookup k m) m  ==  m\r\n```\r\nfor all `m` and keys `k` of `m`.\r\n\r\nWe can also define\r\n```\r\ninsertLast k v = insertFirst k v . delete k\r\n```\r\nThus, insert-first order is at least as \"powerful\" as insert-last order.",
        "createdAt" : "2019-10-29T14:13:24Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be1cb211-1815-433a-8135-1f26f3cd93a1",
        "parentId" : "2c042618-6429-4d1f-8229-87205f61d8ab",
        "author" : null,
        "body" : "Ah, you're right. My sentence was better before the `i.e.`.",
        "createdAt" : "2019-10-29T14:20:01Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +2605,2609 @@  Inserts a new key and value in the map. If the key is already\n  present in the map, the associated value is replaced with the\n  supplied value.\n\n  This raises an error if the key is not a valid map key. Keys are"
  },
  {
    "id" : "641f83c7-c126-4e4b-8697-e05e995de907",
    "prId" : 3260,
    "comments" : [
      {
        "id" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are forgetting the \"nice\" case where keys are maps. \r\nOf course we can a first implementation without map keys. \r\n",
        "createdAt" : "2019-10-29T13:01:48Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b481f33e-f53f-4d3a-81ff-d4e2819ec0a3",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "That's not nice! We probably will need to add them, but I'm worried the \"insertion order\" issue will mess people up.\r\n\r\nBut also I don't see map values under the values section (including `'Map'`). Probably should add them?",
        "createdAt" : "2019-11-01T16:35:00Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "dc42f41a-da73-4cc4-8ad3-23b4a8c2ed64",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We can postpone this problem for later. ",
        "createdAt" : "2019-11-04T10:41:44Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c1dd1339-3c78-454f-9e47-2901afc54cda",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "TextMap (simply called 'Map' in the spec) are not concern with the insertion order.\r\nThey are sorted by key when converted to list or serialized in the ledger. ",
        "createdAt" : "2019-11-04T12:23:53Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "36eca84e-9503-4a83-bc0f-0ee0ff2eb667",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "Right. I propose that two `'Map'` (i.e. TextMap) are considered equal if they have the same key-value pairs, and two `'GenMap'` are considered equal if they have the same key-value pairs *in the same insertion order*, so they result in the same output when using `GENMAP_KEYS` and `GENMAP_VALUES`.",
        "createdAt" : "2019-11-04T12:36:50Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "66afc0d2-1f35-4524-b266-485a0a1f7814",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "(We could make the insertion order irrelevant for map key comparison, but then two \"equal keys\" could result in different outputs when passed through `GENMAP_KEYS`. Furthermore, the equality instance `(Eq a, Eq b) => Eq (GenMap a b)` that will be defined in DAML, in terms of `GENMAP_KEYS` and `GENMAP_VALUES`, is sensitive to insertion order, so it makes sense to make key comparison sensitive to that as well.)",
        "createdAt" : "2019-11-04T12:40:14Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b336f035-e300-49b8-859c-03b116b96493",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "Following discussion with @bame-da, we decided that equality for GenMaps should not consider insertion order.",
        "createdAt" : "2019-11-04T13:46:18Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "acf29a3b-2db9-4704-8069-f096390c10b8",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Are we planning to add a builtin `GENMAP_EQ : forall k v. (v -> v -> Bool) -> GenMap k v -> GenMap k v -> Bool`? (I assume we need to use the builtin equality for keys to make this work. I'm slowly starting to despise user-defined equality...)",
        "createdAt" : "2019-11-04T15:21:30Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dd749b2b-7f8e-4ac1-a011-d7ab0ff9203c",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We were not planning to add this function as it was not here for `TextMap`. \r\n\r\nBut I am planning to add a generic equality `EQUAL: forall v. v -> v -> Bool` using the builin equality. This will obviously work with `GenMap`. Is it not enough ?  ",
        "createdAt" : "2019-11-04T15:27:42Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "33121bd4-b1fe-482b-90bb-ba50189e97e4",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "@remyhaemmerle-da The issue is that `Eq` (the DAML typeclass) does not necessarily match the built-in equality, so you may get unexpected results when using something like `EQUAL`. In any case we can define `GENMAP_EQ` in Daml without problem, it just won't be fast.\r\n",
        "createdAt" : "2019-11-04T16:44:42Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3602a827-e7ec-44e7-8574-4398d792ca49",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "@hurryabit Could we remove user-defined equality from DAML? Should we?",
        "createdAt" : "2019-11-04T16:47:44Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1d4a6744-35f4-4564-a10a-4a8a879f6ecf",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "OK. Let's start without it. We can still add it letter. ",
        "createdAt" : "2019-11-04T16:48:36Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c718daa5-c32a-4c03-972a-89bd7934e431",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not averse to removing user-defined equality from DAML. Particularly if we find a way to keep the `Eq` type class as a marker but have no (or at least no user-implementable) methods in it. I'm not sure if that feasible though since `Eq` is probably wired quite deep into GHC.\r\n@associahedron do you have some time at hand to investigate this a bit?\r\n@bame-da what do you think about this?",
        "createdAt" : "2019-11-04T21:53:53Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "134dae6b-1a74-43bb-ad1b-8eb2b525efb5",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "@hurryabit I think we can outlaw custom `Eq` instances in the preprocessor, and tell users to use `deriving Eq` instead.",
        "createdAt" : "2019-11-05T09:46:39Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e9ee2783-90a9-4036-b4ac-bb75ee27d1b6",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : null,
        "body" : "We could make it a warning for a while, and turn it into an outright error later.",
        "createdAt" : "2019-11-05T12:54:33Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "04c2f85c-a64c-4d70-96d2-9693058cdb47",
        "parentId" : "b57a9c8e-d4a1-4248-908d-4d01cd2765d5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That sounds reasonable to me. We should then also replace the derived `Eq` instances with calls to our DAML-LF primitive during our conversion to DAML-LF.",
        "createdAt" : "2019-11-05T16:47:29Z",
        "updatedAt" : "2019-11-11T14:57:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9156096baacc799653b528944997e1f63b50031",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +2589,2593 @@  Returns ``'True'`` if the first type representation is syntactically equal to\n  the second one, ``'False'`` otherwise.\n\n  [*Available in versions >= 1.7*]\n"
  },
  {
    "id" : "0da5e245-2338-423b-a639-0de9d00729ab",
    "prId" : 3196,
    "comments" : [
      {
        "id" : "69b95fbb-e1b5-4bcd-a0e8-88fedea479c9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should probably get the old preconditions back and add `τ does not contain quantifiers`.",
        "createdAt" : "2019-10-16T12:30:56Z",
        "updatedAt" : "2019-10-16T12:31:04Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7338628f-3405-4c5e-8a95-9e619128f513",
        "parentId" : "69b95fbb-e1b5-4bcd-a0e8-88fedea479c9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ll change it together with changing the Haskell typechecker.",
        "createdAt" : "2019-10-16T12:32:33Z",
        "updatedAt" : "2019-10-16T12:32:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3a9dbc20-5378-48f4-a037-1ebea4f0b559",
        "parentId" : "69b95fbb-e1b5-4bcd-a0e8-88fedea479c9",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "(I forget the haskell typechecker. )\r\n\r\nThis is closer to what I implement in scala. \r\nFell free to change everything as you wish.",
        "createdAt" : "2019-10-16T12:42:56Z",
        "updatedAt" : "2019-10-16T12:43:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81d42fab427c6588a392d965600919058f32aa47",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +897,901 @@\n      τ contains neither variables nor quantifiers\n      Γ  ⊢  τ : *     Γ  ⊢  e  : Any\n    ——————————————————————————————————————————————————————————————— ExpFromAny\n      Γ  ⊢  'from_any' @τ e  :  'Optional' τ"
  },
  {
    "id" : "ff08c1a9-a2b2-4ce0-ab4d-6f98c4d1a0ec",
    "prId" : 3141,
    "comments" : [
      {
        "id" : "daa3d96a-6e4e-45b0-a734-3dcff734a6e9",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Naive question. \r\n Why not `'to_any' @τ : τ -> Any` instead of `'to_any' @τ e: Any`  ?  ",
        "createdAt" : "2019-10-09T15:45:39Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "60bc255e-7dc7-49e0-ba9d-cdf8577287cd",
        "parentId" : "daa3d96a-6e4e-45b0-a734-3dcff734a6e9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Two reasons:\r\n1. For `to_any`, you would end up with applications sometimes being values if the function is `to_any τ` which is a bit awkward. This does not apply to `from_any`.\r\n2. Consistency: Changing only `from_any` while keeping `to_any` the way it is due to 1 feels weird and also doesn’t fit in with things like `Cons`, `create`, … that are all defined similarly.",
        "createdAt" : "2019-10-09T18:30:18Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9f33ac4e3d1ffe96883e634244b43469966c6fd2",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +585,589 @@       |  ⟨ e₁ 'with' f = e₂ ⟩                      -- ExpTupleUpdate: Tuple update\n       |  u                                         -- ExpUpdate: Update expression\n       | 'to_any' @τ t                              -- ExpToAny: Wrap a value of the given type in Any\n       | 'from_any' @τ t                            -- ExpToAny: Extract a value of the given from Any or return None\n       | 'to_text_template_id' @Mod:T               -- ExpToTextTemplateId: Generate a unique textual representation of the given TypeConName"
  },
  {
    "id" : "525a35b0-a5cb-4fa4-96d9-d9f2ab016bfd",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "c984c4f7-3749-4d87-9c5c-261b3124f746",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n     ⊢ᵥ  e\r\n```",
        "createdAt" : "2019-09-23T14:34:59Z",
        "updatedAt" : "2019-09-23T15:58:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1487,1491 @@\n\n     ⊢ᵥ e\n   ——————————————————————————————————————————————————— ValExpToAnyTemplate\n     ⊢ᵥ  'to_any_template' @Mod:T e"
  },
  {
    "id" : "c6efe0f4-32c0-4732-a5af-7b4c765982f2",
    "prId" : 2930,
    "comments" : [
      {
        "id" : "2deb936f-47bc-4dfc-9e71-0c3ceed50b38",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suppose that's the value representation of a an `AnyTemplate`. Is that correct?",
        "createdAt" : "2019-09-23T14:35:27Z",
        "updatedAt" : "2019-09-23T15:58:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d03fb1f1bef05c953d9b07d8f58b002ad7b9413",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +1489,1493 @@     ⊢ᵥ e\n   ——————————————————————————————————————————————————— ValExpToAnyTemplate\n     ⊢ᵥ  'to_any_template' @Mod:T e\n\n     ⊢ᵥ  e"
  },
  {
    "id" : "dd54cf62-8a99-4cd7-8655-0f8c9831aa00",
    "prId" : 2766,
    "comments" : [
      {
        "id" : "1921d76a-335f-4639-8855-02be883a6ad9",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "🤦‍♂ what a great format",
        "createdAt" : "2019-09-05T12:09:17Z",
        "updatedAt" : "2019-09-05T12:09:18Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "00fd4274b0214e6d6d6284320c5a3714cea9975b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +493,497 @@\nKinds, types, and expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. TODO We might want to consider changing the syntax for ``Mod``,"
  },
  {
    "id" : "1ab1376b-6943-4031-9c05-5005bc4c8b03",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "3fc03664-8475-433b-97d5-3125f2101d47",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "¯\\\\\\_(ツ)\\_/¯\r\n\r\n```suggestion\r\n          LitDate  ∈  \\d{4}-\\d{2}-\\d{2}               -- LitDate\r\n```",
        "createdAt" : "2019-07-29T18:30:06Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +380,384 @@\n  Date literals:\n         LitDate  ∈  \\d{4}-\\d{4}-\\d{4}               -- LitDate\n\n  UTC timestamp literals:"
  },
  {
    "id" : "abbfddd4-f5c7-4656-b7a1-c93b4e08808f",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "f864c460-a617-49c5-bc9e-95590cd2bff9",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Several other cases below as well.\r\n\r\n```suggestion\r\n  Adds the two decimals.  The scale of the inputs and the output is\r\n```",
        "createdAt" : "2019-07-29T18:33:29Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +2114,2118 @@* ``ADD_NUMERIC : ∀ (α : nat) . 'Numeric' α → 'Numeric' α  → 'Numeric' α``\n\n  Adds the two decimals.  The scale of the inputs and the ouput is\n  given by the type parameter `α`.  Throws an error in case of\n  overflow."
  },
  {
    "id" : "ba81638d-38dd-4bd1-8efa-51b081f36d7d",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "f76c683e-746e-46a2-9a3c-98e38fad5c81",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n1. Renaming the fields and the enum values containing \"``decimal``\" in\r\n```",
        "createdAt" : "2019-07-29T18:36:15Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 397,
    "diffHunk" : "@@ -1,1 +2884,2888 @@is achieved by\n\n1. Renaming the fields and the emum values containing \"``decimal``\" in\n   the Protocol buffer definition with \"``numeric``\" instead,\n2. Unconditionally fixing the scale of Numeric literals to ``10`` when"
  },
  {
    "id" : "b0cb70db-9a1b-4610-9790-e0c4036794aa",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "5cae706f-08f1-4feb-ba64-0c511b5880a7",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Is this a sufficient specification to include that the engine implementation of this primitive requires `α` to be reified? Consider\r\n\r\n```hs\r\nparseDecimal : Text -> Optional (Numeric n)\r\nparseDecimal = primitive @\"BEDecimalFromText\"\r\n\r\nparseDecimals : [Text] -> [Optional (Numeric n)]\r\nparseDecimals = fmap parseDecimal\r\n\r\nfives : [Optional (Numeric 3)]\r\nfives = parseDecimals [\"5\"]",
        "createdAt" : "2019-07-29T18:41:50Z",
        "updatedAt" : "2019-07-29T18:43:11Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 290,
    "diffHunk" : "@@ -1,1 +2188,2192 @@  of the input is given by the type parameter `α`.\n\n* ``FROM_TEXT_NUMERIC : ∀ (α : nat) .'Text' → 'Optional' 'Numeric' α``\n\n  Given a string representation of a decimal returns the decimal"
  },
  {
    "id" : "b17ebbc1-306c-4275-810c-c4fee605191a",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "b7a9f940-d997-413e-b46b-5d4b1923670a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is this actually true? Isn't it rounding to `i` digits after the dot?",
        "createdAt" : "2019-07-30T11:33:59Z",
        "updatedAt" : "2019-07-30T11:52:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f45c15b-aa85-4e20-b448-3878dccb4731",
        "parentId" : "b7a9f940-d997-413e-b46b-5d4b1923670a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "you'r right it is the the closet multiple of ``10⁻ⁱ`` !",
        "createdAt" : "2019-07-30T12:13:04Z",
        "updatedAt" : "2019-07-30T12:13:05Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +2143,2147 @@* ``ROUND_NUMERIC : ∀ (α : nat) . 'Int64' → 'Numeric' α → 'Numeric' α``\n\n  Rounds the decimal to the closest multiple of ``10ⁱ`` where ``i`` is\n  integer argument.  In case the value to be rounded is exactly\n  half-way between two multiples, rounds toward the even one,"
  },
  {
    "id" : "0e7afe82-770c-4f2d-904e-647199592873",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "0b5f61ea-f07c-4844-a163-c6e6e95d577a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we actually enforce these bounds anywhere?",
        "createdAt" : "2019-07-30T11:40:41Z",
        "updatedAt" : "2019-07-30T11:52:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "40133fdb-9593-4c1d-a1fa-dbdba568da60",
        "parentId" : "0b5f61ea-f07c-4844-a163-c6e6e95d577a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We will check during deserialization.\r\nSee https://github.com/digital-asset/daml/pull/2298/files/33e6b1950b738efc874e833e075c7c7044405865#diff-55b02b80bc6355ad225115dd9046ce2eR302\r\n\r\nWe could relax this in the future if needed. ",
        "createdAt" : "2019-07-30T12:10:14Z",
        "updatedAt" : "2019-07-30T12:10:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +393,397 @@The literals represent actual DAML-LF values:\n\n* A ``LitNatType`` represents a natural number between ``0`` and\n  ``38``, bounds inclusive.\n* A ``LitInt64`` represents a standard signed 64-bit integer (integer"
  },
  {
    "id" : "d5845afd-60f2-4e84-9f1a-df728f35611f",
    "prId" : 1408,
    "comments" : [
      {
        "id" : "1b146c3a-ccb8-44bc-9dcd-955c94d2c40b",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "what's the `(z)`?",
        "createdAt" : "2019-05-27T14:35:32Z",
        "updatedAt" : "2019-05-27T20:35:10Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "21762bd7-99d4-4862-aa5e-c1fd83a67321",
        "parentId" : "1b146c3a-ccb8-44bc-9dcd-955c94d2c40b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It's for the contract id of the contract the choice is exercised on, called `self` in the surface language. It's the same in the rule above.",
        "createdAt" : "2019-05-27T14:40:21Z",
        "updatedAt" : "2019-05-27T20:35:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e31c10751036e29879110fc543da4d1ea01cac35",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +1858,1862 @@\n     'tpl' (x : T)\n         ↦ { 'choices' { …, 'choice' ChKind Ch (y : τ) (z) : σ  'by' eₚ ↦ eₐ, … }, … }  ∈  〚Ξ〛Mod\n     cid ∈ dom(st₀)\n     st₀(cid) = (Mod:T, vₜ, 'active')"
  },
  {
    "id" : "5af2a9c9-c0df-4578-a94e-08980475b5fa",
    "prId" : 709,
    "comments" : [
      {
        "id" : "4e331f02-9e07-4ef9-aa54-2ef2c3dfbc15",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Maybe we can add a comment on what is `1.dev` version. ",
        "createdAt" : "2019-05-02T06:58:04Z",
        "updatedAt" : "2019-05-02T20:20:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8e83a467-9a5e-4e92-9369-ced7d7e931ac",
        "parentId" : "4e331f02-9e07-4ef9-aa54-2ef2c3dfbc15",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "10dd4a9fd10654ec8e9fc606ac9788c79eeba146",
        "createdAt" : "2019-05-02T16:26:48Z",
        "updatedAt" : "2019-05-02T20:20:28Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ac279d9f4f667d6203c27b5f0318762a261142ed",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +92,96 @@`Serialization` section which is particularly concerned about versioning\nand backward compatibility.\n\n\nVersion 1.0"
  }
]