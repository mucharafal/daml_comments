[
  {
    "id" : "1d9ca809-87e7-404a-94af-ce6360ea166e",
    "prId" : 7438,
    "comments" : [
      {
        "id" : "6520f956-e732-44ec-87f7-11417f6e7dea",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why is this test commented out?",
        "createdAt" : "2020-09-21T12:12:33Z",
        "updatedAt" : "2020-09-21T12:13:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b01de7f5-903b-4ec2-aa97-9de957853f0b",
        "parentId" : "6520f956-e732-44ec-87f7-11417f6e7dea",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "They have nothing to do here. \r\nI remove them in #7450",
        "createdAt" : "2020-09-21T12:18:24Z",
        "updatedAt" : "2020-09-21T12:18:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "397c50ae-a751-4536-baf9-f24c24e83296",
        "parentId" : "6520f956-e732-44ec-87f7-11417f6e7dea",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I see. Thanks for the explanation.",
        "createdAt" : "2020-09-21T12:24:56Z",
        "updatedAt" : "2020-09-21T12:24:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e9fae9394b4e7efd302fa8781b37c97d5671c98f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +322,326 @@    Some(SELabelClosure(LfDefRef(-pkgId-:M:p_1_0),\n        SELet1General(SEVal(LfDefRef(-pkgId-:M:origin)),SEAppAtomicSaturatedBuiltin(SBRecUpd(-pkgId-:M:Point,0),[SELocS(1),SEValue(SInt64(1))])))) did not equal\n    Some(SELet1General(SEVal(LfDefRef(-pkgId-:M:origin)),SEAppAtomicSaturatedBuiltin(SBRecUpd(-pkgId-:M:Point,0),[SELocS(1),SEValue(SInt64(1))])))\n\n"
  },
  {
    "id" : "5fa56ac7-ea32-4725-b619-145e87c30919",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "9c8b4790-09ac-46cb-8123-cc3f190eb764",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Given how simple it is to write such a test I'd be happy to see a test like\r\n```\r\n(\\ (a: Int64) (b: Int64) -> SUB_INT64 a b) 88 33\r\n```\r\nas well to make sure we also get the order of the arguments right. I'm fine with doing this in a separate PR.",
        "createdAt" : "2020-05-20T11:16:35Z",
        "updatedAt" : "2020-05-20T11:16:47Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +29,33 @@    val pkgs = typeAndCompile(p\"\")\n\n    \"be captured correctly\" in {\n      eval(\n        e\"\"\""
  },
  {
    "id" : "26c24d0a-dfe9-4378-a153-52acf2fb42e4",
    "prId" : 3416,
    "comments" : [
      {
        "id" : "5bbf71bb-26fb-42f6-af40-9516f06fc514",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This is also defined in [`SBuiltinTest`](https://github.com/digital-asset/daml/pull/3416/files#diff-ae9014deee9be354b39ebd26faa0150bR1231). How about moving this to `Equality`'s companion object? ",
        "createdAt" : "2019-11-12T08:47:33Z",
        "updatedAt" : "2019-11-12T10:28:32Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c66a8518440a160bdac8fa002ff6c9c0aac64311",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +241,245 @@  }\n\n  @SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n  private implicit def resultEq: Equality[Either[SError, SValue]] = {\n    case (Right(v1: SValue), Right(v2: SValue)) => svalue.Equality.areEqual(v1, v2)"
  }
]