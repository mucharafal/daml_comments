[
  {
    "id" : "ba47bd20-6e9d-4be0-be7a-2d0851765575",
    "prId" : 6038,
    "comments" : [
      {
        "id" : "07d45b24-de09-4b99-a035-dbefeb537d3f",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`inj` gives us transaction library `Value`s for free, but not `SValue`s. We could go through the `translatePrimValue` conversion instead, or define an associated `injSvalue` paired with each `ValueAddend` constructor we care to use. Of course for a small number of cases it's sufficient and safe to hand-write as done above.",
        "createdAt" : "2020-05-19T21:44:29Z",
        "updatedAt" : "2020-05-27T23:17:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c429d96b104ad601a23dec9fe0fc8eb6d1fe17c3",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +340,344 @@        r(\"Int64 Option List\", VA.list(VA.optional(VA.int64))) { loi =>\n          SList(loi.map(oi => SOptional(oi map SInt64)).to[FrontStack])\n        },\n      ) ++\n        comparableCoidsGen.zipWithIndex.map {"
  },
  {
    "id" : "c80f695a-9352-4584-bfe9-87d1977382a6",
    "prId" : 6038,
    "comments" : [
      {
        "id" : "5e8d81cb-3046-4aec-9bac-36d0e51c4dbc",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Includes reflexive, antisymmetric, transitive.",
        "createdAt" : "2020-05-19T21:48:25Z",
        "updatedAt" : "2020-05-27T23:17:58Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c429d96b104ad601a23dec9fe0fc8eb6d1fe17c3",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +462,466 @@      implicit val svalueOrd: Order[SValue] = Order fromScalaOrdering Ordering\n      implicit val svalueArb: Arbitrary[SValue] = Arbitrary(svGen)\n      forEvery(Table((\"law\", \"prop\"), SzP.order.laws[SValue].properties: _*)) { (_, p) =>\n        check(p, minSuccessful(50))\n      }"
  },
  {
    "id" : "26b1ac50-492e-4ee1-b5d9-67922ea42f1b",
    "prId" : 5881,
    "comments" : [
      {
        "id" : "21b2d794-9573-4d50-9e14-c89f7b3c44f0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we please use named arguments for all the arguments here? The list is quite unwieldy already.",
        "createdAt" : "2020-05-07T07:39:38Z",
        "updatedAt" : "2020-05-07T07:58:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +480,484 @@    Time.Timestamp.now(),\n    InitialSeeding(Some(txSeed)),\n    Set.empty,\n  )\n"
  },
  {
    "id" : "8a05d9ee-028c-4192-a3fe-6ac7ff8e58e5",
    "prId" : 5881,
    "comments" : [
      {
        "id" : "7c905959-040b-4718-88b2-dbff730c3694",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's keep it concise. ðŸ˜ƒ\r\n```suggestion\r\n    val machine = initMachine(SEImportValue(v))\r\n```",
        "createdAt" : "2020-05-07T07:40:19Z",
        "updatedAt" : "2020-05-07T07:58:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +485,489 @@  private def translatePrimValue(v: Value[Value.AbsoluteContractId]) = {\n    val expr = SEImportValue(v)\n    val machine = initMachine(expr)\n    machine.run() match {\n      case SResultFinalValue(value) => value"
  },
  {
    "id" : "1dcd4298-34b4-47e8-a200-df09ed0b5247",
    "prId" : 5526,
    "comments" : [
      {
        "id" : "72b3add2-a138-4431-b0be-7a81fb461752",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good.",
        "createdAt" : "2020-04-14T08:00:07Z",
        "updatedAt" : "2020-04-24T20:58:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e1355a2c792b820752b3f4a7fe7b384b7ef174c",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +459,463 @@      }\n    }\n  }\n\n  private def ArrayList[X](as: X*): util.ArrayList[X] ="
  },
  {
    "id" : "f2f44592-cd41-434f-82e8-f8cb17b5055f",
    "prId" : 4808,
    "comments" : [
      {
        "id" : "438127eb-f1bc-4ac5-a604-0600c60cbfc7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Delete. ðŸš®",
        "createdAt" : "2020-03-04T15:53:24Z",
        "updatedAt" : "2020-03-09T11:33:56Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5c04c19b740c0002bf5adf440310b440f2393af8",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@      .map(x => SContractId(Value.AbsoluteContractId(Ref.ContractIdString.assertFromString(x))))\n//  private val relativeContractId =\n//    List(0, 1).map(x => SContractId(Value.RelativeContractId(Value.NodeId(x))))\n  private val contractIds = absoluteContractId //++ relativeContractId\n"
  }
]