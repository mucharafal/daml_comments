[
  {
    "id" : "6c107b8e-e033-4b87-bf4c-3fbec59cccee",
    "prId" : 7400,
    "comments" : [
      {
        "id" : "f7de4450-6808-46cf-acfb-28406d23f4cb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why can't we keep or at least adapt the old pretty printer for now?",
        "createdAt" : "2020-09-16T09:02:46Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "04b2c064-6b14-4e39-901c-006db4f6dc4b",
        "parentId" : "f7de4450-6808-46cf-acfb-28406d23f4cb",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "see reply above",
        "createdAt" : "2020-09-16T14:40:05Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : 111,
    "diffHunk" : "@@ -153,87 +153,34 @@ private[lf] object Pretty {\n         text(s\"Cannot serialize the transaction: $msg\")\n     })\n \n-  def prettyFailedAuthorizations(fas: FailedAuthorizations): Doc =\n-    intercalate(\n-      comma + space,\n-      fas.toSeq.map {\n-        // FIXME(JM): pretty-print all the parameters.\n-        case (\n-            nodeId,\n-            FailedAuthorization\n-              .CreateMissingAuthorization(templateId @ _, optLoc @ _, authorizing, required),\n-            ) =>\n-          str(nodeId) & text(\": missing authorization for create, authorizing parties:\") &\n-            intercalate(comma + space, authorizing.map(prettyParty)) +\n-              text(\", at least all of the following parties need to authorize:\") &\n-            intercalate(comma + space, required.map(prettyParty))\n-\n-        case (\n-            nodeId,\n-            FailedAuthorization.MaintainersNotSubsetOfSignatories(\n-              templateId @ _,\n-              optLoc @ _,\n-              signatories,\n-              maintainers,\n-            ),\n-            ) =>\n-          str(nodeId) & text(\": all the maintainers:\") &\n-            intercalate(comma + space, maintainers.map(prettyParty)) +\n-              text(\", need to be signatories:\") &\n-            intercalate(comma + space, signatories.map(prettyParty))\n-\n-        case (\n-            nodeId,\n-            FailedAuthorization\n-              .FetchMissingAuthorization(templateId @ _, optLoc @ _, authorizing, stakeholders),\n-            ) =>\n-          str(nodeId) & text(\": missing authorization for fetch, authorizing parties:\") &\n-            intercalate(comma + space, authorizing.map(prettyParty)) +\n-              text(\", at least one of the following parties need to authorize:\") &\n-            intercalate(comma + space, stakeholders.map(prettyParty))\n-\n-        case (\n-            nodeId,\n-            FailedAuthorization.ExerciseMissingAuthorization(\n-              templateId @ _,\n-              choiceId @ _,\n-              optLoc @ _,\n-              authorizing,\n-              required,\n-            ),\n-            ) =>\n-          str(nodeId) & text(\": missing authorization for exercise, authorizing parties:\") &\n-            intercalate(comma + space, authorizing.map(prettyParty)) +\n-              text(\", exactly the following parties need to authorize::\") &\n-            intercalate(comma + space, required.map(prettyParty))\n-\n-        case (\n-            nodeId,\n-            FailedAuthorization.ActorMismatch(templateId @ _, choiceId @ _, optLoc @ _, actors)) =>\n-          str(nodeId) + text(\": actor mismatch, given actors:\") &\n-            intercalate(comma + space, actors.map(prettyParty))\n-\n-        case (nodeId, FailedAuthorization.NoSignatories(templateId, optLoc @ _)) =>\n-          str(nodeId) + text(s\": $templateId missing signatories\")\n-\n-        case (nodeId, FailedAuthorization.NoControllers(templateId, choiceId, optLoc @ _)) =>\n-          str(nodeId) + text(s\": $templateId $choiceId missing controllers\")\n-\n-        case (\n-            nodeId,\n-            FailedAuthorization.LookupByKeyMissingAuthorization(\n-              templateId @ _,\n-              optLoc @ _,\n-              maintainers,\n-              authorizingParties,\n-            ),\n-            ) =>\n-          str(nodeId) + text(\": missing authorization for lookup by key, authorizing parties:\") &\n-            intercalate(comma + space, authorizingParties.map(prettyParty)) +\n-              text(\" are not a superset of maintainers:\") &\n-            intercalate(comma + space, maintainers.map(prettyParty))\n-      },\n-    )\n+  private def authorizationErrors(failures: Map[NodeId, FailedAuthorization]): String = {"
  },
  {
    "id" : "1697f3a6-ab2d-46dc-8891-150d3cf3686f",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "2c71e179-95bc-4ab4-adee-79461f8b3e20",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This change would have made sense before this PR, wouldn't it? If so, let's please move it into a separate PR upfront. This PR is already big and hard enough to review.",
        "createdAt" : "2020-06-26T11:13:28Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f7eeb0bd-9e61-41bf-85f1-7484b22ff442",
        "parentId" : "2c71e179-95bc-4ab4-adee-79461f8b3e20",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This is a change debug/dev code.\r\nDo you still want to block this PR by pulling out this one small change?",
        "createdAt" : "2020-06-30T15:00:12Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 8,
    "diffHunk" : "@@ -472,10 +472,11 @@ object Pretty {\n       (pat & text(\"=>\") + lineOrSpace + prettySExpr(newIndex)(alt.body)).nested(2)\n     }\n \n-    def prettySELoc(loc: SELoc): Doc = loc match {\n-      case SELocS(i) => char('S') + str(i)\n-      case SELocA(i) => char('A') + str(i)\n-      case SELocF(i) => char('F') + str(i)\n+    def prettySELoc(index: Int)(loc: SELoc): Doc = loc match {"
  },
  {
    "id" : "15206745-b1d4-48ae-bf95-27019036d1e5",
    "prId" : 6297,
    "comments" : [
      {
        "id" : "c3c09967-1553-42f9-8005-95cb61cc66f4",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Are you sure you don't want to preserve this very important piece of documentation? :rofl: ",
        "createdAt" : "2020-06-11T12:48:34Z",
        "updatedAt" : "2020-06-11T13:01:22Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5db306765cc66eac29a6faed9909fa7cdb275558",
    "line" : 40,
    "diffHunk" : "@@ -257,41 +258,40 @@ object Pretty {\n     // the maintainers are induced from the key -- so don't clutter\n     prettyValue(false)(key.key)\n \n-  def prettyVersionedKeyWithMaintainers(\n-      key: KeyWithMaintainers[Transaction.Value[ContractId]]): Doc =\n+  def prettyVersionedKeyWithMaintainers(key: KeyWithMaintainers[Tx.Value[ContractId]]): Doc =\n     // the maintainers are induced from the key -- so don't clutter\n     prettyVersionedValue(false)(key.key)\n \n-  def prettyEventInfo(l: ScenarioLedger)(nodeId: EventId): Doc = {\n+  def prettyEventInfo(l: ScenarioLedger, txId: TransactionId)(nodeId: NodeId): Doc = {\n     def arrowRight(d: Doc) = text(\"└─>\") & d\n     def meta(d: Doc) = text(\"│  \") & d\n-\n-    val ni = l.ledgerData.nodeInfos(nodeId) /* Ekke Ekke Ekke Ekke Ptang Zoo Boing! */"
  }
]