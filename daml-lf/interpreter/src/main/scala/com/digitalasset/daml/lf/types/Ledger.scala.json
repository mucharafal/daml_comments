[
  {
    "id" : "d39f959e-2589-4199-ac8d-ffc7354826ad",
    "prId" : 5932,
    "comments" : [
      {
        "id" : "e458beeb-de89-48ac-9f0d-460ef4d19ad0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`remy.catcha` :slightly_smiling_face: ",
        "createdAt" : "2020-05-11T15:19:51Z",
        "updatedAt" : "2020-05-11T15:23:07Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d006627f-9cb4-4cf2-ac4b-5ff0e0895004",
        "parentId" : "e458beeb-de89-48ac-9f0d-460ef4d19ad0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed. ",
        "createdAt" : "2020-05-11T15:23:22Z",
        "updatedAt" : "2020-05-11T15:23:22Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f666ecf46cc78c2efd8d54dcbea95b2dd61456d7",
    "line" : null,
    "diffHunk" : "@@ -181,18 +181,18 @@ object Ledger {\n       committer: Party,\n       effectiveAt: Time.Timestamp,\n       enrichedTx: EnrichedTransaction,\n-  ): RichTransaction = {\n-    def makeAbs(cid: Value.RelativeContractId) =\n-      Ref.ContractIdString.assertFromString(relativeToContractIdString(commitPrefix, cid))\n+  ): RichTransaction =\n     RichTransaction(\n       committer = committer,\n       effectiveAt = effectiveAt,\n       roots = enrichedTx.roots.map(ScenarioNodeId(commitPrefix, _)),\n       nodes = enrichedTx.nodes.map {\n         case (nodeId, node) =>\n-          ScenarioNodeId(commitPrefix, nodeId) -> node\n-            .resolveRelCid(makeAbs)\n-            .mapNodeId(ScenarioNodeId(commitPrefix, _))\n+          remy.catcha("
  },
  {
    "id" : "ee6cbd8b-a700-4602-9ba3-a2b2befd97d4",
    "prId" : 4221,
    "comments" : [
      {
        "id" : "a2de3d90-3d47-494d-b551-6613c2b0738d",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "How can this string be at most 12 characters long, if it adds to characters and `id` can be at most 11 characters long?",
        "createdAt" : "2020-02-03T17:09:44Z",
        "updatedAt" : "2020-02-03T21:56:31Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f75a67f-28e8-4cec-8cb0-9e5821bdfa76",
        "parentId" : "a2de3d90-3d47-494d-b551-6613c2b0738d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "* `id` is an `Int` converted in `String` (at most 11 chars) \r\n* `#` is 1 char (added by rebase)\r\n* `:` is 1 char \r\ntotal at most 13 (corrected)",
        "createdAt" : "2020-02-03T19:35:19Z",
        "updatedAt" : "2020-02-03T21:56:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9233a4097ca730ce5db7e0b07a328048ff91a0cc",
    "line" : null,
    "diffHunk" : "@@ -66,9 +77,11 @@ object Ledger {\n \n   case class ScenarioTransactionId(index: Int) extends Ordered[ScenarioTransactionId] {\n     def next: ScenarioTransactionId = ScenarioTransactionId(index + 1)\n+    // The resulting LedgerString is at most 11 chars long\n     val id: LedgerString = LedgerString.fromLong(index.toLong)\n     override def compare(that: ScenarioTransactionId): Int = index compare that.index\n-    def makeCommitPrefix: LedgerString = LedgerString.concat(`#`, id, `:`)\n+    // The resulting LedgerString is at most 12 chars long"
  },
  {
    "id" : "854358f7-276f-4f7a-840f-e2d17fd7bff0",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "a8bd4542-f151-4f76-8fc8-51a16f2834de",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Not needed, use `assertNoContractId` instead.",
        "createdAt" : "2020-01-15T09:52:51Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : null,
    "diffHunk" : "@@ -59,12 +59,12 @@ object Ledger {\n     }\n \n   @inline\n-  def assertAbsoluteContractId(cid: ContractId): AbsoluteContractId =\n-    cid match {\n-      case acoid: AbsoluteContractId => acoid\n-      case _: RelativeContractId =>\n-        crash(\"Unexpected relative contract id '$cid'\")\n-    }\n+  def assertNoContractId(cid: ContractId): Nothing =\n+    crash(s\"Not expecting to find a contract id here, but found '$cid'\")\n+\n+  @inline\n+  def assertNoAbsoluteContractId(cid: AbsoluteContractId): Nothing =\n+    crash(s\"Not expecting to find a contract id here, but found '$cid'\")"
  },
  {
    "id" : "5ba6ad8a-f93f-413b-a3c8-c7df1847b483",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "07254029-e797-4f7b-8568-af536d3faefa",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n                            keyWithMaintainers.key.mapContractId(assertNoContractId))\r\n```",
        "createdAt" : "2020-01-15T09:53:03Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : null,
    "diffHunk" : "@@ -1136,7 +1136,9 @@ object Ledger {\n                       val mbNewCache2 = nc.key match {\n                         case None => Right(newCache1)\n                         case Some(keyWithMaintainers) =>\n-                          val gk = GlobalKey(nc.coinst.template, keyWithMaintainers.key)\n+                          val gk = GlobalKey(\n+                            nc.coinst.template,\n+                            keyWithMaintainers.key.mapContractId(assertNoAbsoluteContractId))"
  },
  {
    "id" : "8318d6e4-f396-4af3-824e-0c944a03446f",
    "prId" : 4048,
    "comments" : [
      {
        "id" : "ed5a53dd-de9a-4bfd-af7f-930b064f69da",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n                                  key.key.mapContractId(assertNoContractId)))\r\n```",
        "createdAt" : "2020-01-15T09:53:12Z",
        "updatedAt" : "2020-01-20T14:12:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dc2b942e21c744f7822b8e099b9269bc6d0f16bc",
    "line" : null,
    "diffHunk" : "@@ -1171,7 +1173,10 @@ object Ledger {\n                           nc.key match {\n                             case None => newCache0_1\n                             case Some(key) =>\n-                              newCache0_1.removeKey(GlobalKey(ex.templateId, key.key))\n+                              newCache0_1.removeKey(\n+                                GlobalKey(\n+                                  ex.templateId,\n+                                  key.key.mapContractId(assertNoAbsoluteContractId)))"
  },
  {
    "id" : "9eb3bc66-c180-4a4e-b509-fcdb3501f289",
    "prId" : 3418,
    "comments" : [
      {
        "id" : "b424ad28-d7fd-4da0-814d-58eeb18d353b",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Probably `collection.breakOut` works better in this case.",
        "createdAt" : "2019-11-11T16:06:09Z",
        "updatedAt" : "2019-11-12T10:44:52Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "97bb2012-928b-410f-aabb-6ca509c63401",
        "parentId" : "b424ad28-d7fd-4da0-814d-58eeb18d353b",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "thanks, will change it.",
        "createdAt" : "2019-11-11T16:10:37Z",
        "updatedAt" : "2019-11-12T10:44:52Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b7a5ede3170b9efc7ace29c020405811fb55bdd5",
    "line" : null,
    "diffHunk" : "@@ -162,7 +164,7 @@ object Ledger {\n     committer = committer,\n     effectiveAt = effectiveAt,\n     roots = enrichedTx.roots.map(ScenarioNodeId(commitPrefix, _)),\n-    nodes = enrichedTx.nodes.map {\n+    nodes = TreeMap.empty[ScenarioNodeId, Node] ++ enrichedTx.nodes.map {"
  },
  {
    "id" : "02d69dd3-fbe0-487c-aeaa-76529554bdb6",
    "prId" : 3126,
    "comments" : [
      {
        "id" : "6eabc424-ff57-48a8-81c5-4811762ea1fc",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "@dajmaki, @remyhaemmerle-da, @cocreature: This `disclosures` now strictly returns fewer items. Previously `globalImplicitDisclosure` and `localImplicitDisclosure` was conflated when converting `EnrichedTransaction` to `RichTransaction` (assuming that one can easily convert `AbsoluteContractId` to an `ScenarioNodeId`).\r\n\r\nThis `disclosures` field/method is eventually being used by `ScenarioServiceMain` to convert a ledger to a scenario result to be shown in the IDE. I'm hoping that any bad deviation from the current behavior is caught by some integration tests  between IDE and scenario service. But anyway, could you please confirm that this won't be a problem?",
        "createdAt" : "2019-10-09T10:03:44Z",
        "updatedAt" : "2019-10-16T16:16:12Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33007a9857aac9e59d5820e6be039783e24a2610",
    "line" : 19,
    "diffHunk" : "@@ -123,10 +123,11 @@ object Ledger {\n       roots: ImmArray[ScenarioNodeId],\n       nodes: Map[ScenarioNodeId, Node],\n       explicitDisclosure: Relation[ScenarioNodeId, Party],\n-      implicitDisclosure: Relation[ScenarioNodeId, Party],\n+      localImplicitDisclosure: Relation[ScenarioNodeId, Party],\n+      globalImplicitDisclosure: Relation[AbsoluteContractId, Party],\n       failedAuthorizations: FailedAuthorizations\n   ) {\n-    def disclosures = Relation.union(explicitDisclosure, implicitDisclosure)\n+    def disclosures = Relation.union(explicitDisclosure, localImplicitDisclosure)"
  },
  {
    "id" : "0a13cc7c-b4a5-4be8-bd0f-a9849f9b49ca",
    "prId" : 1967,
    "comments" : [
      {
        "id" : "69b973bc-586a-486d-bc1b-b09db583fe88",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "s/thread/threat",
        "createdAt" : "2019-07-04T09:38:12Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6793673d-c083-4c97-b2b5-6075266eaf85",
        "parentId" : "69b973bc-586a-486d-bc1b-b09db583fe88",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-04T11:50:54Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ab26f081f43a184ed21982c7e26995630d1f49e",
    "line" : null,
    "diffHunk" : "@@ -763,10 +763,9 @@ object Ledger {\n            re-interpreting the transaction.\n \n            Francesco: yes, but there is a key difference: the above scenario\n-           requires a malicious (or at the very least negligent / defective)\n-     *participant*, while in this case we are talking about malicious\n-     *code* being able to induce work. So the \"thread model\" is quite\n-           different.\n+           requires a malicious (or at the very least negligent / defective) *participant*,\n+           while in this case we are talking about malicious *code* being\n+           able to induce work. So the \"thread model\" is quite different."
  }
]