[
  {
    "id" : "a6d4c718-1b64-4855-9ff3-0b7a3f6d493f",
    "prId" : 7778,
    "comments" : [
      {
        "id" : "1b467b35-dbcc-4a5a-a180-603dd588b846",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Why not adding a comment to explicate that this is a non-optimize form of `SBStructProj`",
        "createdAt" : "2020-10-22T12:04:03Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f354d639-e5c2-474d-87f0-0e8dd0de046b",
        "parentId" : "1b467b35-dbcc-4a5a-a180-603dd588b846",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good idea. I'll do that.",
        "createdAt" : "2020-10-22T12:18:53Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6ef549582f052ca0d9abd09ff2f154d159b01849",
    "line" : 17,
    "diffHunk" : "@@ -797,7 +797,19 @@ private[lf] object SBuiltin {\n     }\n   }\n \n-  /** $tupd[field] :: Struct -> a -> Struct */\n+  /** $tproj[field] :: Struct -> a */\n+  final case class SBStructProjByName(field: Ast.FieldName) extends SBuiltinPure(1) {"
  },
  {
    "id" : "e2c03785-a638-47e5-88ac-54cbede85c92",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "7109baa3-51db-4a8a-8fca-30625bb30fef",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Given that we need to change it anyway, let's spell it out. I also think speaking of \"contract observers\" and \"choice observers\" is somewhat inconsistent. It should either be \"template observers\" and \"choice observers\" or \"contract observers\" and \"exercise observers\". I heavily prefer the former.\r\n```suggestion\r\n      val templateObservers = extractParties(args.get(4))\r\n```",
        "createdAt" : "2020-10-16T11:01:00Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -922,10 +923,11 @@ private[lf] object SBuiltin {\n         case v => crash(s\"expect optional parties, got: $v\")\n       }\n       val sigs = extractParties(args.get(3))\n-      val obs = extractParties(args.get(4))\n+      val contractObs = extractParties(args.get(4))"
  },
  {
    "id" : "af89b6a8-d1dd-4b88-bd85-1390406f0074",
    "prId" : 7501,
    "comments" : [
      {
        "id" : "976af669-c4da-46f3-9f2e-8f884458a445",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Why not defining a an abstract class for `OnLedgerBuiltin` ?  Something like :\r\n\r\n```scala\r\nsealed abstract class OnLedgerBuiltin(arity: Int) extends SBuiltin(arity) with Product {\r\n    \r\n    protected def execute(\r\n        args: util.ArrayList[SValue],\r\n        machine: Machine,\r\n        onLedger: OnLedger\r\n    ): Unit\r\n\r\n    final override def execute(args: util.ArrayList[SValue], machine: Machine): Unit =\r\n      machine.withOnLedger(productPrefix)(execute(args, machine, _))\r\n  }\r\n```",
        "createdAt" : "2020-09-29T07:29:58Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dbbbb1ba-43c6-4520-848d-19f7436ee929",
        "parentId" : "976af669-c4da-46f3-9f2e-8f884458a445",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "sounds good, let me give it a try",
        "createdAt" : "2020-09-29T07:34:01Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2b5bcd5-6787-4aca-9c3c-4e9e960a45f8",
        "parentId" : "976af669-c4da-46f3-9f2e-8f884458a445",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Added.",
        "createdAt" : "2020-09-29T07:52:31Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ef7f775c-ee5f-4ffb-8041-41d8138ad353",
        "parentId" : "976af669-c4da-46f3-9f2e-8f884458a445",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-09-29T07:54:51Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : null,
    "diffHunk" : "@@ -840,7 +841,7 @@ private[lf] object SBuiltin {\n     override private[speedy] final def execute(\n         args: util.ArrayList[SValue],\n         machine: Machine,\n-    ): Unit = {\n+    ): Unit = machine.withOnLedger(\"SBUCreate\") { onLedger =>"
  },
  {
    "id" : "78f729d9-913e-41a6-ac0d-6511266dbba7",
    "prId" : 7501,
    "comments" : [
      {
        "id" : "7d2ab1a7-a531-41f8-8ee5-6f1a07d4e372",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n        onLedger: OnLedger,\r\n    ): Unit =\r\n```",
        "createdAt" : "2020-09-29T07:42:32Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "de486070-9d60-47db-a893-30695846ff9a",
        "parentId" : "7d2ab1a7-a531-41f8-8ee5-6f1a07d4e372",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You really love your trailing commas :slightly_smiling_face: ",
        "createdAt" : "2020-09-29T07:52:47Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 394,
    "diffHunk" : "@@ -1250,18 +1252,21 @@ private[lf] object SBuiltin {\n       }\n     }\n \n-    private[this] def executeCommit(args: util.ArrayList[SValue], machine: Machine): Unit =\n-      machine.ptx\n+    private[this] def executeCommit(\n+        args: util.ArrayList[SValue],\n+        machine: Machine,\n+        onLedger: OnLedger): Unit ="
  },
  {
    "id" : "9d1aa5d3-8428-476b-a3f2-143c485350ed",
    "prId" : 7472,
    "comments" : [
      {
        "id" : "59a3bb1f-0b84-4dbd-8bd2-e5d75cc8edf4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Was the `byKey` argument completely unused so far? Strange.",
        "createdAt" : "2020-09-24T09:22:51Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4fb1841d-ef23-41f3-a452-afaa7aca5594",
        "parentId" : "59a3bb1f-0b84-4dbd-8bd2-e5d75cc8edf4",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It is not dropped, it is move to the constructor of the builtin, line 899 ",
        "createdAt" : "2020-09-24T12:23:19Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "570896c0-73e1-4a63-9997-33b74c55c3e5",
        "parentId" : "59a3bb1f-0b84-4dbd-8bd2-e5d75cc8edf4",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Oh right. Thank you.",
        "createdAt" : "2020-09-24T13:44:00Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f87982ebeaafdd21277c2bc4c42b1f7319643a1",
    "line" : 21,
    "diffHunk" : "@@ -912,15 +913,11 @@ private[lf] object SBuiltin {\n         case SOptional(optValue) => optValue.map(extractParties)\n         case v => crash(s\"expect optional parties, got: $v\")\n       }\n-      val byKey = args.get(3) match {"
  },
  {
    "id" : "f62fc951-b36b-460f-aa54-abd956183ea8",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "c502b35b-cb7e-4763-8ac0-04e4ebd23a14",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth adding a comment that the reason we need to preserve the order is to preserve evaluation order?",
        "createdAt" : "2020-09-04T08:26:51Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3b554bcf-7215-4542-a51f-72fcbdbc7edb",
        "parentId" : "c502b35b-cb7e-4763-8ac0-04e4ebd23a14",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-09-04T09:07:15Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 27,
    "diffHunk" : "@@ -816,11 +817,14 @@ private[lf] object SBuiltin {\n   }\n \n   /** $tcon[fields] :: a -> b -> ... -> Struct */\n-  final case class SBStructCon(fields: ImmArray[Name])\n-      extends SBuiltinPure(fields.length)\n+  final case class SBStructCon(inputFieldsOrder: Struct[Int])"
  },
  {
    "id" : "8c16ab06-ce66-491b-967e-b35ae1b37e02",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "23ae71ab-460f-4769-9354-77d0a790f7d0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I like how we pushed the sorting to compile time and keep it cheap at runtime.\r\n\r\nI'm wondering if there's a way to avoid allocating a second array and reuse the `args` array instead? I couldn't come up quickly with a simple way myself though.",
        "createdAt" : "2020-09-04T11:01:58Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2c9a7eed-1afc-4276-8d80-d9364dacc1bf",
        "parentId" : "23ae71ab-460f-4769-9354-77d0a790f7d0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The simplest I could find (while keeping runtime cheap) is as follow. I am not sure it is worthwhile.\r\n\r\n```scala\r\n  // SBStructCon sorts the field after evaluation of its arguments to preserve\r\n  // evaluation order of unordered fields.\r\n  /** $tcon[fields] :: a -> b -> ... -> Struct */\r\n  final case class SBStructCon(inputFieldsOrder: Struct[Int])\r\n      extends SBuiltinPure(inputFieldsOrder.size) {\r\n\r\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n      order(args)\r\n      SStruct(fieldNames, args)\r\n    }\r\n\r\n    private[this] val fieldNames = inputFieldsOrder.mapValues(_ => ())\r\n\r\n    private[this] val permutations: List[(Int, List[Int])] = {\r\n\r\n      val mapping = Array.ofDim[Int](inputFieldsOrder.size)\r\n      mapping.indices.foreach { i =>\r\n        mapping(inputFieldsOrder.toImmArray(i)._2) = i\r\n      }\r\n\r\n      @tailrec\r\n      def loop1(toVisit: Set[Int], acc: List[(Int, List[Int])]): List[(Int, List[Int])] =\r\n        if (toVisit.isEmpty)\r\n          acc\r\n        else {\r\n          val next = toVisit.head\r\n          val (nextToVisit, perm @ (_, others)) = loop2(toVisit - next, next, List.empty)\r\n          val nextAcc = if (others.isEmpty) acc else perm :: acc\r\n          loop1(nextToVisit, nextAcc)\r\n        }\r\n\r\n      @tailrec\r\n      def loop2(toVisit: Set[Int], curr: Int, previous: List[Int]): (Set[Int], (Int, List[Int])) = {\r\n        val next = mapping(curr)\r\n        if (toVisit(next))\r\n          loop2(toVisit - next, next, curr :: previous)\r\n        else\r\n          (toVisit, (curr, previous))\r\n      }\r\n\r\n      loop1(mapping.toSet, List.empty)\r\n    }\r\n\r\n    @inline\r\n    private[this] def order[X](a: util.ArrayList[X]): Unit =\r\n      permutations.foreach {\r\n        case (first, others) =>\r\n          var i = first\r\n          val tmp = a.get(i)\r\n          others.foreach { j =>\r\n            a.set(i, a.get(j))\r\n            i = j\r\n          }\r\n          a.set(i, tmp)\r\n      }\r\n  }\r\n```",
        "createdAt" : "2020-09-04T14:47:18Z",
        "updatedAt" : "2020-09-04T17:38:52Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e06ae6cb-58db-4970-b48a-ce489bed0913",
        "parentId" : "23ae71ab-460f-4769-9354-77d0a790f7d0",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This seems to be a lot of complexity for a gain we can't properly quantify yet. Thus, I'd say it's not worthwhile for now.",
        "createdAt" : "2020-09-07T13:15:54Z",
        "updatedAt" : "2020-09-07T13:15:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 34,
    "diffHunk" : "@@ -815,12 +816,16 @@ private[lf] object SBuiltin {\n     }\n   }\n \n+  // SBStructCon sorts the field after evaluation of its arguments to preserve\n+  // evaluation order of unordered fields.\n   /** $tcon[fields] :: a -> b -> ... -> Struct */\n-  final case class SBStructCon(fields: ImmArray[Name])\n-      extends SBuiltinPure(fields.length)\n-      with SomeArrayEquals {\n+  final case class SBStructCon(inputFieldsOrder: Struct[Int])\n+      extends SBuiltinPure(inputFieldsOrder.size) {\n+    private[this] val fieldNames = inputFieldsOrder.mapValues(_ => ())\n     override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n-      SStruct(fields, args)\n+      val sortedFields = new util.ArrayList[SValue](inputFieldsOrder.size)\n+      inputFieldsOrder.values.foreach(i => sortedFields.add(args.get(i)))\n+      SStruct(fieldNames, sortedFields)"
  },
  {
    "id" : "6777e62d-820a-4547-9dfe-12a14ed7c115",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "31d26ec1-32a5-48cd-a0d8-06964af35587",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we reuse the (almost) same definition from `Compiler.scala` here?",
        "createdAt" : "2020-09-04T11:03:27Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : null,
    "diffHunk" : "@@ -1637,24 +1642,29 @@ private[lf] object SBuiltin {\n         crash(s\"value not a list of parties or party: $v\")\n     }\n \n+  private[this] val keyWithMaintainersStructFields: Struct[Unit] =\n+    Struct.assertFromSeq(List(keyFieldName -> (()), maintainersFieldName -> (())))"
  },
  {
    "id" : "db7931ff-78b9-40c4-a1e0-e4a01bb99edc",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "5cd8cb40-a58b-424a-ad8c-dc48bae223a5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we really need this `sameElements` runtime check here? We're in full control of the code producing the structural record, aren't we?",
        "createdAt" : "2020-09-04T11:04:32Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ba2e0801-eee4-45f3-9439-22fd44cfbdfb",
        "parentId" : "5cd8cb40-a58b-424a-ad8c-dc48bae223a5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "dropped.",
        "createdAt" : "2020-09-04T14:49:18Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : null,
    "diffHunk" : "@@ -1637,24 +1642,29 @@ private[lf] object SBuiltin {\n         crash(s\"value not a list of parties or party: $v\")\n     }\n \n+  private[this] val keyWithMaintainersStructFields: Struct[Unit] =\n+    Struct.assertFromSeq(List(keyFieldName -> (()), maintainersFieldName -> (())))\n+\n+  private[this] val keyIdx = keyWithMaintainersStructFields.indexOf(keyFieldName)\n+  private[this] val maintainerIdx = keyWithMaintainersStructFields.indexOf(maintainersFieldName)\n+\n   private[this] def extractKeyWithMaintainers(\n       v: SValue,\n   ): Node.KeyWithMaintainers[V[Nothing]] =\n     v match {\n-      case SStruct(flds, vals)\n-          if flds.length == 2 && flds(0) == Ast.keyFieldName && flds(1) == Ast.maintainersFieldName =>\n+      case SStruct(flds, vals) if flds.names sameElements keyWithMaintainersStructFields.names =>"
  },
  {
    "id" : "24ec7ec6-5ee5-4ed0-bf2b-2fe0afc8af92",
    "prId" : 7137,
    "comments" : [
      {
        "id" : "3690d8ac-3304-4237-9f62-28891e0d77a8",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      machine.returnValue = args.get(0) match {\r\n        case SContractId(cid) if machine.onLedger =>\r\n             SOptional(Some(SText(cid.coid)))\r\n        case _ => \r\n             SValue.SValue.None\r\n      }  \r\n```",
        "createdAt" : "2020-08-14T09:34:12Z",
        "updatedAt" : "2020-08-17T07:36:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "38e0a798-270d-485e-9078-708753ac84f4",
        "parentId" : "3690d8ac-3304-4237-9f62-28891e0d77a8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This suggestion isn’t correct.\r\n1. You flipped the flag. You are returning `Some` in the `onLedger` case.\r\n2. I would like to validate that we get a contract id even in the onLedger case. Just makes it easier to catch bugs.",
        "createdAt" : "2020-08-17T06:34:34Z",
        "updatedAt" : "2020-08-17T07:36:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3f0c5ed4-b195-46d8-b9a6-8ffeb910aa2d",
        "parentId" : "3690d8ac-3304-4237-9f62-28891e0d77a8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "My bad.\r\nYou could still use `SValue.SValue.None` that save you an allocation.",
        "createdAt" : "2020-08-17T07:21:51Z",
        "updatedAt" : "2020-08-17T07:36:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4aae56c8-67be-450f-a044-4ecfcde28439",
        "parentId" : "3690d8ac-3304-4237-9f62-28891e0d77a8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks, changed!",
        "createdAt" : "2020-08-17T07:26:46Z",
        "updatedAt" : "2020-08-17T07:36:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83a0ad73a1bdb8d23b0f6b6f0bb846eda1c0ad5e",
    "line" : null,
    "diffHunk" : "@@ -305,6 +305,22 @@ private[lf] object SBuiltin {\n     }\n   }\n \n+  final case object SBToTextContractId extends SBuiltin(1) {\n+    override private[speedy] final def execute(\n+        args: util.ArrayList[SValue],\n+        machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SContractId(cid) =>\n+          if (machine.onLedger) {\n+            machine.returnValue = SOptional(None)\n+          } else {\n+            machine.returnValue = SOptional(Some(SText(cid.coid)))\n+          }"
  },
  {
    "id" : "94cf0e31-7ce8-456e-b619-4efd545a78ee",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "51f1a3fe-216d-439e-92d6-86dd86999ac2",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      machine: Machine,\r\n    ): Unit = {\r\n```",
        "createdAt" : "2020-08-05T08:05:32Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "edf858e3-5f7a-4283-be99-0831ca793283",
        "parentId" : "51f1a3fe-216d-439e-92d6-86dd86999ac2",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "did this",
        "createdAt" : "2020-08-05T08:19:55Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : null,
    "diffHunk" : "@@ -36,7 +45,21 @@ private[speedy] sealed abstract class SBuiltin(val arity: Int) {\n   private[speedy] def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n }\n \n+private[speedy] sealed abstract class SBuiltinPure(val arity1: Int) extends SBuiltin(arity1) {\n+\n+  override private[speedy] final def execute(\n+      args: util.ArrayList[SValue],\n+      machine: Machine): Unit = {"
  },
  {
    "id" : "b25b33ab-086d-440a-b349-7f81c6b3634f",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "e2827468-d8b6-4d09-b950-92bd47147526",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  protected def executePure(args: util.ArrayList[SValue]): SValue\r\n```",
        "createdAt" : "2020-08-05T08:07:59Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be1b0a31-a887-4540-b290-4594dc5782d2",
        "parentId" : "e2827468-d8b6-4d09-b950-92bd47147526",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : " We can't make this change, because we need `executePure` to be called from `SExpr` (in the coming ANF PR).\r\n",
        "createdAt" : "2020-08-05T08:29:43Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 33,
    "diffHunk" : "@@ -36,7 +45,21 @@ private[speedy] sealed abstract class SBuiltin(val arity: Int) {\n   private[speedy] def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n }\n \n+private[speedy] sealed abstract class SBuiltinPure(val arity1: Int) extends SBuiltin(arity1) {\n+\n+  override private[speedy] final def execute(\n+      args: util.ArrayList[SValue],\n+      machine: Machine): Unit = {\n+    machine.returnValue = executePure(args)\n+  }\n+\n+  /** Execute the (pure) builtin with 'arity' number of arguments in 'args'.\n+    Returns the resultin value */\n+  private[speedy] def executePure(args: util.ArrayList[SValue]): SValue"
  },
  {
    "id" : "ff18f96f-88a7-41c1-af45-176d4e6eb6a6",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "ba7bc8cc-e8d3-482d-9119-cea67dc56dbe",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    override protected final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n```",
        "createdAt" : "2020-08-05T08:08:34Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 66,
    "diffHunk" : "@@ -154,30 +175,27 @@ private[lf] object SBuiltin {\n         Numeric.divide(scale, x, y),\n       )\n \n-  sealed abstract class SBBinaryOpNumeric(op: (Numeric, Numeric) => Numeric) extends SBuiltin(3) {\n-    override private[speedy] final def execute(\n-        args: util.ArrayList[SValue],\n-        machine: Machine): Unit = {\n+  sealed abstract class SBBinaryOpNumeric(op: (Numeric, Numeric) => Numeric)\n+      extends SBuiltinPure(3) {\n+    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {"
  },
  {
    "id" : "9c25aa94-5dd2-45bf-a075-6353d9531f39",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "54f2c027-a75b-4e60-a37d-d0ef4e6ad74f",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    override protected final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n```",
        "createdAt" : "2020-08-05T08:09:30Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 103,
    "diffHunk" : "@@ -186,27 +204,23 @@ private[lf] object SBuiltin {\n   final case object SBMulNumeric extends SBBinaryOpNumeric2(multiply)\n   final case object SBDivNumeric extends SBBinaryOpNumeric2(divide)\n \n-  final case object SBRoundNumeric extends SBuiltin(3) {\n-    override private[speedy] final def execute(\n-        args: util.ArrayList[SValue],\n-        machine: Machine): Unit = {\n+  final case object SBRoundNumeric extends SBuiltinPure(3) {\n+    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {"
  },
  {
    "id" : "22953eb4-5c43-416d-89ca-a1bc7183cb3a",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "89ecfa29-6ac0-4d2e-8086-fb23585463a4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    Returns the resulting value */\r\n```",
        "createdAt" : "2020-08-05T08:26:34Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a7b4973c-3631-4929-badd-e88c14b981ab",
        "parentId" : "89ecfa29-6ac0-4d2e-8086-fb23585463a4",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "thanks, fixed",
        "createdAt" : "2020-08-05T08:39:46Z",
        "updatedAt" : "2020-08-05T08:39:46Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : null,
    "diffHunk" : "@@ -36,7 +45,22 @@ private[speedy] sealed abstract class SBuiltin(val arity: Int) {\n   private[speedy] def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n }\n \n+private[speedy] sealed abstract class SBuiltinPure(val arity1: Int) extends SBuiltin(arity1) {\n+\n+  override private[speedy] final def execute(\n+      args: util.ArrayList[SValue],\n+      machine: Machine,\n+  ): Unit = {\n+    machine.returnValue = executePure(args)\n+  }\n+\n+  /** Execute the (pure) builtin with 'arity' number of arguments in 'args'.\n+    Returns the resultin value */"
  },
  {
    "id" : "02b7298a-e148-4642-b75a-abb2333b82c2",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "933f0da6-a37b-4e51-a478-a7de5b9f14aa",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Would it make sense to put some sort of inlining annotation here?",
        "createdAt" : "2020-08-05T08:30:04Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2d923433-6880-4d8b-9250-dc5d86e787ec",
        "parentId" : "933f0da6-a37b-4e51-a478-a7de5b9f14aa",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "my earlier experience is that this kind of attempted micro optimization has no benefit.\r\n",
        "createdAt" : "2020-08-05T08:36:24Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 24,
    "diffHunk" : "@@ -36,7 +45,22 @@ private[speedy] sealed abstract class SBuiltin(val arity: Int) {\n   private[speedy] def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n }\n \n+private[speedy] sealed abstract class SBuiltinPure(val arity1: Int) extends SBuiltin(arity1) {\n+\n+  override private[speedy] final def execute("
  },
  {
    "id" : "9a680691-be28-4a45-9b2a-d52134ce5c80",
    "prId" : 6937,
    "comments" : [
      {
        "id" : "eced6de3-cdb7-4852-a70d-d53d6da7ac9d",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n        machine: Machine,\r\n    ): Unit = {\r\n```",
        "createdAt" : "2020-08-03T07:27:03Z",
        "updatedAt" : "2020-08-03T08:03:21Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3c0ef4c1e003e85131c8c95c846d02e9b4d5bb8f",
    "line" : null,
    "diffHunk" : "@@ -750,6 +750,31 @@ private[lf] object SBuiltin {\n     }\n   }\n \n+  /** $rupdmulti[R, [field_1, ..., field_n]] :: R -> a_1 -> ... -> a_n -> R */\n+  final case class SBRecUpdMulti(id: Identifier, updateFields: Array[Int])\n+      extends SBuiltin(1 + updateFields.length)\n+      with SomeArrayEquals {\n+    override private[speedy] final def execute(\n+        args: util.ArrayList[SValue],\n+        machine: Machine): Unit = {"
  },
  {
    "id" : "b426d248-0589-4b65-bb49-65b71e536a97",
    "prId" : 6828,
    "comments" : [
      {
        "id" : "14a22e02-2514-4d34-91ff-57379510f458",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This will be run on every value we get from the ledger and should hence rather be fast. Do we have any idea how expensive `contains` is? Does it get more expensive as we add more versions?",
        "createdAt" : "2020-08-10T13:47:30Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9a865624-8211-4a12-b04d-9f15dd799159",
        "parentId" : "14a22e02-2514-4d34-91ff-57379510f458",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is not particularly optimized. However I think this should be pretty negligible in comparison of the three passes of translations the value traverses (proto to java, java to LF Value, LF Value to Speedy values).\r\n\r\nThis gets also more expensive as we add more versions. If this becomes an issue,  we could just add a cache in `VersionRange#contains` ",
        "createdAt" : "2020-08-10T14:16:41Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2bf3068d-6bdb-4cd9-b36d-8be6912ac089",
        "parentId" : "14a22e02-2514-4d34-91ff-57379510f458",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I see. Thanks for the explanation.",
        "createdAt" : "2020-08-10T15:04:23Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b0a8ac29dc0000fb043ddb635bc6d6a3895606ba",
    "line" : 20,
    "diffHunk" : "@@ -1020,14 +1020,20 @@ private[lf] object SBuiltin {\n               templateId,\n               machine.committers,\n               cbMissing = _ => machine.tryHandleException(),\n-              cbPresent = { coinst =>\n-                // Note that we cannot throw in this continuation -- instead\n-                // set the control appropriately which will crash the machine\n-                // correctly later.\n-                if (coinst.template != templateId)\n-                  machine.ctrl = SEWronglyTypeContractId(coid, templateId, coinst.template)\n-                else\n-                  machine.ctrl = SEImportValue(coinst.arg.value)\n+              cbPresent = {\n+                case V.ContractInst(actualTmplId, V.VersionedValue(version, arg), _) =>\n+                  // Note that we cannot throw in this continuation -- instead\n+                  // set the control appropriately which will crash the machine\n+                  // correctly later.\n+                  machine.ctrl =\n+                    if (actualTmplId != templateId)\n+                      SEDamlException(DamlEWronglyTypedContract(coid, templateId, actualTmplId))\n+                    else if (!machine.inputValueVersions.contains(version))"
  },
  {
    "id" : "22e025f0-dc2c-4bff-ac57-892f618fe9b7",
    "prId" : 6613,
    "comments" : [
      {
        "id" : "5ce50353-da41-4d1f-858d-ae500a12fe6f",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      machine: Machine,\r\n    ): Unit = {\r\n```\r\n\r\nNot a big deal, though. This syntax for multi line arguments helps future diff/merge.\r\n",
        "createdAt" : "2020-07-07T07:23:58Z",
        "updatedAt" : "2020-07-07T07:30:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b842a4f1-4964-4d1e-96c6-3fd6cbfb82d1",
        "parentId" : "5ce50353-da41-4d1f-858d-ae500a12fe6f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Thanks\r\nShould this be the style output by `scalafmt` then?\r\n(Or can that not happen because it requires the programmer to write the trailing `,` ?)",
        "createdAt" : "2020-07-07T07:39:34Z",
        "updatedAt" : "2020-07-07T07:46:11Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "df1d39a9-8a5d-4094-a71e-1d12822d1f0e",
        "parentId" : "5ce50353-da41-4d1f-858d-ae500a12fe6f",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "We had some issues with IntelliJ making scalafmt output a trailing comma before. This might now be fixed in the latest version of IntelliJ 2019; haven't tested it. I expect we'll need to upgrade to IntelliJ 2020 before we can, though, which means waiting for the Bazel plugin to support it.",
        "createdAt" : "2020-07-07T07:51:42Z",
        "updatedAt" : "2020-07-07T07:51:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ae8c8d81c4420164bf92141b4a2b1110c3bf8f16",
    "line" : 40,
    "diffHunk" : "@@ -26,32 +26,36 @@ import scala.collection.immutable.TreeSet\n \n /**\n   Speedy builtins are stratified into two layers:\n-  Parent: `SBuiltinMaybeHungry`, child: `SBuiltin` (which are never hungry).\n-  Hungry means, may throw SpeedyHungry.\n+  Parent: `SBuiltinEffect`, child: `SBuiltin` (which are pure).\n \n-  Non-hungry builtins can be treated specially because their evaluation is immediate.\n+  Effectful builtin functions may raise `SpeedyHungry` exceptions or change machine state.\n+  Pure builtins can be treated specially because their evaluation is immediate.\n   This fact is used by the execution of the ANF expression form: `SELet1Builtin`.\n \n-  The vast majority of the builtins are nevery hungry, and so they extend `SBuiltin`\n-  There are 7 hungry builtins which extend `SBuiltinMaybeHungry`\n+  Most builtins are pure, and so they extend `SBuiltin`\n   */\n-/** Speedy builtin functions that may raise `SpeedyHungry` exceptions. */\n-private[speedy] sealed abstract class SBuiltinMaybeHungry(val arity: Int) {\n+private[speedy] sealed abstract class SBuiltinEffect(val arity: Int) {\n   // Helper for constructing expressions applying this builtin.\n   // E.g. SBCons(SEVar(1), SEVar(2))\n   private[speedy] def apply(args: SExpr*): SExpr =\n     SEApp(SEBuiltin(this), args.toArray)\n \n   /** Execute the builtin with 'arity' number of arguments in 'args'.\n     * Updates the machine state accordingly. */\n-  private[speedy] def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n+  private[speedy] def executeEffect(args: util.ArrayList[SValue], machine: Machine): Unit\n }\n \n-private[speedy] sealed abstract class SBuiltin(val arity1: Int)\n-    extends SBuiltinMaybeHungry(arity1) {\n-  // TODO: define evaluate, and convert all subclasses to this simpler form\n-  // def evaluate(args: util.ArrayList[SValue]): SValue\n-  // Then execute can be defined in terms of evaluate. Like how it is done in `SExprAtomic`.\n+private[speedy] sealed abstract class SBuiltin(val arity1: Int) extends SBuiltinEffect(arity1) {\n+\n+  override private[speedy] final def executeEffect(\n+      args: util.ArrayList[SValue],\n+      machine: Machine): Unit = {"
  },
  {
    "id" : "a95b461b-e030-4996-9a33-ed3486f5216b",
    "prId" : 6579,
    "comments" : [
      {
        "id" : "c9b0079e-4a18-45a4-9010-46e5d3ed60b2",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Other `SBuiltin` implementations use `final def execute`. Should this one be `final` as well?",
        "createdAt" : "2020-07-02T10:28:04Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "58c88167-c7ae-4e2b-a2b5-832bc40cb0fd",
        "parentId" : "c9b0079e-4a18-45a4-9010-46e5d3ed60b2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch. ",
        "createdAt" : "2020-07-02T10:55:30Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : null,
    "diffHunk" : "@@ -199,7 +200,7 @@ object SBuiltin {\n   final case object SBDivNumeric extends SBBinaryOpNumeric2(divide)\n \n   final case object SBRoundNumeric extends SBuiltin(3) {\n-    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+    override def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "a028bd08-2761-40a2-a747-6c302c147a66",
    "prId" : 6579,
    "comments" : [
      {
        "id" : "293eb838-6b28-4c56-a26a-3adf0b907682",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n    override final def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\r\n```",
        "createdAt" : "2020-07-02T11:19:13Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : null,
    "diffHunk" : "@@ -199,7 +200,7 @@ object SBuiltin {\n   final case object SBDivNumeric extends SBBinaryOpNumeric2(divide)\n \n   final case object SBRoundNumeric extends SBuiltin(3) {\n-    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+    override override final def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "b42b2366-0af8-40f4-84ad-97dabd54273d",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "7de06ccd-7f74-4441-ba3c-0bb7011c9ee2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n/** Speedy builtin functions that may raise `SpeedyHungry` exceptions. */\r\n```",
        "createdAt" : "2020-06-26T11:15:27Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2c03ceed-229d-4347-bb38-0beb511c0270",
        "parentId" : "7de06ccd-7f74-4441-ba3c-0bb7011c9ee2",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-06-30T15:00:21Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -24,8 +24,19 @@ import com.daml.lf.transaction.Node.{GlobalKey, KeyWithMaintainers}\n import scala.collection.JavaConverters._\n import scala.collection.immutable.TreeSet\n \n+/**\n+  Speedy builtins are stratified into two layers:\n+  Parent: `SBuiltinMaybeHungry`, child: `SBuiltin` (which are never hungry).\n+  Hungry means, may throw SpeedyHungry.\n+\n+  Non-hungry builtins can be treated specially because their evaluation is immediate.\n+  This fact is used by the execution of the ANF expression form: `SELet1Builtin`.\n+\n+  The vast majority of the builtins are nevery hungry, and so they extend `SBuiltin`\n+  There are 7 hungry builtins which extend `SBuiltinMaybeHungry`\n+  */\n /** Speedy builtin functions */"
  },
  {
    "id" : "335932bd-569b-4d6e-ba45-0728923e19e2",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "648c3ba2-7e2b-4ea6-9aed-3e5fdf8e0cf9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is this `TODO` crucial for this PR to work or something you want to address in a follow-up PR?",
        "createdAt" : "2020-06-26T11:15:52Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c9962e53-0a9a-44a9-8406-e2fa9b1abc4a",
        "parentId" : "648c3ba2-7e2b-4ea6-9aed-3e5fdf8e0cf9",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yup, we made this issue #6523",
        "createdAt" : "2020-06-30T15:00:56Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 27,
    "diffHunk" : "@@ -36,7 +47,14 @@ sealed abstract class SBuiltin(val arity: Int) {\n   def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n }\n \n+sealed abstract class SBuiltin(val arity1: Int) extends SBuiltinMaybeHungry(arity1) {\n+  // TODO: define evaluate, and convert all subclasses to this simpler form"
  },
  {
    "id" : "26aafd69-7cb3-4e52-b9c3-bbf884f89c33",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "cb026c2a-5097-4224-b6db-805ea8ceb0df",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does the `1` in `arity1` have a meaning? To me it looks just like `arity`.",
        "createdAt" : "2020-06-26T11:16:18Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c18fa072-bdad-4d32-812c-320792ad9647",
        "parentId" : "cb026c2a-5097-4224-b6db-805ea8ceb0df",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Scala wont let this variable be named `arity`. I assume because it already in scope in a parent class. Hence the suffix `1`",
        "createdAt" : "2020-06-30T15:01:45Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5cf035a-8bd4-4795-b306-eefd8f9d0eb2",
        "parentId" : "cb026c2a-5097-4224-b6db-805ea8ceb0df",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I sadly understand.",
        "createdAt" : "2020-06-30T16:45:02Z",
        "updatedAt" : "2020-06-30T16:46:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 26,
    "diffHunk" : "@@ -36,7 +47,14 @@ sealed abstract class SBuiltin(val arity: Int) {\n   def execute(args: util.ArrayList[SValue], machine: Machine): Unit\n }\n \n+sealed abstract class SBuiltin(val arity1: Int) extends SBuiltinMaybeHungry(arity1) {"
  },
  {
    "id" : "7276c989-8a01-4d89-86ce-74b3e2b8f761",
    "prId" : 5811,
    "comments" : [
      {
        "id" : "36acc468-cb32-494d-bb51-0cffe7b9399e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Just to be a bit picky. following Scala convention you should not change capitalization when you rename import. \r\nBasically a package should start with lower case and Object should start with upper case.  ",
        "createdAt" : "2020-05-02T14:59:30Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : null,
    "diffHunk" : "@@ -13,15 +13,10 @@ import com.daml.lf.data.Numeric.Scale\n import com.daml.lf.language.Ast\n import com.daml.lf.speedy.SError._\n import com.daml.lf.speedy.SExpr._\n-import com.daml.lf.speedy.Speedy.{\n-  CtrlImportValue,\n-  CtrlValue,\n-  CtrlWronglyTypeContractId,\n-  Machine,\n-  SpeedyHungry\n-}\n+import com.daml.lf.speedy.Speedy.{Machine, SpeedyHungry}\n import com.daml.lf.speedy.SResult._\n import com.daml.lf.speedy.SValue._\n+import com.daml.lf.speedy.SValue.{SValue => sv}"
  },
  {
    "id" : "5f0088d9-b3aa-4997-a362-de76b6fa5dda",
    "prId" : 5811,
    "comments" : [
      {
        "id" : "9e470ab9-90fa-44de-bf39-04e5f0c075d5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@nickchapman-da @remyhaemmerle-da What's _operational_ the difference between\r\n```scala\r\nmbCoid.map(SContractId)\r\n```\r\nand\r\n```scala\r\nmbCoid.map { coid => SContractId(coid) }\r\n```\r\nIn other words, why would you eta-expand? I've seen changes like this in other places too.",
        "createdAt" : "2020-05-06T09:22:19Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "08e78721-27fa-45a1-b85a-3fe0940ddc40",
        "parentId" : "9e470ab9-90fa-44de-bf39-04e5f0c075d5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not think there is any operational difference. \r\nHowever  `machine.returnValue = SOptional(mbCoid.map(SContractId))` is more idiomatic. ",
        "createdAt" : "2020-05-06T11:41:25Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : 765,
    "diffHunk" : "@@ -1008,7 +977,9 @@ object SBuiltin {\n       // check if we find it locally\n       machine.ptx.keys.get(gkey) match {\n         case Some(mbCoid) =>\n-          machine.ctrl = CtrlValue(SOptional(mbCoid.map(SContractId)))\n+          machine.returnValue = SOptional(mbCoid.map { coid =>\n+            SContractId(coid)\n+          })"
  },
  {
    "id" : "ba2c08c2-9f1b-4de6-93b4-285228674ac8",
    "prId" : 5811,
    "comments" : [
      {
        "id" : "a7cf3b64-5f37-46ae-9fec-b3da6c5e9c22",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "should this be: `machine.returnValue = SV.None` ?",
        "createdAt" : "2020-05-06T12:19:18Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a36c957-419e-4046-b9e1-cd14407591b5",
        "parentId" : "a7cf3b64-5f37-46ae-9fec-b3da6c5e9c22",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "and some other places",
        "createdAt" : "2020-05-06T12:20:43Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "94f654d9-758b-4f4a-91cf-9735e2444f76",
        "parentId" : "a7cf3b64-5f37-46ae-9fec-b3da6c5e9c22",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `machine.returnValue = ` is in line 343.",
        "createdAt" : "2020-05-06T12:23:30Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : 252,
    "diffHunk" : "@@ -365,14 +352,12 @@ object SBuiltin {\n             // potentially very costly String to BigDecimal conversions. Take for example the String\n             // \"1.\" followed by millions of '0's\n             val newString = s\"$signPart$intPart.${Option(decPartOrNull).getOrElse(\"\")}\"\n-            machine.returnValue(\n-              SOptional(Some(SNumeric(Numeric.assertFromBigDecimal(scale, BigDecimal(newString))))),\n-            )\n+            SOptional(Some(SNumeric(Numeric.assertFromBigDecimal(scale, BigDecimal(newString)))))\n           } else {\n-            machine.returnValue(SV.None)\n+            SV.None"
  },
  {
    "id" : "bb984cc5-1e4c-4cd4-9dab-8327b9279b19",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "6f0e005c-efa3-4e7a-8706-c01768018994",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "I don't understand why this code should have any effect, if the type signature in the commet of `SBSBeginCommit` is still up-to-date. Seeing that it extends `SBuiltin(2)`, there shouldn't be any contractIds in `args`. Am I missing something?\r\nOr is it that the first argument of type `Party` can be a complex expression referring to contract IDs?",
        "createdAt" : "2020-04-02T09:31:29Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "92f46884-b17e-4a63-9115-85951a1c858f",
        "parentId" : "6f0e005c-efa3-4e7a-8706-c01768018994",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. I was too quick. \r\nAnyway, I am not sure I can implement the check of freshness for scenarios. \r\nI will probably do a first pass without scenario, and see in a second time if it can be added .",
        "createdAt" : "2020-04-02T10:36:45Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a2282555-147d-40d9-86ff-5676979b937e",
        "parentId" : "6f0e005c-efa3-4e7a-8706-c01768018994",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "contract id freshness is not does in case of scenarios. ",
        "createdAt" : "2020-04-03T16:10:39Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a7d2b4d4-4844-45f4-92d0-eed932990e7b",
        "parentId" : "6f0e005c-efa3-4e7a-8706-c01768018994",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "rewritten.",
        "createdAt" : "2020-04-28T17:22:08Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : null,
    "diffHunk" : "@@ -1232,6 +1235,10 @@ object SBuiltin {\n       machine.committers = extractParties(args.get(0))\n       machine.commitLocation = optLocation\n       machine.ctrl = CtrlValue.Unit\n+      val inputContractIds = args.asScala.foldLeft(Set.empty[V.ContractId])("
  },
  {
    "id" : "7262ecb4-b8ae-45a5-a997-94321c2bfee8",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "12eafb96-f879-4ec0-8772-3f90d5b86b59",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "This looks fishy. You're calling `go`, which modifies `cids`, after you're getting the `result` out.",
        "createdAt" : "2020-04-02T10:16:23Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "61b3528f-dd3b-4162-8365-aecc86da6fd7",
        "parentId" : "12eafb96-f879-4ec0-8772-3f90d5b86b59",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "indeed. :(",
        "createdAt" : "2020-04-02T10:47:11Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : null,
    "diffHunk" : "@@ -991,12 +999,14 @@ object SBuiltin {\n                   id.packageId,\n                   pkg => {\n                     machine.compiledPackages = pkg\n-                    machine.ctrl = translateValue(machine, value)\n+                    importValue(machine, value)\n                   }\n                 ))\n           }\n       }\n-    CtrlValue(go(value))\n+\n+    machine.addGlobalContractIds(cids.result())"
  },
  {
    "id" : "9b7e2364-5369-4cf9-86de-d60919ed651b",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "f6eb5789-d9b5-40e8-be3e-2ec570a25cc4",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "`importValue` will throw if there's a clash of discriminators, but the comment a few lines above says that we must not throw here. This is not consistent.",
        "createdAt" : "2020-04-02T10:18:54Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03c3616d-20de-4fa2-b2c6-2dbd16d2054a",
        "parentId" : "f6eb5789-d9b5-40e8-be3e-2ec570a25cc4",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed. ",
        "createdAt" : "2020-04-28T17:22:20Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : null,
    "diffHunk" : "@@ -1013,33 +1023,25 @@ object SBuiltin {\n       }\n       val coinst =\n         machine.ptx\n-          .lookupCachedContract(coid)\n+          .lookupLocalContract(coid)\n           .getOrElse(\n             coid match {\n-              case V.AbsoluteContractId.V1(discriminator, _)\n-                  if machine.ptx.localContracts.isDefinedAt(\n-                    V.AbsoluteContractId.V1(discriminator)) =>\n-                crash(\n-                  s\"The local contract discriminator $discriminator is not fresh in the transaction\")\n               case acoid: V.AbsoluteContractId =>\n                 throw SpeedyHungry(\n                   SResultNeedContract(\n                     acoid,\n                     templateId,\n                     machine.committers,\n                     cbMissing = _ => machine.tryHandleException(),\n-                    cbPresent = {\n-                      coinst =>\n-                        // Note that we cannot throw in this continuation -- instead\n-                        // set the control appropriately which will crash the machine\n-                        // correctly later.\n-                        if (coinst.template != templateId) {\n-                          machine.ctrl =\n-                            CtrlWronglyTypeContractId(acoid, templateId, coinst.template)\n-                        } else {\n-                          machine.ptx = machine.ptx.cachedContract(coid, coinst)\n-                          machine.ctrl = translateValue(machine, coinst.arg.value)\n-                        }\n+                    cbPresent = { coinst =>\n+                      // Note that we cannot throw in this continuation -- instead\n+                      // set the control appropriately which will crash the machine\n+                      // correctly later.\n+                      if (coinst.template != templateId) {\n+                        machine.ctrl = CtrlWronglyTypeContractId(acoid, templateId, coinst.template)\n+                      } else {\n+                        importValue(machine, coinst.arg.value)"
  },
  {
    "id" : "b1e38da8-cc16-44ff-8fd7-ca6685adf74b",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "765a01a4-d0bd-4e71-baca-ecefa13dc9ed",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "I wonder whether you want to check here that the contract ID in `args0` does not clash w.r.t. discriminators. If we reinterpret a tree, the contract ID might come from a `fetchByKey` construct which is translated into a fetch node only. So the fetched contract ID might come out of nowhere. But I'm not sure whether this can happen on this code path.",
        "createdAt" : "2020-04-02T10:23:47Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "80b6deb6-1001-40ae-8601-25615139dec0",
        "parentId" : "765a01a4-d0bd-4e71-baca-ecefa13dc9ed",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Here I do not want to check the contract in `args0`. \r\nThe check of contract gathering by contract key should be done in  `SBULookupKey` (done) and in `SBUFetchKey` (currently missing) ",
        "createdAt" : "2020-04-02T10:45:21Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : 47,
    "diffHunk" : "@@ -1013,33 +1023,25 @@ object SBuiltin {\n       }"
  },
  {
    "id" : "f15cb318-a671-43ad-b9c9-e47fca54f168",
    "prId" : 5048,
    "comments" : [
      {
        "id" : "7babed2c-8b59-4fb5-beed-2379744cf5c5",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n  // This function translates well-typed values\r\n```",
        "createdAt" : "2020-03-18T07:01:03Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a58b8b64400741795af304d763a8e244b07dcb09",
    "line" : null,
    "diffHunk" : "@@ -902,6 +903,105 @@ object SBuiltin {\n     }\n   }\n \n+  // This function translates well-type values"
  },
  {
    "id" : "a30db9a9-3b49-487e-a057-8771836a59c9",
    "prId" : 5048,
    "comments" : [
      {
        "id" : "704a9ff8-eb6d-48e9-ab40-2d56495563cb",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Is the \"positive\" `ValueEnum(Some(id), ...)` missing?\r\n\r\nEdit: Ah no, it's further down. Maybe colocate the two cases?",
        "createdAt" : "2020-03-18T07:09:37Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b8b64400741795af304d763a8e244b07dcb09",
    "line" : 87,
    "diffHunk" : "@@ -902,6 +903,105 @@ object SBuiltin {\n     }\n   }\n \n+  // This function translates well-type values\n+  private def translateValue(machine: Machine, value: V[V.ContractId]): CtrlValue = {\n+    def go(value0: V[V.ContractId]): SValue =\n+      value0 match {\n+        case V.ValueList(vs) => SList(vs.map[SValue](go))\n+        case V.ValueContractId(coid) => SContractId(coid)\n+        case V.ValueInt64(x) => SInt64(x)\n+        case V.ValueNumeric(x) => SNumeric(x)\n+        case V.ValueText(t) => SText(t)\n+        case V.ValueTimestamp(t) => STimestamp(t)\n+        case V.ValueParty(p) => SParty(p)\n+        case V.ValueBool(b) => SBool(b)\n+        case V.ValueDate(x) => SDate(x)\n+        case V.ValueUnit => SUnit\n+        case V.ValueRecord(Some(id), fs) =>\n+          val fields = Name.Array.ofDim(fs.length)\n+          val values = new util.ArrayList[SValue](fields.length)\n+          fs.foreach {\n+            case (optk, v) =>\n+              optk match {\n+                case None =>\n+                  throw crash(\"SValue.fromValue: record missing field name\")\n+                case Some(k) =>\n+                  fields(values.size) = k\n+                  val _ = values.add(go(v))\n+              }\n+          }\n+          SRecord(id, fields, values)\n+        case V.ValueRecord(None, _) =>\n+          crash(\"SValue.fromValue: record missing identifier\")\n+        case V.ValueStruct(fs) =>\n+          val fields = Name.Array.ofDim(fs.length)\n+          val values = new util.ArrayList[SValue](fields.length)\n+          fs.foreach {\n+            case (k, v) =>\n+              fields(values.size) = k\n+              val _ = values.add(go(v))\n+          }\n+          SStruct(fields, values)\n+        case V.ValueVariant(None, _variant @ _, _value @ _) =>\n+          crash(\"SValue.fromValue: variant without identifier\")\n+        case V.ValueEnum(None, constructor @ _) =>"
  },
  {
    "id" : "4be06202-1117-4c0a-998c-166d9ae32efb",
    "prId" : 5048,
    "comments" : [
      {
        "id" : "053e13a2-7434-496e-840f-2a1070f043fc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like this is only used for translating the input value of a DAML script. Why don’t we just call `translateValue` directly for that (similarly to how we called `fromValue` before) instead of adding a new builtin that isn’t used anywhere else?",
        "createdAt" : "2020-03-18T07:38:36Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d6fea8c9-e0f1-451b-8dd1-dda1c8b63176",
        "parentId" : "053e13a2-7434-496e-840f-2a1070f043fc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The problem is that `translateValue` may throw exceptions to ask for the package. \r\nI do not know how to handle it. \r\nIf you some idea, or if you want of fix you are welcome.",
        "createdAt" : "2020-03-18T08:06:54Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b5ec417-2d8c-4ebd-be49-959743b665d4",
        "parentId" : "053e13a2-7434-496e-840f-2a1070f043fc",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It only throws an exception if a package is not already in `compiledPackages` right? That will never happen for the script runner so we should be fine to just call it.",
        "createdAt" : "2020-03-18T08:08:53Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "69855005-d4c0-40a2-a246-1e94b9aa9837",
        "parentId" : "053e13a2-7434-496e-840f-2a1070f043fc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-03-18T08:12:58Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a58b8b64400741795af304d763a8e244b07dcb09",
    "line" : null,
    "diffHunk" : "@@ -902,6 +903,105 @@ object SBuiltin {\n     }\n   }\n \n+  // This function translates well-type values\n+  private def translateValue(machine: Machine, value: V[V.ContractId]): CtrlValue = {\n+    def go(value0: V[V.ContractId]): SValue =\n+      value0 match {\n+        case V.ValueList(vs) => SList(vs.map[SValue](go))\n+        case V.ValueContractId(coid) => SContractId(coid)\n+        case V.ValueInt64(x) => SInt64(x)\n+        case V.ValueNumeric(x) => SNumeric(x)\n+        case V.ValueText(t) => SText(t)\n+        case V.ValueTimestamp(t) => STimestamp(t)\n+        case V.ValueParty(p) => SParty(p)\n+        case V.ValueBool(b) => SBool(b)\n+        case V.ValueDate(x) => SDate(x)\n+        case V.ValueUnit => SUnit\n+        case V.ValueRecord(Some(id), fs) =>\n+          val fields = Name.Array.ofDim(fs.length)\n+          val values = new util.ArrayList[SValue](fields.length)\n+          fs.foreach {\n+            case (optk, v) =>\n+              optk match {\n+                case None =>\n+                  throw crash(\"SValue.fromValue: record missing field name\")\n+                case Some(k) =>\n+                  fields(values.size) = k\n+                  val _ = values.add(go(v))\n+              }\n+          }\n+          SRecord(id, fields, values)\n+        case V.ValueRecord(None, _) =>\n+          crash(\"SValue.fromValue: record missing identifier\")\n+        case V.ValueStruct(fs) =>\n+          val fields = Name.Array.ofDim(fs.length)\n+          val values = new util.ArrayList[SValue](fields.length)\n+          fs.foreach {\n+            case (k, v) =>\n+              fields(values.size) = k\n+              val _ = values.add(go(v))\n+          }\n+          SStruct(fields, values)\n+        case V.ValueVariant(None, _variant @ _, _value @ _) =>\n+          crash(\"SValue.fromValue: variant without identifier\")\n+        case V.ValueEnum(None, constructor @ _) =>\n+          crash(\"SValue.fromValue: enum without identifier\")\n+        case V.ValueOptional(mbV) =>\n+          SOptional(mbV.map(go))\n+        case V.ValueTextMap(map) =>\n+          STextMap(map.mapValue(go).toHashMap)\n+        case V.ValueGenMap(entries) =>\n+          SGenMap(\n+            entries.iterator.map { case (k, v) => go(k) -> go(v) }\n+          )\n+        case V.ValueVariant(Some(id), variant, value) =>\n+          machine.compiledPackages.getPackage(id.packageId) match {\n+            case Some(pkg) =>\n+              pkg.lookupIdentifier(id.qualifiedName).fold(crash, identity) match {\n+                case Ast.DDataType(_, _, data: Ast.DataVariant) =>\n+                  SVariant(id, variant, data.constructorRank(variant), go(value))\n+                case _ =>\n+                  crash(s\"definition for variant $id not found\")\n+              }\n+            case None =>\n+              throw SpeedyHungry(\n+                SResultNeedPackage(\n+                  id.packageId,\n+                  pkg => {\n+                    machine.compiledPackages = pkg\n+                    machine.ctrl = translateValue(machine, value)\n+                  }\n+                ))\n+          }\n+        case V.ValueEnum(Some(id), constructor) =>\n+          machine.compiledPackages.getPackage(id.packageId) match {\n+            case Some(pkg) =>\n+              pkg.lookupIdentifier(id.qualifiedName).fold(crash, identity) match {\n+                case Ast.DDataType(_, _, data: Ast.DataEnum) =>\n+                  SEnum(id, constructor, data.constructorRank(constructor))\n+                case _ =>\n+                  crash(s\"definition for variant $id not found\")\n+              }\n+            case None =>\n+              throw SpeedyHungry(\n+                SResultNeedPackage(\n+                  id.packageId,\n+                  pkg => {\n+                    machine.compiledPackages = pkg\n+                    machine.ctrl = translateValue(machine, value)\n+                  }\n+                ))\n+          }\n+      }\n+    CtrlValue(go(value))\n+  }\n+\n+  final case class SBTranslateValue(value: V[V.ContractId]) extends SBuiltin(0) {"
  },
  {
    "id" : "9ead2e15-9327-4e8b-92ef-478b7beea9b5",
    "prId" : 4364,
    "comments" : [
      {
        "id" : "91657a85-a991-422a-8476-859ccc581a6b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Use `assertNoCid`.",
        "createdAt" : "2020-02-04T09:35:34Z",
        "updatedAt" : "2020-02-05T15:43:03Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "12393430-253b-488e-948e-93de1eb961c9",
        "parentId" : "91657a85-a991-422a-8476-859ccc581a6b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-02-04T15:36:17Z",
        "updatedAt" : "2020-02-05T15:43:03Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed7aa085e66c23d39da73f99079c0647ab202aa2",
    "line" : null,
    "diffHunk" : "@@ -1528,7 +1528,8 @@ object SBuiltin {\n           case Left(err) => crash(err)\n           case Right(keyVal) =>\n             val keyWithoutContractIds =\n-              keyVal.mapContractId(coid => crash(s\"Unexpected contract id in key: $coid\"))\n+              V.VersionedValue.map1((coid: V.ContractId) =>"
  },
  {
    "id" : "73edca2f-695c-4ee0-93f5-44f1c993afb3",
    "prId" : 4364,
    "comments" : [
      {
        "id" : "36ab25a3-d429-4b65-96eb-aca38576a71b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Do not use `crash` here.",
        "createdAt" : "2020-02-04T15:46:25Z",
        "updatedAt" : "2020-02-05T15:43:03Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ed7aa085e66c23d39da73f99079c0647ab202aa2",
    "line" : null,
    "diffHunk" : "@@ -1524,16 +1524,20 @@ object SBuiltin {\n     v match {\n       case SStruct(flds, vals)\n           if flds.length == 2 && flds(0) == keyFieldName && flds(1) == maintainersFieldName =>\n-        asVersionedValue(vals.get(0).toValue) match {\n-          case Left(err) => crash(err)\n-          case Right(keyVal) =>\n-            val keyWithoutContractIds =\n-              keyVal.mapContractId(coid => crash(s\"Unexpected contract id in key: $coid\"))\n+        rightOrCrash(\n+          for {\n+            keyVal <- vals\n+              .get(0)\n+              .toValue\n+              .ensureNoCid\n+              .left\n+              .map(coid => crash(s\"Unexpected contract id in key: $coid\"))"
  },
  {
    "id" : "e09c76e2-4b62-441f-a371-5c3ff54f7f53",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "c00d4a95-f76d-4926-b6e8-496a2d0dcebe",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "this Set is immutable, not sure why `toList.toSet` was there",
        "createdAt" : "2020-01-06T03:10:01Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2612fda1-2c7c-4b70-9c73-73766b773195",
        "parentId" : "c00d4a95-f76d-4926-b6e8-496a2d0dcebe",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n\r\nThe explanation is very simple. If you looked the history of `committer(s)`, you could saw that  it used to be an `Option[Party]`. This line was forgotten when `committer(s)` become a Set.",
        "createdAt" : "2020-01-06T08:39:27Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 5,
    "diffHunk" : "@@ -1007,7 +1007,7 @@ object SBuiltin {\n       val stakeholders = observers union signatories\n       val contextActors = machine.ptx.context match {\n         case ContextExercises(ctx) => ctx.actingParties union ctx.signatories\n-        case ContextRoot => machine.committers.toList.toSet\n+        case ContextRoot => machine.committers"
  },
  {
    "id" : "f8ecfe6d-1be0-4198-99a2-ed07cc1d9b08",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "056a1404-ba03-4bac-bb3d-f4ee6597eeab",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "not working with Utf8",
        "createdAt" : "2019-12-04T16:39:07Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c07b062b-5514-4e05-9177-b69ca7efd48d",
        "parentId" : "056a1404-ba03-4bac-bb3d-f4ee6597eeab",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That’s a fair point. Given that our goal is benchmarking we should try to roughly match the performance of the eventual operations even if we don’t support them in their full generality for now.",
        "createdAt" : "2019-12-04T16:55:15Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13dfa54f-4bef-4f2b-b4a7-9539410fcbf7",
        "parentId" : "056a1404-ba03-4bac-bb3d-f4ee6597eeab",
        "author" : null,
        "body" : "Alternatively, we switch to using UTF16 strings like Java 🙃  ",
        "createdAt" : "2019-12-04T17:19:35Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))"
  },
  {
    "id" : "6d8dfd42-f579-4bc4-b68b-23d3371806a2",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "6b7527f7-b93b-4ddb-af25-8225e9d43206",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "not working with UTF8",
        "createdAt" : "2019-12-04T16:39:31Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "be27a079-060c-4983-9fff-5a04aed42bfb",
        "parentId" : "6b7527f7-b93b-4ddb-af25-8225e9d43206",
        "author" : null,
        "body" : "Are you certain this would not work with UTF8? If both the needle and the haystack are UTF8, this should find the first occurence of the needle just fine.\r\n",
        "createdAt" : "2019-12-04T16:49:03Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0a2c4ff4-fa6a-45af-a81d-0b9414816f16",
        "parentId" : "6b7527f7-b93b-4ddb-af25-8225e9d43206",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m also not quite sure I see the issue here.",
        "createdAt" : "2019-12-04T16:55:53Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "167b74e2-6786-4e25-99a4-6b4018533bca",
        "parentId" : "6b7527f7-b93b-4ddb-af25-8225e9d43206",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "`\"😂b\".indexOfSlice(\"b\")` returns 2. I was expecting 1.",
        "createdAt" : "2019-12-04T18:03:14Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a00d8108-4a35-4eb9-9496-ee88600cd94e",
        "parentId" : "6b7527f7-b93b-4ddb-af25-8225e9d43206",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, so we will locate the right position but we will return the UTF16 codepoint of that position instead of the number of characters or whatever that thingy is called (edit: grapheme iirc)",
        "createdAt" : "2019-12-04T18:04:44Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)"
  },
  {
    "id" : "d07ca086-9262-4032-87f3-35c412c47ec7",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "0b48ab3f-dce6-41d2-b423-2749feea440d",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "not working with UTF8",
        "createdAt" : "2019-12-04T16:39:53Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SOptional(None))\n+              } else {\n+                machine.ctrl = CtrlValue(SOptional(Some(SInt64(n.toLong))))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_contains_only :: Text -> Text -> Bool */\n+  final case object SBTextContainsOnly extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(alphabet) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val alphabetSet = alphabet.toSet"
  },
  {
    "id" : "e4a47aec-70cc-47a2-bf0e-849e83d158d5",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "0cced583-a536-40bf-ae44-43f7ac79821e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n              val alphabetSet = alphabet.codePoints().iterator().asScala.toSet\r\n```\r\n\r\nassuming you have the following line somewhere in the scope:\r\n```\r\nimport scala.collection.JavaConverters._\r\n```",
        "createdAt" : "2019-12-04T18:05:54Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SOptional(None))\n+              } else {\n+                machine.ctrl = CtrlValue(SOptional(Some(SInt64(n.toLong))))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_contains_only :: Text -> Text -> Bool */\n+  final case object SBTextContainsOnly extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(alphabet) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val alphabetSet = alphabet.toSet"
  },
  {
    "id" : "99244a5a-2758-4eaa-ad22-353252575fed",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "243fd2e7-f871-4487-b9db-8106c274572c",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n              val result = t.codePoints().iterator().asScala.forall(alphabetSet)\r\n```",
        "createdAt" : "2019-12-04T18:07:13Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SOptional(None))\n+              } else {\n+                machine.ctrl = CtrlValue(SOptional(Some(SInt64(n.toLong))))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_contains_only :: Text -> Text -> Bool */\n+  final case object SBTextContainsOnly extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(alphabet) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val alphabetSet = alphabet.toSet\n+              val result = t.forall(alphabetSet.contains(_))"
  },
  {
    "id" : "508b31cd-f954-474a-bca8-fe643f970415",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "e5c08a68-8e32-406c-9c45-63526643d3c6",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n              val n = t.codePointCount(0, t.indexOfSlice(slice))\r\n```",
        "createdAt" : "2019-12-04T18:14:06Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)"
  },
  {
    "id" : "7e316451-982a-49da-a6e5-91e0927e8cc2",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "a38d19f5-1692-4010-9aa9-9b5ca0c8db55",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:14:51Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 121,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SOptional(None))\n+              } else {\n+                machine.ctrl = CtrlValue(SOptional(Some(SInt64(n.toLong))))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_contains_only :: Text -> Text -> Bool */\n+  final case object SBTextContainsOnly extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(alphabet) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val alphabetSet = alphabet.toSet\n+              val result = t.forall(alphabetSet.contains(_))\n+              machine.ctrl = CtrlValue(SBool(result))\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextContainsOnly, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextContainsOnly, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_replicate :: Int -> Text -> Text */\n+  final case object SBTextReplicate extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(n) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SText(\"\"))\n+              } else {\n+                val rn = n.min(Int.MaxValue.toLong).toInt\n+                machine.ctrl = CtrlValue(SText(t * rn))"
  },
  {
    "id" : "45851f5f-6809-44d2-8571-218bdb025aec",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "6c1a4586-281f-4d99-8d80-27a64a9fd330",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:15:34Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 139,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SOptional(None))\n+              } else {\n+                machine.ctrl = CtrlValue(SOptional(Some(SInt64(n.toLong))))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_contains_only :: Text -> Text -> Bool */\n+  final case object SBTextContainsOnly extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(alphabet) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val alphabetSet = alphabet.toSet\n+              val result = t.forall(alphabetSet.contains(_))\n+              machine.ctrl = CtrlValue(SBool(result))\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextContainsOnly, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextContainsOnly, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_replicate :: Int -> Text -> Text */\n+  final case object SBTextReplicate extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(n) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SText(\"\"))\n+              } else {\n+                val rn = n.min(Int.MaxValue.toLong).toInt\n+                machine.ctrl = CtrlValue(SText(t * rn))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextReplicate, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextReplicate, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_split_on :: Text -> Text -> List Text */\n+  final case object SBTextSplitOn extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(pattern) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val seq : Seq[SValue] = t.split(pattern).map(SText).toSeq"
  },
  {
    "id" : "964e4500-eff4-45b5-a975-b84b4be01810",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "8edfd1e0-09cd-4f46-9b8e-83f30809d0b0",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:15:58Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 164,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))\n+                  }\n+                case x =>\n+                  throw SErrorCrash(s\"type mismatch SBTextSlice, expected Text got $x\")\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSlice, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice_index :: Text -> Text -> Optional Int */\n+  final case object SBTextSliceIndex extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(slice) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val n = t.indexOfSlice(slice)\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SOptional(None))\n+              } else {\n+                machine.ctrl = CtrlValue(SOptional(Some(SInt64(n.toLong))))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSliceIndex, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_contains_only :: Text -> Text -> Bool */\n+  final case object SBTextContainsOnly extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(alphabet) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val alphabetSet = alphabet.toSet\n+              val result = t.forall(alphabetSet.contains(_))\n+              machine.ctrl = CtrlValue(SBool(result))\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextContainsOnly, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextContainsOnly, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_replicate :: Int -> Text -> Text */\n+  final case object SBTextReplicate extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(n) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              if (n < 0) {\n+                machine.ctrl = CtrlValue(SText(\"\"))\n+              } else {\n+                val rn = n.min(Int.MaxValue.toLong).toInt\n+                machine.ctrl = CtrlValue(SText(t * rn))\n+              }\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextReplicate, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextReplicate, expected Int64 got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_split_on :: Text -> Text -> List Text */\n+  final case object SBTextSplitOn extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(pattern) =>\n+          args.get(1) match {\n+            case SText(t) =>\n+              val seq : Seq[SValue] = t.split(pattern).map(SText).toSeq\n+              machine.ctrl = CtrlValue(SList(FrontStack(seq)))\n+            case x =>\n+              throw SErrorCrash(s\"type mismatch SBTextSplitOn, expected Text got $x\")\n+          }\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextSplitOn, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_intercalate :: Text -> List Text -> Text */\n+  final case object SBTextIntercalate extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(sep) =>\n+          args.get(1) match {\n+            case SList(vs) =>\n+              val xs = vs.map { (v: SValue) =>\n+                v match {\n+                  case SText(t) => t\n+                  case x =>\n+                    throw SErrorCrash(s\"type mismatch SBTextIntercalate, expected Text in list, got $x\")\n+                }\n+              }\n+              machine.ctrl = CtrlValue(SText(xs.iterator.mkString(sep)))"
  },
  {
    "id" : "facf29a8-0c1c-409f-a9b6-7f72fa04feb2",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "a842545e-a03d-4638-9e94-13dbd962e73c",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n                    machine.ctrl = CtrlValue(SText(t.slice(t.offsetByCodePoints(0, rfrom), t.offsetByCodePoints(0, rto)))\r\n))\r\n```",
        "createdAt" : "2019-12-04T18:29:02Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length.\n+                    machine.ctrl = CtrlValue(SText(t.slice(rfrom, rto)))"
  },
  {
    "id" : "0e4ef6a5-61ff-42aa-8597-4826da1c4901",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "c7858a3d-1982-45ec-807f-d54433c620dd",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n                      // length. Note that t.length over approximates the number of codepoints in t.\r\n```",
        "createdAt" : "2019-12-04T22:13:15Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : null,
    "diffHunk" : "@@ -1316,6 +1316,173 @@ object SBuiltin {\n     }\n   }\n \n+  // Unstable text primitives.\n+\n+  /** $text_to_upper :: Text -> Text */\n+  final case object SBTextToUpper extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toUpperCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextoUpper, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_to_lower :: Text -> Text */\n+  final case object SBTextToLower extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SText(t) =>\n+          machine.ctrl = CtrlValue(SText(t.toLowerCase(util.Locale.ROOT)))\n+            // TODO [FM]: replace with ASCII-specific function, or not\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBTextToLower, expected Text got $x\")\n+      }\n+    }\n+  }\n+\n+  /** $text_slice :: Int -> Int -> Text -> Text */\n+  final case object SBTextSlice extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      args.get(0) match {\n+        case SInt64(from) =>\n+          args.get(1) match {\n+            case SInt64(to) =>\n+              args.get(2) match {\n+                case SText(t) =>\n+                  if (to <= 0 || from >= t.length.toLong || to <= from ) {\n+                    machine.ctrl = CtrlValue(SText(\"\"))\n+                  } else {\n+                    val rfrom = from.max(0).toInt\n+                    val rto = to.min(t.length.toLong).toInt\n+                      // NOTE [FM]: We use toInt only after ensuring the indices are\n+                      // between 0 and t.length inclusive. Calling toInt prematurely\n+                      // would mean dropping the high order bits indiscriminitely,\n+                      // so for instance (0x100000000L).toInt == 0, resulting in an\n+                      // empty string below even though `to` was larger than the\n+                      // length."
  },
  {
    "id" : "8a24568f-bd96-4b87-8edf-bfc563991681",
    "prId" : 3453,
    "comments" : [
      {
        "id" : "c040abe3-516c-44a5-b2c9-a6756b4c572d",
        "parentId" : null,
        "author" : null,
        "body" : "Is `_._2._1` the insertion order and `_._1.v` the key? Is it possible to make that a little more explicit?\r\n\r\nAnd same below in `SBGenMapValues` with `_._2._1` and `_._2._2`.  ",
        "createdAt" : "2019-11-14T12:14:22Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8ddc417a-8de3-465e-931c-53c54798adb6",
        "parentId" : "c040abe3-516c-44a5-b2c9-a6756b4c572d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-14T15:40:06Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "79777f3e5242b968e6ddaeabbd367f715b2cb5fa",
    "line" : null,
    "diffHunk" : "@@ -479,6 +471,80 @@ object SBuiltin {\n     }\n   }\n \n+  // O(1)\n+  final case object SBGenMapInsert extends SBuiltin(3) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      machine.ctrl = CtrlValue(args.get(2) match {\n+        case SGenMap(idx, value) =>\n+          val key = SGenMap.Key(args.get(0))\n+          SGenMap(idx + 1, value.updated(key, idx -> args.get(1)))\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBGenMapInsert, expected GenMap got $x\")\n+      })\n+    }\n+  }\n+\n+  // O(1)\n+  final case object SBGenMapLookup extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      machine.ctrl = CtrlValue(args.get(1) match {\n+        case SGenMap(_, value) =>\n+          SOptional(value.get(SGenMap.Key(args.get(0))).map(_._2))\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBGenMapLookup, expected GenMap get $x\")\n+      })\n+    }\n+  }\n+\n+  // O(1)\n+  final case object SBGenMapDelete extends SBuiltin(2) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      machine.ctrl = CtrlValue(args.get(1) match {\n+        case SGenMap(idx, value) =>\n+          val key = SGenMap.Key(args.get(0))\n+          SGenMap(idx, value - key)\n+        case x =>\n+          throw SErrorCrash(s\"type mismatch SBGenMapDelete, expected GenMap get $x\")\n+      })\n+    }\n+  }\n+\n+  // O(n log n)\n+  final case object SBGenMapKeys extends SBuiltin(1) {\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      machine.ctrl = CtrlValue(args.get(0) match {\n+        case SGenMap(_, values) =>\n+          SList(FrontStack(values.toSeq.sortBy(_._2._1).map(_._1.v)))"
  },
  {
    "id" : "52e76fc9-740d-4ac9-b8a1-bc124aa11971",
    "prId" : 3115,
    "comments" : [
      {
        "id" : "eb4f68c1-9c76-4a45-b002-a0a01655715d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`SBTyCon` sounds slightly confusing. Maybe `SBTyConRep` would be better? Depending on whether we limit this primitve to template types or not we could also call this `SBTemplateTyRep`.",
        "createdAt" : "2019-10-07T08:41:36Z",
        "updatedAt" : "2019-10-07T11:10:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "63a79f6b-424d-4d8f-b717-1c3aa305bf22",
        "parentId" : "eb4f68c1-9c76-4a45-b002-a0a01655715d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is my fault. \r\nThe primitive should be called something like  `to_text_tycon` (not `tycon`  as I wrote down in the issue). Hence  everything becomes clearer.",
        "createdAt" : "2019-10-07T08:48:06Z",
        "updatedAt" : "2019-10-07T11:10:04Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "769e9ed2-2888-45f5-93f4-fe43d536b06e",
        "parentId" : "eb4f68c1-9c76-4a45-b002-a0a01655715d",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I've renamed it to `to_text_template_id` (`ToTextTemplateId`).",
        "createdAt" : "2019-10-07T11:10:05Z",
        "updatedAt" : "2019-10-07T11:10:06Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "17b73598-cd3a-42d1-962a-7ceee988546a",
        "parentId" : "eb4f68c1-9c76-4a45-b002-a0a01655715d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-10-07T11:23:23Z",
        "updatedAt" : "2019-10-07T11:23:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5bb1e9d7c998101d7649c6fbfc26715c6c7245b3",
    "line" : null,
    "diffHunk" : "@@ -1277,6 +1277,15 @@ object SBuiltin {\n     }\n   }\n \n+  /** $ty_con\n+    *     :: Text\n+    */\n+  final case class SBTyCon(tyCon: TypeConName) extends SBuiltin(0) {"
  },
  {
    "id" : "54c17cb7-a6bd-4c24-a814-42a19e5d8373",
    "prId" : 2905,
    "comments" : [
      {
        "id" : "2e3c407d-ec7c-4ad6-81e3-354774df16a1",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Shouldn't `SB(To|From)Template` also get a comment like the primitives above have? E.g.\r\n```\r\n/** $error :: Text -> a */\r\n```",
        "createdAt" : "2019-09-16T08:14:40Z",
        "updatedAt" : "2019-09-16T08:56:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f20ae803-80e8-4f9f-80da-8d76b5f1fa07",
        "parentId" : "2e3c407d-ec7c-4ad6-81e3-354774df16a1",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, thanks! I’ve added comments.",
        "createdAt" : "2019-09-16T08:25:37Z",
        "updatedAt" : "2019-09-16T08:56:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "758775bac71c51faf20e2552396373a57eb59af9",
    "line" : 8,
    "diffHunk" : "@@ -1203,6 +1203,25 @@ object SBuiltin {\n       throw DamlEUserError(args.get(0).asInstanceOf[SText].value)\n   }\n \n+  final case object SBToAnyTemplate extends SBuiltin(1) {"
  },
  {
    "id" : "62ea456e-aeff-44a2-95ce-2a4bdd61e005",
    "prId" : 2681,
    "comments" : [
      {
        "id" : "018a51ae-8d63-4b5f-985f-e9b810b485c8",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Doesn't this filter out all `0` characters of the decimal part, also those in `1.0001`?",
        "createdAt" : "2019-08-28T11:39:50Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e9a590c8-be47-4c74-b61f-6145c61b3ca0",
        "parentId" : "018a51ae-8d63-4b5f-985f-e9b810b485c8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "`filter` is called on  `Option[String]` not in `String`. That is two say it is idempotent all inputs except `Some(\"0\")`.",
        "createdAt" : "2019-08-28T12:20:28Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0edad2cd-c3ab-4b51-b8b6-cc4eae4564cd",
        "parentId" : "018a51ae-8d63-4b5f-985f-e9b810b485c8",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "D'oh, of course. Thank you.",
        "createdAt" : "2019-08-28T12:26:38Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1a1c94ccb2d1f055e16c314d83381a9c11948792",
    "line" : 22,
    "diffHunk" : "@@ -292,15 +292,37 @@ object SBuiltin {\n     }\n   }\n \n+  // The specification of FromTextNumeric is lenient about the format of the string it should\n+  // accept and convert. In particular it should convert any string with an arbitrary number of\n+  // leading and trailing '0's as long as the corresponding number fits a Numeric without loss of\n+  // precision. We should take care not calling String to BigDecimal conversion on huge strings.\n   final case object SBFromTextNumeric extends SBuiltin(2) {\n+    private val validFormat =\n+      \"\"\"([+-]?)0*(\\d+)(\\.(\\d*[1-9]|0)0*)?\"\"\".r\n+\n     def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n       val scale = args.get(0).asInstanceOf[STNat].n\n       val string = args.get(1).asInstanceOf[SText].value\n-      val num = Numeric\n-        .fromUnscaledString(string)\n-        .flatMap(Numeric.fromBigDecimal(scale, _))\n-        .fold(_ => None, x => Some(SNumeric(x)))\n-      machine.ctrl = CtrlValue(SOptional(num))\n+      val result = string match {\n+        case validFormat(signPart, intPart, _, decPartOrNull) =>\n+          val decPart = Option(decPartOrNull).filterNot(_ == \"0\").getOrElse(\"\")"
  },
  {
    "id" : "b7e5ffdc-802f-4db9-b188-af3ac90789ee",
    "prId" : 2653,
    "comments" : [
      {
        "id" : "aab9577f-c03a-4751-bf77-222e98fb50b6",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`asInstanceOf[STNat]` etc. might be faster.",
        "createdAt" : "2019-08-26T11:56:00Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d41bd9b9-fa08-4b96-b49e-ce784577ffa4",
        "parentId" : "aab9577f-c03a-4751-bf77-222e98fb50b6",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "The only penalty here is by tupling, which can be avoided by nesting `match`.",
        "createdAt" : "2019-08-26T15:34:44Z",
        "updatedAt" : "2019-08-26T15:34:45Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0fa6077c71edb857ab4a0a3851d841ea21acc8ef",
    "line" : null,
    "diffHunk" : "@@ -408,33 +419,33 @@ object SBuiltin {\n   // Conversions\n   //\n \n-  final case object SBInt64ToNumeric extends SBuiltin(1) {\n+  final case object SBInt64ToNumeric extends SBuiltin(2) {\n     def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n-      machine.ctrl = CtrlValue(\n-        args.get(0) match {\n-          case SInt64(x) =>\n-            SNumeric(\n-              rightOrArithmeticError(\n-                s\"overflow when converting $x to (Numeric 10)\",\n-                Numeric.fromLong(Decimal.scale, x)))\n-          case _ => throw SErrorCrash(s\"type mismatch int64ToNumeric: $args\")\n-        }\n-      )\n+      val value = (args.get(0), args.get(1)) match {\n+        case (STNat(scale), SInt64(x)) =>\n+          SNumeric(\n+            rightOrArithmeticError(\n+              s\"overflow when converting $x to (Numeric $scale)\",\n+              Numeric.fromLong(scale, x)))\n+        case _ =>\n+          throw SErrorCrash(s\"type mismatch int64ToNumeric: $args\")\n+      }\n+      machine.ctrl = CtrlValue(value)\n     }\n   }\n \n-  final case object SBNumericToInt64 extends SBuiltin(1) {\n+  final case object SBNumericToInt64 extends SBuiltin(2) {\n     def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n-      machine.ctrl = CtrlValue(\n-        args.get(0) match {\n-          case SNumeric(x) =>\n-            SInt64(\n-              rightOrArithmeticError(\n-                s\"Int64 overflow when converting ${Numeric.toString(x)} to Int64\",\n-                Numeric.toLong(x)))\n-          case _ => throw SErrorCrash(s\"type mismatch NumericToInt64: $args\")\n-        }\n-      )\n+      val value = (args.get(0), args.get(1)) match {\n+        case (STNat(scale), SNumeric(x)) if x.scale == scale =>"
  },
  {
    "id" : "dfa02b7b-83b9-436d-864e-1f8be42f2004",
    "prId" : 1429,
    "comments" : [
      {
        "id" : "130919c7-5097-4c9a-8a45-9bc9ad5586f3",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "BTW, are you sure that doesn't allow unicode digits?",
        "createdAt" : "2019-05-28T13:12:16Z",
        "updatedAt" : "2019-05-28T19:41:27Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f93ffaf4-4ddc-4761-8a7e-4198ed6b9047",
        "parentId" : "130919c7-5097-4c9a-8a45-9bc9ad5586f3",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "The answer is that it doesn't allow unicode digits: https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html",
        "createdAt" : "2019-05-28T13:19:28Z",
        "updatedAt" : "2019-05-28T19:41:27Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "233f17b7c23f16739aafae61ee77cfd643a0fa62",
    "line" : 197,
    "diffHunk" : "@@ -252,7 +318,7 @@ object SBuiltin {\n   }\n \n   final case object SBFromTextDecimal extends SBuiltin(1) {\n-    private val pattern = \"\"\"[+-]?[0-9]+(\\.[0-9]+)?\"\"\".r.pattern\n+    private val pattern = \"\"\"[+-]?\\d+(\\.\\d+)?\"\"\".r.pattern"
  },
  {
    "id" : "8ac2b4ca-fdd8-4857-9fee-3bc44903a9dc",
    "prId" : 1407,
    "comments" : [
      {
        "id" : "19f51c7c-a5a1-4566-92cd-0ec6418caf19",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "allowing the leading `+` has the slight disadvantage that we do not have a canonical representation for `Int64` -- the same numbers can be represented in multiple ways. i'm on the fence on whether this is a good thing or not.",
        "createdAt" : "2019-05-27T14:27:40Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fb8ab4c1-432e-4dd5-af19-6ef4a444e952",
        "parentId" : "19f51c7c-a5a1-4566-92cd-0ec6418caf19",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If we allow leading zeros, we have the same problem.",
        "createdAt" : "2019-05-27T14:36:43Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7a7efe75-123e-4dcd-b226-3641cc53e478",
        "parentId" : "19f51c7c-a5a1-4566-92cd-0ec6418caf19",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "Yes, see my own comment below.",
        "createdAt" : "2019-05-27T14:37:34Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "62696aff-31cc-4fca-9c05-c2ed9a2cfc1a",
        "parentId" : "19f51c7c-a5a1-4566-92cd-0ec6418caf19",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I believe we should not restrict parsing to canonical representation. For instance, the final user probably want to parse \"1\" and \"01\" in the same way.\r\nBoth Haskell and java (and any other languages I can think of) parse \"01\" and \"1\" in the same way.\r\n\r\nFurthermore, this has no impact on determinism.   \r\n\r\n\r\n \r\n\r\n",
        "createdAt" : "2019-05-27T14:46:50Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea16d985a1397393fa2f0e0f0f3c58f1b23bb4ab",
    "line" : 5,
    "diffHunk" : "@@ -233,6 +233,38 @@ object SBuiltin {\n     }\n   }\n \n+  final case object SBFromTextInt64 extends SBuiltin(1) {\n+    private val pattern = \"\"\"[+-]?\\d+\"\"\".r.pattern"
  },
  {
    "id" : "1c52cd67-6534-4002-b4cb-8443f366e6a2",
    "prId" : 1407,
    "comments" : [
      {
        "id" : "be6cfd98-15ff-4768-b5a3-6ec241e36f50",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "do you allow trailing / leading 0s? this regexp does. do we know what that means when parsing?",
        "createdAt" : "2019-05-27T14:28:09Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "993ee042-4553-4562-be81-ff4608b3a1f9",
        "parentId" : "be6cfd98-15ff-4768-b5a3-6ec241e36f50",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Please see tests \r\nhttps://github.com/digital-asset/daml/pull/1407/files#diff-ae9014deee9be354b39ebd26faa0150b\r\n",
        "createdAt" : "2019-05-27T14:46:17Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2dbce506-ec50-4a6e-8613-92899e73f512",
        "parentId" : "be6cfd98-15ff-4768-b5a3-6ec241e36f50",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "OK, so the answer is \"yes\". I'm really on the fence regarding canonical representation. For users it's clearly worse... so going with the current implementation is probably the right thing.\r\n\r\n@hurryabit what do you think?",
        "createdAt" : "2019-05-27T14:48:46Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "609bf38f-57fc-4a00-86a1-e3b2caa95aa6",
        "parentId" : "be6cfd98-15ff-4768-b5a3-6ec241e36f50",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not sure there's value in having a canonical representation for _parsing_. Being lenient seems fine to me.",
        "createdAt" : "2019-05-27T14:50:23Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7edeb256-49f2-4432-b4a4-60997fe3b92c",
        "parentId" : "be6cfd98-15ff-4768-b5a3-6ec241e36f50",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Note, we are already lenient (though a bit less than here) when parsing decimals from protobu. We accept anything that matches \r\n``[+-]?[0-9]{1,28}(\\.[0-9]{1,10})?``",
        "createdAt" : "2019-05-27T15:00:14Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea16d985a1397393fa2f0e0f0f3c58f1b23bb4ab",
    "line" : 23,
    "diffHunk" : "@@ -233,6 +233,38 @@ object SBuiltin {\n     }\n   }\n \n+  final case object SBFromTextInt64 extends SBuiltin(1) {\n+    private val pattern = \"\"\"[+-]?\\d+\"\"\".r.pattern\n+\n+    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n+      val s = args.get(0).asInstanceOf[SText].value\n+      val int64 =\n+        if (pattern.matcher(s).matches())\n+          try {\n+            Some(SInt64(java.lang.Long.parseLong(s)))\n+          } catch {\n+            case _: NumberFormatException =>\n+              None\n+          } else\n+          None\n+      machine.ctrl = CtrlValue(SOptional(int64))\n+    }\n+  }\n+\n+  final case object SBFromTextDecimal extends SBuiltin(1) {\n+    private val pattern = \"\"\"[+-]?[0-9]+(\\.[0-9]+)?\"\"\".r.pattern"
  },
  {
    "id" : "d4ff7e3f-d68e-461f-9b11-680cb9792377",
    "prId" : 1377,
    "comments" : [
      {
        "id" : "adeac86b-e9b3-4bc9-b00f-fc90a9abb80b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@remyhaemmerle-da @bitonic Can you please confirm whether this is the right place to fill in the controllers for missing actors.",
        "createdAt" : "2019-05-24T11:40:11Z",
        "updatedAt" : "2019-05-24T11:53:03Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "668b8f22-4217-4256-a7b4-6978d4c3faaa",
        "parentId" : "adeac86b-e9b3-4bc9-b00f-fc90a9abb80b",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "looks good.",
        "createdAt" : "2019-05-24T12:28:28Z",
        "updatedAt" : "2019-05-24T12:28:28Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d935e42734257440c114828dab523a7f4df325d2",
    "line" : 17,
    "diffHunk" : "@@ -711,7 +714,7 @@ object SBuiltin {\n           choiceId = choiceId,\n           optLocation = machine.lastLocation,\n           consuming = consuming,\n-          actingParties = actors,\n+          actingParties = optActors.getOrElse(ctrls),"
  },
  {
    "id" : "8b5bb03d-6353-4bda-9242-153292b21fce",
    "prId" : 761,
    "comments" : [
      {
        "id" : "9efde34c-636b-49e7-ae62-59178326ec8b",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "To make sure the implied `toString` is benign in the face of future changes:\r\n\r\n```suggestion\r\n      machine.ctrl = CtrlValue(SText(s\"'${v.value: String}'\"))\r\n```\r\n\r\nI've discussed with @leo-da doing this as a rule, and replacing `s` in the future with one that only accepts some types for interpolation; for now this is a good stopgap.",
        "createdAt" : "2019-05-06T16:17:46Z",
        "updatedAt" : "2019-05-06T17:01:29Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "259fa7d4-79b2-43b9-805c-f6db03aec3b8",
        "parentId" : "9efde34c-636b-49e7-ae62-59178326ec8b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-05-06T16:52:47Z",
        "updatedAt" : "2019-05-06T17:01:29Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "47aa8737384d1d20c8aabc0ccd0be804a42e3003",
    "line" : null,
    "diffHunk" : "@@ -213,7 +213,7 @@ object SBuiltin {\n   final case object SBToQuotedTextParty extends SBuiltin(1) {\n     def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n       val v = args.get(0).asInstanceOf[SParty]\n-      machine.ctrl = CtrlValue(SText(s\"'${v.value.underlyingString}'\"))\n+      machine.ctrl = CtrlValue(SText(s\"'${v.value}'\"))"
  },
  {
    "id" : "266d271e-9ee9-400f-b465-04ec9f166c11",
    "prId" : 583,
    "comments" : [
      {
        "id" : "5f78f3e9-d69c-48da-83ec-65cb79620553",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please update the comment for this exercise with the new parameter, similar to other `SBU*` case classes.",
        "createdAt" : "2019-04-18T07:26:34Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ecb76333-7a1c-47ab-a5b5-8f7234491669",
        "parentId" : "5f78f3e9-d69c-48da-83ec-65cb79620553",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-04-18T08:21:34Z",
        "updatedAt" : "2019-05-06T11:45:15Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7dba066e451634d93091257340a85b47cb24ff23",
    "line" : null,
    "diffHunk" : "@@ -718,10 +718,16 @@ object SBuiltin {\n   }\n \n   /** $endExercise[T] :: Token -> () */"
  }
]