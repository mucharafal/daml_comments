[
  {
    "id" : "27a1de80-e1d9-40ab-a269-2ee240bbebb6",
    "prId" : 7778,
    "comments" : [
      {
        "id" : "a4c0a55a-bb1b-4938-bbe6-0e5435ade791",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Why not adding a comment to explicate that this is a non-optimize form of `SBStructProj`",
        "createdAt" : "2020-10-22T12:04:03Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "389f8175-cf55-47b7-badb-c377308d8328",
        "parentId" : "a4c0a55a-bb1b-4938-bbe6-0e5435ade791",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good idea. I'll do that.",
        "createdAt" : "2020-10-22T12:18:53Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6ef549582f052ca0d9abd09ff2f154d159b01849",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +801,805 @@  // This is a slower version of `SBStructProj` for the case when we didn't run\n  // the DAML-LF type checker and hence didn't infer the field index.\n  final case class SBStructProjByName(field: Ast.FieldName) extends SBuiltinPure(1) {\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n      args.get(0) match {"
  },
  {
    "id" : "da68e67a-26a5-4070-ae45-76d57d9f36dd",
    "prId" : 7501,
    "comments" : [
      {
        "id" : "249fb809-cfb4-42f4-b0d2-dee3414bfdd8",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n        onLedger: OnLedger,\r\n    ): Unit =\r\n```",
        "createdAt" : "2020-09-29T07:42:32Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "95b6017e-31e2-4720-842f-5849211f06de",
        "parentId" : "249fb809-cfb4-42f4-b0d2-dee3414bfdd8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You really love your trailing commas :slightly_smiling_face: ",
        "createdAt" : "2020-09-29T07:52:47Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 394,
    "diffHunk" : "@@ -1,1 +1280,1284 @@        args: util.ArrayList[SValue],\n        machine: Machine,\n        onLedger: OnLedger): Unit =\n      onLedger.ptx\n        .finish("
  },
  {
    "id" : "2861aceb-60eb-439a-b87f-3224d461f668",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "4edb9b7a-3e97-4139-91dc-d6fdf5ccc354",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth adding a comment that the reason we need to preserve the order is to preserve evaluation order?",
        "createdAt" : "2020-09-04T08:26:51Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6ef6197-f5f2-41c6-8af1-429d49a98a67",
        "parentId" : "4edb9b7a-3e97-4139-91dc-d6fdf5ccc354",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-09-04T09:07:15Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +820,824 @@  // evaluation order of unordered fields.\n  /** $tcon[fields] :: a -> b -> ... -> Struct */\n  final case class SBStructCon(inputFieldsOrder: Struct[Int])\n      extends SBuiltinPure(inputFieldsOrder.size) {\n    private[this] val fieldNames = inputFieldsOrder.mapValues(_ => ())"
  },
  {
    "id" : "d65d5b41-72d3-45bf-8093-08d4ebea7d72",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "4d7c3500-f3d1-4be3-aca8-55c39c5105e9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I like how we pushed the sorting to compile time and keep it cheap at runtime.\r\n\r\nI'm wondering if there's a way to avoid allocating a second array and reuse the `args` array instead? I couldn't come up quickly with a simple way myself though.",
        "createdAt" : "2020-09-04T11:01:58Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83f5694f-4d83-46b6-bd66-c46651b127fc",
        "parentId" : "4d7c3500-f3d1-4be3-aca8-55c39c5105e9",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The simplest I could find (while keeping runtime cheap) is as follow. I am not sure it is worthwhile.\r\n\r\n```scala\r\n  // SBStructCon sorts the field after evaluation of its arguments to preserve\r\n  // evaluation order of unordered fields.\r\n  /** $tcon[fields] :: a -> b -> ... -> Struct */\r\n  final case class SBStructCon(inputFieldsOrder: Struct[Int])\r\n      extends SBuiltinPure(inputFieldsOrder.size) {\r\n\r\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n      order(args)\r\n      SStruct(fieldNames, args)\r\n    }\r\n\r\n    private[this] val fieldNames = inputFieldsOrder.mapValues(_ => ())\r\n\r\n    private[this] val permutations: List[(Int, List[Int])] = {\r\n\r\n      val mapping = Array.ofDim[Int](inputFieldsOrder.size)\r\n      mapping.indices.foreach { i =>\r\n        mapping(inputFieldsOrder.toImmArray(i)._2) = i\r\n      }\r\n\r\n      @tailrec\r\n      def loop1(toVisit: Set[Int], acc: List[(Int, List[Int])]): List[(Int, List[Int])] =\r\n        if (toVisit.isEmpty)\r\n          acc\r\n        else {\r\n          val next = toVisit.head\r\n          val (nextToVisit, perm @ (_, others)) = loop2(toVisit - next, next, List.empty)\r\n          val nextAcc = if (others.isEmpty) acc else perm :: acc\r\n          loop1(nextToVisit, nextAcc)\r\n        }\r\n\r\n      @tailrec\r\n      def loop2(toVisit: Set[Int], curr: Int, previous: List[Int]): (Set[Int], (Int, List[Int])) = {\r\n        val next = mapping(curr)\r\n        if (toVisit(next))\r\n          loop2(toVisit - next, next, curr :: previous)\r\n        else\r\n          (toVisit, (curr, previous))\r\n      }\r\n\r\n      loop1(mapping.toSet, List.empty)\r\n    }\r\n\r\n    @inline\r\n    private[this] def order[X](a: util.ArrayList[X]): Unit =\r\n      permutations.foreach {\r\n        case (first, others) =>\r\n          var i = first\r\n          val tmp = a.get(i)\r\n          others.foreach { j =>\r\n            a.set(i, a.get(j))\r\n            i = j\r\n          }\r\n          a.set(i, tmp)\r\n      }\r\n  }\r\n```",
        "createdAt" : "2020-09-04T14:47:18Z",
        "updatedAt" : "2020-09-04T17:38:52Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1c8b0af8-1d3c-4da8-a183-879c415fb55f",
        "parentId" : "4d7c3500-f3d1-4be3-aca8-55c39c5105e9",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This seems to be a lot of complexity for a gain we can't properly quantify yet. Thus, I'd say it's not worthwhile for now.",
        "createdAt" : "2020-09-07T13:15:54Z",
        "updatedAt" : "2020-09-07T13:15:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +826,830 @@      val sortedFields = new util.ArrayList[SValue](inputFieldsOrder.size)\n      inputFieldsOrder.values.foreach(i => sortedFields.add(args.get(i)))\n      SStruct(fieldNames, sortedFields)\n    }\n  }"
  },
  {
    "id" : "df038bfd-4767-44ff-9c38-2c99f6c67499",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "dc4c6238-7d53-4c54-926b-2e9e10aed92c",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  protected def executePure(args: util.ArrayList[SValue]): SValue\r\n```",
        "createdAt" : "2020-08-05T08:07:59Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "19811f63-6f59-4ec6-a2ec-01a933302c81",
        "parentId" : "dc4c6238-7d53-4c54-926b-2e9e10aed92c",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : " We can't make this change, because we need `executePure` to be called from `SExpr` (in the coming ANF PR).\r\n",
        "createdAt" : "2020-08-05T08:29:43Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +57,61 @@  /** Execute the (pure) builtin with 'arity' number of arguments in 'args'.\n    Returns the resulting value */\n  private[speedy] def executePure(args: util.ArrayList[SValue]): SValue\n}\n"
  },
  {
    "id" : "aba448ed-a9be-4de9-bedf-03481bb54e9c",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "6b3abba6-381b-486e-b457-e36e0ff974aa",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    override protected final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n```",
        "createdAt" : "2020-08-05T08:08:34Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +179,183 @@  sealed abstract class SBBinaryOpNumeric(op: (Numeric, Numeric) => Numeric)\n      extends SBuiltinPure(3) {\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n      val scale = args.get(0).asInstanceOf[STNat].n\n      val a = args.get(1).asInstanceOf[SNumeric].value"
  },
  {
    "id" : "9ae20679-5044-42b5-af44-569221d7d33c",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "6eddae0e-6b0d-4b8b-9da7-fb65687066a3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    override protected final def executePure(args: util.ArrayList[SValue]): SValue = {\r\n```",
        "createdAt" : "2020-08-05T08:09:30Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +207,211 @@\n  final case object SBRoundNumeric extends SBuiltinPure(3) {\n    override private[speedy] final def executePure(args: util.ArrayList[SValue]): SValue = {\n      val scale = args.get(0).asInstanceOf[STNat].n\n      val prec = args.get(1).asInstanceOf[SInt64].value"
  },
  {
    "id" : "f1720468-0b10-436d-b90a-7131f3302202",
    "prId" : 6996,
    "comments" : [
      {
        "id" : "ab3405c5-68ad-4d43-8ef5-9dcc1c227b88",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Would it make sense to put some sort of inlining annotation here?",
        "createdAt" : "2020-08-05T08:30:04Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff8d05ca-5ec1-4a7b-80b4-8558e92ca508",
        "parentId" : "ab3405c5-68ad-4d43-8ef5-9dcc1c227b88",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "my earlier experience is that this kind of attempted micro optimization has no benefit.\r\n",
        "createdAt" : "2020-08-05T08:36:24Z",
        "updatedAt" : "2020-08-05T08:37:42Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51580e2c2216065e1c811d4b06d34b142c5cc6d2",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +48,52 @@private[speedy] sealed abstract class SBuiltinPure(val arity1: Int) extends SBuiltin(arity1) {\n\n  override private[speedy] final def execute(\n      args: util.ArrayList[SValue],\n      machine: Machine,"
  },
  {
    "id" : "3c6594d5-bad7-45b7-b1eb-d52963b5fa92",
    "prId" : 6828,
    "comments" : [
      {
        "id" : "cee8e4fd-50b7-4e81-a533-f5782d6bdc79",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This will be run on every value we get from the ledger and should hence rather be fast. Do we have any idea how expensive `contains` is? Does it get more expensive as we add more versions?",
        "createdAt" : "2020-08-10T13:47:30Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3f57d3bf-88aa-4510-9f41-e9f95541c6f4",
        "parentId" : "cee8e4fd-50b7-4e81-a533-f5782d6bdc79",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This is not particularly optimized. However I think this should be pretty negligible in comparison of the three passes of translations the value traverses (proto to java, java to LF Value, LF Value to Speedy values).\r\n\r\nThis gets also more expensive as we add more versions. If this becomes an issue,  we could just add a cache in `VersionRange#contains` ",
        "createdAt" : "2020-08-10T14:16:41Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d00dca1d-24a5-473c-8558-60e26b998c8b",
        "parentId" : "cee8e4fd-50b7-4e81-a533-f5782d6bdc79",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I see. Thanks for the explanation.",
        "createdAt" : "2020-08-10T15:04:23Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b0a8ac29dc0000fb043ddb635bc6d6a3895606ba",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1028,1032 @@                    if (actualTmplId != templateId)\n                      SEDamlException(DamlEWronglyTypedContract(coid, templateId, actualTmplId))\n                    else if (!machine.inputValueVersions.contains(version))\n                      SEDamlException(\n                        DamlEDisallowedInputValueVersion(machine.inputValueVersions, version),"
  },
  {
    "id" : "d0b460f2-32d4-483c-ac59-8a9960497e8c",
    "prId" : 6613,
    "comments" : [
      {
        "id" : "7de0b2c1-ce1b-46ba-a425-c4ef39088df4",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      machine: Machine,\r\n    ): Unit = {\r\n```\r\n\r\nNot a big deal, though. This syntax for multi line arguments helps future diff/merge.\r\n",
        "createdAt" : "2020-07-07T07:23:58Z",
        "updatedAt" : "2020-07-07T07:30:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f6baabe1-60f6-4b30-bfee-2f70b0e3c357",
        "parentId" : "7de0b2c1-ce1b-46ba-a425-c4ef39088df4",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Thanks\r\nShould this be the style output by `scalafmt` then?\r\n(Or can that not happen because it requires the programmer to write the trailing `,` ?)",
        "createdAt" : "2020-07-07T07:39:34Z",
        "updatedAt" : "2020-07-07T07:46:11Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e1b0c770-a715-46a6-8a1e-093779f4caf2",
        "parentId" : "7de0b2c1-ce1b-46ba-a425-c4ef39088df4",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "We had some issues with IntelliJ making scalafmt output a trailing comma before. This might now be fixed in the latest version of IntelliJ 2019; haven't tested it. I expect we'll need to upgrade to IntelliJ 2020 before we can, though, which means waiting for the Bazel plugin to support it.",
        "createdAt" : "2020-07-07T07:51:42Z",
        "updatedAt" : "2020-07-07T07:51:42Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ae8c8d81c4420164bf92141b4a2b1110c3bf8f16",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +50,54 @@  override private[speedy] final def executeEffect(\n      args: util.ArrayList[SValue],\n      machine: Machine): Unit = {\n    machine.returnValue = execute(args)\n  }"
  },
  {
    "id" : "e970d359-9823-47bf-bd67-b0f72072da52",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "304bdca4-969d-4e88-9ebc-0e8ce8073808",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is this `TODO` crucial for this PR to work or something you want to address in a follow-up PR?",
        "createdAt" : "2020-06-26T11:15:52Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "915fcff7-fa65-47db-a34d-78e4c40727fe",
        "parentId" : "304bdca4-969d-4e88-9ebc-0e8ce8073808",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yup, we made this issue #6523",
        "createdAt" : "2020-06-30T15:00:56Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +49,53 @@\nsealed abstract class SBuiltin(val arity1: Int) extends SBuiltinMaybeHungry(arity1) {\n  // TODO: define evaluate, and convert all subclasses to this simpler form\n  // def evaluate(args: util.ArrayList[SValue]): SValue\n  // Then execute can be defined in terms of evaluate. Like how it is done in `SExprAtomic`."
  },
  {
    "id" : "c46d1949-7751-4de2-a548-67cc14ef6263",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "daefcb90-4aa6-4c64-b0b4-b6c36b00d851",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does the `1` in `arity1` have a meaning? To me it looks just like `arity`.",
        "createdAt" : "2020-06-26T11:16:18Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "49d26d90-0150-49f4-80a6-13548b7bfc12",
        "parentId" : "daefcb90-4aa6-4c64-b0b4-b6c36b00d851",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Scala wont let this variable be named `arity`. I assume because it already in scope in a parent class. Hence the suffix `1`",
        "createdAt" : "2020-06-30T15:01:45Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "20c61b34-5485-4820-aec9-bf7a38ad00b8",
        "parentId" : "daefcb90-4aa6-4c64-b0b4-b6c36b00d851",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I sadly understand.",
        "createdAt" : "2020-06-30T16:45:02Z",
        "updatedAt" : "2020-06-30T16:46:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +48,52 @@}\n\nsealed abstract class SBuiltin(val arity1: Int) extends SBuiltinMaybeHungry(arity1) {\n  // TODO: define evaluate, and convert all subclasses to this simpler form\n  // def evaluate(args: util.ArrayList[SValue]): SValue"
  },
  {
    "id" : "aa54b27c-a8fd-4b13-8869-bde6b50588e7",
    "prId" : 5811,
    "comments" : [
      {
        "id" : "0e17116c-9432-41c8-bfa5-3454d4eeae79",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@nickchapman-da @remyhaemmerle-da What's _operational_ the difference between\r\n```scala\r\nmbCoid.map(SContractId)\r\n```\r\nand\r\n```scala\r\nmbCoid.map { coid => SContractId(coid) }\r\n```\r\nIn other words, why would you eta-expand? I've seen changes like this in other places too.",
        "createdAt" : "2020-05-06T09:22:19Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e7c626d9-2322-45ca-8dc4-2db0f5494098",
        "parentId" : "0e17116c-9432-41c8-bfa5-3454d4eeae79",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not think there is any operational difference. \r\nHowever  `machine.returnValue = SOptional(mbCoid.map(SContractId))` is more idiomatic. ",
        "createdAt" : "2020-05-06T11:41:25Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : 765,
    "diffHunk" : "@@ -1,1 +980,984 @@          machine.returnValue = SOptional(mbCoid.map { coid =>\n            SContractId(coid)\n          })\n        case None =>\n          // if we cannot find it here, send help, and make sure to update [[PartialTransaction.key]] after"
  },
  {
    "id" : "26f1f88b-2a14-4b86-942d-4d6dcfd87b1d",
    "prId" : 5811,
    "comments" : [
      {
        "id" : "d8da1742-0be9-4d23-b014-718270cfa1d4",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "should this be: `machine.returnValue = SV.None` ?",
        "createdAt" : "2020-05-06T12:19:18Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cf920ceb-e758-43f0-88fd-fac2ae0c4484",
        "parentId" : "d8da1742-0be9-4d23-b014-718270cfa1d4",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "and some other places",
        "createdAt" : "2020-05-06T12:20:43Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f502d3b-950f-48f6-89c3-61fd48718e6b",
        "parentId" : "d8da1742-0be9-4d23-b014-718270cfa1d4",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `machine.returnValue = ` is in line 343.",
        "createdAt" : "2020-05-06T12:23:30Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +355,359 @@            SOptional(Some(SNumeric(Numeric.assertFromBigDecimal(scale, BigDecimal(newString)))))\n          } else {\n            SV.None\n          }\n        case _ =>"
  },
  {
    "id" : "599dbe17-ce22-4174-9a75-43c2aa0abd80",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "3eb705b9-ea6c-42e9-b11c-3ec824e35933",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "I wonder whether you want to check here that the contract ID in `args0` does not clash w.r.t. discriminators. If we reinterpret a tree, the contract ID might come from a `fetchByKey` construct which is translated into a fetch node only. So the fetched contract ID might come out of nowhere. But I'm not sure whether this can happen on this code path.",
        "createdAt" : "2020-04-02T10:23:47Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d65459a1-4a16-4a95-a1d6-b17404f2d518",
        "parentId" : "3eb705b9-ea6c-42e9-b11c-3ec824e35933",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Here I do not want to check the contract in `args0`. \r\nThe check of contract gathering by contract key should be done in  `SBULookupKey` (done) and in `SBUFetchKey` (currently missing) ",
        "createdAt" : "2020-04-02T10:45:21Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +919,923 @@        case SContractId(coid) => coid\n        case v => crash(s\"expected contract id, got: $v\")\n      }\n\n      machine.localContracts.get(coid) match {"
  },
  {
    "id" : "e076f578-1210-43ea-baa1-30346b9d32d7",
    "prId" : 5048,
    "comments" : [
      {
        "id" : "1b7dceab-77b0-4046-9d00-970bbac66861",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Is the \"positive\" `ValueEnum(Some(id), ...)` missing?\r\n\r\nEdit: Ah no, it's further down. Maybe colocate the two cases?",
        "createdAt" : "2020-03-18T07:09:37Z",
        "updatedAt" : "2020-03-18T12:46:43Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b8b64400741795af304d763a8e244b07dcb09",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +947,951 @@        case V.ValueVariant(None, _variant @ _, _value @ _) =>\n          crash(\"SValue.fromValue: variant without identifier\")\n        case V.ValueEnum(None, constructor @ _) =>\n          crash(\"SValue.fromValue: enum without identifier\")\n        case V.ValueOptional(mbV) =>"
  },
  {
    "id" : "93acd587-6e8c-4449-bb1d-9d62a4857ae1",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "ff7c2345-2926-4114-9deb-8723c79b1d47",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "this Set is immutable, not sure why `toList.toSet` was there",
        "createdAt" : "2020-01-06T03:10:01Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d7c070ec-d545-4bd6-8d4c-6bde6b6c382c",
        "parentId" : "ff7c2345-2926-4114-9deb-8723c79b1d47",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: \r\n\r\nThe explanation is very simple. If you looked the history of `committer(s)`, you could saw that  it used to be an `Option[Party]`. This line was forgotten when `committer(s)` become a Set.",
        "createdAt" : "2020-01-06T08:39:27Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1008,1012 @@      val contextActors = machine.ptx.context match {\n        case ContextExercises(ctx) => ctx.actingParties union ctx.signatories\n        case ContextRoot => machine.committers\n      }\n"
  },
  {
    "id" : "01ce13d7-172b-46c7-b321-fcc904b67a0f",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "bd9235e4-509a-40e7-aa8c-52d067d5fe1d",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:14:51Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +1434,1438 @@              } else {\n                val rn = n.min(Int.MaxValue.toLong).toInt\n                machine.ctrl = CtrlValue(SText(t * rn))\n              }\n            case x =>"
  },
  {
    "id" : "32c486a0-5dcb-4131-ba0a-1ab18ca5ffbf",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "82f1f948-90bf-4d29-85e3-5469d9969f02",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:15:34Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +1452,1456 @@          args.get(1) match {\n            case SText(t) =>\n              val seq : Seq[SValue] = t.split(pattern).map(SText).toSeq\n              machine.ctrl = CtrlValue(SList(FrontStack(seq)))\n            case x =>"
  },
  {
    "id" : "67e81933-8119-46b3-8394-92806ad31850",
    "prId" : 3734,
    "comments" : [
      {
        "id" : "ce1079c0-6f42-4826-acca-cad6241d5770",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-12-04T18:15:58Z",
        "updatedAt" : "2019-12-05T13:34:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea94ecd7a45890252cd55edbd0adda2787b8cbdc",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +1477,1481 @@                }\n              }\n              machine.ctrl = CtrlValue(SText(xs.iterator.mkString(sep)))\n            case x =>\n              throw SErrorCrash(s\"type mismatch SBTextIntercalate, expected List got $x\")"
  },
  {
    "id" : "1875f123-9777-4753-a267-fc9eff057282",
    "prId" : 2905,
    "comments" : [
      {
        "id" : "de2fcc92-518e-498c-ad9b-9e110183b724",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Shouldn't `SB(To|From)Template` also get a comment like the primitives above have? E.g.\r\n```\r\n/** $error :: Text -> a */\r\n```",
        "createdAt" : "2019-09-16T08:14:40Z",
        "updatedAt" : "2019-09-16T08:56:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f68797ae-cefa-4634-b743-9abe64cefe0d",
        "parentId" : "de2fcc92-518e-498c-ad9b-9e110183b724",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, thanks! I’ve added comments.",
        "createdAt" : "2019-09-16T08:25:37Z",
        "updatedAt" : "2019-09-16T08:56:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "758775bac71c51faf20e2552396373a57eb59af9",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1208,1212 @@    *    -> AnyTemplate\n    */\n  final case object SBToAnyTemplate extends SBuiltin(1) {\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {\n      machine.ctrl = CtrlValue(args.get(0) match {"
  },
  {
    "id" : "9760288a-1667-4dcb-9dd8-ccc73b45bfce",
    "prId" : 2681,
    "comments" : [
      {
        "id" : "c1097add-fe9d-495d-a378-626895febe22",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Doesn't this filter out all `0` characters of the decimal part, also those in `1.0001`?",
        "createdAt" : "2019-08-28T11:39:50Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d7e8f1b-97ee-4710-8038-1ed6c961758e",
        "parentId" : "c1097add-fe9d-495d-a378-626895febe22",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "`filter` is called on  `Option[String]` not in `String`. That is two say it is idempotent all inputs except `Some(\"0\")`.",
        "createdAt" : "2019-08-28T12:20:28Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "50df076e-0c27-470e-bcca-ebd2545c3a4d",
        "parentId" : "c1097add-fe9d-495d-a378-626895febe22",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "D'oh, of course. Thank you.",
        "createdAt" : "2019-08-28T12:26:38Z",
        "updatedAt" : "2019-08-28T13:06:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1a1c94ccb2d1f055e16c314d83381a9c11948792",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +306,310 @@      val result = string match {\n        case validFormat(signPart, intPart, _, decPartOrNull) =>\n          val decPart = Option(decPartOrNull).filterNot(_ == \"0\").getOrElse(\"\")\n          // First, we count the number of significant digits to avoid the conversion attempts that\n          // are doomed to failure."
  },
  {
    "id" : "7c0d847b-d9e3-4c5e-92fa-798a7c3456e5",
    "prId" : 1429,
    "comments" : [
      {
        "id" : "b91a3570-f0f3-48c4-84b6-1980f4ecfeb1",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "BTW, are you sure that doesn't allow unicode digits?",
        "createdAt" : "2019-05-28T13:12:16Z",
        "updatedAt" : "2019-05-28T19:41:27Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3287bab1-eb5e-46bd-b49d-e95508ecd113",
        "parentId" : "b91a3570-f0f3-48c4-84b6-1980f4ecfeb1",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "The answer is that it doesn't allow unicode digits: https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html",
        "createdAt" : "2019-05-28T13:19:28Z",
        "updatedAt" : "2019-05-28T19:41:27Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "233f17b7c23f16739aafae61ee77cfd643a0fa62",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +318,322 @@\n  final case object SBFromTextDecimal extends SBuiltin(1) {\n    private val pattern = \"\"\"[+-]?\\d+(\\.\\d+)?\"\"\".r.pattern\n\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "78e7ef31-5c4d-4a63-ae77-f6a61fee45be",
    "prId" : 1407,
    "comments" : [
      {
        "id" : "f27a5b60-d744-4083-9a59-f1121448fbe6",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "allowing the leading `+` has the slight disadvantage that we do not have a canonical representation for `Int64` -- the same numbers can be represented in multiple ways. i'm on the fence on whether this is a good thing or not.",
        "createdAt" : "2019-05-27T14:27:40Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3ade837e-32c6-4b1b-8994-db0c1de700bf",
        "parentId" : "f27a5b60-d744-4083-9a59-f1121448fbe6",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If we allow leading zeros, we have the same problem.",
        "createdAt" : "2019-05-27T14:36:43Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "77cd4cb8-b601-4067-abaf-3864eb8e3de3",
        "parentId" : "f27a5b60-d744-4083-9a59-f1121448fbe6",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "Yes, see my own comment below.",
        "createdAt" : "2019-05-27T14:37:34Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "634d99ba-b3a5-4d0a-82de-ac3fba095a2c",
        "parentId" : "f27a5b60-d744-4083-9a59-f1121448fbe6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I believe we should not restrict parsing to canonical representation. For instance, the final user probably want to parse \"1\" and \"01\" in the same way.\r\nBoth Haskell and java (and any other languages I can think of) parse \"01\" and \"1\" in the same way.\r\n\r\nFurthermore, this has no impact on determinism.   \r\n\r\n\r\n \r\n\r\n",
        "createdAt" : "2019-05-27T14:46:50Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea16d985a1397393fa2f0e0f0f3c58f1b23bb4ab",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +235,239 @@\n  final case object SBFromTextInt64 extends SBuiltin(1) {\n    private val pattern = \"\"\"[+-]?\\d+\"\"\".r.pattern\n\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "9064373a-4ed1-4dd4-9bf7-6e4fd427f067",
    "prId" : 1407,
    "comments" : [
      {
        "id" : "02ffdb81-ff22-4a1b-9517-c3d758217767",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "do you allow trailing / leading 0s? this regexp does. do we know what that means when parsing?",
        "createdAt" : "2019-05-27T14:28:09Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8bf08cf7-22e8-4475-8629-3d47233d0035",
        "parentId" : "02ffdb81-ff22-4a1b-9517-c3d758217767",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Please see tests \r\nhttps://github.com/digital-asset/daml/pull/1407/files#diff-ae9014deee9be354b39ebd26faa0150b\r\n",
        "createdAt" : "2019-05-27T14:46:17Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7ddc216b-6a29-40f6-a9a0-237c9308c266",
        "parentId" : "02ffdb81-ff22-4a1b-9517-c3d758217767",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "OK, so the answer is \"yes\". I'm really on the fence regarding canonical representation. For users it's clearly worse... so going with the current implementation is probably the right thing.\r\n\r\n@hurryabit what do you think?",
        "createdAt" : "2019-05-27T14:48:46Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f30fc92-f9f9-48d4-84c0-74462dd395cb",
        "parentId" : "02ffdb81-ff22-4a1b-9517-c3d758217767",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not sure there's value in having a canonical representation for _parsing_. Being lenient seems fine to me.",
        "createdAt" : "2019-05-27T14:50:23Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f81193f5-188b-4bbb-b050-a6da66ff2778",
        "parentId" : "02ffdb81-ff22-4a1b-9517-c3d758217767",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Note, we are already lenient (though a bit less than here) when parsing decimals from protobu. We accept anything that matches \r\n``[+-]?[0-9]{1,28}(\\.[0-9]{1,10})?``",
        "createdAt" : "2019-05-27T15:00:14Z",
        "updatedAt" : "2019-05-27T16:17:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ea16d985a1397393fa2f0e0f0f3c58f1b23bb4ab",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +253,257 @@\n  final case object SBFromTextDecimal extends SBuiltin(1) {\n    private val pattern = \"\"\"[+-]?[0-9]+(\\.[0-9]+)?\"\"\".r.pattern\n\n    def execute(args: util.ArrayList[SValue], machine: Machine): Unit = {"
  },
  {
    "id" : "e6af0d93-c580-4d71-b327-917d78a3d44d",
    "prId" : 1377,
    "comments" : [
      {
        "id" : "9f4eead8-0953-4459-960e-d6069f16d66d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@remyhaemmerle-da @bitonic Can you please confirm whether this is the right place to fill in the controllers for missing actors.",
        "createdAt" : "2019-05-24T11:40:11Z",
        "updatedAt" : "2019-05-24T11:53:03Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2de1486d-6138-4738-8dcb-e84025d2f126",
        "parentId" : "9f4eead8-0953-4459-960e-d6069f16d66d",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "looks good.",
        "createdAt" : "2019-05-24T12:28:28Z",
        "updatedAt" : "2019-05-24T12:28:28Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d935e42734257440c114828dab523a7f4df325d2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +715,719 @@          optLocation = machine.lastLocation,\n          consuming = consuming,\n          actingParties = optActors.getOrElse(ctrls),\n          signatories = sigs,\n          stakeholders = sigs union obs,"
  }
]