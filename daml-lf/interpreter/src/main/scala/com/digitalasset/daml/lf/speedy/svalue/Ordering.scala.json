[
  {
    "id" : "d4791efa-8b9f-4314-8c05-5e4bed7c741b",
    "prId" : 7329,
    "comments" : [
      {
        "id" : "be9ee0b7-3009-47b6-8895-0b0e17031772",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I know this is not necessary but it makes the code easier to read for people with limited Scala experience, of which we have many.\r\n```suggestion\r\n        case (SUnit, SUnit) =>\r\n          ()\r\n```",
        "createdAt" : "2020-09-08T11:24:33Z",
        "updatedAt" : "2020-09-08T11:40:43Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "62fb32a4dcf13c3e6444a134bc27819bc6b990e3",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +40,44 @@    def step(tuple: (SValue, SValue)) =\n      tuple match {\n        case (SUnit, SUnit) =>\n          ()\n        case (SBool(x), SBool(y)) =>"
  },
  {
    "id" : "7219fdd4-687f-400d-8e21-a8846c9ec115",
    "prId" : 7329,
    "comments" : [
      {
        "id" : "51ee51e8-87ca-49f3-90bb-9a1363703d78",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I assume `STextMap` is backed by an ordered tree map. Is that correct? If so, this gives us complexity `O(n log n)`. Is there a way to get an iterator over the key/value pairs in the order of the keys? This should leave us with complexity `O(n)` then.\r\n\r\nSame for generic map below.",
        "createdAt" : "2020-09-08T11:30:10Z",
        "updatedAt" : "2020-09-08T11:40:43Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2730dca-8111-4227-a59d-5af9183ed826",
        "parentId" : "51ee51e8-87ca-49f3-90bb-9a1363703d78",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Inside Speedy, `STextMap` is based on HashMap, so there is no way to get linear complexity here.\r\nNote that #7334, replaces  `STextMap` by `SGenMap` (based on TreeMap) so we will get linear complexity. ",
        "createdAt" : "2020-09-08T11:39:53Z",
        "updatedAt" : "2020-09-08T11:41:19Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e4bb1853-9037-4e4d-82b3-d0826c94562d",
        "parentId" : "51ee51e8-87ca-49f3-90bb-9a1363703d78",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's good to know. Thanks a lot for the explanation.",
        "createdAt" : "2020-09-08T14:01:26Z",
        "updatedAt" : "2020-09-08T14:01:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "62fb32a4dcf13c3e6444a134bc27819bc6b990e3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +74,78 @@          val yKeys = yMap.keys.toSeq.sorted\n          push(\n            new InterlacedIterator(xKeys.iterator.map(SText), xKeys.iterator.map(xMap)),\n            new InterlacedIterator(yKeys.iterator.map(SText), yKeys.iterator.map(yMap)),\n          )"
  },
  {
    "id" : "c223d324-d8f8-4385-aedc-d831a0ea0e25",
    "prId" : 4893,
    "comments" : [
      {
        "id" : "21d3811e-6453-48cb-9384-8ed6a70d2108",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "When are we planning to switch the default in sandbox to use absolute contract ids everywhere? I expect that having maps indexed by contract ids will be one of the major usecases for genmaps.",
        "createdAt" : "2020-03-09T13:04:26Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f570556f-9062-46e7-add6-7939ab992ab3",
        "parentId" : "21d3811e-6453-48cb-9384-8ed6a70d2108",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am not sure, I will change the default in the sandbox ever. \r\nIn kvutils (and then in next gen sandbox) it is already the only possible mode. \r\nDAML-LF 1.9 will require the new contract ids scheme to be enable. \r\nThe old scheme will simply die together the legacy sandbox.  ",
        "createdAt" : "2020-03-12T10:05:25Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +236,240 @@              compareType(t1, t2) -> ImmArray((v1, v2))\n          }\n          case SContractId(RelativeContractId(_)) => {\n            case SContractId(RelativeContractId(_)) =>\n              throw SErrorCrash(\"relative contract id are not comparable\")"
  }
]