[
  {
    "id" : "b5b598fe-ca78-4943-8ab9-2705880a4559",
    "prId" : 7778,
    "comments" : [
      {
        "id" : "1a997896-c3eb-4301-b88a-a1be79c4bdbb",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Why not something like: \r\n\r\n```scala\r\n   val builtin = structProj.fieldIndex.fold(SBStructProjByName(structProj.field))(SBStructProj)\r\n   builtin.apply(compile(structProj.struct))\r\n```",
        "createdAt" : "2020-10-22T12:08:32Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9917cb40-d2d0-4976-ad2c-e71a957d4de6",
        "parentId" : "1a997896-c3eb-4301-b88a-a1be79c4bdbb",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I simply don't like `fold` on `Option`. Whenever I see `fold`, I need to stop for a moment and run a type inference in my head. I don't need to do this with pattern matching. Thus, I'm avoiding to produce code I _personally_ find harder to read, although I won't stop others from using `fold`.",
        "createdAt" : "2020-10-22T12:17:37Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1d3e0d08-861f-4d97-9bf1-3181aa1c27ee",
        "parentId" : "1a997896-c3eb-4301-b88a-a1be79c4bdbb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "No problem, it was just a suggestion. ",
        "createdAt" : "2020-10-22T12:19:37Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9aa2db7b-6493-43b1-889e-61aaf7edf48d",
        "parentId" : "1a997896-c3eb-4301-b88a-a1be79c4bdbb",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I know. Apologies if I came across as aggressive!\r\n\r\nMy goal was to share my motivation for doing things the way I do them. ðŸ˜ƒ ",
        "createdAt" : "2020-10-22T12:34:30Z",
        "updatedAt" : "2020-10-23T11:11:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6ef549582f052ca0d9abd09ff2f154d159b01849",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +379,383 @@          case None => SBStructProjByName(structProj.field)(compile(structProj.struct))\n          case Some(index) => SBStructProj(index)(compile(structProj.struct))\n        }\n      case structUpd: EStructUpd =>\n        structUpd.fieldIndex match {"
  },
  {
    "id" : "34acf4f8-1560-421a-a639-d3d182534ba0",
    "prId" : 7502,
    "comments" : [
      {
        "id" : "aa74a3af-83fd-47dc-a6fb-d5df7783a9eb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a reason why we used a list here? A map seems like a much more natural choice and better in basically every regard so I wonder if Iâ€™m missing something here.",
        "createdAt" : "2020-09-29T09:34:55Z",
        "updatedAt" : "2020-09-29T11:21:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6fdfadef-577b-40a4-9284-f81d348344dc",
        "parentId" : "aa74a3af-83fd-47dc-a6fb-d5df7783a9eb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I think the original idea was to represent a stack and to be able to \"pop\" the changes made to it. \r\nIn the current design this is not used, so better a `Map`.  ",
        "createdAt" : "2020-09-29T11:04:02Z",
        "updatedAt" : "2020-09-29T11:21:22Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b40b0bfe202a7aee4497efacd8666fa6d9ff2a47",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +183,187 @@  private[this] case class Env(\n      position: Int = 0,\n      varIndices: Map[VarRef, Position] = Map.empty,\n  )\n"
  },
  {
    "id" : "ba3bf973-8440-4135-bf38-220c43cbeadb",
    "prId" : 7502,
    "comments" : [
      {
        "id" : "bb90c534-bf02-47f7-befb-ef7820b892e0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If we have an overload for `exprVar` should we also have an overload for typevar? (or a helper, as mentioned above, Iâ€™m not entirely convinced the overload is helpful).",
        "createdAt" : "2020-09-29T09:37:57Z",
        "updatedAt" : "2020-09-29T11:21:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bdd09c15-6151-4c93-b7af-f6e6e79ecde4",
        "parentId" : "bb90c534-bf02-47f7-befb-ef7820b892e0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "no more overload.",
        "createdAt" : "2020-09-29T11:13:27Z",
        "updatedAt" : "2020-09-29T11:21:22Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b40b0bfe202a7aee4497efacd8666fa6d9ff2a47",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +699,703 @@        compileAbss(body, arity + 1)\n      case ETyAbs((binder, KNat), body) =>\n        addTypeVar(binder, nextPosition())\n        compileAbss(body, arity + 1)\n      case ETyAbs((binder, _), body) =>"
  },
  {
    "id" : "0917e113-cbe5-431c-a7ac-b3c41fed8d6f",
    "prId" : 7493,
    "comments" : [
      {
        "id" : "d9982734-f286-46e0-bb3a-cacdfb65310c",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Is it better to call `SELet1` ?",
        "createdAt" : "2020-09-30T13:43:27Z",
        "updatedAt" : "2020-09-30T14:33:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e7464c94-7bec-44d6-b8d9-79b2ea69641f",
        "parentId" : "d9982734-f286-46e0-bb3a-cacdfb65310c",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Do we now use `SELet` anywhere? Can we drop it?",
        "createdAt" : "2020-09-30T14:18:25Z",
        "updatedAt" : "2020-09-30T14:33:52Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8a37a272-2cf1-4a7d-b609-fa3ffc52e40d",
        "parentId" : "d9982734-f286-46e0-bb3a-cacdfb65310c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Why not `SELet` ? in any case on another PR.  ",
        "createdAt" : "2020-09-30T14:21:05Z",
        "updatedAt" : "2020-09-30T14:33:52Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b92a346f-868c-4009-93fb-22a7e08ad56f",
        "parentId" : "d9982734-f286-46e0-bb3a-cacdfb65310c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@dajmaki we will drop the SELet in another PR. \r\n",
        "createdAt" : "2020-09-30T14:28:34Z",
        "updatedAt" : "2020-09-30T14:33:52Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b7b7df864922c41c0f30f2baaa1dc25eff5218e",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +201,205 @@\n  private[this] def let(bound: SExpr)(body: Position => SExpr) =\n    SELet1General(bound, body(nextPosition()))\n\n  private[this] def unaryFunction(body: Position => SExpr): SExpr ="
  },
  {
    "id" : "6cf05ce1-ec94-4d54-8549-42335bfa62d1",
    "prId" : 7493,
    "comments" : [
      {
        "id" : "d98f3d23-f110-46c9-830f-ff3468ba220d",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I really like the look of this! :+1: ",
        "createdAt" : "2020-09-30T13:51:50Z",
        "updatedAt" : "2020-09-30T14:33:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3b7b7df864922c41c0f30f2baaa1dc25eff5218e",
    "line" : 218,
    "diffHunk" : "@@ -1,1 +761,765 @@            let(SBSBeginCommit(optLoc)(svar(partyPos), svar(tokenPos))) { _ =>\n              let(app(svar(updatePos), svar(tokenPos))) { resultPos =>\n                SBSEndCommit(mustFail = false)(svar(resultPos), svar(tokenPos))\n              }\n            }"
  },
  {
    "id" : "ffb5d38b-1159-4e7b-ad3b-a4edccb5b19e",
    "prId" : 7472,
    "comments" : [
      {
        "id" : "46f946da-b701-4841-964a-d6b264a906e8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "There seems to be a lot of duplication between the definition of `ChoiceDefRef` and `ChoiceByKeyDefRef`. Iâ€™m not entirely clear why we need `ChoiceByKeyDefRef` at all. Whatâ€™s stopping us from compiling an `exerciseByKey` into `FetchByKeyDefRef` and `ChoiceDefRef` and removing `ChoiceByKeyDefRef`?",
        "createdAt" : "2020-09-24T06:45:16Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b47f8625-1bb6-4fd4-9bea-704498772092",
        "parentId" : "46f946da-b701-4841-964a-d6b264a906e8",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If it's possible to do what @cocreature described, I'd be in favor of that too.",
        "createdAt" : "2020-09-24T09:09:10Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "90a7324a-c688-40ab-8cf9-a561e1f87746",
        "parentId" : "46f946da-b701-4841-964a-d6b264a906e8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The issue is that the \"by cid\" operations (create, exercise, fetch) have to compute the contract key from the template argument (we need the key in the transaction even if the node was built by \"by cid\" ). On the other hand \"by key\" operation don't have to do, since it is given.\r\n\r\nI  do not see an easy way to factorize as @cocreature suggested without recompute the contract key for each \"by key\" operations.  Note that before my PR, contract key was recomputed for `ExerciseByKey`, but not for `FetchByKey`.\r\n\r\nWe can of course, make a bit of factorization in the Scala code (I would let that for the following PR), but I think it is tricky to do it at the LF level.",
        "createdAt" : "2020-09-24T12:13:51Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1300614-741f-4589-ae99-af8c68c407a7",
        "parentId" : "46f946da-b701-4841-964a-d6b264a906e8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense, Iâ€™m fine with leaving it for a separate PR.",
        "createdAt" : "2020-09-24T13:27:52Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f87982ebeaafdd21277c2bc4c42b1f7319643a1",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +968,972 @@\n  /** Compile a choice into a top-level function for exercising that choice */\n  private[this] def compileChoiceByKey(\n      tmplId: TypeConName,\n      tmpl: Template,"
  },
  {
    "id" : "2a3ce807-4456-47ac-9180-e1fd28747ff4",
    "prId" : 7472,
    "comments" : [
      {
        "id" : "b7947913-ff93-41bc-9c91-971be65705b6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    //       _ = $beginExercise[tmplId, chId, consuming, byKey = false] <choiceArg> <cid> <actors> sigs obs ctrls mbKey <token>\r\n```",
        "createdAt" : "2020-09-24T10:07:39Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f87982ebeaafdd21277c2bc4c42b1f7319643a1",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +899,903 @@    // ChoiceDefRef(SomeTemplate, SomeChoice) = \\<actors> <cid> <choiceArg> <token> ->\n    //   let targ = fetch <cid>\n    //       _ = $beginExercise[tmplId, chId] <choiceArg> <cid> <actors> <byKey flag> sigs obs ctrls mbKey <token>\n    //       result = <updateE>\n    //       _ = $endExercise[tmplId]"
  },
  {
    "id" : "db70681a-895f-429d-a540-eecc77002acd",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "014447d8-8a54-4b29-94f7-b3d4e8c77de3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "IIRC, this function was already occasionally hitting the limits of stack usage before this change. Linearizing the code using `ELet1*` makes the situation worse. I suggest we rewrite this function using some technique that does not blow up the stack _before_ we merge this change and rebase this change on top of the other one.\r\ncc @remyhaemmerle-da",
        "createdAt" : "2020-06-26T10:57:30Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "79e0b055-8cba-42e3-ada3-13497ba0cdc1",
        "parentId" : "014447d8-8a54-4b29-94f7-b3d4e8c77de3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "The validate function is fixed now.",
        "createdAt" : "2020-06-30T14:58:39Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1add76d7-43de-4f07-8760-979a64d9b532",
        "parentId" : "014447d8-8a54-4b29-94f7-b3d4e8c77de3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thank you.",
        "createdAt" : "2020-06-30T16:43:42Z",
        "updatedAt" : "2020-06-30T16:46:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +1187,1191 @@  // valiate that we correctly captured all free-variables, and so reference to them is\n  // via the surrounding closure, instead of just finding them higher up on the stack\n  def validate(anf0: AExpr): AExpr = {\n\n    def goV(v: SValue): Unit = {"
  },
  {
    "id" : "9b3b5fde-2d1c-4f51-be41-2005863b6fc8",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "894b4e67-bfd5-449f-87e9-f8512942706f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let me guess, `scalafmt` does that to us. ðŸ˜¦",
        "createdAt" : "2020-05-19T17:13:41Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "693bb794-1a36-43b2-a63d-a73ee76bf993",
        "parentId" : "894b4e67-bfd5-449f-87e9-f8512942706f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I guess :man_shrugging: ",
        "createdAt" : "2020-05-20T07:04:09Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +27,31 @@  */\nprivate[lf] object Compiler {\n\n  case class CompilationError(error: String) extends RuntimeException(error, null, true, false)\n  case class PackageNotFound(pkgId: PackageId)"
  },
  {
    "id" : "661175be-b5ca-4dc3-b4a2-a8e1a1630bd8",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "d5030b93-9a47-4b05-9ee3-744d0a7bd873",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      remaps.get(i).getOrElse(throw CompilationError(s\"remap($i),remaps=$remaps\"))\r\n```",
        "createdAt" : "2020-05-19T17:17:08Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1004,1008 @@        case None => throw CompilationError(s\"remap($i),remaps=$remaps\")\n        case Some(loc) => loc\n      }\n    }\n    expr match {"
  },
  {
    "id" : "f863d7bd-ef18-4bb0-8bdb-945b83828c1a",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "8463f778-d08c-4c51-bfed-eb7373162930",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n          i => i -> SELocA(arity - i)\r\n```",
        "createdAt" : "2020-05-19T17:19:01Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +1026,1030 @@        val newRemapsA = (1 to arity).map {\n          case i =>\n            i -> SELocA(arity - i)\n        }\n        // The keys in newRemapsF and newRemapsA are disjoint"
  },
  {
    "id" : "988c69cc-a04b-469b-8cba-fc7f5f6fdd3c",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "ce63c0e5-b4ca-479f-8257-ce28b9c3012b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I assume we didn't need this before because of the `bound` parameter of `closureConvert`. Is that correct?",
        "createdAt" : "2020-05-19T17:21:54Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ba895aa8-8a07-4104-be13-33af1696bf02",
        "parentId" : "ce63c0e5-b4ca-479f-8257-ce28b9c3012b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "?",
        "createdAt" : "2020-05-20T08:25:26Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8c89e376-19ba-49d6-8fb7-e3415a629254",
        "parentId" : "ce63c0e5-b4ca-479f-8257-ce28b9c3012b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. previously the re-mapping was performed in a context of absolute stack offsets.\r\nThis was *really really* hard to understand, although perhaps more efficient (at compile time).\r\n\r\nIt would be possible to do this still, at the cost of some confusion.\r\n\r\nBut a further problem is that the (SELocS) values of the map are also relative indexed.\r\nAnd so we either need a new type to represent SELoc-S(absolute)+A+F\r\nOr abuse the existing SELoc type.\r\nNeither choice seems very nice.\r\n\r\nActually, I would prefer if the SELocS could be actually be indexed absolutely.\r\nI think this would be slightly more efficient at runtime.\r\nI did have an experiment, but it runs in to issues regarding the way we handle the recursive builtins.\r\nSo I thought it best to leave this potential change to a later time.",
        "createdAt" : "2020-05-20T09:21:19Z",
        "updatedAt" : "2020-05-20T09:21:19Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +1086,1090 @@  // And any values in the map which are of the form SELocS must also be _shifted_\n  // because SELocS indexes are also relative to the end of the stack.\n  def shift(remaps: Map[Int, SELoc], n: Int): Map[Int, SELoc] = {\n\n    // We must update both the keys of the map (the relative-indexes from the original SEVar)"
  },
  {
    "id" : "59480997-958a-4cb9-bf8d-724b0f5db556",
    "prId" : 5957,
    "comments" : [
      {
        "id" : "038fa5e8-2076-4120-ab05-31d5b74fb94c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`{}` are not really part of the function syntax, nor the `case` syntax, irrespective of IDEA's obsession with them. There are occasionally good reasons to use them with functions, but never with `case` per se.\r\n\r\n```suggestion\r\n      case NoProfile => (_, expr) => expr\r\n      case FullProfile => (label, expr) =>\r\n        expr match {\r\n          case SELabelClosure(_, expr1) => SELabelClosure(label, expr1)\r\n          case _ => SELabelClosure(label, expr)\r\n        }\r\n```",
        "createdAt" : "2020-05-15T20:18:22Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b6a43e8e-88ea-4ef0-a047-ebea24dc5a34",
        "parentId" : "038fa5e8-2076-4120-ab05-31d5b74fb94c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I find the `case x => y => z` syntax quite confusing because the two occurrences of `=>` don't mean exactly the same thing. I was looking for some scoping construct to put in between them. Could I just use `(...)`?",
        "createdAt" : "2020-05-18T16:12:09Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f2ddf830-0883-41b0-979f-7f528dff5ad2",
        "parentId" : "038fa5e8-2076-4120-ab05-31d5b74fb94c",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> Could I just use `(...)`?\r\n\r\nYes.",
        "createdAt" : "2020-05-18T16:13:34Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +143,147 @@          case _ => SELabelClosure(label, expr)\n        }\n      }\n    }\n"
  },
  {
    "id" : "e9bdd174-d8a0-4f89-9ea0-bde60daf4b25",
    "prId" : 5819,
    "comments" : [
      {
        "id" : "89b0b395-c9fd-4104-aab4-48062e122a05",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am not sure we should use \"Compile\" for the name of this function.",
        "createdAt" : "2020-05-05T12:06:33Z",
        "updatedAt" : "2020-05-11T08:59:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +136,140 @@  @throws[CompilationError]\n  def unsafeClosureConvert(sexpr: SExpr): SExpr =\n    validate(closureConvert(Map.empty, 0, sexpr))\n\n  @throws[PackageNotFound]"
  },
  {
    "id" : "ae1709b5-3ca6-4cc1-9629-b9fba82d7b3d",
    "prId" : 5629,
    "comments" : [
      {
        "id" : "0835f234-b645-4604-807a-61a4c89b318e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Might we worth explaining that we use `dependenciesInTopologicalOrder` because packages need to be compiled in order. Perhaps that's obvious to others though.",
        "createdAt" : "2020-04-20T13:15:56Z",
        "updatedAt" : "2020-04-20T14:48:19Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "37ebdcde-d329-41bf-b7e6-44a4371c02fc",
        "parentId" : "0835f234-b645-4604-807a-61a4c89b318e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-04-20T14:08:27Z",
        "updatedAt" : "2020-04-20T14:48:19Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3f58847316bfebf75c98029bd4ce800560e794f7",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +158,162 @@  def compilePackages(toCompile: Iterable[PackageId]): Map[SDefinitionRef, SExpr] =\n    // Package needs to be compiled in order.\n    dependenciesInTopologicalOrder(toCompile.toList, packages)\n      .foldLeft(Map.empty[SDefinitionRef, SExpr])(\n        _ ++ compilePackage(_)"
  },
  {
    "id" : "8ca6c3dd-1e11-4b2c-b923-34174981d369",
    "prId" : 4990,
    "comments" : [
      {
        "id" : "abb7b193-b783-44ae-8f23-75f3b28f20db",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Is this to \"drop\" one of the parameters?",
        "createdAt" : "2020-03-16T11:11:54Z",
        "updatedAt" : "2020-03-16T12:18:41Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8465a4c2-6990-4b88-9f56-7222903340fd",
        "parentId" : "abb7b193-b783-44ae-8f23-75f3b28f20db",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This drop the type parameter `nat`, which is nor erase.   ",
        "createdAt" : "2020-03-16T12:11:51Z",
        "updatedAt" : "2020-03-16T12:18:41Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "388d7c03ab7235b2099abd7694f5a70a401bfdd4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +196,200 @@\n  private val SBLessNumeric =\n    SEAbs(3, SEApp(SEBuiltin(SBLess), Array(SEVar(2), SEVar(1))))\n  private val SBLessEqNumeric =\n    SEAbs(3, SEApp(SEBuiltin(SBLessEq), Array(SEVar(2), SEVar(1))))"
  },
  {
    "id" : "92404126-2de0-4df2-b139-a98aa181766a",
    "prId" : 2860,
    "comments" : [
      {
        "id" : "e12df0b0-5c8a-4f46-819e-8eca0d70302f",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  private[this] val logger = LoggerFactory.getLogger(this.getClass)\r\n```\r\nIn this case `private[this]` makes a lot of sense. :slightly_smiling_face: ",
        "createdAt" : "2019-09-10T13:29:09Z",
        "updatedAt" : "2019-09-13T09:55:56Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66feacefba7b54019abe3376660df6e5301c989f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +40,44 @@\nfinal case class Compiler(packages: PackageId PartialFunction Package) {\n  private val logger = LoggerFactory.getLogger(this.getClass)\n\n  private abstract class VarRef { def name: Ref.Name }"
  },
  {
    "id" : "93e0f5e1-b78f-44dd-b095-d1f4b63d32e4",
    "prId" : 1346,
    "comments" : [
      {
        "id" : "8267c40d-6f5a-4c1b-b5b9-0f7e38bfeeeb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@neil-da That's the Scala implementation: `\\x -> x`.",
        "createdAt" : "2019-05-23T13:27:45Z",
        "updatedAt" : "2019-05-23T13:31:31Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fd844fc6-ef63-4356-ad3d-fca508dc7ced",
        "parentId" : "8267c40d-6f5a-4c1b-b5b9-0f7e38bfeeeb",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "So simples :)",
        "createdAt" : "2019-05-23T21:20:50Z",
        "updatedAt" : "2019-05-23T21:20:50Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e330f2532a8450673c29e65222e4e4d6688f6e5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +145,149 @@          case BFoldr => SEBuiltinRecursiveDefinition.FoldR\n          case BEqualList => SEBuiltinRecursiveDefinition.EqualList\n          case BCoerceContractId => SEAbs(1, SEVar(1))\n          case _ =>\n            SEBuiltin(bf match {"
  }
]