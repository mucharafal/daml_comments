[
  {
    "id" : "91bb3158-aacc-4b34-b9a0-6e6c27eee54d",
    "prId" : 7501,
    "comments" : [
      {
        "id" : "ec2fe9c4-cf58-41ca-a85b-d12e01ca22ea",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Very open to better naming suggestions.",
        "createdAt" : "2020-09-28T17:51:48Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3203f520-38dc-47c8-aa04-5a3bd05c0319",
        "parentId" : "ec2fe9c4-cf58-41ca-a85b-d12e01ca22ea",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not like it neither, but I do not have better alternative. :disappointed: ",
        "createdAt" : "2020-09-29T07:45:10Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05eb1d71-49e8-4739-bb42-91801d55befd",
        "parentId" : "ec2fe9c4-cf58-41ca-a85b-d12e01ca22ea",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What do you think about something like `ExecutionEnvironment`? You can either execute DAML on a ledger or off a ledger.",
        "createdAt" : "2020-09-30T11:56:58Z",
        "updatedAt" : "2020-09-30T11:58:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ad5f16ee-b4bf-4e51-ac69-12c8218ba500",
        "parentId" : "ec2fe9c4-cf58-41ca-a85b-d12e01ca22ea",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "sounds reasonable but also sounds very generic to the point where it doesnâ€™t give you much of an idea of what the possible execution environments could be.",
        "createdAt" : "2020-09-30T12:00:13Z",
        "updatedAt" : "2020-09-30T12:00:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +98,102 @@  private type Actuals = util.ArrayList[SValue]\n\n  private[lf] sealed trait LedgerMode\n\n  private[lf] final case class OnLedger("
  },
  {
    "id" : "16d9ba0b-dd7b-4165-a3b3-822278261ba9",
    "prId" : 7501,
    "comments" : [
      {
        "id" : "eb8fc43e-5c11-4396-aea5-a0377d35c764",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not quite sure if this callback-style approach makes that much sense here. The alternative would be a `getOnLedger` or something like that.",
        "createdAt" : "2020-09-28T17:52:16Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +172,176 @@    private[speedy] def kontDepth(): Int = kontStack.size()\n\n    private[lf] def withOnLedger[T](op: String)(f: OnLedger => T): T =\n      ledgerMode match {\n        case onLedger @ OnLedger(_, _, _, _, _, _, _, _, _, _) => f(onLedger)"
  },
  {
    "id" : "b781298c-6b23-487b-b166-5545d8e74bb0",
    "prId" : 7225,
    "comments" : [
      {
        "id" : "8dffc65b-06e5-4004-a63b-a637f2022dd3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "much cleaner, thank you!",
        "createdAt" : "2020-08-25T12:57:07Z",
        "updatedAt" : "2020-08-25T12:57:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6a16b208121cdb8d6387a918c347fb59361a1f8e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +577,581 @@          case V.ValueUnit => SUnit\n          case V.ValueRecord(Some(id), fs) =>\n            val values = new util.ArrayList[SValue](fs.length)\n            val names = fs.map {\n              case (Some(f), v) =>"
  },
  {
    "id" : "82ffad47-90be-4d62-9a5a-68161406331d",
    "prId" : 6973,
    "comments" : [
      {
        "id" : "c25b4c31-8f80-4a74-befb-d8d0570c355c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@nickchapman-da Please correct me if I'm wrong: This line is the application of an `SPAP` to two values. Hence, there's no need to restore the environment for this because values don't contain references into the environment. Does that sound correct? If so, I'll remove the restoring of the environment in a fresh PR.",
        "createdAt" : "2020-08-04T09:14:13Z",
        "updatedAt" : "2020-08-04T09:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0478e183-2a12-461e-8672-0379d3497fba",
        "parentId" : "c25b4c31-8f80-4a74-befb-d8d0570c355c",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "What if the function allocates on the stack (because it contains a let binding)?",
        "createdAt" : "2020-08-04T09:50:58Z",
        "updatedAt" : "2020-08-04T09:50:58Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dc9d06276117ca217b75bd7972e46a9b05d2df87",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +920,924 @@          // TODO(MH): This looks like it has some potential for further\n          // performance gains once the AST nodes related to ANF have landed.\n          machine.ctrl = SEAppAtomicFun(func, Array(SEValue(acc), SEValue(item)))\n      }\n    }"
  },
  {
    "id" : "b1246483-bb2c-4bf3-8cf6-93808d33030c",
    "prId" : 6579,
    "comments" : [
      {
        "id" : "fbd85ce7-8a29-44d2-849f-0905d2652597",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This change does not seem to be related to making things private. I assume `ImmArray` is expected to be more performant than `ArrayList` in this case?",
        "createdAt" : "2020-07-02T10:32:47Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "af494d71-1d18-482a-80c8-7aead85c7b61",
        "parentId" : "fbd85ce7-8a29-44d2-849f-0905d2652597",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "`ImmArray` builders are probably not as efficient as `ArrayList`. However in the current case the `ArrayList` is built and then directly converted in `ImmArray`",
        "createdAt" : "2020-07-02T10:54:56Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +254,258 @@        The last seen location will come last. */\n    def stackTrace(): ImmArray[Location] = {\n      val s = ImmArray.newBuilder[Location]\n      kontStack.forEach { k =>\n        k match {"
  },
  {
    "id" : "b1a4fc13-1f15-47e2-9f2d-1f5a989a9372",
    "prId" : 6579,
    "comments" : [
      {
        "id" : "3b93f753-4f05-4369-9286-926756902d94",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```scala\r\ns ++= kontStack.asScala.iterator.collect { case KLocation(location) => location }\r\n```\r\n\r\nIf you like. (It's views all the way down.)",
        "createdAt" : "2020-07-06T19:33:27Z",
        "updatedAt" : "2020-07-06T19:33:27Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4741c97e-c571-4eef-949c-9042884ab6ec",
        "parentId" : "3b93f753-4f05-4369-9286-926756902d94",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Better yet\r\n\r\n```scala\r\nkontStack.asScala.iterator.collect { case KLocation(location) => location }.to(ImmArray)\r\n```",
        "createdAt" : "2020-07-06T19:34:25Z",
        "updatedAt" : "2020-07-06T19:34:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +260,264 @@          case _ => ()\n        }\n      }\n      s.result()\n    }"
  },
  {
    "id" : "f6968661-2225-4f42-8943-8e04895b572b",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "14531168-84e4-45d5-8a87-7bc230188036",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "De we really need one more builder for the Machine ? \r\nThere is already quite a lot of parameters to those builders (and there will be some more to control output transaction versionning), and those parameters are quite sensitive to set up and have a subtle semantics. \r\nI am a bit worry that if there is too much builders people (where most of them are with default parameters) people will just overlook those parameters. \r\n\r\nMaybe we do not need the from `PureSExpr`  anymore. ",
        "createdAt" : "2020-06-26T09:48:35Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a55718c0-27db-410e-99f4-f01fa3b4c996",
        "parentId" : "14531168-84e4-45d5-8a87-7bc230188036",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "both are used, but I will have a look if one can be eliminated",
        "createdAt" : "2020-06-29T11:45:58Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5848942a-78ec-4f0d-8390-dadddfe971aa",
        "parentId" : "14531168-84e4-45d5-8a87-7bc230188036",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I had a look. I don't think we should remove either of these entry point (at the moment).\r\nIt would be tricky to remove the new `fromPureAExpr` because sometimes the caller has `AExpr` in their hands.\r\nIt would be trivial to remove/inline `fromPureSExpr`, but that would mean more place in the code which have to call `flattenToAnf`, and I think that would be worse.",
        "createdAt" : "2020-06-30T09:32:06Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c6c3be3f-8cde-4395-b32f-4898e1072a6d",
        "parentId" : "14531168-84e4-45d5-8a87-7bc230188036",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm fine with having another entry point for this.",
        "createdAt" : "2020-06-30T10:25:51Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +609,613 @@    )\n\n    def fromPureAExpr(\n        compiledPackages: CompiledPackages,\n        anf: AExpr,"
  },
  {
    "id" : "5d886220-cdc4-4b61-a7c7-0c93d431b19b",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "81624640-ecdd-4e45-a736-0f81be0bf103",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not comfortable merging this even more complicated pattern until we have a way to turn of location handling in sandbox.",
        "createdAt" : "2020-06-26T11:30:22Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "97c58996-952f-46ec-9232-2f0d4730f7b1",
        "parentId" : "81624640-ecdd-4e45-a736-0f81be0bf103",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Has this condition been satisfied now?\r\nOr is this still blocking this PR?",
        "createdAt" : "2020-06-30T15:02:45Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +216,220 @@        // lambda binding the token.\n        // TODO: re-work the location handling, to avoid the following fragile special-case\n        case Some(KPushTo(_, SEAppAtomicGeneral(SELocS(1), Array(SEValue.Token)), _, _, _)) => {\n          // Can't call pushKont here, because we don't push at the top of the stack.\n          kontStack.add(last_index, KLocation(loc))"
  },
  {
    "id" : "2679b005-5590-4b01-adc1-c8b4c6d7fc4a",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "9647ba35-8276-469e-b7b4-fab5e5a45a31",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "An expression in ANF is still an expression...\r\n```suggestion\r\n        expr: AExpr,\r\n```",
        "createdAt" : "2020-06-26T11:31:29Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fe0d6546-d07e-4a13-bd4b-8d1b01b0dc9e",
        "parentId" : "9647ba35-8276-469e-b7b4-fab5e5a45a31",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "it is. but naming is `anf` is better. and it's not just this one place. so I suggest we leave it",
        "createdAt" : "2020-06-30T15:03:33Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +527,531 @@        submissionTime: Time.Timestamp,\n        initialSeeding: InitialSeeding,\n        anf: AExpr,\n        globalCids: Set[V.ContractId],\n        committers: Set[Party],"
  },
  {
    "id" : "fee2ede7-79a8-4d7e-8d4e-532d261ca97b",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "b8de88f3-f044-48f4-aaf1-74bb2da97948",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "There's no _static_ way to detect over-applications, is there? If there isn't, then `KArg` is here to stay and we should reduce the duplication between `executeApplication` and `enterApplication`.",
        "createdAt" : "2020-06-26T11:40:11Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1585da39-a778-45c3-8ebd-3edded03e689",
        "parentId" : "b8de88f3-f044-48f4-aaf1-74bb2da97948",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "`KArg` does not have to stay. The replacement will have only the over-applied values. And so the old code will get removed.",
        "createdAt" : "2020-06-30T15:04:48Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +800,804 @@  }\n\n  //TODO: Remove KArg once it's use to execute over-applications is removed\n  final case class KArg(newArgs: Array[SExpr], frame: Frame, actuals: Actuals, envSize: Int)\n      extends Kont"
  },
  {
    "id" : "d7aa9e37-f5c1-40c5-a028-f1609bf15cf3",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "b026bbd3-8e5f-4f79-b7a4-9d2ecbddddf0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Would it make sense to call this `fromPureExpr`?",
        "createdAt" : "2020-06-17T13:23:29Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +582,586 @@\n    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n    def fromExpr(\n        compiledPackages: CompiledPackages,\n        expr: SExpr,"
  },
  {
    "id" : "5211b9e5-3a19-4856-b62e-70324505ed1d",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "288f9625-e674-4297-a1fb-2669fa80e179",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      fromExpr(compiledPackages, compiledPackages.compiler.unsafeCompile(expr))\r\n```",
        "createdAt" : "2020-06-17T13:24:57Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +609,613 @@        globalCids = Set.empty,\n        committers = Set.empty,\n      )\n\n  }"
  },
  {
    "id" : "41270544-91e4-446e-922e-10f5ab6170f2",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "a8d544c4-32b0-4d08-bb2c-78b9a2d00afc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not a big fan of overloading functions of the same name with different types. ðŸ˜¦",
        "createdAt" : "2020-06-17T13:26:32Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +598,602 @@    @throws[CompilationError]\n    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n    def fromExpr(\n        compiledPackages: CompiledPackages,\n        expr: Expr,"
  },
  {
    "id" : "7c44913a-f61f-45c1-9fce-a86c598f1fb8",
    "prId" : 6234,
    "comments" : [
      {
        "id" : "6de10bdc-7e8e-4b01-aabf-52a99de0ca6b",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Nice. Embedding the PClosure in the KFun, instead of it's components.",
        "createdAt" : "2020-06-05T08:17:28Z",
        "updatedAt" : "2020-06-05T08:18:22Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c91b91a129dc85a9cc65c570b410845e71daee21",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +727,731 @@\n  /** The function-closure and arguments have been evaluated. Now execute the body. */\n  final case class KFun(closure: PClosure, actuals: util.ArrayList[SValue])\n      extends Kont\n      with SomeArrayEquals {"
  },
  {
    "id" : "37621db6-38ac-439d-bb00-2bd21a33bcf3",
    "prId" : 6104,
    "comments" : [
      {
        "id" : "36800f69-65a6-4319-875d-493bb4ab545f",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  private def executeApplication(machine: Machine, vfun: SValue, newArgs: Array[SExpr]): Unit = {\r\n```",
        "createdAt" : "2020-05-29T13:54:51Z",
        "updatedAt" : "2020-06-01T10:08:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac8b636c-e832-402e-bc46-31a8a49e34c5",
        "parentId" : "36800f69-65a6-4319-875d-493bb4ab545f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This can't be `private` because it is also used in `SExpr.scala`",
        "createdAt" : "2020-06-01T10:12:36Z",
        "updatedAt" : "2020-06-01T10:12:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +653,657 @@\n  /** The function has been evaluated to a value, now start evaluating the arguments. */\n  def executeApplication(machine: Machine, vfun: SValue, newArgs: Array[SExpr]): Unit = {\n    vfun match {\n      case SPAP(prim, actualsSoFar, arity) =>"
  },
  {
    "id" : "785f3131-82de-4d0d-8b43-bd31bbe372a2",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "4f13d506-6502-4e79-8cf1-632db11aeed7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      /* Environment: local values pushed to a stack: let-bindings and pattern-matches. */\r\n```",
        "createdAt" : "2020-05-19T17:39:52Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +91,95 @@      /* Frame: to access values for function arguments and closure free-vars. */\n      var frame: Frame,\n      /* Environment: values pushed to a stack: let-bindings and pattern-matches. */\n      var env: Env,\n      /* Kont, or continuation specifies what should be done next"
  },
  {
    "id" : "59bb3d2b-6100-469e-ab00-4256a732d6eb",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "310d1c03-1639-465e-8cf8-fcdb6823dce2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      /* Frame: to access values for function arguments and variables captured by closures. */\r\n```",
        "createdAt" : "2020-05-19T17:40:33Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +89,93 @@       */\n      var returnValue: SValue,\n      /* Frame: to access values for function arguments and closure free-vars. */\n      var frame: Frame,\n      /* Environment: values pushed to a stack: let-bindings and pattern-matches. */"
  },
  {
    "id" : "cecdf2dc-4e3e-428e-bb88-f3cfa495c9c9",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "f57be634-791f-4fa3-be0d-69bec6cc04eb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    // Variables which reside in the captured variables array of the current frame. Indexed by absolute offset.\r\n```",
        "createdAt" : "2020-05-19T17:41:19Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +156,160 @@    @inline def getEnvArg(i: Int): SValue = frame.args.get(i)\n\n    // Variables which reside in the free-vars array of the current frame. Indexed by absolute offset.\n    @inline def getEnvFree(i: Int): SValue = {\n      //TODO(NC) : modify types to avoid this asInstanceOf"
  },
  {
    "id" : "91af983f-c0a0-4390-8d19-e56ec6563734",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "83e38468-33c9-4c4e-816b-736a3fed4a8c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        if (env.size < envSize) {\r\n          crash(s\"restoreEnv, cannot shrink environment from ${env.size} to ${envSize}\")\r\n```",
        "createdAt" : "2020-05-19T17:51:34Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +177,181 @@        val count = env.size - envSize\n        if (count < 1) {\n          crash(s\"restoreEnv, unexpected negative count: $count!\")\n        }\n        env.subList(envSize, env.size).clear"
  },
  {
    "id" : "cc8d625f-b3ad-4373-a976-c3eb6e9e0ca2",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "6e24b433-e0da-46a0-b8ca-1284cd784b66",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Which one is the common case: `envSize` or `envSize < env.size`? We should make the common case the cheaper one with less branching. Let's keep that for a separate PR though.",
        "createdAt" : "2020-05-19T17:52:32Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +174,178 @@      frame = frameToBeRestored\n      // Pop the env-stack back to the size it was when the continuation was created.\n      if (envSize != env.size) {\n        val count = env.size - envSize\n        if (count < 1) {"
  },
  {
    "id" : "a6a1de34-2755-40b0-83cc-916e5218be90",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "51c315fa-e1c1-4803-b061-bd1bf99307fd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm very sad that we need to allocate a sublist to truncate a vector. I wish Java had something like https://doc.rust-lang.org/std/vec/struct.Vec.html#method.truncate.\r\nðŸ˜¿",
        "createdAt" : "2020-05-19T17:53:54Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "320307a0-a630-403f-9305-93a198815789",
        "parentId" : "51c315fa-e1c1-4803-b061-bd1bf99307fd",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@martin-drhu-da \r\nFrancesco's `ImmArray` behaves like haskell vector. \r\nI am just afraid the constant overhead is too high. ",
        "createdAt" : "2020-05-19T22:01:30Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +179,183 @@          crash(s\"restoreEnv, unexpected negative count: $count!\")\n        }\n        env.subList(envSize, env.size).clear\n      }\n    }"
  },
  {
    "id" : "d0d6965e-0f93-461b-8248-677a3fbde1ec",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "07c6ac76-3e33-45cb-a17f-9c3f70ac4eb3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  // the captured variables which were stored into the closure.\r\n```",
        "createdAt" : "2020-05-19T17:57:13Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +625,629 @@  // For our frame, we use the KFun continuation directly.  From here\n  // we can access both the application arguments, and the values of\n  // the free-variables which were stored into the closure.\n  type Frame = KFun\n"
  },
  {
    "id" : "836c7930-ddbb-46ce-a587-9c36f0eb89c6",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "6d570923-20ea-4c22-8ac0-43dbc4ffb2a3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not sure `envSize` is the best name we can find for the last argument. A comment explaining what it is would also help. Do `Frame` and `envSize` always show up as a couple? If so, should we move `envSize` into `Frame`?",
        "createdAt" : "2020-05-19T18:43:42Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "03e4afe5-e52f-45c0-bf21-508344250f7a",
        "parentId" : "6d570923-20ea-4c22-8ac0-43dbc4ffb2a3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I expect the code in this function to be very hot. Once we've landed this PR, I'd like to see this (dis)proved using a profiler and if it turns out to be hot indeed, we should try to squeeze more performance out of it.",
        "createdAt" : "2020-05-19T18:57:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d9422d03-abae-402c-a931-77aeb29f5157",
        "parentId" : "6d570923-20ea-4c22-8ac0-43dbc4ffb2a3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I don't think we can put `envSize` in the `Frame`... but I need to think more about this.\r\nI suggest we leave this as it is for now.",
        "createdAt" : "2020-05-20T07:18:44Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "958b632c-660a-4ae9-ac0a-06b2e61c7c6a",
        "parentId" : "6d570923-20ea-4c22-8ac0-43dbc4ffb2a3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes I'm sure profiling wold be very instructive.",
        "createdAt" : "2020-05-20T07:19:12Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +170,174 @@    }\n\n    @inline def restoreEnv(frameToBeRestored: Frame, envSize: Int): Unit = {\n      // Restore the frame pointer captured when the continuation was created.\n      frame = frameToBeRestored"
  },
  {
    "id" : "994b9136-a2fe-4037-865e-fa94e9e5e5b4",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "96c90023-38f6-4981-9e2f-05eb3d3700a1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I assume we don't need to look at the captured variables anymore because they are also part of `KFun`? If so, that would deserve a comment.",
        "createdAt" : "2020-05-19T18:52:34Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7d9dd87a-5aa7-4ec9-907a-f83680766ed6",
        "parentId" : "96c90023-38f6-4981-9e2f-05eb3d3700a1",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "correct.",
        "createdAt" : "2020-05-20T07:15:32Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5b76f636-c8bc-46aa-84f7-c42f92efc6f6",
        "parentId" : "96c90023-38f6-4981-9e2f-05eb3d3700a1",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I added the comment about how Speedy uses a caller-save strategy for the environment.\r\n\r\nI'm reluctant to write a specific comment to say we no longer do what we used to do when we were following a different strategy.\r\n\r\nBut if there is a specific comment you feel would be helpful, please do add it.\r\n",
        "createdAt" : "2020-05-20T07:24:01Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "185fce14-14b5-49b3-8247-228a40650c67",
        "parentId" : "96c90023-38f6-4981-9e2f-05eb3d3700a1",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Regardless of what strategy we used in the past, ignoring the array of captured variables when entering a closure seems worth an explanation. This also seems to be related to the `prim` comment above. Somehow, we ended up with unnormalized data here, where the same thing ends up in multiple places. We should clean this up or explain it _here_, even if it is only a pointer to the big comment.",
        "createdAt" : "2020-05-20T08:34:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f6dc78fe-9123-4f78-934f-0205c42d3a5c",
        "parentId" : "96c90023-38f6-4981-9e2f-05eb3d3700a1",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I added a comment",
        "createdAt" : "2020-05-20T09:03:12Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +354,358 @@    def enterFullyAppliedFunction(prim: Prim, args: util.ArrayList[SValue]): Unit = {\n      prim match {\n        case PClosure(label, expr, _) =>\n          if (label != null) {\n            profile.addOpenEvent(label)"
  },
  {
    "id" : "3152343e-f06a-4716-bfda-b3cac17ef673",
    "prId" : 5881,
    "comments" : [
      {
        "id" : "1062d407-8464-4776-8848-1d505befe009",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Shouldn't we also reset `kontStack` here? This would be particularly important when you reuse a machine that had failed with an exception.",
        "createdAt" : "2020-05-07T07:34:39Z",
        "updatedAt" : "2020-05-07T07:58:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0ddd4000-40fa-447f-95e4-f3e02d49b03b",
        "parentId" : "1062d407-8464-4776-8848-1d505befe009",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes.\r\nAnd in fact I do in my next PR.",
        "createdAt" : "2020-05-07T08:08:46Z",
        "updatedAt" : "2020-05-07T08:08:46Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "275a2eec-1670-4a0d-b8cb-a8cd4d8600b7",
        "parentId" : "1062d407-8464-4776-8848-1d505befe009",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If that's an actual problem then let's please fix it in this PR. I'm not keen to have potentially broken things in master if we can avoid it. You never know who runs a `daml-sdk-head` when.",
        "createdAt" : "2020-05-07T08:23:07Z",
        "updatedAt" : "2020-05-07T08:23:07Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +136,140 @@    def setExpressionToEvaluate(expr: SExpr): Unit = {\n      ctrl = expr\n      returnValue = null\n    }\n"
  },
  {
    "id" : "08b066c6-f533-4657-a7ff-47b9a5acc5b8",
    "prId" : 5845,
    "comments" : [
      {
        "id" : "449987af-b46b-418d-ae7a-e0a92d95b1ff",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Is this supposed to stay in?",
        "createdAt" : "2020-05-05T14:58:53Z",
        "updatedAt" : "2020-05-05T14:58:53Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3b40dfcd-aedb-4668-8137-69de66c2d28b",
        "parentId" : "449987af-b46b-418d-ae7a-e0a92d95b1ff",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What's wrong with it? Is was there before already. And it's in a function used only in debugging tools anyway.",
        "createdAt" : "2020-05-05T15:01:19Z",
        "updatedAt" : "2020-05-05T15:01:19Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f297c8ceec75fb8ba36f061b243438360629b02",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +286,290 @@      } else {\n        println(s\"  ${ctrl_expr}\")\n      }\n      println(\"Environment:\")\n      env.forEach { v =>"
  },
  {
    "id" : "47eeb074-950b-4e28-825a-29eeaad4c9e6",
    "prId" : 5835,
    "comments" : [
      {
        "id" : "fe6814a2-2544-418a-8137-2a94559b4391",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      // where we must continue iteration.\r\n```",
        "createdAt" : "2020-05-05T11:00:13Z",
        "updatedAt" : "2020-05-05T11:01:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6c4c96ad-37f7-48ba-9844-57d7aeedc9de",
        "parentId" : "fe6814a2-2544-418a-8137-2a94559b4391",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "fixed in next PR",
        "createdAt" : "2020-05-05T11:42:53Z",
        "updatedAt" : "2020-05-05T11:42:54Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "397d9abb22845a5f5806e95f35ac07e0f01ce54c",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +136,140 @@      // However, we still need the outer loop because of the case:\n      //    case _:SErrorDamlException if tryHandleException =>\n      // where we must continue interation.\n      var result: SResult = null\n      while (result == null) {"
  },
  {
    "id" : "ec12e869-83e5-4ad4-9c04-4172f06b4b77",
    "prId" : 5819,
    "comments" : [
      {
        "id" : "bb828977-5151-482d-8195-f2b7c17d6b15",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We could wrapped this variable and the following ones in a new object (call something like statics) to limit the extension this endless list of parameter. \r\nYou will pay the small cost of indirection only when instrumentation is running. ",
        "createdAt" : "2020-05-05T12:12:03Z",
        "updatedAt" : "2020-05-11T08:59:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +98,102 @@      var globalDiscriminators: Set[crypto.Hash],\n      /* Used when enableLightweightStepTracing is true */\n      var steps: Int,\n      /* Used when enableInstrumentation is true */\n      var track: Instrumentation,"
  },
  {
    "id" : "f2f0c27e-257d-4c8b-b271-eef5c5a0e0ab",
    "prId" : 5819,
    "comments" : [
      {
        "id" : "2609d677-ddf3-490d-8e1e-5d3697fb64a8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Are we sure we don't have to pay for this even when `enableInstrumentation` is false? Would it make sense to subclass `Speedy` and override these methods? Or do we have to pay for additional dynamic dispatch then?",
        "createdAt" : "2020-05-12T20:21:42Z",
        "updatedAt" : "2020-05-12T20:23:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +127,131 @@    @inline def pushEnv(v: SValue): Unit = {\n      env.add(v)\n      if (enableInstrumentation) {\n        track.countPushesEnv += 1\n        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth"
  },
  {
    "id" : "55fe8800-b985-4161-9e83-1a741ddac418",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "539f7dd3-68d4-4bc7-895b-594d2c929006",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why not return the old `SResultContinue` here? I don't think there's anything wrong with it.",
        "createdAt" : "2020-05-04T06:58:23Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fce1329f-2cad-47e2-bc4b-293d0f1c6dbb",
        "parentId" : "539f7dd3-68d4-4bc7-895b-594d2c929006",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Because `SResultContinue` had different semantics.\r\nReusing an old name with changed semantics can be confusing.\r\nAlso I wanted there to be a payload. See above :)",
        "createdAt" : "2020-05-04T09:47:31Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +127,131 @@            ctrl.execute(this) // make a single step\n          }\n          ctrl match {\n            case CtrlValue(value) => {\n              result = SResultFinalValue(value) //stop"
  },
  {
    "id" : "95c21ba2-2fcb-4711-8925-f8f8074a7d2e",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "3a8f6609-9037-41b0-8369-556a6c4cd16d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    /** Run a machine until we get a result: either a final-value or a request for data, with a callback */\r\n```",
        "createdAt" : "2020-05-04T15:33:20Z",
        "updatedAt" : "2020-05-04T15:36:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "13e87f11-e2ef-4187-97b3-1df53c1aa428",
        "parentId" : "3a8f6609-9037-41b0-8369-556a6c4cd16d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done in next PR",
        "createdAt" : "2020-05-05T06:22:51Z",
        "updatedAt" : "2020-05-05T06:22:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +118,122 @@    }\n\n    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */\n    def run(): SResult = {\n      var result: SResult = null"
  },
  {
    "id" : "a210603e-0d13-4cfd-9b0f-d3405bcbd7b7",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "2731756b-fa5e-4d43-bb49-02d05e1772d0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think it would be useful to explain why there are two loops.",
        "createdAt" : "2020-05-04T15:34:06Z",
        "updatedAt" : "2020-05-04T15:36:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b502e117-6be1-4ad0-9811-1eabbac1198f",
        "parentId" : "2731756b-fa5e-4d43-bb49-02d05e1772d0",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done in next PR",
        "createdAt" : "2020-05-05T06:22:58Z",
        "updatedAt" : "2020-05-05T06:22:58Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +122,126 @@      var result: SResult = null\n      while (result == null) {\n        // note: exception handler is outside while loop\n        try {\n          while (!isFinal) {"
  },
  {
    "id" : "9d7aa19f-cfd0-49b6-aace-91108755a46c",
    "prId" : 5716,
    "comments" : [
      {
        "id" : "bef54813-0a0d-469d-bbde-f5a26119b0a1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Just for my understanding: setting `machine.ctrl = this` eventually causes the value being translated again from scratch after the package was loaded successfully, right?",
        "createdAt" : "2020-04-24T11:19:59Z",
        "updatedAt" : "2020-04-27T13:18:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d79bdd6f-afc3-44b9-8c31-f9bf7285abd6",
        "parentId" : "bef54813-0a0d-469d-bbde-f5a26119b0a1",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Yes.",
        "createdAt" : "2020-04-24T11:22:24Z",
        "updatedAt" : "2020-04-27T13:18:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d675b124dbd7b7158af826ada71c76bb4d7c17a9",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +492,496 @@                    pkg => {\n                      machine.compiledPackages = pkg\n                      machine.ctrl = this\n                    }\n                  ))"
  },
  {
    "id" : "8111dd91-2f4f-4859-b84f-e4c94c0b8c28",
    "prId" : 5519,
    "comments" : [
      {
        "id" : "fe244beb-ef53-4978-90f5-df4df6dea1fd",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Here we may not have any more `contextSeed`, so we take another seed.\r\nDoes not really matter as this is called only when interpretation scenario as long the resulting `newSeed` is fresh.",
        "createdAt" : "2020-04-09T13:09:01Z",
        "updatedAt" : "2020-04-09T13:09:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1d86c75aae72ab91dcf349a5b071c463f246f6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +242,246 @@      val seedWithTime = for {\n        time <- ptx.submissionTime\n        currentSeed <- ptx.context.nextChildrenSeed\n        newSeed = crypto.Hash.deriveTransactionSeed(\n          currentSeed,"
  },
  {
    "id" : "27b7e42e-60e9-4016-a6db-cb3ee4b766b0",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "4ef43f2a-f278-431c-a227-4112d2510f39",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Yourkit showed a lot of RichInt conversions, so I converted this iterator to `while {}` style",
        "createdAt" : "2020-01-06T03:15:03Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cdd0838b-d62c-4ea6-99b7-56a051158c95",
        "parentId" : "4ef43f2a-f278-431c-a227-4112d2510f39",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Same story here. I would like to have real benchmarks before changing critical piece of code like that. \r\ncc @dajmaki ",
        "createdAt" : "2020-01-06T08:41:10Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d5f161b0-5124-4f8c-91d9-826b537e4a05",
        "parentId" : "4ef43f2a-f278-431c-a227-4112d2510f39",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "If @dajmaki  does not mind, I am fine with this change,",
        "createdAt" : "2020-01-06T13:32:24Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4c982e5a-e5d9-4491-ae59-608116b21762",
        "parentId" : "4ef43f2a-f278-431c-a227-4112d2510f39",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "It would not hurt to run `com.digitalasset.daml.lf.engine.LargeTransactionTest` before and after the change. There is also `com.digitalasset.platform.sandbox.perf.LargeTransactionBench` which is supposed to be part of perf test harness.",
        "createdAt" : "2020-01-06T17:31:44Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "aa04ac82-6489-4d59-a6e3-d68c60db7e8e",
        "parentId" : "4ef43f2a-f278-431c-a227-4112d2510f39",
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Again this was found after running our load tests and profiling the code with YourKit.\r\nUsing ScalaMeter to show some numbers:\r\n1. Quick but ugly code:\r\n```      val length = arr\r\n      var i = 0\r\n      while (i < length) {\r\n        i += 1\r\n      }\r\n```\r\nresults : Parameters(size -> 15000000): 5.36E-4 ms\r\n\r\n2. Slow but pretty code:\r\n```      for (_ <- 0 until upper) {}```\r\nresults: Parameters(size -> 15000000): 3.671207 ms\r\n\r\nAgain, that would not be an issue if this part of code was not so frequently called.",
        "createdAt" : "2020-01-07T23:40:53Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "59d66b62-97cb-488a-aaf5-f3834367acec",
        "parentId" : "4ef43f2a-f278-431c-a227-4112d2510f39",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "FYI `scala.collection` uses similar optimizations. :+1: for `var` and `while-loop`.",
        "createdAt" : "2020-01-08T00:01:46Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +417,421 @@          val newArgsLimit = Math.min(missing, newArgs.length)\n          var i = 1\n          while (i < newArgsLimit) {\n            val arg = newArgs(newArgsLimit - i)\n            machine.kont.add(KPushTo(args2, arg))"
  },
  {
    "id" : "d42c7bd7-12ff-4b9a-88b2-65eb172fead5",
    "prId" : 2725,
    "comments" : [
      {
        "id" : "7709379d-4817-4007-b415-4c1d9a95c87a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does that flag make sense in this context?",
        "createdAt" : "2019-09-02T15:37:24Z",
        "updatedAt" : "2019-09-02T15:44:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38e2128b-5cb7-43de-b52d-fab209b216ce",
        "parentId" : "7709379d-4817-4007-b415-4c1d9a95c87a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> The REPL for DAML-LF has to solve a very similar problem for evaluating `f x y ...`, which is possible, IIRC. Do we have duplicate code now?\r\n\r\nGood point, Iâ€™ve refactored the other initialization methods to use `fromSExpr`.",
        "createdAt" : "2019-09-02T15:44:48Z",
        "updatedAt" : "2019-09-02T15:44:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7078d40c-ce01-468e-bc41-31674bc656f6",
        "parentId" : "7709379d-4817-4007-b415-4c1d9a95c87a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> Does that flag make sense in this context?\r\n\r\nIt does, there is nothing stopping you from having an update expression here. You are just not forced to use one.",
        "createdAt" : "2019-09-02T15:45:11Z",
        "updatedAt" : "2019-09-02T15:45:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c281f403-a00a-49ff-8566-52dae461df7f",
        "parentId" : "7709379d-4817-4007-b415-4c1d9a95c87a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Makes sense.",
        "createdAt" : "2019-09-02T15:56:45Z",
        "updatedAt" : "2019-09-02T15:56:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "07a21a68b562633676370a033086f79311d6d853",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +284,288 @@    def fromSExpr(\n        sexpr: SExpr,\n        checkSubmitterInMaintainers: Boolean,\n        compiledPackages: CompiledPackages): Machine =\n      initial(checkSubmitterInMaintainers, compiledPackages).copy(ctrl = CtrlExpr(sexpr))"
  },
  {
    "id" : "2fd39be5-4ff4-4e9c-bd3b-be00c45346bd",
    "prId" : 2560,
    "comments" : [
      {
        "id" : "3b55bd53-b1c6-4c7e-9d92-ae993a5419a3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Some comments on the first two cases would be nice.",
        "createdAt" : "2019-08-15T14:34:44Z",
        "updatedAt" : "2019-08-15T15:43:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1227e529-3225-4a4e-91fb-f1a4f9786aec",
        "parentId" : "3b55bd53-b1c6-4c7e-9d92-ae993a5419a3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Done. I'm in the middle of simplifying this a bit. The explanation will (hopefully) get a bit simpler as a result of this.",
        "createdAt" : "2019-08-15T14:59:49Z",
        "updatedAt" : "2019-08-15T15:43:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "61a4b11ba7dda41f0970ff778251c4f0ccde8b68",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +76,80 @@        // we push location information under it to account for the implicit\n        // lambda binding the token.\n        case Some(KArg(Array(SEValue(SToken)))) => kont.add(last_index, KLocation(loc))\n        // NOTE(MH): When we use a cached top level value, we need to put the\n        // stack trace it produced back on the continuation stack to get"
  },
  {
    "id" : "5d9224b9-dae1-4adc-871e-8f235508c1d6",
    "prId" : 2497,
    "comments" : [
      {
        "id" : "2cd6feb3-8dce-479b-b866-4911bbf4927b",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    def stackTrace(): ImmArray[Location] = ImmArray(s.asScala).flatMap{\r\n      case KLocation(location) => ImmArray(location)\r\n      case _ => ImmArray.empty\r\n    }\r\n```",
        "createdAt" : "2019-08-13T09:11:34Z",
        "updatedAt" : "2019-08-13T09:14:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "59b773fab66f6239cba9430dc5f973ac673d51dc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +67,71 @@\n    /* Compute a stack trace from the locations in the continuation stack. */\n    def stackTrace(): ImmArray[Location] = {\n      val s = new ArrayList[Location]\n      kont.forEach { k =>"
  },
  {
    "id" : "7432a1e0-46da-4564-afec-00072342a288",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "d124de9c-58b7-4e25-96f3-4ed078a7031b",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "I think the default `Set.empty` is very dangerous -- I'd remove it unless we have very good reasons not to.",
        "createdAt" : "2019-06-07T15:33:03Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "88d86f2f-8de9-4e22-8459-6e9d73edc9e1",
        "parentId" : "d124de9c-58b7-4e25-96f3-4ed078a7031b",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Why do you think it's dangerous? The committers is the set of parties that authorize the transaction. Nobody authorizing it is the least dangerous option.\r\n\r\nIf you do still want me  to change it: the default is used in a few places, such as `ScenarioRunnerHelper`, and `fromExpr`. Can you please point me to someone who understands how these things are used?",
        "createdAt" : "2019-06-11T16:57:42Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +174,178 @@\n  object Machine {\n    private def initial(compiledPackages: CompiledPackages, committers: Set[Party] = Set.empty) =\n      Machine(\n        ctrl = null,"
  },
  {
    "id" : "10c37732-aa8d-49a1-8442-d5e304778d9b",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "981408ba-7ff6-4047-8253-a731cc4917fb",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "I think the default Set.empty is very dangerous -- I'd remove it unless we have very good reasons not to.",
        "createdAt" : "2019-06-07T15:33:23Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ecc61af-d714-4d1a-89f3-e2af3687d6a6",
        "parentId" : "981408ba-7ff6-4047-8253-a731cc4917fb",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "The default is currently only used in `Engine.validatePartial`, which does not seemed to be used in the remainder of the `daml` repository. Can we get rid of `validatePartial`? Are the daml-on-x guys depending on it?",
        "createdAt" : "2019-06-11T16:59:01Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +194,198 @@    }\n\n    def build(\n        sexpr: SExpr,\n        compiledPackages: CompiledPackages,"
  },
  {
    "id" : "ce047e86-b025-4782-b52f-3b0af835d19d",
    "prId" : 1397,
    "comments" : [
      {
        "id" : "e91d6bab-1b42-4b20-b99a-1bfeb7962d62",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "nice",
        "createdAt" : "2019-05-27T11:35:43Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5ce95b727edd6150f719d1c4c22df4bde71e6ef6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +431,435 @@            }\n          }\n        case _: SContractId | _: SDate | _: SDecimal | _: SInt64 | _: SParty | _: SText |\n            _: STimestamp | _: STuple | _: SMap | _: SRecord | _: SPAP | SToken =>\n          crash(\"Match on non-matchable value\")"
  }
]