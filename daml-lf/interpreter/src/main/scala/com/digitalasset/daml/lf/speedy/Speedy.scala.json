[
  {
    "id" : "dc77b654-a1b6-491d-8764-ec08420cf75b",
    "prId" : 7501,
    "comments" : [
      {
        "id" : "9ade5bc5-5b38-4ba7-a17a-c285c649657b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Very open to better naming suggestions.",
        "createdAt" : "2020-09-28T17:51:48Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2303a673-5920-4f86-a631-f3ccd33b9e21",
        "parentId" : "9ade5bc5-5b38-4ba7-a17a-c285c649657b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not like it neither, but I do not have better alternative. :disappointed: ",
        "createdAt" : "2020-09-29T07:45:10Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a3c9d941-6c34-430d-9d3e-6487f962c2da",
        "parentId" : "9ade5bc5-5b38-4ba7-a17a-c285c649657b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What do you think about something like `ExecutionEnvironment`? You can either execute DAML on a ledger or off a ledger.",
        "createdAt" : "2020-09-30T11:56:58Z",
        "updatedAt" : "2020-09-30T11:58:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c11c3849-0030-40e4-ab22-e8569cf1bcad",
        "parentId" : "9ade5bc5-5b38-4ba7-a17a-c285c649657b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "sounds reasonable but also sounds very generic to the point where it doesn’t give you much of an idea of what the possible execution environments could be.",
        "createdAt" : "2020-09-30T12:00:13Z",
        "updatedAt" : "2020-09-30T12:00:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 17,
    "diffHunk" : "@@ -97,8 +97,9 @@ private[lf] object Speedy {\n \n   private type Actuals = util.ArrayList[SValue]\n \n-  /** The speedy CEK machine. */\n-  final class Machine(\n+  private[lf] sealed trait LedgerMode"
  },
  {
    "id" : "548dff98-0708-4bdb-89f4-737458d677e5",
    "prId" : 7501,
    "comments" : [
      {
        "id" : "50dde4b2-f5f7-451e-be72-d3c7b2866dfd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not quite sure if this callback-style approach makes that much sense here. The alternative would be a `getOnLedger` or something like that.",
        "createdAt" : "2020-09-28T17:52:16Z",
        "updatedAt" : "2020-09-29T08:57:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b25c1c36b2946c9654397dda20c730c43a9168fc",
    "line" : 84,
    "diffHunk" : "@@ -156,14 +163,20 @@ private[lf] object Speedy {\n          Triggers. It is safe to use on ledger for off ledger code but\n          not the other way around.\n        */\n-      val onLedger: Boolean,\n+      val ledgerMode: LedgerMode,\n   ) {\n \n     /* kont manipulation... */\n \n     @inline\n     private[speedy] def kontDepth(): Int = kontStack.size()\n \n+    private[lf] def withOnLedger[T](op: String)(f: OnLedger => T): T ="
  },
  {
    "id" : "fc9f2f9e-7f4d-4b8a-9129-7c8dae2b3f7f",
    "prId" : 7225,
    "comments" : [
      {
        "id" : "cddf906a-bbfb-4f64-ba46-b9874efb1a38",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "much cleaner, thank you!",
        "createdAt" : "2020-08-25T12:57:07Z",
        "updatedAt" : "2020-08-25T12:57:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6a16b208121cdb8d6387a918c347fb59361a1f8e",
    "line" : 15,
    "diffHunk" : "@@ -576,19 +576,14 @@ private[lf] object Speedy {\n           case V.ValueDate(x) => SDate(x)\n           case V.ValueUnit => SUnit\n           case V.ValueRecord(Some(id), fs) =>\n-            val fields = Name.Array.ofDim(fs.length)\n-            val values = new util.ArrayList[SValue](fields.length)\n-            fs.foreach {\n-              case (optk, v) =>\n-                optk match {\n-                  case None =>\n-                    crash(\"SValue.fromValue: record missing field name\")\n-                  case Some(k) =>\n-                    fields(values.size) = k\n-                    val _ = values.add(go(v))\n-                }\n+            val values = new util.ArrayList[SValue](fs.length)"
  },
  {
    "id" : "1aaddab1-e6dc-450a-bcae-2f5b4327e3bf",
    "prId" : 6973,
    "comments" : [
      {
        "id" : "311bc08b-39a4-4e20-b468-bfd5f6f9daa8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@nickchapman-da Please correct me if I'm wrong: This line is the application of an `SPAP` to two values. Hence, there's no need to restore the environment for this because values don't contain references into the environment. Does that sound correct? If so, I'll remove the restoring of the environment in a fresh PR.",
        "createdAt" : "2020-08-04T09:14:13Z",
        "updatedAt" : "2020-08-04T09:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "01548670-c89c-4514-9b43-5333bf97acbb",
        "parentId" : "311bc08b-39a4-4e20-b468-bfd5f6f9daa8",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "What if the function allocates on the stack (because it contains a let binding)?",
        "createdAt" : "2020-08-04T09:50:58Z",
        "updatedAt" : "2020-08-04T09:50:58Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dc9d06276117ca217b75bd7972e46a9b05d2df87",
    "line" : 33,
    "diffHunk" : "@@ -899,6 +899,31 @@ private[lf] object Speedy {\n     }\n   }\n \n+  private[speedy] final case class KFoldl(\n+      func: SEValue,\n+      var list: FrontStack[SValue],\n+      frame: Frame,\n+      actuals: Actuals,\n+      envSize: Int,\n+  ) extends Kont\n+      with SomeArrayEquals {\n+    def execute(acc: SValue, machine: Machine) = {\n+      list.pop match {\n+        case None =>\n+          machine.returnValue = acc\n+        case Some((item, rest)) =>\n+          machine.restoreEnv(frame, actuals, envSize)\n+          // NOTE: We are \"recycling\" the current continuation with the\n+          // remainder of the list to avoid allocating a new continuation.\n+          list = rest\n+          machine.pushKont(this)\n+          // TODO(MH): This looks like it has some potential for further\n+          // performance gains once the AST nodes related to ANF have landed.\n+          machine.ctrl = SEAppAtomicFun(func, Array(SEValue(acc), SEValue(item)))"
  },
  {
    "id" : "4fc32b0b-040d-4504-92fb-b6bf0aab0137",
    "prId" : 6579,
    "comments" : [
      {
        "id" : "103623d2-dd31-4936-8d8b-da783ab3e48e",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "Can this be even more strict?\r\n```suggestion\r\n  private[this] val enableInstrumentation: Boolean = false\r\n```\r\n\r\nSame for other `private` uses below.",
        "createdAt" : "2020-07-02T10:30:25Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d148a8fc-11d5-4bee-af08-73185521c39c",
        "parentId" : "103623d2-dd31-4936-8d8b-da783ab3e48e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-07-02T10:55:06Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : null,
    "diffHunk" : "@@ -22,11 +22,14 @@ import org.slf4j.LoggerFactory\n import scala.collection.JavaConverters._\n import scala.util.control.NoStackTrace\n \n-object Speedy {\n+private[lf] object Speedy {\n+\n+  // fake participant to generate a new transactionSeed when running scenarios\n+  private val scenarioServiceParticipant = Ref.ParticipantId.assertFromString(\"scenario-service\")\n \n   // Would like these to have zero cost when not enabled. Better still, to be switchable at runtime.\n-  val enableInstrumentation: Boolean = false\n-  val enableLightweightStepTracing: Boolean = false\n+  private val enableInstrumentation: Boolean = false"
  },
  {
    "id" : "626e5e81-054a-49df-9b70-02bd26582da1",
    "prId" : 6579,
    "comments" : [
      {
        "id" : "9d918cf0-2f0e-40aa-a313-f9b0d449facf",
        "parentId" : null,
        "author" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "body" : "This change does not seem to be related to making things private. I assume `ImmArray` is expected to be more performant than `ArrayList` in this case?",
        "createdAt" : "2020-07-02T10:32:47Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "rautenrieth-da",
          "name" : "Robert Autenrieth",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/31539813?u=e5fe17e2c6f986e9ee04c5b9ca5f6a5a90d1c94a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2122d91d-f0ca-4b88-a889-4916a3d2b29b",
        "parentId" : "9d918cf0-2f0e-40aa-a313-f9b0d449facf",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "`ImmArray` builders are probably not as efficient as `ArrayList`. However in the current case the `ArrayList` is built and then directly converted in `ImmArray`",
        "createdAt" : "2020-07-02T10:54:56Z",
        "updatedAt" : "2020-07-02T11:39:40Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : 104,
    "diffHunk" : "@@ -241,14 +252,14 @@ object Speedy {\n     /** Compute a stack trace from the locations in the continuation stack.\n         The last seen location will come last. */\n     def stackTrace(): ImmArray[Location] = {\n-      val s = new util.ArrayList[Location]\n+      val s = ImmArray.newBuilder[Location]"
  },
  {
    "id" : "f811f0e3-ecb0-4c69-8d16-d47dd469285a",
    "prId" : 6579,
    "comments" : [
      {
        "id" : "d625c644-ecfa-4382-9320-4f9a8112e5c8",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```scala\r\ns ++= kontStack.asScala.iterator.collect { case KLocation(location) => location }\r\n```\r\n\r\nIf you like. (It's views all the way down.)",
        "createdAt" : "2020-07-06T19:33:27Z",
        "updatedAt" : "2020-07-06T19:33:27Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0f7ca946-9144-4eb1-b942-99673080666e",
        "parentId" : "d625c644-ecfa-4382-9320-4f9a8112e5c8",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Better yet\r\n\r\n```scala\r\nkontStack.asScala.iterator.collect { case KLocation(location) => location }.to(ImmArray)\r\n```",
        "createdAt" : "2020-07-06T19:34:25Z",
        "updatedAt" : "2020-07-06T19:34:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0e27b2d80e6e0e41fd10a8cf5aab60e5392bf92f",
    "line" : 111,
    "diffHunk" : "@@ -241,14 +253,14 @@ object Speedy {\n     /** Compute a stack trace from the locations in the continuation stack.\n         The last seen location will come last. */\n     def stackTrace(): ImmArray[Location] = {\n-      val s = new util.ArrayList[Location]\n+      val s = ImmArray.newBuilder[Location]\n       kontStack.forEach { k =>\n         k match {\n-          case KLocation(location) => { s.add(location); () }\n+          case KLocation(location) => s += location\n           case _ => ()\n         }\n       }"
  },
  {
    "id" : "83c5dd42-0e24-40d1-bc6a-0fa4c75edbad",
    "prId" : 6453,
    "comments" : [
      {
        "id" : "dc0afed8-aa61-4be5-a485-1e463792de71",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just to confirm my understanding: The default still includes the dev versions?",
        "createdAt" : "2020-06-22T15:20:00Z",
        "updatedAt" : "2020-06-22T15:50:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "10631b92-b414-4de6-8a7e-6228876428c6",
        "parentId" : "dc0afed8-aa61-4be5-a485-1e463792de71",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. I rename the constant to 'SupportedDevVersions'",
        "createdAt" : "2020-06-22T15:46:46Z",
        "updatedAt" : "2020-06-22T15:50:33Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f6cfae80a15bb5b74646d86e1f230df48fb04ee6",
    "line" : null,
    "diffHunk" : "@@ -562,6 +562,10 @@ object Speedy {\n         compiledPackages: CompiledPackages,\n         transactionSeed: crypto.Hash,\n         scenario: SExpr,\n+        supportedValueVersions: VersionRange[value.ValueVersion] =\n+          value.ValueVersions.DefaultSupportedVersions,"
  },
  {
    "id" : "14be0938-12ca-46a8-9b3d-4c0627fada73",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "866a80f0-be25-40f1-979e-15705672e611",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    def fromScenarioAExpr(\r\n```",
        "createdAt" : "2020-06-26T09:43:27Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5a015b6a-a9c6-4e59-a75a-5cf48fbd5a81",
        "parentId" : "866a80f0-be25-40f1-979e-15705672e611",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "changed",
        "createdAt" : "2020-06-29T11:45:29Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -561,7 +564,7 @@ object Speedy {\n     def fromScenarioSExpr("
  },
  {
    "id" : "78011a34-4693-479f-8da5-a149930bed02",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "9daa14b4-a382-4905-957d-c117592681db",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "De we really need one more builder for the Machine ? \r\nThere is already quite a lot of parameters to those builders (and there will be some more to control output transaction versionning), and those parameters are quite sensitive to set up and have a subtle semantics. \r\nI am a bit worry that if there is too much builders people (where most of them are with default parameters) people will just overlook those parameters. \r\n\r\nMaybe we do not need the from `PureSExpr`  anymore. ",
        "createdAt" : "2020-06-26T09:48:35Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e8f12919-e96d-4145-ab22-c45fd381ec4a",
        "parentId" : "9daa14b4-a382-4905-957d-c117592681db",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "both are used, but I will have a look if one can be eliminated",
        "createdAt" : "2020-06-29T11:45:58Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7ae5c4d4-7c02-4949-82bb-3d710ddaf5fa",
        "parentId" : "9daa14b4-a382-4905-957d-c117592681db",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I had a look. I don't think we should remove either of these entry point (at the moment).\r\nIt would be tricky to remove the new `fromPureAExpr` because sometimes the caller has `AExpr` in their hands.\r\nIt would be trivial to remove/inline `fromPureSExpr`, but that would mean more place in the code which have to call `flattenToAnf`, and I think that would be worse.",
        "createdAt" : "2020-06-30T09:32:06Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e65b2902-afe6-4358-ae6c-b8d15057d155",
        "parentId" : "9daa14b4-a382-4905-957d-c117592681db",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm fine with having another entry point for this.",
        "createdAt" : "2020-06-30T10:25:51Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 116,
    "diffHunk" : "@@ -601,12 +608,20 @@ object Speedy {\n     def fromPureSExpr(\n         compiledPackages: CompiledPackages,\n         expr: SExpr,\n+    ): Machine = fromPureAExpr(\n+      compiledPackages = compiledPackages,\n+      anf = flattenToAnf(expr),\n+    )\n+\n+    def fromPureAExpr("
  },
  {
    "id" : "53f6dc67-1a1a-4b1e-bc08-2f0dc229fe2e",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "6299c3ae-cda0-4466-8a55-5fc4187eaafa",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not comfortable merging this even more complicated pattern until we have a way to turn of location handling in sandbox.",
        "createdAt" : "2020-06-26T11:30:22Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "31b36cf1-febd-4d01-9df4-69ed25885437",
        "parentId" : "6299c3ae-cda0-4466-8a55-5fc4187eaafa",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Has this condition been satisfied now?\r\nOr is this still blocking this PR?",
        "createdAt" : "2020-06-30T15:02:45Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 23,
    "diffHunk" : "@@ -212,7 +213,8 @@ object Speedy {\n         // NOTE(MH): If the top of the continuation stack is the monadic token,\n         // we push location information under it to account for the implicit\n         // lambda binding the token.\n-        case Some(KArg(Array(SEValue.Token), _, _, _)) => {\n+        // TODO: re-work the location handling, to avoid the following fragile special-case\n+        case Some(KPushTo(_, SEAppAtomicGeneral(SELocS(1), Array(SEValue.Token)), _, _, _)) => {"
  },
  {
    "id" : "defcbc61-23f7-4759-a192-1c2d85b14923",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "40bb20a0-85b3-49a8-8d55-17f0b0ce10fc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "An expression in ANF is still an expression...\r\n```suggestion\r\n        expr: AExpr,\r\n```",
        "createdAt" : "2020-06-26T11:31:29Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "542a993f-63a0-424c-a964-74b965ef9bdc",
        "parentId" : "40bb20a0-85b3-49a8-8d55-17f0b0ce10fc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "it is. but naming is `anf` is better. and it's not just this one place. so I suggest we leave it",
        "createdAt" : "2020-06-30T15:03:33Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 54,
    "diffHunk" : "@@ -522,7 +525,7 @@ object Speedy {\n         compiledPackages: CompiledPackages,\n         submissionTime: Time.Timestamp,\n         initialSeeding: InitialSeeding,\n-        expr: SExpr,\n+        anf: AExpr,"
  },
  {
    "id" : "7e5c1117-4deb-4112-92a3-4e169cfbbd88",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "1732b2e8-c574-40e7-a9e4-044c22a1e2b5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "There's no _static_ way to detect over-applications, is there? If there isn't, then `KArg` is here to stay and we should reduce the duplication between `executeApplication` and `enterApplication`.",
        "createdAt" : "2020-06-26T11:40:11Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a498cc2a-e7b3-4203-be77-2f71bf376072",
        "parentId" : "1732b2e8-c574-40e7-a9e4-044c22a1e2b5",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "`KArg` does not have to stay. The replacement will have only the over-applied values. And so the old code will get removed.",
        "createdAt" : "2020-06-30T15:04:48Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 217,
    "diffHunk" : "@@ -722,7 +737,72 @@ object Speedy {\n     }\n   }\n \n-  /** The function has been evaluated to a value. Now restore the environment and execute the application */\n+  /** The function has been evaluated to a value, now start evaluating the arguments. */\n+  // This code replaces `executeApplication` which is almost dead.\n+  def enterApplication(machine: Machine, vfun: SValue, newArgs: Array[SExprAtomic]): Unit = {\n+    vfun match {\n+      case SPAP(prim, actualsSoFar, arity) =>\n+        val missing = arity - actualsSoFar.size\n+        val newArgsLimit = Math.min(missing, newArgs.length)\n+\n+        val actuals = new util.ArrayList[SValue](actualsSoFar.size + newArgsLimit)\n+        actuals.addAll(actualsSoFar)\n+\n+        val othersLength = newArgs.length - missing\n+\n+        // Evaluate the arguments\n+        for (i <- 0 to newArgsLimit - 1) {\n+          val newArg = newArgs(i)\n+          val v = newArg.lookupValue(machine)\n+          actuals.add(v)\n+        }\n+\n+        // Not enough arguments. Return a PAP.\n+        if (othersLength < 0) {\n+          machine.returnValue = SPAP(prim, actuals, arity)\n+\n+        } else {\n+          // Too many arguments: Push a continuation to re-apply the over-applied args.\n+          if (othersLength > 0) {\n+            // TODO: Stop using Karg. Instead save the already evaluated 'actuals' in a special\n+            // and much simpler continuation to perform the application.\n+            val others = new Array[SExpr](othersLength)\n+            System.arraycopy(newArgs, missing, others, 0, othersLength)\n+            machine.pushKont(KArg(others, machine.frame, machine.actuals, machine.env.size))\n+          }\n+          // Now the correct number of arguments is ensured. What kind of prim do we have?\n+          prim match {\n+            case closure: PClosure =>\n+              machine.frame = closure.frame\n+              machine.actuals = actuals\n+              // Maybe push a continuation for the profiler\n+              val label = closure.label\n+              if (label != null) {\n+                machine.profile.addOpenEvent(label)\n+                machine.pushKont(KLeaveClosure(label))\n+              }\n+              // Start evaluating the body of the closure.\n+              machine.ctrl = closure.expr\n+\n+            case PBuiltin(builtin) =>\n+              machine.actuals = actuals\n+              try {\n+                builtin.execute(actuals, machine)\n+              } catch {\n+                // We turn arithmetic exceptions into a daml exception that can be caught.\n+                case e: ArithmeticException =>\n+                  throw DamlEArithmeticError(e.getMessage)\n+              }\n+\n+          }\n+        }\n+\n+      case _ =>\n+        crash(s\"Applying non-PAP: $vfun\")\n+    }\n+  }\n+\n+  //TODO: Remove KArg once it's use to execute over-applications is removed"
  },
  {
    "id" : "622e9e00-7043-49a6-950e-b74fbf93d48a",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "7e6ede9e-92f4-42ee-9db2-cdcce2c5232e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Maybe named arguments make this easier to read?",
        "createdAt" : "2020-06-16T17:05:03Z",
        "updatedAt" : "2020-06-17T08:59:11Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : null,
    "diffHunk" : "@@ -546,73 +551,29 @@ object Speedy {\n         profile = new Profile(),\n       )\n \n-    def newBuilder(\n+    def buildForScenario(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        submissionSeed: crypto.Hash,\n-    ): Either[SError, Expr => Machine] = {\n-      val compiler = compiledPackages.compiler\n-      Right(\n-        (expr: Expr) =>\n-          fromSExpr(\n-            SEApp(compiler.unsafeCompile(expr), Array(SEValue.Token)),\n-            compiledPackages,\n-            submissionTime,\n-            InitialSeeding.TransactionSeed(submissionSeed),\n-            Set.empty\n-        ))\n-    }\n-\n-    def build(\n-        sexpr: SExpr,\n+        seed: crypto.Hash,\n+        expr: SExpr,\n+    ): Machine = Machine(\n+      compiledPackages,\n+      Time.Timestamp.MinValue,\n+      InitialSeeding.TransactionSeed(seed),\n+      SEApp(expr, Array(SEValue.Token)),\n+      Set.empty,\n+      Set.empty,"
  },
  {
    "id" : "1c8d8692-5403-400f-b0fb-fcdff4569b7a",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "3d0e4746-09a2-46fc-aad5-d76d07e06990",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Would it make sense to call this `fromPureExpr`?",
        "createdAt" : "2020-06-17T13:23:29Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 151,
    "diffHunk" : "@@ -546,73 +552,64 @@ object Speedy {\n         profile = new Profile(),\n       )\n \n-    def newBuilder(\n+    // Construct a machine for running scenario.\n+    def buildForScenario(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        submissionSeed: crypto.Hash,\n-    ): Either[SError, Expr => Machine] = {\n-      val compiler = compiledPackages.compiler\n-      Right(\n-        (expr: Expr) =>\n-          fromSExpr(\n-            SEApp(compiler.unsafeCompile(expr), Array(SEValue.Token)),\n-            compiledPackages,\n-            submissionTime,\n-            InitialSeeding.TransactionSeed(submissionSeed),\n-            Set.empty\n-        ))\n-    }\n-\n-    def build(\n-        sexpr: SExpr,\n+        seed: crypto.Hash,\n+        scenario: SExpr,\n+    ): Machine = Machine(\n+      compiledPackages = compiledPackages,\n+      submissionTime = Time.Timestamp.MinValue,\n+      initialSeeding = InitialSeeding.TransactionSeed(seed),\n+      expr = SEApp(scenario, Array(SEValue.Token)),\n+      globalCids = Set.empty,\n+      committers = Set.empty,\n+    )\n+\n+    @throws[PackageNotFound]\n+    @throws[CompilationError]\n+    // Construct a machine for running scenario.\n+    def buildForScenario(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        seeds: InitialSeeding,\n-        globalCids: Set[V.ContractId],\n+        seed: crypto.Hash,\n+        scenario: Expr,\n     ): Machine =\n-      fromSExpr(\n-        SEApp(sexpr, Array(SEValue.Token)),\n-        compiledPackages,\n-        submissionTime,\n-        seeds,\n-        globalCids\n+      buildForScenario(\n+        compiledPackages = compiledPackages,\n+        seed = seed,\n+        scenario = compiledPackages.compiler.unsafeCompile(scenario)\n       )\n \n-    // Used from repl.\n+    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n     def fromExpr("
  },
  {
    "id" : "73d8c095-8d3d-4b04-8c7c-c1b3f658530c",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "139cd6ae-44fc-4f1f-924c-83139c4d0d2a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      fromExpr(compiledPackages, compiledPackages.compiler.unsafeCompile(expr))\r\n```",
        "createdAt" : "2020-06-17T13:24:57Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 207,
    "diffHunk" : "@@ -546,73 +552,64 @@ object Speedy {\n         profile = new Profile(),\n       )\n \n-    def newBuilder(\n+    // Construct a machine for running scenario.\n+    def buildForScenario(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        submissionSeed: crypto.Hash,\n-    ): Either[SError, Expr => Machine] = {\n-      val compiler = compiledPackages.compiler\n-      Right(\n-        (expr: Expr) =>\n-          fromSExpr(\n-            SEApp(compiler.unsafeCompile(expr), Array(SEValue.Token)),\n-            compiledPackages,\n-            submissionTime,\n-            InitialSeeding.TransactionSeed(submissionSeed),\n-            Set.empty\n-        ))\n-    }\n-\n-    def build(\n-        sexpr: SExpr,\n+        seed: crypto.Hash,\n+        scenario: SExpr,\n+    ): Machine = Machine(\n+      compiledPackages = compiledPackages,\n+      submissionTime = Time.Timestamp.MinValue,\n+      initialSeeding = InitialSeeding.TransactionSeed(seed),\n+      expr = SEApp(scenario, Array(SEValue.Token)),\n+      globalCids = Set.empty,\n+      committers = Set.empty,\n+    )\n+\n+    @throws[PackageNotFound]\n+    @throws[CompilationError]\n+    // Construct a machine for running scenario.\n+    def buildForScenario(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        seeds: InitialSeeding,\n-        globalCids: Set[V.ContractId],\n+        seed: crypto.Hash,\n+        scenario: Expr,\n     ): Machine =\n-      fromSExpr(\n-        SEApp(sexpr, Array(SEValue.Token)),\n-        compiledPackages,\n-        submissionTime,\n-        seeds,\n-        globalCids\n+      buildForScenario(\n+        compiledPackages = compiledPackages,\n+        seed = seed,\n+        scenario = compiledPackages.compiler.unsafeCompile(scenario)\n       )\n \n-    // Used from repl.\n+    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n     def fromExpr(\n-        expr: Expr,\n         compiledPackages: CompiledPackages,\n-        scenario: Boolean,\n-        submissionTime: Time.Timestamp,\n-        initialSeeding: InitialSeeding,\n-    ): Machine = {\n-      val compiler = compiledPackages.compiler\n-      val sexpr =\n-        if (scenario)\n-          SEApp(compiler.unsafeCompile(expr), Array(SEValue.Token))\n-        else\n-          compiler.unsafeCompile(expr)\n-\n-      fromSExpr(\n-        sexpr,\n-        compiledPackages,\n-        submissionTime,\n-        initialSeeding,\n-        Set.empty,\n+        expr: SExpr,\n+    ) =\n+      Machine(\n+        compiledPackages = compiledPackages,\n+        submissionTime = Time.Timestamp.MinValue,\n+        initialSeeding = InitialSeeding.NoSeed,\n+        expr = expr,\n+        globalCids = Set.empty,\n+        committers = Set.empty,\n       )\n-    }\n \n-    // Construct a machine from an SExpr. This is useful when you don’t have\n-    // an update expression and build’s behavior of applying the expression to\n-    // a token is not appropriate.\n-    def fromSExpr(\n-        sexpr: SExpr,\n+    @throws[PackageNotFound]\n+    @throws[CompilationError]\n+    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n+    def fromExpr(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        seeding: InitialSeeding,\n-        globalCids: Set[V.ContractId],\n-    ): Machine =\n-      initial(compiledPackages, submissionTime, seeding, globalCids).copy(ctrl = sexpr)\n+        expr: Expr,\n+    ) =\n+      Machine(\n+        compiledPackages = compiledPackages,\n+        submissionTime = Time.Timestamp.MinValue,\n+        initialSeeding = InitialSeeding.NoSeed,\n+        expr = compiledPackages.compiler.unsafeCompile(expr),\n+        globalCids = Set.empty,\n+        committers = Set.empty,\n+      )"
  },
  {
    "id" : "f2aabf4b-8e8f-4976-914e-3b8ae03fc7f9",
    "prId" : 6368,
    "comments" : [
      {
        "id" : "d27297cf-0746-4a9a-ba30-7eeb3e7b1240",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not a big fan of overloading functions of the same name with different types. 😦",
        "createdAt" : "2020-06-17T13:26:32Z",
        "updatedAt" : "2020-06-18T20:12:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6422994acada0eb74280713a408f020498a5de13",
    "line" : 191,
    "diffHunk" : "@@ -546,73 +552,64 @@ object Speedy {\n         profile = new Profile(),\n       )\n \n-    def newBuilder(\n+    // Construct a machine for running scenario.\n+    def buildForScenario(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        submissionSeed: crypto.Hash,\n-    ): Either[SError, Expr => Machine] = {\n-      val compiler = compiledPackages.compiler\n-      Right(\n-        (expr: Expr) =>\n-          fromSExpr(\n-            SEApp(compiler.unsafeCompile(expr), Array(SEValue.Token)),\n-            compiledPackages,\n-            submissionTime,\n-            InitialSeeding.TransactionSeed(submissionSeed),\n-            Set.empty\n-        ))\n-    }\n-\n-    def build(\n-        sexpr: SExpr,\n+        seed: crypto.Hash,\n+        scenario: SExpr,\n+    ): Machine = Machine(\n+      compiledPackages = compiledPackages,\n+      submissionTime = Time.Timestamp.MinValue,\n+      initialSeeding = InitialSeeding.TransactionSeed(seed),\n+      expr = SEApp(scenario, Array(SEValue.Token)),\n+      globalCids = Set.empty,\n+      committers = Set.empty,\n+    )\n+\n+    @throws[PackageNotFound]\n+    @throws[CompilationError]\n+    // Construct a machine for running scenario.\n+    def buildForScenario(\n         compiledPackages: CompiledPackages,\n-        submissionTime: Time.Timestamp,\n-        seeds: InitialSeeding,\n-        globalCids: Set[V.ContractId],\n+        seed: crypto.Hash,\n+        scenario: Expr,\n     ): Machine =\n-      fromSExpr(\n-        SEApp(sexpr, Array(SEValue.Token)),\n-        compiledPackages,\n-        submissionTime,\n-        seeds,\n-        globalCids\n+      buildForScenario(\n+        compiledPackages = compiledPackages,\n+        seed = seed,\n+        scenario = compiledPackages.compiler.unsafeCompile(scenario)\n       )\n \n-    // Used from repl.\n+    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n     def fromExpr(\n-        expr: Expr,\n         compiledPackages: CompiledPackages,\n-        scenario: Boolean,\n-        submissionTime: Time.Timestamp,\n-        initialSeeding: InitialSeeding,\n-    ): Machine = {\n-      val compiler = compiledPackages.compiler\n-      val sexpr =\n-        if (scenario)\n-          SEApp(compiler.unsafeCompile(expr), Array(SEValue.Token))\n-        else\n-          compiler.unsafeCompile(expr)\n-\n-      fromSExpr(\n-        sexpr,\n-        compiledPackages,\n-        submissionTime,\n-        initialSeeding,\n-        Set.empty,\n+        expr: SExpr,\n+    ) =\n+      Machine(\n+        compiledPackages = compiledPackages,\n+        submissionTime = Time.Timestamp.MinValue,\n+        initialSeeding = InitialSeeding.NoSeed,\n+        expr = expr,\n+        globalCids = Set.empty,\n+        committers = Set.empty,\n       )\n-    }\n \n-    // Construct a machine from an SExpr. This is useful when you don’t have\n-    // an update expression and build’s behavior of applying the expression to\n-    // a token is not appropriate.\n-    def fromSExpr(\n-        sexpr: SExpr,\n+    @throws[PackageNotFound]\n+    @throws[CompilationError]\n+    // Construct a machine for evaluating an expression that is neither an update nor a scenario expression.\n+    def fromExpr("
  },
  {
    "id" : "230537df-8e10-4d37-90ec-c104d7d885b3",
    "prId" : 6359,
    "comments" : [
      {
        "id" : "5689b3b5-635f-4696-94a8-c48448c13406",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We're literally doing here what `restoreEnv` does, aren't we?\r\n```suggestion\r\n      machine.restoreEnv(closure.frame, actuals, envSize)\r\n```",
        "createdAt" : "2020-06-16T07:15:11Z",
        "updatedAt" : "2020-06-16T09:13:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "61d6540f-7d94-4ea0-85af-6f44e7d20a8d",
        "parentId" : "5689b3b5-635f-4696-94a8-c48448c13406",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I hadn't considered using `restoreEnv` here, because in this case there was no corresponding save. But this is much much nicer. Thank you.",
        "createdAt" : "2020-06-16T09:06:40Z",
        "updatedAt" : "2020-06-16T09:13:35Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6284d17bcfd2cd0f893ca529608d7a9666d1c37d",
    "line" : null,
    "diffHunk" : "@@ -726,11 +731,14 @@ object Speedy {\n   }\n \n   /** The function-closure and arguments have been evaluated. Now execute the body. */\n-  final case class KFun(closure: PClosure, actuals: util.ArrayList[SValue])\n+  final case class KFun(closure: PClosure, actuals: util.ArrayList[SValue], envSize: Int)\n       extends Kont\n       with SomeArrayEquals {\n     def execute(v: SValue, machine: Machine) = {\n       actuals.add(v)\n+      // we only need to call restoreEnvStack (not the full restoreEnv), because frame/actuals\n+      // are changed anyway to evaluate the function body.\n+      machine.restoreEnvStack(envSize)\n       // Set frame/actuals to allow access to the function arguments and closure free-varables.\n       machine.frame = closure.frame\n       machine.actuals = actuals"
  },
  {
    "id" : "956c0020-f0f6-467a-a4d9-f7f245be527f",
    "prId" : 6359,
    "comments" : [
      {
        "id" : "767c81c8-c189-424e-85e7-75436c645115",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If we don't point into the frame, we can reset it and release the values in the old frame to the GC, can't we?\r\n```suggestion\r\n      machine.restoreEnv(null, actuals, envSize)\r\n```",
        "createdAt" : "2020-06-16T07:17:32Z",
        "updatedAt" : "2020-06-16T09:13:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e0e8ed2b-2600-4bce-bfeb-a67d223da09f",
        "parentId" : "767c81c8-c189-424e-85e7-75436c645115",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I had wondered if it should be set to `null`. And of course it should for GC reasons. Thanks.",
        "createdAt" : "2020-06-16T09:06:49Z",
        "updatedAt" : "2020-06-16T09:13:35Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6284d17bcfd2cd0f893ca529608d7a9666d1c37d",
    "line" : null,
    "diffHunk" : "@@ -746,9 +754,13 @@ object Speedy {\n   }\n \n   /** The builtin arguments have been evaluated. Now execute the builtin. */\n-  final case class KBuiltin(builtin: SBuiltin, actuals: util.ArrayList[SValue]) extends Kont {\n+  final case class KBuiltin(builtin: SBuiltin, actuals: util.ArrayList[SValue], envSize: Int)\n+      extends Kont {\n     def execute(v: SValue, machine: Machine) = {\n       actuals.add(v)\n+      // we only need to call restoreEnvStack (not the full restoreEnv), because actuals\n+      // are changed to evaluate the builtin, and a builtin has no free-vars.\n+      machine.restoreEnvStack(envSize)\n       // A builtin has no free-vars, so we dont have to set the frame.\n       machine.actuals = actuals"
  },
  {
    "id" : "ae99c3da-f6fe-4df0-b1c2-635f23af4fc9",
    "prId" : 6359,
    "comments" : [
      {
        "id" : "a379319b-f9cf-4a02-9837-7e223f4f14de",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If we follow my suggestions below, we don't need this split anymore.",
        "createdAt" : "2020-06-16T07:18:24Z",
        "updatedAt" : "2020-06-16T09:13:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f16c22c-a74d-4a14-bf62-4faab7029e04",
        "parentId" : "a379319b-f9cf-4a02-9837-7e223f4f14de",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Indeed. Thank you.",
        "createdAt" : "2020-06-16T09:06:55Z",
        "updatedAt" : "2020-06-16T09:13:35Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6284d17bcfd2cd0f893ca529608d7a9666d1c37d",
    "line" : null,
    "diffHunk" : "@@ -189,6 +189,11 @@ object Speedy {\n       // Restore the frame and actuals to there state when the continuation was created.\n       frame = frameToBeRestored\n       actuals = actualsToBeRestored\n+      // And restore the env-stack.\n+      restoreEnvStack(envSizeToBeRestored)\n+    }\n+\n+    @inline def restoreEnvStack(envSizeToBeRestored: Int): Unit = {"
  },
  {
    "id" : "7443ac63-96b7-4f79-888e-27b657f67507",
    "prId" : 6234,
    "comments" : [
      {
        "id" : "b66a72a6-1e88-4fd4-bef2-591717a8f177",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Nice. Embedding the PClosure in the KFun, instead of it's components.",
        "createdAt" : "2020-06-05T08:17:28Z",
        "updatedAt" : "2020-06-05T08:18:22Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c91b91a129dc85a9cc65c570b410845e71daee21",
    "line" : 22,
    "diffHunk" : "@@ -731,16 +726,22 @@ object Speedy {\n   }\n \n   /** The function-closure and arguments have been evaluated. Now execute the body. */\n-  final case class KFun(body: SExpr, frame: Frame, actuals: util.ArrayList[SValue])\n+  final case class KFun(closure: PClosure, actuals: util.ArrayList[SValue])"
  },
  {
    "id" : "d5e3850c-aed9-461b-8786-5b292bf3e1d5",
    "prId" : 6104,
    "comments" : [
      {
        "id" : "3e645287-4f70-40e3-832b-4582835b43ba",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  private def executeApplication(machine: Machine, vfun: SValue, newArgs: Array[SExpr]): Unit = {\r\n```",
        "createdAt" : "2020-05-29T13:54:51Z",
        "updatedAt" : "2020-06-01T10:08:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "23694e79-8d5c-4aed-a6ed-e7fc3426b245",
        "parentId" : "3e645287-4f70-40e3-832b-4582835b43ba",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This can't be `private` because it is also used in `SExpr.scala`",
        "createdAt" : "2020-06-01T10:12:36Z",
        "updatedAt" : "2020-06-01T10:12:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : 13,
    "diffHunk" : "@@ -650,61 +652,65 @@ object Speedy {\n   }\n \n   /** The function has been evaluated to a value, now start evaluating the arguments. */\n+  def executeApplication(machine: Machine, vfun: SValue, newArgs: Array[SExpr]): Unit = {"
  },
  {
    "id" : "a9febe8e-5f9d-4591-b93a-9a15642cbeb6",
    "prId" : 6068,
    "comments" : [
      {
        "id" : "53b64820-12fd-4379-a08f-35b05ea06908",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What is this about?",
        "createdAt" : "2020-05-27T09:36:02Z",
        "updatedAt" : "2020-05-27T10:37:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "576f163d-c8cd-4230-85f6-5fc5b6867779",
        "parentId" : "53b64820-12fd-4379-a08f-35b05ea06908",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I changed to the better idiom, as used in SExpr.scala `extends SomeArrayEquals`.",
        "createdAt" : "2020-05-27T10:43:24Z",
        "updatedAt" : "2020-05-27T10:43:24Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dbb4add9f79edb942d3c961c2886327ce1be7bd1",
    "line" : null,
    "diffHunk" : "@@ -18,7 +18,7 @@ import org.slf4j.LoggerFactory\n \n import scala.collection.JavaConverters._\n import scala.util.control.NoStackTrace\n-\n+@SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))"
  },
  {
    "id" : "bed7eff4-ffba-4d43-b8cd-3b3928d37fa1",
    "prId" : 6068,
    "comments" : [
      {
        "id" : "86d3ff15-c07f-44f7-a789-9fddfa7b901b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think I already mentioned this earlier but I find `envSize` a very undescriptive name. Shouldn't it be `envSizeToBeRestored` instead?",
        "createdAt" : "2020-05-27T09:39:36Z",
        "updatedAt" : "2020-05-27T10:37:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "874515ea-3294-4ff6-affd-bf68740a3623",
        "parentId" : "86d3ff15-c07f-44f7-a789-9fddfa7b901b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, this is more descriptive. I changed it.",
        "createdAt" : "2020-05-27T10:43:52Z",
        "updatedAt" : "2020-05-27T10:43:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dbb4add9f79edb942d3c961c2886327ce1be7bd1",
    "line" : null,
    "diffHunk" : "@@ -169,9 +180,13 @@ object Speedy {\n       }\n     }\n \n-    @inline def restoreEnv(frameToBeRestored: Frame, envSize: Int): Unit = {\n-      // Restore the frame pointer captured when the continuation was created.\n+    @inline def restoreEnv(\n+        frameToBeRestored: Frame,\n+        actualsToBeRestored: Actuals,\n+        envSize: Int): Unit = {"
  },
  {
    "id" : "ec708309-bd54-4e92-83c1-f03bdea2f484",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "603dda90-cc19-4921-a7a8-eaed5da9ceb1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      /* Environment: local values pushed to a stack: let-bindings and pattern-matches. */\r\n```",
        "createdAt" : "2020-05-19T17:39:52Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 34,
    "diffHunk" : "@@ -68,7 +68,9 @@ object Speedy {\n        * been fully evaluated. If this is not null, then `ctrl` must be null.\n        */\n       var returnValue: SValue,\n-      /* The environment: an array of values */\n+      /* Frame: to access values for function arguments and closure free-vars. */\n+      var frame: Frame,\n+      /* Environment: values pushed to a stack: let-bindings and pattern-matches. */"
  },
  {
    "id" : "047ea40d-899e-414c-a758-1a41665dfda2",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "dce187f6-e688-4cf7-a565-b87117881b10",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      /* Frame: to access values for function arguments and variables captured by closures. */\r\n```",
        "createdAt" : "2020-05-19T17:40:33Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 32,
    "diffHunk" : "@@ -68,7 +68,9 @@ object Speedy {\n        * been fully evaluated. If this is not null, then `ctrl` must be null.\n        */\n       var returnValue: SValue,\n-      /* The environment: an array of values */\n+      /* Frame: to access values for function arguments and closure free-vars. */"
  },
  {
    "id" : "a70f32f1-2340-4c42-934d-9028dd490268",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "0095ea91-8476-42ef-befb-cf5f8d1c9bed",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    // Variables which reside in the captured variables array of the current frame. Indexed by absolute offset.\r\n```",
        "createdAt" : "2020-05-19T17:41:19Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 55,
    "diffHunk" : "@@ -122,30 +124,44 @@ object Speedy {\n \n     /* env manipulation... */\n \n-    @inline def envDepth(): Int = env.size()\n+    // The environment is partitioned into three locations: Stack, Args, Free\n+    // The run-time location of a variable is determined (at compile time) by closureConvert\n+    // And made explicit by a specifc speedy expression node: SELocS/SELocA/SELocF\n+    // At runtime these different location-node execute by calling the corresponding `getEnv*` function\n \n-    @inline def getEnv(i: Int): SValue = env.get(env.size - i)\n+    // Variables which reside on the stack. Indexed by relative offset from the top of the stack\n+    @inline def getEnvStack(i: Int): SValue = env.get(env.size - i)\n+\n+    // Variables which reside in the args array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvArg(i: Int): SValue = frame.args.get(i)\n+\n+    // Variables which reside in the free-vars array of the current frame. Indexed by absolute offset."
  },
  {
    "id" : "696aa374-8732-4068-9f51-b314b2768aa7",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "c8808748-370e-4291-a948-fdb5f5335ab9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        if (env.size < envSize) {\r\n          crash(s\"restoreEnv, cannot shrink environment from ${env.size} to ${envSize}\")\r\n```",
        "createdAt" : "2020-05-19T17:51:34Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 82,
    "diffHunk" : "@@ -122,30 +124,44 @@ object Speedy {\n \n     /* env manipulation... */\n \n-    @inline def envDepth(): Int = env.size()\n+    // The environment is partitioned into three locations: Stack, Args, Free\n+    // The run-time location of a variable is determined (at compile time) by closureConvert\n+    // And made explicit by a specifc speedy expression node: SELocS/SELocA/SELocF\n+    // At runtime these different location-node execute by calling the corresponding `getEnv*` function\n \n-    @inline def getEnv(i: Int): SValue = env.get(env.size - i)\n+    // Variables which reside on the stack. Indexed by relative offset from the top of the stack\n+    @inline def getEnvStack(i: Int): SValue = env.get(env.size - i)\n+\n+    // Variables which reside in the args array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvArg(i: Int): SValue = frame.args.get(i)\n+\n+    // Variables which reside in the free-vars array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvFree(i: Int): SValue = {\n+      //TODO(NC) : modify types to avoid this asInstanceOf\n+      frame.prim.asInstanceOf[PClosure].fvs(i)\n+    }\n \n     @inline def pushEnv(v: SValue): Unit = {\n       env.add(v)\n       if (enableInstrumentation) {\n         track.countPushesEnv += 1\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+        if (env.size > track.maxDepthEnv) track.maxDepthEnv = env.size\n       }\n     }\n \n-    @inline def pushEnvAll(vs: Env): Unit = {\n-      env.addAll(vs)\n-      if (enableInstrumentation) {\n-        track.countPushesEnv += vs.size()\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+    @inline def restoreEnv(frameToBeRestored: Frame, envSize: Int): Unit = {\n+      // Restore the frame pointer captured when the continuation was created.\n+      frame = frameToBeRestored\n+      // Pop the env-stack back to the size it was when the continuation was created.\n+      if (envSize != env.size) {\n+        val count = env.size - envSize\n+        if (count < 1) {\n+          crash(s\"restoreEnv, unexpected negative count: $count!\")"
  },
  {
    "id" : "f585cb8a-8a8a-4e4b-9b84-31e19708570c",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "0ad6ec25-1d02-4c34-84b6-97f491cf46ee",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Which one is the common case: `envSize` or `envSize < env.size`? We should make the common case the cheaper one with less branching. Let's keep that for a separate PR though.",
        "createdAt" : "2020-05-19T17:52:32Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 79,
    "diffHunk" : "@@ -122,30 +124,44 @@ object Speedy {\n \n     /* env manipulation... */\n \n-    @inline def envDepth(): Int = env.size()\n+    // The environment is partitioned into three locations: Stack, Args, Free\n+    // The run-time location of a variable is determined (at compile time) by closureConvert\n+    // And made explicit by a specifc speedy expression node: SELocS/SELocA/SELocF\n+    // At runtime these different location-node execute by calling the corresponding `getEnv*` function\n \n-    @inline def getEnv(i: Int): SValue = env.get(env.size - i)\n+    // Variables which reside on the stack. Indexed by relative offset from the top of the stack\n+    @inline def getEnvStack(i: Int): SValue = env.get(env.size - i)\n+\n+    // Variables which reside in the args array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvArg(i: Int): SValue = frame.args.get(i)\n+\n+    // Variables which reside in the free-vars array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvFree(i: Int): SValue = {\n+      //TODO(NC) : modify types to avoid this asInstanceOf\n+      frame.prim.asInstanceOf[PClosure].fvs(i)\n+    }\n \n     @inline def pushEnv(v: SValue): Unit = {\n       env.add(v)\n       if (enableInstrumentation) {\n         track.countPushesEnv += 1\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+        if (env.size > track.maxDepthEnv) track.maxDepthEnv = env.size\n       }\n     }\n \n-    @inline def pushEnvAll(vs: Env): Unit = {\n-      env.addAll(vs)\n-      if (enableInstrumentation) {\n-        track.countPushesEnv += vs.size()\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+    @inline def restoreEnv(frameToBeRestored: Frame, envSize: Int): Unit = {\n+      // Restore the frame pointer captured when the continuation was created.\n+      frame = frameToBeRestored\n+      // Pop the env-stack back to the size it was when the continuation was created.\n+      if (envSize != env.size) {"
  },
  {
    "id" : "d51db0ca-11ee-461c-a9ab-921dc0a4b2ad",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "e290cd21-b082-4b82-aa46-c9f129e20975",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm very sad that we need to allocate a sublist to truncate a vector. I wish Java had something like https://doc.rust-lang.org/std/vec/struct.Vec.html#method.truncate.\r\n😿",
        "createdAt" : "2020-05-19T17:53:54Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e19e0c3-9408-4a5a-a006-72a8334d76a4",
        "parentId" : "e290cd21-b082-4b82-aa46-c9f129e20975",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@martin-drhu-da \r\nFrancesco's `ImmArray` behaves like haskell vector. \r\nI am just afraid the constant overhead is too high. ",
        "createdAt" : "2020-05-19T22:01:30Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 84,
    "diffHunk" : "@@ -122,30 +124,44 @@ object Speedy {\n \n     /* env manipulation... */\n \n-    @inline def envDepth(): Int = env.size()\n+    // The environment is partitioned into three locations: Stack, Args, Free\n+    // The run-time location of a variable is determined (at compile time) by closureConvert\n+    // And made explicit by a specifc speedy expression node: SELocS/SELocA/SELocF\n+    // At runtime these different location-node execute by calling the corresponding `getEnv*` function\n \n-    @inline def getEnv(i: Int): SValue = env.get(env.size - i)\n+    // Variables which reside on the stack. Indexed by relative offset from the top of the stack\n+    @inline def getEnvStack(i: Int): SValue = env.get(env.size - i)\n+\n+    // Variables which reside in the args array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvArg(i: Int): SValue = frame.args.get(i)\n+\n+    // Variables which reside in the free-vars array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvFree(i: Int): SValue = {\n+      //TODO(NC) : modify types to avoid this asInstanceOf\n+      frame.prim.asInstanceOf[PClosure].fvs(i)\n+    }\n \n     @inline def pushEnv(v: SValue): Unit = {\n       env.add(v)\n       if (enableInstrumentation) {\n         track.countPushesEnv += 1\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+        if (env.size > track.maxDepthEnv) track.maxDepthEnv = env.size\n       }\n     }\n \n-    @inline def pushEnvAll(vs: Env): Unit = {\n-      env.addAll(vs)\n-      if (enableInstrumentation) {\n-        track.countPushesEnv += vs.size()\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+    @inline def restoreEnv(frameToBeRestored: Frame, envSize: Int): Unit = {\n+      // Restore the frame pointer captured when the continuation was created.\n+      frame = frameToBeRestored\n+      // Pop the env-stack back to the size it was when the continuation was created.\n+      if (envSize != env.size) {\n+        val count = env.size - envSize\n+        if (count < 1) {\n+          crash(s\"restoreEnv, unexpected negative count: $count!\")\n+        }\n+        env.subList(envSize, env.size).clear"
  },
  {
    "id" : "335b6d5b-be01-4dae-b365-adc10ed60bb3",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "3938d264-9afc-426a-b795-b424980d90b1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  // the captured variables which were stored into the closure.\r\n```",
        "createdAt" : "2020-05-19T17:57:13Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 148,
    "diffHunk" : "@@ -590,6 +603,14 @@ object Speedy {\n       initial(compiledPackages, submissionTime, seeding, globalCids).copy(ctrl = sexpr)\n   }\n \n+  //\n+  // Frame\n+  //\n+  // For our frame, we use the KFun continuation directly.  From here\n+  // we can access both the application arguments, and the values of\n+  // the free-variables which were stored into the closure."
  },
  {
    "id" : "d866c549-a353-461a-9306-8ed073825e93",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "27b200d5-6624-4a9d-8a0f-722a0ef1548c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not sure `envSize` is the best name we can find for the last argument. A comment explaining what it is would also help. Do `Frame` and `envSize` always show up as a couple? If so, should we move `envSize` into `Frame`?",
        "createdAt" : "2020-05-19T18:43:42Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "501b41fb-5ab4-43c0-96c0-50ba03f057b7",
        "parentId" : "27b200d5-6624-4a9d-8a0f-722a0ef1548c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I expect the code in this function to be very hot. Once we've landed this PR, I'd like to see this (dis)proved using a profiler and if it turns out to be hot indeed, we should try to squeeze more performance out of it.",
        "createdAt" : "2020-05-19T18:57:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e3825e4-6612-474d-ac4f-7eb29c3ca192",
        "parentId" : "27b200d5-6624-4a9d-8a0f-722a0ef1548c",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I don't think we can put `envSize` in the `Frame`... but I need to think more about this.\r\nI suggest we leave this as it is for now.",
        "createdAt" : "2020-05-20T07:18:44Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "79d0bb5e-40a2-4b56-b6a8-57f3e2a9151d",
        "parentId" : "27b200d5-6624-4a9d-8a0f-722a0ef1548c",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes I'm sure profiling wold be very instructive.",
        "createdAt" : "2020-05-20T07:19:12Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 75,
    "diffHunk" : "@@ -122,30 +124,44 @@ object Speedy {\n \n     /* env manipulation... */\n \n-    @inline def envDepth(): Int = env.size()\n+    // The environment is partitioned into three locations: Stack, Args, Free\n+    // The run-time location of a variable is determined (at compile time) by closureConvert\n+    // And made explicit by a specifc speedy expression node: SELocS/SELocA/SELocF\n+    // At runtime these different location-node execute by calling the corresponding `getEnv*` function\n \n-    @inline def getEnv(i: Int): SValue = env.get(env.size - i)\n+    // Variables which reside on the stack. Indexed by relative offset from the top of the stack\n+    @inline def getEnvStack(i: Int): SValue = env.get(env.size - i)\n+\n+    // Variables which reside in the args array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvArg(i: Int): SValue = frame.args.get(i)\n+\n+    // Variables which reside in the free-vars array of the current frame. Indexed by absolute offset.\n+    @inline def getEnvFree(i: Int): SValue = {\n+      //TODO(NC) : modify types to avoid this asInstanceOf\n+      frame.prim.asInstanceOf[PClosure].fvs(i)\n+    }\n \n     @inline def pushEnv(v: SValue): Unit = {\n       env.add(v)\n       if (enableInstrumentation) {\n         track.countPushesEnv += 1\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+        if (env.size > track.maxDepthEnv) track.maxDepthEnv = env.size\n       }\n     }\n \n-    @inline def pushEnvAll(vs: Env): Unit = {\n-      env.addAll(vs)\n-      if (enableInstrumentation) {\n-        track.countPushesEnv += vs.size()\n-        if (envDepth > track.maxDepthEnv) track.maxDepthEnv = envDepth\n+    @inline def restoreEnv(frameToBeRestored: Frame, envSize: Int): Unit = {"
  },
  {
    "id" : "b511ebe9-b789-4336-b323-66ca73895ed4",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "e54b55a0-e96f-49ba-8aac-4222d2a3de34",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This function now takes a `KFun` which contains a field `prim` and an argument `prim`. Are they always the same? I'm confused.",
        "createdAt" : "2020-05-19T18:51:38Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "42973e42-559c-4427-88a3-89c4c461310d",
        "parentId" : "e54b55a0-e96f-49ba-8aac-4222d2a3de34",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. There is potentially some refactoring which will improve things here. But I am reluctant to make the obvious change... i.e. only passing `this` for the `KFun`/`Frame`, because the callee will then have to pull the components out. Maybe the `frame` should be set by the caller of `enterFullyAppliedFunction` - that might be cleaner.\r\n",
        "createdAt" : "2020-05-20T07:14:44Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2dc77f70-ee03-4b03-bdc1-da6d72c1ae2b",
        "parentId" : "e54b55a0-e96f-49ba-8aac-4222d2a3de34",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm afraid that if we don't clean this duplication up in this PR it might never happen. It shouldn't be too much of a change, is it?",
        "createdAt" : "2020-05-20T08:29:51Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7cc9413e-c504-4f6f-82ec-471c511631c6",
        "parentId" : "e54b55a0-e96f-49ba-8aac-4222d2a3de34",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I changed so frame is set by the caller.",
        "createdAt" : "2020-05-20T09:02:59Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : null,
    "diffHunk" : "@@ -315,22 +331,18 @@ object Speedy {\n       }\n     }\n \n-    def enterFullyAppliedFunction(prim: Prim, args: util.ArrayList[SValue]): Unit = {\n+    def enterFullyAppliedFunction("
  },
  {
    "id" : "0091be51-c590-4eb5-b264-ee34f28f9cba",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "1c54b0f8-6723-4e6b-af60-ac422385e41a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I assume we don't need to look at the captured variables anymore because they are also part of `KFun`? If so, that would deserve a comment.",
        "createdAt" : "2020-05-19T18:52:34Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f71294d-4c98-4b81-9ac8-b18f1275673d",
        "parentId" : "1c54b0f8-6723-4e6b-af60-ac422385e41a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "correct.",
        "createdAt" : "2020-05-20T07:15:32Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b06d5df5-32e6-4ac1-a5ba-2053326de747",
        "parentId" : "1c54b0f8-6723-4e6b-af60-ac422385e41a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I added the comment about how Speedy uses a caller-save strategy for the environment.\r\n\r\nI'm reluctant to write a specific comment to say we no longer do what we used to do when we were following a different strategy.\r\n\r\nBut if there is a specific comment you feel would be helpful, please do add it.\r\n",
        "createdAt" : "2020-05-20T07:24:01Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "558f0f57-1c9e-4b1a-80e9-29f0ea576397",
        "parentId" : "1c54b0f8-6723-4e6b-af60-ac422385e41a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Regardless of what strategy we used in the past, ignoring the array of captured variables when entering a closure seems worth an explanation. This also seems to be related to the `prim` comment above. Somehow, we ended up with unnormalized data here, where the same thing ends up in multiple places. We should clean this up or explain it _here_, even if it is only a pointer to the big comment.",
        "createdAt" : "2020-05-20T08:34:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "86a1c0b1-2627-4874-9016-9b3391b63abc",
        "parentId" : "1c54b0f8-6723-4e6b-af60-ac422385e41a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I added a comment",
        "createdAt" : "2020-05-20T09:03:12Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 109,
    "diffHunk" : "@@ -315,22 +331,18 @@ object Speedy {\n       }\n     }\n \n-    def enterFullyAppliedFunction(prim: Prim, args: util.ArrayList[SValue]): Unit = {\n+    def enterFullyAppliedFunction(\n+        newFrame: KFun,\n+        prim: Prim,\n+        args: util.ArrayList[SValue]): Unit = {\n       prim match {\n-        case PClosure(label, expr, vars) =>\n+        case PClosure(label, expr, _) =>"
  },
  {
    "id" : "95641520-a1d8-4aa8-874a-0d8c7f6babae",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "0f1f80a2-2e5a-414c-b6ec-c6119f275c3e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Wouldn't it make more sense to put that comment above the definition of the `Machine` class? It might also help to give this comment some sort of label that can be referenced from other comments and then easily be found.",
        "createdAt" : "2020-05-20T08:36:59Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "73230fe0-ba7b-42b4-9f93-7dc97be1e1c9",
        "parentId" : "0f1f80a2-2e5a-414c-b6ec-c6119f275c3e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-05-20T09:04:04Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : null,
    "diffHunk" : "@@ -620,6 +641,26 @@ object Speedy {\n     def execute(v: SValue, machine: Machine): Unit\n   }\n \n+  /*\n+   Speedy uses a caller-saves strategy for managing the environment.  In a Speedy machine,"
  },
  {
    "id" : "2fafe2fb-aaa3-4872-a492-629d478ac674",
    "prId" : 5881,
    "comments" : [
      {
        "id" : "7c3743e9-83b5-4a3c-82c6-77daff41852c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Shouldn't we also reset `kontStack` here? This would be particularly important when you reuse a machine that had failed with an exception.",
        "createdAt" : "2020-05-07T07:34:39Z",
        "updatedAt" : "2020-05-07T07:58:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8bf5227f-e998-4e3a-ba60-2caaa6990deb",
        "parentId" : "7c3743e9-83b5-4a3c-82c6-77daff41852c",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes.\r\nAnd in fact I do in my next PR.",
        "createdAt" : "2020-05-07T08:08:46Z",
        "updatedAt" : "2020-05-07T08:08:46Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "28809aa9-6da2-4a4d-8c23-a9556d61811d",
        "parentId" : "7c3743e9-83b5-4a3c-82c6-77daff41852c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If that's an actual problem then let's please fix it in this PR. I'm not keen to have potentially broken things in master if we can avoid it. You never know who runs a `daml-sdk-head` when.",
        "createdAt" : "2020-05-07T08:23:07Z",
        "updatedAt" : "2020-05-07T08:23:07Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e64d616c07b79eb94e74bcd9fdf26b01521b9b5c",
    "line" : 6,
    "diffHunk" : "@@ -133,6 +133,11 @@ object Speedy {\n       case _ =>\n     }\n \n+    def setExpressionToEvaluate(expr: SExpr): Unit = {\n+      ctrl = expr\n+      returnValue = null"
  },
  {
    "id" : "69493bd4-4e83-49aa-8125-5e1985740efc",
    "prId" : 5845,
    "comments" : [
      {
        "id" : "53b99787-3e82-4b51-b749-c9e57601b1e1",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Is this supposed to stay in?",
        "createdAt" : "2020-05-05T14:58:53Z",
        "updatedAt" : "2020-05-05T14:58:53Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "642c7084-6d09-43a9-ae89-c429181a4323",
        "parentId" : "53b99787-3e82-4b51-b749-c9e57601b1e1",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What's wrong with it? Is was there before already. And it's in a function used only in debugging tools anyway.",
        "createdAt" : "2020-05-05T15:01:19Z",
        "updatedAt" : "2020-05-05T15:01:19Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f297c8ceec75fb8ba36f061b243438360629b02",
    "line" : 155,
    "diffHunk" : "@@ -323,16 +275,17 @@ object Speedy {\n       if (!isFinal) {\n         crash(\"toSValue: machine not final\")\n       } else {\n-        ctrl match {\n-          case SEValue(v) => v\n-          case _ => crash(\"machine did not evaluate to a value\")\n-        }\n+        ctrl_value\n       }\n \n     def print(count: Int) = {\n       println(s\"Step: $count\")\n       println(\"Control:\")\n-      println(s\"  ${ctrl}\")\n+      if (ctrl_value != null) {\n+        println(s\"  ${ctrl_value}\")\n+      } else {\n+        println(s\"  ${ctrl_expr}\")\n+      }"
  },
  {
    "id" : "839289fd-1d1a-4bba-b67d-8dd9c09152f5",
    "prId" : 5835,
    "comments" : [
      {
        "id" : "68e6c84e-e71f-46bc-9448-47b1551b423f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n      // where we must continue iteration.\r\n```",
        "createdAt" : "2020-05-05T11:00:13Z",
        "updatedAt" : "2020-05-05T11:01:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f8763297-b8fa-45ed-be92-ddf34c430d6b",
        "parentId" : "68e6c84e-e71f-46bc-9448-47b1551b423f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "fixed in next PR",
        "createdAt" : "2020-05-05T11:42:53Z",
        "updatedAt" : "2020-05-05T11:42:54Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "397d9abb22845a5f5806e95f35ac07e0f01ce54c",
    "line" : 79,
    "diffHunk" : "@@ -117,8 +127,15 @@ object Speedy {\n       case _ =>\n     }\n \n-    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */\n+    /** Run a machine until we get a result: either a final-value or a request for data, with a callback */\n     def run(): SResult = {\n+      // Note: We have an outer and inner while loop.\n+      // An exception handler is wrapped around the inner-loop, but inside the outer-loop.\n+      // Most iterations are performed by the inner-loop, thus avoiding the work of to\n+      // wrap the exception handler on each of these steps. This is a performace gain.\n+      // However, we still need the outer loop because of the case:\n+      //    case _:SErrorDamlException if tryHandleException =>\n+      // where we must continue interation."
  },
  {
    "id" : "cc9a8ff8-9e03-4873-97d4-b695bf89bafe",
    "prId" : 5819,
    "comments" : [
      {
        "id" : "ae991c09-b6f4-468d-8935-b1258c0d0fb5",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We could wrapped this variable and the following ones in a new object (call something like statics) to limit the extension this endless list of parameter. \r\nYou will pay the small cost of indirection only when instrumentation is running. ",
        "createdAt" : "2020-05-05T12:12:03Z",
        "updatedAt" : "2020-05-11T08:59:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 49,
    "diffHunk" : "@@ -53,12 +57,56 @@ object Speedy {\n       var localContracts: Map[V.ContractId, (Ref.TypeConName, SValue)],\n       // global contract discriminators, that are discriminators from contract created in previous transactions\n       var globalDiscriminators: Set[crypto.Hash],\n+      /* Used when enableLightweightStepTracing is true */\n+      var steps: Int,"
  },
  {
    "id" : "aec7f74c-67a9-4439-b9ae-58195ffdddb1",
    "prId" : 5819,
    "comments" : [
      {
        "id" : "ffdda3c7-e8b2-4ad0-9fc4-196816759f06",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Are we sure we don't have to pay for this even when `enableInstrumentation` is false? Would it make sense to subclass `Speedy` and override these methods? Or do we have to pay for additional dynamic dispatch then?",
        "createdAt" : "2020-05-12T20:21:42Z",
        "updatedAt" : "2020-05-12T20:23:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 80,
    "diffHunk" : "@@ -59,19 +96,53 @@ object Speedy {\n       var localContracts: Map[V.ContractId, (Ref.TypeConName, SValue)],\n       // global contract discriminators, that are discriminators from contract created in previous transactions\n       var globalDiscriminators: Set[crypto.Hash],\n+      /* Used when enableLightweightStepTracing is true */\n+      var steps: Int,\n+      /* Used when enableInstrumentation is true */\n+      var track: Instrumentation,\n   ) {\n \n+    /* kont manipulation... */\n+\n+    @inline def kontDepth(): Int = kontStack.size()\n+\n     @inline def pushKont(k: Kont): Unit = {\n-      kontStack.add(k); ()\n+      kontStack.add(k)\n+      if (enableInstrumentation) {\n+        track.countPushesKont += 1\n+        if (kontDepth > track.maxDepthKont) track.maxDepthKont = kontDepth\n+      }\n     }\n \n     @inline def popKont(): Kont = {\n       kontStack.remove(kontStack.size - 1)\n     }\n \n+    /* env manipulation... */\n+\n+    @inline def envDepth(): Int = env.size()\n+\n     @inline def getEnv(i: Int): SValue = env.get(env.size - i)\n-    @inline def popEnv(count: Int): Unit =\n+\n+    @inline def pushEnv(v: SValue): Unit = {\n+      env.add(v)\n+      if (enableInstrumentation) {"
  },
  {
    "id" : "3d807e89-cccc-4387-8ea6-99d9439fa762",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "022d14bd-9d26-4d67-b4a0-3976c35de738",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why do we define a function that is invoked only once?",
        "createdAt" : "2020-05-04T06:56:08Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "36aad0e7-2d5f-4e6c-a70e-d0144e6559b8",
        "parentId" : "022d14bd-9d26-4d67-b4a0-3976c35de738",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "`again()` is invoked in two places",
        "createdAt" : "2020-05-04T09:45:22Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : null,
    "diffHunk" : "@@ -117,31 +117,33 @@ object Speedy {\n       case _ =>\n     }\n \n-    /** Perform a single step of the machine execution. */\n-    def step(): SResult =\n-      try {\n-        val ctrlToExecute = ctrl\n-        // Set control to crash as it must be reset after execution. This guards\n-        // against e.g. buggy builtin operations which do not set control and could\n-        // then not advance the machine state.\n-        ctrl = CtrlCrash(ctrlToExecute)\n-        ctrlToExecute.execute(this)\n-        SResultContinue\n-      } catch {\n-        case SpeedyHungry(res: SResult) =>\n-          res\n-\n-        case serr: SError =>\n-          serr match {\n-            case _: SErrorDamlException if tryHandleException =>\n-              SResultContinue\n-            case _ => SResultError(serr)\n+    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */\n+    def run(): SResult = {\n+      def again(): SResult = {"
  },
  {
    "id" : "5f5bd031-d1a1-441a-9b61-3b7d5a94cd4b",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "46706ff2-05a6-45d7-86f8-19bb335d7eaf",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why not return the old `SResultContinue` here? I don't think there's anything wrong with it.",
        "createdAt" : "2020-05-04T06:58:23Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f6d4dc2a-d99c-4c9f-9f91-76cef82ebf2a",
        "parentId" : "46706ff2-05a6-45d7-86f8-19bb335d7eaf",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Because `SResultContinue` had different semantics.\r\nReusing an old name with changed semantics can be confusing.\r\nAlso I wanted there to be a payload. See above :)",
        "createdAt" : "2020-05-04T09:47:31Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 36,
    "diffHunk" : "@@ -117,31 +117,33 @@ object Speedy {\n       case _ =>\n     }\n \n-    /** Perform a single step of the machine execution. */\n-    def step(): SResult =\n-      try {\n-        val ctrlToExecute = ctrl\n-        // Set control to crash as it must be reset after execution. This guards\n-        // against e.g. buggy builtin operations which do not set control and could\n-        // then not advance the machine state.\n-        ctrl = CtrlCrash(ctrlToExecute)\n-        ctrlToExecute.execute(this)\n-        SResultContinue\n-      } catch {\n-        case SpeedyHungry(res: SResult) =>\n-          res\n-\n-        case serr: SError =>\n-          serr match {\n-            case _: SErrorDamlException if tryHandleException =>\n-              SResultContinue\n-            case _ => SResultError(serr)\n+    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */\n+    def run(): SResult = {\n+      def again(): SResult = {\n+        // note: exception handler is outside while loop\n+        try {\n+          while (!isFinal) {\n+            ctrl.execute(this) // make a single step\n           }\n-\n-        case ex: RuntimeException =>\n-          SResultError(SErrorCrash(s\"exception: $ex\"))\n-\n+          ctrl match {"
  },
  {
    "id" : "14aec880-c8d0-4a5c-8e64-bb030ba069b3",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "0dadc240-8493-42b2-a9f6-798d2f6d3efb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Oh, I missed that call to `again`. We need to avoid recursion here. I don't want to blow through the stack at runtime.",
        "createdAt" : "2020-05-04T12:38:08Z",
        "updatedAt" : "2020-05-04T13:45:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "04a85d83-182c-4e38-bdc8-17c2e00a0dff",
        "parentId" : "0dadc240-8493-42b2-a9f6-798d2f6d3efb",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-05-04T13:47:08Z",
        "updatedAt" : "2020-05-04T13:47:09Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : null,
    "diffHunk" : "@@ -117,31 +117,33 @@ object Speedy {\n       case _ =>\n     }\n \n-    /** Perform a single step of the machine execution. */\n-    def step(): SResult =\n-      try {\n-        val ctrlToExecute = ctrl\n-        // Set control to crash as it must be reset after execution. This guards\n-        // against e.g. buggy builtin operations which do not set control and could\n-        // then not advance the machine state.\n-        ctrl = CtrlCrash(ctrlToExecute)\n-        ctrlToExecute.execute(this)\n-        SResultContinue\n-      } catch {\n-        case SpeedyHungry(res: SResult) =>\n-          res\n-\n-        case serr: SError =>\n-          serr match {\n-            case _: SErrorDamlException if tryHandleException =>\n-              SResultContinue\n-            case _ => SResultError(serr)\n+    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */\n+    def run(): SResult = {\n+      def again(): SResult = {\n+        // note: exception handler is outside while loop\n+        try {\n+          while (!isFinal) {\n+            ctrl.execute(this) // make a single step\n           }\n-\n-        case ex: RuntimeException =>\n-          SResultError(SErrorCrash(s\"exception: $ex\"))\n-\n+          ctrl match {\n+            case CtrlValue(value) => {\n+              SResultFinalValue(value) //stop\n+            }\n+            case _ =>\n+              throw SErrorCrash(s\"Unexpected ctrl on final machine $ctrl\")\n+          }\n+        } catch {\n+          case SpeedyHungry(res: SResult) => res //stop\n+          case serr: SError =>\n+            serr match {\n+              case _: SErrorDamlException if tryHandleException => again() // not tail recursive"
  },
  {
    "id" : "24fe9a03-5fe2-496e-a51e-d6c3a2dd5098",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "be4609f0-2f96-4743-856c-8d765b02a0c2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    /** Run a machine until we get a result: either a final-value or a request for data, with a callback */\r\n```",
        "createdAt" : "2020-05-04T15:33:20Z",
        "updatedAt" : "2020-05-04T15:36:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7080ab06-9469-4432-8953-0c08f072dcc2",
        "parentId" : "be4609f0-2f96-4743-856c-8d765b02a0c2",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done in next PR",
        "createdAt" : "2020-05-05T06:22:51Z",
        "updatedAt" : "2020-05-05T06:22:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 23,
    "diffHunk" : "@@ -117,31 +117,35 @@ object Speedy {\n       case _ =>\n     }\n \n-    /** Perform a single step of the machine execution. */\n-    def step(): SResult =\n-      try {\n-        val ctrlToExecute = ctrl\n-        // Set control to crash as it must be reset after execution. This guards\n-        // against e.g. buggy builtin operations which do not set control and could\n-        // then not advance the machine state.\n-        ctrl = CtrlCrash(ctrlToExecute)\n-        ctrlToExecute.execute(this)\n-        SResultContinue\n-      } catch {\n-        case SpeedyHungry(res: SResult) =>\n-          res\n-\n-        case serr: SError =>\n-          serr match {\n-            case _: SErrorDamlException if tryHandleException =>\n-              SResultContinue\n-            case _ => SResultError(serr)\n+    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */"
  },
  {
    "id" : "5d03cef9-4a64-4449-bd84-4205b2d792f3",
    "prId" : 5814,
    "comments" : [
      {
        "id" : "4ab325e7-24b6-4453-8119-45e107e66d95",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think it would be useful to explain why there are two loops.",
        "createdAt" : "2020-05-04T15:34:06Z",
        "updatedAt" : "2020-05-04T15:36:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "97523420-a07e-4041-825b-c0a0fc121fe1",
        "parentId" : "4ab325e7-24b6-4453-8119-45e107e66d95",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done in next PR",
        "createdAt" : "2020-05-05T06:22:58Z",
        "updatedAt" : "2020-05-05T06:22:58Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e68cc9359abaf460f448f09c616975c2935f54b",
    "line" : 27,
    "diffHunk" : "@@ -117,31 +117,35 @@ object Speedy {\n       case _ =>\n     }\n \n-    /** Perform a single step of the machine execution. */\n-    def step(): SResult =\n-      try {\n-        val ctrlToExecute = ctrl\n-        // Set control to crash as it must be reset after execution. This guards\n-        // against e.g. buggy builtin operations which do not set control and could\n-        // then not advance the machine state.\n-        ctrl = CtrlCrash(ctrlToExecute)\n-        ctrlToExecute.execute(this)\n-        SResultContinue\n-      } catch {\n-        case SpeedyHungry(res: SResult) =>\n-          res\n-\n-        case serr: SError =>\n-          serr match {\n-            case _: SErrorDamlException if tryHandleException =>\n-              SResultContinue\n-            case _ => SResultError(serr)\n+    /** Run a machine until we get a result: either a final-value of a request for data, with a callback */\n+    def run(): SResult = {\n+      var result: SResult = null\n+      while (result == null) {\n+        // note: exception handler is outside while loop"
  },
  {
    "id" : "8a658b78-2d16-4259-a4d8-b670893d54bc",
    "prId" : 5811,
    "comments" : [
      {
        "id" : "3c142ee8-73cb-4d05-892b-426912de58a2",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am fine revert the change I made in #5716 (that is moving this function from `Speedy` object to `CtrlImportValue`. But I am not fine to call this function  `translateValue`. In fact is doing some side effect with the `ContractId` that are not harmless. Please call it something like `importValue` to underline the fact the value should come from outside the transaction the machine is building.  \r\n\r\nIdeally we probably should mode the comment about SEImportValue here. \r\nI problably should have done a better jobs with this comment as well (but let tackle that in another PR).",
        "createdAt" : "2020-05-02T14:55:46Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : null,
    "diffHunk" : "@@ -257,6 +302,100 @@ object Speedy {\n       )\n     }\n \n+    def translateValue(value: V[V.ContractId]): Unit = {"
  },
  {
    "id" : "9eaea80c-7600-40bc-bf43-49a2ff0829a9",
    "prId" : 5811,
    "comments" : [
      {
        "id" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-05-02T15:01:18Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "be63c7c3-f8f8-4045-9725-23da75e4691d",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Alos you could add `@inline` anotation to this kind of small utility methods. does not hurt.",
        "createdAt" : "2020-05-02T15:02:29Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e2da7c12-327c-4e06-b536-b368865927a5",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "It might be interesting to make an experimental PR where we go crazy with @inline and see if we can actually measure any different it makes.",
        "createdAt" : "2020-05-02T16:17:33Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3428cb45-9e66-4097-8c5e-c96de572fc15",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I would prefer if we do refactorings like this one not in PRs where we actually try to change something. It makes reviewing so much harder because I need to find the real changes among a lot of noise. Same for renaming `Machine.kont` to `Machine.kontStack`.",
        "createdAt" : "2020-05-05T08:45:25Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1caa7695-9b3d-40a1-b7d0-4abbe2a1f368",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@nickchapman-da Let's please move these refactorings into a separate PR that goes to master first. This PR is controversial and I would like to focus on what's really going on.",
        "createdAt" : "2020-05-05T08:49:13Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ae4b980b-3474-4e45-af62-13e8e4892a50",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I don't understand why you think this PR is controversial. Can you explain your concerns?\r\n\r\nBy refactorings, I see:\r\n- rename machine member: `kont` -> `kontStack`\r\n- rename method: `kontPop` -> `popKont`\r\n- abstracted new method: `kont.add` -> `pushCont`\r\n- addition of 4 `@inline` annotations\r\n\r\nIs there anything else you consider a refactoring?\r\n\r\nI'll extract these into a pre-PR as you request.",
        "createdAt" : "2020-05-05T09:12:26Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "850761c6-5740-4d88-89ea-8402256b6a86",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yes, that's all the refactoring I've noticed.\r\n\r\nThe PR is controversial because we're changing the architecture of the interpreter by introducing recursion into the main loop. Even if it is bounded, it is still recursion. I would prefer if we find a way to get the gains without using recursion.",
        "createdAt" : "2020-05-05T09:31:46Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "819a09ba-4576-4f4d-bb62-4e17880e3cc6",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "But @remyhaemmerle-da argued that bounded stack usage is preferable to heap usage. (unless I misunderstood him)",
        "createdAt" : "2020-05-05T09:45:01Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1b96a403-51eb-48a7-93be-4fc1fdaa2314",
        "parentId" : "44b9de6d-8805-4d93-819a-5509efc581fc",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I generally agree with @remyhaemmerle-da's sentiment. However, the conclusion I draw is not \"use recursion and more stack\" but rather \"use less heap and try to avoid recursion\". ",
        "createdAt" : "2020-05-05T10:47:34Z",
        "updatedAt" : "2020-05-06T17:14:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6c2135df19e6e634bb3ec4f79f8e5a9f72018f96",
    "line" : null,
    "diffHunk" : "@@ -55,7 +60,14 @@ object Speedy {\n       var globalDiscriminators: Set[crypto.Hash],\n   ) {\n \n-    def kontPop(): Kont = kont.remove(kont.size - 1)\n+    def pushKont(k: Kont): Unit = {\n+      kontStack.add(k); ()"
  },
  {
    "id" : "6c6ea315-e67d-4bc7-b0bd-d33394c5b3ea",
    "prId" : 5716,
    "comments" : [
      {
        "id" : "9592f57a-5ea3-4d91-9b46-4cf7f274bffe",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Just for my understanding: setting `machine.ctrl = this` eventually causes the value being translated again from scratch after the package was loaded successfully, right?",
        "createdAt" : "2020-04-24T11:19:59Z",
        "updatedAt" : "2020-04-27T13:18:45Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a004ebd2-3eb9-4b23-b67f-3523e5ed3ec9",
        "parentId" : "9592f57a-5ea3-4d91-9b46-4cf7f274bffe",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Yes.",
        "createdAt" : "2020-04-24T11:22:24Z",
        "updatedAt" : "2020-04-27T13:18:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d675b124dbd7b7158af826ada71c76bb4d7c17a9",
    "line" : 121,
    "diffHunk" : "@@ -403,6 +402,105 @@ object Speedy {\n       CtrlValue(SPAP(prim, new util.ArrayList[SValue](), arity))\n   }\n \n+  // This translates a well-typed LF value (typically coming from\n+  // the ledger) to speedy value and set the control of with the result.\n+  // Raises an exception if missing a package.\n+  final case class CtrlTransalteValue(value: V[V.ContractId]) extends Ctrl {\n+    override def execute(machine: Machine): Unit = {\n+\n+      def go(value0: V[V.ContractId]): SValue =\n+        value0 match {\n+          case V.ValueList(vs) => SList(vs.map[SValue](go))\n+          case V.ValueContractId(coid) => SContractId(coid)\n+          case V.ValueInt64(x) => SInt64(x)\n+          case V.ValueNumeric(x) => SNumeric(x)\n+          case V.ValueText(t) => SText(t)\n+          case V.ValueTimestamp(t) => STimestamp(t)\n+          case V.ValueParty(p) => SParty(p)\n+          case V.ValueBool(b) => SBool(b)\n+          case V.ValueDate(x) => SDate(x)\n+          case V.ValueUnit => SUnit\n+          case V.ValueRecord(Some(id), fs) =>\n+            val fields = Name.Array.ofDim(fs.length)\n+            val values = new util.ArrayList[SValue](fields.length)\n+            fs.foreach {\n+              case (optk, v) =>\n+                optk match {\n+                  case None =>\n+                    crash(\"SValue.fromValue: record missing field name\")\n+                  case Some(k) =>\n+                    fields(values.size) = k\n+                    val _ = values.add(go(v))\n+                }\n+            }\n+            SRecord(id, fields, values)\n+          case V.ValueRecord(None, _) =>\n+            crash(\"SValue.fromValue: record missing identifier\")\n+          case V.ValueStruct(fs) =>\n+            val fields = Name.Array.ofDim(fs.length)\n+            val values = new util.ArrayList[SValue](fields.length)\n+            fs.foreach {\n+              case (k, v) =>\n+                fields(values.size) = k\n+                val _ = values.add(go(v))\n+            }\n+            SStruct(fields, values)\n+          case V.ValueVariant(None, _variant @ _, _value @ _) =>\n+            crash(\"SValue.fromValue: variant without identifier\")\n+          case V.ValueEnum(None, constructor @ _) =>\n+            crash(\"SValue.fromValue: enum without identifier\")\n+          case V.ValueOptional(mbV) =>\n+            SOptional(mbV.map(go))\n+          case V.ValueTextMap(map) =>\n+            STextMap(map.mapValue(go).toHashMap)\n+          case V.ValueGenMap(entries) =>\n+            SGenMap(\n+              entries.iterator.map { case (k, v) => go(k) -> go(v) }\n+            )\n+          case V.ValueVariant(Some(id), variant, arg) =>\n+            machine.compiledPackages.getPackage(id.packageId) match {\n+              case Some(pkg) =>\n+                pkg.lookupIdentifier(id.qualifiedName).fold(crash, identity) match {\n+                  case DDataType(_, _, data: DataVariant) =>\n+                    SVariant(id, variant, data.constructorRank(variant), go(arg))\n+                  case _ =>\n+                    crash(s\"definition for variant $id not found\")\n+                }\n+              case None =>\n+                throw SpeedyHungry(\n+                  SResultNeedPackage(\n+                    id.packageId,\n+                    pkg => {\n+                      machine.compiledPackages = pkg\n+                      machine.ctrl = this\n+                    }\n+                  ))\n+            }\n+          case V.ValueEnum(Some(id), constructor) =>\n+            machine.compiledPackages.getPackage(id.packageId) match {\n+              case Some(pkg) =>\n+                pkg.lookupIdentifier(id.qualifiedName).fold(crash, identity) match {\n+                  case DDataType(_, _, data: DataEnum) =>\n+                    SEnum(id, constructor, data.constructorRank(constructor))\n+                  case _ =>\n+                    crash(s\"definition for variant $id not found\")\n+                }\n+              case None =>\n+                throw SpeedyHungry(\n+                  SResultNeedPackage(\n+                    id.packageId,\n+                    pkg => {\n+                      machine.compiledPackages = pkg\n+                      machine.ctrl = this"
  },
  {
    "id" : "c9ee765c-04a1-4087-b888-139198dc3e11",
    "prId" : 5578,
    "comments" : [
      {
        "id" : "189416e7-817f-4a29-90f3-575ca0d72095",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Please remove this default value and rather enforce that we pass the right value in.",
        "createdAt" : "2020-04-16T10:19:27Z",
        "updatedAt" : "2020-04-16T11:23:02Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d3243c90-f61f-4236-b895-7a5a72ea5636",
        "parentId" : "189416e7-817f-4a29-90f3-575ca0d72095",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-04-16T11:23:25Z",
        "updatedAt" : "2020-04-16T11:23:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bfacb978186e3ef87e64a15f506cbe0d17e7dd58",
    "line" : null,
    "diffHunk" : "@@ -311,7 +312,8 @@ object Speedy {\n         checkSubmitterInMaintainers: Boolean,\n         compiledPackages: CompiledPackages,\n         scenario: Boolean,\n-        seedWithTime: Option[(crypto.Hash, Time.Timestamp)] = None,\n+        submissionTime: Time.Timestamp = Time.Timestamp.now(),"
  },
  {
    "id" : "d1055b56-60a1-41be-b26d-0f2ce425d06e",
    "prId" : 5519,
    "comments" : [
      {
        "id" : "6ec42912-c289-4648-9c01-cd7c0c0ed355",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Here we may not have any more `contextSeed`, so we take another seed.\r\nDoes not really matter as this is called only when interpretation scenario as long the resulting `newSeed` is fresh.",
        "createdAt" : "2020-04-09T13:09:01Z",
        "updatedAt" : "2020-04-09T13:09:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1d86c75aae72ab91dcf349a5b071c463f246f6",
    "line" : 5,
    "diffHunk" : "@@ -241,7 +241,7 @@ object Speedy {\n       commitLocation = None\n       val seedWithTime = for {\n         time <- ptx.submissionTime\n-        currentSeed <- ptx.context.contextSeed\n+        currentSeed <- ptx.context.nextChildrenSeed"
  },
  {
    "id" : "7b49fa75-18be-4027-b9f7-a95405ba0a50",
    "prId" : 5493,
    "comments" : [
      {
        "id" : "b77edf93-f47c-4563-8f6e-a150a2a08200",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Wonder what to call this. The context here is that we're applying `newArgs` to a partially applied primitive that already has `args` applied. `functionArgs` is a bit funny name here as both `args` and `newArgs` are also function arguments. Why not just use `args2` as it's `args` extended with `newArgs`. Or maybe call it `extendedArgs`?",
        "createdAt" : "2020-04-08T14:10:59Z",
        "updatedAt" : "2020-04-08T15:00:44Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b9fe99eb-735b-4f5b-9633-6a24d85bdf8a",
        "parentId" : "b77edf93-f47c-4563-8f6e-a150a2a08200",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'm happy to rename it to `extendedArgs`. 🙂 ",
        "createdAt" : "2020-04-08T14:32:45Z",
        "updatedAt" : "2020-04-08T15:00:44Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "930c6c92ed59962388bc205b255213a2385c9a4d",
    "line" : null,
    "diffHunk" : "@@ -448,8 +447,12 @@ object Speedy {\n     def execute(v: SValue, machine: Machine) = {\n       v match {\n         case SPAP(prim, args, arity) =>\n-          val args2 = args.clone.asInstanceOf[util.ArrayList[SValue]]\n-          val missing = arity - args2.size\n+          val missing = arity - args.size\n+          val newArgsLimit = Math.min(missing, newArgs.length)\n+\n+          // Keep some space free, because both `KFun` and `KPushTo` will add to the list.\n+          val functionArgs = new util.ArrayList[SValue](args.size + newArgsLimit)"
  },
  {
    "id" : "6bed7070-1d6b-419f-8aef-d6cb386f35b3",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "6cd956d6-e1f8-4c48-a4ef-beba8fb01c43",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Minor\r\n```suggestion\r\n        globalDiscriminators = globalCids collect {\r\n          case V.AbsoluteContractId.V1(discriminator, _) => discriminator\r\n        }\r\n```",
        "createdAt" : "2020-04-29T07:28:36Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "67106044-01fa-42b7-af0e-c3e3990ded99",
        "parentId" : "6cd956d6-e1f8-4c48-a4ef-beba8fb01c43",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2020-04-29T08:21:52Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : null,
    "diffHunk" : "@@ -258,6 +281,11 @@ object Speedy {\n         compiledPackages = compiledPackages,\n         validating = false,\n         dependsOnTime = false,\n+        localContracts = Map.empty,\n+        globalDiscriminators = globalCids.foldLeft(Set.empty[crypto.Hash]) {\n+          case (acc, V.AbsoluteContractId.V1(discriminator, _)) => acc + discriminator\n+          case (acc, _) => acc\n+        }"
  },
  {
    "id" : "061f17d3-b55b-472c-8e1b-fb73d4f574b0",
    "prId" : 5039,
    "comments" : [
      {
        "id" : "56c889ec-6a89-4043-845f-e884f9a6f3e7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It seems like it might be nice to differentiate between “this package is not in `compiledPackages`” which can happen legitimately and “the package is there but the definition is not” which is a fatal error afaict.",
        "createdAt" : "2020-03-17T10:18:34Z",
        "updatedAt" : "2020-03-17T15:17:37Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "17fb3cdd-18f5-45fc-93c6-8ace658b019e",
        "parentId" : "56c889ec-6a89-4043-845f-e884f9a6f3e7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "With my change, I think the two are now conceptually different. \r\n* `MissingDefinition` is an error  \r\n* `MissingPackage` is a Package request to the interpret (Note I change the name to `NeedPackage`\r\n",
        "createdAt" : "2020-03-17T11:59:19Z",
        "updatedAt" : "2020-03-17T15:17:37Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8a21ef433cd2bf46cb4d835e5d3e2db2e55ee9ad",
    "line" : null,
    "diffHunk" : "@@ -166,8 +166,8 @@ object Speedy {\n               CtrlExpr(body)\n             case None =>\n               throw SpeedyHungry(\n-                SResultMissingDefinition(\n-                  ref, { packages =>\n+                SResultMissingPackage("
  },
  {
    "id" : "2c91c96a-e19f-46c6-9e9c-c66b064c7d41",
    "prId" : 5039,
    "comments" : [
      {
        "id" : "fdab8455-b450-4c57-8b54-38866f8be538",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The name is different but you always seem to call `SResultNeedPackage` even if the package existed but was just missing the definition here.",
        "createdAt" : "2020-03-17T12:01:18Z",
        "updatedAt" : "2020-03-17T15:17:37Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7e0f0ef4-b117-4887-b0dd-3ff21d5c5336",
        "parentId" : "fdab8455-b450-4c57-8b54-38866f8be538",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right! I will refactor that. \r\nThanks a lot !!",
        "createdAt" : "2020-03-17T12:04:33Z",
        "updatedAt" : "2020-03-17T15:17:37Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "89f095f0-6ac1-4486-b16e-e9d127be07ad",
        "parentId" : "fdab8455-b450-4c57-8b54-38866f8be538",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks! Looks good to me now :+1:",
        "createdAt" : "2020-03-17T13:46:37Z",
        "updatedAt" : "2020-03-17T15:17:37Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8a21ef433cd2bf46cb4d835e5d3e2db2e55ee9ad",
    "line" : 19,
    "diffHunk" : "@@ -166,8 +166,8 @@ object Speedy {\n               CtrlExpr(body)\n             case None =>\n               throw SpeedyHungry(\n-                SResultMissingDefinition("
  },
  {
    "id" : "55ad4de9-0f40-431b-be87-e3c2f63e37fc",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "171d0901-8534-4ca6-a61f-68d0a90b5bd0",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Yourkit showed a lot of RichInt conversions, so I converted this iterator to `while {}` style",
        "createdAt" : "2020-01-06T03:15:03Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a21eec96-d05e-4179-89fa-ed896b58b228",
        "parentId" : "171d0901-8534-4ca6-a61f-68d0a90b5bd0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Same story here. I would like to have real benchmarks before changing critical piece of code like that. \r\ncc @dajmaki ",
        "createdAt" : "2020-01-06T08:41:10Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f2046af6-72d2-4426-a5a4-7f350998f568",
        "parentId" : "171d0901-8534-4ca6-a61f-68d0a90b5bd0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "If @dajmaki  does not mind, I am fine with this change,",
        "createdAt" : "2020-01-06T13:32:24Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5c84ecf7-9254-4f4d-80b7-cb77f6b240a5",
        "parentId" : "171d0901-8534-4ca6-a61f-68d0a90b5bd0",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "It would not hurt to run `com.digitalasset.daml.lf.engine.LargeTransactionTest` before and after the change. There is also `com.digitalasset.platform.sandbox.perf.LargeTransactionBench` which is supposed to be part of perf test harness.",
        "createdAt" : "2020-01-06T17:31:44Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d05ed60d-458d-417a-882c-a3f1def51faf",
        "parentId" : "171d0901-8534-4ca6-a61f-68d0a90b5bd0",
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Again this was found after running our load tests and profiling the code with YourKit.\r\nUsing ScalaMeter to show some numbers:\r\n1. Quick but ugly code:\r\n```      val length = arr\r\n      var i = 0\r\n      while (i < length) {\r\n        i += 1\r\n      }\r\n```\r\nresults : Parameters(size -> 15000000): 5.36E-4 ms\r\n\r\n2. Slow but pretty code:\r\n```      for (_ <- 0 until upper) {}```\r\nresults: Parameters(size -> 15000000): 3.671207 ms\r\n\r\nAgain, that would not be an issue if this part of code was not so frequently called.",
        "createdAt" : "2020-01-07T23:40:53Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "47b41430-f210-4cf4-87e8-b71577f0abce",
        "parentId" : "171d0901-8534-4ca6-a61f-68d0a90b5bd0",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "FYI `scala.collection` uses similar optimizations. :+1: for `var` and `while-loop`.",
        "createdAt" : "2020-01-08T00:01:46Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 15,
    "diffHunk" : "@@ -413,9 +413,11 @@ object Speedy {\n \n           // start evaluating the arguments\n           val newArgsLimit = Math.min(missing, newArgs.length)\n-          for (i <- 1 until newArgsLimit) {\n+          var i = 1\n+          while (i < newArgsLimit) {"
  },
  {
    "id" : "d79486fa-93b7-42cf-b348-3afb5f74e987",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "97884d1b-3cfe-49ec-b4a8-110b50307fdb",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Just delaying `result.toString` call to the point when it's needed. Yourkit showed big performance setback here",
        "createdAt" : "2020-01-06T03:17:32Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0253e522-35c4-4d11-8c43-771a080b0dff",
        "parentId" : "97884d1b-3cfe-49ec-b4a8-110b50307fdb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch. \r\n\r\nThough, we probably do not need the message at all since this exception is not an error and is never printed. We could also extends with `NoStackTrace` to avoid building the stack trace every time\r\n\r\nWhat do you think @dajmaki ?",
        "createdAt" : "2020-01-06T08:51:40Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a2160397-28b5-46e1-ba32-779eeb7b3990",
        "parentId" : "97884d1b-3cfe-49ec-b4a8-110b50307fdb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  final case class SpeedyHungry(result: SResult) extends RuntimeException with NoStackTrace\r\n```",
        "createdAt" : "2020-01-06T09:48:20Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "076868c6-5d28-4127-aa60-e32172cbac3e",
        "parentId" : "97884d1b-3cfe-49ec-b4a8-110b50307fdb",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "`NoStackTrace` sounds like a good idea.",
        "createdAt" : "2020-01-06T12:41:55Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -566,6 +568,9 @@ object Speedy {\n   }\n \n   /** Internal exception thrown when a continuation result needs to be returned. */\n-  final case class SpeedyHungry(result: SResult) extends RuntimeException(result.toString)\n+  final case class SpeedyHungry(result: SResult) extends RuntimeException {"
  },
  {
    "id" : "88d878c8-2c43-4939-8c97-d1e3bd6c3eea",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "750f0fd9-67c4-4414-8d27-8090054c11a0",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-06T08:44:00Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -566,6 +568,9 @@ object Speedy {\n   }\n \n   /** Internal exception thrown when a continuation result needs to be returned. */\n-  final case class SpeedyHungry(result: SResult) extends RuntimeException(result.toString)\n+  final case class SpeedyHungry(result: SResult) extends RuntimeException {\n+    lazy val message: String = result.toString"
  },
  {
    "id" : "2af87b99-bfbe-4d9c-8371-f5840cc24a82",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "2a92ee31-def7-4a14-b2f7-b10e8b1b48a2",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-06T12:46:46Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -566,6 +568,9 @@ object Speedy {\n   }\n \n   /** Internal exception thrown when a continuation result needs to be returned. */\n-  final case class SpeedyHungry(result: SResult) extends RuntimeException(result.toString)\n+  final case class SpeedyHungry(result: SResult) extends RuntimeException {\n+    lazy val message: String = result.toString\n+    override def getMessage: String = message"
  },
  {
    "id" : "c2fd35c3-616f-4867-b9a5-b75e9aecc95f",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "e8fc83ee-2cf5-4bb1-a26b-e2ac449f99e3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-01-06T12:46:56Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : null,
    "diffHunk" : "@@ -566,6 +568,9 @@ object Speedy {\n   }\n \n   /** Internal exception thrown when a continuation result needs to be returned. */\n-  final case class SpeedyHungry(result: SResult) extends RuntimeException(result.toString)\n+  final case class SpeedyHungry(result: SResult) extends RuntimeException {\n+    lazy val message: String = result.toString\n+    override def getMessage: String = message\n+  }"
  },
  {
    "id" : "9241cf3e-485e-4581-a3ec-af58e07a88a4",
    "prId" : 2725,
    "comments" : [
      {
        "id" : "0ec34b52-bf63-4972-ba2e-776d1f834a83",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does that flag make sense in this context?",
        "createdAt" : "2019-09-02T15:37:24Z",
        "updatedAt" : "2019-09-02T15:44:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be592f81-f789-4cb2-8fb8-a114c16ee1cd",
        "parentId" : "0ec34b52-bf63-4972-ba2e-776d1f834a83",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> The REPL for DAML-LF has to solve a very similar problem for evaluating `f x y ...`, which is possible, IIRC. Do we have duplicate code now?\r\n\r\nGood point, I’ve refactored the other initialization methods to use `fromSExpr`.",
        "createdAt" : "2019-09-02T15:44:48Z",
        "updatedAt" : "2019-09-02T15:44:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "af85c84e-3446-499a-9103-821a0050b479",
        "parentId" : "0ec34b52-bf63-4972-ba2e-776d1f834a83",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> Does that flag make sense in this context?\r\n\r\nIt does, there is nothing stopping you from having an update expression here. You are just not forced to use one.",
        "createdAt" : "2019-09-02T15:45:11Z",
        "updatedAt" : "2019-09-02T15:45:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ad8a9f07-641b-4795-9b3c-ab2f33922832",
        "parentId" : "0ec34b52-bf63-4972-ba2e-776d1f834a83",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Makes sense.",
        "createdAt" : "2019-09-02T15:56:45Z",
        "updatedAt" : "2019-09-02T15:56:45Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "07a21a68b562633676370a033086f79311d6d853",
    "line" : 40,
    "diffHunk" : "@@ -280,6 +280,15 @@ object Speedy {\n         ctrl = CtrlExpr(sexpr),\n       )\n     }\n+\n+    // Construct a machine from an SExpr. This is useful when you don’t have\n+    // an update expression and build’s behavior of applying the expression to\n+    // a token is not appropriate.\n+    def fromSExpr(\n+        sexpr: SExpr,\n+        checkSubmitterInMaintainers: Boolean,"
  },
  {
    "id" : "7b319082-c5ae-41f7-9738-2cb20969eff3",
    "prId" : 2560,
    "comments" : [
      {
        "id" : "38fc5f30-915e-4aac-8a94-ad73db06098e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Some comments on the first two cases would be nice.",
        "createdAt" : "2019-08-15T14:34:44Z",
        "updatedAt" : "2019-08-15T15:43:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b185a362-b736-4cab-8d86-e6a0a974bf92",
        "parentId" : "38fc5f30-915e-4aac-8a94-ad73db06098e",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Done. I'm in the middle of simplifying this a bit. The explanation will (hopefully) get a bit simpler as a result of this.",
        "createdAt" : "2019-08-15T14:59:49Z",
        "updatedAt" : "2019-08-15T15:43:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "61a4b11ba7dda41f0970ff778251c4f0ccde8b68",
    "line" : 15,
    "diffHunk" : "@@ -65,7 +65,27 @@ object Speedy {\n     def popEnv(count: Int): Unit =\n       env.subList(env.size - count, env.size).clear\n \n-    /* Compute a stack trace from the locations in the continuation stack. */\n+    /** Push a single location to the continuation stack for the sake of\n+        maintaining a stack trace. */\n+    def pushLocation(loc: Location): Unit = {\n+      lastLocation = Some(loc)\n+      val last_index = kont.size() - 1\n+      val last_kont = if (last_index >= 0) Some(kont.get(last_index)) else None\n+      last_kont match {\n+        case Some(KArg(Array(SEValue(SToken)))) => kont.add(last_index, KLocation(loc))"
  },
  {
    "id" : "4b6c97cb-81ff-439b-a882-ba9c340ab8c8",
    "prId" : 2497,
    "comments" : [
      {
        "id" : "a3971012-8246-4130-a66d-b910b1c1b4c1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Afaict, the only thing you are doing with this is to call `asScala` on it so I would suggest to either work with whatever the Scala type is called directly or remove the conversion.",
        "createdAt" : "2019-08-12T17:30:27Z",
        "updatedAt" : "2019-08-12T18:15:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e6283d4-2ac8-4e28-a6b3-a9113a4522c1",
        "parentId" : "a3971012-8246-4130-a66d-b910b1c1b4c1",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@remyhaemmerle-da Can you please advise the correct Scala type to use here.",
        "createdAt" : "2019-08-12T17:51:52Z",
        "updatedAt" : "2019-08-12T18:15:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2d88e137-a404-49a0-aa7b-f783b0dc194c",
        "parentId" : "a3971012-8246-4130-a66d-b910b1c1b4c1",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`ImmArray` or `ImmArraySeq` from the `//daml-lf/data` library; the latter if you want Scala collections operations directly, former otherwise.",
        "createdAt" : "2019-08-12T18:00:13Z",
        "updatedAt" : "2019-08-12T18:15:39Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6e2141c1-df5a-43b9-a576-7bfaf1b5ebd2",
        "parentId" : "a3971012-8246-4130-a66d-b910b1c1b4c1",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I went for `ImmArray`. I don't know if that's the right choice.",
        "createdAt" : "2019-08-12T18:16:28Z",
        "updatedAt" : "2019-08-12T18:16:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "59b773fab66f6239cba9430dc5f973ac673d51dc",
    "line" : null,
    "diffHunk" : "@@ -64,6 +64,17 @@ object Speedy {\n     def popEnv(count: Int): Unit =\n       env.subList(env.size - count, env.size).clear\n \n+    def stackTrace(): ArrayList[Location] = {"
  },
  {
    "id" : "71592c22-7022-41d7-a53e-d669c178e1b2",
    "prId" : 2497,
    "comments" : [
      {
        "id" : "d5f0d826-e023-429f-85c4-a5455c1ba233",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "A comment on this method explaining that it gets the callstack from the continuation stack would be nice.",
        "createdAt" : "2019-08-12T17:30:55Z",
        "updatedAt" : "2019-08-12T18:15:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "59b773fab66f6239cba9430dc5f973ac673d51dc",
    "line" : null,
    "diffHunk" : "@@ -64,6 +64,17 @@ object Speedy {\n     def popEnv(count: Int): Unit =\n       env.subList(env.size - count, env.size).clear\n \n+    def stackTrace(): ArrayList[Location] = {"
  },
  {
    "id" : "6cea36ee-e2e9-4dda-bc16-fa251b5e92f7",
    "prId" : 2497,
    "comments" : [
      {
        "id" : "8d734098-94fe-4632-895e-3781c43b9829",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    def stackTrace(): ImmArray[Location] = ImmArray(s.asScala).flatMap{\r\n      case KLocation(location) => ImmArray(location)\r\n      case _ => ImmArray.empty\r\n    }\r\n```",
        "createdAt" : "2019-08-13T09:11:34Z",
        "updatedAt" : "2019-08-13T09:14:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "59b773fab66f6239cba9430dc5f973ac673d51dc",
    "line" : 13,
    "diffHunk" : "@@ -64,6 +65,18 @@ object Speedy {\n     def popEnv(count: Int): Unit =\n       env.subList(env.size - count, env.size).clear\n \n+    /* Compute a stack trace from the locations in the continuation stack. */\n+    def stackTrace(): ImmArray[Location] = {"
  },
  {
    "id" : "b9d0e177-5296-42d9-994f-252c77af62de",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "f1a3f2dc-6a57-4e2c-941c-0bcda302edd0",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "I think the default `Set.empty` is very dangerous -- I'd remove it unless we have very good reasons not to.",
        "createdAt" : "2019-06-07T15:33:03Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0c1bfa63-408d-4358-ab80-77babf85865e",
        "parentId" : "f1a3f2dc-6a57-4e2c-941c-0bcda302edd0",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Why do you think it's dangerous? The committers is the set of parties that authorize the transaction. Nobody authorizing it is the least dangerous option.\r\n\r\nIf you do still want me  to change it: the default is used in a few places, such as `ScenarioRunnerHelper`, and `fromExpr`. Can you please point me to someone who understands how these things are used?",
        "createdAt" : "2019-06-11T16:57:42Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : 26,
    "diffHunk" : "@@ -173,17 +173,18 @@ object Speedy {\n   }\n \n   object Machine {\n-    private def initial(compiledPackages: CompiledPackages) = Machine(\n-      ctrl = null,\n-      env = emptyEnv,\n-      kont = new ArrayList[Kont](128),\n-      lastLocation = None,\n-      ptx = PartialTransaction.initial,\n-      committer = None,\n-      commitLocation = None,\n-      traceLog = TraceLog(100),\n-      compiledPackages = compiledPackages\n-    )\n+    private def initial(compiledPackages: CompiledPackages, committers: Set[Party] = Set.empty) ="
  },
  {
    "id" : "47f24ef6-e8d4-4dac-a870-14903d5843e0",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "d5422fc4-5120-4a37-a2de-10396fae65a4",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "I think the default Set.empty is very dangerous -- I'd remove it unless we have very good reasons not to.",
        "createdAt" : "2019-06-07T15:33:23Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a513c57e-72ef-47e9-badb-c8880e064da9",
        "parentId" : "d5422fc4-5120-4a37-a2de-10396fae65a4",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "The default is currently only used in `Engine.validatePartial`, which does not seemed to be used in the remainder of the `daml` repository. Can we get rid of `validatePartial`? Are the daml-on-x guys depending on it?",
        "createdAt" : "2019-06-11T16:59:01Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : 47,
    "diffHunk" : "@@ -192,8 +193,11 @@ object Speedy {\n       })\n     }\n \n-    def build(sexpr: SExpr, compiledPackages: CompiledPackages): Machine =\n-      initial(compiledPackages).copy(\n+    def build("
  },
  {
    "id" : "bb2b4f76-da69-4c56-b539-748ed8d7adfe",
    "prId" : 1397,
    "comments" : [
      {
        "id" : "76b2c10f-7473-4439-868a-aaa90b27924d",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "nice",
        "createdAt" : "2019-05-27T11:35:43Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5ce95b727edd6150f719d1c4c22df4bde71e6ef6",
    "line" : 21,
    "diffHunk" : "@@ -421,7 +430,8 @@ object Speedy {\n               case _ => false\n             }\n           }\n-        case _ =>\n+        case _: SContractId | _: SDate | _: SDecimal | _: SInt64 | _: SParty | _: SText |"
  }
]