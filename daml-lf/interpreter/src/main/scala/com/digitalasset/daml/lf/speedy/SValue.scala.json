[
  {
    "id" : "c411bcaf-770b-4d03-b1b2-84bac0c44abe",
    "prId" : 7334,
    "comments" : [
      {
        "id" : "0f86f7ff-64aa-4c96-9c8b-5d42e10f531c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is that even syntactically valid?\r\n```suggestion\r\n      SGenMap(isTextMap, entries.iterator)\r\n```",
        "createdAt" : "2020-09-08T14:17:37Z",
        "updatedAt" : "2020-09-08T18:04:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9287729a15d23b6de2b6a2cfb39e2d599b87085",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +179,183 @@\n    def apply(isTextMap: Boolean, entries: (SValue, SValue)*): SGenMap =\n      SGenMap(isTextMap: Boolean, entries.iterator)\n  }\n"
  },
  {
    "id" : "04216eed-8f6c-4d05-bf27-d45b17cbb96d",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "02703f72-847a-4b63-a66a-50c1a6e01337",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Worth documenting that `values` must be orderd by name just like `fieldNames`?",
        "createdAt" : "2020-09-04T08:29:09Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6c1031a0-1b6c-4772-91e0-902082d5475b",
        "parentId" : "02703f72-847a-4b63-a66a-50c1a6e01337",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-09-04T09:07:27Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +141,145 @@  @SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))\n  // values must be ordered according fieldNames\n  final case class SStruct(fieldNames: Struct[Unit], values: util.ArrayList[SValue]) extends SValue\n\n  final case class SVariant("
  },
  {
    "id" : "4241659c-8768-4c14-999a-e2bd07e17d12",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "45b338e6-a639-49ae-98fa-39806c1bd551",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why the assertion here instead of changing `entry` to not care about the ordering like you did in other places?",
        "createdAt" : "2020-09-04T08:31:53Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "acf824f7-9a84-4cd0-9bf5-a83f1434d782",
        "parentId" : "45b338e6-a639-49ae-98fa-39806c1bd551",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I wanted to avoid dynamic check because this is used by the built-in `TEXTMAP_TO_LIST`.\r\n",
        "createdAt" : "2020-09-04T09:13:48Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3aef43d1-5633-4136-93a0-256e4695d909",
        "parentId" : "45b338e6-a639-49ae-98fa-39806c1bd551",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wasn’t thinking of a check. Currently you have\r\n```\r\n  private def entry(key: SValue, value: SValue) = {\r\n    val args = new util.ArrayList[SValue](2)\r\n    args.add(key)\r\n    args.add(value)\r\n    SStruct(entryFields, args)\r\n  }\r\n```\r\nIf you change that to\r\n```\r\n  private def entry(key: SValue, value: SValue) = {\r\n    val args = new util.ArrayList[SValue](2)\r\n    args.set(indexOfKeyField, key)\r\n    args.set(indexOfValueField, value)\r\n    SStruct(entryFields, args)\r\n  }\r\n```\r\nHowever, I just realized that this will of course throw an out of range and I couldn’t find a method to initialize an ArrayList with `size` 2 instead of `capacity` 2 so ignore my comment.",
        "createdAt" : "2020-09-04T09:21:44Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +235,239 @@\n  // we verify the fields are ordered as the `entry` method expects it.\n  assert(entryFields.indexOf(keyFieldName) == 0)\n  assert(entryFields.indexOf(valueFieldName) == 1)\n"
  },
  {
    "id" : "0ea26b5a-3d3d-4ac8-838c-dad4b0cd15fc",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "64a0673c-9a3c-428e-93a7-7efaf646dd64",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why don't we use `Struct[SValue]` as the only payload for `SStruct`?",
        "createdAt" : "2020-09-04T11:10:06Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1aa8fd7-e71e-4c77-9ccd-2179d174af10",
        "parentId" : "64a0673c-9a3c-428e-93a7-7efaf646dd64",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I think this would increase the cost of `SBStructUpd`. By separating names from values we do not need to copy the names when updating the `SStruct`.",
        "createdAt" : "2020-09-04T14:54:52Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +141,145 @@  @SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))\n  // values must be ordered according fieldNames\n  final case class SStruct(fieldNames: Struct[Unit], values: util.ArrayList[SValue]) extends SValue\n\n  final case class SVariant("
  },
  {
    "id" : "258690e4-83eb-409e-a18d-351c1a64b7a2",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "57148847-567f-4250-9aea-ae5950ed8c32",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  final case class PClosure(label: AnyRef, expr: SExpr, captured: Array[SValue])\r\n```",
        "createdAt" : "2020-05-19T18:02:21Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +132,136 @@    * [[AnyRef]] for the label.\n    */\n  final case class PClosure(label: AnyRef, expr: SExpr, fvs: Array[SValue])\n      extends Prim\n      with SomeArrayEquals {"
  },
  {
    "id" : "1a3bc586-7c49-42b4-90b2-61378ba4c62b",
    "prId" : 4893,
    "comments" : [
      {
        "id" : "957f3442-9980-4b15-8b78-585fe12a5c6e",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Similarly use the `iterator map to` pattern.",
        "createdAt" : "2020-03-12T22:03:18Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "008d6ca0-ca1b-497b-a9d4-629a88f36c21",
        "parentId" : "957f3442-9980-4b15-8b78-585fe12a5c6e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-13T08:47:37Z",
        "updatedAt" : "2020-03-13T08:47:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +291,295 @@        SGenMap(\n          entries.iterator.map { case (k, v) => fromValue(k) -> fromValue(v) }\n        )\n\n      case V.ValueVariant(Some(id), variant, value) =>"
  },
  {
    "id" : "d6404b72-36fe-4e07-a94d-ec8d71f0a6f9",
    "prId" : 4893,
    "comments" : [
      {
        "id" : "6b05421d-06eb-4012-8ca8-4c0b67402b4d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Somewhere in here\r\n\r\n```scala\r\n  implicit def ` ordering`: Ordering[SValue] = svalue.Ordering\r\n```\r\n\r\nThen you should be able to remove all the explicit references.",
        "createdAt" : "2020-03-12T22:05:08Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9ac16db2-0036-4624-ae5a-21b1253f46dc",
        "parentId" : "6b05421d-06eb-4012-8ca8-4c0b67402b4d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-13T08:47:31Z",
        "updatedAt" : "2020-03-13T08:47:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +153,157 @@\n  final case class SGenMap(genMap: TreeMap[SValue, SValue]) extends SValue\n\n  object SGenMap {\n    implicit def `SGenMap Ordering`: Ordering[SValue] = svalue.Ordering"
  },
  {
    "id" : "61df5a94-4d77-4c92-a63c-a8102d527c92",
    "prId" : 3453,
    "comments" : [
      {
        "id" : "ba756d68-8ca1-4dd6-b2c9-a3baa0ef8cf7",
        "parentId" : null,
        "author" : null,
        "body" : "Just to check, this will throw an exception if the key is not valid, right? e.g. if it contains a function.",
        "createdAt" : "2019-11-14T12:35:51Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d86128ae-3c35-429c-9d9b-e9b3c00c4c42",
        "parentId" : "ba756d68-8ca1-4dd6-b2c9-a3baa0ef8cf7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I made that more explicit",
        "createdAt" : "2019-11-15T08:14:46Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "79777f3e5242b968e6ddaeabbd367f715b2cb5fa",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +153,157 @@\n  object SGenMap {\n    case class Key(v: SValue) {\n      override val hashCode: Int = svalue.Hasher.hash(v)\n      override def equals(obj: Any): Boolean = obj match {"
  },
  {
    "id" : "1273e739-3f5b-4b45-bb91-eed9c056a9be",
    "prId" : 2653,
    "comments" : [
      {
        "id" : "89dc45fe-5e74-4828-8130-ee5a33afcdac",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "add a comment explaining what this is for and how and where it is used.",
        "createdAt" : "2019-08-26T12:20:23Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "648e4033-8be1-49ba-b94f-94b76a6b70ac",
        "parentId" : "89dc45fe-5e74-4828-8130-ee5a33afcdac",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-08-26T15:10:26Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0fa6077c71edb857ab4a0a3851d841ea21acc8ef",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +186,190 @@  // Numeric builtin's arguments/output. Should never be translated\n  // back to DAML-LF expressions / values.\n  final case class STNat(n: Int) extends SValue\n\n  // NOTE(JM): We are redefining PrimLit here so it can be unified"
  }
]