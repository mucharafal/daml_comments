[
  {
    "id" : "9bb7cd20-12cd-4f6e-bdd2-a28d9f5ca58c",
    "prId" : 7334,
    "comments" : [
      {
        "id" : "d3eaf62e-fce1-4e38-863a-ae069eae1cc8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is that even syntactically valid?\r\n```suggestion\r\n      SGenMap(isTextMap, entries.iterator)\r\n```",
        "createdAt" : "2020-09-08T14:17:37Z",
        "updatedAt" : "2020-09-08T18:04:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b9287729a15d23b6de2b6a2cfb39e2d599b87085",
    "line" : 72,
    "diffHunk" : "@@ -169,15 +172,13 @@ object SValue {\n       ()\n     }\n \n-    val Empty = SGenMap(TreeMap.empty)\n-\n-    def apply(xs: Iterator[(SValue, SValue)]): SGenMap = {\n+    def apply(isTextMap: Boolean, entries: Iterator[(SValue, SValue)]): SGenMap = {\n       type O[_] = TreeMap[SValue, SValue]\n-      SGenMap(xs.map { case p @ (k, _) => comparable(k); p }.to[O])\n+      SGenMap(isTextMap, entries.map { case p @ (k, _) => comparable(k); p }.to[O])\n     }\n \n-    def apply(xs: (SValue, SValue)*): SGenMap =\n-      SGenMap(xs.iterator)\n+    def apply(isTextMap: Boolean, entries: (SValue, SValue)*): SGenMap =\n+      SGenMap(isTextMap: Boolean, entries.iterator)"
  },
  {
    "id" : "983b868a-b22c-4231-bb96-2bad2b6e10f8",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "e3cbfa82-0af5-481c-9599-e02bba8612fb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Worth documenting that `values` must be orderd by name just like `fieldNames`?",
        "createdAt" : "2020-09-04T08:29:09Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8cee58be-b739-4089-8fb8-53030e4ddbce",
        "parentId" : "e3cbfa82-0af5-481c-9599-e02bba8612fb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-09-04T09:07:27Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 28,
    "diffHunk" : "@@ -143,7 +139,7 @@ object SValue {\n       extends SValue\n \n   @SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))\n-  final case class SStruct(fields: ImmArray[Name], values: util.ArrayList[SValue]) extends SValue\n+  final case class SStruct(fieldNames: Struct[Unit], values: util.ArrayList[SValue]) extends SValue"
  },
  {
    "id" : "f190c65e-8a15-4cf2-8a24-5f78dc273ec2",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "9ab5584e-47a9-458f-b1bd-ea26a6ec2716",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why the assertion here instead of changing `entry` to not care about the ordering like you did in other places?",
        "createdAt" : "2020-09-04T08:31:53Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "469708f8-e441-456b-aba6-1822ca4b7ea8",
        "parentId" : "9ab5584e-47a9-458f-b1bd-ea26a6ec2716",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I wanted to avoid dynamic check because this is used by the built-in `TEXTMAP_TO_LIST`.\r\n",
        "createdAt" : "2020-09-04T09:13:48Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ea9bef11-5323-4297-8cc6-34e3795ebbaa",
        "parentId" : "9ab5584e-47a9-458f-b1bd-ea26a6ec2716",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wasn’t thinking of a check. Currently you have\r\n```\r\n  private def entry(key: SValue, value: SValue) = {\r\n    val args = new util.ArrayList[SValue](2)\r\n    args.add(key)\r\n    args.add(value)\r\n    SStruct(entryFields, args)\r\n  }\r\n```\r\nIf you change that to\r\n```\r\n  private def entry(key: SValue, value: SValue) = {\r\n    val args = new util.ArrayList[SValue](2)\r\n    args.set(indexOfKeyField, key)\r\n    args.set(indexOfValueField, value)\r\n    SStruct(entryFields, args)\r\n  }\r\n```\r\nHowever, I just realized that this will of course throw an out of range and I couldn’t find a method to initialize an ArrayList with `size` 2 instead of `capacity` 2 so ignore my comment.",
        "createdAt" : "2020-09-04T09:21:44Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 40,
    "diffHunk" : "@@ -234,7 +230,11 @@ object SValue {\n     def bool(b: Boolean) = if (b) True else False\n   }\n \n-  private val entryFields = ImmArray(Ast.keyFieldName, Ast.valueFieldName)\n+  private val entryFields = Struct.assertFromSeq(List(keyFieldName -> (()), valueFieldName -> (())))\n+\n+  // we verify the fields are ordered as the `entry` method expects it.\n+  assert(entryFields.indexOf(keyFieldName) == 0)"
  },
  {
    "id" : "5219aadf-e75c-49ef-8d0d-9b5cef6f8959",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "d65b0c03-3086-42a4-b5c4-c4ca33dd26c5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "With my limited Scala knowledged, I would assume the code below avoids the adaptor for `map` on the iterator. Does it?\r\n```suggestion\r\n        val valuesIterator = svalues.iterator().asScala\r\n        V.ValueStruct(fields.mapValues(_ => valuesIterator.next().toValue))\r\n```",
        "createdAt" : "2020-09-04T11:07:32Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "31967edb-bbf2-491d-a9fc-bb1edb6b45e6",
        "parentId" : "d65b0c03-3086-42a4-b5c4-c4ca33dd26c5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. \r\nWe could also drop the `asScala` adaptor, as we just call `next()` on it. \r\n",
        "createdAt" : "2020-09-04T14:51:08Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : null,
    "diffHunk" : "@@ -34,11 +33,8 @@ sealed trait SValue {\n       case SUnit => V.ValueUnit\n       case SDate(x) => V.ValueDate(x)\n       case SStruct(fields, svalues) =>\n-        V.ValueStruct(\n-          Struct.assertFromSeq(\n-            (fields.iterator zip svalues.iterator().asScala.map(_.toValue)).toSeq\n-          ),\n-        )\n+        val valuesIterator = svalues.iterator().asScala.map(_.toValue)\n+        V.ValueStruct(fields.mapValues(_ => valuesIterator.next()))"
  },
  {
    "id" : "aaa4ed11-3bab-40a7-852c-aed62c26f9a1",
    "prId" : 7319,
    "comments" : [
      {
        "id" : "aa48db34-c35f-417e-b754-0f8fcbc0cf27",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why don't we use `Struct[SValue]` as the only payload for `SStruct`?",
        "createdAt" : "2020-09-04T11:10:06Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2cd46114-2931-45c3-a1fb-36cd08904d06",
        "parentId" : "aa48db34-c35f-417e-b754-0f8fcbc0cf27",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I think this would increase the cost of `SBStructUpd`. By separating names from values we do not need to copy the names when updating the `SStruct`.",
        "createdAt" : "2020-09-04T14:54:52Z",
        "updatedAt" : "2020-09-04T16:34:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "abf995d1e965f73aac6422c0d37ee6362850f920",
    "line" : 28,
    "diffHunk" : "@@ -143,7 +139,8 @@ object SValue {\n       extends SValue\n \n   @SuppressWarnings(Array(\"org.wartremover.warts.ArrayEquals\"))\n-  final case class SStruct(fields: ImmArray[Name], values: util.ArrayList[SValue]) extends SValue\n+  // values must be ordered according fieldNames\n+  final case class SStruct(fieldNames: Struct[Unit], values: util.ArrayList[SValue]) extends SValue"
  },
  {
    "id" : "d110d05e-8dfc-43a3-a474-f9764fd66baa",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "6576a9ca-e65c-43b9-bb41-37fda6c7bb40",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not a big fan of unrelated changes like this one, particularly not in PRs that are already quite big.",
        "createdAt" : "2020-06-26T11:18:06Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd513d57-f1ee-4f56-a592-527de51d4c48",
        "parentId" : "6576a9ca-e65c-43b9-bb41-37fda6c7bb40",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I reverted the code back",
        "createdAt" : "2020-06-30T15:02:01Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -64,16 +64,8 @@ sealed trait SValue {\n         V.ValueGenMap(ImmArray(values.map { case (k, v) => k.toValue -> v.toValue }))\n       case SContractId(coid) =>\n         V.ValueContractId(coid)\n-      case SAny(_, _) =>\n-        throw SErrorCrash(\"SValue.toValue: unexpected SAny\")\n-      case STypeRep(_) =>\n-        throw SErrorCrash(\"SValue.toValue: unexpected STypeRep\")\n-      case STNat(_) =>\n-        throw SErrorCrash(\"SValue.toValue: unexpected STNat\")\n-      case _: SPAP =>\n-        throw SErrorCrash(\"SValue.toValue: unexpected SPAP\")\n-      case SToken =>\n-        throw SErrorCrash(\"SValue.toValue: unexpected SToken\")\n+      case _: SAny | _: STypeRep | _: STNat | _: SPAP | SToken =>\n+        throw SErrorCrash(s\"SValue.toValue: unexpected $this\")"
  },
  {
    "id" : "65686057-62b2-4908-8d5c-2a4840f432f4",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "d732ef9e-5bff-4232-9bb8-5484fe5cf1ed",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  final case class PClosure(label: AnyRef, expr: SExpr, captured: Array[SValue])\r\n```",
        "createdAt" : "2020-05-19T18:02:21Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 5,
    "diffHunk" : "@@ -131,10 +131,10 @@ object SValue {\n     * See [[com.daml.lf.speedy.Profile]] for an explanation why we use\n     * [[AnyRef]] for the label.\n     */\n-  final case class PClosure(label: AnyRef, expr: SExpr, closure: Array[SValue])\n+  final case class PClosure(label: AnyRef, expr: SExpr, fvs: Array[SValue])"
  },
  {
    "id" : "0dfc9cbd-ccd1-49c3-a4ac-c1d2eab4e5be",
    "prId" : 5028,
    "comments" : [
      {
        "id" : "444d97c5-1972-47ab-8275-015a45972090",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "What does the `-> v` do?",
        "createdAt" : "2020-03-16T17:17:09Z",
        "updatedAt" : "2020-03-16T19:33:48Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1bae9190-9615-4021-9673-be94c875c5aa",
        "parentId" : "444d97c5-1972-47ab-8275-015a45972090",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Nothing. Good catch. Thanks ",
        "createdAt" : "2020-03-16T17:23:34Z",
        "updatedAt" : "2020-03-16T19:33:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2b73fdd01989f3a790af7e2839f009f40984a917",
    "line" : null,
    "diffHunk" : "@@ -167,6 +167,7 @@ object SValue {\n \n     def apply(xs: Iterator[(SValue, SValue)]): SGenMap = {\n       type O[_] = TreeMap[SValue, SValue]\n+      xs.foreach { case (k, v) => comparable(k) -> v }"
  },
  {
    "id" : "4bff1f3a-f6a5-4084-adc2-5dba504ce1ce",
    "prId" : 5028,
    "comments" : [
      {
        "id" : "056b8ef2-df11-4da6-b142-8729ce307a31",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Maybe we can avoid iterating the collection twice by side-effectful mapping with `breakOut`?",
        "createdAt" : "2020-03-16T17:38:38Z",
        "updatedAt" : "2020-03-16T19:33:48Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "151d1f74-f2e3-4250-b3ad-14729a1ed8bc",
        "parentId" : "056b8ef2-df11-4da6-b142-8729ce307a31",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "In the interests of forward-compatibility:\r\n\r\n```suggestion\r\n      xs.map { case p @ (k, _) => comparable(k); p }.to[O]\r\n```",
        "createdAt" : "2020-03-16T17:46:14Z",
        "updatedAt" : "2020-03-16T19:33:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2b73fdd01989f3a790af7e2839f009f40984a917",
    "line" : null,
    "diffHunk" : "@@ -167,6 +167,7 @@ object SValue {\n \n     def apply(xs: Iterator[(SValue, SValue)]): SGenMap = {\n       type O[_] = TreeMap[SValue, SValue]\n+      xs.foreach { case (k, _) => comparable(k) }"
  },
  {
    "id" : "b688e0a0-955a-4461-be4b-420920b29574",
    "prId" : 5028,
    "comments" : [
      {
        "id" : "81efe96e-1f64-4dbc-9126-49018f2ddb14",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Sorry, I should have been clearer; you can't use the `xs` variable twice like this.\r\n\r\n```suggestion\r\n      SGenMap(xs.map { case p @ (k, _) => comparable(k); p }.to[O])\r\n```",
        "createdAt" : "2020-03-16T19:07:58Z",
        "updatedAt" : "2020-03-16T19:33:48Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2e7f609-e8a4-45cc-aaa5-e933f9f09515",
        "parentId" : "81efe96e-1f64-4dbc-9126-49018f2ddb14",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You have been cleared. I was just planning to fix it latter. Thanks a lot anyway.",
        "createdAt" : "2020-03-16T19:34:50Z",
        "updatedAt" : "2020-03-16T19:34:51Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2b73fdd01989f3a790af7e2839f009f40984a917",
    "line" : null,
    "diffHunk" : "@@ -167,6 +167,7 @@ object SValue {\n \n     def apply(xs: Iterator[(SValue, SValue)]): SGenMap = {\n       type O[_] = TreeMap[SValue, SValue]\n+      xs.map { case p @ (k, _) => comparable(k); p }.to[O]\n       SGenMap(xs.to[O])"
  },
  {
    "id" : "f42bad5a-976d-42f9-b03d-2f3fe2d7bc42",
    "prId" : 4893,
    "comments" : [
      {
        "id" : "ae50211b-75b2-404c-9dd8-1b353db62281",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "rename to just `map` or `genMap`.",
        "createdAt" : "2020-03-12T17:42:07Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2cefc1ac-1360-4c15-b2de-7fd657f8489f",
        "parentId" : "ae50211b-75b2-404c-9dd8-1b353db62281",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch. Thanks. ",
        "createdAt" : "2020-03-12T17:45:40Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : null,
    "diffHunk" : "@@ -222,18 +217,21 @@ object SValue {\n \n   private val entryFields = Name.Array(Ast.keyFieldName, Ast.valueFieldName)\n \n-  private def entry(key: String, value: SValue) = {\n+  private def entry(key: SValue, value: SValue) = {\n     val args = new util.ArrayList[SValue](2)\n-    args.add(SText(key))\n+    args.add(key)\n     args.add(value)\n     SStruct(entryFields, args)\n   }\n \n   def toList(textMap: STextMap): SList = {\n     val entries = SortedLookupList(textMap.textMap).toImmArray\n-    SList(FrontStack(entries.map { case (k, v) => entry(k, v) }))\n+    SList(FrontStack(entries.map { case (k, v) => entry(SText(k), v) }))\n   }\n \n+  def toList(textMap: SGenMap): SList ="
  },
  {
    "id" : "f1a05405-9e2e-452a-9cc7-2638b6b986be",
    "prId" : 4893,
    "comments" : [
      {
        "id" : "45d5789e-0b2e-4fae-9671-1a0ffa899c9d",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n        SGenMap{\r\n          type O[_] = TreeMap[SValue, SValue]\r\n          value.iterator.map {\r\n            case (k, v) => (k.mapContractId(f), v.mapContractId(f))\r\n          }.to[O]\r\n        }\r\n```",
        "createdAt" : "2020-03-12T22:01:01Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "78e3db55-6abe-4153-ba24-cd5150c4378b",
        "parentId" : "45d5789e-0b2e-4fae-9671-1a0ffa899c9d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-13T08:47:22Z",
        "updatedAt" : "2020-03-13T08:47:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : null,
    "diffHunk" : "@@ -107,9 +107,11 @@ sealed trait SValue {\n       case STextMap(value) =>\n         STextMap(value.transform((_, v) => v.mapContractId(f)))\n       case SGenMap(value) =>\n-        SGenMap((InsertOrdMap.empty[SGenMap.Key, SValue] /: value) {\n-          case (acc, (SGenMap.Key(k), v)) => acc + (SGenMap.Key(k.mapContractId(f)) -> v)\n-        })\n+        SGenMap(\n+          value.foldLeft(TreeMap.empty[SValue, SValue](svalue.Ordering)) {\n+            case (acc, (k, v)) => acc.updated(k.mapContractId(f), v.mapContractId(f))\n+          }\n+        )"
  },
  {
    "id" : "afd3adca-e383-4c6c-a34d-59ef71c8b2dc",
    "prId" : 4893,
    "comments" : [
      {
        "id" : "641250d5-1718-4427-ad7d-b155c4796211",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Similarly use the `iterator map to` pattern.",
        "createdAt" : "2020-03-12T22:03:18Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "62a45d8a-949f-4164-83fb-4c04851287e9",
        "parentId" : "641250d5-1718-4427-ad7d-b155c4796211",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-13T08:47:37Z",
        "updatedAt" : "2020-03-13T08:47:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 110,
    "diffHunk" : "@@ -290,9 +288,13 @@ object SValue {\n         STextMap(map.mapValue(fromValue).toHashMap)\n \n       case V.ValueGenMap(entries) =>\n-        SGenMap(InsertOrdMap(entries.toSeq.map {\n-          case (k, v) => SGenMap.Key(fromValue(k)) -> fromValue(v)\n-        }: _*))\n+        SGenMap(\n+          entries\n+            .foldLeft(TreeMap.newBuilder[SValue, SValue](svalue.Ordering)) {\n+              case (b, (k, v)) => b += (fromValue(k) -> fromValue(v))\n+            }\n+            .result()\n+        )"
  },
  {
    "id" : "a1920da0-5341-4934-9966-21d889e78005",
    "prId" : 4893,
    "comments" : [
      {
        "id" : "02092cdc-8f84-4778-b211-6db35e99bdaa",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Somewhere in here\r\n\r\n```scala\r\n  implicit def ` ordering`: Ordering[SValue] = svalue.Ordering\r\n```\r\n\r\nThen you should be able to remove all the explicit references.",
        "createdAt" : "2020-03-12T22:05:08Z",
        "updatedAt" : "2020-03-13T08:47:05Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e8ae5b97-1132-4d8b-898d-c0fac0af0a1c",
        "parentId" : "02092cdc-8f84-4778-b211-6db35e99bdaa",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-13T08:47:31Z",
        "updatedAt" : "2020-03-13T08:47:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e034c77dcd97984f03bcd3890b2ea06272f908a",
    "line" : 37,
    "diffHunk" : "@@ -151,25 +153,18 @@ object SValue {\n \n   final case class STextMap(textMap: HashMap[String, SValue]) extends SValue\n \n-  final case class SGenMap(genMap: InsertOrdMap[SGenMap.Key, SValue]) extends SValue\n+  final case class SGenMap(genMap: TreeMap[SValue, SValue]) extends SValue\n "
  },
  {
    "id" : "de55af73-93fd-431b-baae-28c4bb54b43b",
    "prId" : 3453,
    "comments" : [
      {
        "id" : "d73e02a2-cf4f-4787-9ebe-0e80ad8e8cf7",
        "parentId" : null,
        "author" : null,
        "body" : "Just to check, this will throw an exception if the key is not valid, right? e.g. if it contains a function.",
        "createdAt" : "2019-11-14T12:35:51Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "595f36da-557e-490d-b567-e9fb8ba15203",
        "parentId" : "d73e02a2-cf4f-4787-9ebe-0e80ad8e8cf7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I made that more explicit",
        "createdAt" : "2019-11-15T08:14:46Z",
        "updatedAt" : "2019-11-15T09:53:45Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "79777f3e5242b968e6ddaeabbd367f715b2cb5fa",
    "line" : 27,
    "diffHunk" : "@@ -143,6 +150,19 @@ object SValue {\n \n   final case class SMap(value: HashMap[String, SValue]) extends SValue\n \n+  final case class SGenMap(insertion: Int, value: HashMap[SGenMap.Key, (Int, SValue)])\n+      extends SValue\n+\n+  object SGenMap {\n+    case class Key(v: SValue) {"
  },
  {
    "id" : "e53e16f3-e235-421b-8196-0bb87ee9a5da",
    "prId" : 2653,
    "comments" : [
      {
        "id" : "84df7324-b3ba-475a-a138-b889cf4a769f",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "add a comment explaining what this is for and how and where it is used.",
        "createdAt" : "2019-08-26T12:20:23Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "292a1e53-4075-4482-80ed-062ace7552ba",
        "parentId" : "84df7324-b3ba-475a-a138-b889cf4a769f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-08-26T15:10:26Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0fa6077c71edb857ab4a0a3851d841ea21acc8ef",
    "line" : 60,
    "diffHunk" : "@@ -174,6 +181,8 @@ object SValue {\n \n   final case class SMap(value: HashMap[String, SValue]) extends SValue\n \n+  final case class STNat(n: Int) extends SValue"
  }
]