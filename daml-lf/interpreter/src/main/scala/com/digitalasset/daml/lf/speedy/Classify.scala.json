[
  {
    "id" : "5583eced-0215-4fd6-afb3-6305b7e1305e",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "5189e367-18f6-4804-8c7c-54bdec222889",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`machine.ctrl` should never be `null` when `machine.returnValue` is `null`. If it is, we've f*cked up somewhere. Thus, let's rather add an `assert(machine.ctrl != null)` here.",
        "createdAt" : "2020-06-26T10:20:23Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "089bcd2c-cd32-4ae3-a6d0-addca60fb032",
        "parentId" : "5189e367-18f6-4804-8c7c-54bdec222889",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This is dev/debug code. I'd rather not crash here, but crash in the execute step.",
        "createdAt" : "2020-06-30T15:10:43Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 49,
    "diffHunk" : "@@ -85,7 +89,9 @@ object Classify { // classify the machine state w.r.t what step occurs next\n       classifyKont(kont, counts)\n     } else {\n       counts.ctrlExpr += 1\n-      classifyExpr(machine.ctrl, counts)\n+      if (machine.ctrl != null) {"
  },
  {
    "id" : "cb594d4c-24d7-4a42-b199-8821cbdf5164",
    "prId" : 6045,
    "comments" : [
      {
        "id" : "3964394f-7a19-4589-9990-b51348a833bc",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not like using case class for stateful object. \r\nIt is very annoying for you to use a normal class.\r\n\r\nyou should also make this object `final`.",
        "createdAt" : "2020-05-20T12:44:48Z",
        "updatedAt" : "2020-05-20T13:21:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "038efe89-25f9-416e-9fcc-f9091137b517",
        "parentId" : "3964394f-7a19-4589-9990-b51348a833bc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, will do...",
        "createdAt" : "2020-05-20T13:20:29Z",
        "updatedAt" : "2020-05-20T13:21:56Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21ec9c049b198a2f56f6b4488085574e7aeb16ae",
    "line" : null,
    "diffHunk" : "@@ -10,33 +10,33 @@ import com.daml.lf.speedy.SExpr._\n object Classify { // classify the machine state w.r.t what step occurs next\n \n   case class Counts("
  },
  {
    "id" : "f39f8103-0814-4a24-9a41-3f790c822b29",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "022b71e8-c57e-40e4-8e87-f4d86e5cde82",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suggest we amend all the field declarations of the `Counts` class with a default value of `0` instead of having this seemingly infinite list of zeros. Would be a thing for a separate PR though.",
        "createdAt" : "2020-05-19T17:12:10Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fbcafb18-c037-45ec-b7e1-cab4df0a7c57",
        "parentId" : "022b71e8-c57e-40e4-8e87-f4d86e5cde82",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok",
        "createdAt" : "2020-05-20T07:02:51Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "259e53de-6e84-407d-966d-52e9a6e8443b",
        "parentId" : "022b71e8-c57e-40e4-8e87-f4d86e5cde82",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "> I'm confident enough that our existing tests would have caught any issues there. \r\n\r\nI wan to confirm this opinion. It is basically *impossible* to make this kind of mistake without having half the existing world of tests blow up in your face.\r\n",
        "createdAt" : "2020-05-20T07:40:17Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7960ac5c-b767-432a-aa09-922267c4169b",
        "parentId" : "022b71e8-c57e-40e4-8e87-f4d86e5cde82",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "For example, when I changed to the caller-saves strategy, I confirmed experimentally that for every one of the 4 continuations in which we saved frame/env-size, if the restore of either was forgottten, then some test would blow.",
        "createdAt" : "2020-05-20T07:43:19Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 43,
    "diffHunk" : "@@ -68,7 +70,7 @@ object Classify { // classify the machine state w.r.t what step occurs next\n   }\n \n   def newEmptyCounts(): Counts = {\n-    Counts(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n+    Counts(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)"
  },
  {
    "id" : "bfec4c44-bbda-492c-814f-cf017ff18a4f",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "db3d2f24-b844-4cd9-bccc-ed3d0717b275",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If we don't care about the payload, let's make that explicit. I suggest we change the whole `match` expression in a separate PR to this style.\r\n```suggestion\r\n      case _: KPushTo => counts.kpushto += 1\r\n```",
        "createdAt" : "2020-05-19T17:13:00Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b3490b32-6a6b-4158-9906-afbfbf4a9399",
        "parentId" : "db3d2f24-b844-4cd9-bccc-ed3d0717b275",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. Totally agree. I also realised this would be a better coding idiom here.\r\nNearly made the change.\r\nHad to stop myself as it it clearly an unrelated refactoring.",
        "createdAt" : "2020-05-20T07:03:57Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 77,
    "diffHunk" : "@@ -105,14 +110,13 @@ object Classify { // classify the machine state w.r.t what step occurs next\n \n   def classifyKont(kont: Kont, counts: Counts): Unit = {\n     kont match {\n-      case KPop(_) => counts.kpop += 1\n-      case KArg(_) => counts.karg += 1\n+      case KArg(_, _, _) => counts.karg += 1\n       case KFun(_, _, _) => counts.kfun += 1\n-      case KPushTo(_, _) => counts.kpushto += 1\n+      case KPushTo(_, _, _, _) => counts.kpushto += 1"
  },
  {
    "id" : "3bccf79a-dd94-4562-b422-a08d939ad9b4",
    "prId" : 5957,
    "comments" : [
      {
        "id" : "2f73b3d8-324e-4257-81ba-73e4746157ac",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      case KLabelClosure(_) | KLeaveClosure(_) => ()\r\n```",
        "createdAt" : "2020-05-18T14:52:56Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : null,
    "diffHunk" : "@@ -113,6 +114,8 @@ object Classify { // classify the machine state w.r.t what step occurs next\n       case KMatch(_) => counts.kmatch += 1\n       case KCatch(_, _, _) => counts.kcatch += 1\n       case KFinished => counts.kfinished += 1\n+      case KLabelClosure(_) => ()"
  },
  {
    "id" : "445842d0-01d6-4c60-b3df-f56c2181db88",
    "prId" : 5957,
    "comments" : [
      {
        "id" : "64feed2b-a5ec-4fb0-bf88-67e1bf81072d",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-05-18T14:53:09Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : null,
    "diffHunk" : "@@ -113,6 +114,8 @@ object Classify { // classify the machine state w.r.t what step occurs next\n       case KMatch(_) => counts.kmatch += 1\n       case KCatch(_, _, _) => counts.kcatch += 1\n       case KFinished => counts.kfinished += 1\n+      case KLabelClosure(_) => ()\n+      case KLeaveClosure(_) => ()"
  }
]