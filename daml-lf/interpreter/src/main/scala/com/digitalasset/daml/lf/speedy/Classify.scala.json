[
  {
    "id" : "ed66e602-5f50-4007-9df5-4b1c1b42864c",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "82a32f34-cc2c-4bf8-b601-006f9a3c39e7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`machine.ctrl` should never be `null` when `machine.returnValue` is `null`. If it is, we've f*cked up somewhere. Thus, let's rather add an `assert(machine.ctrl != null)` here.",
        "createdAt" : "2020-06-26T10:20:23Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4c517261-53f8-4056-ae05-207165e8dee9",
        "parentId" : "82a32f34-cc2c-4bf8-b601-006f9a3c39e7",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This is dev/debug code. I'd rather not crash here, but crash in the execute step.",
        "createdAt" : "2020-06-30T15:10:43Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +90,94 @@    } else {\n      counts.ctrlExpr += 1\n      if (machine.ctrl != null) {\n        classifyExpr(machine.ctrl, counts)\n      }"
  },
  {
    "id" : "f5313c36-b801-4fa3-b0c1-14141e118ac7",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "b4286ab6-94b2-40f9-8741-e5b90fa5bc10",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suggest we amend all the field declarations of the `Counts` class with a default value of `0` instead of having this seemingly infinite list of zeros. Would be a thing for a separate PR though.",
        "createdAt" : "2020-05-19T17:12:10Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "287b3592-f72c-4e4e-bfcf-7a2822b5e0a7",
        "parentId" : "b4286ab6-94b2-40f9-8741-e5b90fa5bc10",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok",
        "createdAt" : "2020-05-20T07:02:51Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9433da26-8e81-4a0c-9ac1-4289e5661643",
        "parentId" : "b4286ab6-94b2-40f9-8741-e5b90fa5bc10",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "> I'm confident enough that our existing tests would have caught any issues there. \r\n\r\nI wan to confirm this opinion. It is basically *impossible* to make this kind of mistake without having half the existing world of tests blow up in your face.\r\n",
        "createdAt" : "2020-05-20T07:40:17Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cfe6bf92-e418-4b31-a1c6-a54184eaf42a",
        "parentId" : "b4286ab6-94b2-40f9-8741-e5b90fa5bc10",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "For example, when I changed to the caller-saves strategy, I confirmed experimentally that for every one of the 4 continuations in which we saved frame/env-size, if the restore of either was forgottten, then some test would blow.",
        "createdAt" : "2020-05-20T07:43:19Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +71,75 @@\n  def newEmptyCounts(): Counts = {\n    Counts(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n  }\n"
  },
  {
    "id" : "ec4f8d68-24e9-40f6-8c30-b2568cbf1f48",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "f8983b26-76c6-4c35-88f4-b51756aecdc4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If we don't care about the payload, let's make that explicit. I suggest we change the whole `match` expression in a separate PR to this style.\r\n```suggestion\r\n      case _: KPushTo => counts.kpushto += 1\r\n```",
        "createdAt" : "2020-05-19T17:13:00Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ef04a129-0ed0-4cb5-bc7c-1eeefc6b966d",
        "parentId" : "f8983b26-76c6-4c35-88f4-b51756aecdc4",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. Totally agree. I also realised this would be a better coding idiom here.\r\nNearly made the change.\r\nHad to stop myself as it it clearly an unrelated refactoring.",
        "createdAt" : "2020-05-20T07:03:57Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +113,117 @@      case KArg(_, _, _) => counts.karg += 1\n      case KFun(_, _, _) => counts.kfun += 1\n      case KPushTo(_, _, _, _) => counts.kpushto += 1\n      case KCacheVal(_, _) => counts.kcacheval += 1\n      case KLocation(_) => counts.klocation += 1"
  }
]