[
  {
    "id" : "86da502b-b0f0-47ce-a37d-a23bd0348b1f",
    "prId" : 7400,
    "comments" : [
      {
        "id" : "a4d3650c-509b-4cf4-a10e-81c44f045573",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  @inline\r\n  private[this] def authorize(\r\n```",
        "createdAt" : "2020-09-15T09:45:40Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,115 @@\n+package com.daml.lf\n+package speedy\n+\n+import com.daml.lf.ledger.Authorize\n+import com.daml.lf.ledger.FailedAuthorization\n+import com.daml.lf.transaction.Node.{NodeCreate, NodeFetch, NodeLookupByKey}\n+\n+import PartialTransaction.ExercisesContext\n+\n+private[lf] object CheckAuthorization {\n+\n+  def authorize("
  },
  {
    "id" : "9dc590cd-5674-4feb-abcd-82401c45b6b9",
    "prId" : 7400,
    "comments" : [
      {
        "id" : "0c1927da-e417-4d23-b748-eb4ed4ca977e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  private[this] def authorizeCreate(\r\n```",
        "createdAt" : "2020-09-15T12:16:35Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,118 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import com.daml.lf.ledger.Authorize\n+import com.daml.lf.ledger.FailedAuthorization\n+import com.daml.lf.transaction.Node.{NodeCreate, NodeFetch, NodeLookupByKey}\n+\n+import PartialTransaction.ExercisesContext\n+\n+private[lf] object CheckAuthorization {\n+\n+  def authorize(\n+      passIf: Boolean,\n+      failWith: => FailedAuthorization,\n+  ): List[FailedAuthorization] = {\n+    if (passIf)\n+      List()\n+    else\n+      List(failWith)\n+  }\n+\n+  def authorizeCreate("
  },
  {
    "id" : "5b0a6059-07a9-45d7-a928-2b3517ea803d",
    "prId" : 7400,
    "comments" : [
      {
        "id" : "fa8d3619-2c23-46b8-bb18-b3369ad3806d",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  private[this] def authorizeFetch(\r\n```",
        "createdAt" : "2020-09-15T12:16:49Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,118 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import com.daml.lf.ledger.Authorize\n+import com.daml.lf.ledger.FailedAuthorization\n+import com.daml.lf.transaction.Node.{NodeCreate, NodeFetch, NodeLookupByKey}\n+\n+import PartialTransaction.ExercisesContext\n+\n+private[lf] object CheckAuthorization {\n+\n+  def authorize(\n+      passIf: Boolean,\n+      failWith: => FailedAuthorization,\n+  ): List[FailedAuthorization] = {\n+    if (passIf)\n+      List()\n+    else\n+      List(failWith)\n+  }\n+\n+  def authorizeCreate(\n+      create: NodeCreate[_, _],\n+      auth: Authorize,\n+  ): List[FailedAuthorization] = {\n+    authorize(\n+      passIf = create.signatories subsetOf auth.authParties,\n+      failWith = FailedAuthorization.CreateMissingAuthorization(\n+        templateId = create.coinst.template,\n+        optLocation = create.optLocation,\n+        authorizingParties = auth.authParties,\n+        requiredParties = create.signatories,\n+      ),\n+    ) ++\n+      authorize(\n+        passIf = create.signatories.nonEmpty,\n+        failWith = FailedAuthorization.NoSignatories(create.coinst.template, create.optLocation),\n+      ) ++\n+      (create.key match {\n+        case None => List()\n+        case Some(key) =>\n+          val maintainers = key.maintainers\n+          authorize(\n+            passIf = maintainers subsetOf create.signatories,\n+            failWith = FailedAuthorization.MaintainersNotSubsetOfSignatories(\n+              templateId = create.coinst.template,\n+              optLocation = create.optLocation,\n+              signatories = create.signatories,\n+              maintainers = maintainers,\n+            ),\n+          )\n+      })\n+  }\n+\n+  def authorizeFetch("
  },
  {
    "id" : "325b2184-335d-4b63-a21d-c4a85a4398d1",
    "prId" : 7400,
    "comments" : [
      {
        "id" : "9076db7d-e634-4740-beb7-351adfb3039a",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  private[this] def authorizeLookupByKey(\r\n```",
        "createdAt" : "2020-09-15T12:16:59Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,118 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import com.daml.lf.ledger.Authorize\n+import com.daml.lf.ledger.FailedAuthorization\n+import com.daml.lf.transaction.Node.{NodeCreate, NodeFetch, NodeLookupByKey}\n+\n+import PartialTransaction.ExercisesContext\n+\n+private[lf] object CheckAuthorization {\n+\n+  def authorize(\n+      passIf: Boolean,\n+      failWith: => FailedAuthorization,\n+  ): List[FailedAuthorization] = {\n+    if (passIf)\n+      List()\n+    else\n+      List(failWith)\n+  }\n+\n+  def authorizeCreate(\n+      create: NodeCreate[_, _],\n+      auth: Authorize,\n+  ): List[FailedAuthorization] = {\n+    authorize(\n+      passIf = create.signatories subsetOf auth.authParties,\n+      failWith = FailedAuthorization.CreateMissingAuthorization(\n+        templateId = create.coinst.template,\n+        optLocation = create.optLocation,\n+        authorizingParties = auth.authParties,\n+        requiredParties = create.signatories,\n+      ),\n+    ) ++\n+      authorize(\n+        passIf = create.signatories.nonEmpty,\n+        failWith = FailedAuthorization.NoSignatories(create.coinst.template, create.optLocation),\n+      ) ++\n+      (create.key match {\n+        case None => List()\n+        case Some(key) =>\n+          val maintainers = key.maintainers\n+          authorize(\n+            passIf = maintainers subsetOf create.signatories,\n+            failWith = FailedAuthorization.MaintainersNotSubsetOfSignatories(\n+              templateId = create.coinst.template,\n+              optLocation = create.optLocation,\n+              signatories = create.signatories,\n+              maintainers = maintainers,\n+            ),\n+          )\n+      })\n+  }\n+\n+  def authorizeFetch(\n+      fetch: NodeFetch[_, _],\n+      auth: Authorize,\n+  ): List[FailedAuthorization] = {\n+    authorize(\n+      passIf = fetch.stakeholders.intersect(auth.authParties).nonEmpty,\n+      failWith = FailedAuthorization.FetchMissingAuthorization(\n+        templateId = fetch.templateId,\n+        optLocation = fetch.optLocation,\n+        stakeholders = fetch.stakeholders,\n+        authorizingParties = auth.authParties,\n+      )\n+    )\n+  }\n+\n+  def authorizeLookupByKey("
  },
  {
    "id" : "1b625b1e-e03c-4899-a303-bb4a9184d5e9",
    "prId" : 7400,
    "comments" : [
      {
        "id" : "102c0e9a-e63e-4d04-9a1f-6ea3dd516be7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The construct that can trigger this does still exist in DAML-LF although the compiler stopped producing it a while ago.\r\n```suggestion\r\n        passIf = ex.controllers == ex.actingParties,\r\n```",
        "createdAt" : "2020-09-16T09:25:55Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3e9d2ec2-5595-41d0-942d-1e09341a234f",
        "parentId" : "102c0e9a-e63e-4d04-9a1f-6ea3dd516be7",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, thanks. I remove the `TODO` comment",
        "createdAt" : "2020-09-16T14:40:38Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,118 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import com.daml.lf.ledger.Authorize\n+import com.daml.lf.ledger.FailedAuthorization\n+import com.daml.lf.transaction.Node.{NodeCreate, NodeFetch, NodeLookupByKey}\n+\n+import PartialTransaction.ExercisesContext\n+\n+private[lf] object CheckAuthorization {\n+\n+  def authorize(\n+      passIf: Boolean,\n+      failWith: => FailedAuthorization,\n+  ): List[FailedAuthorization] = {\n+    if (passIf)\n+      List()\n+    else\n+      List(failWith)\n+  }\n+\n+  def authorizeCreate(\n+      create: NodeCreate[_, _],\n+      auth: Authorize,\n+  ): List[FailedAuthorization] = {\n+    authorize(\n+      passIf = create.signatories subsetOf auth.authParties,\n+      failWith = FailedAuthorization.CreateMissingAuthorization(\n+        templateId = create.coinst.template,\n+        optLocation = create.optLocation,\n+        authorizingParties = auth.authParties,\n+        requiredParties = create.signatories,\n+      ),\n+    ) ++\n+      authorize(\n+        passIf = create.signatories.nonEmpty,\n+        failWith = FailedAuthorization.NoSignatories(create.coinst.template, create.optLocation),\n+      ) ++\n+      (create.key match {\n+        case None => List()\n+        case Some(key) =>\n+          val maintainers = key.maintainers\n+          authorize(\n+            passIf = maintainers subsetOf create.signatories,\n+            failWith = FailedAuthorization.MaintainersNotSubsetOfSignatories(\n+              templateId = create.coinst.template,\n+              optLocation = create.optLocation,\n+              signatories = create.signatories,\n+              maintainers = maintainers,\n+            ),\n+          )\n+      })\n+  }\n+\n+  def authorizeFetch(\n+      fetch: NodeFetch[_, _],\n+      auth: Authorize,\n+  ): List[FailedAuthorization] = {\n+    authorize(\n+      passIf = fetch.stakeholders.intersect(auth.authParties).nonEmpty,\n+      failWith = FailedAuthorization.FetchMissingAuthorization(\n+        templateId = fetch.templateId,\n+        optLocation = fetch.optLocation,\n+        stakeholders = fetch.stakeholders,\n+        authorizingParties = auth.authParties,\n+      )\n+    )\n+  }\n+\n+  def authorizeLookupByKey(\n+      lbk: NodeLookupByKey[_, _],\n+      auth: Authorize,\n+  ): List[FailedAuthorization] = {\n+    authorize(\n+      passIf = lbk.key.maintainers subsetOf auth.authParties,\n+      failWith = FailedAuthorization.LookupByKeyMissingAuthorization(\n+        lbk.templateId,\n+        lbk.optLocation,\n+        lbk.key.maintainers,\n+        auth.authParties,\n+      )\n+    )\n+  }\n+\n+  def authorizeExercise(\n+      ex: ExercisesContext,\n+      auth: Authorize,\n+  ): List[FailedAuthorization] = {\n+    val controllersDifferFromActors = ex.controllers != ex.actingParties\n+    authorize(\n+      passIf = ex.actingParties.nonEmpty,\n+      failWith = FailedAuthorization.NoControllers(ex.templateId, ex.choiceId, ex.optLocation),\n+    ) ++\n+      authorize(\n+        passIf = !controllersDifferFromActors, // TODO: can this failure ever occur?"
  }
]