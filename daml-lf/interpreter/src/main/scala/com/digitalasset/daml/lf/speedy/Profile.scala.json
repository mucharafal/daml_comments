[
  {
    "id" : "4a7c4358-deb7-4b40-ae26-fce4827ce5ee",
    "prId" : 6371,
    "comments" : [
      {
        "id" : "6cbe1201-3c5b-401e-9db3-0cf493ac9ccd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I find the infix syntax really confusing...\r\n```suggestion\r\n    def label: String = LabelModule.Allowed.renderLabel(rawLabel)\r\n```",
        "createdAt" : "2020-06-17T07:22:21Z",
        "updatedAt" : "2020-06-17T14:25:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1be8a779-39a1-4935-acb5-2e877a1dfe01",
        "parentId" : "6cbe1201-3c5b-401e-9db3-0cf493ac9ccd",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "I feel exactly the opposite. Maybe that is down to my Smalltalk experience. But 🤷‍♂️ ",
        "createdAt" : "2020-06-17T14:15:07Z",
        "updatedAt" : "2020-06-17T14:25:44Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d55daac8e76f542aa35924889192bca62e5e53a9",
    "line" : null,
    "diffHunk" : "@@ -37,21 +34,8 @@ final class Profile {\n }\n \n object Profile {\n-  // NOTE(MH): See the documenation of [[Profile]] above for why we use\n-  // [[AnyRef]] for the labels.\n-  private[lf] final case class Event(val open: Boolean, val rawLabel: AnyRef, val time: Long) {\n-    def label: String = {\n-      import com.daml.lf.speedy.SExpr._\n-      rawLabel match {\n-        case null => \"<null>\" // NOTE(MH): We should never see this but it's no problem if we do.\n-        case AnonymousClosure => \"<lambda>\"\n-        case LfDefRef(ref) => ref.qualifiedName.toString()\n-        case ChoiceDefRef(tmplRef, name) => s\"exercise @${tmplRef.qualifiedName} ${name}\"\n-        case ref: SEBuiltinRecursiveDefinition.Reference => ref.toString().toLowerCase()\n-        case str: String => str\n-        case any => s\"<unknown ${any}>\"\n-      }\n-    }\n+  private[lf] final case class Event(val open: Boolean, val rawLabel: Label, val time: Long) {\n+    def label: String = LabelModule.Allowed renderLabel rawLabel"
  },
  {
    "id" : "382075ec-ff11-4780-bf45-bbe4a9cdd083",
    "prId" : 6184,
    "comments" : [
      {
        "id" : "271fda36-0dd7-4b3e-b436-b0487135bdc3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@S11001001 Does `spray-json` provide a way to write the JSON object into a file without first converting it to a string? We're talking about fairly big JSON objects of multiple MB here.",
        "createdAt" : "2020-06-02T09:23:02Z",
        "updatedAt" : "2020-06-02T10:25:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "18077ab6-4da2-4f79-a665-8dbcdc99cf9d",
        "parentId" : "271fda36-0dd7-4b3e-b436-b0487135bdc3",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I had a quick look into it and couldn't find anything that returned a `Writer` or `OutputStream`, unfortunately.",
        "createdAt" : "2020-06-02T09:50:51Z",
        "updatedAt" : "2020-06-02T10:25:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9f92982a070d75f28520fe338d957f64362993a7",
    "line" : null,
    "diffHunk" : "@@ -92,9 +91,7 @@ object Profile {\n     ) {\n       def write(path: Path): Unit = {\n         import JsonProtocol.fileFormat\n-        val writer = new BufferedWriter(new FileWriter(path.toFile()))\n-        writer.write(this.toJson.compactPrint)\n-        writer.close()\n+        val _ = Files.write(path, this.toJson.compactPrint.getBytes)"
  },
  {
    "id" : "a0afe365-8769-46ae-82a7-3a57c8e12bf6",
    "prId" : 6184,
    "comments" : [
      {
        "id" : "664c16bd-f3e6-426e-aff3-ec8c6c850546",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "`getBytes` clones the string. I'd suggest using `Seq(this.toJson.compactPrint).asJava` instead.",
        "createdAt" : "2020-06-02T09:49:22Z",
        "updatedAt" : "2020-06-02T10:25:57Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0498607-c87e-4cc4-8db0-889dff264950",
        "parentId" : "664c16bd-f3e6-426e-aff3-ec8c6c850546",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I wasn't aware of that. Thanks for pointing it out. I changed it accordingly.",
        "createdAt" : "2020-06-02T10:26:34Z",
        "updatedAt" : "2020-06-02T10:26:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9f92982a070d75f28520fe338d957f64362993a7",
    "line" : null,
    "diffHunk" : "@@ -92,9 +91,7 @@ object Profile {\n     ) {\n       def write(path: Path): Unit = {\n         import JsonProtocol.fileFormat\n-        val writer = new BufferedWriter(new FileWriter(path.toFile()))\n-        writer.write(this.toJson.compactPrint)\n-        writer.close()\n+        val _ = Files.write(path, this.toJson.compactPrint.getBytes)"
  },
  {
    "id" : "1aac6312-580c-402f-bcc3-fabc01a471cd",
    "prId" : 6151,
    "comments" : [
      {
        "id" : "3d9a9c65-fc55-49c8-98b6-71e9c9c19115",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think `java.nio.file.Files` is your friend here.\r\n\r\n```suggestion\r\n        Files.write(path, Seq(toJson.compactPrint).asJava)\r\n```",
        "createdAt" : "2020-05-29T11:53:33Z",
        "updatedAt" : "2020-05-29T12:04:10Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "161dd863-8547-4e06-a607-b5d41766be7d",
        "parentId" : "3d9a9c65-fc55-49c8-98b6-71e9c9c19115",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Cool. I didn't know about that. I'll apply it in a follow-up PR.",
        "createdAt" : "2020-05-29T13:02:48Z",
        "updatedAt" : "2020-05-29T13:02:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 30,
    "diffHunk" : "@@ -89,9 +90,9 @@ object Profile {\n         exporter: String,\n         name: String,\n     ) {\n-      def write(filename: String): Unit = {\n+      def write(path: Path): Unit = {\n         import JsonProtocol.fileFormat\n-        val writer = new BufferedWriter(new FileWriter(filename))\n+        val writer = new BufferedWriter(new FileWriter(path.toFile()))\n         writer.write(this.toJson.compactPrint)\n         writer.close()"
  },
  {
    "id" : "f9edf1d0-41eb-4fd1-b9fa-cf2d9dea03d8",
    "prId" : 5957,
    "comments" : [
      {
        "id" : "933706f8-2723-4ffd-a18c-35563830a6d0",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Perhaps you could use an unboxed newtype or `scalaz.Tag` for the `AnyRef` here? This would not entail any allocations. In the former case (bespoke newtype) we could also use it to proscribe the set of types permitted to be used for labels to those supported by `Event#label`, again without implying any allocation. To carry the latter to its conclusion,\r\n\r\n```scala\r\ntype Label = LabelModule.Module.T\r\n\r\nsealed abstract class LabelModule {\r\n  type T <: AnyRef\r\n  private def apply(t: AnyRef): T\r\n}\r\nobject LabelModule {\r\n  val Module: LabelModule = new LabelModule {\r\n    type T = AnyRef\r\n    override private def apply(t: T) = t\r\n  }\r\n\r\n  // assumes -Xsource:2.13 in clients, which we should just do always,\r\n  // this is in scope wherever the expected type is `Label`\r\n  implicit def fromAllowed[T: Allowed](t: T): Label = Module(t)\r\n\r\n  @implicitNotFound(msg = \"Values of type ${T} are not known, renderable Labels\")\r\n  final class Allowed[-T] private()\r\n  object Allowed {\r\n    private[this] val allowAll = new Allowed[Any]\r\n    implicit val anonClosure: Allowed[AnonymousClosure.type] = allowAll\r\n    implicit val str: Allowed[String] = allowAll\r\n    // and so on for other permitted labels\r\n  }\r\n}\r\n```",
        "createdAt" : "2020-05-15T20:26:42Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "acdb0a6e-8acb-40dc-bab8-1d9286002900",
        "parentId" : "933706f8-2723-4ffd-a18c-35563830a6d0",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't fully understand all the details of this. I'll play around with it and put it in a follow-up PR.",
        "createdAt" : "2020-05-18T16:21:58Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a957cb21-39a1-4f72-829e-b7d089a01c23",
        "parentId" : "933706f8-2723-4ffd-a18c-35563830a6d0",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "#6371",
        "createdAt" : "2020-06-16T19:03:35Z",
        "updatedAt" : "2020-06-16T19:03:35Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : 14,
    "diffHunk" : "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import java.lang.System\n+import java.util.ArrayList\n+\n+/** Class for profiling information collected by Speedy. We use [[AnyRef]] for\n+  * the labels to avoid any conversions into a common label format at runtime\n+  * since this might skew the profile. Instead, we convert the labels to strings\n+  * when we write out the profile.\n+  */"
  },
  {
    "id" : "2d99a026-4c82-4a71-a172-00d339b5a421",
    "prId" : 5957,
    "comments" : [
      {
        "id" : "ec7082b1-a30c-4c94-aa24-7c3f80f33207",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Scala style for this pattern is to _not_ have a `setX` function, but for `.name = ...` to be the syntax used by callers. This can be done by making the `var` public or by implementing the `name_=` method.",
        "createdAt" : "2020-05-15T20:29:41Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "45adfe76-a8ce-413a-82dd-373c1497603e",
        "parentId" : "ec7082b1-a30c-4c94-aa24-7c3f80f33207",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good to know. I'll change it accordingly.",
        "createdAt" : "2020-05-18T16:12:44Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import java.lang.System\n+import java.util.ArrayList\n+\n+/** Class for profiling information collected by Speedy. We use [[AnyRef]] for\n+  * the labels to avoid any conversions into a common label format at runtime\n+  * since this might skew the profile. Instead, we convert the labels to strings\n+  * when we write out the profile.\n+  */\n+final class Profile {\n+  import Profile._\n+  private val start: Long = System.nanoTime()\n+  private val events: ArrayList[Event] = new ArrayList()\n+  private var name: String = \"DAML Engine profile\"\n+\n+  def addOpenEvent(label: AnyRef) = {\n+    val time = System.nanoTime()\n+    events.add(Event(true, label, time))\n+  }\n+\n+  def addCloseEvent(label: AnyRef) = {\n+    val time = System.nanoTime()\n+    events.add(Event(false, label, time))\n+  }\n+\n+  def setName(name: String) = {\n+    this.name = name\n+  }"
  },
  {
    "id" : "c9fd5d0a-3f90-4b2e-9153-e9296c9d633c",
    "prId" : 5957,
    "comments" : [
      {
        "id" : "705531c0-434e-4e5d-9c45-0ae7201538ef",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@S11001001 @remyhaemmerle-da Is this `x.asScala.toList` construction alright or is there something better?",
        "createdAt" : "2020-05-18T16:19:59Z",
        "updatedAt" : "2020-05-18T16:23:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8fbffc2a-3e5e-4c48-a676-8a76b93bc90b",
        "parentId" : "705531c0-434e-4e5d-9c45-0ae7201538ef",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It is perfectly sensible. If your goal type is not `List`, then use whatever goal type you want instead with `to[...]` (we even support `ImmArray`).",
        "createdAt" : "2020-05-18T16:24:54Z",
        "updatedAt" : "2020-05-18T16:27:35Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b07b9b6bb0bb079c6a380804dc18a83f562c379",
    "line" : 108,
    "diffHunk" : "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import java.lang.System\n+import java.util.ArrayList\n+\n+/** Class for profiling information collected by Speedy. We use [[AnyRef]] for\n+  * the labels to avoid any conversions into a common label format at runtime\n+  * since this might skew the profile. Instead, we convert the labels to strings\n+  * when we write out the profile.\n+  */\n+final class Profile {\n+  import Profile._\n+  private val start: Long = System.nanoTime()\n+  private val events: ArrayList[Event] = new ArrayList()\n+  private var name: String = \"DAML Engine profile\"\n+\n+  def addOpenEvent(label: AnyRef) = {\n+    val time = System.nanoTime()\n+    events.add(Event(true, label, time))\n+  }\n+\n+  def addCloseEvent(label: AnyRef) = {\n+    val time = System.nanoTime()\n+    events.add(Event(false, label, time))\n+  }\n+\n+  def setName(name: String) = {\n+    this.name = name\n+  }\n+\n+  def writeSpeedscopeJson(filename: String) = {\n+    val fileJson = SpeedscopeJson.FileJson.fromProfile(this)\n+    fileJson.write(filename)\n+  }\n+}\n+\n+object Profile {\n+  // NOTE(MH): See the documenation of [[Profile]] above for why we use\n+  // [[AnyRef]] for the labels.\n+  private final case class Event(val open: Boolean, val rawLabel: AnyRef, val time: Long) {\n+    def label: String = {\n+      import com.daml.lf.speedy.SExpr._\n+      rawLabel match {\n+        case null => \"<null>\" // NOTE(MH): We should never see this but it's no problem if we do.\n+        case AnonymousClosure => \"<anonymous closure>\"\n+        case LfDefRef(ref) => ref.toString()\n+        case ChoiceDefRef(tmplRef, name) => s\"<exercise ${tmplRef}:${name}>\"\n+        case ref: SEBuiltinRecursiveDefinition.Reference => s\"<${ref.toString().toLowerCase()}>\"\n+        case str: String => str\n+        case any => s\"<unknown ${any}>\"\n+      }\n+    }\n+  }\n+\n+  /** Utility object to convert the profile into the JSON format required by\n+    * https://www.speedscope.app/. For a description of the format, see\n+    * https://github.com/jlfwong/speedscope/wiki/Importing-from-custom-sources#speedscopes-file-format\n+    */\n+  private object SpeedscopeJson {\n+    import java.io.{BufferedWriter, FileWriter}\n+    import spray.json._\n+\n+    val schemaURI = \"https://www.speedscope.app/file-format-schema.json\"\n+\n+    object JsonProtocol extends DefaultJsonProtocol {\n+      implicit val eventFormat = jsonFormat3(EventJson.apply)\n+      implicit val profileFormat = jsonFormat6(ProfileJson.apply)\n+      implicit val frameFormat = jsonFormat1(FrameJson.apply)\n+      implicit val sharedFormat = jsonFormat1(SharedJson.apply)\n+      implicit val fileFormat = jsonFormat6(FileJson.apply)\n+    }\n+\n+    case class EventJson(`type`: String, at: Long, frame: Int)\n+    case class ProfileJson(\n+        `type`: String,\n+        name: String,\n+        unit: String,\n+        startValue: Long,\n+        endValue: Long,\n+        events: List[EventJson],\n+    )\n+    case class FrameJson(name: String)\n+    case class SharedJson(frames: List[FrameJson])\n+    case class FileJson(\n+        `$schema`: String,\n+        profiles: List[ProfileJson],\n+        shared: SharedJson,\n+        activeProfileIndex: Int,\n+        exporter: String,\n+        name: String,\n+    ) {\n+      def write(filename: String): Unit = {\n+        import JsonProtocol.fileFormat\n+        val writer = new BufferedWriter(new FileWriter(filename))\n+        writer.write(this.toJson.compactPrint)\n+        writer.close()\n+      }\n+    }\n+\n+    object FileJson {\n+      def fromProfile(profile: Profile) = {\n+        import scala.collection.mutable.HashMap\n+        import scala.collection.JavaConverters._\n+\n+        val frames = new ArrayList[FrameJson]()\n+        val frameIndices = new HashMap[String, Int]()\n+        var endValue = 0L\n+        val events = profile.events.asScala.toList.map { event =>"
  }
]