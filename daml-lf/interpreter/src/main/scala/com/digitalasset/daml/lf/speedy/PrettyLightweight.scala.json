[
  {
    "id" : "23c38e49-7490-414c-b0e6-47bf5009854f",
    "prId" : 5819,
    "comments" : [
      {
        "id" : "663c2188-b923-4f6a-a866-060bf94bc32a",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n  final case class UnknownValue(v: SValue) extends RuntimeException(v.toString)\r\n```",
        "createdAt" : "2020-05-05T12:07:29Z",
        "updatedAt" : "2020-05-11T08:59:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import java.util\n+import scala.collection.JavaConverters._\n+\n+import com.daml.lf.speedy.Speedy._\n+import com.daml.lf.speedy.SExpr._\n+import com.daml.lf.speedy.SValue._\n+\n+object PrettyLightweight { // lightweight pretty printer for CEK machine states\n+\n+  def ppMachine(m: Machine): String = {\n+    s\"${ppEnv(m.env)} -- ${pp(m.ctrl)} -- ${ppKontStack(m.kont)}\"\n+  }\n+\n+  def ppEnv(env: Env): String = {\n+    //s\"{${commas(env.asScala.map(pp))}}\"\n+    s\"{#${env.size()}}\" //show just the env size\n+  }\n+\n+  def ppKontStack(ks: util.ArrayList[Kont]): String = {\n+    //ks.asScala.reverse.map(ppKont).mkString(\" -- \")\n+    s\"[#${ks.size()}]\" //show just the kont-stack depth\n+  }\n+\n+  def pp(c: Ctrl): String = c match {\n+    case CtrlExpr(e) => pp(e)\n+    case CtrlValue(v) => pp(v)\n+    case CtrlImportValue(_) => \"<ImportValue>\"\n+    case CtrlWronglyTypeContractId(_, _, _) => \"<lWronglyTypeContractId>\"\n+    case CtrlCrash(_) => \"<Crash>\"\n+  }\n+\n+  def ppKont(k: Kont): String = k match {\n+    case KPop(n) => s\"KPop($n)\"\n+    case KArg(es) => s\"KArg(${commas(es.map(pp))})\"\n+    case KFun(prim, extendedArgs, arity) =>\n+      s\"KFun(${pp(prim)}/$arity,[${commas(extendedArgs.asScala.map(pp))}])\"\n+    case KPushTo(_, e) => s\"KPushTo(_, ${pp(e)})\"\n+    case KCacheVal(_, _) => \"KCacheVal\"\n+    case KLocation(_) => \"KLocation\"\n+    case KMatch(_) => \"KMatch\"\n+    case KCatch(_, _, _) => \"KCatch\" //never seen\n+  }\n+\n+  def ppVarRef(n: Int): String = {\n+    s\"#$n\"\n+  }\n+\n+  def pp(e: SExpr): String = e match {\n+    case SEValue(v) => pp(v)\n+    case SEVar(n) => ppVarRef(n)\n+    //case SEApp(func, args) => s\"@(${pp(func)},${commas(args.map(pp))})\"\n+    case SEApp(_, _) => s\"@(...)\"\n+    //case SEMakeClo(fvs, arity, body) => s\"[${commas(fvs.map(ppVarRef))}]lam/$arity->${pp(body)}\"\n+    case SEMakeClo(fvs, arity, _) => s\"[${commas(fvs.map(ppVarRef))}]lam/$arity->...\"\n+    case SEBuiltin(b) => s\"${b}\"\n+    case SEVal(_, _) => \"<SEVal...>\"\n+    case SELocation(_, _) => \"<SELocation...>\"\n+    case SELet(_, _) => \"<SELet...>\"\n+    case SECase(_, _) => \"<SECase...>\"\n+    case SEBuiltinRecursiveDefinition(_) => \"<SEBuiltinRecursiveDefinition...>\"\n+    case SECatch(_, _, _) => ??? //not seen one yet\n+    case SEAbs(_, _) => \"<SEAbs...>\" // will never get these on a running machine\n+  }\n+\n+  def pp(v: SValue): String = v match {\n+    case SInt64(n) => s\"$n\"\n+    case SPAP(prim, args, arity) =>\n+      s\"PAP[${args.size}/$arity](${pp(prim)}(${commas(args.asScala.map(pp))})))\"\n+    case SToken => \"SToken\"\n+    case SText(s) => s\"'$s'\"\n+    case SParty(_) => \"<SParty>\"\n+    case SStruct(_, _) => \"<SStruct...>\"\n+    case SUnit => \"SUnit\"\n+    case SList(_) => \"SList\"\n+    case _ => throw UnknownV(v)\n+  }\n+\n+  def pp(prim: Prim): String = prim match {\n+    case PBuiltin(b) => s\"$b\"\n+    case PClosure(expr, fvs) =>\n+      s\"clo[${commas(fvs.map(pp))}]:${pp(expr)}\"\n+  }\n+\n+  def commas(xs: Seq[String]): String = xs.mkString(\",\")\n+\n+  final case class UnknownV(v: SValue) extends RuntimeException(v.toString)"
  },
  {
    "id" : "6c5177ee-cdcd-489a-92fa-54cb8a2276ca",
    "prId" : 5819,
    "comments" : [
      {
        "id" : "152ff64c-6b73-422b-b98b-a01cd203c7e3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "You need to use `submitMustFail` to get these.",
        "createdAt" : "2020-05-12T21:35:19Z",
        "updatedAt" : "2020-05-12T21:35:22Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1734369ae2276cb8e1c399796673b4b2ffe9e3",
    "line" : 46,
    "diffHunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package speedy\n+\n+import java.util\n+import scala.collection.JavaConverters._\n+\n+import com.daml.lf.speedy.Speedy._\n+import com.daml.lf.speedy.SExpr._\n+import com.daml.lf.speedy.SValue._\n+\n+object PrettyLightweight { // lightweight pretty printer for CEK machine states\n+\n+  def ppMachine(m: Machine): String = {\n+    s\"${ppEnv(m.env)} -- ${ppCtrl(m.ctrl, m.returnValue)} -- ${ppKontStack(m.kontStack)}\"\n+  }\n+\n+  def ppCtrl(e: SExpr, v: SValue): String =\n+    if (v != null) {\n+      s\"V-${pp(v)}\"\n+    } else {\n+      s\"E-${pp(e)}\"\n+    }\n+\n+  def ppEnv(env: Env): String = {\n+    //s\"{${commas(env.asScala.map(pp))}}\"\n+    s\"{#${env.size()}}\" //show just the env size\n+  }\n+\n+  def ppKontStack(ks: util.ArrayList[Kont]): String = {\n+    //ks.asScala.reverse.map(ppKont).mkString(\" -- \")\n+    s\"[#${ks.size()}]\" //show just the kont-stack depth\n+  }\n+\n+  def ppKont(k: Kont): String = k match {\n+    case KPop(n) => s\"KPop($n)\"\n+    case KArg(es) => s\"KArg(${commas(es.map(pp))})\"\n+    case KFun(prim, extendedArgs, arity) =>\n+      s\"KFun(${pp(prim)}/$arity,[${commas(extendedArgs.asScala.map(pp))}])\"\n+    case KPushTo(_, e) => s\"KPushTo(_, ${pp(e)})\"\n+    case KCacheVal(_, _) => \"KCacheVal\"\n+    case KLocation(_) => \"KLocation\"\n+    case KMatch(_) => \"KMatch\"\n+    case KCatch(_, _, _) => \"KCatch\" //never seen"
  }
]