[
  {
    "id" : "f6ec899c-c021-4695-995e-58402a96eb48",
    "prId" : 7540,
    "comments" : [
      {
        "id" : "fd656363-721d-4ee3-9262-711b211c87f4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "\"not implemented\" sounds to me like we'll implement it in the future.\r\n```suggestion\r\n      crash(\"unexpected SELet during execution\")\r\n```",
        "createdAt" : "2020-10-01T11:53:26Z",
        "updatedAt" : "2020-10-01T13:51:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e55637f913c36a84131d8d78a5fd33c7acea709e",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +314,318 @@  final case class SELet(bounds: List[SExpr], body: SExpr) extends SExpr {\n    def execute(machine: Machine): Unit =\n      crash(\"not implemented\")\n  }\n"
  },
  {
    "id" : "044c1d70-5c11-4308-a686-9dccb3d97156",
    "prId" : 7472,
    "comments" : [
      {
        "id" : "455d96be-ce1a-481f-a1c1-afcaa17404a2",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Does `Profile.scala` need to be extended to handle `ChoiceByKeyDefRef` and friends (as is done for `ChoiceDefRef`) ?\r\n",
        "createdAt" : "2020-09-24T13:02:55Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f87982ebeaafdd21277c2bc4c42b1f7319643a1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +448,452 @@  // references to definitions generated by the Speedy compiler\n  final case class ChoiceDefRef(ref: DefinitionRef, choiceName: ChoiceName) extends SDefinitionRef\n  final case class ChoiceByKeyDefRef(ref: DefinitionRef, choiceName: ChoiceName)\n      extends SDefinitionRef\n  final case class CreateDefRef(ref: DefinitionRef) extends SDefinitionRef"
  },
  {
    "id" : "340a1e67-a813-4f52-8a45-571d37d9b4b2",
    "prId" : 6918,
    "comments" : [
      {
        "id" : "3f02f249-6c8a-4f7b-aaf6-5ec2ec7fb9cb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Note to self: This should be a `while` loop to avoid allocating the sequence object.",
        "createdAt" : "2020-08-12T07:47:27Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +150,154 @@      val arity = builtin.arity\n      val actuals = new util.ArrayList[SValue](arity)\n      for (i <- 0 to arity - 1) {\n        val arg = args(i)\n        val v = arg.lookupValue(machine)"
  },
  {
    "id" : "9d33effb-a44a-4968-bd33-5cfc2726ae28",
    "prId" : 6918,
    "comments" : [
      {
        "id" : "a9b5b2aa-7eb2-4d7b-9982-83e69a63f38d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Note to self: See if we can share code with `SEAppAtomicSaturatedBuiltin#execute`.",
        "createdAt" : "2020-08-12T07:50:01Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +283,287 @@      val arity = builtin.arity\n      val actuals = new util.ArrayList[SValue](arity)\n      for (i <- 0 to arity - 1) {\n        val arg = args(i)\n        val v = arg.lookupValue(machine)"
  },
  {
    "id" : "85f8a075-5b7e-4229-b7c9-b3768c9c915a",
    "prId" : 6918,
    "comments" : [
      {
        "id" : "5513d4fe-6ff5-41b3-b9d2-b04c0633e62b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Note to self: Should we merge this with `SEApp` and use it as a smart constructor?",
        "createdAt" : "2020-08-12T07:51:35Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +159,163 @@  }\n\n  object SEAppAtomic {\n    // smart constructor: detect special case of saturated builtin application\n    def apply(func: SExprAtomic, args: Array[SExprAtomic]): SExpr = {"
  },
  {
    "id" : "e325a2b2-8faf-4e96-a111-b0e13a09dcb1",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "81c03a8d-974b-471a-b41b-a8d3ad3b0269",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Once this PR has landed, let's please benchmark if passing the `args` directly to `builtin.execute` and letting the latter do the lookups makes a significant difference. This should avoid the allocation of lots of very short-lived arrays. This applies in quite a few other places too.",
        "createdAt" : "2020-06-26T12:06:50Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2631d8b2-4506-4424-8c9d-caac6cad18d8",
        "parentId" : "81c03a8d-974b-471a-b41b-a8d3ad3b0269",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I made a issue for this: #6522\r\n",
        "createdAt" : "2020-06-29T13:57:31Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "be899766-f725-4816-829c-b9b69f61c119",
        "parentId" : "81c03a8d-974b-471a-b41b-a8d3ad3b0269",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Merci.",
        "createdAt" : "2020-06-30T08:18:26Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +151,155 @@        actuals.add(v)\n      }\n      builtin.execute(actuals, machine)\n    }\n  }"
  },
  {
    "id" : "f8c10e63-69d6-462e-9a0d-59335d24ae32",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "e5414f7c-46ed-4a93-b414-02bf6cbafa8a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "After this has landed, let's consider changing `execute` for (at least non-hungry) builtins to return the result rather than return via mutable state.",
        "createdAt" : "2020-06-26T12:13:41Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3a72c8ad-8d94-4cc1-b88b-05a9b4e1582e",
        "parentId" : "e5414f7c-46ed-4a93-b414-02bf6cbafa8a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. This is what this TODO says.\r\nAnd the matching TODO in `SBuiltin` continues:\r\n```\r\n  // TODO: define evaluate, and convert all subclasses to this simpler form\r\n  // def evaluate(args: util.ArrayList[SValue]): SValue\r\n```",
        "createdAt" : "2020-06-29T12:08:44Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ad9fe4bb-a6dc-4125-a7ce-b035887d6896",
        "parentId" : "e5414f7c-46ed-4a93-b414-02bf6cbafa8a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "See issue: #6523",
        "createdAt" : "2020-06-29T13:57:43Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +271,275 @@      // TODO: define/call builtin.evaluate() to get the SValue directly\n      // Every non-hungry SBuiltin assigns an SValue to returnValue when we call execute()\n      builtin.execute(actuals, machine)\n      if (machine.returnValue == null) {\n        crash(\"SELet1Builtin, called SBuiltin.execute(), but didn't get returnValue\")"
  },
  {
    "id" : "827af629-5556-4064-ac93-22d7918e3e54",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The old implementation batched nested `let` bindings together. This saved us a trip through the main loop for each binding after the first one. What's the reason for not doing this anymore?",
        "createdAt" : "2020-06-26T12:18:20Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05dd19cc-a58c-40fb-ba98-ddbac260d4e0",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Because we have a special case for the subclass `SELet1Builtin` for performance.",
        "createdAt" : "2020-06-29T12:09:21Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fc7c3df5-d3d9-4fcb-99f9-48552ca07c89",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is that stopping us from batching in the not so special cases?",
        "createdAt" : "2020-06-29T13:35:27Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f1c6dcf-9095-40f1-8e34-7303a9c0d191",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "it would make the code way more complicated",
        "createdAt" : "2020-06-30T09:01:14Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "97174d86-4bcf-44b2-9964-04cb2debe829",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't see how it would make the code significantly more complicated. A smart constructor for `SELet1General` could solve the problem quite easily, couldn't it?",
        "createdAt" : "2020-06-30T10:24:14Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "49172ab8-8a3c-4419-9ef2-ed843dc771eb",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I will take a look...",
        "createdAt" : "2020-06-30T10:35:52Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "15227c8a-9451-4519-9839-bcf3f4de7a81",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "So if I understand, you want `SELetBuiltin` to be a smart constructor which would combine separate lets into a multi-let, constructing the expression form: `SELet(bounds: Array[SExpr], body: SExpr)`.\r\n\r\nThe trouble with this is that the special case of `SEAppAtomicSaturatedBuiltin` would be detected at run time instead of compile time as it is now.\r\n\r\nBut worse: the execution of  `SELet1General` and `SELet1Builtin` are very different - one pushes continuations, the other doesn't - one sets `machine.control` to `rhs`, the other to `body`.\r\n\r\nI'm having trouble seeing this two different ways to execute a single-let can be easily reconciled/combined as the loop-body code for a multi `SELet` execution. I think it would involve constructing new `SELet1` expressions with suffixes of the rhss-list.\r\n",
        "createdAt" : "2020-06-30T11:16:16Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b898dbb9-fa04-425b-ae17-76ee7214f7d3",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I only meant batching `SELet1General` and leaving `SELet1Builtin` as is. Would that work? Either way, let's leave it for a separate PR in order to move forward with this.",
        "createdAt" : "2020-06-30T11:37:34Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8f8f865a-4f6d-45dd-9f9d-9eeb2ce1011f",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can you please make a ticket for this.",
        "createdAt" : "2020-06-30T11:37:50Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5a10588b-4643-4e68-9d90-cade03620b1d",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think this ticket is still missing.",
        "createdAt" : "2020-06-30T16:45:52Z",
        "updatedAt" : "2020-06-30T16:46:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a495421-c33a-4f8a-8a2f-756eaa137eef",
        "parentId" : "520b6934-412c-4691-8dd9-9d27bb3a9e6d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "https://github.com/digital-asset/daml/issues/6557",
        "createdAt" : "2020-07-01T08:02:08Z",
        "updatedAt" : "2020-07-01T08:02:08Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +250,254 @@\n  /** A let-expression with a single RHS */\n  final case class SELet1General(rhs: SExpr, body: SExpr) extends SExpr with SomeArrayEquals {\n    def execute(machine: Machine): Unit = {\n      machine.pushKont(KPushTo(machine.env, body, machine.frame, machine.actuals, machine.env.size))"
  },
  {
    "id" : "77b87fb8-2f0d-483a-9e85-8507dd21f559",
    "prId" : 6104,
    "comments" : [
      {
        "id" : "1f37ece8-ba6e-4510-b362-17c3b0741592",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It would be great to have doc comments for both `SEAppA` and `SEAppE` and a few words about how they differ. Maybe we could also find slightly more descriptive names, something like `SEAppKnown` and `SEAppUnknown`.",
        "createdAt" : "2020-06-02T09:27:31Z",
        "updatedAt" : "2020-06-02T10:12:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d59cfc7-1bcf-460d-845b-d7ccf45332e4",
        "parentId" : "1f37ece8-ba6e-4510-b362-17c3b0741592",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I'll improve the doc/naming in my current (related) PR",
        "createdAt" : "2020-06-02T10:39:51Z",
        "updatedAt" : "2020-06-02T10:39:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +129,133 @@  }\n\n  final case class SEAppA(fun: SExprAtomic, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n    def execute(machine: Machine): Unit = {\n      val vfun = fun.evaluate(machine)"
  },
  {
    "id" : "60ebd6d9-0e06-4c84-9808-86e44c1965f4",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "e3599a3e-6bf1-4142-98a9-061f74fd92ad",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think we should remove this intermediate class and make the `SELocX` classes direct subclasses of `SExpr` with their own implementation of `execute`. This will make the code shorter and avoid one dynamic dispatch on each variable lookup. I would consider that a win-win situation. 😃",
        "createdAt" : "2020-05-18T16:01:59Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f60b2d47-d457-43e8-8ba1-6f792701d438",
        "parentId" : "e3599a3e-6bf1-4142-98a9-061f74fd92ad",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Problem is that `SELoc` is also used here:\r\n```\r\n final case class SEMakeClo(fvs: Array[SELoc], arity: Int, body: SExpr)\r\n```\r\nI could perhaps try hand inlining the calls to `lookup` from `execute` in each of the 3 sub classes. See if that has any effect...",
        "createdAt" : "2020-05-18T17:08:07Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f4d0a0ae-26c4-4499-8a4e-1063e06af9fa",
        "parentId" : "e3599a3e-6bf1-4142-98a9-061f74fd92ad",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Nope.\r\nIn fact the time went up from 92 to 93 ms/op on the `CollectAuthority` bench.\r\nBut just noise I suspect.",
        "createdAt" : "2020-05-18T17:26:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cbee6f47-ac0a-4990-aebe-63bb6b6624e9",
        "parentId" : "e3599a3e-6bf1-4142-98a9-061f74fd92ad",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "After last week... I have come to the opinion that trying to second guess the JVM on stuff like this is very unlikely to have noticeable results.",
        "createdAt" : "2020-05-18T17:27:38Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "15854263-3eb4-4357-9243-6e9ab7b0f423",
        "parentId" : "e3599a3e-6bf1-4142-98a9-061f74fd92ad",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That makes a lot of sense. Thanks for the explanation.",
        "createdAt" : "2020-05-19T17:31:31Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +149,153 @@    S/A/F, indicating [S]tack, [A]argument, or [F]ree variable captured by a closure.\n    */\n  sealed abstract class SELoc extends SExpr {\n    def lookup(machine: Machine): SValue\n    def execute(machine: Machine): Unit = {"
  },
  {
    "id" : "6db1f4a1-83c8-41cc-85cc-4fd252bcc285",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "e70a73d3-8720-4370-9b0b-39af0acc216c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    * This expression form is only allowed prior to closure conversion.\r\n```",
        "createdAt" : "2020-05-19T17:29:58Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +41,45 @@    * which could be an SELam, SELet, or a binding variant of SECasePat.\n    * https://en.wikipedia.org/wiki/De_Bruijn_index\n    * This expression form is only allowed prior to closure conversion\n    */\n  final case class SEVar(index: Int) extends SExpr {"
  },
  {
    "id" : "8ed8fdc0-3250-4909-a73d-4f01ac31cce4",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "6cc466ef-befa-45f1-b75e-e98a50cf84d1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "As long as the field in `Machine` is called `env`, we should not change the comment here. I'm open to renaming `env` to `stack` in a separate PR though. Same below.",
        "createdAt" : "2020-05-19T17:33:48Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +302,306 @@  sealed trait SCasePat\n\n  /** Match on a variant. On match the value is unboxed and pushed to stack. */\n  final case class SCPVariant(id: Identifier, variant: Name, constructorRank: Int) extends SCasePat\n"
  },
  {
    "id" : "1466b6cf-8d63-498f-a904-70e91a188c32",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "2a85a225-971d-4c4d-95a4-fc2877c3325e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Just to make sure I fully understand what's going in here: We need to reset the frame pointer when we run the `KMatch` continuation because evaluating the scrutinee might have involved a function call and that function call has set the frame pointer to something else and not cleaned up after itself? Is that correct?\r\nI suggest you add comment somewhere explaining which of the caller-saves vs callee-saves strategies we're using in Speedy and what ramifications that has.",
        "createdAt" : "2020-05-19T18:20:21Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4c86f438-1b67-4c2b-add3-d16ebc1da9bd",
        "parentId" : "2a85a225-971d-4c4d-95a4-fc2877c3325e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Your understand is correct. :smile: \r\nI added a big chunky comment to help future readers.",
        "createdAt" : "2020-05-20T07:05:38Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +180,184 @@  final case class SECase(scrut: SExpr, alts: Array[SCaseAlt]) extends SExpr with SomeArrayEquals {\n    def execute(machine: Machine): Unit = {\n      machine.pushKont(KMatch(alts, machine.frame, machine.env.size))\n      machine.ctrl = scrut\n    }"
  },
  {
    "id" : "d568ac9a-b060-40ab-a39b-4b3d253040d8",
    "prId" : 5859,
    "comments" : [
      {
        "id" : "966ddbf9-8d19-4153-9185-f2f843dfb594",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    // This is similar to how `String#hashCode()` evaluation is cached.\r\n```",
        "createdAt" : "2020-05-06T08:37:00Z",
        "updatedAt" : "2020-05-06T19:02:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "898c7dcb31b91d56e979cfe03cfaa9d92ceb28f1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +62,66 @@    // that guarantees the write of `_cache` (in the method\n    // `setCached`) is done atomically.\n    // This is similar how hashcode evaluation is cached in String\n    // http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/lang/String.java\n    private var _cached: Option[(SValue, List[Location])] = None"
  },
  {
    "id" : "ce32880b-d40b-4da4-9da3-47b8c3797970",
    "prId" : 5859,
    "comments" : [
      {
        "id" : "c16bfcdf-f44a-45ec-a5b1-ecfe48c29adc",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    // full re-evaluation of the body of the definition.\r\n```",
        "createdAt" : "2020-05-06T08:37:07Z",
        "updatedAt" : "2020-05-06T19:02:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "898c7dcb31b91d56e979cfe03cfaa9d92ceb28f1",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +57,61 @@    // LF value defined by `ref` once it has been computed.  Hence we\n    // avoid both the lookup in the package definition HashMap and the\n    // full reevaluation of the body of the definition.\n    // Here we take advantage of the Java memory model\n    // (https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7)"
  },
  {
    "id" : "f01a5a42-0778-42c2-a0c0-0f6f404c0ba7",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "957b87af-5830-47c6-a52e-8137654e2944",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "This change looks not as pretty as original code, but Yourkit profiler showed that calling `map` on `fv` overly abused `ArrayOps` with turned out to be terribly slow. So this old fashion way of iterating over array has improved speed dramatically.",
        "createdAt" : "2020-01-06T03:13:56Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d1a0f25-1239-45f3-9eb4-4af0c8ae2f99",
        "parentId" : "957b87af-5830-47c6-a52e-8137654e2944",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I would like to have real benchmarks for this kinds of changes. \r\nWhat do you think @dajmaki ?",
        "createdAt" : "2020-01-06T08:40:25Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "59f3fef3-2748-446c-8e89-e0ba582dcaee",
        "parentId" : "957b87af-5830-47c6-a52e-8137654e2944",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I'm fine with these type of changes. Would definitely be interested in hearing how big of an improvement this was.",
        "createdAt" : "2020-01-06T12:41:38Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c791b2a8-0b86-4bcf-91da-49fef73ed8a7",
        "parentId" : "957b87af-5830-47c6-a52e-8137654e2944",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "if @dajmaki  is happy, I am happy.  ",
        "createdAt" : "2020-01-06T13:31:36Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "85337a79-26c5-4568-aa2e-e15236e340e5",
        "parentId" : "957b87af-5830-47c6-a52e-8137654e2944",
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Some results from ScalaMeter (this performance pit was actually found using YourKit, I'm using ScalaMeter just to prove a point):\r\n1. Iterating through array old-fashion way\r\n```\r\n      val length = arr.length\r\n      var i = 0\r\n      while (i < length) {\r\n        arr(i)\r\n        i += 1\r\n      }\r\n```\r\ntook `Parameters(size -> 15000000): 3.17E-4 ms`\r\n\r\n2. Iterating through array using `map`\r\n      ```map.map(_ => ())```\r\ntook `Parameters(size -> 15000000): 67.933929 ms`\r\n\r\nThe difference is huge, which is even more crucial for this code as it runs so many times.\r\n\r\nIf interested why this slow down happens, it's because Array gets converted into ArrayOps and then it calls some partial functions.",
        "createdAt" : "2020-01-07T23:34:43Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +110,114 @@\n    def execute(machine: Machine): Ctrl = {\n      def convertToSValues(fv: Array[Int], getEnv: Int => SValue) = {\n        val sValues = new Array[SValue](fv.length)\n        var i = 0"
  },
  {
    "id" : "5932d5d4-b1ee-4aee-a64c-a8b7c31f99df",
    "prId" : 2596,
    "comments" : [
      {
        "id" : "abebcbe0-17a1-4757-b123-d28f2d8abfb3",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "comment moved to previous line",
        "createdAt" : "2019-08-19T15:20:30Z",
        "updatedAt" : "2019-08-19T15:21:09Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a1c9c84e-d4f3-4968-b269-40f02a9649cf",
        "parentId" : "abebcbe0-17a1-4757-b123-d28f2d8abfb3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The auto formatter is doing that. I tried to undo it and the formatter did it again. :(",
        "createdAt" : "2019-08-19T15:38:02Z",
        "updatedAt" : "2019-08-19T15:38:03Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76ed9fa74de7cba87d311eddcb078a95a870805e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +311,315 @@        3,\n        // case xs of\n        SECase(SEVar(1)) of (// nil -> z\n        SCaseAlt(SCPNil, SEVar(2)),\n        // cons y ys ->"
  }
]