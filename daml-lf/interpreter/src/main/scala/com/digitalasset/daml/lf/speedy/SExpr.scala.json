[
  {
    "id" : "4c05e10c-6971-45c9-a0c5-818c37e6eb01",
    "prId" : 7540,
    "comments" : [
      {
        "id" : "0d278026-87f4-4fa2-b3fd-4abde0b7321e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I never was a big fan of this. ðŸ˜¸ ",
        "createdAt" : "2020-10-01T10:39:09Z",
        "updatedAt" : "2020-10-01T13:51:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e55637f913c36a84131d8d78a5fd33c7acea709e",
    "line" : 63,
    "diffHunk" : "@@ -335,24 +335,6 @@ object SExpr {\n     }\n   }\n \n-  object SELet {\n-\n-    // Helpers for constructing let expressions:\n-    // Instead of\n-    //   SELet(Array(SEVar(4), SEVar(1)), SEVar(1))\n-    // you can write:\n-    //   SELet(\n-    //     SEVar(4),\n-    //     SEVar(1)\n-    //   ) in SEVar(1)\n-    case class PartialSELet(bounds: Array[SExpr]) extends SomeArrayEquals {\n-      def in(body: => SExpr): SExpr = SELet(bounds, body)\n-    }\n-\n-    def apply(bounds: SExpr*) = PartialSELet(bounds.toArray)\n-\n-  }"
  },
  {
    "id" : "fc25fe54-7257-45a0-bfe4-b2a69b0cec50",
    "prId" : 7540,
    "comments" : [
      {
        "id" : "5cfef967-9fba-498e-b965-72dd3756bbd0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "\"not implemented\" sounds to me like we'll implement it in the future.\r\n```suggestion\r\n      crash(\"unexpected SELet during execution\")\r\n```",
        "createdAt" : "2020-10-01T11:53:26Z",
        "updatedAt" : "2020-10-01T13:51:34Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e55637f913c36a84131d8d78a5fd33c7acea709e",
    "line" : 62,
    "diffHunk" : "@@ -307,50 +306,14 @@ object SExpr {\n     }\n   }\n \n-  /** A non-recursive, non-parallel let block. Each bound expression\n-    * is evaluated in turn and pushed into the environment one by one,\n-    * with later expressions possibly referring to earlier.\n+  /** A non-recursive, non-parallel let block.\n+    * It is used as an intermediary data structure by the compiler to\n+    * mitigate stack overflow issues, but are later exploded into\n+    * [[SELet1General]] and [[SELet1Builtin]] by the ANF transformation.\n     */\n-  final case class SELet(bounds: Array[SExpr], body: SExpr) extends SExpr with SomeArrayEquals {\n-    def execute(machine: Machine): Unit = {\n-\n-      // Evaluate the body after we've evaluated the binders\n-      machine.pushKont(\n-        KPushTo(\n-          machine.env,\n-          body,\n-          machine.frame,\n-          machine.actuals,\n-          machine.env.size + bounds.size - 1))\n-\n-      // Start evaluating the let binders\n-      var i = 1\n-      while (i < bounds.size) {\n-        val b = bounds(bounds.size - i)\n-        val expectedEnvSize = machine.env.size + bounds.size - i - 1\n-        machine.pushKont(KPushTo(machine.env, b, machine.frame, machine.actuals, expectedEnvSize))\n-        i += 1\n-      }\n-      machine.ctrl = bounds.head\n-    }\n-  }\n-\n-  object SELet {\n-\n-    // Helpers for constructing let expressions:\n-    // Instead of\n-    //   SELet(Array(SEVar(4), SEVar(1)), SEVar(1))\n-    // you can write:\n-    //   SELet(\n-    //     SEVar(4),\n-    //     SEVar(1)\n-    //   ) in SEVar(1)\n-    case class PartialSELet(bounds: Array[SExpr]) extends SomeArrayEquals {\n-      def in(body: => SExpr): SExpr = SELet(bounds, body)\n-    }\n-\n-    def apply(bounds: SExpr*) = PartialSELet(bounds.toArray)\n-\n+  final case class SELet(bounds: List[SExpr], body: SExpr) extends SExpr {\n+    def execute(machine: Machine): Unit =\n+      crash(\"not implemented\")"
  },
  {
    "id" : "7cf7a8a8-59d8-44a2-8abb-ceae3d1727d9",
    "prId" : 7472,
    "comments" : [
      {
        "id" : "a886437c-3b28-47b5-be21-c249070ff896",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Does `Profile.scala` need to be extended to handle `ChoiceByKeyDefRef` and friends (as is done for `ChoiceDefRef`) ?\r\n",
        "createdAt" : "2020-09-24T13:02:55Z",
        "updatedAt" : "2020-09-28T17:01:45Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6f87982ebeaafdd21277c2bc4c42b1f7319643a1",
    "line" : 13,
    "diffHunk" : "@@ -447,6 +447,12 @@ object SExpr {\n   final case class LfDefRef(ref: DefinitionRef) extends SDefinitionRef\n   // references to definitions generated by the Speedy compiler\n   final case class ChoiceDefRef(ref: DefinitionRef, choiceName: ChoiceName) extends SDefinitionRef\n+  final case class ChoiceByKeyDefRef(ref: DefinitionRef, choiceName: ChoiceName)"
  },
  {
    "id" : "018c320e-063e-4e3c-b1c7-cde9e2387d76",
    "prId" : 7126,
    "comments" : [
      {
        "id" : "1fdba7d4-0898-45a5-9265-c8abed588bb3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      var i = 1\r\n```",
        "createdAt" : "2020-08-14T12:25:35Z",
        "updatedAt" : "2020-08-17T11:45:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f9a99e17-9dd5-4dc7-811f-c925be6626cc",
        "parentId" : "1fdba7d4-0898-45a5-9265-c8abed588bb3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Ah, that's why the tests were failing. Good catch. Thank you.",
        "createdAt" : "2020-08-17T11:45:06Z",
        "updatedAt" : "2020-08-17T11:45:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fea1bb433e970af25cf27f0344f136da68108531",
    "line" : null,
    "diffHunk" : "@@ -320,10 +324,12 @@ object SExpr {\n           machine.env.size + bounds.size - 1))\n \n       // Start evaluating the let binders\n-      for (i <- 1 until bounds.size) {\n+      var i = 0"
  },
  {
    "id" : "81f4d0e5-cb2c-43dd-ba11-17e16db70356",
    "prId" : 6918,
    "comments" : [
      {
        "id" : "ad1c9815-ea00-4fbd-99f9-cfb8fe2d5ece",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Note to self: This should be a `while` loop to avoid allocating the sequence object.",
        "createdAt" : "2020-08-12T07:47:27Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 37,
    "diffHunk" : "@@ -125,45 +125,47 @@ object SExpr {\n     }\n   }\n \n-  /** Function application:\n-    Special case: 'fun' is a builtin; size of `args' matches the builtin arity.\n-    */\n-  // A fully saturated builtin application\n-  final case class SEAppSaturatedBuiltinFun(builtin: SBuiltin, args: Array[SExpr])\n+  object SEApp {\n+    def apply(fun: SExpr, args: Array[SExpr]): SExpr = {\n+      SEAppGeneral(fun, args)\n+    }\n+  }\n+\n+  /** Function application: ANF case: 'fun' and 'args' are atomic expressions */\n+  final case class SEAppAtomicGeneral(fun: SExprAtomic, args: Array[SExprAtomic])\n       extends SExpr\n       with SomeArrayEquals {\n-    if (args.size != builtin.arity) {\n-      throw SErrorCrash(s\"SEAppB: arg.size != builtin.arity\")\n+    def execute(machine: Machine): Unit = {\n+      val vfun = fun.lookupValue(machine)\n+      enterApplication(machine, vfun, args)\n     }\n+  }\n+\n+  /** Function application: ANF case: 'fun' is builtin; 'args' are atomic expressions.  Size\n+    * of `args' matches the builtin arity. */\n+  final case class SEAppAtomicSaturatedBuiltin(builtin: SBuiltin, args: Array[SExprAtomic])\n+      extends SExpr\n+      with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n       val arity = builtin.arity\n       val actuals = new util.ArrayList[SValue](arity)\n-      machine.pushKont(KBuiltin(builtin, actuals, machine.env.size))\n-      evaluateArguments(machine, actuals, args, args.length);\n+      for (i <- 0 to arity - 1) {"
  },
  {
    "id" : "9e0db43a-17e1-4d17-be2e-b6510ad2dcc9",
    "prId" : 6918,
    "comments" : [
      {
        "id" : "e21450ab-7c29-4c6c-8311-bb5de1668d91",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Note to self: See if we can share code with `SEAppAtomicSaturatedBuiltin#execute`.",
        "createdAt" : "2020-08-12T07:50:01Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 105,
    "diffHunk" : "@@ -256,6 +258,51 @@ object SExpr {\n     def apply(scrut: SExpr) = PartialSECase(scrut)\n   }\n \n+  final case class SECaseAtomic(scrut: SExprAtomic, alts: Array[SCaseAlt])\n+      extends SExpr\n+      with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      val vscrut = scrut.lookupValue(machine)\n+      executeMatchAlts(machine, alts, vscrut)\n+    }\n+  }\n+\n+  /** A let-expression with a single RHS */\n+  final case class SELet1General(rhs: SExpr, body: SExpr) extends SExpr with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      machine.pushKont(KPushTo(machine.env, body, machine.frame, machine.actuals, machine.env.size))\n+      machine.ctrl = rhs\n+    }\n+  }\n+\n+  /** A (single) let-expression with an unhungry,saturated builtin-application as RHS */\n+  final case class SELet1Builtin(builtin: SBuiltinPure, args: Array[SExprAtomic], body: SExpr)\n+      extends SExpr\n+      with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      val arity = builtin.arity\n+      val actuals = new util.ArrayList[SValue](arity)\n+      for (i <- 0 to arity - 1) {"
  },
  {
    "id" : "9dcf04ae-5058-4f89-855d-ff15c2f27f26",
    "prId" : 6918,
    "comments" : [
      {
        "id" : "e6eff257-8e1d-4e7b-9f1d-9dac1de25602",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Note to self: Should we merge this with `SEApp` and use it as a smart constructor?",
        "createdAt" : "2020-08-12T07:51:35Z",
        "updatedAt" : "2020-08-12T08:04:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a92f961786f34509dbaa09fc380a83b8561bc236",
    "line" : 52,
    "diffHunk" : "@@ -125,45 +125,47 @@ object SExpr {\n     }\n   }\n \n-  /** Function application:\n-    Special case: 'fun' is a builtin; size of `args' matches the builtin arity.\n-    */\n-  // A fully saturated builtin application\n-  final case class SEAppSaturatedBuiltinFun(builtin: SBuiltin, args: Array[SExpr])\n+  object SEApp {\n+    def apply(fun: SExpr, args: Array[SExpr]): SExpr = {\n+      SEAppGeneral(fun, args)\n+    }\n+  }\n+\n+  /** Function application: ANF case: 'fun' and 'args' are atomic expressions */\n+  final case class SEAppAtomicGeneral(fun: SExprAtomic, args: Array[SExprAtomic])\n       extends SExpr\n       with SomeArrayEquals {\n-    if (args.size != builtin.arity) {\n-      throw SErrorCrash(s\"SEAppB: arg.size != builtin.arity\")\n+    def execute(machine: Machine): Unit = {\n+      val vfun = fun.lookupValue(machine)\n+      enterApplication(machine, vfun, args)\n     }\n+  }\n+\n+  /** Function application: ANF case: 'fun' is builtin; 'args' are atomic expressions.  Size\n+    * of `args' matches the builtin arity. */\n+  final case class SEAppAtomicSaturatedBuiltin(builtin: SBuiltin, args: Array[SExprAtomic])\n+      extends SExpr\n+      with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n       val arity = builtin.arity\n       val actuals = new util.ArrayList[SValue](arity)\n-      machine.pushKont(KBuiltin(builtin, actuals, machine.env.size))\n-      evaluateArguments(machine, actuals, args, args.length);\n+      for (i <- 0 to arity - 1) {\n+        val arg = args(i)\n+        val v = arg.lookupValue(machine)\n+        actuals.add(v)\n+      }\n+      builtin.execute(actuals, machine)\n     }\n   }\n \n-  object SEApp {\n-\n-    def apply(fun: SExpr, args: Array[SExpr]): SExpr = {\n-      fun match {\n-        // Detect special cases of function-application which can we executed more efficiently\n-\n+  object SEAppAtomic {"
  },
  {
    "id" : "0bcfcc91-34b5-444d-a114-9283332aa0cd",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "59ce8ced-6b01-4a66-86d4-ec5490aa3934",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Once this PR has landed, I suggest we rename this method to something like `lookupValue`. The name `evaluate` is quite confusing when the whole point of atomic expressions is that you can get their value without any further evaluation.",
        "createdAt" : "2020-06-22T09:22:04Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "12c9b832-ac2c-49fe-a306-f91d1273b6dc",
        "parentId" : "59ce8ced-6b01-4a66-86d4-ec5490aa3934",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Right. I guess the distinction between `evaluate()` and `execute()` is rather subtle, and more explicit terminology would be helpful.",
        "createdAt" : "2020-06-22T09:42:18Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c01ad4a1-94ae-4e07-8150-bac324c0e7cb",
        "parentId" : "59ce8ced-6b01-4a66-86d4-ec5490aa3934",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "renamed to `lookupValue`",
        "createdAt" : "2020-06-25T10:28:56Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -37,6 +37,11 @@ object SExpr {\n \n   sealed abstract class SExprAtomic extends SExpr {\n     def evaluate(machine: Machine): SValue"
  },
  {
    "id" : "2a639b24-2a10-400d-bd9d-c565ad69b4b6",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "ef38e666-6348-4479-a91a-33cad3d90b11",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What's the value of leaving this around?\r\n```suggestion\r\n```",
        "createdAt" : "2020-06-26T12:00:59Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64850549-3709-4aeb-a29f-b64c25314616",
        "parentId" : "ef38e666-6348-4479-a91a-33cad3d90b11",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "it's gone",
        "createdAt" : "2020-06-30T15:09:48Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -93,88 +95,75 @@ object SExpr {\n           SPAP(PBuiltin(b), new util.ArrayList(), b.arity)\n       }\n     }\n-    def execute(machine: Machine): Unit = {\n-      /* special case for nullary record constructors */\n-      machine.returnValue = b match {\n-        case SBRecCon(id, fields) if b.arity == 0 =>\n-          SRecord(id, fields, new util.ArrayList())\n-        case _ =>\n-          SPAP(PBuiltin(b), new util.ArrayList(), b.arity)\n-      }\n-    }\n   }\n \n   /** A pre-computed value, usually primitive literal, e.g. integer, text, boolean etc. */\n   final case class SEValue(v: SValue) extends SExprAtomic {\n-    def evaluate(machine: Machine): SValue = {\n+    def lookupValue(machine: Machine): SValue = {\n       v\n     }\n-    def execute(machine: Machine): Unit = {\n-      machine.returnValue = v\n-    }\n   }\n \n   object SEValue extends SValueContainer[SEValue]\n \n-  /** Function application:\n-    General case: 'fun' and 'args' are any kind of expression */\n+  /** Function application: General case: 'fun' and 'args' are any kind of expression */\n   final case class SEAppGeneral(fun: SExpr, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n-      machine.pushKont(KArg(args, machine.frame, machine.actuals, machine.env.size))\n-      machine.ctrl = fun\n+      //machine.pushKont(KArg(args, machine.frame, machine.actuals, machine.env.size))\n+      //machine.ctrl = fun"
  },
  {
    "id" : "4dd54874-0609-4771-9920-99c1efc7776e",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "7bdce1a4-3a06-4c17-a692-9d95c8752423",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Once this PR has landed, let's please benchmark if passing the `args` directly to `builtin.execute` and letting the latter do the lookups makes a significant difference. This should avoid the allocation of lots of very short-lived arrays. This applies in quite a few other places too.",
        "createdAt" : "2020-06-26T12:06:50Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8d97e464-a2b5-4eca-be7a-651bda664e86",
        "parentId" : "7bdce1a4-3a06-4c17-a692-9d95c8752423",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I made a issue for this: #6522\r\n",
        "createdAt" : "2020-06-29T13:57:31Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cc9dd7c0-8896-4b24-9c58-cd444b294e5e",
        "parentId" : "7bdce1a4-3a06-4c17-a692-9d95c8752423",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Merci.",
        "createdAt" : "2020-06-30T08:18:26Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 128,
    "diffHunk" : "@@ -93,88 +95,75 @@ object SExpr {\n           SPAP(PBuiltin(b), new util.ArrayList(), b.arity)\n       }\n     }\n-    def execute(machine: Machine): Unit = {\n-      /* special case for nullary record constructors */\n-      machine.returnValue = b match {\n-        case SBRecCon(id, fields) if b.arity == 0 =>\n-          SRecord(id, fields, new util.ArrayList())\n-        case _ =>\n-          SPAP(PBuiltin(b), new util.ArrayList(), b.arity)\n-      }\n-    }\n   }\n \n   /** A pre-computed value, usually primitive literal, e.g. integer, text, boolean etc. */\n   final case class SEValue(v: SValue) extends SExprAtomic {\n-    def evaluate(machine: Machine): SValue = {\n+    def lookupValue(machine: Machine): SValue = {\n       v\n     }\n-    def execute(machine: Machine): Unit = {\n-      machine.returnValue = v\n-    }\n   }\n \n   object SEValue extends SValueContainer[SEValue]\n \n-  /** Function application:\n-    General case: 'fun' and 'args' are any kind of expression */\n+  /** Function application: General case: 'fun' and 'args' are any kind of expression */\n   final case class SEAppGeneral(fun: SExpr, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n-      machine.pushKont(KArg(args, machine.frame, machine.actuals, machine.env.size))\n-      machine.ctrl = fun\n+      //machine.pushKont(KArg(args, machine.frame, machine.actuals, machine.env.size))\n+      //machine.ctrl = fun\n+      // We never encounter a general application node when executing on the speedy machine\n+      // This is because all speedy expression must have been converted to ANF form\n+      // The wrapper type `AExpr` helps ensure this restrction is adhered to.\n+      // Better still would be to properly separate the `SExpr` and `AExpr` types.\n+      throw SErrorCrash(s\"execute: unexpected SEAppGeneral\")\n+    }\n+  }\n+\n+  object SEApp {\n+    //TODO: SEApp is no longer a smart constructor; remove this indirection.\n+    def apply(fun: SExpr, args: Array[SExpr]): SExpr = {\n+      SEAppGeneral(fun, args)\n     }\n   }\n \n-  /** Function application:\n-    Special case: 'fun' is an atomic expression. */\n-  final case class SEAppAtomicFun(fun: SExprAtomic, args: Array[SExpr])\n+  /** Function application: ANF case: 'fun' and 'args' are atomic expressions */\n+  final case class SEAppAtomicGeneral(fun: SExprAtomic, args: Array[SExprAtomic])\n       extends SExpr\n       with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n-      val vfun = fun.evaluate(machine)\n-      executeApplication(machine, vfun, args)\n+      val vfun = fun.lookupValue(machine)\n+      //TODO: evaluate args to SValue here\n+      enterApplication(machine, vfun, args)\n     }\n   }\n \n-  /** Function application:\n-    Special case: 'fun' is a builtin; size of `args' matches the builtin arity.\n-    */\n-  // A fully saturated builtin application\n-  final case class SEAppSaturatedBuiltinFun(builtin: SBuiltin, args: Array[SExpr])\n+  /** Function application: ANF case: 'fun' is builtin; 'args' are atomic expressions.  Size\n+    * of `args' matches the builtin arity. */\n+  final case class SEAppAtomicSaturatedBuiltin(\n+      builtin: SBuiltinMaybeHungry,\n+      args: Array[SExprAtomic])\n       extends SExpr\n       with SomeArrayEquals {\n-    if (args.size != builtin.arity) {\n-      throw SErrorCrash(s\"SEAppB: arg.size != builtin.arity\")\n-    }\n     def execute(machine: Machine): Unit = {\n       val arity = builtin.arity\n       val actuals = new util.ArrayList[SValue](arity)\n-      machine.pushKont(KBuiltin(builtin, actuals, machine.env.size))\n-      evaluateArguments(machine, actuals, args, args.length);\n+      for (i <- 0 to arity - 1) {\n+        val arg = args(i)\n+        val v = arg.lookupValue(machine)\n+        actuals.add(v)\n+      }\n+      builtin.execute(actuals, machine)"
  },
  {
    "id" : "7926ee7e-d7aa-4c67-a46b-c1521c4a980a",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "efa119c6-309a-45c0-901a-8f9812656bf8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why do we have to separate names for the same thing now?",
        "createdAt" : "2020-06-26T12:07:41Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aa4714fa-cf66-41ce-adfe-154f07f5d7e1",
        "parentId" : "efa119c6-309a-45c0-901a-8f9812656bf8",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I removed the now unnecessary `lookup`",
        "createdAt" : "2020-06-29T12:07:05Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -222,12 +211,9 @@ object SExpr {\n     */\n   sealed abstract class SELoc extends SExprAtomic {\n     def lookup(machine: Machine): SValue\n-    def evaluate(machine: Machine): SValue = {\n+    def lookupValue(machine: Machine): SValue = {"
  },
  {
    "id" : "7273d3bf-ad00-4ca2-a5f6-3e4aa5c01963",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "ddef9d9e-aa9b-49fe-bc0e-b02bd9755f4d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "After this has landed, let's consider changing `execute` for (at least non-hungry) builtins to return the result rather than return via mutable state.",
        "createdAt" : "2020-06-26T12:13:41Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ea5c363-8c3f-44d1-9d81-c4ea7b082d1b",
        "parentId" : "ddef9d9e-aa9b-49fe-bc0e-b02bd9755f4d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yes. This is what this TODO says.\r\nAnd the matching TODO in `SBuiltin` continues:\r\n```\r\n  // TODO: define evaluate, and convert all subclasses to this simpler form\r\n  // def evaluate(args: util.ArrayList[SValue]): SValue\r\n```",
        "createdAt" : "2020-06-29T12:08:44Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4253b150-4057-45dc-8273-4cba0aa4bc9c",
        "parentId" : "ddef9d9e-aa9b-49fe-bc0e-b02bd9755f4d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "See issue: #6523",
        "createdAt" : "2020-06-29T13:57:43Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 262,
    "diffHunk" : "@@ -254,25 +240,63 @@ object SExpr {\n   /** Pattern match. */\n   final case class SECase(scrut: SExpr, alts: Array[SCaseAlt]) extends SExpr with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n-      machine.pushKont(KMatch(alts, machine.frame, machine.actuals, machine.env.size))\n-      machine.ctrl = scrut\n+      // All SEcase are converted to SECaseAtomic in Anf.flattenToAnf\n+      throw SErrorCrash(s\"execute: unexpected SEcase\")\n     }\n-\n     override def toString: String = s\"SECase($scrut, ${alts.mkString(\"[\", \",\", \"]\")})\"\n   }\n \n-  object SECase {\n+  final case class SECaseAtomic(scrut: SExprAtomic, alts: Array[SCaseAlt])\n+      extends SExpr\n+      with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      val vscrut = scrut.lookupValue(machine)\n+      executeMatchAlts(machine, alts, vscrut)\n+    }\n+  }\n+\n+  /** A let-expression with a single RHS */\n+  final case class SELet1General(rhs: SExpr, body: SExpr) extends SExpr with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      machine.pushKont(KPushTo(machine.env, body, machine.frame, machine.actuals, machine.env.size))\n+      machine.ctrl = rhs\n+    }\n+  }\n+\n+  /** A (single) let-expression with an unhungry,saturated builtin-application as RHS */\n+  final case class SELet1Builtin(builtin: SBuiltin, args: Array[SExprAtomic], body: SExpr)\n+      extends SExpr\n+      with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      val arity = builtin.arity\n+      val actuals = new util.ArrayList[SValue](arity)\n+      for (i <- 0 to arity - 1) {\n+        val arg = args(i)\n+        val v = arg.lookupValue(machine)\n+        actuals.add(v)\n+      }\n+      // TODO: define/call builtin.evaluate() to get the SValue directly\n+      // Every non-hungry SBuiltin assigns an SValue to returnValue when we call execute()\n+      builtin.execute(actuals, machine)"
  },
  {
    "id" : "933381bf-1be9-492f-9454-24995d49a855",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The old implementation batched nested `let` bindings together. This saved us a trip through the main loop for each binding after the first one. What's the reason for not doing this anymore?",
        "createdAt" : "2020-06-26T12:18:20Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c8de73c1-a5a4-427d-8201-9970948e1abf",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Because we have a special case for the subclass `SELet1Builtin` for performance.",
        "createdAt" : "2020-06-29T12:09:21Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f501dabf-83e2-435a-a510-18f9b63148f3",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is that stopping us from batching in the not so special cases?",
        "createdAt" : "2020-06-29T13:35:27Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1e746be3-9767-4511-b309-f8a7ff213d5c",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "it would make the code way more complicated",
        "createdAt" : "2020-06-30T09:01:14Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "baa2b6f1-49c9-4663-abb5-dba6ef2810da",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't see how it would make the code significantly more complicated. A smart constructor for `SELet1General` could solve the problem quite easily, couldn't it?",
        "createdAt" : "2020-06-30T10:24:14Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "95526aca-30ed-4bd4-b72f-fb63fb2e9937",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I will take a look...",
        "createdAt" : "2020-06-30T10:35:52Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5ad97677-b657-4330-948a-8ddd0f287ddb",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "So if I understand, you want `SELetBuiltin` to be a smart constructor which would combine separate lets into a multi-let, constructing the expression form: `SELet(bounds: Array[SExpr], body: SExpr)`.\r\n\r\nThe trouble with this is that the special case of `SEAppAtomicSaturatedBuiltin` would be detected at run time instead of compile time as it is now.\r\n\r\nBut worse: the execution of  `SELet1General` and `SELet1Builtin` are very different - one pushes continuations, the other doesn't - one sets `machine.control` to `rhs`, the other to `body`.\r\n\r\nI'm having trouble seeing this two different ways to execute a single-let can be easily reconciled/combined as the loop-body code for a multi `SELet` execution. I think it would involve constructing new `SELet1` expressions with suffixes of the rhss-list.\r\n",
        "createdAt" : "2020-06-30T11:16:16Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d0fa3202-db85-400d-8061-1e6f11de00f5",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I only meant batching `SELet1General` and leaving `SELet1Builtin` as is. Would that work? Either way, let's leave it for a separate PR in order to move forward with this.",
        "createdAt" : "2020-06-30T11:37:34Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ba84aee6-1725-4d64-92f9-b20b52ef1695",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can you please make a ticket for this.",
        "createdAt" : "2020-06-30T11:37:50Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "873bee22-824e-487a-9e96-94c4e0234aa5",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think this ticket is still missing.",
        "createdAt" : "2020-06-30T16:45:52Z",
        "updatedAt" : "2020-06-30T16:46:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bc76e66b-f7de-4542-bfd2-20212ca075fc",
        "parentId" : "9a041310-2df7-46e2-be78-c07019862c3d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "https://github.com/digital-asset/daml/issues/6557",
        "createdAt" : "2020-07-01T08:02:08Z",
        "updatedAt" : "2020-07-01T08:02:08Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 234,
    "diffHunk" : "@@ -254,25 +240,63 @@ object SExpr {\n   /** Pattern match. */\n   final case class SECase(scrut: SExpr, alts: Array[SCaseAlt]) extends SExpr with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n-      machine.pushKont(KMatch(alts, machine.frame, machine.actuals, machine.env.size))\n-      machine.ctrl = scrut\n+      // All SEcase are converted to SECaseAtomic in Anf.flattenToAnf\n+      throw SErrorCrash(s\"execute: unexpected SEcase\")\n     }\n-\n     override def toString: String = s\"SECase($scrut, ${alts.mkString(\"[\", \",\", \"]\")})\"\n   }\n \n-  object SECase {\n+  final case class SECaseAtomic(scrut: SExprAtomic, alts: Array[SCaseAlt])\n+      extends SExpr\n+      with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      val vscrut = scrut.lookupValue(machine)\n+      executeMatchAlts(machine, alts, vscrut)\n+    }\n+  }\n+\n+  /** A let-expression with a single RHS */\n+  final case class SELet1General(rhs: SExpr, body: SExpr) extends SExpr with SomeArrayEquals {"
  },
  {
    "id" : "29fc7c85-f43d-48ba-9f14-f64b39cb981c",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "dcfdf827-1f70-4e59-afa5-cb2c3f04af43",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does it make sense to have a comment saying the comments below are up-to-date? It's nice for me as a review to know but all futures readers of the code will assume the comments are up-to-date anyway.",
        "createdAt" : "2020-06-26T12:21:08Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f18b2765-3a4b-43a1-ad67-ec5f6578fd4d",
        "parentId" : "dcfdf827-1f70-4e59-afa5-cb2c3f04af43",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, fair enough",
        "createdAt" : "2020-06-29T12:11:18Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5e164775-7d57-4be7-8cb2-2bdfc18a7da4",
        "parentId" : "dcfdf827-1f70-4e59-afa5-cb2c3f04af43",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-06-29T12:12:34Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -448,107 +479,110 @@ object SExpr {\n       final case object EqualList extends Reference\n     }\n \n-    val FoldL: SEBuiltinRecursiveDefinition = SEBuiltinRecursiveDefinition(Reference.FoldL)\n-    val FoldR: SEBuiltinRecursiveDefinition = SEBuiltinRecursiveDefinition(Reference.FoldR)\n-    val EqualList: SEBuiltinRecursiveDefinition = SEBuiltinRecursiveDefinition(Reference.EqualList)\n-\n-    private val foldLBody: SExpr =\n-      // foldl f z xs =\n-      SEMakeClo(\n-        Array(),\n-        3,\n-        // case xs of\n-        SECase(SELocA(2)) of (\n-          // nil -> z\n-          SCaseAlt(SCPNil, SELocA(1)),\n-          // cons y ys ->\n-          SCaseAlt(\n+    val FoldL = SEBuiltinRecursiveDefinition(Reference.FoldL)\n+    val FoldR = SEBuiltinRecursiveDefinition(Reference.FoldR)\n+    val EqualList = SEBuiltinRecursiveDefinition(Reference.EqualList)\n+\n+    // The body of an expanded recursive-builtin will always be in ANF form.\n+    // The comments showing where variables are to be found at runtime have been\n+    // fully checked and updated during the move to ANF."
  },
  {
    "id" : "48d0d2e6-59c6-49ff-926d-7a8821e1e53e",
    "prId" : 6185,
    "comments" : [
      {
        "id" : "d086ea41-1f2e-46a1-9a68-d459c4202f17",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why not call is `SEAppSaturatedBuiltin`?",
        "createdAt" : "2020-06-02T10:43:27Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7831d0c0-5562-4e57-95cc-4b3ec6895695",
        "parentId" : "d086ea41-1f2e-46a1-9a68-d459c4202f17",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I just saw your comment on the last PR, and made a change to improve the names/doc here",
        "createdAt" : "2020-06-02T10:58:00Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c66c4bda-ca9a-4be1-9922-2a320c847552",
        "parentId" : "d086ea41-1f2e-46a1-9a68-d459c4202f17",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "your suggested name is even better. I used it",
        "createdAt" : "2020-06-02T11:32:27Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ccb206b8fe94278bc4cb13c437dbab5ed1f9d7a",
    "line" : null,
    "diffHunk" : "@@ -135,9 +135,33 @@ object SExpr {\n     }\n   }\n \n+  // A fully saturated builtin application\n+  final case class SEAppB(builtin: SBuiltin, args: Array[SExpr])"
  },
  {
    "id" : "00b95c6e-a4e5-4dec-bcf2-dad814b12b76",
    "prId" : 6185,
    "comments" : [
      {
        "id" : "ca821a5c-c10d-4d78-a27c-da965dbc7c9f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think we have this loop in multiple places now. Should we factor it out into its own function to simplify future refactorings?",
        "createdAt" : "2020-06-02T10:47:11Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c7d7609d-0b69-471f-b015-ef5036118742",
        "parentId" : "ca821a5c-c10d-4d78-a27c-da965dbc7c9f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I'll do this...",
        "createdAt" : "2020-06-02T11:08:03Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b19aa665-2e5c-4506-bddf-905e731e62a9",
        "parentId" : "ca821a5c-c10d-4d78-a27c-da965dbc7c9f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-06-02T11:32:33Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ccb206b8fe94278bc4cb13c437dbab5ed1f9d7a",
    "line" : null,
    "diffHunk" : "@@ -135,9 +135,33 @@ object SExpr {\n     }\n   }\n \n+  // A fully saturated builtin application\n+  final case class SEAppB(builtin: SBuiltin, args: Array[SExpr])\n+      extends SExpr\n+      with SomeArrayEquals {\n+    if (args.size != builtin.arity) {\n+      throw SErrorCrash(s\"SEAppB: arg.size != builtin.arity\")\n+    }\n+    def execute(machine: Machine): Unit = {\n+      val arity = builtin.arity\n+      val actuals = new util.ArrayList[SValue](arity)\n+      machine.pushKont(KBuiltin(builtin, actuals))\n+      // Start evaluating the arguments.\n+      var i = 1"
  },
  {
    "id" : "e8b80faf-44f7-4b72-bbb8-9b29f13e1d3a",
    "prId" : 6185,
    "comments" : [
      {
        "id" : "1f18c360-e0b9-4dfe-b7b5-bf92f7327537",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can't we also use this for over-applied built-ins by splitting off the required number of arguments and putting the rest into a separate `SEApp`? That's what would happen at runtime anyway, isn't it?\r\n\r\nI was also wondering if actually get the over-applied built-ins but I suppose looking up things in a map-like data structure full of functions and applying arguments to the result might be a candidate, at least in the future.",
        "createdAt" : "2020-06-02T10:52:30Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8cfd2455-1789-42f5-a12c-3f8235687163",
        "parentId" : "1f18c360-e0b9-4dfe-b7b5-bf92f7327537",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This is indeed what would happen at runtime.\r\nNot a common case I'm sure.\r\nBut, it should be easy enough to code, so we can do it...",
        "createdAt" : "2020-06-02T11:11:39Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f6827899-94e7-4dd2-bdae-826daebb5638",
        "parentId" : "1f18c360-e0b9-4dfe-b7b5-bf92f7327537",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-06-02T11:32:46Z",
        "updatedAt" : "2020-06-02T14:49:36Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ccb206b8fe94278bc4cb13c437dbab5ed1f9d7a",
    "line" : null,
    "diffHunk" : "@@ -135,9 +135,33 @@ object SExpr {\n     }\n   }\n \n+  // A fully saturated builtin application\n+  final case class SEAppB(builtin: SBuiltin, args: Array[SExpr])\n+      extends SExpr\n+      with SomeArrayEquals {\n+    if (args.size != builtin.arity) {\n+      throw SErrorCrash(s\"SEAppB: arg.size != builtin.arity\")\n+    }\n+    def execute(machine: Machine): Unit = {\n+      val arity = builtin.arity\n+      val actuals = new util.ArrayList[SValue](arity)\n+      machine.pushKont(KBuiltin(builtin, actuals))\n+      // Start evaluating the arguments.\n+      var i = 1\n+      while (i < arity) {\n+        val arg = args(arity - i)\n+        machine.pushKont(KPushTo(actuals, arg, machine.frame, machine.actuals, machine.env.size))\n+        i = i + 1\n+      }\n+      machine.ctrl = args(0)\n+    }\n+  }\n+\n   object SEApp {\n     def apply(fun: SExpr, args: Array[SExpr]): SExpr = {\n       fun match {\n+        case SEBuiltin(builtin) if optimizeAtomicApps && builtin.arity == args.length =>"
  },
  {
    "id" : "f0c52942-e17c-4172-9116-464059c38fd4",
    "prId" : 6104,
    "comments" : [
      {
        "id" : "6c046a1e-cf50-49dc-a06e-23879f095f01",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n          SRecord(id, fields, new util.ArrayList())\r\n```",
        "createdAt" : "2020-05-29T13:52:14Z",
        "updatedAt" : "2020-06-01T10:08:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "621f1a91-a6f2-4d15-8050-ce4c5cf78da9",
        "parentId" : "6c046a1e-cf50-49dc-a06e-23879f095f01",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Done\r\nThe new code was a copy of some existing code in the same style, so I fixed that too.",
        "createdAt" : "2020-06-01T10:11:51Z",
        "updatedAt" : "2020-06-01T10:11:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : null,
    "diffHunk" : "@@ -77,7 +86,16 @@ object SExpr {\n   }\n \n   /** Reference to a builtin function */\n-  final case class SEBuiltin(b: SBuiltin) extends SExpr {\n+  final case class SEBuiltin(b: SBuiltin) extends SExprAtomic {\n+    def evaluate(machine: Machine): SValue = {\n+      /* special case for nullary record constructors */\n+      b match {\n+        case SBRecCon(id, fields) if b.arity == 0 =>\n+          SRecord(id, fields, new ArrayList())"
  },
  {
    "id" : "ddcd1689-7279-4ee2-acee-a3676b0b2f2c",
    "prId" : 6104,
    "comments" : [
      {
        "id" : "4d840650-eee7-4176-a3ce-ca2fd378ac48",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n          SPAP(PBuiltin(b), new util.ArrayList(), b.arity)\r\n```",
        "createdAt" : "2020-05-29T13:52:26Z",
        "updatedAt" : "2020-06-01T10:08:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e1cf9c5-896b-4411-9c1a-b5e57f0af0e8",
        "parentId" : "4d840650-eee7-4176-a3ce-ca2fd378ac48",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-06-01T10:12:02Z",
        "updatedAt" : "2020-06-01T10:12:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : null,
    "diffHunk" : "@@ -77,7 +86,16 @@ object SExpr {\n   }\n \n   /** Reference to a builtin function */\n-  final case class SEBuiltin(b: SBuiltin) extends SExpr {\n+  final case class SEBuiltin(b: SBuiltin) extends SExprAtomic {\n+    def evaluate(machine: Machine): SValue = {\n+      /* special case for nullary record constructors */\n+      b match {\n+        case SBRecCon(id, fields) if b.arity == 0 =>\n+          SRecord(id, fields, new ArrayList())\n+        case _ =>\n+          SPAP(PBuiltin(b), new util.ArrayList[SValue](), b.arity)"
  },
  {
    "id" : "79aabb25-d719-4e8b-a931-b3293292561c",
    "prId" : 6104,
    "comments" : [
      {
        "id" : "03029c4e-4d45-4641-a039-79bd60bb00d3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      fun match {\r\n        case vfun: SExprAtomic if optimizeAtomicApps => SEAppA(vfun, args)\r\n```",
        "createdAt" : "2020-05-29T13:57:54Z",
        "updatedAt" : "2020-06-01T10:08:16Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b1785023-2ad8-4c42-99e2-ff1dff3c30b2",
        "parentId" : "03029c4e-4d45-4641-a039-79bd60bb00d3",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done. thanks, this is nicer.",
        "createdAt" : "2020-06-01T10:12:49Z",
        "updatedAt" : "2020-06-01T10:12:49Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : null,
    "diffHunk" : "@@ -101,13 +122,29 @@ object SExpr {\n   /** Function application. Apply 'args' to function 'fun', where 'fun'\n     * evaluates to a builtin or a closure.\n     */\n-  final case class SEApp(fun: SExpr, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n+  final case class SEAppE(fun: SExpr, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n       machine.pushKont(KArg(args, machine.frame, machine.actuals, machine.env.size))\n       machine.ctrl = fun\n     }\n   }\n \n+  final case class SEAppA(fun: SExprAtomic, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n+    def execute(machine: Machine): Unit = {\n+      val vfun = fun.evaluate(machine)\n+      executeApplication(machine, vfun, args)\n+    }\n+  }\n+\n+  object SEApp {\n+    def apply(fun: SExpr, args: Array[SExpr]): SExpr = {\n+      (optimizeAtomicApps, fun) match {\n+        case (true, vfun: SExprAtomic) => SEAppA(vfun, args)"
  },
  {
    "id" : "58579c8b-7768-4cfe-bf60-77e643fa89a9",
    "prId" : 6104,
    "comments" : [
      {
        "id" : "7d553263-440b-467a-9915-c6f70f277ea2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It would be great to have doc comments for both `SEAppA` and `SEAppE` and a few words about how they differ. Maybe we could also find slightly more descriptive names, something like `SEAppKnown` and `SEAppUnknown`.",
        "createdAt" : "2020-06-02T09:27:31Z",
        "updatedAt" : "2020-06-02T10:12:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "179e122e-0e70-45ab-a13f-78dcb5b66127",
        "parentId" : "7d553263-440b-467a-9915-c6f70f277ea2",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I'll improve the doc/naming in my current (related) PR",
        "createdAt" : "2020-06-02T10:39:51Z",
        "updatedAt" : "2020-06-02T10:39:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8a29d1b37f9bb15fa3b9ef14f3c26354f7e93866",
    "line" : 81,
    "diffHunk" : "@@ -101,13 +121,29 @@ object SExpr {\n   /** Function application. Apply 'args' to function 'fun', where 'fun'\n     * evaluates to a builtin or a closure.\n     */\n-  final case class SEApp(fun: SExpr, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n+  final case class SEAppE(fun: SExpr, args: Array[SExpr]) extends SExpr with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n       machine.pushKont(KArg(args, machine.frame, machine.actuals, machine.env.size))\n       machine.ctrl = fun\n     }\n   }\n \n+  final case class SEAppA(fun: SExprAtomic, args: Array[SExpr]) extends SExpr with SomeArrayEquals {"
  },
  {
    "id" : "0c11e2a2-a0a1-4edd-9dcb-50af01fa192e",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "440051f0-5270-410e-9404-f1d8c7254c2e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      val sValues = Array.ofDim[SValue](fvs.length)\r\n```",
        "createdAt" : "2020-05-18T15:57:49Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5518f3a-95cb-4eba-af5c-df077388595e",
        "parentId" : "440051f0-5270-410e-9404-f1d8c7254c2e",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I did this. But what is the difference?",
        "createdAt" : "2020-05-20T07:00:41Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "05454aed-4ff5-4e4f-848d-3b3e066639df",
        "parentId" : "440051f0-5270-410e-9404-f1d8c7254c2e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "nothing. just a bit more Scala idiomatic. Just a cosmetic change, you don't have to use it if you don't like.",
        "createdAt" : "2020-05-20T07:49:46Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : null,
    "diffHunk" : "@@ -126,30 +128,58 @@ object SExpr {\n   /** Closure creation. Create a new closure object storing the free variables\n     * in 'body'.\n     */\n-  final case class SEMakeClo(fv: Array[Int], arity: Int, body: SExpr)\n+  final case class SEMakeClo(fvs: Array[SELoc], arity: Int, body: SExpr)\n       extends SExpr\n       with SomeArrayEquals {\n \n     def execute(machine: Machine): Unit = {\n-      def convertToSValues(fv: Array[Int], getEnv: Int => SValue) = {\n-        val sValues = new Array[SValue](fv.length)\n-        var i = 0\n-        while (i < fv.length) {\n-          sValues(i) = getEnv(fv(i))\n-          i = i + 1\n-        }\n-        sValues\n+      val sValues = new Array[SValue](fvs.length)"
  },
  {
    "id" : "ca9abf40-a439-4924-83d6-222e2bb4d2b5",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "5ab14a0c-e94e-4dac-aebe-052d6b6291d9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think we should remove this intermediate class and make the `SELocX` classes direct subclasses of `SExpr` with their own implementation of `execute`. This will make the code shorter and avoid one dynamic dispatch on each variable lookup. I would consider that a win-win situation. ðŸ˜ƒ",
        "createdAt" : "2020-05-18T16:01:59Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "edc440eb-b8a3-4fb5-b106-4d030c9cf9e0",
        "parentId" : "5ab14a0c-e94e-4dac-aebe-052d6b6291d9",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Problem is that `SELoc` is also used here:\r\n```\r\n final case class SEMakeClo(fvs: Array[SELoc], arity: Int, body: SExpr)\r\n```\r\nI could perhaps try hand inlining the calls to `lookup` from `execute` in each of the 3 sub classes. See if that has any effect...",
        "createdAt" : "2020-05-18T17:08:07Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8446f3e1-c486-4934-8c8f-a936adf27c9b",
        "parentId" : "5ab14a0c-e94e-4dac-aebe-052d6b6291d9",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Nope.\r\nIn fact the time went up from 92 to 93 ms/op on the `CollectAuthority` bench.\r\nBut just noise I suspect.",
        "createdAt" : "2020-05-18T17:26:02Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8e38a9ed-61f1-4986-9628-5c2bb2d20044",
        "parentId" : "5ab14a0c-e94e-4dac-aebe-052d6b6291d9",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "After last week... I have come to the opinion that trying to second guess the JVM on stuff like this is very unlikely to have noticeable results.",
        "createdAt" : "2020-05-18T17:27:38Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5b3d1a0d-e297-4c19-8276-dc85cb45f77f",
        "parentId" : "5ab14a0c-e94e-4dac-aebe-052d6b6291d9",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That makes a lot of sense. Thanks for the explanation.",
        "createdAt" : "2020-05-19T17:31:31Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 61,
    "diffHunk" : "@@ -126,30 +128,58 @@ object SExpr {\n   /** Closure creation. Create a new closure object storing the free variables\n     * in 'body'.\n     */\n-  final case class SEMakeClo(fv: Array[Int], arity: Int, body: SExpr)\n+  final case class SEMakeClo(fvs: Array[SELoc], arity: Int, body: SExpr)\n       extends SExpr\n       with SomeArrayEquals {\n \n     def execute(machine: Machine): Unit = {\n-      def convertToSValues(fv: Array[Int], getEnv: Int => SValue) = {\n-        val sValues = new Array[SValue](fv.length)\n-        var i = 0\n-        while (i < fv.length) {\n-          sValues(i) = getEnv(fv(i))\n-          i = i + 1\n-        }\n-        sValues\n+      val sValues = new Array[SValue](fvs.length)\n+      var i = 0\n+      while (i < fvs.length) {\n+        sValues(i) = fvs(i).lookup(machine)\n+        i = i + 1\n       }\n-\n-      val sValues = convertToSValues(fv, machine.getEnv)\n       machine.returnValue = SPAP(PClosure(body, sValues), new util.ArrayList[SValue](), arity)\n     }\n   }\n \n+  /** SELoc -- Reference to the runtime location of a variable.\n+\n+    This is the closure-converted form of SEVar. There are three sub-forms, with sufffix:\n+    S/A/F, indicating [S]tack, [A]argument, or [F]ree variable captured by a closure.\n+    */\n+  sealed abstract class SELoc extends SExpr {"
  },
  {
    "id" : "0fd70ec8-345d-4cb5-8f65-b4a536163fc5",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "8d9741ef-7660-492b-9987-28c16c04197d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    * This expression form is only allowed prior to closure conversion.\r\n```",
        "createdAt" : "2020-05-19T17:29:58Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 8,
    "diffHunk" : "@@ -37,12 +37,14 @@ sealed abstract class SExpr extends Product with Serializable {\n object SExpr {\n \n   /** Reference to a variable. 'index' is the 1-based de Bruijn index,\n-    * that is, SEVar(1) points to the top-most value in the environment.\n+    * that is, SEVar(1) points to the nearest enclosing variable binder.\n+    * which could be an SELam, SELet, or a binding variant of SECasePat.\n     * https://en.wikipedia.org/wiki/De_Bruijn_index\n+    * This expression form is only allowed prior to closure conversion"
  },
  {
    "id" : "c4e67f51-6a1f-43ae-823e-e080db30bb25",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "824e02cd-f788-4d6d-a489-9581894509be",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "As long as the field in `Machine` is called `env`, we should not change the comment here. I'm open to renaming `env` to `stack` in a separate PR though. Same below.",
        "createdAt" : "2020-05-19T17:33:48Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 132,
    "diffHunk" : "@@ -271,10 +301,10 @@ object SExpr {\n   /** Case patterns */\n   sealed trait SCasePat\n \n-  /** Match on a variant. On match the value is unboxed and pushed to environment. */\n+  /** Match on a variant. On match the value is unboxed and pushed to stack. */"
  },
  {
    "id" : "b0bc4ff9-0dae-4416-94e5-fd57b856757d",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "8dc8e231-5fd0-4c99-ba1a-b94a11a50e42",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Have you considered changing the indexing scheme for the argument parameters such that the first argument would be called `0`, the second `1` and so on? And similarly for the captured variables? Would that remove some mental complexity? I'm aware that this would be different from how we index into the environment but stacks growing upside-down seems to be generally accepted among computer people.",
        "createdAt" : "2020-05-19T17:39:20Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "411f1f46-bde6-49df-8adf-e48781940b90",
        "parentId" : "8dc8e231-5fd0-4c99-ba1a-b94a11a50e42",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I assume the indexing scheme I described is actually the one we use and the comment it out of sync. Can you please make sure things get in sync here.",
        "createdAt" : "2020-05-20T08:27:14Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : null,
    "diffHunk" : "@@ -405,19 +435,19 @@ object SExpr {\n       )\n \n     private val equalListBody: SExpr =\n-      // equalList f xs ys =\n+      // equalList f xs ys = //A3,2,1"
  },
  {
    "id" : "80e3658f-c7eb-4279-b85e-1abfd8b7dba0",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "6e67a7a1-a0a8-4184-a2cb-810f862c249b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        i += 1\r\n```",
        "createdAt" : "2020-05-19T18:09:57Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aa0002cb-9f26-42b9-8efb-b1473a0b7f38",
        "parentId" : "6e67a7a1-a0a8-4184-a2cb-810f862c249b",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "yup",
        "createdAt" : "2020-05-20T07:04:42Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : null,
    "diffHunk" : "@@ -126,30 +128,58 @@ object SExpr {\n   /** Closure creation. Create a new closure object storing the free variables\n     * in 'body'.\n     */\n-  final case class SEMakeClo(fv: Array[Int], arity: Int, body: SExpr)\n+  final case class SEMakeClo(fvs: Array[SELoc], arity: Int, body: SExpr)\n       extends SExpr\n       with SomeArrayEquals {\n \n     def execute(machine: Machine): Unit = {\n-      def convertToSValues(fv: Array[Int], getEnv: Int => SValue) = {\n-        val sValues = new Array[SValue](fv.length)\n-        var i = 0\n-        while (i < fv.length) {\n-          sValues(i) = getEnv(fv(i))\n-          i = i + 1\n-        }\n-        sValues\n+      val sValues = new Array[SValue](fvs.length)\n+      var i = 0\n+      while (i < fvs.length) {\n+        sValues(i) = fvs(i).lookup(machine)\n+        i = i + 1"
  },
  {
    "id" : "09c25686-09ff-4f05-a3bb-d62b1943e317",
    "prId" : 6003,
    "comments" : [
      {
        "id" : "ec3f6ade-2d52-4c4b-b143-ab7cd6bd65e2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Just to make sure I fully understand what's going in here: We need to reset the frame pointer when we run the `KMatch` continuation because evaluating the scrutinee might have involved a function call and that function call has set the frame pointer to something else and not cleaned up after itself? Is that correct?\r\nI suggest you add comment somewhere explaining which of the caller-saves vs callee-saves strategies we're using in Speedy and what ramifications that has.",
        "createdAt" : "2020-05-19T18:20:21Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b5f331f9-2331-4ec5-82e1-3ad7518ffc05",
        "parentId" : "ec3f6ade-2d52-4c4b-b143-ab7cd6bd65e2",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Your understand is correct. :smile: \r\nI added a big chunky comment to help future readers.",
        "createdAt" : "2020-05-20T07:05:38Z",
        "updatedAt" : "2020-05-20T09:14:01Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ab369bff4b7cfcc541b5335c6c2996cbe061b74d",
    "line" : 93,
    "diffHunk" : "@@ -126,30 +128,58 @@ object SExpr {\n   /** Closure creation. Create a new closure object storing the free variables\n     * in 'body'.\n     */\n-  final case class SEMakeClo(fv: Array[Int], arity: Int, body: SExpr)\n+  final case class SEMakeClo(fvs: Array[SELoc], arity: Int, body: SExpr)\n       extends SExpr\n       with SomeArrayEquals {\n \n     def execute(machine: Machine): Unit = {\n-      def convertToSValues(fv: Array[Int], getEnv: Int => SValue) = {\n-        val sValues = new Array[SValue](fv.length)\n-        var i = 0\n-        while (i < fv.length) {\n-          sValues(i) = getEnv(fv(i))\n-          i = i + 1\n-        }\n-        sValues\n+      val sValues = new Array[SValue](fvs.length)\n+      var i = 0\n+      while (i < fvs.length) {\n+        sValues(i) = fvs(i).lookup(machine)\n+        i = i + 1\n       }\n-\n-      val sValues = convertToSValues(fv, machine.getEnv)\n       machine.returnValue = SPAP(PClosure(null, body, sValues), new util.ArrayList[SValue](), arity)\n     }\n   }\n \n+  /** SELoc -- Reference to the runtime location of a variable.\n+\n+    This is the closure-converted form of SEVar. There are three sub-forms, with sufffix:\n+    S/A/F, indicating [S]tack, [A]argument, or [F]ree variable captured by a closure.\n+    */\n+  sealed abstract class SELoc extends SExpr {\n+    def lookup(machine: Machine): SValue\n+    def execute(machine: Machine): Unit = {\n+      machine.returnValue = lookup(machine)\n+    }\n+  }\n+\n+  // SELocS -- variable is located on the stack (SELet & binding forms of SECasePat)\n+  final case class SELocS(n: Int) extends SELoc {\n+    def lookup(machine: Machine): SValue = {\n+      machine.getEnvStack(n)\n+    }\n+  }\n+\n+  // SELocS -- variable is located in the args array of the application\n+  final case class SELocA(n: Int) extends SELoc {\n+    def lookup(machine: Machine): SValue = {\n+      machine.getEnvArg(n)\n+    }\n+  }\n+\n+  // SELocF -- variable is located in the free-vars array of the closure being applied\n+  final case class SELocF(n: Int) extends SELoc {\n+    def lookup(machine: Machine): SValue = {\n+      machine.getEnvFree(n)\n+    }\n+  }\n+\n   /** Pattern match. */\n   final case class SECase(scrut: SExpr, alts: Array[SCaseAlt]) extends SExpr with SomeArrayEquals {\n     def execute(machine: Machine): Unit = {\n-      machine.pushKont(KMatch(alts))\n+      machine.pushKont(KMatch(alts, machine.frame, machine.env.size))"
  },
  {
    "id" : "0c1f3170-4cfa-4b54-9a4e-d42b4b9c1aea",
    "prId" : 5859,
    "comments" : [
      {
        "id" : "6e8c4968-03ff-4ad7-ad54-2853ad08e866",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    // This is similar to how `String#hashCode()` evaluation is cached.\r\n```",
        "createdAt" : "2020-05-06T08:37:00Z",
        "updatedAt" : "2020-05-06T19:02:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "898c7dcb31b91d56e979cfe03cfaa9d92ceb28f1",
    "line" : 16,
    "diffHunk" : "@@ -49,8 +49,25 @@ object SExpr {\n     */\n   final case class SEVal(\n       ref: SDefinitionRef,\n-      var cached: Option[(SValue, List[Location])],\n   ) extends SExpr {\n+\n+    // The variable `_cached` is used to cache the evaluation of the\n+    // LF value defined by `ref` once it has been computed.  Hence we\n+    // avoid both the lookup in the package definition HashMap and the\n+    // full reevaluation of the body of the definition.\n+    // Here we take advantage of the Java memory model\n+    // (https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7)\n+    // that guarantees the write of `_cache` (in the method\n+    // `setCached`) is done atomically.\n+    // This is similar how hashcode evaluation is cached in String"
  },
  {
    "id" : "856abff3-36cd-4911-8fc2-d79ec011e2b8",
    "prId" : 5859,
    "comments" : [
      {
        "id" : "ef07ce0c-fb35-4705-8377-6fa538468020",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    // full re-evaluation of the body of the definition.\r\n```",
        "createdAt" : "2020-05-06T08:37:07Z",
        "updatedAt" : "2020-05-06T19:02:16Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "898c7dcb31b91d56e979cfe03cfaa9d92ceb28f1",
    "line" : 11,
    "diffHunk" : "@@ -49,8 +49,25 @@ object SExpr {\n     */\n   final case class SEVal(\n       ref: SDefinitionRef,\n-      var cached: Option[(SValue, List[Location])],\n   ) extends SExpr {\n+\n+    // The variable `_cached` is used to cache the evaluation of the\n+    // LF value defined by `ref` once it has been computed.  Hence we\n+    // avoid both the lookup in the package definition HashMap and the\n+    // full reevaluation of the body of the definition."
  },
  {
    "id" : "f6bfe907-84f8-4554-91a1-734daff378a5",
    "prId" : 3947,
    "comments" : [
      {
        "id" : "f42d6a9f-a9e8-48ec-a958-03999db095dc",
        "parentId" : null,
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "This change looks not as pretty as original code, but Yourkit profiler showed that calling `map` on `fv` overly abused `ArrayOps` with turned out to be terribly slow. So this old fashion way of iterating over array has improved speed dramatically.",
        "createdAt" : "2020-01-06T03:13:56Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "564c4864-9e39-486e-893f-984bae62a009",
        "parentId" : "f42d6a9f-a9e8-48ec-a958-03999db095dc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I would like to have real benchmarks for this kinds of changes. \r\nWhat do you think @dajmaki ?",
        "createdAt" : "2020-01-06T08:40:25Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5ce38904-0c72-4502-a1ef-e190da14d288",
        "parentId" : "f42d6a9f-a9e8-48ec-a958-03999db095dc",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I'm fine with these type of changes. Would definitely be interested in hearing how big of an improvement this was.",
        "createdAt" : "2020-01-06T12:41:38Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3a1bcc99-1a98-4e6b-9ea2-dd40abba0b77",
        "parentId" : "f42d6a9f-a9e8-48ec-a958-03999db095dc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "if @dajmaki  is happy, I am happy.  ",
        "createdAt" : "2020-01-06T13:31:36Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4aec1566-bca5-4237-b127-1e3d8b16442d",
        "parentId" : "f42d6a9f-a9e8-48ec-a958-03999db095dc",
        "author" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "body" : "Some results from ScalaMeter (this performance pit was actually found using YourKit, I'm using ScalaMeter just to prove a point):\r\n1. Iterating through array old-fashion way\r\n```\r\n      val length = arr.length\r\n      var i = 0\r\n      while (i < length) {\r\n        arr(i)\r\n        i += 1\r\n      }\r\n```\r\ntook `Parameters(size -> 15000000): 3.17E-4 ms`\r\n\r\n2. Iterating through array using `map`\r\n      ```map.map(_ => ())```\r\ntook `Parameters(size -> 15000000): 67.933929 ms`\r\n\r\nThe difference is huge, which is even more crucial for this code as it runs so many times.\r\n\r\nIf interested why this slow down happens, it's because Array gets converted into ArrayOps and then it calls some partial functions.",
        "createdAt" : "2020-01-07T23:34:43Z",
        "updatedAt" : "2020-01-08T23:00:56Z",
        "lastEditedBy" : {
          "login" : "nikolai-cherkezishvili-da",
          "name" : "Nikolai Cherkezishvili",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/46430840?u=3c1580aaec0abc5d94ce928ebeaeb90752d2a21b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0578cb6450a499ed54627a9c860f8dfba4e7ba5b",
    "line" : 7,
    "diffHunk" : "@@ -107,8 +107,20 @@ object SExpr {\n   final case class SEMakeClo(fv: Array[Int], arity: Int, body: SExpr)\n       extends SExpr\n       with SomeArrayEquals {\n+\n     def execute(machine: Machine): Ctrl = {\n-      Ctrl.fromPrim(PClosure(body, fv.map(machine.getEnv)), arity)\n+      def convertToSValues(fv: Array[Int], getEnv: Int => SValue) = {"
  },
  {
    "id" : "068be243-4651-4b78-873c-82c06362c1bf",
    "prId" : 2653,
    "comments" : [
      {
        "id" : "5568e93d-b6b9-4447-a687-e135d856e348",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm generally not a big fan of doing a renaming like this and actual changes in the same PR. I think I understand why you want to rename it but it might be better to the in separate PR before the one with the actual changes.",
        "createdAt" : "2019-08-26T09:09:36Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1b0f9593-aa89-4e71-9b9b-af5784d85c04",
        "parentId" : "5568e93d-b6b9-4447-a687-e135d856e348",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I don't like this at all. It conflicts with the naming convention used for SValue. Please change it back.",
        "createdAt" : "2019-08-26T09:38:47Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "01772d1c-a667-40c2-ba9a-4b755c3186f1",
        "parentId" : "5568e93d-b6b9-4447-a687-e135d856e348",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "~~I created #2657 to address this comment.\r\nI will switch the PR to ready to review once #2657 is merged.~~\r\n\r\nI dropped the renaming. ",
        "createdAt" : "2019-08-26T09:38:49Z",
        "updatedAt" : "2019-08-26T15:11:51Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0fa6077c71edb857ab4a0a3851d841ea21acc8ef",
    "line" : null,
    "diffHunk" : "@@ -38,7 +38,7 @@ object SExpr {\n     * that is, SEVar(1) points to the top-most value in the environment.\n     * https://en.wikipedia.org/wiki/De_Bruijn_index\n     */\n-  final case class SEVar(index: Int) extends SExpr {\n+  final case class SVar(index: Int) extends SExpr {"
  },
  {
    "id" : "24695b59-878b-4570-9ae4-a15de0b99d7c",
    "prId" : 2596,
    "comments" : [
      {
        "id" : "b3ae1653-41d9-486d-9a2d-27002d290233",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "comment moved to previous line",
        "createdAt" : "2019-08-19T15:20:30Z",
        "updatedAt" : "2019-08-19T15:21:09Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fb0bb90b-f430-4feb-84cd-6fdf8a7f5c7d",
        "parentId" : "b3ae1653-41d9-486d-9a2d-27002d290233",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The auto formatter is doing that. I tried to undo it and the formatter did it again. :(",
        "createdAt" : "2019-08-19T15:38:02Z",
        "updatedAt" : "2019-08-19T15:38:03Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "76ed9fa74de7cba87d311eddcb078a95a870805e",
    "line" : 48,
    "diffHunk" : "@@ -308,24 +310,27 @@ object SExpr {\n         Array(),\n         3,\n         // case xs of\n-        SECase(SEVar(1)) of (\n-          // nil -> z\n-          SCaseAlt(SCPNil, SEVar(2)),\n-          // cons y ys ->\n-          SCaseAlt(\n-            SCPCons,\n-            // f y (foldr f z ys)\n-            SEVar(5)(\n+        SECase(SEVar(1)) of (// nil -> z"
  },
  {
    "id" : "1b5b31b8-f864-4a2a-8b20-0c076a186008",
    "prId" : 1397,
    "comments" : [
      {
        "id" : "4399a17e-e6a8-4a4a-8c2f-44c66a892ff1",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "```suggestion\r\n  final case class SCPEnum(id: Identifier, constructor: Name) extends SCasePat\r\n```",
        "createdAt" : "2019-05-27T11:35:18Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e398f996-d51a-43ca-b1f3-b3d8652362d3",
        "parentId" : "4399a17e-e6a8-4a4a-8c2f-44c66a892ff1",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed ",
        "createdAt" : "2019-05-27T12:38:02Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ce95b727edd6150f719d1c4c22df4bde71e6ef6",
    "line" : null,
    "diffHunk" : "@@ -204,7 +204,10 @@ object SExpr {\n   sealed trait SCasePat\n \n   /** Match on a variant. On match the value is unboxed and pushed to environment. */\n-  final case class SCPVariant(id: Identifier, variant: String) extends SCasePat\n+  final case class SCPVariant(id: Identifier, variant: Name) extends SCasePat\n+\n+  /** Match on a variant. On match the value is unboxed and pushed to environment. */\n+  final case class SCPEnum(id: Identifier, contractor: Name) extends SCasePat"
  }
]