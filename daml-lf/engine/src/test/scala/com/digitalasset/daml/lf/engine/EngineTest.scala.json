[
  {
    "id" : "32e2a495-5409-4b91-8da4-f6b857de3d46",
    "prId" : 7649,
    "comments" : [
      {
        "id" : "cc561a7f-f86c-4c32-858c-c3fa23033d58",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "```suggestion\r\n            \"Update failed due to a contract key with an empty set of maintainers\")\r\n```",
        "createdAt" : "2020-10-12T14:46:27Z",
        "updatedAt" : "2020-10-14T11:03:16Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5f819d6e9c5437d552d3a5102358593cc79c09b5",
    "line" : 37,
    "diffHunk" : "@@ -677,6 +677,80 @@ class EngineTest\n     }\n   }\n \n+  \"exercise-by-key\" should {\n+    val seed = hash(\"exercise-by-key\")\n+\n+    val now = Time.Timestamp.now\n+\n+    \"crash if use a contract key with an empty set of maintainers\" in {\n+      val templateId =\n+        Identifier(basicTestsPkgId, \"BasicTests:NoMaintainer\")\n+\n+      val cmds = ImmArray(\n+        speedy.Command.ExerciseByKey(\n+          templateId = templateId,\n+          contractKey = SParty(alice),\n+          choiceId = ChoiceName.assertFromString(\"Noop\"),\n+          argument = SValue.SUnit,\n+        )\n+      )\n+\n+      val result = engine\n+        .interpretCommands(\n+          validating = false,\n+          submitters = Set(alice),\n+          commands = cmds,\n+          ledgerTime = now,\n+          submissionTime = now,\n+          seeding = InitialSeeding.TransactionSeed(seed),\n+          globalCids = Set.empty,\n+        )\n+        .consume(_ => None, lookupPackage, lookupKey)\n+\n+      inside(result) {\n+        case Left(err) =>\n+          err.msg should include(\n+            \"Update failed due to a contract key with an empty sey of maintainers\")"
  },
  {
    "id" : "6a84c1af-36aa-4e79-b167-5f392ee79458",
    "prId" : 7649,
    "comments" : [
      {
        "id" : "2d92c008-d13e-4849-b79b-4c4f3b5e1c23",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "```suggestion\r\n            \"Update failed due to a contract key with an empty set of maintainers\")\r\n```",
        "createdAt" : "2020-10-12T14:48:04Z",
        "updatedAt" : "2020-10-14T11:03:16Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5f819d6e9c5437d552d3a5102358593cc79c09b5",
    "line" : 73,
    "diffHunk" : "@@ -677,6 +677,80 @@ class EngineTest\n     }\n   }\n \n+  \"exercise-by-key\" should {\n+    val seed = hash(\"exercise-by-key\")\n+\n+    val now = Time.Timestamp.now\n+\n+    \"crash if use a contract key with an empty set of maintainers\" in {\n+      val templateId =\n+        Identifier(basicTestsPkgId, \"BasicTests:NoMaintainer\")\n+\n+      val cmds = ImmArray(\n+        speedy.Command.ExerciseByKey(\n+          templateId = templateId,\n+          contractKey = SParty(alice),\n+          choiceId = ChoiceName.assertFromString(\"Noop\"),\n+          argument = SValue.SUnit,\n+        )\n+      )\n+\n+      val result = engine\n+        .interpretCommands(\n+          validating = false,\n+          submitters = Set(alice),\n+          commands = cmds,\n+          ledgerTime = now,\n+          submissionTime = now,\n+          seeding = InitialSeeding.TransactionSeed(seed),\n+          globalCids = Set.empty,\n+        )\n+        .consume(_ => None, lookupPackage, lookupKey)\n+\n+      inside(result) {\n+        case Left(err) =>\n+          err.msg should include(\n+            \"Update failed due to a contract key with an empty set of maintainers\")\n+      }\n+    }\n+  }\n+\n+  \"fecth-by-key\" should {\n+    val seed = hash(\"fetch-by-key\")\n+\n+    val now = Time.Timestamp.now\n+\n+    \"crash if use a contract key with an empty set of maintainers\" in {\n+      val templateId =\n+        Identifier(basicTestsPkgId, \"BasicTests:NoMaintainer\")\n+\n+      val cmds = ImmArray(\n+        speedy.Command.FetchByKey(\n+          templateId = templateId,\n+          key = SParty(alice),\n+        )\n+      )\n+\n+      val result = engine\n+        .interpretCommands(\n+          validating = false,\n+          submitters = Set(alice),\n+          commands = cmds,\n+          ledgerTime = now,\n+          submissionTime = now,\n+          seeding = InitialSeeding.TransactionSeed(seed),\n+          globalCids = Set.empty,\n+        )\n+        .consume(_ => None, lookupPackage, lookupKey)\n+\n+      inside(result) {\n+        case Left(err) =>\n+          err.msg should include(\n+            \"Update failed due to a contract key with an empty sey of maintainers\")"
  },
  {
    "id" : "b051ef1c-fac4-4e02-a6bc-a51576408466",
    "prId" : 7610,
    "comments" : [
      {
        "id" : "5d785894-4a6d-4b9c-a9a5-1778c0e7750e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n      inside (result) {\r\n        case Left(err) =>  err.msg should include(\"Update failed due to a contract key with an empty sey of maintainers\")\r\n      }\r\n```",
        "createdAt" : "2020-10-09T07:40:03Z",
        "updatedAt" : "2020-10-09T16:18:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2952baa01fa2244cf872d357d6943045d56cf93",
    "line" : null,
    "diffHunk" : "@@ -1371,6 +1371,31 @@ class EngineTest\n \n       firstLookupNode(reinterpreted.transaction).map(_._2) shouldEqual Some(lookupNode)\n     }\n+\n+    \"crash if use a contract key with an empty set of maintainers\" in {\n+      val templateId =\n+        Identifier(basicTestsPkgId, \"BasicTests:NoMaintainer\")\n+\n+      val cmds = ImmArray(\n+        speedy.Command.LookupByKey(templateId, SParty(alice))\n+      )\n+\n+      val result = engine\n+        .interpretCommands(\n+          validating = false,\n+          submitters = Set(alice),\n+          commands = cmds,\n+          ledgerTime = now,\n+          submissionTime = now,\n+          seeding = InitialSeeding.TransactionSeed(seed),\n+          globalCids = Set.empty,\n+        )\n+        .consume(_ => None, lookupPackage, lookupKey)\n+\n+      result shouldBe 'left\n+      val Left(err) = result\n+      err.msg should include(\"Update failed due to a contract key with an empty sey of maintainers\")"
  },
  {
    "id" : "1a2e84f2-b2fe-416d-9fe3-b20f073028c4",
    "prId" : 7610,
    "comments" : [
      {
        "id" : "01647ed2-51a4-4b95-abee-667ab437b0e6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is still a create no? Seems a bit confusing to rename this to basically the same name as the test above when one is about create and the other is about lookup.",
        "createdAt" : "2020-10-09T07:41:17Z",
        "updatedAt" : "2020-10-09T16:18:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7d231aec-4fec-412f-89f4-32dfc0c19db5",
        "parentId" : "01647ed2-51a4-4b95-abee-667ab437b0e6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "reverted. ",
        "createdAt" : "2020-10-09T08:10:54Z",
        "updatedAt" : "2020-10-09T16:18:04Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2952baa01fa2244cf872d357d6943045d56cf93",
    "line" : null,
    "diffHunk" : "@@ -1634,7 +1659,7 @@ class EngineTest\n       err.msg should include(\"precondition violation\")\n     }\n \n-    \"not be create if has an empty set of maintainer\" in {\n+    \"crash if uses a key with an empty set of maintainers\" in {"
  },
  {
    "id" : "195e02ef-6083-4675-88fb-d37675b4e2bc",
    "prId" : 7400,
    "comments" : [
      {
        "id" : "5617fe8a-432a-46bf-8080-914611823271",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Was this a mistake in the test before?",
        "createdAt" : "2020-09-16T08:59:28Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2e30080a-f755-4de3-97ee-8b86d444dcfe",
        "parentId" : "5617fe8a-432a-46bf-8080-914611823271",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "yes",
        "createdAt" : "2020-09-16T14:39:56Z",
        "updatedAt" : "2020-09-17T13:03:20Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a360635b966cdfe27bfd3cd6e156308321238660",
    "line" : 61,
    "diffHunk" : "@@ -1508,7 +1508,7 @@ class EngineTest\n       ValueRecord(\n         Some(forkableTemplateId),\n         ImmArray(\n-          (Some[Name](\"party\"), ValueParty(alice)),\n+          (Some[Name](\"party\"), ValueParty(party)),"
  },
  {
    "id" : "c47afd2a-b54f-42a6-994f-36126673cc32",
    "prId" : 6828,
    "comments" : [
      {
        "id" : "629ab335-4597-4116-96d9-0f0e6c856d8c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    \"succeed if fed with allowed value version\" in {\r\n```",
        "createdAt" : "2020-08-10T13:28:06Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "23e3af32-75f6-4dce-892c-3033dcd13fe7",
        "parentId" : "629ab335-4597-4116-96d9-0f0e6c856d8c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-08-11T09:32:27Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b0a8ac29dc0000fb043ddb635bc6d6a3895606ba",
    "line" : null,
    "diffHunk" : "@@ -1621,6 +1621,49 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n       err.msg should include(\"precondition violation\")\n     }\n   }\n+\n+  \"Engine#submit\" should {\n+    val cidV6 = toContractId(\"#cidV6\")\n+    val cidV7 = toContractId(\"#cidV7\")\n+    val contract = ValueRecord(\n+      Some(Identifier(basicTestsPkgId, \"BasicTests:Simple\")),\n+      ImmArray((Some[Name](\"p\"), ValueParty(party)))\n+    )\n+    val hello = Identifier(basicTestsPkgId, \"BasicTests:Hello\")\n+    val templateId = TypeConName(basicTestsPkgId, \"BasicTests:Simple\")\n+    val now = Time.Timestamp.now()\n+    val submissionSeed = crypto.Hash.hashPrivateKey(\"engine check the version of input value\")\n+    def contracts = Map(\n+      cidV6 -> ContractInst(templateId, VersionedValue(ValueVersion(\"6\"), contract), \"\"),\n+      cidV7 -> ContractInst(templateId, VersionedValue(ValueVersion(\"7\"), contract), \"\"),\n+    )\n+\n+    def run(cid: ContractId) = {\n+      val engine = new Engine(EngineConfig.Stable)\n+      val cmds = Commands(\n+        submitter = party,\n+        commands = ImmArray(\n+          ExerciseCommand(templateId, cid, \"Hello\", ValueRecord(Some(hello), ImmArray.empty))),\n+        ledgerEffectiveTime = now,\n+        commandsReference = \"\",\n+      )\n+      engine\n+        .submit(cmds, participant, submissionSeed)\n+        .consume(contracts.get, lookupPackage, lookupKey)\n+    }\n+\n+    \"should succeeds if fed with allowed value version\" in {"
  },
  {
    "id" : "3f3479b1-f9f7-4bef-bb6c-822f7435071d",
    "prId" : 6828,
    "comments" : [
      {
        "id" : "a3302dbb-419b-445f-a5f6-04c13293a494",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Shouldn't we fail when we get something disallowed?\r\n```suggestion\r\n    \"fail if fed with disallowed value version\" in {\r\n```",
        "createdAt" : "2020-08-10T13:28:27Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a48d3bec-78ea-41e4-b3d3-6783d2478057",
        "parentId" : "a3302dbb-419b-445f-a5f6-04c13293a494",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "good catch.",
        "createdAt" : "2020-08-11T09:32:07Z",
        "updatedAt" : "2020-08-13T18:22:56Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b0a8ac29dc0000fb043ddb635bc6d6a3895606ba",
    "line" : null,
    "diffHunk" : "@@ -1621,6 +1621,49 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n       err.msg should include(\"precondition violation\")\n     }\n   }\n+\n+  \"Engine#submit\" should {\n+    val cidV6 = toContractId(\"#cidV6\")\n+    val cidV7 = toContractId(\"#cidV7\")\n+    val contract = ValueRecord(\n+      Some(Identifier(basicTestsPkgId, \"BasicTests:Simple\")),\n+      ImmArray((Some[Name](\"p\"), ValueParty(party)))\n+    )\n+    val hello = Identifier(basicTestsPkgId, \"BasicTests:Hello\")\n+    val templateId = TypeConName(basicTestsPkgId, \"BasicTests:Simple\")\n+    val now = Time.Timestamp.now()\n+    val submissionSeed = crypto.Hash.hashPrivateKey(\"engine check the version of input value\")\n+    def contracts = Map(\n+      cidV6 -> ContractInst(templateId, VersionedValue(ValueVersion(\"6\"), contract), \"\"),\n+      cidV7 -> ContractInst(templateId, VersionedValue(ValueVersion(\"7\"), contract), \"\"),\n+    )\n+\n+    def run(cid: ContractId) = {\n+      val engine = new Engine(EngineConfig.Stable)\n+      val cmds = Commands(\n+        submitter = party,\n+        commands = ImmArray(\n+          ExerciseCommand(templateId, cid, \"Hello\", ValueRecord(Some(hello), ImmArray.empty))),\n+        ledgerEffectiveTime = now,\n+        commandsReference = \"\",\n+      )\n+      engine\n+        .submit(cmds, participant, submissionSeed)\n+        .consume(contracts.get, lookupPackage, lookupKey)\n+    }\n+\n+    \"should succeeds if fed with allowed value version\" in {\n+      run(cidV6) shouldBe 'right\n+    }\n+\n+    \"should succeeds if fed with disallowed value version\" in {"
  },
  {
    "id" : "4d90c0fb-7a52-4b5f-9e0f-e8f62585e2fc",
    "prId" : 6795,
    "comments" : [
      {
        "id" : "6c4409b7-b101-4188-a5db-538b3fcb8a89",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "why `keyValue @ _` instead of just `keyValue`? I know it's been here before this particular change, but just curious why it is here.\r\n\r\n`keyValue` is not even being used, so `_` should be sufficient. Boy Scout Rule applies, you touched it, so: `Always leave the campground cleaner than you found it` :)",
        "createdAt" : "2020-07-20T16:00:02Z",
        "updatedAt" : "2020-07-20T18:13:36Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a6ddc8b9-00e2-46f8-b2c5-e7ef311ec2a3",
        "parentId" : "6c4409b7-b101-4188-a5db-538b3fcb8a89",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "`keyValue @ _` is a notation to avoid singleton variable warning. \r\nSometime having name for variable in pattern matching, make the later more readable.  \r\n",
        "createdAt" : "2020-07-20T17:24:06Z",
        "updatedAt" : "2020-07-20T18:13:36Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "913db7aa-1a0a-451d-a2d7-ba110b10a352",
        "parentId" : "6c4409b7-b101-4188-a5db-538b3fcb8a89",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It does not really improve readability in this case, so I apply the change you requested. ",
        "createdAt" : "2020-07-20T19:55:22Z",
        "updatedAt" : "2020-07-20T19:55:22Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a31e44fe9cd6d6cb57921256ebaa10be748590f3",
    "line" : null,
    "diffHunk" : "@@ -1412,10 +1414,10 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n         .consume(lookupContractMap.get, lookupPackage, lookupKey)\n \n       tx.transaction.nodes.values.headOption match {\n-        case Some(NodeFetch(_, _, _, _, _, _, key)) =>\n+        case Some(Node.NodeFetch(_, _, _, _, _, _, key)) =>\n           key match {\n             // just test that the maintainers match here, getting the key out is a bit hairier\n-            case Some(KeyWithMaintainers(keyValue @ _, maintainers)) =>\n+            case Some(Node.KeyWithMaintainers(keyValue @ _, maintainers)) =>"
  },
  {
    "id" : "7d092e7e-fa2b-42e2-920d-672b4410cc32",
    "prId" : 6311,
    "comments" : [
      {
        "id" : "6e717231-76a8-4b64-8731-e06ee6f8a8f4",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I'd rather have this called explicitly. What's the advantage of having this as an implicit conversion? The explicit call looks very brief and understandable.",
        "createdAt" : "2020-06-11T14:40:05Z",
        "updatedAt" : "2020-06-15T12:14:10Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3b0da61dc64d2ba81661f6ee5493ca5c9a0410a8",
    "line" : null,
    "diffHunk" : "@@ -1609,6 +1609,10 @@ object EngineTest {\n   private implicit def toName(s: String): Name =\n     Name.assertFromString(s)\n \n+  private implicit def toGenTransaction("
  },
  {
    "id" : "0452ba63-adce-4872-bd6e-32b63d8dda83",
    "prId" : 5971,
    "comments" : [
      {
        "id" : "8af60806-09bc-4152-ad84-4b03037b34f5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What’s up with all those changes?",
        "createdAt" : "2020-05-13T18:48:38Z",
        "updatedAt" : "2020-05-13T18:56:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "443a2d4f-c067-4c99-b9c7-dc7821bc030a",
        "parentId" : "8af60806-09bc-4152-ad84-4b03037b34f5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-05-13T18:56:39Z",
        "updatedAt" : "2020-05-13T18:56:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b765b467728f1b0d1902153235ccd62b8ff2746a",
    "line" : null,
    "diffHunk" : "@@ -126,7 +126,7 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n   val preprocessor = new preprocessing.Preprocessor(ConcurrentCompiledPackages())\n \n   \"valid data variant identifier\" should {\n-    \"found and return the argument types\" in {\n+    \"found and return the argument types\" ignore {"
  },
  {
    "id" : "c3d3709d-1543-48d6-8f2d-a7a57e8ec5ec",
    "prId" : 5966,
    "comments" : [
      {
        "id" : "45112b78-581e-4e63-812e-cb16d2e04426",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "...transaction structure",
        "createdAt" : "2020-06-11T15:51:04Z",
        "updatedAt" : "2020-06-11T15:51:04Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1c31fcd6f1afce560a4ef4dba5af7a6f877ec71a",
    "line" : 158,
    "diffHunk" : "@@ -1380,6 +1371,9 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n   \"fetching contracts that have keys correctly fills in the transaction structure\" when {\n     val fetchedCid = toContractId(\"#1\")\n     val now = Time.Timestamp.now()\n+    val submissionSeed = crypto.Hash.hashPrivateKey(\n+      \"fetching contracts that have keys correctly fills in the transaction structur\")"
  },
  {
    "id" : "aa72dec9-cc76-4d3d-b9e5-5c32a90bbb9e",
    "prId" : 5599,
    "comments" : [
      {
        "id" : "b7d6228b-6d46-4560-8f6d-93c0b8d04263",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      val lookupByKeyNodes = tx.nodes.collect {\r\n```",
        "createdAt" : "2020-04-20T13:42:58Z",
        "updatedAt" : "2020-04-20T15:58:39Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0f0189c3bb44080d20e974665a0e1881033d83ea",
    "line" : null,
    "diffHunk" : "@@ -1248,7 +1269,28 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n \n     val now = Time.Timestamp.now()\n \n-    \"reinterpret to the same node when lookup finds a contract\" in {\n+    \"mark all lookupByKey nodes as byKey\" in {\n+      val exerciseCmd = ExerciseCommand(\n+        lookerUpTemplateId,\n+        lookerUpCid,\n+        \"Lookup\",\n+        ValueRecord(None, ImmArray((Some[Name](\"n\"), ValueInt64(42)))))\n+      val Right((tx, txMeta)) = engine\n+        .submit(\n+          Commands(alice, ImmArray(exerciseCmd), now, \"test\"),\n+          participant,\n+          Some(submissionSeed))\n+        .consume(lookupContractMap.get, lookupPackage, lookupKey)\n+\n+      val fetchNodes = tx.nodes.collect {"
  },
  {
    "id" : "7b27967c-cb50-4665-a781-9bfc44bfcb1f",
    "prId" : 5486,
    "comments" : [
      {
        "id" : "ff172940-b3f8-489b-a023-9926a62efaa7",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "This test fails without the fix to `PartialTransaction`",
        "createdAt" : "2020-04-08T13:20:41Z",
        "updatedAt" : "2020-04-08T13:24:11Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "50e1d58f9542c576e6eab5cf0f45f84b6f1fa196",
    "line" : 249,
    "diffHunk" : "@@ -1417,6 +1427,69 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n     }\n   }\n \n+  \"nested transactions\" should {\n+\n+    val forkableTemplate = \"BasicTests:Forkable\"\n+    val forkableTemplateId = Identifier(basicTestsPkgId, forkableTemplate)\n+    val forkableInst =\n+      ValueRecord(\n+        Some(forkableTemplateId),\n+        ImmArray(\n+          (Some[Name](\"party\"), ValueParty(alice)),\n+          (Some[Name](\"parent\"), ValueOptional(None)))\n+      )\n+\n+    val submissionSeed = hash(\"nested transaction test\")\n+    val let = Time.Timestamp.now()\n+\n+    def run(n: Int) = {\n+      val command = CreateAndExerciseCommand(\n+        templateId = forkableTemplateId,\n+        createArgument = forkableInst,\n+        choiceId = \"Fork\",\n+        choiceArgument = ValueRecord(None, ImmArray((None, ValueInt64(n.toLong)))),\n+      )\n+      engine\n+        .submit(Commands(party, ImmArray(command), let, \"test\"), participant, Some(submissionSeed))\n+        .consume(_ => None, lookupPackage, _ => None)\n+    }\n+\n+    \"produce a quadratic number of nodes\" in {\n+      run(0).map(_._1.nodes.size) shouldBe Right(2)\n+      run(1).map(_._1.nodes.size) shouldBe Right(6)\n+      run(2).map(_._1.nodes.size) shouldBe Right(14)\n+      run(3).map(_._1.nodes.size) shouldBe Right(30)\n+    }\n+\n+    \"be validable in whole\" in {\n+      def validate(tx: Tx.Transaction, metaData: Tx.Metadata) =\n+        engine\n+          .validate(tx, let, participant, Some(submissionSeed -> metaData.submissionTime))\n+          .consume(_ => None, lookupPackage, _ => None)\n+\n+      run(0).flatMap { case (tx, metaData) => validate(tx, metaData) } shouldBe Right(())\n+      run(3).flatMap { case (tx, metaData) => validate(tx, metaData) } shouldBe Right(())\n+    }\n+\n+    \"be partially reinterpretable\" in {\n+      val Right((tx, metaData)) = run(3)"
  },
  {
    "id" : "eb349b78-f363-4fea-976a-5e25e68071f6",
    "prId" : 5186,
    "comments" : [
      {
        "id" : "20c2b13c-3874-4b90-a54b-449e8337ca72",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n\r\n  def lookupContractWithKey(\r\n```",
        "createdAt" : "2020-03-26T09:22:42Z",
        "updatedAt" : "2020-03-26T11:00:44Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66d880bfd3506c1d95fc2e0178dcfd79755b55b9",
    "line" : 19,
    "diffHunk" : "@@ -91,29 +91,30 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n       ))\n   }\n \n+  val withKeyTemplate = \"BasicTests:WithKey\"\n+  val BasicTests_WithKey = Identifier(basicTestsPkgId, withKeyTemplate)\n+  val withKeyContractInst: ContractInst[Tx.Value[AbsoluteContractId]] =\n+    ContractInst(\n+      TypeConName(basicTestsPkgId, withKeyTemplate),\n+      assertAsVersionedValue(\n+        ValueRecord(\n+          Some(BasicTests_WithKey),\n+          ImmArray(\n+            (Some(\"p\"), ValueParty(alice)),\n+            (Some(\"k\"), ValueInt64(42))\n+          ))),\n+      \"\"\n+    )\n   def lookupContractWithKey("
  },
  {
    "id" : "f7432534-917c-461a-8bdc-642ec081a51c",
    "prId" : 3308,
    "comments" : [
      {
        "id" : "921474a4-6cef-4fb4-b5cc-f414371ef176",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "~why do we need an `Engine` here if we don't use it?~\r\nscratch it... it overrides the one from the outer context.",
        "createdAt" : "2019-10-31T19:02:13Z",
        "updatedAt" : "2019-11-01T09:26:42Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0520c85ef679a1fb6bfed094dd255fa7111d36b2",
    "line" : null,
    "diffHunk" : "@@ -1089,6 +1089,8 @@ class EngineTest extends WordSpec with Matchers with EitherValues with BazelRunf\n     }\n \n     \"be retained when reinterpreting single fetch nodes\" in {\n+      val engine = Engine()"
  },
  {
    "id" : "084e2c0d-3b85-47c6-b63d-845ea4e8ab0d",
    "prId" : 1192,
    "comments" : [
      {
        "id" : "2cb26684-e6a3-4e8c-a4d5-0c853a19acef",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    ContractIdString.assertFromString(s)\r\n```\r\n\r\nAs a consequence of the proposed aliases for `LedgerString`, and similarly for other direct references to `LedgerString` in order to call methods.",
        "createdAt" : "2019-05-22T20:00:28Z",
        "updatedAt" : "2019-05-24T09:32:12Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "98cbfccb-1937-419b-8818-10abeb437a23",
        "parentId" : "2cb26684-e6a3-4e8c-a4d5-0c853a19acef",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "mostly done. I have some more cleanup to do. I will fix the remaining ones (EventId, WorkflowId, ApplicationId ...)  in an upcoming PR. ",
        "createdAt" : "2019-05-23T08:42:20Z",
        "updatedAt" : "2019-05-24T09:32:12Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "48b39e1b56daf20f06f1101c44b66334dbb58252",
    "line" : null,
    "diffHunk" : "@@ -1067,6 +1067,9 @@ object EngineTest {\n   private implicit def toParty(s: String): Party =\n     Party.assertFromString(s)\n \n+  private implicit def toContractId(s: String): ContractIdString =\n+    LedgerString.assertFromString(s)"
  }
]