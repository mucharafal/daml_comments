[
  {
    "id" : "6dba3406-32c9-481a-9298-a44f55d16545",
    "prId" : 7064,
    "comments" : [
      {
        "id" : "06d5d830-88b7-4674-9242-a4221d15349a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just to be clear, you are killing this because of the other change to forbid dependencies on older LF versions not because the LF version moved from modules to packages, right?",
        "createdAt" : "2020-08-07T14:50:24Z",
        "updatedAt" : "2020-08-10T07:39:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "89d1383b-3833-460c-9dbb-9a06b94206f6",
        "parentId" : "06d5d830-88b7-4674-9242-a4221d15349a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. Let me kill this test in #7050",
        "createdAt" : "2020-08-07T15:11:45Z",
        "updatedAt" : "2020-08-10T07:39:28Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "845a588e5ed65ce12c7f565b8298fd67c9faa5de",
    "line" : null,
    "diffHunk" : "@@ -1,183 +0,0 @@\n-// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n-// SPDX-License-Identifier: Apache-2.0\n-\n-package com.daml.lf\n-\n-import java.util.concurrent.atomic.AtomicInteger\n-\n-import com.daml.lf.data.Ref\n-import com.daml.lf.data.Ref.PackageId\n-import com.daml.lf.engine.ConcurrentCompiledPackages\n-import com.daml.lf.language.Ast.Package\n-import com.daml.lf.language.{Ast, LanguageVersion, Util => AstUtil}\n-import org.scalatest.prop.TableDrivenPropertyChecks\n-import org.scalatest.{Matchers, WordSpec}\n-\n-final class CompiledPackageSpec extends WordSpec with Matchers with TableDrivenPropertyChecks {\n-\n-  val Seq(v1_6, v1_7, v1_8) =\n-    Seq(\"6\", \"7\", \"8\").map(minor =>\n-      LanguageVersion(LanguageVersion.Major.V1, LanguageVersion.Minor.Stable(minor)))\n-\n-  private[this] final class ModBuilder(languageVersion: LanguageVersion) {\n-\n-    import ModBuilder._\n-\n-    val name = Ref.ModuleName.assertFromString(s\"module${counter.incrementAndGet()}\")\n-\n-    private[this] var _deps = Set.empty[PackageId]\n-    private[this] var _body: Ast.Expr = AstUtil.EUnit\n-    private[this] var _built = false\n-\n-    def addDeps(deps: (Ref.PackageId, Ref.ModuleName)): this.type = {\n-      assert(!_built)\n-      val (pkgId, modName) = deps\n-      val id = Ref.Identifier(pkgId, Ref.QualifiedName(modName, noOpName))\n-      _deps = _deps + id.packageId\n-      _body = Ast.ELet(Ast.Binding(None, AstUtil.TUnit, Ast.EVal(id)), _body)\n-      this\n-    }\n-\n-    def build(): (Ast.Module, Set[PackageId]) = {\n-      _built = true\n-      Ast.Module(\n-        name,\n-        Map(noOpName -> Ast.DValue(AstUtil.TUnit, false, _body, false)),\n-        languageVersion,\n-        Ast.FeatureFlags.default\n-      ) -> _deps\n-    }\n-  }\n-\n-  private[this] object ModBuilder {\n-    private val counter = new AtomicInteger()\n-\n-    private def noOpName = Ref.DottedName.assertFromString(\"noOp\")\n-\n-    def apply(\n-        languageVersion: LanguageVersion,\n-        deps: (Ref.PackageId, Ref.ModuleName)*,\n-    ): ModBuilder =\n-      deps.foldLeft(new ModBuilder(languageVersion))(_.addDeps(_))\n-  }\n-\n-  private[this] final class PkgBuilder {\n-\n-    import PkgBuilder._\n-\n-    val id = Ref.PackageId.assertFromString(s\"package${counter.incrementAndGet()}\")\n-\n-    private[this] var _modules = List.empty[Ast.Module]\n-    private[this] var _deps = Set.empty[PackageId]\n-    private[this] var _built = false\n-\n-    def addMod(modBuilder: ModBuilder): this.type = {\n-      assert(!_built)\n-      val (mod, deps) = modBuilder.build()\n-      _modules = mod :: _modules\n-      _deps = _deps | deps\n-      this\n-    }\n-\n-    def build: Package = {\n-      _built = true\n-      Package(_modules, _deps, None)\n-    }\n-\n-  }\n-\n-  private[this] object PkgBuilder {\n-    private val counter = new AtomicInteger()\n-\n-    def apply(modBuilders: ModBuilder*): PkgBuilder =\n-      modBuilders.foldLeft(new PkgBuilder())(_.addMod(_))\n-  }\n-\n-  tests(\"PureCompiledPackages\")(PureCompiledPackages(_).toOption.get)\n-\n-  tests(\"ConcurrentCompiledPackages\") { packages =>\n-    val compiledPackages = ConcurrentCompiledPackages()\n-    packages.foreach {\n-      case (pkgId, pkg) =>\n-        compiledPackages\n-          .addPackage(pkgId, pkg)\n-          .consume(\n-            _ => sys.error(\"unexpected error\"),\n-            packages.get,\n-            _ => sys.error(\"unexpected error\"),\n-          )\n-          .toOption\n-          .get\n-    }\n-    compiledPackages\n-  }\n-\n-  def tests(name: String)(_compile: Map[Ref.PackageId, Ast.Package] => CompiledPackages) =\n-    s\"$name#getMaxLanguageVersione\" should {"
  }
]