[
  {
    "id" : "8fc04a8e-4c81-4b5a-a581-d6a861eba088",
    "prId" : 7491,
    "comments" : [
      {
        "id" : "65af67be-97b2-4e15-a5cd-f7142d6bd397",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      checkAuthorization: CheckAuthorizationMode = CheckAuthrorizationMode.On,\r\n```\r\n\r\nwith somewhere in this file\r\n\r\n```scala\r\nsealed abstract class CheckAuthorizationMode extends Product with Serializable\r\nobject CheckAuthorizationMode{\r\n  case object On extends CheckAuthorizationMode\r\n  @deprecated(\"Backward compatibility flag will be dropped soon\", \"1.6.0\")\r\n  case object Off extends CheckAuthorizationMode\r\n}\r\n```",
        "createdAt" : "2020-09-25T12:52:56Z",
        "updatedAt" : "2020-09-25T15:01:05Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f51cf720-eeba-4316-ae42-a4202458b45e",
        "parentId" : "65af67be-97b2-4e15-a5cd-f7142d6bd397",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Avoiding boolean blindness! Thanks.",
        "createdAt" : "2020-09-25T15:05:46Z",
        "updatedAt" : "2020-09-25T15:05:46Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8693577c-cbc8-4ad9-ba6c-9a04be2d29cd",
        "parentId" : "65af67be-97b2-4e15-a5cd-f7142d6bd397",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Done. except for the `@deprecated`. DIscussed with @remy, and he is happy with that.",
        "createdAt" : "2020-09-25T15:12:02Z",
        "updatedAt" : "2020-09-25T15:12:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "38b81adaa09e0849ae7ae7c9369eb7a5df05a6dc",
    "line" : null,
    "diffHunk" : "@@ -138,6 +138,7 @@ class Engine(val config: EngineConfig = EngineConfig.Stable) {\n       nodeSeed: Option[crypto.Hash],\n       submissionTime: Time.Timestamp,\n       ledgerEffectiveTime: Time.Timestamp,\n+      checkAuthorization: Boolean = true,"
  },
  {
    "id" : "bcb2329b-ffb5-4605-88bd-a2b7cb2c2b4d",
    "prId" : 7122,
    "comments" : [
      {
        "id" : "0a21d090-b2d8-4107-ba25-1750fa1577f8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "If this (and `enableStackTraces`) are no longer used outside the class constructor, can you inline them?\r\n\r\nOr better yet, move them into a factory (or `apply` method), so the construction doesn't do anything?",
        "createdAt" : "2020-08-13T14:42:22Z",
        "updatedAt" : "2020-08-14T13:13:49Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8cc1a562-5056-48ae-8fdf-f7978b2c6d67",
        "parentId" : "0a21d090-b2d8-4107-ba25-1750fa1577f8",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I went for the first solution. ",
        "createdAt" : "2020-08-14T13:20:53Z",
        "updatedAt" : "2020-08-14T13:20:53Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "00c2ee3104d175973633f88a402a4b6ebe11f178",
    "line" : null,
    "diffHunk" : "@@ -411,7 +414,7 @@ class Engine(config: EngineConfig = EngineConfig.Stable) {\n   def preloadPackage(pkgId: PackageId, pkg: Package): Result[Unit] =\n     compiledPackages.addPackage(pkgId, pkg)\n \n-  def setProfileDir(optProfileDir: Option[Path]): Unit = {\n+  private[this] def setProfileDir(optProfileDir: Option[Path]): Unit = {"
  },
  {
    "id" : "6e9fc814-1976-4aa4-9413-87d6533ec369",
    "prId" : 7122,
    "comments" : [
      {
        "id" : "c76ffe9d-c13b-4413-9709-63777742b8b2",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Maybe pass this as constructor parameter to `ConcurrentCompiledPackages` in line 50?",
        "createdAt" : "2020-08-13T16:15:52Z",
        "updatedAt" : "2020-08-14T13:13:49Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "00c2ee3104d175973633f88a402a4b6ebe11f178",
    "line" : null,
    "diffHunk" : "@@ -422,7 +425,7 @@ class Engine(config: EngineConfig = EngineConfig.Stable) {\n     }\n   }\n \n-  def enableStackTraces(enable: Boolean) = {\n+  private[this] def enableStackTraces(enable: Boolean) = {\n     compiledPackages.stackTraceMode =\n       if (enable) speedy.Compiler.FullStackTrace else speedy.Compiler.NoStackTrace"
  },
  {
    "id" : "4b8fce25-0802-4743-8bd4-bc1c320ad117",
    "prId" : 6847,
    "comments" : [
      {
        "id" : "fa0c5841-d4d1-4628-8bf6-6eecf76e7816",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can you move this method below the public methods please?",
        "createdAt" : "2020-07-24T09:28:54Z",
        "updatedAt" : "2020-08-13T16:09:56Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5b0835b4033913f99f958354c2bb2edceec538c8",
    "line" : null,
    "diffHunk" : "@@ -401,6 +401,19 @@ class Engine(config: EngineConfig = EngineConfig.Stable) {\n     */\n   def compiledPackages(): CompiledPackages = compiledPackages\n \n+  private[engine] def addPackage(pkgId: PackageId, pkg: Package): Result[Unit] ="
  },
  {
    "id" : "6632298a-6f72-411e-ab14-b441cbfd3e0b",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "98756a5b-aad7-47d1-97bb-fb0b4019896b",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Just code tidying here.",
        "createdAt" : "2020-06-29T08:35:58Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : 10,
    "diffHunk" : "@@ -73,7 +73,7 @@ final class Engine(config: Engine.Config) {\n     *"
  },
  {
    "id" : "f1ab0b89-d62f-4fe8-bc46-edc9af76b182",
    "prId" : 6515,
    "comments" : [
      {
        "id" : "4a11d480-57fb-4343-9cf6-ccd3468b97ca",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "This must be non-final in order to mock.",
        "createdAt" : "2020-06-29T12:52:02Z",
        "updatedAt" : "2020-06-30T08:52:03Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5b5d17d48af638f059d785c2d530c2f7d89eec0e",
    "line" : 5,
    "diffHunk" : "@@ -46,7 +46,7 @@ import java.nio.file.{Path, Paths}\n   *\n   * This class is thread safe as long `nextRandomInt` is.\n   */\n-final class Engine(config: Engine.Config) {\n+class Engine(config: Engine.Config) {"
  },
  {
    "id" : "e1a19519-76a0-4408-b8c6-609ab1fbbe6f",
    "prId" : 6464,
    "comments" : [
      {
        "id" : "a326b9ff-5e07-4b47-aedc-d36bc4f9972f",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Excellent diff minimization. 👍 ",
        "createdAt" : "2020-07-07T12:13:43Z",
        "updatedAt" : "2020-07-07T20:12:09Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e4534ddfd19654c1da5ce2930793a4eaa7a12cf",
    "line" : 63,
    "diffHunk" : "@@ -211,6 +196,35 @@ class Engine(config: Engine.Config) {\n         seeding = Engine.initialSeeding(submissionSeed, participantId, submissionTime),\n         globalCids,\n       )\n+\n+    } yield result\n+  }\n+\n+  /**\n+    * Check if the given transaction is a valid result of some single-submitter command.\n+    *\n+    * Formally, for all tx, pcs, pkgs, keys:\n+    *   evaluate(validate(tx, ledgerEffectiveTime)) == ResultDone(()) <==> exists cmds. evaluate(submit(cmds)) = tx\n+    * where:\n+    *   evaluate(result) = result.consume(pcs, pkgs, keys)\n+    *\n+    * A transaction may contain relative contract IDs and still pass validation, but not in the root nodes.\n+    *\n+    * This is enforced since commands cannot contain relative contract ids, and we check that root nodes come from commands.\n+    *\n+    *  @param tx a complete unblinded Transaction to be validated\n+    *  @param ledgerEffectiveTime time when the transaction is claimed to be submitted\n+    */\n+  def validate(\n+      tx: Tx.SubmittedTransaction,\n+      ledgerEffectiveTime: Time.Timestamp,\n+      participantId: Ref.ParticipantId,\n+      submissionTime: Time.Timestamp,\n+      submissionSeed: crypto.Hash,\n+  ): Result[Unit] = {\n+    //reinterpret\n+    for {\n+      result <- replay(tx, ledgerEffectiveTime, participantId, submissionTime, submissionSeed)"
  },
  {
    "id" : "174b3fb2-1e4d-4067-a623-20c769566cbb",
    "prId" : 6428,
    "comments" : [
      {
        "id" : "71cd0c3a-21fd-49c2-880f-d78e69d15293",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "The code speaks for itself, i.e., it's not necessary to include this comment.",
        "createdAt" : "2020-06-24T16:54:54Z",
        "updatedAt" : "2020-06-26T06:54:36Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6088f042-d5cf-451a-8f3a-0c92adfc79ff",
        "parentId" : "71cd0c3a-21fd-49c2-880f-d78e69d15293",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2020-06-26T06:55:05Z",
        "updatedAt" : "2020-06-26T06:55:05Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2832ff8457fca90adb26dc3d71314a458f268fd",
    "line" : null,
    "diffHunk" : "@@ -428,4 +474,8 @@ object Engine {\n       s\"compound:${tx.roots.length}\"\n     }\n   }\n+\n+  // build an Engine with DevConfig"
  },
  {
    "id" : "948506ca-d1fc-4dc4-9272-ead654bf0d84",
    "prId" : 6151,
    "comments" : [
      {
        "id" : "f2ef2c65-498e-4e41-be97-720dc0473a1f",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It does not work for `LF-REPL` as the `submissionTime` is always EPOCH and the sequence of `hashes` may repeat (for the same program /scenario it is guarantee it will be the same).\r\nThe fix time and fix sequence of seed is done to have reproducible runs. \r\nIn case of sandbox it should be fine.",
        "createdAt" : "2020-05-29T11:32:17Z",
        "updatedAt" : "2020-05-29T11:34:26Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6b3007df-67c4-4570-a73e-132e66625f32",
        "parentId" : "f2ef2c65-498e-4e41-be97-720dc0473a1f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`LF-REPL` does not use the engine but rather the speedy machine directly. for `daml-lf-repl profile` you need to specify an output file directly hence.",
        "createdAt" : "2020-05-29T13:02:12Z",
        "updatedAt" : "2020-05-29T13:02:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fa42faf4fffb4e6c0891d323b87bdf1cb115576f",
    "line" : 84,
    "diffHunk" : "@@ -396,4 +408,22 @@ object Engine {\n     InitialSeeding.TransactionSeed(\n       crypto.Hash.deriveTransactionSeed(submissionSeed, participant, submissionTime))\n \n+  private def profileName(tx: Tx.Transaction, meta: Tx.Metadata): String = {\n+    val hash = meta.nodeSeeds(0)._2.toHexString\n+    val desc =\n+      if (tx.roots.length == 1) {\n+        val makeDesc = (kind: String, tmpl: Ref.Identifier, extra: Option[String]) =>\n+          s\"${kind}:${tmpl.qualifiedName.name}${extra.map(extra => s\":${extra}\").getOrElse(\"\")}\"\n+        tx.nodes.get(tx.roots(0)).toList.head match {\n+          case create: NodeCreate[_, _] => makeDesc(\"create\", create.coinst.template, None)\n+          case exercise: NodeExercises[_, _, _] =>\n+            makeDesc(\"exercise\", exercise.templateId, Some(exercise.choiceId.toString))\n+          case fetch: NodeFetch[_, _] => makeDesc(\"fetch\", fetch.templateId, None)\n+          case lookup: NodeLookupByKey[_, _] => makeDesc(\"lookup\", lookup.templateId, None)\n+        }\n+      } else {\n+        s\"compound:${tx.roots.length}\"\n+      }\n+    s\"${meta.submissionTime}-${desc}-${hash}.json\""
  },
  {
    "id" : "fec956dd-2369-4daa-8c96-5a0f8a8bdb49",
    "prId" : 6143,
    "comments" : [
      {
        "id" : "1d37cf7a-514a-4f26-9162-24ee76a915f8",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "It's good to document that `validate` only works for submitted transaction, not for committed ones. 👏 ",
        "createdAt" : "2020-06-08T13:56:24Z",
        "updatedAt" : "2020-06-08T14:24:10Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89af6d420800adee764159fb1c3073fae07859e9",
    "line" : 33,
    "diffHunk" : "@@ -165,7 +166,7 @@ final class Engine {\n     *  @param ledgerEffectiveTime time when the transaction is claimed to be submitted\n     */\n   def validate(\n-      tx: Tx.Transaction,\n+      tx: Tx.SubmittedTransaction,"
  },
  {
    "id" : "f107dd51-e1f5-470e-b259-ed8f4271dd98",
    "prId" : 5570,
    "comments" : [
      {
        "id" : "772d510c-f1ea-4636-8cb1-e57d88f4d274",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Please update the comment according to the changed parameters:\r\n- there is no transactionSeed any more\r\n- the seed argument and the submission time should be added to `reinterpret(cmds.submitter, ...)` and `reinterpret(n.requiredAuthorizers, ...)`\r\n- renaming of relative contract IDs is now suffixing of contract IDs\r\n\r\nI also recommend to extend the comment with a warning that it is not sensible to run `reinterpret` for a several nodes unless they are not exactly the roots of the original transaction.",
        "createdAt" : "2020-04-16T05:42:37Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d262f6ef-6175-4320-8fe3-36857133a89c",
        "parentId" : "772d510c-f1ea-4636-8cb1-e57d88f4d274",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not get the last sentence. Could you reformulate ? ",
        "createdAt" : "2020-04-16T12:00:04Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : 111,
    "diffHunk" : "@@ -145,11 +146,12 @@ final class Engine {\n     * If let undefined, no discriminator will be generated.\n     */\n   def reinterpret("
  },
  {
    "id" : "69eef08e-5b70-45e0-a049-3378d3e495b3",
    "prId" : 5570,
    "comments" : [
      {
        "id" : "4b1d0f9b-7f1d-4086-8b08-c541ac9f7491",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Can you update the comment? We no longer have [[transactionSeed]] here anymore.",
        "createdAt" : "2020-04-16T05:46:32Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c89d4cb7-acd0-4f9e-bebe-35db95655d9c",
        "parentId" : "4b1d0f9b-7f1d-4086-8b08-c541ac9f7491",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-04-16T12:03:46Z",
        "updatedAt" : "2020-04-16T15:56:18Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : 193,
    "diffHunk" : "@@ -255,14 +257,16 @@ final class Engine {\n       submitters: Set[Party],\n       commands: ImmArray[SpeedyCommand],\n       ledgerTime: Time.Timestamp,\n-      transactionSeedAndSubmissionTime: Option[(crypto.Hash, Time.Timestamp)]\n-  ): Result[(Transaction.Transaction, Boolean)] = {\n+      submissionTime: Time.Timestamp,"
  },
  {
    "id" : "fe75bb7f-479c-4555-98f8-ee5fce642fb2",
    "prId" : 5570,
    "comments" : [
      {
        "id" : "33eb9b18-95bb-40e5-92f1-aae49cccf57d",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "```suggestion\r\n    * If undefined the contract IDs are derived using V0 scheme.\r\n```",
        "createdAt" : "2020-04-17T09:03:04Z",
        "updatedAt" : "2020-04-17T09:10:47Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : 108,
    "diffHunk" : "@@ -96,75 +95,64 @@ final class Engine {\n               commands = processedCmds,\n               ledgerTime = cmds.ledgerEffectiveTime,\n               submissionTime = submissionTime,\n-              transactionSeed = submissionSeed.map(\n-                crypto.Hash.deriveTransactionSeed(_, participantId, submissionTime)),\n+              seeding = Engine.initialSeeding(submissionSeed, participantId, submissionTime),\n             ) map {\n-              case (tx, dependsOnTime) =>\n+              case (tx, dependsOnTime, nodeSeeds) =>\n                 // Annotate the transaction with the package dependencies. Since\n                 // all commands are actions on a contract template, with a fully typed\n                 // argument, we only need to consider the templates mentioned in the command\n                 // to compute the full dependencies.\n                 val deps = processedCmds.foldLeft(Set.empty[PackageId]) { (pkgIds, cmd) =>\n                   val pkgId = cmd.templateId.packageId\n                   val transitiveDeps =\n-                    _compiledPackages\n+                    compiledPackages\n                       .getPackageDependencies(pkgId)\n                       .getOrElse(\n                         sys.error(s\"INTERNAL ERROR: Missing dependencies of package $pkgId\"))\n                   (pkgIds + pkgId) union transitiveDeps\n                 }\n-                tx -> Transaction.Metadata(\n-                  submissionTime = submissionTime,\n-                  usedPackages = deps,\n-                  dependsOnTime = dependsOnTime,\n+                tx -> Tx.Metadata(\n+                  submissionSeed,\n+                  submissionTime,\n+                  deps,\n+                  dependsOnTime,\n+                  nodeSeeds,\n                 )\n             }\n         }\n       }\n   }\n \n   /**\n-    * Behaves like `submit`, but it takes GenNode arguments instead of a Commands argument.\n-    * That is, it can be used to reinterpret an already interpreted transaction (since it consists of GenNodes).\n-    * Formally, the following is guaranteed to hold for all pcs, pkgs, and keys, when evaluated on the same Engine:\n-    * evaluate(submit(cmds)) = ResultDone(tx) ==> evaluate(reinterpret(cmds.submitters, txRoots, cmds.ledgerEffectiveTime)) === ResultDone(tx)\n-    * where:\n-    *   evaluate(result) = result.consume(pcs, pkgs, keys)\n-    *   txRoots = tx.roots.map(id => tx.nodes.get(id).get).toSeq\n-    *   tx === tx' if tx and tx' are equivalent modulo a renaming of node and relative contract IDs\n-    *\n-    * Moreover, if the transaction tx is valid at time leTime, n belongs to tx.nodes, and subtx is the subtransaction of\n-    * tx rooted at n, the following holds:\n-    * evaluate(reinterpret(n.requiredAuthorizers, Seq(n), leTime) === subtx\n+    * Behaves like `submit`, but it takes a GenNode argument instead of a Commands argument.\n+    * That is, it can be used to reinterpret partially an already interpreted transaction (since it consists of GenNodes).\n     *\n-    * In addition to the errors returned by `submit`, reinterpretation fails with a `ValidationError` whenever `nodes`\n-    * contain a relative contract ID, either as the target contract of a fetch, or as an argument to a\n-    * create or an exercise choice.\n     *\n-    * [[transactionSeed]] is the master hash te be used to derive node and contractId discriminator.\n-    * If let undefined, no discriminator will be generated.\n+    * [[nodeSeed]] is the seed of the Create and Exercise node as generated during submission.\n+    * If undefined the contract IDs are derive using V0 scheme."
  },
  {
    "id" : "417267b5-54bf-4308-a859-0437ca59af67",
    "prId" : 5570,
    "comments" : [
      {
        "id" : "49c8b215-9b86-4336-8647-0303c843ed70",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "It may be worth referencing what 'V0 scheme' means.",
        "createdAt" : "2020-04-17T09:09:12Z",
        "updatedAt" : "2020-04-17T09:10:47Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : 108,
    "diffHunk" : "@@ -96,75 +95,64 @@ final class Engine {\n               commands = processedCmds,\n               ledgerTime = cmds.ledgerEffectiveTime,\n               submissionTime = submissionTime,\n-              transactionSeed = submissionSeed.map(\n-                crypto.Hash.deriveTransactionSeed(_, participantId, submissionTime)),\n+              seeding = Engine.initialSeeding(submissionSeed, participantId, submissionTime),\n             ) map {\n-              case (tx, dependsOnTime) =>\n+              case (tx, dependsOnTime, nodeSeeds) =>\n                 // Annotate the transaction with the package dependencies. Since\n                 // all commands are actions on a contract template, with a fully typed\n                 // argument, we only need to consider the templates mentioned in the command\n                 // to compute the full dependencies.\n                 val deps = processedCmds.foldLeft(Set.empty[PackageId]) { (pkgIds, cmd) =>\n                   val pkgId = cmd.templateId.packageId\n                   val transitiveDeps =\n-                    _compiledPackages\n+                    compiledPackages\n                       .getPackageDependencies(pkgId)\n                       .getOrElse(\n                         sys.error(s\"INTERNAL ERROR: Missing dependencies of package $pkgId\"))\n                   (pkgIds + pkgId) union transitiveDeps\n                 }\n-                tx -> Transaction.Metadata(\n-                  submissionTime = submissionTime,\n-                  usedPackages = deps,\n-                  dependsOnTime = dependsOnTime,\n+                tx -> Tx.Metadata(\n+                  submissionSeed,\n+                  submissionTime,\n+                  deps,\n+                  dependsOnTime,\n+                  nodeSeeds,\n                 )\n             }\n         }\n       }\n   }\n \n   /**\n-    * Behaves like `submit`, but it takes GenNode arguments instead of a Commands argument.\n-    * That is, it can be used to reinterpret an already interpreted transaction (since it consists of GenNodes).\n-    * Formally, the following is guaranteed to hold for all pcs, pkgs, and keys, when evaluated on the same Engine:\n-    * evaluate(submit(cmds)) = ResultDone(tx) ==> evaluate(reinterpret(cmds.submitters, txRoots, cmds.ledgerEffectiveTime)) === ResultDone(tx)\n-    * where:\n-    *   evaluate(result) = result.consume(pcs, pkgs, keys)\n-    *   txRoots = tx.roots.map(id => tx.nodes.get(id).get).toSeq\n-    *   tx === tx' if tx and tx' are equivalent modulo a renaming of node and relative contract IDs\n-    *\n-    * Moreover, if the transaction tx is valid at time leTime, n belongs to tx.nodes, and subtx is the subtransaction of\n-    * tx rooted at n, the following holds:\n-    * evaluate(reinterpret(n.requiredAuthorizers, Seq(n), leTime) === subtx\n+    * Behaves like `submit`, but it takes a GenNode argument instead of a Commands argument.\n+    * That is, it can be used to reinterpret partially an already interpreted transaction (since it consists of GenNodes).\n     *\n-    * In addition to the errors returned by `submit`, reinterpretation fails with a `ValidationError` whenever `nodes`\n-    * contain a relative contract ID, either as the target contract of a fetch, or as an argument to a\n-    * create or an exercise choice.\n     *\n-    * [[transactionSeed]] is the master hash te be used to derive node and contractId discriminator.\n-    * If let undefined, no discriminator will be generated.\n+    * [[nodeSeed]] is the seed of the Create and Exercise node as generated during submission.\n+    * If undefined the contract IDs are derive using V0 scheme."
  },
  {
    "id" : "d8a854b6-75d8-4516-9b7a-eb6d842686f3",
    "prId" : 5570,
    "comments" : [
      {
        "id" : "d818eb96-6fce-4d49-bd56-81d8f6b840c7",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Did you mean `seeding used to derive node and contractId discriminator`?",
        "createdAt" : "2020-04-17T09:10:21Z",
        "updatedAt" : "2020-04-17T09:10:47Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0131af72a15602be1889879e8178298a5cea4a63",
    "line" : 186,
    "diffHunk" : "@@ -246,8 +234,7 @@ final class Engine {\n     * Submitters are a set, in order to support interpreting subtransactions\n     * (a subtransaction can be authorized by multiple parties).\n     *\n-    * [[transactionSeed]] is the master hash used to derive node and contractId discriminator.\n-    * If let undefined, no discriminator will be generated.\n+    * [[seeding]] is seeding used to derive node seed and contractId discriminator."
  },
  {
    "id" : "659af145-dc8d-4058-b51d-efc880d948cf",
    "prId" : 5486,
    "comments" : [
      {
        "id" : "a12bc383-3b76-4757-95d0-5ab9a73802e4",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "That looks like a left-over.",
        "createdAt" : "2020-04-08T13:13:51Z",
        "updatedAt" : "2020-04-08T13:24:11Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "50e1d58f9542c576e6eab5cf0f45f84b6f1fa196",
    "line" : null,
    "diffHunk" : "@@ -146,21 +146,19 @@ final class Engine {\n     * If let undefined, no discriminator will be generated.\n     */\n   def reinterpret(\n-      submissionSeedAndTime: Option[(crypto.Hash, Time.Timestamp)],\n-      participantId: Ref.ParticipantId,\n+      transactionSeedAndSubmissionTime: Option[(crypto.Hash, Time.Timestamp)],\n       submitters: Set[Party],\n       nodes: Seq[GenNode.WithTxValue[Value.NodeId, Value.ContractId]],\n       ledgerEffectiveTime: Time.Timestamp,\n   ): Result[(Transaction.Transaction, Boolean)] = {\n \n-    val transactionSeedAndSubmissionTime = submissionSeedAndTime.map {\n-      case (seed, time) =>\n-        crypto.Hash.deriveTransactionSeed(seed, participantId, time) -> time\n-    }\n+    remy.log(\" *** \")"
  },
  {
    "id" : "4b30ac66-2ab1-44e4-9045-00f09d990d21",
    "prId" : 4776,
    "comments" : [
      {
        "id" : "8e296cfa-66bd-45c7-aa52-1bb5bcec0818",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Should that be `+/- 10µs`?",
        "createdAt" : "2020-03-03T11:27:10Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b95c2b9-68b4-48fb-80ea-15b7a3ce4324",
        "parentId" : "8e296cfa-66bd-45c7-aa52-1bb5bcec0818",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "@andreaslochbihler-da, what should be the delta ?   ",
        "createdAt" : "2020-03-04T09:17:36Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2f01b40-f2c3-4867-98bf-0115387c37f2",
        "parentId" : "8e296cfa-66bd-45c7-aa52-1bb5bcec0818",
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "+/-5 or 10 microseconds are both fine.\r\n\r\nTwo suggestions for the implementation:\r\n1. Keep your own random instance in this class that users can configure. This will help to make tests deterministic (they can provide the seed).\r\n2. I don't see any need for using a normal distribution here; the uniform distribution should be just as good and that requires less computation than the Gaussian.",
        "createdAt" : "2020-03-04T09:55:20Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d7c8b3bb-93e3-4996-b4fb-28e008726f32",
        "parentId" : "8e296cfa-66bd-45c7-aa52-1bb5bcec0818",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thanks Andrea.\r\nI implemented your suggestions.  ",
        "createdAt" : "2020-03-04T10:31:52Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a94af9a492326522034688b9bdf1cf1d90efd4e4",
    "line" : null,
    "diffHunk" : "@@ -48,6 +50,12 @@ final class Engine {\n   private[this] val _commandTranslation: CommandPreprocessor = new CommandPreprocessor(\n     _compiledPackages)\n \n+  // We want to make the submission different from the ledgerTime,\n+  // then we pick a random time +/- 5ms around ledger time"
  },
  {
    "id" : "c0a001fa-9580-4399-8897-6b808bbcde17",
    "prId" : 4776,
    "comments" : [
      {
        "id" : "ca49e51b-3082-45c5-9bb4-5274a515d07e",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "A comment explaining why we want to make it different would be helpful here.",
        "createdAt" : "2020-03-10T12:43:28Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0195b378-dd4a-4949-89b8-02daf758e099",
        "parentId" : "ca49e51b-3082-45c5-9bb4-5274a515d07e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-11T08:44:14Z",
        "updatedAt" : "2020-03-11T09:35:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a94af9a492326522034688b9bdf1cf1d90efd4e4",
    "line" : null,
    "diffHunk" : "@@ -41,13 +41,22 @@ import com.digitalasset.daml.lf.speedy.{Command => SpeedyCommand}\n   * even if `result1` and `result2` request to dereference the same id.\n   * <p>\n   *\n-  * This class is thread safe.\n+  * The class requires a pseudo random generator (`nextRandomInt`) to randomize the\n+  * submission time. This generator does not have to be cryptographically secure.\n+  * <p>\n+  *\n+  * This class is thread safe as long `nextRandomInt` is.\n   */\n-final class Engine {\n+final class Engine(nextRandomInt: () => Int) {\n   private[this] val _compiledPackages: MutableCompiledPackages = ConcurrentCompiledPackages()\n   private[this] val _commandTranslation: CommandPreprocessor = new CommandPreprocessor(\n     _compiledPackages)\n \n+  // We want to make the submissionTime different from the ledgerTime,"
  },
  {
    "id" : "66f79dbc-ff82-4cc4-ba21-2393a091ee59",
    "prId" : 4741,
    "comments" : [
      {
        "id" : "e820e3cf-0ed1-400b-921d-34b3daa98cd5",
        "parentId" : null,
        "author" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "body" : "Why change the formatting here?",
        "createdAt" : "2020-02-27T14:28:15Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "miklos-da",
          "name" : "Miklos",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/57664299?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4c5231a-cba4-4204-a3bd-1caa4ac02498",
        "parentId" : "e820e3cf-0ed1-400b-921d-34b3daa98cd5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "reverted",
        "createdAt" : "2020-02-27T18:36:02Z",
        "updatedAt" : "2020-03-02T09:32:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6fdd134e28edcb94e9bf2aff60e5605405bf6128",
    "line" : null,
    "diffHunk" : "@@ -217,20 +222,20 @@ final class Engine {\n         _compiledPackages,\n         commands.map(_._2._2.templateId))\n       rtx <- interpretCommands(\n-        transactionSeed = tx.transactionSeed,\n+        transactionSeed = transactionSeed,\n         validating = true,\n         checkSubmitterInMaintainers = checkSubmitterInMaintainers,\n         submitters = submitters,\n         commands = commands.map(_._2),\n         time = ledgerEffectiveTime\n       )\n-      validationResult <- if (tx isReplayedBy rtx) {\n+      validationResult <- if (tx isReplayedBy rtx)"
  },
  {
    "id" : "77d63a56-2cd4-4928-9ef7-35f2587cb16a",
    "prId" : 4533,
    "comments" : [
      {
        "id" : "ab3effb8-dad8-407e-b2fb-e82602e31b8b",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Looks like the submission seed is only used once to derive the transaction seed. Instead of passing `participantId` and `submissionSeed`, can we instead pass the `transactionSeed` directly?",
        "createdAt" : "2020-02-17T09:37:19Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "55af1b97-01d4-44d4-8d1d-c01d5da73058",
        "parentId" : "ab3effb8-dad8-407e-b2fb-e82602e31b8b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The `submissionSeed` is used twice:\r\n- It is used to compute the `transactionSeed` \r\n- It is stored in the transaction itself, so the receiver of the transaction can verify the `transactionSeed` was derived properly.",
        "createdAt" : "2020-02-17T09:46:08Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6bd78b8c-3d6c-4e37-8a91-8c1a5a4fdc09",
        "parentId" : "ab3effb8-dad8-407e-b2fb-e82602e31b8b",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Hm, where is it actually stored in the transaction? Sorry if I'm missing something obvious.",
        "createdAt" : "2020-02-17T12:16:00Z",
        "updatedAt" : "2020-02-17T12:34:30Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "191e3f88-df10-4adc-b007-0053911b0911",
        "parentId" : "ab3effb8-dad8-407e-b2fb-e82602e31b8b",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "See @remyhaemmerle-da's [comment](https://github.com/digital-asset/daml/pull/4533#discussion_r380156077).",
        "createdAt" : "2020-02-17T12:36:42Z",
        "updatedAt" : "2020-02-17T12:36:42Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "69e42150daf521f93631ef81bea5b8b2314d7beb",
    "line" : 15,
    "diffHunk" : "@@ -77,7 +77,8 @@ final class Engine {\n     */\n   def submit(\n       cmds: Commands,\n-      transactionSeed: Option[crypto.Hash] = None\n+      participantId: ParticipantId,\n+      submissionSeed: Option[crypto.Hash],"
  },
  {
    "id" : "962dd7e3-3628-4077-aec0-328102863f29",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "e6f409db-ee5a-4de8-afcc-76f903dbbe38",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "as above: more descriptive name and comments.",
        "createdAt" : "2020-01-21T15:23:03Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "32cc3437-a5ad-4e9b-83a5-1e16b1604a17",
        "parentId" : "e6f409db-ee5a-4de8-afcc-76f903dbbe38",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "add description in the comment above",
        "createdAt" : "2020-01-22T07:49:57Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : null,
    "diffHunk" : "@@ -123,6 +127,7 @@ final class Engine {\n     * create or an exercise choice.\n     */\n   def reinterpret(\n+      seed: Option[crypto.Hash],"
  },
  {
    "id" : "48bdcd86-ddf8-427d-9f73-87eb9bb06bb1",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "5a7a309c-d814-472c-8618-857f6b3e8903",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "a more descriptive name would be good (nodeIdSeed? I don't know...) and we should document how it is used.",
        "createdAt" : "2020-01-21T15:23:55Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eb59dc63-c604-4556-8283-e7e872ed6c58",
        "parentId" : "5a7a309c-d814-472c-8618-857f6b3e8903",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "add description in the comment above\r\n",
        "createdAt" : "2020-01-22T07:50:07Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 27,
    "diffHunk" : "@@ -71,7 +71,10 @@ final class Engine {\n     *\n     * The resulting transaction is annotated with packages required to validate it.\n     */\n-  def submit(cmds: Commands): Result[Transaction.Transaction] = {\n+  def submit(\n+      cmds: Commands,\n+      transactionSeed: Option[crypto.Hash] = None"
  },
  {
    "id" : "7111bb11-8b12-4649-b963-2fa5acfb1729",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "c7b96dfc-dcaa-4ef5-af4b-11deac513bd0",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "```suggestion\r\n    * If left undefined, no discriminator will be generated.\r\n```",
        "createdAt" : "2020-01-22T10:23:54Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 46,
    "diffHunk" : "@@ -121,8 +129,12 @@ final class Engine {\n     * In addition to the errors returned by `submit`, reinterpretation fails with a `ValidationError` whenever `nodes`\n     * contain a relative contract ID, either as the target contract of a fetch, or as an argument to a\n     * create or an exercise choice.\n+    *\n+    * [[transactionSeed]] is the master hash te be used to derive node and contractId discriminator.\n+    * If let undefined, no discriminator will be generated."
  },
  {
    "id" : "609cf2b5-71a8-4ba5-bd3d-ccd2534833bf",
    "prId" : 4077,
    "comments" : [
      {
        "id" : "cad50c26-c734-4f92-997f-575dc9950e97",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "```suggestion\r\n    * If left undefined, no discriminator will be generated.\r\n```",
        "createdAt" : "2020-01-22T10:24:08Z",
        "updatedAt" : "2020-01-22T16:15:50Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b715411c8916b18ec1c64dcd871e8a0fd22b9adb",
    "line" : 87,
    "diffHunk" : "@@ -303,19 +317,25 @@ final class Engine {\n     *\n     * Submitters are a set, in order to support interpreting subtransactions\n     * (a subtransaction can be authorized by multiple parties).\n+    *\n+    * [[transactionSeed]] is the master hash used to derive node and contractId discriminator.\n+    * If let undefined, no discriminator will be generated."
  },
  {
    "id" : "a77785a7-5364-411c-9f27-6b7f836161c4",
    "prId" : 2995,
    "comments" : [
      {
        "id" : "488048f8-f662-4a23-a535-9babd52e2011",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Consider changing the type of `asValueWithAbsoluteContractIds` to also only talk about `Value` and not `VersionedValue`.",
        "createdAt" : "2019-09-24T10:47:46Z",
        "updatedAt" : "2019-09-24T12:01:28Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b6cf3366-6f02-4d0c-937a-20a4db40ca6f",
        "parentId" : "488048f8-f662-4a23-a535-9babd52e2011",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch. Thx !",
        "createdAt" : "2019-09-24T12:02:05Z",
        "updatedAt" : "2019-09-24T12:02:06Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4150496d358c7d7e25033037c7ebbaf2a778e62c",
    "line" : null,
    "diffHunk" : "@@ -219,7 +219,7 @@ final class Engine {\n       case NodeCreate(coid @ _, coinst, optLoc @ _, sigs @ _, stks @ _, key @ _) =>\n         val identifier = coinst.template\n         asValueWithAbsoluteContractIds(coinst.arg).flatMap("
  },
  {
    "id" : "b43e677e-d3bb-48dc-b09c-3722d03ccde3",
    "prId" : 1967,
    "comments" : [
      {
        "id" : "520a574e-274e-4072-8f8b-650fe054c0ac",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "Remove this TODO",
        "createdAt" : "2019-07-04T09:34:46Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "da099bb4-a69c-49e9-b497-837e790697d9",
        "parentId" : "520a574e-274e-4072-8f8b-650fe054c0ac",
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "i.e. drop or convert to a comment helping the reader with definite information",
        "createdAt" : "2019-07-04T09:35:18Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bf6d5b52-902a-4373-a8a1-39b20b263a81",
        "parentId" : "520a574e-274e-4072-8f8b-650fe054c0ac",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "@oggy- can you comment here?",
        "createdAt" : "2019-07-04T11:23:12Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ab26f081f43a184ed21982c7e26995630d1f49e",
    "line" : null,
    "diffHunk" : "@@ -98,7 +103,10 @@ final class Engine {\n   ): Result[Transaction.Transaction] = {\n     for {\n       commands <- Result.sequence(ImmArray(nodes).map(translateNode(_commandTranslation)))\n-      result <- interpret(submitters, commands, ledgerEffectiveTime)\n+      lfVers <- CommandsVersion(_compiledPackages, commands.map(_._2.templateId))\n+      // TODO(FM) is it wrong to assume that we're validating here? presumably not,"
  },
  {
    "id" : "fe6c04a9-0762-4326-a412-1869a08c8395",
    "prId" : 1967,
    "comments" : [
      {
        "id" : "b49d5c81-9123-4685-81d9-2ff02fde33ad",
        "parentId" : null,
        "author" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "body" : "add a comment explaining what this argument is used for",
        "createdAt" : "2019-07-04T09:35:52Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "meiersi-da",
          "name" : "Simon Meier",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/13766136?u=a00dd223b1cde8578fe208ebbb7cccd4db41eb9a&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9fad7593-3203-4452-8a64-7b724ae2f2dc",
        "parentId" : "b49d5c81-9123-4685-81d9-2ff02fde33ad",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-04T11:50:25Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ab26f081f43a184ed21982c7e26995630d1f49e",
    "line" : null,
    "diffHunk" : "@@ -245,32 +254,24 @@ final class Engine {\n     }))\n   }\n \n-  private[engine] def interpretFromNodeId(\n-      command: SpeedyCommand,\n-      nodeId: Transaction.NodeId,\n-      time: Time.Timestamp\n-  ): Result[Transaction.Transaction] = {\n-\n-    val machine =\n-      Machine.build(Compiler(_compiledPackages.packages).compile(command), _compiledPackages)\n-    machine.ptx = machine.ptx.copy(nextNodeId = nodeId)\n-    interpretLoop(machine, time)\n-  }\n-\n   /** Interprets the given expression under the authority of @submitters\n     *\n     * Submitters are a set, in order to support interpreting subtransactions (a subtransaciton can be authorized\n     * by multiple parties).\n     */\n   private[engine] def interpret(\n+      validating: Boolean,\n+      submissionVersion: LanguageVersion,"
  },
  {
    "id" : "908310e6-b814-4db7-9a06-abe583c373ff",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "61d8dd98-fc9a-453a-ab21-542e7b4c4533",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "This is the wrong place to put this her. `cmds` already contains the submitter. In fact, what are the semantics of this?",
        "createdAt" : "2019-05-28T16:22:36Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : null,
    "diffHunk" : "@@ -69,34 +69,41 @@ final class Engine {\n     *      because the caller has not provided a required contract instance or package.\n     * </li>\n     * </ul>\n+    *\n+    * This method does NOT perform authorization checks; ResultDone can contain a transaction that's not well-authorized.\n     */\n-  def submit(cmds: Commands): Result[Transaction.Transaction] = {\n+  def submit(submitters: Set[Party], cmds: Commands): Result[Transaction.Transaction] = {"
  },
  {
    "id" : "46c2652a-88e0-4c2d-a8a9-24dd2fe536d1",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "74c1c8c7-58b3-46cc-9c39-b925131fb3e8",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "```suggestion\r\n    * Executes commands `cmds` under the authority of `cmds.submitters` and returns one of the following:\r\n```",
        "createdAt" : "2019-06-07T15:28:19Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : null,
    "diffHunk" : "@@ -52,7 +52,7 @@ final class Engine {\n   private[this] val _commandTranslation = CommandPreprocessor(_compiledPackages)\n \n   /**\n-    * Executes commands `cmds` and returns one of the following:\n+    * Executes commands `cmds` under the authority of `submitters` and returns one of the following:"
  },
  {
    "id" : "8e28bb47-acaa-4870-a61a-511641f327bb",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "c471599a-7eab-4d57-964a-7efd2984b8e0",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "```suggestion\r\n    * evaluate(submit(cmds)) = ResultDone(tx) ==> evaluate(reinterpret(cmds.submitters, txRoots, cmds.ledgerEffectiveTime)) === ResultDone(tx)\r\n```",
        "createdAt" : "2019-06-07T15:29:56Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : null,
    "diffHunk" : "@@ -69,34 +69,41 @@ final class Engine {\n     *      because the caller has not provided a required contract instance or package.\n     * </li>\n     * </ul>\n+    *\n+    * This method does NOT perform authorization checks; ResultDone can contain a transaction that's not well-authorized.\n     */\n   def submit(cmds: Commands): Result[Transaction.Transaction] = {\n     _commandTranslation\n       .preprocessCommands(cmds)\n-      .flatMap(interpret(_, cmds.ledgerEffectiveTime))\n+      .flatMap(interpret(cmds.submitters, _, cmds.ledgerEffectiveTime))\n   }\n \n   /**\n     * Behaves like `submit`, but it takes GenNode arguments instead of a Commands argument.\n     * That is, it can be used to reinterpret an already interpreted transaction (since it consists of GenNodes).\n     * Formally, the following is guaranteed to hold for all pcs, pkgs, and keys, when evaluated on the same Engine:\n-    * evaluate(submit(cmds)) = ResultDone(tx) ==> evaluate(reinterpret(txRoots, cmds.ledgerEffectiveTime)) === ResultDone(tx)\n+    * evaluate(submit(submitters, cmds)) = ResultDone(tx) ==> evaluate(reinterpret(submitters, txRoots, cmds.ledgerEffectiveTime)) === ResultDone(tx)"
  },
  {
    "id" : "c3c25d08-86a5-4565-aa83-eec389be265f",
    "prId" : 1414,
    "comments" : [
      {
        "id" : "7de3d06e-cedb-47cd-8ae5-c2fe35888edd",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "could you give some color on why this is the right thing to do?",
        "createdAt" : "2019-06-07T15:31:32Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9dc64abb-d080-456d-9059-74ed912c874d",
        "parentId" : "7de3d06e-cedb-47cd-8ae5-c2fe35888edd",
        "author" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "body" : "Assuming that the transaction comes from the ledger API, the union of all required authorizers of the transaction roots should be a singleton set, the submitter of the ledger API command. I however did not enforce that the set is a singleton, as I don't have a complete overview of how this method is used.",
        "createdAt" : "2019-06-11T16:41:31Z",
        "updatedAt" : "2019-06-28T13:00:45Z",
        "lastEditedBy" : {
          "login" : "oggy-",
          "name" : "Ognjen Maric",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/325151?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ab0ead601a9595d13f63af85647223621775e3eb",
    "line" : null,
    "diffHunk" : "@@ -115,10 +122,22 @@ final class Engine {\n       tx: Transaction.Transaction,\n       ledgerEffectiveTime: Time.Timestamp\n   ): Result[Unit] = {\n+    import scalaz.syntax.traverse.ToTraverseOps\n+    import scalaz.std.option._\n     //reinterpret\n     for {\n+      // Guess the submitters as the union of all required authorizers of the transaction roots."
  }
]