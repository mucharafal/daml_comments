[
  {
    "id" : "b0069c37-e393-45d9-9e4e-b751da845e9e",
    "prId" : 5434,
    "comments" : [
      {
        "id" : "b518c6d7-8b56-4028-b719-1fc3abb073e7",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This would only happen on the first set of command that refer to a certain package, right?",
        "createdAt" : "2020-04-08T15:33:47Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a81d1add-9723-423b-b29f-452ae112662b",
        "parentId" : "b518c6d7-8b56-4028-b719-1fc3abb073e7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Yes. \r\nAnyway, this comment is legacy in the sens we want to get rid of the \"monadic\" nesting. ",
        "createdAt" : "2020-04-08T19:02:09Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15d20c06d3a28aa8099fedae3c1eaab0786182ae",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,173 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package engine\n+package preprocessing\n+\n+import com.daml.lf.data._\n+import com.daml.lf.language.Ast\n+import com.daml.lf.speedy.SValue\n+import com.daml.lf.value.Value\n+\n+import scala.annotation.tailrec\n+\n+private[preprocessing] final class CommandPreprocessor(compiledPackages: MutableCompiledPackages) {\n+\n+  import Preprocessor._\n+\n+  val valueTranslator = new ValueTranslator(compiledPackages)\n+\n+  @throws[PreprocessorException]\n+  private def unsafeGetPackage(pkgId: Ref.PackageId) =\n+    compiledPackages.getPackage(pkgId).getOrElse(throw PreprocessorMissingPackage(pkgId))\n+\n+  @throws[PreprocessorException]\n+  private def unsafeGetTemplate(templateId: Ref.Identifier) =\n+    assertRight(\n+      PackageLookup.lookupTemplate(\n+        unsafeGetPackage(templateId.packageId),\n+        templateId.qualifiedName\n+      ))\n+\n+  @throws[PreprocessorException]\n+  private def unsafeGetChoiceArgType(\n+      tmplId: Ref.Identifier,\n+      tmpl: Ast.Template,\n+      choiceId: Ref.ChoiceName) =\n+    tmpl.choices.get(choiceId) match {\n+      case Some(choice) => choice.argBinder._2\n+      case None =>\n+        val choiceNames = tmpl.choices.toList.map(_._1)\n+        fail(\n+          s\"Couldn't find requested choice $choiceId for template $tmplId. Available choices: $choiceNames\"\n+        )\n+    }\n+\n+  @throws[PreprocessorException]\n+  private def unsafeGetContractKeyType(tmplId: Ref.Identifier, tmpl: Ast.Template) =\n+    tmpl.key match {\n+      case Some(ck) => ck.typ\n+      case None =>\n+        fail(s\"Impossible to exercise by key, no key is defined for template $tmplId\")\n+    }\n+\n+  @throws[PreprocessorException]\n+  def unsafePreprocessCreate(\n+      templateId: Ref.Identifier,\n+      argument: Value[Value.AbsoluteContractId],\n+  ): speedy.Command.Create = {\n+    val arg = valueTranslator.unsafeTranslateValue(Ast.TTyCon(templateId), argument)\n+    speedy.Command.Create(templateId, arg)\n+  }\n+\n+  def unsafePreprocessFetch(\n+      templateId: Ref.Identifier,\n+      coid: Value.AbsoluteContractId,\n+  ): speedy.Command.Fetch =\n+    speedy.Command.Fetch(templateId, SValue.SContractId(coid))\n+\n+  @throws[PreprocessorException]\n+  def unsafePreprocessExercise(\n+      templateId: Ref.Identifier,\n+      contractId: Value.ContractId,\n+      choiceId: Ref.ChoiceName,\n+      argument: Value[Value.AbsoluteContractId],\n+  ): speedy.Command.Exercise = {\n+    val template = unsafeGetTemplate(templateId)\n+    val choiceArgType = unsafeGetChoiceArgType(templateId, template, choiceId)\n+    val arg = valueTranslator.unsafeTranslateValue(choiceArgType, argument)\n+    speedy.Command.Exercise(templateId, SValue.SContractId(contractId), choiceId, arg)\n+  }\n+\n+  @throws[PreprocessorException]\n+  def unsafePreprocessExerciseByKey(\n+      templateId: Ref.Identifier,\n+      contractKey: Value[Value.AbsoluteContractId],\n+      choiceId: Ref.ChoiceName,\n+      argument: Value[Value.AbsoluteContractId],\n+  ): speedy.Command.ExerciseByKey = {\n+    val template = unsafeGetTemplate(templateId)\n+    val choiceArgType = unsafeGetChoiceArgType(templateId, template, choiceId)\n+    val ckTtype = unsafeGetContractKeyType(templateId, template)\n+    val arg = valueTranslator.unsafeTranslateValue(choiceArgType, argument)\n+    val key = valueTranslator.unsafeTranslateValue(ckTtype, contractKey)\n+    speedy.Command.ExerciseByKey(templateId, key, choiceId, arg)\n+  }\n+\n+  @throws[PreprocessorException]\n+  private[preprocessing] def unsafePreprocessCreateAndExercise(\n+      templateId: Ref.ValueRef,\n+      createArgument: Value[Value.AbsoluteContractId],\n+      choiceId: Ref.ChoiceName,\n+      choiceArgument: Value[Value.AbsoluteContractId],\n+  ): speedy.Command.CreateAndExercise = {\n+    val createArg =\n+      valueTranslator.unsafeTranslateValue(Ast.TTyCon(templateId), createArgument)\n+    val template = unsafeGetTemplate(templateId)\n+    val choiceArgType = unsafeGetChoiceArgType(templateId, template, choiceId)\n+    val choiceArg =\n+      valueTranslator.unsafeTranslateValue(choiceArgType, choiceArgument)\n+    speedy.Command\n+      .CreateAndExercise(templateId, createArg, choiceId, choiceArg)\n+  }\n+\n+  @throws[PreprocessorException]\n+  private[preprocessing] def unsafePreprocessLookupByKey(\n+      templateId: Ref.ValueRef,\n+      contractKey: Value[Nothing],\n+  ): speedy.Command.LookupByKey = {\n+    val template = unsafeGetTemplate(templateId)\n+    val ckTtype = unsafeGetContractKeyType(templateId, template)\n+    val key = valueTranslator.unsafeTranslateValue(ckTtype, contractKey)\n+    speedy.Command.LookupByKey(templateId, key)\n+  }\n+\n+  @throws[PreprocessorException]\n+  def unsafePreprocessCommands(\n+      cmds: ImmArray[command.Command],\n+  ): ImmArray[speedy.Command] = {\n+    // before, we had\n+    //\n+    // ```\n+    // Result.sequence(ImmArray(cmds.commands).map(preprocessCommand))\n+    // ```\n+    //\n+    // however that is bad, because it'll generate a `NeedPackage` for each command,"
  },
  {
    "id" : "30ce5afb-c0f1-4f0b-b2eb-76c57f95f05e",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "2311f7d1-b1cc-4bd5-9552-68e452f24749",
        "parentId" : null,
        "author" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "body" : "Minor: Maybe add a comment here that it is safe to discard the result of unsafeTranslateValue because contract keys cannot contain contract IDs and this therefore always must be empty.",
        "createdAt" : "2020-04-29T06:20:52Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "andreaslochbihler-da",
          "name" : "Andreas Lochbihler",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/36634420?u=e4612b8608d57496b2fbe1939276b8b8b04e4d67&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "02cb8cb5-e672-40df-924b-dc629cbf2e6a",
        "parentId" : "2311f7d1-b1cc-4bd5-9552-68e452f24749",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "add an explicit check. ",
        "createdAt" : "2020-04-29T08:21:22Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : null,
    "diffHunk" : "@@ -86,13 +86,13 @@ private[preprocessing] final class CommandPreprocessor(compiledPackages: Mutable\n       contractKey: Value[Value.AbsoluteContractId],\n       choiceId: Ref.ChoiceName,\n       argument: Value[Value.AbsoluteContractId],\n-  ): speedy.Command.ExerciseByKey = {\n+  ): (speedy.Command.ExerciseByKey, Set[Value.AbsoluteContractId]) = {\n     val template = unsafeGetTemplate(templateId)\n     val choiceArgType = unsafeGetChoiceArgType(templateId, template, choiceId)\n     val ckTtype = unsafeGetContractKeyType(templateId, template)\n-    val arg = valueTranslator.unsafeTranslateValue(choiceArgType, argument)\n-    val key = valueTranslator.unsafeTranslateValue(ckTtype, contractKey)\n-    speedy.Command.ExerciseByKey(templateId, key, choiceId, arg)\n+    val (arg, argCids) = valueTranslator.unsafeTranslateValue(choiceArgType, argument)\n+    val (key, _) = valueTranslator.unsafeTranslateValue(ckTtype, contractKey)"
  },
  {
    "id" : "285156cf-ae17-45b3-8fef-b70f4a5a8bc1",
    "prId" : 5361,
    "comments" : [
      {
        "id" : "6ca7a59a-a420-4b5c-805c-cab5104d2e24",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Why do we care about contractIds referred to in a value? Since this can come from the ledger api, anything can be put in there. See @andreaslochbihler-da's [comment](https://github.com/digital-asset/daml/pull/5361#discussion_r417146998).",
        "createdAt" : "2020-04-29T10:10:17Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d5ca71b2-b00f-4c16-9d75-8d2ee6126087",
        "parentId" : "6ca7a59a-a420-4b5c-805c-cab5104d2e24",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The purpose of this check is the discriminator of the contract created by the transaction are globally fresh, that is they do not conflict with any other contract IDs refered by a transaction. \r\n\r\nFor this purpose we introduce the notion of local and global contract IDs that slightly differs from input/output contracts. \r\n\r\nA _local contract ID_ is the ID of a contract created in a transaction.  \r\nNote that local contract IDs correspond to the IDs of output contract ID together with those which are created and consumed in the same transaction. \r\n\r\nA _global contract ID_ is a contract ID that: \r\n1 appears in the command itself (notably in the argument of the create, exercise)  \r\n2 the IDs of input contract fetched or looked up by key\r\n3 the IDs referenced in the body of the input contracts. \r\n\r\nNote that global contract IDs do not reference only to IDs of some contract that exists (or has existed) on the ledger  but also any random CID somebody can submit to the ledger API\r\n\r\nThe freshness check consists to verify the discriminators of the local ID are distinct from the global ID. \r\n\r\nThe value here is part of the command (point 1) and should be  considered as a global ID.",
        "createdAt" : "2020-04-29T11:17:06Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f3c0a3e7-4f60-4d3a-9581-cde05b16eeb8",
        "parentId" : "6ca7a59a-a420-4b5c-805c-cab5104d2e24",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Great explanation. Would you mind putting this as a comment on `Machine` somewhere?",
        "createdAt" : "2020-04-29T11:42:36Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1ba3e52-aed2-4d44-a533-1e5dae6d53dc",
        "parentId" : "6ca7a59a-a420-4b5c-805c-cab5104d2e24",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done.",
        "createdAt" : "2020-04-29T16:42:52Z",
        "updatedAt" : "2020-04-30T07:34:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e121173bce232d87fb34d60de0cb851f4511a9",
    "line" : 23,
    "diffHunk" : "@@ -73,11 +73,15 @@ private[preprocessing] final class CommandPreprocessor(compiledPackages: Mutable\n       contractId: Value.ContractId,\n       choiceId: Ref.ChoiceName,\n       argument: Value[Value.AbsoluteContractId],\n-  ): speedy.Command.Exercise = {\n+  ): (speedy.Command.Exercise, Set[Value.AbsoluteContractId]) = {\n     val template = unsafeGetTemplate(templateId)\n     val choiceArgType = unsafeGetChoiceArgType(templateId, template, choiceId)\n-    val arg = valueTranslator.unsafeTranslateValue(choiceArgType, argument)\n-    speedy.Command.Exercise(templateId, SValue.SContractId(contractId), choiceId, arg)\n+    val (arg, argCids) = valueTranslator.unsafeTranslateValue(choiceArgType, argument)"
  }
]