[
  {
    "id" : "d8557b7e-5a27-46ab-be30-0ce4746f73d5",
    "prId" : 7573,
    "comments" : [
      {
        "id" : "8a285261-c5bf-4e68-a37e-d1ac9453dfc9",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I do not see any reason why this could be used outside LF.",
        "createdAt" : "2020-10-05T17:02:13Z",
        "updatedAt" : "2020-10-05T17:02:14Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "08e2024c1360ab6a9817bd3b206fd0c6e90ce3a5",
    "line" : 5,
    "diffHunk" : "@@ -93,65 +93,13 @@ final case class ResultNeedKey[A](\n \n object Result {\n   // fails with ResultError if the package is not found\n-  def needPackage[A](packageId: PackageId, resume: Package => Result[A]) =\n+  private[lf] def needPackage[A](packageId: PackageId, resume: Package => Result[A]) ="
  },
  {
    "id" : "6b2f10b2-0902-4227-9522-0357c6e1ae94",
    "prId" : 7573,
    "comments" : [
      {
        "id" : "544651e4-3152-4d8a-bf82-80e994b4455a",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Neither for this one.",
        "createdAt" : "2020-10-05T17:02:26Z",
        "updatedAt" : "2020-10-05T17:02:26Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "08e2024c1360ab6a9817bd3b206fd0c6e90ce3a5",
    "line" : 64,
    "diffHunk" : "@@ -93,65 +93,13 @@ final case class ResultNeedKey[A](\n \n object Result {\n   // fails with ResultError if the package is not found\n-  def needPackage[A](packageId: PackageId, resume: Package => Result[A]) =\n+  private[lf] def needPackage[A](packageId: PackageId, resume: Package => Result[A]) =\n     ResultNeedPackage(packageId, {\n       case None => ResultError(Error(s\"Couldn't find package $packageId\"))\n       case Some(pkg) => resume(pkg)\n     })\n \n-  def needPackage[A](\n-      compiledPackages: MutableCompiledPackages,\n-      packageId: PackageId,\n-      resume: Package => Result[A]): Result[A] =\n-    compiledPackages.getPackage(packageId) match {\n-      case Some(pkg) => resume(pkg)\n-      case None =>\n-        ResultNeedPackage(\n-          packageId, {\n-            case None => ResultError(Error(s\"Couldn't find package $packageId\"))\n-            case Some(pkg) =>\n-              compiledPackages.addPackage(packageId, pkg).flatMap(_ => resume(pkg))\n-          }\n-        )\n-    }\n-\n-  def needDefinition[A](\n-      packagesCache: MutableCompiledPackages,\n-      identifier: Identifier,\n-      resume: Definition => Result[A]): Result[A] =\n-    needPackage(\n-      packagesCache,\n-      identifier.packageId,\n-      pkg =>\n-        fromEither(PackageLookup.lookupDefinition(pkg, identifier.qualifiedName))\n-          .flatMap(resume)\n-    )\n-\n-  def needDataType[A](\n-      packagesCache: MutableCompiledPackages,\n-      identifier: Identifier,\n-      resume: DDataType => Result[A]): Result[A] =\n-    needPackage(\n-      packagesCache,\n-      identifier.packageId,\n-      pkg =>\n-        fromEither(PackageLookup.lookupDataType(pkg, identifier.qualifiedName))\n-          .flatMap(resume)\n-    )\n-\n-  def needTemplate[A](\n-      packagesCache: MutableCompiledPackages,\n-      identifier: Identifier,\n-      resume: Template => Result[A]): Result[A] =\n-    needPackage(\n-      packagesCache,\n-      identifier.packageId,\n-      pkg =>\n-        fromEither(PackageLookup.lookupTemplate(pkg, identifier.qualifiedName))\n-          .flatMap(resume)\n-    )\n-\n-  def needContract[A](\n+  private[lf] def needContract[A]("
  },
  {
    "id" : "a89fff96-e22e-4368-ba76-a9f6419c2e89",
    "prId" : 3308,
    "comments" : [
      {
        "id" : "5b7a89b3-ba4e-4c10-ae5a-8b6de34bafc3",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "makes sense, cc @dajmaki ",
        "createdAt" : "2019-10-31T19:06:25Z",
        "updatedAt" : "2019-11-01T09:26:42Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e5f23687-a7af-4c43-8f42-33a4700eef71",
        "parentId" : "5b7a89b3-ba4e-4c10-ae5a-8b6de34bafc3",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "`\"-P:wartremover:traverser:org.wartremover.warts.NonUnitStatements\"` is must have",
        "createdAt" : "2019-10-31T19:21:01Z",
        "updatedAt" : "2019-11-01T09:26:42Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0520c85ef679a1fb6bfed094dd255fa7111d36b2",
    "line" : null,
    "diffHunk" : "@@ -105,8 +105,7 @@ object Result {\n         ResultNeedPackage(packageId, {\n           case None => ResultError(Error(s\"Couldn't find package $packageId\"))\n           case Some(pkg) =>\n-            compiledPackages.addPackage(packageId, pkg)\n-            resume(pkg)\n+            compiledPackages.addPackage(packageId, pkg).flatMap(_ => resume(pkg))"
  }
]