[
  {
    "id" : "23ce9618-5d9c-4f9b-bdc0-0144a8ca37b4",
    "prId" : 5434,
    "comments" : [
      {
        "id" : "8092ceee-4d9c-43d2-8f26-b39f80b7f034",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "You spent too much time messing around with transaction seeDs lately ;)\r\n```suggestion\r\n      tyConAlreadySeen0: Set[Ref.TypeConName] = Set.empty,\r\n      tmplAlreadySeen0: Set[Ref.TypeConName] = Set.empty,\r\n```",
        "createdAt" : "2020-04-08T15:40:06Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15d20c06d3a28aa8099fedae3c1eaab0786182ae",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,259 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package engine\n+package preprocessing\n+\n+import java.util\n+\n+import com.daml.lf.data.{ImmArray, Ref}\n+import com.daml.lf.language.Ast\n+import com.daml.lf.speedy.SValue\n+import com.daml.lf.transaction.{GenTransaction, Node, Transaction}\n+import com.daml.lf.value.Value\n+\n+import scala.annotation.tailrec\n+import scala.util.control.NoStackTrace\n+\n+private[engine] final class Preprocessor(compiledPackages: MutableCompiledPackages) {\n+\n+  import Preprocessor._\n+  val transactionPreprocessor = new TransactionPreprocessor(compiledPackages)\n+  import transactionPreprocessor._\n+  import commandPreprocessor._\n+  import valueTranslator.unsafeTranslateValue\n+\n+  // This pulls all the dependencies of in `typesToProcess0` and `tyConAlreadySeed0`\n+  private def getDependencies(\n+      typesToProcess0: List[Ast.Type],\n+      tmplToProcess0: List[Ref.TypeConName],\n+      tyConAlreadySeed0: Set[Ref.TypeConName] = Set.empty,\n+      tmplAlreadySeed0: Set[Ref.TypeConName] = Set.empty,"
  },
  {
    "id" : "bcc5a485-30f5-4c23-b89b-71d15bf0fac8",
    "prId" : 5434,
    "comments" : [
      {
        "id" : "5b4c3a43-2d1d-44ea-be54-4aeb81f8f9b2",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Should this refer to `go`?\r\n```suggestion\r\n              go(Nil, tmplsToProcess, tyConAlreadySeed0, tmplsAlreadySeed0)\r\n```",
        "createdAt" : "2020-04-08T15:42:50Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15d20c06d3a28aa8099fedae3c1eaab0786182ae",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,259 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package engine\n+package preprocessing\n+\n+import java.util\n+\n+import com.daml.lf.data.{ImmArray, Ref}\n+import com.daml.lf.language.Ast\n+import com.daml.lf.speedy.SValue\n+import com.daml.lf.transaction.{GenTransaction, Node, Transaction}\n+import com.daml.lf.value.Value\n+\n+import scala.annotation.tailrec\n+import scala.util.control.NoStackTrace\n+\n+private[engine] final class Preprocessor(compiledPackages: MutableCompiledPackages) {\n+\n+  import Preprocessor._\n+  val transactionPreprocessor = new TransactionPreprocessor(compiledPackages)\n+  import transactionPreprocessor._\n+  import commandPreprocessor._\n+  import valueTranslator.unsafeTranslateValue\n+\n+  // This pulls all the dependencies of in `typesToProcess0` and `tyConAlreadySeed0`\n+  private def getDependencies(\n+      typesToProcess0: List[Ast.Type],\n+      tmplToProcess0: List[Ref.TypeConName],\n+      tyConAlreadySeed0: Set[Ref.TypeConName] = Set.empty,\n+      tmplAlreadySeed0: Set[Ref.TypeConName] = Set.empty,\n+  ): Result[(Set[Ref.TypeConName], Set[Ref.TypeConName])] = {\n+\n+    @tailrec\n+    def go(\n+        typesToProcess0: List[Ast.Type],\n+        tmplToProcess0: List[Ref.TypeConName],\n+        tyConAlreadySeed0: Set[Ref.TypeConName],\n+        tmplsAlreadySeed0: Set[Ref.TypeConName],\n+    ): Result[(Set[Ref.TypeConName], Set[Ref.TypeConName])] =\n+      typesToProcess0 match {\n+        case typ :: typesToProcess =>\n+          typ match {\n+            case Ast.TApp(fun, arg) =>\n+              go(fun :: arg :: typesToProcess, tmplToProcess0, tyConAlreadySeed0, tmplsAlreadySeed0)\n+            case Ast.TTyCon(tyCon @ Ref.Identifier(packageId, qualifiedName))\n+                if !tyConAlreadySeed0(tyCon) =>\n+              compiledPackages.packages.lift(packageId) match {\n+                case Some(pkg) =>\n+                  PackageLookup.lookupDataType(pkg, qualifiedName) match {\n+                    case Right(Ast.DDataType(_, _, dataType)) =>\n+                      val typesToProcess = dataType match {\n+                        case Ast.DataRecord(fields, _) =>\n+                          fields.foldRight(typesToProcess0)(_._2 :: _)\n+                        case Ast.DataVariant(variants) =>\n+                          variants.foldRight(typesToProcess0)(_._2 :: _)\n+                        case Ast.DataEnum(_) =>\n+                          typesToProcess0\n+                      }\n+                      go(\n+                        typesToProcess,\n+                        tmplToProcess0,\n+                        tyConAlreadySeed0 + tyCon,\n+                        tmplsAlreadySeed0)\n+                    case Left(e) =>\n+                      ResultError(e)\n+                  }\n+                case None =>\n+                  ResultNeedPackage(\n+                    packageId,\n+                    _ =>\n+                      getDependencies(\n+                        typesToProcess0,\n+                        tmplToProcess0,\n+                        tyConAlreadySeed0,\n+                        tmplsAlreadySeed0))\n+              }\n+            case Ast.TTyCon(_) | Ast.TNat(_) | Ast.TBuiltin(_) | Ast.TVar(_) =>\n+              go(typesToProcess, tmplToProcess0, tyConAlreadySeed0, tmplsAlreadySeed0)\n+            case Ast.TSynApp(_, _) | Ast.TForall(_, _) | Ast.TStruct(_) =>\n+              ResultError(Error(s\"unserializable type ${typ.pretty}\"))\n+          }\n+        case Nil =>\n+          tmplToProcess0 match {\n+            case tmplId :: tmplsToProcess if tmplsAlreadySeed0(tmplId) =>\n+              getDependencies(Nil, tmplsToProcess, tyConAlreadySeed0, tmplsAlreadySeed0)"
  },
  {
    "id" : "e2d91403-f78d-4213-b019-a4900eb59ed5",
    "prId" : 5434,
    "comments" : [
      {
        "id" : "c7465e7d-810a-430a-b842-53fff53da9f1",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Also `go`?",
        "createdAt" : "2020-04-08T15:44:54Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f672c5a0-8e93-46ed-85be-6e154f9aae99",
        "parentId" : "c7465e7d-810a-430a-b842-53fff53da9f1",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Not this one. It is not a tailrec call. ",
        "createdAt" : "2020-04-08T19:10:31Z",
        "updatedAt" : "2020-04-08T19:14:17Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "15d20c06d3a28aa8099fedae3c1eaab0786182ae",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,259 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf\n+package engine\n+package preprocessing\n+\n+import java.util\n+\n+import com.daml.lf.data.{ImmArray, Ref}\n+import com.daml.lf.language.Ast\n+import com.daml.lf.speedy.SValue\n+import com.daml.lf.transaction.{GenTransaction, Node, Transaction}\n+import com.daml.lf.value.Value\n+\n+import scala.annotation.tailrec\n+import scala.util.control.NoStackTrace\n+\n+private[engine] final class Preprocessor(compiledPackages: MutableCompiledPackages) {\n+\n+  import Preprocessor._\n+  val transactionPreprocessor = new TransactionPreprocessor(compiledPackages)\n+  import transactionPreprocessor._\n+  import commandPreprocessor._\n+  import valueTranslator.unsafeTranslateValue\n+\n+  // This pulls all the dependencies of in `typesToProcess0` and `tyConAlreadySeed0`\n+  private def getDependencies(\n+      typesToProcess0: List[Ast.Type],\n+      tmplToProcess0: List[Ref.TypeConName],\n+      tyConAlreadySeed0: Set[Ref.TypeConName] = Set.empty,\n+      tmplAlreadySeed0: Set[Ref.TypeConName] = Set.empty,\n+  ): Result[(Set[Ref.TypeConName], Set[Ref.TypeConName])] = {\n+\n+    @tailrec\n+    def go(\n+        typesToProcess0: List[Ast.Type],\n+        tmplToProcess0: List[Ref.TypeConName],\n+        tyConAlreadySeed0: Set[Ref.TypeConName],\n+        tmplsAlreadySeed0: Set[Ref.TypeConName],\n+    ): Result[(Set[Ref.TypeConName], Set[Ref.TypeConName])] =\n+      typesToProcess0 match {\n+        case typ :: typesToProcess =>\n+          typ match {\n+            case Ast.TApp(fun, arg) =>\n+              go(fun :: arg :: typesToProcess, tmplToProcess0, tyConAlreadySeed0, tmplsAlreadySeed0)\n+            case Ast.TTyCon(tyCon @ Ref.Identifier(packageId, qualifiedName))\n+                if !tyConAlreadySeed0(tyCon) =>\n+              compiledPackages.packages.lift(packageId) match {\n+                case Some(pkg) =>\n+                  PackageLookup.lookupDataType(pkg, qualifiedName) match {\n+                    case Right(Ast.DDataType(_, _, dataType)) =>\n+                      val typesToProcess = dataType match {\n+                        case Ast.DataRecord(fields, _) =>\n+                          fields.foldRight(typesToProcess0)(_._2 :: _)\n+                        case Ast.DataVariant(variants) =>\n+                          variants.foldRight(typesToProcess0)(_._2 :: _)\n+                        case Ast.DataEnum(_) =>\n+                          typesToProcess0\n+                      }\n+                      go(\n+                        typesToProcess,\n+                        tmplToProcess0,\n+                        tyConAlreadySeed0 + tyCon,\n+                        tmplsAlreadySeed0)\n+                    case Left(e) =>\n+                      ResultError(e)\n+                  }\n+                case None =>\n+                  ResultNeedPackage(\n+                    packageId,\n+                    _ =>\n+                      getDependencies(\n+                        typesToProcess0,\n+                        tmplToProcess0,\n+                        tyConAlreadySeed0,\n+                        tmplsAlreadySeed0))\n+              }\n+            case Ast.TTyCon(_) | Ast.TNat(_) | Ast.TBuiltin(_) | Ast.TVar(_) =>\n+              go(typesToProcess, tmplToProcess0, tyConAlreadySeed0, tmplsAlreadySeed0)\n+            case Ast.TSynApp(_, _) | Ast.TForall(_, _) | Ast.TStruct(_) =>\n+              ResultError(Error(s\"unserializable type ${typ.pretty}\"))\n+          }\n+        case Nil =>\n+          tmplToProcess0 match {\n+            case tmplId :: tmplsToProcess if tmplsAlreadySeed0(tmplId) =>\n+              getDependencies(Nil, tmplsToProcess, tyConAlreadySeed0, tmplsAlreadySeed0)\n+            case tmplId :: tmplsToProcess =>\n+              val pkgId = tmplId.packageId\n+              compiledPackages.getPackage(pkgId) match {\n+                case Some(pkg) =>\n+                  PackageLookup.lookupTemplate(pkg, tmplId.qualifiedName) match {\n+                    case Right(template) =>\n+                      val typs0 = template.choices.map(_._2.argBinder._2).toList\n+                      val typs1 =\n+                        if (tyConAlreadySeed0(tmplId)) typs0 else Ast.TTyCon(tmplId) :: typs0\n+                      val typs2 = template.key.fold(typs1)(_.typ :: typs1)\n+                      go(typs2, tmplsToProcess, tyConAlreadySeed0, tmplsAlreadySeed0)\n+                    case Left(error) =>\n+                      ResultError(error)\n+                  }\n+                case None =>\n+                  ResultNeedPackage(\n+                    pkgId, {\n+                      case Some(pkg) =>\n+                        for {\n+                          _ <- compiledPackages.addPackage(pkgId, pkg)\n+                          r <- getDependencies("
  }
]