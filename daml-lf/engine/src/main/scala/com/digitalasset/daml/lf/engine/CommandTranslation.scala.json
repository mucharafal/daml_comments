[
  {
    "id" : "796e123c-8e3c-47f8-80ee-1a0335110b4d",
    "prId" : 204,
    "comments" : [
      {
        "id" : "20626a54-1dfd-4ab8-850e-b5d38c92eb82",
        "parentId" : null,
        "author" : {
          "login" : "stephencompall-DA",
          "name" : "Actually @S11001001 (Stephen Compall)",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/32464278?u=2f0eaeb2500ecacccd6c1af95b27424d5193ad65&v=4"
        },
        "body" : "```suggestion\r\n    EBuiltin(BFoldl) eTyApp (aType, bType) eApp (f, b, as)\r\n```\r\n\r\ngiven\r\n\r\n```diff\r\n--- a/daml-lf/lfpackage/src/main/scala/com/digitalasset/daml/lf/lfpackage/Ast.scala\r\n+++ b/daml-lf/lfpackage/src/main/scala/com/digitalasset/daml/lf/lfpackage/Ast.scala\r\n@@ -39,7 +39,15 @@ object Ast {\r\n   // Expressions\r\n   //\r\n \r\n-  sealed trait Expr extends Product with Serializable\r\n+  sealed abstract class Expr extends Product with Serializable {\r\n+    /** Infix alias for repeated [[EApp]] application. */\r\n+    @inline final def eApp(arg: Expr, args: Expr*): EApp =\r\n+      (EApp(this, arg) /: args)(EApp)\r\n+\r\n+    /** Infix alias for repeated [[ETyApp]] application. */\r\n+    @inline final def eTyApp(typ: Type, typs: Type*): ETyApp =\r\n+      (ETyApp(this, typ) /: typs)(ETyApp)\r\n+  }\r\n \r\n   /** Reference to a variable in current lexical scope. */\r\n   final case class EVar(value: ExprVarName) extends Expr\r\n```",
        "createdAt" : "2019-04-05T09:37:13Z",
        "updatedAt" : "2019-04-10T15:57:15Z",
        "lastEditedBy" : {
          "login" : "stephencompall-DA",
          "name" : "Actually @S11001001 (Stephen Compall)",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/32464278?u=2f0eaeb2500ecacccd6c1af95b27424d5193ad65&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5dfaaa695898670824b20acf017518eda840e671",
    "line" : null,
    "diffHunk" : "@@ -14,9 +14,45 @@ private[engine] object CommandTranslation {\n   def apply(compiledPackages: ConcurrentCompiledPackages): CommandTranslation = {\n     new CommandTranslation(compiledPackages)\n   }\n+\n+  private def tEntry(elemType: Type) =\n+    TTuple(ImmArray((\"key\", TBuiltin(BTText)), (\"value\", elemType)))\n+\n+  private def entry(key: String, value: Expr): Expr =\n+    ETupleCon(ImmArray(\"key\" -> EPrimLit(PLText(key)), \"value\" -> value))\n+\n+  private def emptyMap(elemType: Type) =\n+    ETyApp(EBuiltin(BMapEmpty), elemType)\n+\n+  private def fold(aType: Type, bType: Type, f: Expr, b: Expr, as: Expr) =\n+    EApp(EApp(EApp(ETyApp(ETyApp(EBuiltin(BFoldl), aType), bType), f), b), as)"
  }
]