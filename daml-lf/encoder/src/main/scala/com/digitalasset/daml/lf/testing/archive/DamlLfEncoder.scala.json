[
  {
    "id" : "e165d074-432a-4e83-8175-4742f2ebcf73",
    "prId" : 1769,
    "comments" : [
      {
        "id" : "b3885de1-8002-4e14-affa-1d2075198d0c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`files.flatMap { file => (??? : String) }(breakOut): String` should typecheck. If you're not a fan of that, go with `map` and `mkString` over this.",
        "createdAt" : "2019-06-21T08:30:53Z",
        "updatedAt" : "2019-06-21T17:55:21Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8aabc888-6292-46da-a933-2a9a0e5f2c75",
        "parentId" : "b3885de1-8002-4e14-affa-1d2075198d0c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed\r\n",
        "createdAt" : "2019-06-21T09:59:52Z",
        "updatedAt" : "2019-06-21T17:55:21Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dfaa2f49bbbb32a532a8741df05d7270df52bdab",
    "line" : null,
    "diffHunk" : "@@ -24,46 +26,118 @@ private[digitalasset] object DamlLfEncoder extends App {\n \n   private val pkgId = Ref.PackageId.assertFromString(\"-self-\")\n \n-  try {\n-    val (inputFile, outputFile, languageVersion): (String, String, LanguageVersion) =\n-      args.toSeq match {\n-        case Seq(input, output) =>\n-          (input, output, LanguageVersion.default)\n-        case Seq(input, output, version) =>\n-          version.split(\"\"\"\\.\"\"\").toSeq match {\n-            case Seq(\"1\", minor)\n-                if LanguageMajorVersion.V1.supportsMinorVersion(minor) || minor == \"dev\" =>\n-              (input, output, LanguageVersion(LanguageMajorVersion.V1, minor))\n-            case _ =>\n-              error(s\"version '$version' not supported\")\n-          }\n-        case _ =>\n-          error(\"usage: damlf-as input output [version]\")\n-      }\n-\n-    implicit val parserParameters: ParserParameters[this.type] =\n-      ParserParameters(\n-        defaultPackageId = pkgId,\n-        languageVersion = languageVersion\n-      )\n+  private def main() =\n+    try {\n+      val appArgs = parseArgs()\n+\n+      implicit val parserParameters: ParserParameters[this.type] =\n+        ParserParameters(\n+          defaultPackageId = pkgId,\n+          languageVersion = appArgs.languageVersion\n+        )\n+\n+      makeDar(readSources(appArgs.inputFiles), Paths.get(appArgs.outputFile).toFile)\n+\n+    } catch {\n+      case e: EncodeError =>\n+        error(s\"Encoding error: ${e.message}\")\n+      case NonFatal(e) =>\n+        error(s\"error: ${e.getMessage}\")\n+    }\n+\n+  private def readSources(files: Seq[String]) = {\n+    val builder = StringBuilder.newBuilder\n+    files.foreach { file =>"
  },
  {
    "id" : "b91d8143-9c65-4a04-ac63-be1ba339838b",
    "prId" : 1769,
    "comments" : [
      {
        "id" : "e8aef225-66ad-477e-b521-09075ec68934",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n    @tailrec def go(appArgs: Arguments, i: Int): Arguments = ...\r\n```",
        "createdAt" : "2019-06-21T08:33:09Z",
        "updatedAt" : "2019-06-21T17:55:21Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "691e68aa-3e1b-48ff-9dfb-e15af02d14f0",
        "parentId" : "e8aef225-66ad-477e-b521-09075ec68934",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-06-21T10:05:49Z",
        "updatedAt" : "2019-06-21T17:55:21Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dfaa2f49bbbb32a532a8741df05d7270df52bdab",
    "line" : null,
    "diffHunk" : "@@ -24,46 +26,118 @@ private[digitalasset] object DamlLfEncoder extends App {\n \n   private val pkgId = Ref.PackageId.assertFromString(\"-self-\")\n \n-  try {\n-    val (inputFile, outputFile, languageVersion): (String, String, LanguageVersion) =\n-      args.toSeq match {\n-        case Seq(input, output) =>\n-          (input, output, LanguageVersion.default)\n-        case Seq(input, output, version) =>\n-          version.split(\"\"\"\\.\"\"\").toSeq match {\n-            case Seq(\"1\", minor)\n-                if LanguageMajorVersion.V1.supportsMinorVersion(minor) || minor == \"dev\" =>\n-              (input, output, LanguageVersion(LanguageMajorVersion.V1, minor))\n-            case _ =>\n-              error(s\"version '$version' not supported\")\n-          }\n-        case _ =>\n-          error(\"usage: damlf-as input output [version]\")\n-      }\n-\n-    implicit val parserParameters: ParserParameters[this.type] =\n-      ParserParameters(\n-        defaultPackageId = pkgId,\n-        languageVersion = languageVersion\n-      )\n+  private def main() =\n+    try {\n+      val appArgs = parseArgs()\n+\n+      implicit val parserParameters: ParserParameters[this.type] =\n+        ParserParameters(\n+          defaultPackageId = pkgId,\n+          languageVersion = appArgs.languageVersion\n+        )\n+\n+      makeDar(readSources(appArgs.inputFiles), Paths.get(appArgs.outputFile).toFile)\n+\n+    } catch {\n+      case e: EncodeError =>\n+        error(s\"Encoding error: ${e.message}\")\n+      case NonFatal(e) =>\n+        error(s\"error: ${e.getMessage}\")\n+    }\n+\n+  private def readSources(files: Seq[String]) = {\n+    val builder = StringBuilder.newBuilder\n+    files.foreach { file =>\n+      builder ++= Source.fromFile(Paths.get(file).toFile, \"UTF8\")\n+      builder ++= \"\\n\\n\"\n+    }\n+    builder.result()\n+  }\n \n-    val string = Source.fromFile(Paths.get(inputFile).toFile, \"UTF8\").mkString\n+  private def makeArchive(source: String)(\n+      implicit parserParameters: ParserParameters[this.type]) = {\n \n-    val modules = parseModules[this.type](string).fold(error, identity)\n+    val modules = parseModules[this.type](source).fold(error, identity)\n \n     val pkgs = Map(pkgId -> Ast.Package(modules))\n \n     Validation.checkPackage(pkgs, pkgId).left.foreach(e => error(e.pretty))\n \n-    val archive = Encode.encodeArchive(pkgId -> pkgs(pkgId), languageVersion)\n+    Encode.encodeArchive(pkgId -> pkgs(pkgId), parserParameters.languageVersion)\n+  }\n+\n+  private def makeDar(source: String, file: File)(\n+      implicit parserParameters: ParserParameters[this.type]) = {\n+    import java.io.FileOutputStream\n+    import java.util.zip.ZipOutputStream\n+\n+    val archive = makeArchive(source)\n+\n+    val out = new ZipOutputStream(new FileOutputStream(file))\n+    out.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"))\n+    out.write(MANIFEST.getBytes)\n+    out.closeEntry()\n \n-    Files.write(Paths.get(outputFile), archive.toByteArray)\n+    out.putNextEntry(new ZipEntry(\"archive.dalf\"))\n+    out.write(archive.toByteArray)\n+    out.closeEntry()\n+    out.close()\n \n-  } catch {\n-    case e: EncodeError =>\n-      error(s\"Encoding error: ${e.message}\")\n-    case NonFatal(e) =>\n-      error(s\"error: ${e.getMessage}\")\n   }\n \n+  private case class Arguments(\n+      inputFiles: List[String] = List.empty,\n+      outputFile: String = \"\",\n+      languageVersion: LanguageVersion = LanguageVersion.default\n+  )\n+\n+  private def parseArgs() = {\n+\n+    var appArgs = Arguments()"
  },
  {
    "id" : "d7d94eaf-6d81-425d-9c40-29768e59a149",
    "prId" : 1769,
    "comments" : [
      {
        "id" : "f25e6468-bc0b-437c-bc2c-ee3f24af9dd3",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`flatMap` and `mkString` will make an intermediate `Seq[Char]` all boxed first ðŸ˜¨ \r\n```suggestion\r\n    files.map(file => Source.fromFile(Paths.get(file).toFile, \"UTF8\")).mkString\r\n```",
        "createdAt" : "2019-06-21T12:45:56Z",
        "updatedAt" : "2019-06-21T17:55:21Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c9c6ea62-e8e5-4557-b86e-4448cfe2c9c2",
        "parentId" : "f25e6468-bc0b-437c-bc2c-ee3f24af9dd3",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "sorry ! \r\n",
        "createdAt" : "2019-06-21T12:58:06Z",
        "updatedAt" : "2019-06-21T17:55:21Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dfaa2f49bbbb32a532a8741df05d7270df52bdab",
    "line" : null,
    "diffHunk" : "@@ -24,46 +27,113 @@ private[digitalasset] object DamlLfEncoder extends App {\n \n   private val pkgId = Ref.PackageId.assertFromString(\"-self-\")\n \n-  try {\n-    val (inputFile, outputFile, languageVersion): (String, String, LanguageVersion) =\n-      args.toSeq match {\n-        case Seq(input, output) =>\n-          (input, output, LanguageVersion.default)\n-        case Seq(input, output, version) =>\n-          version.split(\"\"\"\\.\"\"\").toSeq match {\n-            case Seq(\"1\", minor)\n-                if LanguageMajorVersion.V1.supportsMinorVersion(minor) || minor == \"dev\" =>\n-              (input, output, LanguageVersion(LanguageMajorVersion.V1, minor))\n-            case _ =>\n-              error(s\"version '$version' not supported\")\n-          }\n-        case _ =>\n-          error(\"usage: damlf-as input output [version]\")\n-      }\n-\n-    implicit val parserParameters: ParserParameters[this.type] =\n-      ParserParameters(\n-        defaultPackageId = pkgId,\n-        languageVersion = languageVersion\n-      )\n-\n-    val string = Source.fromFile(Paths.get(inputFile).toFile, \"UTF8\").mkString\n-\n-    val modules = parseModules[this.type](string).fold(error, identity)\n+  private def main() =\n+    try {\n+      val appArgs = parseArgs()\n+\n+      implicit val parserParameters: ParserParameters[this.type] =\n+        ParserParameters(\n+          defaultPackageId = pkgId,\n+          languageVersion = appArgs.languageVersion\n+        )\n+\n+      makeDar(readSources(appArgs.inputFiles), Paths.get(appArgs.outputFile).toFile)\n+\n+    } catch {\n+      case e: EncodeError =>\n+        error(s\"Encoding error: ${e.message}\")\n+      case NonFatal(e) =>\n+        error(s\"error: ${e.getMessage}\")\n+    }\n+\n+  private def readSources(files: Seq[String]) =\n+    files.flatMap(file => Source.fromFile(Paths.get(file).toFile, \"UTF8\")).mkString"
  }
]