[
  {
    "id" : "18330df9-afe9-468a-b5ba-e63e015fd838",
    "prId" : 4101,
    "comments" : [
      {
        "id" : "16505ab7-5b9b-4799-b206-71517a6c4499",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think we can write tests for the decoder and typechecking without fixing this, so I would suggest to leave this for a separate PR.",
        "createdAt" : "2020-01-20T07:58:58Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d8bc6fd-89ec-4ff6-81dd-4062c4184a10",
        "parentId" : "16505ab7-5b9b-4799-b206-71517a6c4499",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok",
        "createdAt" : "2020-01-20T19:44:20Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : 6,
    "diffHunk" : "@@ -74,6 +74,10 @@ private[digitalasset] class EncodeV1(val minor: LV.Minor) {\n             }\n           case value @ DValue(_, _, _, _) =>\n             builder.addValues(name -> value)\n+\n+          case DTypeSyn(params @ _, typ @ _) =>\n+            throw new RuntimeException(\"TODO #3616, EncodeV1, DTypeSyn\")"
  },
  {
    "id" : "28f1e71f-9a44-478e-875a-9d868cfe9294",
    "prId" : 4101,
    "comments" : [
      {
        "id" : "2aa25afc-d3c0-4238-be38-d45ecda41449",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Could you put the error case at the end of the pattern matching ? ",
        "createdAt" : "2020-01-20T11:59:33Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "23bf7914-feae-4089-9a5f-6a5c670dbf06",
        "parentId" : "2aa25afc-d3c0-4238-be38-d45ecda41449",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, done",
        "createdAt" : "2020-01-20T19:48:40Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : null,
    "diffHunk" : "@@ -205,7 +209,9 @@ private[digitalasset] class EncodeV1(val minor: LV.Minor) {\n           case _ => typ0 -> ImmArray.empty\n         }\n       val builder = PLF.Type.newBuilder()\n-      typ match {\n+      typ match { //TODO: fix the exhaustiveness checking\n+        case TSynApp(_, _) =>\n+          throw new RuntimeException(\"TODO #3616,encodeTypeBuilder\")"
  },
  {
    "id" : "6051f61e-50a7-4446-b21f-2de7f182c5af",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "95a5ea53-9e67-4564-83d2-1c40ab525e94",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "heads up here that this is non-interned and we might want to change that if we don't support both schemes in v.dev.",
        "createdAt" : "2019-10-03T17:01:18Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi MÃ¤ki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7040493b-8433-43c9-9810-0e8f222bb738",
        "parentId" : "95a5ea53-9e67-4564-83d2-1c40ab525e94",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I will fix that in another PR. this one is already too big.",
        "createdAt" : "2019-10-03T17:58:08Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : 16,
    "diffHunk" : "@@ -141,13 +141,17 @@ private[digitalasset] class EncodeV1(val minor: LV.Minor) {\n     @inline\n     private implicit def encodeTypeBinder(binder: (String, Kind)): PLF.TypeVarWithKind = {\n       val (varName, kind) = binder\n-      PLF.TypeVarWithKind.newBuilder().setVar(varName).setKind(kind).build()\n+      PLF.TypeVarWithKind\n+        .newBuilder()\n+        .setName(varName)\n+        .setKind(kind)\n+        .build()\n     }\n \n     @inline\n     private implicit def encodeFieldWithType(nameWithType: (String, Type)): PLF.FieldWithType = {\n       val (name, typ) = nameWithType\n-      PLF.FieldWithType.newBuilder().setField(name).setType(typ).build()\n+      PLF.FieldWithType.newBuilder().setName(name).setType(typ).build()"
  },
  {
    "id" : "3245639b-4f5a-4a28-840e-2de3d8b428ab",
    "prId" : 2649,
    "comments" : [
      {
        "id" : "758390e8-e274-4b67-9489-99f387063a7d",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Remy, the log-bot ðŸ˜ˆ ",
        "createdAt" : "2019-08-23T14:38:45Z",
        "updatedAt" : "2019-08-26T11:34:54Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3764a462-b4b6-4c9a-985d-1271e84d6256",
        "parentId" : "758390e8-e274-4b67-9489-99f387063a7d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-08-23T19:01:20Z",
        "updatedAt" : "2019-08-26T11:34:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4b9f86ae2ceecae15c4e5d70035e0989229041d7",
    "line" : null,
    "diffHunk" : "@@ -120,20 +121,24 @@ private[digitalasset] class EncodeV1(val minor: LV.Minor) {\n               PLF.Kind.Arrow\n                 .newBuilder()\n                 .accumulateLeft(params)(_ addParams encodeKind(_))\n-                .setResult(star)\n+                .setResult(kStar)\n             )\n             .build()\n         case KStar =>\n-          star\n+          kStar\n         case KNat =>\n           assertSince(LV.Features.numeric, \"Kind.KNat\")\n-          // FixMe: https://github.com/digital-asset/daml/issues/2289\n-          throw EncodeError(\"Numeric not available in protoBuf\")\n+          kNat\n       }\n \n     /** * Encoding of types ***/\n     private val builtinTypeInfoMap =\n-      DecodeV1.builtinTypeInfos.map(info => info.bTyp -> info).toMap\n+      DecodeV1.builtinTypeInfos\n+        .filterNot(info => versionIsOlderThan(info.minVersion))\n+        .map(info => info.bTyp -> info)\n+        .toMap\n+\n+    remy.log(builtinTypeInfoMap)"
  },
  {
    "id" : "699e6ec0-f784-4f3f-a1e0-e778fc465948",
    "prId" : 2489,
    "comments" : [
      {
        "id" : "6d84ae6e-360c-4b80-888a-d20f69d5c5dc",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "This changed from version `1.0` to version `1.1`.",
        "createdAt" : "2019-08-12T13:48:30Z",
        "updatedAt" : "2019-08-13T07:18:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "70e9681f-8d81-4193-8570-8d33340edebd",
        "parentId" : "6d84ae6e-360c-4b80-888a-d20f69d5c5dc",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I changed in the same time `lteq` by `lt`. I think it is more consistent with the `assertSince` we use in lot of other place. ",
        "createdAt" : "2019-08-12T14:15:48Z",
        "updatedAt" : "2019-08-13T07:18:46Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aec52135-aff1-4819-ba83-e9b30148cf4f",
        "parentId" : "6d84ae6e-360c-4b80-888a-d20f69d5c5dc",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Right. I didn't notice that part. Whatever makes it more consistent with other checks works for me.",
        "createdAt" : "2019-08-12T14:17:48Z",
        "updatedAt" : "2019-08-13T07:18:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e2061bc90c74605120749998958bbf2829c86e61",
    "line" : null,
    "diffHunk" : "@@ -178,7 +176,7 @@ private[digitalasset] class EncodeV1(val minor: LanguageMinorVersion) {\n           builder.setCon(\n             PLF.Type.Con.newBuilder().setTycon(tycon).accumulateLeft(args)(_ addArgs _))\n         case TBuiltin(bType) =>\n-          if (bType == BTArrow && V1.minorVersionOrdering.lteq(minor, \"0\")) {\n+          if (bType == BTArrow && LV.ordering.lt(version, LV.v1_1)) {"
  }
]