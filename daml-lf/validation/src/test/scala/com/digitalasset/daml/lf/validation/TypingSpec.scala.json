[
  {
    "id" : "4a90072a-2501-41a0-a303-08a1599b56e2",
    "prId" : 7220,
    "comments" : [
      {
        "id" : "00186e7b-214b-4f55-bad9-1b1185a2a678",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What’s up with all of this?",
        "createdAt" : "2020-08-25T08:27:14Z",
        "updatedAt" : "2020-08-25T17:10:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "417b4d1b-85e2-49a6-a12a-48628d349e5e",
        "parentId" : "00186e7b-214b-4f55-bad9-1b1185a2a678",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed.",
        "createdAt" : "2020-08-25T08:30:14Z",
        "updatedAt" : "2020-08-25T17:10:10Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bd81ff2e34267fdcb710110ff30af3aa4fa0256f",
    "line" : null,
    "diffHunk" : "@@ -305,50 +305,49 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n       val testCases = Table(\n         \"non-well formed expression\",\n         // ExpDefVar\n-        E\"x\",\n-        // ExpApp\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆). λ (e₁ : τ₂) (e₂ : τ₁) → (( e₁ e₂ ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆) (τ₃ : ⋆). λ (e₁ : τ₂ → τ₃) (e₂ : τ₁) → (( e₁ e₂ ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆) (τ₃ : ⋆). λ (e₁ : (τ₁ → τ₂) → τ₃) (e₂ : τ₁) → (( e₁ e₂ ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆) (τ₃ : ⋆). λ (e₁ : Bool) (e₂ : τ₃) → (( e₁ e₂ ))\",\n-        // ExpTyApp\n-        E\"Λ (τ : ⋆ → ⋆) (σ: ⋆ → ⋆). λ (e : ∀ (α : ⋆). σ α) → (( e @τ ))\",\n-        E\"Λ (τ : ⋆) (σ: ⋆ → ⋆). λ (e : ∀ (α : ⋆ → ⋆). σ α) → (( e @τ ))\",\n-        // ExpAbs\n-        E\"Λ  (τ : ⋆ → ⋆) (σ: ⋆) . λ (e: τ → σ) → λ (x : τ) → (( e x ))\",\n-        // ExpLet\n-        E\"Λ  (τ₁: ⋆) (τ₂ : ⋆) (σ: ⋆). λ (e₁ : τ₁) (e₂ : σ) → (( let x : τ₂ = e₁ in e₂ ))\",\n-        E\"Λ (τ : ⋆ → ⋆) (σ: ⋆). λ (e₁ : τ) (e₂ : τ → σ) → (( let x : τ = e₁ in e₂ x ))\",\n-        // ExpLitDecimal\n-        E\"λ (f: Numeric 0 → Unit) → f (( 3.1415926536 ))\",\n-        // ExpListNil\n-        E\"Λ (τ : ⋆ → ⋆). (( Nil @τ ))\",\n-        // ExpListCons\n-        E\"Λ (τ : ⋆ → ⋆). λ (e₁ : τ) (e₂ : τ) (e : List τ) → (( Cons @τ [e₁, e₂] e ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆). λ (e₁ : τ₂) (e₂ : τ₁) (e : List τ₁) → (( Cons @τ₁ [e₁, e₂] e ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆). λ (e₁ : τ₂) (e : List τ₁) → (( Cons @τ₁ [e₁] e ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆). λ (e₁ : τ₂) (e : List τ₁) → (( Cons @τ₁ [e₁] e ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆). λ (e₁ : τ₁) (e : List τ₂) → (( Cons @τ₁ [e₁] e ))\",\n-        E\"Λ (τ₁: ⋆) (τ₂ : ⋆). λ (e₁ : τ₁) (e : List τ₁) → (( Cons @τ₂ [e₁] e ))\",\n-        E\"Λ (τ : ⋆). λ (e : List τ) → (( Cons @τ [] e ))\",\n-        //ExpVal\n-        E\"(( Mod:g ))\",\n-        //ExpRecCon\n-        E\"Λ (σ : ⋆). λ (e₁ : Bool) (e₂ : List σ) → (( Mod:R @σ { f1 = e₁, f2 =e₂ } ))\",\n-        E\"Λ (σ : ⋆ → ⋆). λ (e₁ : Int64) (e₂ : List σ) → (( Mod:R @σ { f1 = e₁, f2 =e₂ } ))\",\n-        E\"Λ (σ : ⋆). λ (e₁ : Int64) (e₂ : List σ) → (( Mod:R @σ { f1 = e₁, f3 =e₂ } ))\",\n-        E\"Λ (σ : ⋆). λ (e₁ : Int64) (e₂ : List σ) → (( Mod:R @σ { f1 = e₁ } ))\",\n-        E\"Λ (σ : ⋆) (τ: ⋆). λ (e₁ : Int64) (e₂ : List σ) (e₃:τ) → (( Mod:R @σ { f1 = e₁, f2 = e₂, f3 = e₃} ))\",\n-        // ExpRecProj\n-        E\"Λ (σ : ⋆ → ⋆). λ (e : Mod:R σ) → (( Mod:R @σ (e).f2 ))\",\n-        E\"Λ (σ : ⋆). λ (e : Mod:R σ) → (( Mod:R @σ (e).f3 ))\",\n-        // ExpRecUpdate\n-        E\"Λ (σ : ⋆). λ (e : Mod:R σ) (e₂ : List σ) → (( Mod:R @σ { e  with f3 = e₂ } ))\",\n-        E\"Λ (σ : ⋆). λ (e : Mod:R σ) (e₂ : Bool) → (( Mod:R @σ { e  with f2 = e₂ } ))\",\n-        // ExpVarCon\n-        E\"Λ (σ : ⋆ → ⋆). λ (e : σ) → (( Mod:Tree:Leaf @σ e ))\",\n-        E\"Λ (σ : ⋆). λ (e : σ) → (( Mod:Tree @σ Cons @σ [e] (Nil @σ) ))\",\n-        // ExpStructCon\n+//        E\"x\","
  },
  {
    "id" : "7803db6b-d493-494a-bc58-0c0480ccd51d",
    "prId" : 7064,
    "comments" : [
      {
        "id" : "31e4126c-46e9-4363-915f-5000b5565a53",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Can I recommend splitting this into two test cases? I don't see how the negative ones belong here.\r\n\r\nPerhaps \"accept well-formed type synonym definitions\" and \"reject ill-formed type synonym definitions\"?\r\n\r\n(Wow, \"synonym\" is hard to type.)",
        "createdAt" : "2020-08-10T07:40:37Z",
        "updatedAt" : "2020-08-10T07:40:49Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ccc11141-2857-4207-a948-6dd915d8174c",
        "parentId" : "31e4126c-46e9-4363-915f-5000b5565a53",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I really like the way this test is written. \r\n\r\nI believe that having in the same unit positive and negative test cases that share most of their code improves the test confidence. Positive test cases check the negative tests are not broken and reciprocally. \r\n\r\nIf you untie this relationship by writing two different test cases, you:\r\n1. make the relationship between the two kind of test less obvious.\r\n2. will naturally share less code\r\n3. make easier for developers that will have to refactor this code in the future to break one of the families of tests. \r\n\r\nOne compromise would be to use `FreeSpec` instead of `WordSpec` to build a more fine grain hierarchy where both kinds are group together while being separate. However, I do not think this fits the scope of this PR.  \r\n\r\nChanging the title of the test does not really help because this makes the notion of negative/positive become blur. ",
        "createdAt" : "2020-08-10T09:19:21Z",
        "updatedAt" : "2020-08-10T09:25:55Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1075b3ac-5003-4942-b548-743589f4a356",
        "parentId" : "31e4126c-46e9-4363-915f-5000b5565a53",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Fair enough, good reasoning. 🙂 ",
        "createdAt" : "2020-08-10T09:24:51Z",
        "updatedAt" : "2020-08-10T09:24:51Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "845a588e5ed65ce12c7f565b8298fd67c9faa5de",
    "line" : 57,
    "diffHunk" : "@@ -848,34 +846,34 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n   }\n \n   \"reject ill formed type synonym definitions\" in {"
  },
  {
    "id" : "5f3922ee-1361-4c14-962b-0862dead9853",
    "prId" : 4181,
    "comments" : [
      {
        "id" : "f70db30a-8425-4d8c-99dd-7186891b9ffe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n      //Good\r\n```",
        "createdAt" : "2020-01-23T15:28:52Z",
        "updatedAt" : "2020-01-23T16:19:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7ecb5962459af7c60c41e32df644ae3ea2b22074",
    "line" : null,
    "diffHunk" : "@@ -815,13 +815,68 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n         T\"(( (forall (a:*) . a) → Unit ))\",\n       E\"(( λ (e : forall (a:*) . |Mod:SynIdentity a|) → () )) \" ->\n         T\"(( (forall (a:*) . a) → Unit ))\",\n+      E\"(( λ (e : |Mod:SynHigh List|) → () )) \" ->\n+        T\"(( List Int64 → Unit ))\",\n+      E\"(( λ (e : |Mod:SynHigh2 GenMap Party|) → () )) \" ->\n+        T\"(( (GenMap Party Party) → Unit ))\",\n     )\n \n     forEvery(testCases) { (exp: Expr, expectedType: Type) =>\n       env.typeOf(exp) shouldBe expectedType\n     }\n   }\n \n+  \"reject ill formed type synonym application\" in {\n+    val testCases = Table(\n+      \"badly formed type synonym application\",\n+      E\"(( λ (e : |Mod:MissingSyn|) → () )) \",\n+      E\"(( λ (e : |Mod:SynInt Text|) → () )) \",\n+      E\"(( λ (e : |Mod:SynIdentity|) → () )) \",\n+      E\"(( λ (e : |Mod:SynIdentity Text Text|) → () )) \",\n+      E\"(( λ (e : |Mod:SynPair Text|) → () )) \",\n+      E\"(( λ (e : |Mod:SynPair Text Text Text|) → () )) \",\n+      E\"(( λ (e : |Mod:SynIdentity List|) → () )) \",\n+      E\"(( λ (e : |Mod:SynHigh Text|) → () )) \",\n+      E\"(( λ (e : |Mod:SynHigh GenMap|) → () )) \",\n+      E\"(( λ (e : |Mod:SynHigh2 List Party|) → () )) \",\n+    )\n+\n+    forEvery(testCases) { exp =>\n+      a[ValidationError] should be thrownBy env.typeOf(exp)\n+    }\n+  }\n+\n+  \"reject ill formed type synonym definitions\" in {\n+    val testCases = Table(\n+      \"module\"\n+        -> \"reject\",\n+      //Goood"
  },
  {
    "id" : "3bd4e9cb-18e4-4452-acf3-9f8b5dc051ba",
    "prId" : 3326,
    "comments" : [
      {
        "id" : "8f2f3805-abf4-4ce2-9e65-987076e83854",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What’s up with those tests?",
        "createdAt" : "2019-11-04T13:04:55Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "88132f73-94de-4efd-9e6c-9ff34cb93fcb",
        "parentId" : "8f2f3805-abf4-4ce2-9e65-987076e83854",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-04T14:50:23Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "609c22d98f12f9cd4dc89a8e0d9f1cf0af882a2d",
    "line" : null,
    "diffHunk" : "@@ -378,7 +378,9 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n         E\"Λ (τ : *). λ (t: Any) → (( to_any @(∀ (α : ⋆). Int64) t ))\",\n         E\"Λ (τ : *). λ (t: Any) → (( to_any @(List (Optional (∀ (α : ⋆). Int64))) t ))\",\n         // ExpToTextTypeConName\n-        E\"to_text_type_con_name @Mod:NoSuchType\",\n+//        E\"(( type_rep @Mod:NoSuchType ))\","
  },
  {
    "id" : "a13e841d-5747-44e5-9940-1c10b12d5398",
    "prId" : 3326,
    "comments" : [
      {
        "id" : "950611a7-de8b-4662-be0d-c43155f642b0",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n        // ExpTypeRep\r\n```",
        "createdAt" : "2019-11-04T15:03:45Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4bf028c4-35d8-44ed-81ba-1f63821ade0e",
        "parentId" : "950611a7-de8b-4662-be0d-c43155f642b0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Thx. Fixed. ",
        "createdAt" : "2019-11-04T15:14:34Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "609c22d98f12f9cd4dc89a8e0d9f1cf0af882a2d",
    "line" : null,
    "diffHunk" : "@@ -166,32 +166,32 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n         E\"Λ (τ : ⋆) (σ : ⋆). λ (e₁ : τ) (e₂: σ) → (( case e₁ of _ → e₂ ))\" ->\n           T\"∀ (τ : ⋆) (σ : ⋆). τ → σ → (( σ ))\",\n         // ExpToAny\n-        E\"\"\"λ (t : Mod:T) -> (( to_any @Mod:T t ))\"\"\" ->\n-          T\"Mod:T -> Any\",\n-        E\"\"\"λ (t : Mod:R Text) -> (( to_any @(Mod:R Text) t ))\"\"\" ->\n-          T\"Mod:R Text -> Any\",\n-        E\"\"\"λ (t : Text) -> (( to_any @Text t ))\"\"\" ->\n-          T\"Text -> Any\",\n-        E\"\"\"λ (t : Int64) -> (( to_any @Int64 t ))\"\"\" ->\n+        E\"\"\"λ (t : Mod:T) → (( to_any @Mod:T t ))\"\"\" ->\n+          T\"Mod:T → Any\",\n+        E\"\"\"λ (t : Mod:R Text) → (( to_any @(Mod:R Text) t ))\"\"\" ->\n+          T\"Mod:R Text → Any\",\n+        E\"\"\"λ (t : Text) → (( to_any @Text t ))\"\"\" ->\n+          T\"Text → Any\",\n+        E\"\"\"λ (t : Int64) → (( to_any @Int64 t ))\"\"\" ->\n           T\"Int64 -> Any\",\n         // ExpFromAny\n-        E\"\"\"λ (t: Any) -> (( from_any @Mod:T t ))\"\"\" ->\n+        E\"\"\"λ (t: Any) → (( from_any @Mod:T t ))\"\"\" ->\n           T\"Any → Option Mod:T\",\n-        E\"\"\"λ (t: Any) -> (( from_any @(Mod:R Text) t ))\"\"\" ->\n+        E\"\"\"λ (t: Any) → (( from_any @(Mod:R Text) t ))\"\"\" ->\n           T\"Any → Option (Mod:R Text)\",\n-        E\"\"\"λ (t: Any) -> (( from_any @Text t ))\"\"\" ->\n+        E\"\"\"λ (t: Any) → (( from_any @Text t ))\"\"\" ->\n           T\"Any → Option Text\",\n-        E\"\"\"λ (t: Any) -> (( from_any @Int64 t ))\"\"\" ->\n+        E\"\"\"λ (t: Any) → (( from_any @Int64 t ))\"\"\" ->\n           T\"Any → Option Int64\",\n         // ExpToTextTypeConName"
  },
  {
    "id" : "643e712b-79a0-474d-a0f0-bf3a581ac33c",
    "prId" : 3326,
    "comments" : [
      {
        "id" : "710de1d0-3c70-497c-91ca-dd231293374c",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n        // ExpTypeRep\r\n```",
        "createdAt" : "2019-11-04T15:04:20Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03ef19b5-6249-4929-b5b8-51726b8ff1c4",
        "parentId" : "710de1d0-3c70-497c-91ca-dd231293374c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-11-04T15:15:02Z",
        "updatedAt" : "2019-11-04T16:19:34Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "609c22d98f12f9cd4dc89a8e0d9f1cf0af882a2d",
    "line" : null,
    "diffHunk" : "@@ -378,7 +378,9 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n         E\"Λ (τ : *). λ (t: Any) → (( to_any @(∀ (α : ⋆). Int64) t ))\",\n         E\"Λ (τ : *). λ (t: Any) → (( to_any @(List (Optional (∀ (α : ⋆). Int64))) t ))\",\n         // ExpToTextTypeConName"
  },
  {
    "id" : "5316a794-c12b-4f96-bf6d-173dc0dd6e30",
    "prId" : 3293,
    "comments" : [
      {
        "id" : "7d02b792-6a4a-4506-a850-2b8232f214fd",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n         // ExpToTextTypeConName\r\n```",
        "createdAt" : "2019-10-30T14:42:29Z",
        "updatedAt" : "2019-10-30T14:54:14Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21966e0332a605efb87463491d305a573f02db43",
    "line" : null,
    "diffHunk" : "@@ -184,7 +184,13 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n         E\"\"\"λ (t: Any) -> (( from_any @Int64 t ))\"\"\" ->\n           T\"Any → Option Int64\",\n         // ExpToTextTemplateId"
  },
  {
    "id" : "55e22da3-a345-41ed-b070-a953bfd6bbde",
    "prId" : 3293,
    "comments" : [
      {
        "id" : "cc27ddfd-e78f-4a8d-a69c-e07f561c6d1d",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n         // ExpToTextTypeConName\r\n```",
        "createdAt" : "2019-10-30T14:43:01Z",
        "updatedAt" : "2019-10-30T14:54:14Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21966e0332a605efb87463491d305a573f02db43",
    "line" : null,
    "diffHunk" : "@@ -372,7 +378,7 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n         E\"Λ (τ : *). λ (t: Any) → (( to_any @(∀ (α : ⋆). Int64) t ))\",\n         E\"Λ (τ : *). λ (t: Any) → (( to_any @(List (Optional (∀ (α : ⋆). Int64))) t ))\",\n         // ExpToTextTemplateId"
  },
  {
    "id" : "5b4208d6-c3b1-43a6-af9c-153ecff3f64a",
    "prId" : 1764,
    "comments" : [
      {
        "id" : "b4422ee3-3c70-48f8-92ff-dde008db5ad5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is \"first order\" the right phrase here? I would have said \"T must have kind *\".",
        "createdAt" : "2019-06-19T12:52:59Z",
        "updatedAt" : "2019-06-19T15:48:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d930c245-d193-4f4a-97e1-fa24a2f33d49",
        "parentId" : "b4422ee3-3c70-48f8-92ff-dde008db5ad5",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-06-19T13:09:29Z",
        "updatedAt" : "2019-06-19T15:48:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "54eb78ee0d45fe3fdb7bb9c8a99831a6c31567b6",
    "line" : null,
    "diffHunk" : "@@ -578,6 +578,19 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n           (\\ (key: PositiveTestCase9:TBis) -> Cons @Party [(PositiveTestCase9:T {person} this), 'Alice'] (Nil @Party)  )\n         } ;\n       }\n+\n+      module PositiveTestCase10 {\n+        record @serializable T (a: *) = {x: a};\n+\n+        // in the next line, expect T is first order."
  },
  {
    "id" : "669647a3-39ba-4b82-84c6-5df8477d6e6f",
    "prId" : 1316,
    "comments" : [
      {
        "id" : "c68c5dac-c78f-4e09-ab4b-21eebbec13bd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@remyhaemmerle-da Can you please review the changes in this file.",
        "createdAt" : "2019-05-22T14:52:50Z",
        "updatedAt" : "2019-05-22T14:56:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b4c310ddb34ba3d1c7d4dea4a9471ff9fcea2500",
    "line" : 24,
    "diffHunk" : "@@ -594,17 +595,19 @@ class TypingSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n         \"PositiveTestCase5\",\n       )\n \n-      def checkModule(modName: String) = Typing.checkModule(\n+      def checkModule(pkg: Package, modName: String) = Typing.checkModule(\n         world,\n         defaultPkgId,\n         pkg.modules(DottedName.assertFromString(modName))\n       )\n \n-      checkModule(\"NegativeTestCase\")\n-      forAll(typeMismatchCases)(module => an[ETypeMismatch] shouldBe thrownBy(checkModule(module))) // and\n-      forAll(kindMismatchCases)(module => an[EKindMismatch] shouldBe thrownBy(checkModule(module)))\n-      an[EIllegalKeyExpression] shouldBe thrownBy(checkModule(\"PositiveTestCase6\"))\n-      an[EUnknownExprVar] shouldBe thrownBy(checkModule(\"PositiveTestCase9\"))\n+      val version1_3 = LV(LVM.V1, \"3\")"
  }
]