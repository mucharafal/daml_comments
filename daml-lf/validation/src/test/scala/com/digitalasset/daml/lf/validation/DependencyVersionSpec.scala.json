[
  {
    "id" : "929c62be-4cc3-4572-a54e-6dc579710d21",
    "prId" : 7050,
    "comments" : [
      {
        "id" : "fdfbc3d6-6501-4a40-a237-bb958e419d66",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should test that depending on the same LF version is acceptable too.\r\n```suggestion\r\n      Map(pkg(A, v1_8, A, B, E), pkg(B, v1_7, B, E), pkg(E, v1_6, E)),\r\n      Map(pkg(A, v1_8, A, B, E), pkg(B, v1_8, B, E), pkg(E, v1_6, E)),\r\n```",
        "createdAt" : "2020-08-07T06:20:41Z",
        "updatedAt" : "2020-08-07T15:26:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "edd5726604b0278196086666e0c0dae724cae3ff",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,84 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.lf.validation\n+\n+import com.daml.lf.data.Ref.{DottedName, Identifier, PackageId, QualifiedName}\n+import com.daml.lf.language.Ast._\n+import com.daml.lf.language.Util._\n+import com.daml.lf.language.{LanguageVersion => LV}\n+import org.scalatest.prop.TableDrivenPropertyChecks\n+import org.scalatest.{Matchers, WordSpec}\n+\n+class DependencyVersionSpec extends WordSpec with TableDrivenPropertyChecks with Matchers {\n+\n+  private[this] val v1_6 = LV(LV.Major.V1, LV.Minor.Stable(\"6\"))\n+  private[this] val v1_7 = LV(LV.Major.V1, LV.Minor.Stable(\"7\"))\n+  private[this] val v1_8 = LV(LV.Major.V1, LV.Minor.Stable(\"8\"))\n+  private[this] val A = (PackageId.assertFromString(\"-pkg1-\"), DottedName.assertFromString(\"A\"))\n+  private[this] val B = (PackageId.assertFromString(\"-pkg2-\"), DottedName.assertFromString(\"B\"))\n+  private[this] val E = (PackageId.assertFromString(\"-pkg3-\"), DottedName.assertFromString(\"E\"))\n+  private[this] val u = DottedName.assertFromString(\"u\")\n+\n+  \"Dependency validation should detect cycles between modules\" in {\n+\n+    def pkg(\n+        ref: (PackageId, DottedName),\n+        langVersion: LV,\n+        depRefs: (PackageId, DottedName)*,\n+    ) = {\n+      val (pkgId, modName) = ref\n+\n+      val mod = Module(\n+        modName,\n+        (\n+          (u -> DValue(TUnit, true, EUnit, false)) +:\n+            depRefs.map {\n+            case (depPkgId, depModName) =>\n+              depModName -> DValue(\n+                TUnit,\n+                true,\n+                EVal(Identifier(depPkgId, QualifiedName(depModName, u))),\n+                false)\n+          }\n+        ),\n+        langVersion,\n+        FeatureFlags.default\n+      )\n+\n+      pkgId -> Package(Map(modName -> mod), depRefs.iterator.map(_._1).toSet, None)\n+    }\n+\n+    val negativeTestCases = Table(\n+      \"valid packages\",\n+      Map(pkg(A, v1_8, A, B, E), pkg(B, v1_7, B, E), pkg(E, v1_6, E))"
  }
]