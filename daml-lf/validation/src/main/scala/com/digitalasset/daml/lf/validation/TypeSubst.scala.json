[
  {
    "id" : "4d3dc3fc-0a62-41aa-a469-11610cf78a28",
    "prId" : 7577,
    "comments" : [
      {
        "id" : "630821ae-0ace-49b2-ad81-29226fcc73c7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I would consider the fact that we need to change this function another argument for removing the link from data type definitions to templates.",
        "createdAt" : "2020-10-09T11:52:55Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4279f7e3-ef63-4c67-a9f6-2a0983151db5",
        "parentId" : "630821ae-0ace-49b2-ad81-29226fcc73c7",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done in #7631 ",
        "createdAt" : "2020-10-12T12:24:44Z",
        "updatedAt" : "2020-10-12T12:30:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d6d8aeac74d12178596915f46b0e6afbe8a23966",
    "line" : null,
    "diffHunk" : "@@ -37,9 +37,12 @@ private[validation] object TypeSubst {\n       .map(i => Name.assertFromString(\"$freshVar\" + i.toString))\n       .filterNot(fv.contains)(0)\n \n-  def substitute(subst: Map[TypeVarName, Type], dataCons: DataCons): DataCons = dataCons match {\n-    case DataRecord(fields, _) =>\n-      DataRecord(fields.transform { (_, x) =>\n+  def substitute[E](\n+      subst: Map[TypeVarName, Type],\n+      dataCons: AbstractDataCons[E]\n+  ): AbstractDataCons[E] = dataCons match {\n+    case AbstractDataRecord(fields, _) =>\n+      AbstractDataRecord(fields.transform { (_, x) =>"
  },
  {
    "id" : "79eec568-e181-4cb2-ac63-bf5ab0347901",
    "prId" : 4101,
    "comments" : [
      {
        "id" : "29eeed63-7136-4102-ae19-56cefce575a7",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n        TSynApp(syn, args.map(go(fv0, subst0, _))\r\n```",
        "createdAt" : "2020-01-20T12:08:19Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8fbc6789-6cf7-4d7e-bbd5-44d35b296be4",
        "parentId" : "29eeed63-7136-4102-ae19-56cefce575a7",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, done",
        "createdAt" : "2020-01-20T19:51:04Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : null,
    "diffHunk" : "@@ -15,6 +15,10 @@ private[validation] object TypeSubst {\n \n   private def go(fv0: Set[TypeVarName], subst0: Map[TypeVarName, Type], typ0: Type): Type =\n     typ0 match {\n+      case TSynApp(syn, args) =>\n+        TSynApp(syn, args.map { ty =>"
  },
  {
    "id" : "b1583d5e-93e0-4cfc-b90f-5e8075ca88d0",
    "prId" : 3798,
    "comments" : [
      {
        "id" : "3617bae9-32c1-487c-bfce-052fbd42b34a",
        "parentId" : null,
        "author" : null,
        "body" : "`fv0.contains(v0)` from above, so:\r\n\r\n```suggestion\r\n          val v1 = freshTypeVarName(fv0)\r\n```\r\n",
        "createdAt" : "2019-12-10T11:07:11Z",
        "updatedAt" : "2019-12-10T11:13:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9865de294f09786598bb45287b4654babf75ce3c",
    "line" : null,
    "diffHunk" : "@@ -8,192 +8,55 @@ import com.digitalasset.daml.lf.language.Ast._\n import com.digitalasset.daml.lf.validation.Util._\n import com.digitalasset.daml.lf.validation.traversable.TypeTraversable\n \n-private[validation] case class TypeSubst(map: Map[TypeVarName, Type], private val depth: Int = 0) {\n-\n-  lazy val freeVars: Set[TypeVarName] =\n-    (Set.empty[TypeVarName] /: map.values)(TypeSubst.freeVars)\n-\n-  def apply(typ: Type): Type = typ match {\n-    case TVar(name) => map.getOrElse(name, typ)\n-    case TTyCon(_) | TBuiltin(_) | TNat(_) => typ\n-    case TApp(t1, t2) => TApp(apply(t1), apply(t2))\n-    case TForall((v, k), t) =>\n-      val (v1, subst1) = if (freeVars.contains(v)) {\n-        val v1 = freshTypeVarName\n-        v1 -> TypeSubst(map + (v -> TVar(v1)))\n-      } else\n-        v -> TypeSubst(map - v)\n-      TForall((v1, k), subst1(t))\n-    case TStruct(ts) =>\n-      TStruct(ts.transform { (_, x) =>\n-        apply(x)\n-      })\n-  }\n-\n-  private def freshTypeVarName: TypeVarName =\n+private[validation] object TypeSubst {\n+\n+  def substitute(subst: Map[TypeVarName, Type], typ: Type): Type =\n+    go(freeVars(subst), subst, typ)\n+\n+  private def go(fv0: Set[TypeVarName], subst0: Map[TypeVarName, Type], typ0: Type): Type =\n+    typ0 match {\n+      case TVar(name) => subst0.getOrElse(name, typ0)\n+      case TTyCon(_) | TBuiltin(_) | TNat(_) => typ0\n+      case TApp(t1, t2) => TApp(go(fv0, subst0, t1), go(fv0, subst0, t2))\n+      case TForall((v0, k), t) =>\n+        if (fv0.contains(v0)) {\n+          val v1 = freshTypeVarName(fv0 + v0)"
  },
  {
    "id" : "1ca87275-6c65-49d3-8a0e-bd4f118d1e61",
    "prId" : 3798,
    "comments" : [
      {
        "id" : "9a397ac7-fb09-4f39-8f05-b10c025f0b62",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n  def substitute(subst: Map[TypeVarName, Type], app: TypeConApp): TypeConApp = app match {\r\n```",
        "createdAt" : "2019-12-10T11:08:36Z",
        "updatedAt" : "2019-12-10T11:13:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9865de294f09786598bb45287b4654babf75ce3c",
    "line" : null,
    "diffHunk" : "@@ -8,192 +8,55 @@ import com.digitalasset.daml.lf.language.Ast._\n import com.digitalasset.daml.lf.validation.Util._\n import com.digitalasset.daml.lf.validation.traversable.TypeTraversable\n \n-private[validation] case class TypeSubst(map: Map[TypeVarName, Type], private val depth: Int = 0) {\n-\n-  lazy val freeVars: Set[TypeVarName] =\n-    (Set.empty[TypeVarName] /: map.values)(TypeSubst.freeVars)\n-\n-  def apply(typ: Type): Type = typ match {\n-    case TVar(name) => map.getOrElse(name, typ)\n-    case TTyCon(_) | TBuiltin(_) | TNat(_) => typ\n-    case TApp(t1, t2) => TApp(apply(t1), apply(t2))\n-    case TForall((v, k), t) =>\n-      val (v1, subst1) = if (freeVars.contains(v)) {\n-        val v1 = freshTypeVarName\n-        v1 -> TypeSubst(map + (v -> TVar(v1)))\n-      } else\n-        v -> TypeSubst(map - v)\n-      TForall((v1, k), subst1(t))\n-    case TStruct(ts) =>\n-      TStruct(ts.transform { (_, x) =>\n-        apply(x)\n-      })\n-  }\n-\n-  private def freshTypeVarName: TypeVarName =\n+private[validation] object TypeSubst {\n+\n+  def substitute(subst: Map[TypeVarName, Type], typ: Type): Type =\n+    go(freeVars(subst), subst, typ)\n+\n+  private def go(fv0: Set[TypeVarName], subst0: Map[TypeVarName, Type], typ0: Type): Type =\n+    typ0 match {\n+      case TVar(name) => subst0.getOrElse(name, typ0)\n+      case TTyCon(_) | TBuiltin(_) | TNat(_) => typ0\n+      case TApp(t1, t2) => TApp(go(fv0, subst0, t1), go(fv0, subst0, t2))\n+      case TForall((v0, k), t) =>\n+        if (fv0.contains(v0)) {\n+          val v1 = freshTypeVarName(fv0 + v0)\n+          val fv1 = fv0 + v1\n+          val subst1 = subst0 + (v0 -> TVar(v1))\n+          TForall(v1 -> k, go(fv1, subst1, t))\n+        } else\n+          TForall(v0 -> k, go(fv0 + v0, subst0 - v0, t))\n+      case TStruct(ts) =>\n+        TStruct(ts.transform { (_, x) =>\n+          go(fv0, subst0, x)\n+        })\n+    }\n+\n+  private def freshTypeVarName(fv: Set[TypeVarName]): TypeVarName =\n     Stream\n       .from(0)\n       .map(i => Name.assertFromString(\"$freshVar\" + i.toString))\n-      .filterNot(freeVars.contains)(0)\n+      .filterNot(fv.contains)(0)\n \n-  def apply(dataCons: DataCons): DataCons = dataCons match {\n-    case DataRecord(fields, optTemplate: Option[Template]) =>\n+  def substitute(subst: Map[TypeVarName, Type], dataCons: DataCons): DataCons = dataCons match {\n+    case DataRecord(fields, _) =>\n       DataRecord(fields.transform { (_, x) =>\n-        apply(x)\n-      }, optTemplate.map(apply))\n+        substitute(subst, x)\n+      }, None)\n     case DataVariant(variants) =>\n       DataVariant(variants.transform { (_, x) =>\n-        apply(x)\n+        substitute(subst, x)\n       })\n     case dEnum: DataEnum =>\n       dEnum\n   }\n \n-  def apply(tmpl: Template): Template = tmpl match {\n-    case Template(param, precond, signatories, agreementText, choices, observers, mbKey) =>\n-      Template(param, apply(precond), apply(signatories), apply(agreementText), choices.transform {\n-        (_, x) =>\n-          apply(x)\n-      }, apply(observers), mbKey.map(apply))\n-  }\n-\n-  def apply(binding: Binding): Binding = binding match {\n-    case Binding(binder, typ, bound) =>\n-      Binding(binder, apply(typ), apply(bound))\n-  }\n-\n-  def apply(app: TypeConApp): TypeConApp = app match {\n-    case TypeConApp(tycon, args) => TypeConApp(tycon, args.map(apply))\n-  }\n-\n-  def apply(alt: CaseAlt): CaseAlt = alt match {\n-    case CaseAlt(pattern, expr) => CaseAlt(pattern, apply(expr))\n-  }\n-\n-  def apply(update: Update): Update = update match {\n-    case UpdateGetTime =>\n-      update\n-    case UpdatePure(t, expr) =>\n-      UpdatePure(apply(t), apply(expr))\n-    case UpdateBlock(bindings, body) =>\n-      UpdateBlock(bindings.map(apply), apply(body))\n-    case UpdateCreate(templateId, arg) =>\n-      UpdateCreate(templateId, apply(arg))\n-    case UpdateFetch(templateId, contractId) =>\n-      UpdateFetch(templateId, apply(contractId))\n-    case UpdateExercise(templateId, choice, cidE, actorsE, argE) =>\n-      UpdateExercise(templateId, choice, apply(cidE), actorsE.map(apply), apply(argE))\n-    case UpdateEmbedExpr(typ, body) =>\n-      UpdateEmbedExpr(apply(typ), apply(body))\n-    case UpdateLookupByKey(retrieveByKey) =>\n-      UpdateLookupByKey(apply(retrieveByKey))\n-    case UpdateFetchByKey(retrieveByKey) =>\n-      UpdateFetchByKey(apply(retrieveByKey))\n-  }\n-\n-  def apply(retrieveByKey: RetrieveByKey): RetrieveByKey = {\n-    retrieveByKey.copy(key = apply(retrieveByKey.key))\n+  def subsitute(subst: Map[TypeVarName, Type], app: TypeConApp): TypeConApp = app match {"
  },
  {
    "id" : "70bbb1a1-ad1f-416b-baa9-1ba9ff7d1d57",
    "prId" : 3293,
    "comments" : [
      {
        "id" : "373d2689-37b8-49d5-8250-2102c1738ecf",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Rename to `typeConf`?\r\n```suggestion\r\n    case EToTextTypeConName(typeCon) =>\r\n```",
        "createdAt" : "2019-10-30T14:27:31Z",
        "updatedAt" : "2019-10-30T14:54:14Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "039ff961-742e-40d8-8037-4b5f6c6cd2c1",
        "parentId" : "373d2689-37b8-49d5-8250-2102c1738ecf",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-10-30T14:49:53Z",
        "updatedAt" : "2019-10-30T14:54:14Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21966e0332a605efb87463491d305a573f02db43",
    "line" : null,
    "diffHunk" : "@@ -163,8 +163,8 @@ private[validation] case class TypeSubst(map: Map[TypeVarName, Type], private va\n       EToAny(apply(ty), apply(body))\n     case EFromAny(ty, body) =>\n       EFromAny(apply(ty), apply(body))\n-    case EToTextTemplateId(tmplId) =>\n-      EToTextTemplateId(tmplId)\n+    case EToTextTypeConName(tmplId) =>"
  },
  {
    "id" : "4dd23a9e-d7be-4b50-acae-7c2dcd89dc66",
    "prId" : 3293,
    "comments" : [
      {
        "id" : "44ce3671-2769-4052-9249-bb23e674d664",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n      EToTextTypeConName(typeCon)\r\n```",
        "createdAt" : "2019-10-30T14:27:40Z",
        "updatedAt" : "2019-10-30T14:54:14Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6821e8dd-c4e6-4fd3-8dd3-d145582b22d5",
        "parentId" : "44ce3671-2769-4052-9249-bb23e674d664",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-10-30T14:59:11Z",
        "updatedAt" : "2019-10-30T14:59:11Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "21966e0332a605efb87463491d305a573f02db43",
    "line" : null,
    "diffHunk" : "@@ -163,8 +163,8 @@ private[validation] case class TypeSubst(map: Map[TypeVarName, Type], private va\n       EToAny(apply(ty), apply(body))\n     case EFromAny(ty, body) =>\n       EFromAny(apply(ty), apply(body))\n-    case EToTextTemplateId(tmplId) =>\n-      EToTextTemplateId(tmplId)\n+    case EToTextTypeConName(tmplId) =>\n+      EToTextTypeConName(tmplId)"
  }
]