[
  {
    "id" : "2c5d8dd7-ccc9-467a-85cf-a2b552b9c9dd",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "9acdcadd-b19d-4563-b8cb-9e361cb407c3",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We probably have to add the `observers` to the argument of the definition. \r\nThe question is if we should provide a default value. I think `Set.empty[String]` as a default value make sens.",
        "createdAt" : "2020-10-15T08:16:41Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bc18a5c8-2493-4835-9100-23ac6745c49c",
        "parentId" : "9acdcadd-b19d-4563-b8cb-9e361cb407c3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'd prefer to not have a default value. I think they are just too dangerous.",
        "createdAt" : "2020-10-15T11:39:20Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b8305433-8ed1-4b7b-8d07-ce22dd090c0e",
        "parentId" : "9acdcadd-b19d-4563-b8cb-9e361cb407c3",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Note that this is a library for writing test, and it may used by external code. \r\nThat said, I am OK with no default value. In any case the `observers` should be an argument of the method. ",
        "createdAt" : "2020-10-15T12:38:19Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -188,6 +188,7 @@ object TransactionBuilder {\n       byKey: Boolean = true,\n   ): Exercise =\n     Exercise(\n+      observers = Set.empty,"
  },
  {
    "id" : "ac6afa85-558b-40d0-9040-a066445a52b3",
    "prId" : 6610,
    "comments" : [
      {
        "id" : "c5744e5b-35b6-4350-b200-7be6d4cfdc11",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "```suggestion\r\n  // not valid transactions.\r\n```",
        "createdAt" : "2020-07-06T08:06:58Z",
        "updatedAt" : "2020-07-06T08:31:58Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d8b0b4ec3b91fb39295653af2df268470899b352",
    "line" : null,
    "diffHunk" : "@@ -198,12 +202,10 @@ object TransactionBuilder {\n   def justCommitted(node: Node, nodes: Node*): Tx.CommittedTransaction =\n     Tx.CommittedTransaction(just(node, nodes: _*))\n \n-  // not a valid transaction.\n+  // not a valid transactions."
  },
  {
    "id" : "8b00d53f-554d-4166-bfc2-f0c1c16ba041",
    "prId" : 6415,
    "comments" : [
      {
        "id" : "2761a794-cef7-4f75-996d-c247b1d2e79a",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This is not lazy. Copy pasta?",
        "createdAt" : "2020-06-18T14:23:58Z",
        "updatedAt" : "2020-06-18T14:42:49Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ea37db24-118b-4099-9a18-ef2e704c7798",
        "parentId" : "2761a794-cef7-4f75-996d-c247b1d2e79a",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good catch",
        "createdAt" : "2020-06-18T14:44:24Z",
        "updatedAt" : "2020-06-18T14:44:24Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7cfc9e6f00f0a38e3ef355e3174dde64d12fe1b7",
    "line" : null,
    "diffHunk" : "@@ -24,30 +23,33 @@ final class TransactionBuilder {\n   }\n \n   private val ids = Iterator.from(0).map(NodeId(_))\n-  private var nodes = HashMap.newBuilder[NodeId, Node]\n+  private var nodes = HashMap.newBuilder[NodeId, TxNode]\n   private val roots = ImmArray.newBuilder[NodeId]\n \n+  // not thread safe\n+  private[this] def newNode(node: Node): NodeId = {\n+    val nodeId = ids.next() // lazy to avoid getting the next id if the method later throws"
  }
]