[
  {
    "id" : "64e6adf9-6116-4c4d-b818-9d79be3cb8c8",
    "prId" : 7740,
    "comments" : [
      {
        "id" : "77c45440-e5fa-45cc-b9b3-4f4375be5d1e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-10-19T14:42:55Z",
        "updatedAt" : "2020-10-19T18:09:59Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2c9ff02de54582aa2ae4421ef2c53adf9307ee16",
    "line" : null,
    "diffHunk" : "@@ -835,6 +835,7 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n               structProj.getFieldInternedStr,\n               \"Expr.StructProj.field.field\"\n             ),\n+            fieldIndex = None,  // This will be filled in by the type checker."
  },
  {
    "id" : "8368f4b9-50c0-4d61-b28c-2ba04acfabb8",
    "prId" : 7578,
    "comments" : [
      {
        "id" : "62cb1c35-cf9c-4bc5-9160-4db042c2031c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we still support decoding DAML-LF 1.5 or older? If we do, wouldn't that mean that we still have to deal with both cases, `actors` present or absent, in the interpreter and this change would not really buy us anything?",
        "createdAt" : "2020-10-06T09:15:02Z",
        "updatedAt" : "2020-10-07T07:21:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b5113d22-cdea-47c2-9a50-dbe122990fad",
        "parentId" : "62cb1c35-cf9c-4bc5-9160-4db042c2031c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "DAML-LF 1.5 or latter are deprecated since #5321 that is before the release of SDK 1.0.0. \r\nWe will drop support of  DAML-LF 1.5 or older in the future however for the sake of consistency I prefer not to break reading older version.\r\n",
        "createdAt" : "2020-10-06T09:24:40Z",
        "updatedAt" : "2020-10-07T07:21:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2478ace645101483f34f6bc5e2c6ec8af2f19c37",
    "line" : 5,
    "diffHunk" : "@@ -1074,13 +1074,15 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n               \"Update.Exercise.choice.choice\"\n             ),\n             cidE = decodeExpr(exercise.getCid, definition),\n-            actorsE =\n+            actorsE = if (versionIsOlderThan(LV.Features.noExerciseActor)) {"
  },
  {
    "id" : "f2758ddc-1409-4f09-81d4-f56fa561d37c",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "729a1f14-43c6-4e46-bade-51b59d69754a",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n        observers = None, // FIXME: https://github.com/digital-asset/daml/issues/XXXX  // ENil(TBuiltin(BTParty)), //NICK //decodeExpr(lfChoice.getObservers, s\"$tpl:$chName:observers\"),\r\n```\r\nIf you don't plan to do it in this PR. ",
        "createdAt" : "2020-10-15T07:32:24Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -552,6 +552,7 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n         name = chName,\n         consuming = lfChoice.getConsuming,\n         controllers = decodeExpr(lfChoice.getControllers, s\"$tpl:$chName:controller\"),\n+        observers = None, // ENil(TBuiltin(BTParty)), //NICK //decodeExpr(lfChoice.getObservers, s\"$tpl:$chName:observers\"),"
  },
  {
    "id" : "1cb00e03-fc6b-4b0a-9b8c-522381af7ea8",
    "prId" : 7137,
    "comments" : [
      {
        "id" : "efe14b73-f34c-4607-bfdb-949897063de9",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n        minVersion = contractIdTextConversions,\r\n    ),\r\n```",
        "createdAt" : "2020-08-14T09:20:05Z",
        "updatedAt" : "2020-08-17T07:36:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "83a0ad73a1bdb8d23b0f6b6f0bb846eda1c0ad5e",
    "line" : null,
    "diffHunk" : "@@ -1556,6 +1556,10 @@ private[lf] object DecodeV1 {\n       BuiltinFunctionInfo(TO_TEXT_TIMESTAMP, BToTextTimestamp),\n       BuiltinFunctionInfo(TO_TEXT_PARTY, BToTextParty, minVersion = partyTextConversions),\n       BuiltinFunctionInfo(TO_TEXT_TEXT, BToTextText),\n+      BuiltinFunctionInfo(\n+        TO_TEXT_CONTRACT_ID,\n+        BToTextContractId,\n+        minVersion = contractIdTextConversions),"
  },
  {
    "id" : "8fa2798e-d3c2-4ef0-a4de-8298c3b4c7eb",
    "prId" : 5020,
    "comments" : [
      {
        "id" : "84e9337b-e25b-4268-812f-3ef50f88abf2",
        "parentId" : null,
        "author" : null,
        "body" : "Is there a reason for this one to be commented out?",
        "createdAt" : "2020-03-16T16:04:01Z",
        "updatedAt" : "2020-03-16T16:28:08Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fc7de82a-a45b-4fab-9727-647143421e89",
        "parentId" : "84e9337b-e25b-4268-812f-3ef50f88abf2",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I was debugging the issue you fix in #5025.\r\nI uncommented.",
        "createdAt" : "2020-03-16T16:09:43Z",
        "updatedAt" : "2020-03-16T16:28:08Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f08c44e41a71c281f507deb46c9e36a59538f6cc",
    "line" : null,
    "diffHunk" : "@@ -1434,15 +1453,30 @@ private[lf] object DecodeV1 {\n         GEQ_NUMERIC,\n         BGreaterEqNumeric,\n         minVersion = numeric,\n+        maxVersion = Some(genComparison),\n       ),\n-      BuiltinFunctionInfo(GEQ_TEXT, BGreaterEq, implicitParameters = List(TText)),\n-      BuiltinFunctionInfo(GEQ_TIMESTAMP, BGreaterEq, implicitParameters = List(TTimestamp)),\n+      BuiltinFunctionInfo(\n+        GEQ_TEXT,\n+        BGreaterEq,\n+        maxVersion = Some(genComparison),\n+        implicitParameters = List(TText)),\n+      BuiltinFunctionInfo(\n+        GEQ_TIMESTAMP,\n+        BGreaterEq,\n+        maxVersion = Some(genComparison),\n+        implicitParameters = List(TTimestamp)),\n       BuiltinFunctionInfo(\n         GEQ_PARTY,\n         BGreaterEq,\n+        minVersion = partyOrdering,\n+        maxVersion = Some(genComparison),\n         implicitParameters = List(TParty),\n-        minVersion = partyOrdering),\n-      BuiltinFunctionInfo(LESS_INT64, BLess, implicitParameters = List(TInt64)),\n+      ),\n+      BuiltinFunctionInfo(\n+        LESS_INT64,\n+        BLess,\n+//        maxVersion = Some(genComparison),"
  },
  {
    "id" : "8cd7c2ac-7ac7-4e41-b589-1a16d705d9ab",
    "prId" : 4653,
    "comments" : [
      {
        "id" : "cc095418-0ad9-4457-aa47-532616701a37",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n      metadata = metadata,\r\n```",
        "createdAt" : "2020-02-21T16:37:28Z",
        "updatedAt" : "2020-02-21T17:25:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "13b1b8ae9ce88893e6afc0da8c0e951a21681a95",
    "line" : null,
    "diffHunk" : "@@ -50,11 +61,26 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n             Some(dependencyTracker),\n             _,\n             onlySerializableDataDefs).decode),\n-      directDeps = dependencyTracker.getDependencies\n+      directDeps = dependencyTracker.getDependencies,\n+      metadata = metadata"
  },
  {
    "id" : "f2e2ea89-bc3f-4cf2-9572-c3cd2b8f441f",
    "prId" : 4653,
    "comments" : [
      {
        "id" : "bc5cdf78-fb7f-42b1-8c7a-16c48d5f9b18",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n    def getInternedStr(id: Int) = \r\n```",
        "createdAt" : "2020-02-21T16:37:53Z",
        "updatedAt" : "2020-02-21T17:25:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "13b1b8ae9ce88893e6afc0da8c0e951a21681a95",
    "line" : null,
    "diffHunk" : "@@ -50,11 +61,26 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n             Some(dependencyTracker),\n             _,\n             onlySerializableDataDefs).decode),\n-      directDeps = dependencyTracker.getDependencies\n+      directDeps = dependencyTracker.getDependencies,\n+      metadata = metadata\n     )\n \n   }\n \n+  private[archive] def decodePackageMetadata(\n+      metadata: PLF.PackageMetadata,\n+      internedStrings: ImmArraySeq[String]): PackageMetadata = {\n+    def getInternedStr(id: Int) = {"
  },
  {
    "id" : "a614fbeb-114c-485f-8d7e-3c4333832373",
    "prId" : 4653,
    "comments" : [
      {
        "id" : "02718754-1ac2-4705-af59-c143d66d6327",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "```suggestion\r\n```",
        "createdAt" : "2020-02-21T16:38:02Z",
        "updatedAt" : "2020-02-21T17:25:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "13b1b8ae9ce88893e6afc0da8c0e951a21681a95",
    "line" : null,
    "diffHunk" : "@@ -50,11 +61,26 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n             Some(dependencyTracker),\n             _,\n             onlySerializableDataDefs).decode),\n-      directDeps = dependencyTracker.getDependencies\n+      directDeps = dependencyTracker.getDependencies,\n+      metadata = metadata\n     )\n \n   }\n \n+  private[archive] def decodePackageMetadata(\n+      metadata: PLF.PackageMetadata,\n+      internedStrings: ImmArraySeq[String]): PackageMetadata = {\n+    def getInternedStr(id: Int) = {\n+      internedStrings.lift(id).getOrElse {\n+        throw ParseError(s\"invalid internedString table index $id\")\n+      }\n+    }"
  },
  {
    "id" : "a5e137e6-2f58-4cb6-9b1c-9bf65d865e09",
    "prId" : 4101,
    "comments" : [
      {
        "id" : "f361d264-86ef-4e3c-9a5d-54293ca95f49",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What’s up with this?",
        "createdAt" : "2020-01-20T07:52:27Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "92d5a57e-2bc3-4c19-b43c-4cbcda0bfcdd",
        "parentId" : "f361d264-86ef-4e3c-9a5d-54293ca95f49",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "line just needs to be deleted. done",
        "createdAt" : "2020-01-20T19:44:11Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : null,
    "diffHunk" : "@@ -145,6 +145,26 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n       val defs = mutable.ArrayBuffer[(DottedName, Definition)]()\n       val templates = mutable.ArrayBuffer[(DottedName, Template)]()\n \n+      if (!onlySerializableDataDefs) {\n+        // collect type synonyms\n+        lfModule.getSynonymsList.asScala\n+          .foreach { defn =>\n+            val defName = handleDottedName(\n+              defn.getNameCase,\n+              PLF.DefTypeSyn.NameCase.NAME_DNAME,\n+              defn.getNameDname,\n+              PLF.DefTypeSyn.NameCase.NAME_INTERNED_DNAME,\n+              defn.getNameInternedDname,\n+              \"DefTypeSyn.name.name\"\n+            )\n+            currentDefinitionRef =\n+              Some(DefinitionRef(packageId, QualifiedName(moduleName, defName)))\n+            val d = decodeDefTypeSyn(defn)\n+            defs += (defName -> d)\n+          //throw ParseError(\"type synonym def: \" + defName.toString()) // TODO #3616 - remove"
  },
  {
    "id" : "ff404229-8aac-43ba-a23c-17ef95aea8cb",
    "prId" : 4101,
    "comments" : [
      {
        "id" : "8a1b531b-ba27-42af-9a12-dcecdde42f19",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We need to version lfModule.getSynonymsList with something like \r\n\r\n```\r\n   if (versionIsOlderThan(LV.Features.typeSynonyms)) {\r\n        assertEmpty(lfModule.getSynonymsList, \"Module.synonyms\"))\r\n      } else if (!onlySerializableDataDefs) {\r\n        if (versionIsOlderThan(LV.Features.internedStrings)) {\r\n        // collect type synonyms\r\n        ... \r\n```\r\nassuming the following line is added to `daml-lf/language/src/main/scala/com/digitalasset/daml/lf/language/LanguageVersion.scala`\r\n\r\n```\r\n    val typeSynonyms = v1_dev\r\n```\r\n\r\n",
        "createdAt" : "2020-01-20T09:56:15Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2706357-ee1c-4629-8a2e-48a559025849",
        "parentId" : "8a1b531b-ba27-42af-9a12-dcecdde42f19",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, I'll have a look at what needs doing here...",
        "createdAt" : "2020-01-20T19:48:29Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4cbad41d-aed1-433d-a50e-2085bf529fc9",
        "parentId" : "8a1b531b-ba27-42af-9a12-dcecdde42f19",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "This is done now. Thank you.",
        "createdAt" : "2020-01-21T14:12:02Z",
        "updatedAt" : "2020-01-22T18:54:57Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b7ff4849afb993cbda3dc7bea03b90e9dd9c19",
    "line" : 8,
    "diffHunk" : "@@ -145,6 +145,26 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n       val defs = mutable.ArrayBuffer[(DottedName, Definition)]()\n       val templates = mutable.ArrayBuffer[(DottedName, Template)]()\n \n+      if (!onlySerializableDataDefs) {\n+        // collect type synonyms\n+        lfModule.getSynonymsList.asScala"
  },
  {
    "id" : "80f02fa1-cb1b-4190-9cef-ecfe7e522341",
    "prId" : 3817,
    "comments" : [
      {
        "id" : "05b3866d-cd58-46d7-b348-b0169a9c7d9f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we not map this to `BEqual` with an implicit parameter?",
        "createdAt" : "2019-12-11T12:28:06Z",
        "updatedAt" : "2019-12-11T12:30:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a08100b5-c521-4667-8df2-7faab9ae65cd",
        "parentId" : "05b3866d-cd58-46d7-b348-b0169a9c7d9f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The type of ``EQUAL_CONTRACT_ID`` contains a universal quantifier (``∀a. ContractId a -> ContractId a -> Bool``). I cannot represent it, using implicit parameters. \r\nIt is the same for `EQUAL_NUMERIC`.\r\n\r\n I do not think it is worthwhile to extend the implicit parameter feature to handle those two cases. ",
        "createdAt" : "2019-12-11T12:38:20Z",
        "updatedAt" : "2019-12-11T12:44:51Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9fa5a431-9c7d-43ec-ac6c-3ed8d8ba87a0",
        "parentId" : "05b3866d-cd58-46d7-b348-b0169a9c7d9f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah I see, thanks for the explanation! Might be worth capturing in a comment somewhere.",
        "createdAt" : "2019-12-11T12:39:04Z",
        "updatedAt" : "2019-12-11T12:39:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "59e21817-8088-405b-8544-49b902c09c34",
        "parentId" : "05b3866d-cd58-46d7-b348-b0169a9c7d9f",
        "author" : null,
        "body" : "It's also the reason these two had separate representations in the Haskell AST 🙃 ",
        "createdAt" : "2019-12-12T08:51:00Z",
        "updatedAt" : "2019-12-12T08:51:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "7211a4fb244cd3ddf7a3e698e6b86f78f4e02e2e",
    "line" : 57,
    "diffHunk" : "@@ -1406,28 +1406,50 @@ private[lf] object DecodeV1 {\n       BuiltinFunctionInfo(GREATER_DATE, BGreaterDate),\n       BuiltinFunctionInfo(EQUAL, BEqual, minVersion = genMap),\n       BuiltinFunctionInfo(EQUAL_LIST, BEqualList),\n-      BuiltinFunctionInfo(EQUAL_CONTRACT_ID, BEqualContractId),\n-      // FIXME https://github.com/digital-asset/daml/issues/3752\n-      // Constrain max version of the following 'EQUAL_' builtin once\n-      // generic equality is handled by the compiler\n       BuiltinFunctionInfo(EQUAL_INT64, BEqual, implicitParameters = List(TInt64)),\n       BuiltinFunctionInfo(\n         EQUAL_DECIMAL,\n         BEqualNumeric,\n         maxVersion = Some(numeric),\n         implicitParameters = List(TNat.Decimal)\n       ),\n-      BuiltinFunctionInfo(EQUAL_NUMERIC, BEqualNumeric, minVersion = numeric),\n-      BuiltinFunctionInfo(EQUAL_TEXT, BEqual, implicitParameters = List(TText)),\n-      BuiltinFunctionInfo(EQUAL_TIMESTAMP, BEqual, implicitParameters = List(TTimestamp)),\n-      BuiltinFunctionInfo(EQUAL_DATE, BEqual, implicitParameters = List(TDate)),\n-      BuiltinFunctionInfo(EQUAL_PARTY, BEqual, implicitParameters = List(TParty)),\n-      BuiltinFunctionInfo(EQUAL_BOOL, BEqual, implicitParameters = List(TBool)),\n+      BuiltinFunctionInfo(\n+        EQUAL_NUMERIC,\n+        BEqualNumeric,\n+        minVersion = numeric,\n+        maxVersion = Some(genMap)),\n+      BuiltinFunctionInfo(\n+        EQUAL_TEXT,\n+        BEqual,\n+        maxVersion = Some(genMap),\n+        implicitParameters = List(TText)),\n+      BuiltinFunctionInfo(\n+        EQUAL_TIMESTAMP,\n+        BEqual,\n+        maxVersion = Some(genMap),\n+        implicitParameters = List(TTimestamp)),\n+      BuiltinFunctionInfo(\n+        EQUAL_DATE,\n+        BEqual,\n+        maxVersion = Some(genMap),\n+        implicitParameters = List(TDate)),\n+      BuiltinFunctionInfo(\n+        EQUAL_PARTY,\n+        BEqual,\n+        maxVersion = Some(genMap),\n+        implicitParameters = List(TParty)),\n+      BuiltinFunctionInfo(\n+        EQUAL_BOOL,\n+        BEqual,\n+        maxVersion = Some(genMap),\n+        implicitParameters = List(TBool)),\n       BuiltinFunctionInfo(\n         EQUAL_TYPE_REP,\n         BEqual,\n         minVersion = typeRep,\n+        maxVersion = Some(genMap),\n         implicitParameters = List(TTypeRep)),\n+      BuiltinFunctionInfo(EQUAL_CONTRACT_ID, BEqualContractId, maxVersion = Some(genMap)),"
  },
  {
    "id" : "8d330601-1b7a-48da-a56a-276de05421fd",
    "prId" : 3817,
    "comments" : [
      {
        "id" : "2914a9e5-391e-4913-9ee8-e42587d3b59b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we not map this to `BEqual` with an implicit parameter?",
        "createdAt" : "2019-12-11T12:29:48Z",
        "updatedAt" : "2019-12-11T12:30:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "437e5b4a-954c-4160-bcf6-ba2335d8c1fb",
        "parentId" : "2914a9e5-391e-4913-9ee8-e42587d3b59b",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Same as ``EQUAL_CONTRACT_ID``",
        "createdAt" : "2019-12-11T12:38:48Z",
        "updatedAt" : "2019-12-11T12:38:48Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7211a4fb244cd3ddf7a3e698e6b86f78f4e02e2e",
    "line" : 22,
    "diffHunk" : "@@ -1406,28 +1406,50 @@ private[lf] object DecodeV1 {\n       BuiltinFunctionInfo(GREATER_DATE, BGreaterDate),\n       BuiltinFunctionInfo(EQUAL, BEqual, minVersion = genMap),\n       BuiltinFunctionInfo(EQUAL_LIST, BEqualList),\n-      BuiltinFunctionInfo(EQUAL_CONTRACT_ID, BEqualContractId),\n-      // FIXME https://github.com/digital-asset/daml/issues/3752\n-      // Constrain max version of the following 'EQUAL_' builtin once\n-      // generic equality is handled by the compiler\n       BuiltinFunctionInfo(EQUAL_INT64, BEqual, implicitParameters = List(TInt64)),\n       BuiltinFunctionInfo(\n         EQUAL_DECIMAL,\n         BEqualNumeric,\n         maxVersion = Some(numeric),\n         implicitParameters = List(TNat.Decimal)\n       ),\n-      BuiltinFunctionInfo(EQUAL_NUMERIC, BEqualNumeric, minVersion = numeric),\n-      BuiltinFunctionInfo(EQUAL_TEXT, BEqual, implicitParameters = List(TText)),\n-      BuiltinFunctionInfo(EQUAL_TIMESTAMP, BEqual, implicitParameters = List(TTimestamp)),\n-      BuiltinFunctionInfo(EQUAL_DATE, BEqual, implicitParameters = List(TDate)),\n-      BuiltinFunctionInfo(EQUAL_PARTY, BEqual, implicitParameters = List(TParty)),\n-      BuiltinFunctionInfo(EQUAL_BOOL, BEqual, implicitParameters = List(TBool)),\n+      BuiltinFunctionInfo(\n+        EQUAL_NUMERIC,"
  },
  {
    "id" : "624c45ac-54f1-4ead-b60f-c2eb69a971a0",
    "prId" : 3726,
    "comments" : [
      {
        "id" : "d935bce4-d2ac-43f9-8fcf-172dba3d4b67",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Very minor.  `ModuleDecoder` constructor starts to have to many arguments for my little brain. I would consider using parameter names, when it is called.",
        "createdAt" : "2019-12-04T13:22:46Z",
        "updatedAt" : "2019-12-04T13:28:20Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "172715cbea18231150b7d6276af1c3f63490bc2f",
    "line" : 10,
    "diffHunk" : "@@ -39,15 +39,21 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n     val internedDottedNames =\n       decodeInternedDottedNames(lfPackage.getInternedDottedNamesList.asScala, internedStrings)\n \n+    val dependencyTracker = new PackageDependencyTracker(packageId)\n+\n     Package(\n-      lfPackage.getModulesList.asScala\n+      modules = lfPackage.getModulesList.asScala\n         .map(\n           ModuleDecoder("
  },
  {
    "id" : "1a3222f0-c18f-4810-88b6-9bf464d33c7e",
    "prId" : 3703,
    "comments" : [
      {
        "id" : "44658fc4-eee2-4560-ab2e-53d243389cbb",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Please add a reference to the issue. \r\nsomething like:\r\n```\r\n  // FIXME https://github.com/digital-asset/daml/issues/3616\r\n  // Comments\r\n```",
        "createdAt" : "2019-12-03T08:35:33Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "53542bed-f877-41d4-a8b8-2ed509a668c4",
        "parentId" : "44658fc4-eee2-4560-ab2e-53d243389cbb",
        "author" : {
          "login" : "Nick-Chapman",
          "name" : "Nick Chapman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/7867928?u=69447afebf94adceb0dce70221641775915bedea&v=4"
        },
        "body" : "ok\r\n",
        "createdAt" : "2019-12-03T12:39:29Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : {
          "login" : "Nick-Chapman",
          "name" : "Nick Chapman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/7867928?u=69447afebf94adceb0dce70221641775915bedea&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8fb11599-1602-40e6-a434-cbb7324094e6",
        "parentId" : "44658fc4-eee2-4560-ab2e-53d243389cbb",
        "author" : {
          "login" : "Nick-Chapman",
          "name" : "Nick Chapman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/7867928?u=69447afebf94adceb0dce70221641775915bedea&v=4"
        },
        "body" : "done\r\n",
        "createdAt" : "2019-12-03T12:42:26Z",
        "updatedAt" : "2019-12-03T12:42:26Z",
        "lastEditedBy" : {
          "login" : "Nick-Chapman",
          "name" : "Nick Chapman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/7867928?u=69447afebf94adceb0dce70221641775915bedea&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 6,
    "diffHunk" : "@@ -248,6 +248,9 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n         lfDataType.getSerializable,\n         ImmArray(params).map(decodeTypeVarWithKind),\n         lfDataType.getDataConsCase match {\n+          case PLF.DefDataType.DataConsCase.SYNONYM =>\n+            //assertSince(LV.Features.type_syn, \"DefDataType.DataCons.Synonym\") //TODO(NICK)"
  },
  {
    "id" : "d8dd6f45-5148-4727-b8d4-6001816806ff",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "3b6a5531-2d17-40c9-8264-4c06a4512e16",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n        assertUndefined(interned_id, description + \"_interned_id\")\r\n```",
        "createdAt" : "2019-11-01T12:19:32Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4dbed4ee-2cb1-48f7-9781-0145f8e97a5e",
        "parentId" : "3b6a5531-2d17-40c9-8264-4c06a4512e16",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed\r\n",
        "createdAt" : "2019-11-01T13:28:39Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : null,
    "diffHunk" : "@@ -158,52 +181,54 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n     }\n \n     // -----------------------------------------------------------------------\n-    private[this] def getInternedString(id: Int) =\n+    private[this] def getInternedStr(id: Int) =\n       internedStrings.lift(id).getOrElse {\n         throw ParseError(s\"invalid internedString table index $id\")\n       }\n \n     private[this] def getInternedPackageId(id: Int): PackageId = {\n       assertSince(LV.Features.internedPackageId, \"interned PackageId\")\n-      toPackageId(getInternedString(id))\n-    }\n-\n-    private[this] def getInternedName(id: Int): Name = {\n-      assertSince(LV.Features.internedStrings, \"interned Name\")\n-      toName(getInternedString(id))\n-    }\n-\n-    private[this] def getInternedText(id: Int): PLText = {\n-      assertSince(LV.Features.internedStrings, \"interned Text\")\n-      PLText(getInternedString(id))\n-    }\n-\n-    private[this] def getInternedNumeric(id: Int): PrimLit = {\n-      assertSince(LV.Features.internedStrings, \"interned Numeric\")\n-      toNumericLiteral(getInternedString(id))\n+      eitherToParseError(PackageId.fromString(getInternedStr(id)))\n     }\n \n-    private[this] def getInternedDecimal(id: Int): PLNumeric = {\n-      assertSince(LV.Features.internedStrings, \"interned Decimal\")\n-      toDecimalLiteral(getInternedString(id))\n+    private[this] def getInternedName(id: Int, description: => String): Name = {\n+      assertSince(LV.Features.internedStrings, description)\n+      eitherToParseError(Name.fromString(getInternedStr(id)))\n     }\n \n-    private[this] def getInternedParty(id: Int): PLParty = {\n-      assertSince(LV.Features.internedStrings, \"interned Party\")\n-      toPartyLiteral(getInternedString(id))\n-    }\n-\n-    private[this] def getInternedDottedName(id: Int): DottedName =\n+    private[this] def getInternedDottedName(id: Int) =\n       internedDottedNames.lift(id).getOrElse {\n-        assertSince(LV.Features.internedDottedNames, \"interned DottedNames\")\n         throw ParseError(s\"invalid dotted name table index $id\")\n       }\n \n-    private[this] def decodeDottedName(name: PLF.DottedName): DottedName =\n-      if (name.getSegmentsCount == 0) {\n-        getInternedDottedName(name.getSegmentsInternedId)\n+    private[this] def handleDottedName(\n+        segments: Seq[String],\n+        interned_id: Int,\n+        description: => String,\n+    ): DottedName =\n+      if (versionIsOlderThan(LV.Features.internedDottedNames)) {\n+        assertUndefined(interned_id, \"description\" + \"_interned_id\")"
  },
  {
    "id" : "2e312d26-8e1e-4c7b-a9dc-7570b17c3bb3",
    "prId" : 3296,
    "comments" : [
      {
        "id" : "09946a61-deb0-4501-9390-39b0462b06a6",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Does this case need an `assertSince(LV.Features.internedStrings)`?",
        "createdAt" : "2019-11-01T12:31:37Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "01dcee86-5efb-44e6-bd89-156276e71866",
        "parentId" : "09946a61-deb0-4501-9390-39b0462b06a6",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "the check is done inside `getInternedName`.",
        "createdAt" : "2019-11-01T13:30:21Z",
        "updatedAt" : "2019-11-01T16:19:25Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e4b307bce38672100ce0d80a27efe67f1499f824",
    "line" : 545,
    "diffHunk" : "@@ -551,11 +624,12 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n \n     private[this] def decodeExprBody(lfExpr: PLF.Expr, definition: String): Expr =\n       lfExpr.getSumCase match {\n-        case PLF.Expr.SumCase.VAR =>\n-          EVar(toName(lfExpr.getVar))\n+        case PLF.Expr.SumCase.VAR_STR =>\n+          assertUntil(LV.Features.internedStrings, \"Expr.var_str\")\n+          EVar(toName(lfExpr.getVarStr))\n \n-        case PLF.Expr.SumCase.VAR_INTERNED_ID =>\n-          EVar(getInternedName(lfExpr.getVarInternedId))\n+        case PLF.Expr.SumCase.VAR_INTERNED_STR =>"
  },
  {
    "id" : "4a6305c1-9b45-49e7-8545-b032ca86e28b",
    "prId" : 3255,
    "comments" : [
      {
        "id" : "d48f38dd-363f-4736-9ea8-a2eef235fede",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Rename `ProtoModule` to `ProtoPackage`.",
        "createdAt" : "2019-10-28T09:38:44Z",
        "updatedAt" : "2019-10-30T09:34:07Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d8083827e37fe8542c4a362a6327d021508f2cdc",
    "line" : null,
    "diffHunk" : "@@ -48,18 +48,27 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n             onlySerializableDataDefs).decode))\n   }\n \n-  type ProtoModule = PLF.Module\n+  type ProtoModule = PLF.Package"
  },
  {
    "id" : "ba87885a-f0c6-499e-8c13-a6116c6bab00",
    "prId" : 3255,
    "comments" : [
      {
        "id" : "7d0d48c7-16a1-4847-ab74-77a54b35466b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This line is duplicated.",
        "createdAt" : "2019-10-29T13:46:25Z",
        "updatedAt" : "2019-10-30T09:34:07Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d8083827e37fe8542c4a362a6327d021508f2cdc",
    "line" : null,
    "diffHunk" : "@@ -48,18 +48,37 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n             onlySerializableDataDefs).decode))\n   }\n \n-  type ProtoModule = PLF.Module\n+  // LF scenario modules are wrapped in a distinct proto package"
  },
  {
    "id" : "b0246e71-b51e-482c-b65c-96fcfbe824a6",
    "prId" : 3212,
    "comments" : [
      {
        "id" : "05cdef08-c55e-4026-abd4-abb2d4c6a42e",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "If we don't always use `info.typ`, you could consider making it lazy to not allocate it when creating a value of `BuiltinTypeInfo`.",
        "createdAt" : "2019-10-18T08:40:51Z",
        "updatedAt" : "2019-10-18T11:09:58Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d12f8c35-cef7-4b5a-8eee-337e44b850c0",
        "parentId" : "05cdef08-c55e-4026-abd4-abb2d4c6a42e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "There is a fix number of BuiltinTypeInfo allocated.",
        "createdAt" : "2019-10-18T10:02:00Z",
        "updatedAt" : "2019-10-18T11:09:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cc1ada92-8dc6-49ee-b8a3-24a882ec4f16",
        "parentId" : "05cdef08-c55e-4026-abd4-abb2d4c6a42e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "one for each builtins. ",
        "createdAt" : "2019-10-18T10:03:10Z",
        "updatedAt" : "2019-10-18T11:09:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2e6f9eaac76e01efa864c9029c02a47427ae63",
    "line" : 52,
    "diffHunk" : "@@ -1087,7 +1087,9 @@ private[lf] object DecodeV1 {\n       proto: PLF.PrimType,\n       bTyp: BuiltinType,\n       minVersion: LV = LV.Features.default\n-  )\n+  ) {\n+    val typ = TBuiltin(bTyp)"
  },
  {
    "id" : "89e70147-eeac-4bd4-bb7c-ae373d5150a1",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "8be2e9a5-0d74-41cd-8e1f-46c706c6ace4",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "should be rejected if enumCon.getConstructorsInternedIdsCount != 0",
        "createdAt" : "2019-10-02T18:24:03Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "65deae88-8622-4c2f-9a1c-b9577a32824e",
        "parentId" : "8be2e9a5-0d74-41cd-8e1f-46c706c6ace4",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "We postpone to upcoming PR.",
        "createdAt" : "2019-10-03T15:23:00Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : null,
    "diffHunk" : "@@ -136,22 +187,52 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n           case PLF.DefDataType.DataConsCase.ENUM =>\n             assertSince(LV.Features.enum, \"DefDataType.DataCons.Enum\")\n             assertEmpty(params.toSeq, \"params\")\n-            DataEnum(decodeEnumCons(ImmArray(lfDataType.getEnum.getConstructorsList.asScala)))\n+            DataEnum(decodeEnumCon(lfDataType.getEnum))\n           case PLF.DefDataType.DataConsCase.DATACONS_NOT_SET =>\n             throw ParseError(\"DefDataType.DATACONS_NOT_SET\")\n \n         }\n       )\n     }\n \n-    private[this] def decodeFields(lfFields: ImmArray[PLF.FieldWithType]): ImmArray[(Name, Type)] =\n-      lfFields.map(field => name(field.getField) -> decodeType(field.getType))\n+    private[this] def decodeFieldWithType(lfFieldWithType: PLF.FieldWithType): (Name, Type) =\n+      name(lfFieldWithType.getFieldCase match {\n+        case PLF.FieldWithType.FieldCase.NAME => lfFieldWithType.getName\n+        case PLF.FieldWithType.FieldCase.INTERNED_ID =>\n+          getInternedString(lfFieldWithType.getInternedId)\n+        case PLF.FieldWithType.FieldCase.FIELD_NOT_SET =>\n+          throw ParseError(\"FieldWithType.FIELD_NOT_SET\")\n+      }) -> decodeType(lfFieldWithType.getType)\n \n-    private[this] def decodeEnumCons(cons: ImmArray[String]): ImmArray[EnumConName] =\n-      cons.map(name)\n+    private[this] def decodeFields(lfFields: ImmArray[PLF.FieldWithType]): ImmArray[(Name, Type)] =\n+      lfFields.map(decodeFieldWithType)\n+\n+    private[this] def decodeFieldWithExpr(\n+        lfFieldWithExpr: PLF.FieldWithExpr,\n+        definition: String): (Name, Expr) =\n+      name(lfFieldWithExpr.getFieldCase match {\n+        case PLF.FieldWithExpr.FieldCase.NAME => lfFieldWithExpr.getName\n+        case PLF.FieldWithExpr.FieldCase.INTERNED_ID =>\n+          getInternedString(lfFieldWithExpr.getInternedId)\n+        case PLF.FieldWithExpr.FieldCase.FIELD_NOT_SET =>\n+          throw ParseError(\"FieldWithExpr.FIELD_NOT_SET\")\n+      }) -> decodeExpr(lfFieldWithExpr.getExpr, definition)\n+\n+    private[this] def decodeEnumCon(\n+        enumCon: PLF.DefDataType.EnumConstructors): ImmArray[EnumConName] =\n+      if (enumCon.getConstructorsCount == 0)\n+        enumCon.getConstructorsInternedIdsList.asScala\n+          .map(id => name(getInternedString(id)))(breakOut)\n+      else\n+        enumCon.getConstructorsList.asScala.map(name)(breakOut)"
  },
  {
    "id" : "947abef2-9fb6-4445-9499-a4c9f39bd89f",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "d4b90ba4-9804-43dc-8f9f-f804a0417885",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "it should fail if v < 1.dev and if the function is used for anything else other than packageId",
        "createdAt" : "2019-10-02T18:28:05Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : null,
    "diffHunk" : "@@ -112,6 +146,23 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n \n     // -----------------------------------------------------------------------\n \n+    private[this] def getInternedString(id: Int): String = {\n+      def outOfRange = ParseError(s\"invalid string table index $id\")"
  },
  {
    "id" : "98c7fa60-9508-4c80-9458-62ffb3789961",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "ec22c12f-285a-4014-98a1-15d2b6a0f41e",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : ":+1: ",
        "createdAt" : "2019-10-02T18:51:48Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : 743,
    "diffHunk" : "@@ -759,28 +994,45 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n         case PLF.PrimLit.SumCase.DATE =>\n           val d = Time.Date.fromDaysSinceEpoch(lfPrimLit.getDate)\n           d.fold(e => throw ParseError(\"error decoding date: \" + e), PLDate)\n-        case unknown =>\n-          throw ParseError(\"Unknown PrimLit: \" + unknown.toString)\n+        case PLF.PrimLit.SumCase.TEXT_INTERNED_ID =>\n+          PLText(getInternedString(lfPrimLit.getTextInternedId))\n+        case PLF.PrimLit.SumCase.DECIMAL_INTERNED_ID =>\n+          assertUntil(LV.Features.numeric, \"PrimLit.decimal\")\n+          Decimal\n+            .fromString(getInternedString(lfPrimLit.getDecimalInternedId))\n+            .flatMap(Numeric.fromBigDecimal(Decimal.scale, _))\n+            .fold(e => throw ParseError(\"error parsing decimal: \" + e), PLNumeric)\n+        case PLF.PrimLit.SumCase.NUMERIC_INTERNED_ID =>\n+          assertSince(LV.Features.numeric, \"PrimLit.numeric\")\n+          Numeric\n+            .fromString(getInternedString(lfPrimLit.getNumericInternedId))\n+            .fold(e => throw ParseError(\"error parsing numeric: \" + e), PLNumeric)\n+        case PLF.PrimLit.SumCase.PARTY_INTERNED_ID =>\n+          val p = Party\n+            .fromString(getInternedString(lfPrimLit.getPartyInternedId))\n+            .getOrElse(throw ParseError(s\"invalid party '${lfPrimLit.getParty}'\"))\n+          PLParty(p)\n+        case PLF.PrimLit.SumCase.SUM_NOT_SET =>\n+          throw ParseError(\"PrimLit.SUM_NOT_SET\")\n       }\n   }\n \n   private def versionIsOlderThan(minVersion: LV): Boolean =\n     LV.ordering.lt(languageVersion, minVersion)\n \n-  private def assertUntil(maxVersion: LV, description: String): Unit =\n+  private def assertUntil(maxVersion: LV, description: => String): Unit ="
  },
  {
    "id" : "b523d2ec-8271-4fa4-b768-adfb877ced4b",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "63ecca52-6daf-467d-aff5-204093903149",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "should we consider memoizing some of these? At least the ones that actually wrap the string in something concrete rather than just type alias it.",
        "createdAt" : "2019-10-03T16:59:53Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "35ce8a78-706f-4951-83df-786068d73733",
        "parentId" : "63ecca52-6daf-467d-aff5-204093903149",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I tried on spider model but only saw minor improvment.\r\nyou can tried yourself using https://github.com/digital-asset/daml/commit/58b9974d1364f2157ad3ed5af1fb4992a87bedc9.\r\n\r\nIf @hurryabit implement the sharing for expression, the memoization will be only an overhead.",
        "createdAt" : "2019-10-03T17:57:14Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : 165,
    "diffHunk" : "@@ -111,6 +140,53 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n     }\n \n     // -----------------------------------------------------------------------\n+    private[this] def getInternedString(id: Int) =\n+      internedStrings.lift(id).getOrElse {\n+        throw ParseError(s\"invalid internedString table index $id\")\n+      }\n+\n+    private[this] def getInternedPackageId(id: Int): PackageId = {\n+      assertSince(LV.Features.internedPackageId, \"interned PackageId\")\n+      toPackageId(getInternedString(id))\n+    }\n+\n+    private[this] def getInternedName(id: Int): Name = {\n+      assertSince(LV.Features.internedStrings, \"interned Name\")\n+      toName(getInternedString(id))\n+    }\n+\n+    private[this] def getInternedText(id: Int): PLText = {\n+      assertSince(LV.Features.internedStrings, \"interned Text\")\n+      PLText(getInternedString(id))\n+    }\n+\n+    private[this] def getInternedNumeric(id: Int): PrimLit = {\n+      assertSince(LV.Features.internedStrings, \"interned Numeric\")\n+      toNumericLiteral(getInternedString(id))\n+    }\n+\n+    private[this] def getInternedDecimal(id: Int): PLNumeric = {\n+      assertSince(LV.Features.internedStrings, \"interned Decimal\")\n+      toDecimalLiteral(getInternedString(id))\n+    }\n+\n+    private[this] def getInternedParty(id: Int): PLParty = {\n+      assertSince(LV.Features.internedStrings, \"interned Party\")\n+      toPartyLiteral(getInternedString(id))"
  },
  {
    "id" : "30ece409-257d-4709-a697-c99367a8d659",
    "prId" : 2608,
    "comments" : [
      {
        "id" : "19a238ce-e92a-456a-a277-5df1bf3f6203",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "apply to the argument.",
        "createdAt" : "2019-08-23T11:02:52Z",
        "updatedAt" : "2019-08-23T12:49:31Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "439057eb-d43d-48b0-a121-855622cad323",
        "parentId" : "19a238ce-e92a-456a-a277-5df1bf3f6203",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-08-23T11:28:07Z",
        "updatedAt" : "2019-08-23T12:49:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a4da0cbce61e6bf53fbe91dd80a1a3e0fe603f75",
    "line" : null,
    "diffHunk" : "@@ -280,12 +280,19 @@ private[archive] class DecodeV1(minor: LV.Minor) extends Decode.OfPackage[PLF.Pa\n             (typ, arg) => TApp(typ, decodeType(arg)))\n         case PLF.Type.SumCase.PRIM =>\n           val prim = lfType.getPrim\n-          val (tPrim, minVersion) = primTypeTable(prim.getPrim)\n-          assertSince(minVersion, prim.getPrim.getValueDescriptor.getFullName)\n-          (TBuiltin(tPrim) /: [Type] prim.getArgsList.asScala)((typ, arg) =>\n-            TApp(typ, decodeType(arg)))\n+          if (prim.getPrim == PLF.PrimType.DECIMAL) {\n+            // FixMe: https://github.com/digital-asset/daml/issues/2289\n+            //  enable the check once the compiler produces proper DAML-LF 1.dev\n+            // assertUntil(LV.Features.numeric, \"PLF.PrimType.DECIMAL\")\n+            TDecimal"
  },
  {
    "id" : "e214fc5f-b8b9-48b9-af97-d6dc073cb506",
    "prId" : 2489,
    "comments" : [
      {
        "id" : "82e24c21-0486-4587-bf4a-e127b9826f83",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Why have a \"named\" alias specifically for version `1.1` but not some others? The name `optionalVersion` also reads more like that the version is optional. Do you want to make the move to \"true\" feature flags later, or stick with language aliases in `Features`?",
        "createdAt" : "2019-08-12T13:42:17Z",
        "updatedAt" : "2019-08-13T07:18:46Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b59025e5-ad0a-4f19-a627-2bb14acd2771",
        "parentId" : "82e24c21-0486-4587-bf4a-e127b9826f83",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I created alias for all version. ",
        "createdAt" : "2019-08-12T14:56:35Z",
        "updatedAt" : "2019-08-13T07:18:46Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e2061bc90c74605120749998958bbf2829c86e61",
    "line" : null,
    "diffHunk" : "@@ -532,11 +531,11 @@ private[archive] class DecodeV1(minor: LanguageMinorVersion) extends Decode.OfPa\n           CPCons(name(cons.getVarHead), name(cons.getVarTail))\n \n         case PLF.CaseAlt.SumCase.OPTIONAL_NONE =>\n-          assertSince(\"1\", \"CaseAlt.OptionalNone\")\n+          assertSince(optionalVersion, \"CaseAlt.OptionalNone\")"
  },
  {
    "id" : "bb29d7e2-b295-474c-ba4f-e109bf645bec",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "4750a252-347b-4678-ae34-2a82dc7da820",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n          throw ParseError(\"nat type not supported\")\r\n```",
        "createdAt" : "2019-07-29T18:26:50Z",
        "updatedAt" : "2019-07-29T18:42:15Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 16,
    "diffHunk" : "@@ -283,6 +286,9 @@ private[archive] class DecodeV1(minor: LanguageMinorVersion) extends Decode.OfPa\n           TTuple(\n             ImmArray(fields.map(ft => name(ft.getField) -> decodeType(ft.getType)))\n           )\n+        case PLF.Type.SumCase.NAT =>\n+          // FixMe: https://github.com/digital-asset/daml/issues/2289\n+          throw new Error(\"nat type not supported\")"
  },
  {
    "id" : "f968ae99-3326-48dd-81a7-68c0fbab2c0e",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "e5308ac3-ccb7-4558-9aee-a7336714faad",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n          throw ParseError(\"nat kind not supported\")\r\n```",
        "createdAt" : "2019-07-29T18:27:20Z",
        "updatedAt" : "2019-07-29T18:42:16Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : 6,
    "diffHunk" : "@@ -244,6 +244,9 @@ private[archive] class DecodeV1(minor: LanguageMinorVersion) extends Decode.OfPa\n           val params = kArrow.getParamsList.asScala\n           assertNonEmpty(params, \"params\")\n           (params :\\ decodeKind(kArrow.getResult))((param, kind) => KArrow(decodeKind(param), kind))\n+        case PLF.Kind.SumCase.NAT =>\n+          // FixMe: https://github.com/digital-asset/daml/issues/2289\n+          throw new Error(\"nat kind not supported\")"
  },
  {
    "id" : "df072836-80f7-4543-8237-f76dbd9fbd26",
    "prId" : 1937,
    "comments" : [
      {
        "id" : "493b8074-0fd6-4beb-a9c2-573c0655f6b7",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "```suggestion\r\n  private[this] val internedIdsVersion: LanguageMinorVersion = \"6\"\r\n```",
        "createdAt" : "2019-07-11T15:05:26Z",
        "updatedAt" : "2019-07-12T17:22:08Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7a9443ebd3345db86ae245d80d9ee2d9a5d9ab47",
    "line" : null,
    "diffHunk" : "@@ -705,7 +705,8 @@ private[archive] class DecodeV1(minor: LanguageMinorVersion) extends Decode.OfPa\n private[lf] object DecodeV1 {\n   import LanguageMinorVersion.Implicits._\n \n-  private[archive] val internedIdsVersion: LanguageMinorVersion = \"dev\"\n+  private[archive] val enumVersion: LanguageMinorVersion = \"6\"\n+  private[archive] val internedIdsVersion: LanguageMinorVersion = \"6\""
  },
  {
    "id" : "5e183f11-3229-4373-9582-1bc869df7264",
    "prId" : 1937,
    "comments" : [
      {
        "id" : "05adf4a4-1461-4f88-bcb0-b3ac7a288100",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "To accompany the `EncodeV1` suggestion.\r\n\r\n```suggestion\r\n  private[lf] val enumVersion: LanguageMinorVersion = \"6\"\r\n```",
        "createdAt" : "2019-07-11T15:06:01Z",
        "updatedAt" : "2019-07-12T17:22:08Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7a9443ebd3345db86ae245d80d9ee2d9a5d9ab47",
    "line" : 32,
    "diffHunk" : "@@ -705,7 +705,8 @@ private[archive] class DecodeV1(minor: LanguageMinorVersion) extends Decode.OfPa\n private[lf] object DecodeV1 {\n   import LanguageMinorVersion.Implicits._\n \n-  private[archive] val internedIdsVersion: LanguageMinorVersion = \"dev\"\n+  private[archive] val enumVersion: LanguageMinorVersion = \"6\""
  },
  {
    "id" : "f05ab1b2-716b-41cf-aad5-61684692fa08",
    "prId" : 1614,
    "comments" : [
      {
        "id" : "ba409169-01a2-4fdf-bffd-5cad9af81510",
        "parentId" : null,
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "We cannot really represent anything bigger than `In32`, so why do we define it as `Int64` in protobuf message?\r\nSee: https://github.com/digital-asset/daml/blob/8e144420c4bb23d7bdd01e22aed22f9b7136eb99/daml-lf/data/src/main/scala/com/digitalasset/daml/lf/data/ImmArray.scala#L64",
        "createdAt" : "2019-06-20T14:07:54Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6bc563ca-4eb2-4df7-8d8f-0407e8e05d81",
        "parentId" : "ba409169-01a2-4fdf-bffd-5cad9af81510",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "That's specific to the restrictions of the particular collections library this particular implementation happens to be using; nothing to do with the context of the LF language definition.",
        "createdAt" : "2019-06-20T14:21:19Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : 99,
    "diffHunk" : "@@ -270,17 +283,26 @@ private[lf] class DecodeV1(minor: LanguageMinorVersion) extends Decode.OfPackage\n     private[this] def decodeModuleRef(lfRef: PLF.ModuleRef): (PackageId, ModuleName) = {\n       val modName = eitherToParseError(\n         ModuleName.fromSegments(lfRef.getModuleName.getSegmentsList.asScala))\n-      lfRef.getPackageRef.getSumCase match {\n-        case PLF.PackageRef.SumCase.SELF =>\n-          (this.packageId, modName)\n-        case PLF.PackageRef.SumCase.PACKAGE_ID =>\n-          val pkgId = PackageId\n-            .fromString(lfRef.getPackageRef.getPackageId)\n-            .getOrElse(throw ParseError(s\"invalid packageId '${lfRef.getPackageRef.getPackageId}'\"))\n-          (pkgId, modName)\n-        case PLF.PackageRef.SumCase.SUM_NOT_SET =>\n+      import PLF.PackageRef.{SumCase => SC}\n+      val pkgId = lfRef.getPackageRef.getSumCase match {\n+        case SC.SELF =>\n+          this.packageId\n+        case SC.PACKAGE_ID =>\n+          val rawPid = lfRef.getPackageRef.getPackageId\n+          PackageId\n+            .fromString(rawPid)\n+            .getOrElse(throw ParseError(s\"invalid packageId '$rawPid'\"))\n+        case SC.INTERNED_ID =>\n+          assertSince(internedIdsVersion, \"interned package ID\")\n+          val iidl = lfRef.getPackageRef.getInternedId\n+          def outOfRange = ParseError(s\"invalid package ID table index $iidl\")\n+          val iid = iidl.toInt"
  }
]