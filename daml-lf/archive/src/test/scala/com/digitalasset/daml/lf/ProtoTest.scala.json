[
  {
    "id" : "4f2385c3-f2e3-4b5a-b09e-ad1ea672c542",
    "prId" : 3142,
    "comments" : [
      {
        "id" : "011b1533-a62a-4b5b-9563-9835953160ce",
        "parentId" : null,
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "```suggestion\r\n    // Do not change this test.\r\n```",
        "createdAt" : "2019-10-15T09:45:40Z",
        "updatedAt" : "2019-10-15T18:02:37Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6a094129d2e19bb8060f21f6601947eaab12d12e",
    "line" : 55,
    "diffHunk" : "@@ -0,0 +1,99 @@\n+// Copyright (c) 2019 The DAML Authors. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.digitalasset.daml.lf\n+\n+import java.nio.file.{Files, Path, Paths}\n+import java.util.zip.ZipFile\n+\n+import com.digitalasset.daml.bazeltools.BazelRunfiles._\n+import com.digitalasset.{daml_lf_1_6, daml_lf_dev}\n+import com.google.protobuf.CodedInputStream\n+import org.scalatest.prop.TableDrivenPropertyChecks\n+import org.scalatest.{Assertion, Matchers, WordSpec}\n+\n+import scala.collection.JavaConverters._\n+\n+class ProtoTest extends WordSpec with Matchers with TableDrivenPropertyChecks {\n+\n+  private val darFile = resource(rlocation(\"daml-lf/archive/DarReaderTest.dar\"))\n+\n+  private def resource(path: String): Path = {\n+    val f = Paths.get(path)\n+    require(Files.exists(f), s\"File does not exist: $f\")\n+    f\n+  }\n+\n+  \"daml_lf_dev.DamlLf\" should {\n+    \"read dalf\" in {\n+\n+      decodeTestWrapper(\n+        darFile, { cis =>\n+          val archive = daml_lf_dev.DamlLf.Archive.parseFrom(cis)\n+          val payload = daml_lf_dev.DamlLf.ArchivePayload.parseFrom(archive.getPayload)\n+          payload.hasDamlLf1 shouldBe true\n+        }\n+      )\n+\n+    }\n+  }\n+\n+  \"daml_lf_1_6.DamlLf\" should {\n+    \"read dalf\" in {\n+      decodeTestWrapper(\n+        darFile, { cis =>\n+          val archive = daml_lf_1_6.DamlLf.Archive.parseFrom(cis)\n+          val payload = daml_lf_1_6.DamlLf.ArchivePayload.parseFrom(archive.getPayload)\n+          payload.hasDamlLf1 shouldBe true\n+        }\n+      )\n+    }\n+  }\n+\n+  \"daml_lf_1_6 file\" should {\n+\n+    // Do not change thiss test."
  }
]