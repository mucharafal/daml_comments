[
  {
    "id" : "440ce0b6-ffd2-41ac-af0f-d42c47611df1",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "b41830f0-eaf6-41d3-a0ab-d5915f5c19bb",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Unfinished sentence.",
        "createdAt" : "2020-07-31T10:53:50Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a1407809-5096-4c0f-abb9-b1271d005e26",
        "parentId" : "b41830f0-eaf6-41d3-a0ab-d5915f5c19bb",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6924/commits/de9c109bc500add32d4c6664e0cbf3cb2b7816d7",
        "createdAt" : "2020-07-31T11:59:40Z",
        "updatedAt" : "2020-07-31T11:59:40Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -11,16 +11,74 @@ import scala.collection.JavaConverters.mapAsJavaMapConverter\n \n object LoggingContext {\n \n+  def newLoggingContext[A](kvs: Map[String, String])(f: LoggingContext => A): A =\n+    f(new LoggingContext(kvs))\n+\n   def newLoggingContext[A](f: LoggingContext => A): A =\n-    f(new LoggingContext(Map.empty))\n+    newLoggingContext(Map.empty[String, String])(f)\n \n   def newLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n-      f: LoggingContext => A): A =\n+      f: LoggingContext => A,\n+  ): A =\n     newLoggingContext(withEnrichedLoggingContext(kv, kvs: _*)(f)(_))\n \n+  /**\n+    * ## Principles to follow when enriching the logging context\n+    *\n+    * ### Don't add values coming from a scope outside of the current method\n+    *\n+    * If a method receives a value as a parameter, it should trust that,\n+    * if it was relevant, the caller already added this value to the context.\n+    * Add values to the context as upstream as possible in the call chain.\n+    * This ensures to not add duplicates, possibly using slightly different\n+    * names to track the same value. The context was implemented to ensure\n+    * that values did not have to be passed down the entire call stack to\n+    * be logged at relevant points.\n+    *\n+    * ### Don't dump string representations of complex objects\n+    *\n+    * The purpose of the context is to be consumed by structured logging\n+    * frameworks. Dumping the string representation of an object, like a\n+    * Scala case class instance, means embedding some form of string\n+    * formatting in another (likely to be JSON). This can be difficult\n+    * to manage and parse, so stick to simple values (strings, numbers,\n+    * dates, etc.) and be deliberate in adding"
  },
  {
    "id" : "f2411435-386f-4b5e-9f07-fdea233e02b0",
    "prId" : 6924,
    "comments" : [
      {
        "id" : "a8ad5c72-94b1-4a89-9f0f-4608af6f37bd",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Unfinished sentence.",
        "createdAt" : "2020-07-31T10:54:01Z",
        "updatedAt" : "2020-07-31T11:58:54Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3d0ae585-29b8-409d-9f2a-97b04e1a4fa7",
        "parentId" : "a8ad5c72-94b1-4a89-9f0f-4608af6f37bd",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/6924/commits/865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
        "createdAt" : "2020-07-31T11:59:21Z",
        "updatedAt" : "2020-07-31T11:59:21Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "865574590cb0a7ba8a61b4b5c4f66bdee74d6153",
    "line" : null,
    "diffHunk" : "@@ -11,16 +11,74 @@ import scala.collection.JavaConverters.mapAsJavaMapConverter\n \n object LoggingContext {\n \n+  def newLoggingContext[A](kvs: Map[String, String])(f: LoggingContext => A): A =\n+    f(new LoggingContext(kvs))\n+\n   def newLoggingContext[A](f: LoggingContext => A): A =\n-    f(new LoggingContext(Map.empty))\n+    newLoggingContext(Map.empty[String, String])(f)\n \n   def newLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n-      f: LoggingContext => A): A =\n+      f: LoggingContext => A,\n+  ): A =\n     newLoggingContext(withEnrichedLoggingContext(kv, kvs: _*)(f)(_))\n \n+  /**\n+    * ## Principles to follow when enriching the logging context\n+    *\n+    * ### Don't add values coming from a scope outside of the current method\n+    *\n+    * If a method receives a value as a parameter, it should trust that,\n+    * if it was relevant, the caller already added this value to the context.\n+    * Add values to the context as upstream as possible in the call chain.\n+    * This ensures to not add duplicates, possibly using slightly different\n+    * names to track the same value. The context was implemented to ensure\n+    * that values did not have to be passed down the entire call stack to\n+    * be logged at relevant points.\n+    *\n+    * ### Don't dump string representations of complex objects\n+    *\n+    * The purpose of the context is to be consumed by structured logging\n+    * frameworks. Dumping the string representation of an object, like a\n+    * Scala case class instance, means embedding some form of string\n+    * formatting in another (likely to be JSON). This can be difficult\n+    * to manage and parse, so stick to simple values (strings, numbers,\n+    * dates, etc.) and be deliberate in adding\n+    *\n+    */\n+  def withEnrichedLoggingContext[A](kvs: Map[String, String])(f: LoggingContext => A)(\n+      implicit loggingContext: LoggingContext,\n+  ): A =\n+    f(loggingContext ++ kvs)\n+\n+  /**\n+    * ## Principles to follow when enriching the logging context\n+    *\n+    * ### Don't add values coming from a scope outside of the current method\n+    *\n+    * If a method receives a value as a parameter, it should trust that,\n+    * if it was relevant, the caller already added this value to the context.\n+    * Add values to the context as upstream as possible in the call chain.\n+    * This ensures to not add duplicates, possibly using slightly different\n+    * names to track the same value. The context was implemented to ensure\n+    * that values did not have to be passed down the entire call stack to\n+    * be logged at relevant points.\n+    *\n+    * ### Don't dump string representations of complex objects\n+    *\n+    * The purpose of the context is to be consumed by structured logging\n+    * frameworks. Dumping the string representation of an object, like a\n+    * Scala case class instance, means embedding some form of string\n+    * formatting in another (likely to be JSON). This can be difficult\n+    * to manage and parse, so stick to simple values (strings, numbers,\n+    * dates, etc.) and be deliberate in adding"
  },
  {
    "id" : "fa0255ea-5d96-487c-aed7-b97dd8c8d03e",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "7501c60f-15f9-42b3-971c-ed4ffdb507c8",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Do you need to put this around the whole class? Can you not restrict the scope of this and possibly annotate the methods and the calls explicitly to remove this?",
        "createdAt" : "2020-01-22T13:04:09Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : null,
    "diffHunk" : "@@ -9,22 +9,23 @@ import org.slf4j.Marker\n \n import scala.collection.JavaConverters.mapAsJavaMapConverter\n \n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n object LoggingContext {\n \n   def newLoggingContext[A](f: LoggingContext => A): A =\n     f(new LoggingContext(Map.empty))\n \n-  def newLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n-      f: LoggingContext => A): A =\n+  def newLoggingContext[A](kv: (String, Any), kvs: (String, Any)*)(f: LoggingContext => A): A =\n     f(new LoggingContext((kv +: kvs).toMap))\n \n-  def withEnrichedLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n-      f: LoggingContext => A)(implicit logCtx: LoggingContext): A =\n+  def withEnrichedLoggingContext[A](kv: (String, Any), kvs: (String, Any)*)(f: LoggingContext => A)(\n+      implicit logCtx: LoggingContext): A =\n     f((logCtx + kv) ++ kvs)\n \n }\n \n-final class LoggingContext private (ctxMap: Map[String, String]) {\n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))"
  },
  {
    "id" : "b4dc8482-c729-441a-ac33-ab972e05828d",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "702c1a20-ec70-418d-892d-8e2daa473e77",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "This means that the key can be any arbitrarily complex object, which I would recommend not doing without a good plan. I'm ok with the private `ctxMap` to have keys of type `Any` but please only add publicly-facing methods with specific signatures based on need.",
        "createdAt" : "2020-01-22T13:09:02Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : null,
    "diffHunk" : "@@ -9,22 +9,23 @@ import org.slf4j.Marker\n \n import scala.collection.JavaConverters.mapAsJavaMapConverter\n \n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))\n object LoggingContext {\n \n   def newLoggingContext[A](f: LoggingContext => A): A =\n     f(new LoggingContext(Map.empty))\n \n-  def newLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n-      f: LoggingContext => A): A =\n+  def newLoggingContext[A](kv: (String, Any), kvs: (String, Any)*)(f: LoggingContext => A): A =\n     f(new LoggingContext((kv +: kvs).toMap))\n \n-  def withEnrichedLoggingContext[A](kv: (String, String), kvs: (String, String)*)(\n-      f: LoggingContext => A)(implicit logCtx: LoggingContext): A =\n+  def withEnrichedLoggingContext[A](kv: (String, Any), kvs: (String, Any)*)(f: LoggingContext => A)("
  },
  {
    "id" : "559f7213-ba39-4854-945e-280443e7abba",
    "prId" : 4155,
    "comments" : [
      {
        "id" : "184f512f-463f-4266-bd5c-81be8de5e159",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "It would be great if we could restrict the scope of this warning suppression (and possibly explicitly annotate methods and calls explicitly to make it go away completely).",
        "createdAt" : "2020-01-22T13:09:45Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e973d7b5-5402-4cf8-bae0-bd78f188bd71",
        "parentId" : "184f512f-463f-4266-bd5c-81be8de5e159",
        "author" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "body" : "Reverted to just using `String`; we'll revisit this at some point, I'm sure.",
        "createdAt" : "2020-01-22T14:05:31Z",
        "updatedAt" : "2020-01-22T15:12:07Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/47582?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6d414ebd72f813c239463a48e245fc2e9fd9c0c8",
    "line" : null,
    "diffHunk" : "@@ -9,22 +9,23 @@ import org.slf4j.Marker\n \n import scala.collection.JavaConverters.mapAsJavaMapConverter\n \n+@SuppressWarnings(Array(\"org.wartremover.warts.Any\"))"
  }
]