[
  {
    "id" : "89e9f330-68a4-4847-9f86-8d875879d7a1",
    "prId" : 7325,
    "comments" : [
      {
        "id" : "9507b4db-7a78-49c1-be96-f5f57981e49e",
        "parentId" : null,
        "author" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "body" : "Might be better to combine this change with implementing two of your own test result statistics classes. I don't think you are dealing with a scheduler (single request => two async responses), nor with the FIX protocol.\r\nI understand having an example of how to implement the combined reader in the first version is worthwhile but better done using your own use case.",
        "createdAt" : "2020-09-07T00:43:13Z",
        "updatedAt" : "2020-09-11T13:32:14Z",
        "lastEditedBy" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8c6bfc2c-8aa0-4e60-904a-b04af75ece84",
        "parentId" : "9507b4db-7a78-49c1-be96-f5f57981e49e",
        "author" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "body" : "Actually I don't need to split stats. I just print the unfiltered stats from the simulation log. And you are correct I don't need FixTradeStats and SchedulerStats. Thanks @jberthold-da!",
        "createdAt" : "2020-09-09T20:34:39Z",
        "updatedAt" : "2020-09-11T13:32:14Z",
        "lastEditedBy" : {
          "login" : "leo-da",
          "name" : "Leonid Shlyapnikov",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/27688859?u=375a6e2bd1079fec6f7d6d582ac05b5628218384&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4c9440e652dd2c98b104ede6120ec76fc9f35173",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,67 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.gatling\n+package stats\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets\n+import java.nio.file.Files\n+\n+import com.daml.gatling.stats.ConvertStats.StatsKey\n+import com.daml.scalautil.Statement.discard\n+import scalaz.\\/\n+\n+/*\n+ * Provides the ability to parse from Gatling's JSON format, given a set of relevant stats\n+ * to look for and a way of handling them.\n+ */\n+trait ConvertStats[StatsT] {\n+  def relevantStats: List[StatsKey]\n+\n+  def fromSimulationLog(simulation: SimulationLog): String \\/ StatsT\n+\n+  def parse(log: SimulationLog): String \\/ StatsT = fromSimulationLog(log)\n+}\n+\n+object ConvertStats {\n+  type StatsKey = String\n+  def apply[S](implicit R: ConvertStats[S]): ConvertStats[S] = R\n+}\n+\n+object SimulationLogConvertSyntax extends SimulationLogConvertSyntax\n+\n+trait SimulationLogConvertSyntax {\n+  implicit class SimulationLogConvertOps(val log: SimulationLog) {\n+    def parseStats[S: ConvertStats] = ConvertStats[S].parse(log)\n+    def parseFormattableStats[S](implicit S: ConvertWithFallback[Formattable, S]) = S.convert(log)\n+    def readAnyStats: String \\/ Formattable =\n+      convertFormattableStats[CombinedStats || FixTradeStats || SchedulerStats]"
  }
]