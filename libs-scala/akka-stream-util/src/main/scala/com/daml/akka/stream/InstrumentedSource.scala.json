[
  {
    "id" : "2d65841c-acfe-44cf-85be-f4d668bfdfef",
    "prId" : 7576,
    "comments" : [
      {
        "id" : "2e7f292d-3e3d-4c3a-aa36-726d26d85532",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Personally, I don't have a problem with wrapping the queue. Metrics are only polled every 10 seconds by default anyway; we don't expect them to be up-to-date at any given instant.",
        "createdAt" : "2020-10-06T08:08:08Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "95a010da-7a8d-4528-b7f8-dc4f52caf96b",
        "parentId" : "2e7f292d-3e3d-4c3a-aa36-726d26d85532",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Yep I agree this is \"good enough\" :+1: ",
        "createdAt" : "2020-10-06T12:22:40Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "76f067753b482633f0992ac86992896c2f75fcda",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.akka.stream\n+\n+import akka.Done\n+import akka.stream.scaladsl.{Source, SourceQueueWithComplete}\n+import akka.stream.{Materializer, OverflowStrategy, QueueOfferResult}\n+import com.codahale.metrics.Counter\n+import com.daml.dec.DirectExecutionContext\n+\n+import scala.concurrent.Future\n+\n+object InstrumentedSource {\n+\n+  final class QueueWithComplete[T](\n+      delegate: SourceQueueWithComplete[T],\n+      saturation: Counter,\n+  ) extends SourceQueueWithComplete[T] {\n+\n+    override def complete(): Unit = delegate.complete()\n+\n+    override def fail(ex: Throwable): Unit = delegate.fail(ex)\n+\n+    override def watchCompletion(): Future[Done] = delegate.watchCompletion()\n+\n+    override def offer(elem: T): Future[QueueOfferResult] = {\n+      val result = delegate.offer(elem)\n+      // Use the `DirectExecutionContext` to ensure that the\n+      // counter is updated as closely as possible to the\n+      // update of the queue, so to offer the most consistent\n+      // reading possible via the counter\n+      result.foreach {\n+        case QueueOfferResult.Enqueued => saturation.inc()\n+        case _ => // do nothing\n+      }(DirectExecutionContext)\n+      result\n+    }\n+  }\n+\n+  /**\n+    * Returns a `Source` that can be fed via the materialized queue.\n+    *\n+    * The saturation counter can at most be eventually consistent due to\n+    * the counter increment and decrement operation being scheduled separately\n+    * and possibly not in the same order as the actual enqueuing and dequeueing\n+    * of items.\n+    *\n+    * For this reason, you may also read values on the saturation counter which\n+    * are negative or exceed `bufferSize`.\n+    *\n+    * Note that the fact that the count is decremented in a second operator means\n+    * that its buffering will likely skew the measurements to be greater than the\n+    * actual value, rather than the other way around.\n+    *\n+    * FIXME The clean (but involved) thing to do, would be to re-implement\n+    * FIXME `Source.queue` from scratch, adding the possibility of\n+    * FIXME instrumenting it."
  },
  {
    "id" : "35937de4-da92-4f1e-9f8b-7b68ea916347",
    "prId" : 7576,
    "comments" : [
      {
        "id" : "67e27c78-2f74-4f4e-8edd-d3f7eb8bf6bd",
        "parentId" : null,
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "This isn't saturation in the sense I understand it (% out of total capacity), but rather the number of elements queued.",
        "createdAt" : "2020-10-06T13:09:04Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "af8dd622-ba5c-4619-b0d8-5092873e4216",
        "parentId" : "67e27c78-2f74-4f4e-8edd-d3f7eb8bf6bd",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I've renamed the counters to be \"capacity\" (was size) and \"length\" (was saturation).",
        "createdAt" : "2020-10-06T15:47:54Z",
        "updatedAt" : "2020-10-07T11:04:05Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "76f067753b482633f0992ac86992896c2f75fcda",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package com.daml.akka.stream\n+\n+import akka.Done\n+import akka.stream.scaladsl.{Source, SourceQueueWithComplete}\n+import akka.stream.{Materializer, OverflowStrategy, QueueOfferResult}\n+import com.codahale.metrics.Counter\n+import com.daml.dec.DirectExecutionContext\n+\n+import scala.concurrent.Future\n+\n+object InstrumentedSource {\n+\n+  final class QueueWithComplete[T](\n+      delegate: SourceQueueWithComplete[T],\n+      saturation: Counter,"
  }
]