[
  {
    "id" : "fe0b7f93-eb6c-41dc-85b6-642491dae837",
    "prId" : 7051,
    "comments" : [
      {
        "id" : "efc196d1-cc46-4233-aceb-fcb997aee278",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good catch. This was dangerous.",
        "createdAt" : "2020-08-06T17:55:07Z",
        "updatedAt" : "2020-08-06T18:05:47Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d3af0a63186840ccb4158b6bec2f780692fcc17",
    "line" : 5,
    "diffHunk" : "@@ -41,7 +41,7 @@ trait ResourceOwner[+A] {\n   }\n \n   /** @see [[Resource.withFilter()]] */\n-  def withFilter(p: A => Boolean)(implicit executionContext: ExecutionContext): ResourceOwner[A] =\n+  def withFilter(p: A => Boolean): ResourceOwner[A] ="
  },
  {
    "id" : "fd5e62f2-2ada-4dd7-ac4f-e43685a50015",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "d4873ee8-b82a-434e-a925-ed7d6554f428",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * Acquire the [[Resource]]'s value, use it asynchronously, and release it afterwards.\r\n```",
        "createdAt" : "2020-02-21T12:40:15Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -12,40 +12,65 @@ import scala.concurrent.{ExecutionContext, Future}\n import scala.language.higherKinds\n import scala.util.{Failure, Success, Try}\n \n+/**\n+  * A [[ResourceOwner]] of type [[A]] is can acquire a [[Resource]] of the same type and its operations are applied to\n+  * the [[Resource]] after it has been acquired.\n+  *\n+  * @tparam A The [[Resource]] value type.\n+  */\n @FunctionalInterface\n trait ResourceOwner[+A] {\n   self =>\n \n+  /**\n+    * Acquires the [[Resource]].\n+    *\n+    * @param executionContext The asynchronous task execution engine.\n+    * @return The acquired [[Resource]].\n+    */\n   def acquire()(implicit executionContext: ExecutionContext): Resource[A]\n \n+  /** @see [[Resource.map()]] */\n   def map[B](f: A => B): ResourceOwner[B] = new ResourceOwner[B] {\n     override def acquire()(implicit executionContext: ExecutionContext): Resource[B] =\n       self.acquire().map(f)\n   }\n \n+  /** @see [[Resource.flatMap()]] */\n   def flatMap[B](f: A => ResourceOwner[B]): ResourceOwner[B] = new ResourceOwner[B] {\n     override def acquire()(implicit executionContext: ExecutionContext): Resource[B] =\n       self.acquire().flatMap(value => f(value).acquire())\n   }\n \n+  /** @see [[Resource.withFilter()]] */\n   def withFilter(p: A => Boolean)(implicit executionContext: ExecutionContext): ResourceOwner[A] =\n     new ResourceOwner[A] {\n       override def acquire()(implicit executionContext: ExecutionContext): Resource[A] =\n         self.acquire().withFilter(p)\n     }\n \n+  /**\n+    * Uses the acquired [[Resource]]'s value asynchronously."
  },
  {
    "id" : "34c32b11-61d9-4482-8886-d16771c80554",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "ccbc2332-34fb-4609-b44e-77ad281b812e",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n      .transformWith { // Release the resource whether the computation succeeds or not\r\n```",
        "createdAt" : "2020-02-21T12:40:38Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -12,40 +12,65 @@ import scala.concurrent.{ExecutionContext, Future}\n import scala.language.higherKinds\n import scala.util.{Failure, Success, Try}\n \n+/**\n+  * A [[ResourceOwner]] of type [[A]] is can acquire a [[Resource]] of the same type and its operations are applied to\n+  * the [[Resource]] after it has been acquired.\n+  *\n+  * @tparam A The [[Resource]] value type.\n+  */\n @FunctionalInterface\n trait ResourceOwner[+A] {\n   self =>\n \n+  /**\n+    * Acquires the [[Resource]].\n+    *\n+    * @param executionContext The asynchronous task execution engine.\n+    * @return The acquired [[Resource]].\n+    */\n   def acquire()(implicit executionContext: ExecutionContext): Resource[A]\n \n+  /** @see [[Resource.map()]] */\n   def map[B](f: A => B): ResourceOwner[B] = new ResourceOwner[B] {\n     override def acquire()(implicit executionContext: ExecutionContext): Resource[B] =\n       self.acquire().map(f)\n   }\n \n+  /** @see [[Resource.flatMap()]] */\n   def flatMap[B](f: A => ResourceOwner[B]): ResourceOwner[B] = new ResourceOwner[B] {\n     override def acquire()(implicit executionContext: ExecutionContext): Resource[B] =\n       self.acquire().flatMap(value => f(value).acquire())\n   }\n \n+  /** @see [[Resource.withFilter()]] */\n   def withFilter(p: A => Boolean)(implicit executionContext: ExecutionContext): ResourceOwner[A] =\n     new ResourceOwner[A] {\n       override def acquire()(implicit executionContext: ExecutionContext): Resource[A] =\n         self.acquire().withFilter(p)\n     }\n \n+  /**\n+    * Uses the acquired [[Resource]]'s value asynchronously.\n+    *\n+    * @param behavior The aynchronous computation on the value.\n+    * @param executionContext The asynchronous task execution engine.\n+    * @tparam T The asynchronous computation's value type.\n+    * @return The asynchronous computation's [[Future]].\n+    */\n   def use[T](behavior: A => Future[T])(implicit executionContext: ExecutionContext): Future[T] = {\n     val resource = acquire()\n     resource.asFuture\n       .flatMap(behavior)\n-      .transformWith {\n+      .transformWith { // Release the resource no matter if the computation succeeds or not"
  },
  {
    "id" : "dbfde3e5-ca5f-4cd6-a733-2c06b0a3b8ab",
    "prId" : 4398,
    "comments" : [
      {
        "id" : "91a80335-caca-4789-a645-e675447fd702",
        "parentId" : null,
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Why do you need this? `ResourceOwner` should be covariant now.",
        "createdAt" : "2020-02-05T09:42:59Z",
        "updatedAt" : "2020-02-05T10:28:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dba4b20f-5459-405d-84c6-2f9d00ee0029",
        "parentId" : "91a80335-caca-4789-a645-e675447fd702",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "I see. I would suggest you leave this as is and either:\r\n- hint the compiler of the type you want to fold to (`.fold[ResourceOwner[Config[Extra]]]`), or\r\n- use `map` followed by `getOrElse`\r\n\r\nIn the first case you would end up with\r\n```scala\r\n  def owner[Extra](\r\n      name: String,\r\n      extraOptions: OptionParser[Config[Extra]] => Unit,\r\n      defaultExtra: Extra,\r\n      args: Seq[String],\r\n  ): ResourceOwner[Config[Extra]] =\r\n    parse(name, extraOptions, defaultExtra, args)\r\n      .fold[ResourceOwner[Config[Extra]]](ResourceOwner.failed(new Config.ConfigParseException))(\r\n        ResourceOwner.successful)\r\n```\r\nand in the second with\r\n```scala\r\n  def owner[Extra](\r\n      name: String,\r\n      extraOptions: OptionParser[Config[Extra]] => Unit,\r\n      defaultExtra: Extra,\r\n      args: Seq[String],\r\n  ): ResourceOwner[Config[Extra]] =\r\n    parse(name, extraOptions, defaultExtra, args)\r\n      .map(ResourceOwner.successful)\r\n      .getOrElse(ResourceOwner.failed(new Config.ConfigParseException))\r\n```",
        "createdAt" : "2020-02-05T09:51:33Z",
        "updatedAt" : "2020-02-05T10:28:24Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "54313985-76c0-4524-bf78-2d55cdc6e3e9",
        "parentId" : "91a80335-caca-4789-a645-e675447fd702",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Yeah, I was not too happy with this but I think you're right. I'll revert that change.",
        "createdAt" : "2020-02-05T10:21:28Z",
        "updatedAt" : "2020-02-05T10:28:24Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c99d41e9-5fd7-4e7d-8bee-34596a96ea68",
        "parentId" : "91a80335-caca-4789-a645-e675447fd702",
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-02-05T10:28:29Z",
        "updatedAt" : "2020-02-05T10:28:29Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "57bf2f6c0dcd5b781aa59f35804fb4432366e656",
    "line" : null,
    "diffHunk" : "@@ -48,13 +48,13 @@ trait ResourceOwner[+A] {\n \n object ResourceOwner {\n   def successful[T](value: T): ResourceOwner[T] =\n-    new FutureResourceOwner[T](() => Future.successful(value))\n+    new FutureResourceOwner(() => Future.successful(value))\n \n-  def failed(throwable: Throwable): ResourceOwner[Nothing] =\n-    new FutureResourceOwner[Nothing](() => Future.failed(throwable))\n+  def failed[T](throwable: Throwable): ResourceOwner[T] ="
  },
  {
    "id" : "345ea0ef-f7c7-4848-a02f-991c179ff4e8",
    "prId" : 4382,
    "comments" : [
      {
        "id" : "f840117b-fd87-4892-9dcc-52fe86179a99",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I'm really glad you figured out how to make this work.",
        "createdAt" : "2020-02-04T15:57:50Z",
        "updatedAt" : "2020-02-04T16:01:08Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "107e162c8d59dbb6d113a47cd9e9b597f8b760d2",
    "line" : 5,
    "diffHunk" : "@@ -13,7 +13,7 @@ import scala.language.higherKinds\n import scala.util.{Failure, Success, Try}\n \n @FunctionalInterface\n-trait ResourceOwner[A] {\n+trait ResourceOwner[+A] {"
  }
]