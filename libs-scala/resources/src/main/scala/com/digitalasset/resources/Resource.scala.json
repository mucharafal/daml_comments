[
  {
    "id" : "1e6337ae-6664-4cf9-b203-a7ee7130f4be",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "40ab76a4-a185-4a33-a2c9-f9118dd13f23",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * Just like [[Future]]s, an attempted [[Resource]] computation can be transformed.\r\n```",
        "createdAt" : "2020-02-21T12:30:27Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -43,12 +67,18 @@ trait Resource[+A] {\n     Resource.nest(future)(_ => Future.successful(()), release _)\n   }\n \n+  /**\n+    * A nested resource can be flattened.\n+    */\n   def flatten[B](\n       implicit nestedEvidence: A <:< Resource[B],\n       executionContext: ExecutionContext,\n   ): Resource[B] =\n     flatMap(identity[A])\n \n+  /**\n+    * Just like [[Future]]s, an attempted [[Resource]] computation can chained to a [[Resource]]."
  },
  {
    "id" : "481cc888-a251-489b-9e91-9bd5ad48f7de",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "a662672e-78b2-477e-a435-74f7fdbed9a8",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n          release().flatMap(_ => Future.failed(throwable)) // Release everything on failure\r\n```",
        "createdAt" : "2020-02-21T12:30:59Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -58,33 +88,40 @@ trait Resource[+A] {\n         release _,\n       )\n       .flatten\n-\n }\n \n object Resource {\n   import scala.language.higherKinds\n \n+  /**\n+    * Nests release operation for a [[Resource]]'s future.\n+    */\n   private def nest[T](future: Future[T])(\n       releaseResource: T => Future[Unit],\n       releaseSubResources: () => Future[Unit],\n   )(implicit executionContext: ExecutionContext): Resource[T] =\n     new Resource[T] {\n-      private val released: AtomicBoolean = new AtomicBoolean(false)\n-      private val releasePromise: Promise[Unit] = Promise()\n \n       final lazy val asFuture: Future[T] = future.transformWith {\n         case Success(value) => Future.successful(value)\n-        case Failure(throwable) => release().flatMap(_ => Future.failed(throwable))\n+        case Failure(throwable) =>\n+          release().flatMap(_ => Future.failed(throwable)) // Release all if failing"
  },
  {
    "id" : "0621659a-d3c0-4738-b268-ebd2aa41fbec",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "70b964d4-8023-40c4-80c8-d2ef464f68d0",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * Every [[Resource]] can be (asynchronously) released. Releasing a resource will also release\r\n    * all earlier resources constructed via [[flatMap()]] or a `for` comprehension.\r\n```",
        "createdAt" : "2020-02-21T12:33:03Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -9,30 +9,54 @@ import scala.collection.generic.CanBuildFrom\n import scala.concurrent.{ExecutionContext, Future, Promise}\n import scala.util.{Failure, Success, Try}\n \n+/**\n+  * A [[Resource]] is a [[Future]] that can be (asynchronously) released and will also release automatically upon failure.\n+  *\n+  * @tparam A The type of value being protected as a Resource.\n+  */\n trait Resource[+A] {\n   self =>\n \n+  /**\n+    * Every [[Resource]] has an underlying [[Future]] representation.\n+    */\n   val asFuture: Future[A]\n \n+  /**\n+    * Every [[Resource]] can be (asynchronously) released."
  },
  {
    "id" : "ab556b7e-ea77-4f70-a917-83ee5760c999",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "bad8c35f-bfac-4970-b85d-2167cf0068b1",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "I think you can delete this comment and make it part of the Scaladoc of the trait.",
        "createdAt" : "2020-02-21T12:33:29Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -58,33 +88,40 @@ trait Resource[+A] {\n         release _,\n       )\n       .flatten\n-\n }\n \n object Resource {\n   import scala.language.higherKinds\n \n+  /**\n+    * Nests release operation for a [[Resource]]'s future.\n+    */\n   private def nest[T](future: Future[T])(\n       releaseResource: T => Future[Unit],\n       releaseSubResources: () => Future[Unit],\n   )(implicit executionContext: ExecutionContext): Resource[T] =\n     new Resource[T] {\n-      private val released: AtomicBoolean = new AtomicBoolean(false)\n-      private val releasePromise: Promise[Unit] = Promise()\n \n       final lazy val asFuture: Future[T] = future.transformWith {\n         case Success(value) => Future.successful(value)\n-        case Failure(throwable) => release().flatMap(_ => Future.failed(throwable))\n+        case Failure(throwable) =>\n+          release().flatMap(_ => Future.failed(throwable)) // Release all if failing\n       }\n \n+      private val released: AtomicBoolean = new AtomicBoolean(false) // Short-circuits to a promise\n+      private val releasePromise: Promise[Unit] = Promise() // Will be the release return handle\n+\n+      // Explicit release must call both main and nested releases"
  },
  {
    "id" : "1ba5eee1-15d8-4b87-8603-3016707bc1a2",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "d1823e51-e603-4e18-8c29-d67e2296e458",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n        // If `release` is called twice, we wait for `releasePromise` to complete instead\r\n        // `released` is set atomically to ensure we don't end up with two concurrent releases\r\n        if (released.compareAndSet(false, true))\r\n```",
        "createdAt" : "2020-02-21T12:35:03Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -58,33 +88,40 @@ trait Resource[+A] {\n         release _,\n       )\n       .flatten\n-\n }\n \n object Resource {\n   import scala.language.higherKinds\n \n+  /**\n+    * Nests release operation for a [[Resource]]'s future.\n+    */\n   private def nest[T](future: Future[T])(\n       releaseResource: T => Future[Unit],\n       releaseSubResources: () => Future[Unit],\n   )(implicit executionContext: ExecutionContext): Resource[T] =\n     new Resource[T] {\n-      private val released: AtomicBoolean = new AtomicBoolean(false)\n-      private val releasePromise: Promise[Unit] = Promise()\n \n       final lazy val asFuture: Future[T] = future.transformWith {\n         case Success(value) => Future.successful(value)\n-        case Failure(throwable) => release().flatMap(_ => Future.failed(throwable))\n+        case Failure(throwable) =>\n+          release().flatMap(_ => Future.failed(throwable)) // Release all if failing\n       }\n \n+      private val released: AtomicBoolean = new AtomicBoolean(false) // Short-circuits to a promise\n+      private val releasePromise: Promise[Unit] = Promise() // Will be the release return handle\n+\n+      // Explicit release must call both main and nested releases\n       def release(): Future[Unit] =\n-        if (released.compareAndSet(false, true))\n+        if (released.compareAndSet(false, true)) // Atomically: if not yet released, set released"
  },
  {
    "id" : "1b234891-818c-4e34-9aac-338b29665cfd",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "d9504e52-b49a-4fed-a3ef-d2239b4f563b",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n            .transform( // Finally, complete `releasePromise` to allow other releases to complete\r\n```",
        "createdAt" : "2020-02-21T12:36:37Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -58,33 +88,40 @@ trait Resource[+A] {\n         release _,\n       )\n       .flatten\n-\n }\n \n object Resource {\n   import scala.language.higherKinds\n \n+  /**\n+    * Nests release operation for a [[Resource]]'s future.\n+    */\n   private def nest[T](future: Future[T])(\n       releaseResource: T => Future[Unit],\n       releaseSubResources: () => Future[Unit],\n   )(implicit executionContext: ExecutionContext): Resource[T] =\n     new Resource[T] {\n-      private val released: AtomicBoolean = new AtomicBoolean(false)\n-      private val releasePromise: Promise[Unit] = Promise()\n \n       final lazy val asFuture: Future[T] = future.transformWith {\n         case Success(value) => Future.successful(value)\n-        case Failure(throwable) => release().flatMap(_ => Future.failed(throwable))\n+        case Failure(throwable) =>\n+          release().flatMap(_ => Future.failed(throwable)) // Release all if failing\n       }\n \n+      private val released: AtomicBoolean = new AtomicBoolean(false) // Short-circuits to a promise\n+      private val releasePromise: Promise[Unit] = Promise() // Will be the release return handle\n+\n+      // Explicit release must call both main and nested releases\n       def release(): Future[Unit] =\n-        if (released.compareAndSet(false, true))\n+        if (released.compareAndSet(false, true)) // Atomically: if not yet released, set released\n           future\n             .transformWith {\n-              case Success(value) => releaseResource(value).flatMap(_ => releaseSubResources())\n-              case Failure(_) => releaseSubResources()\n+              case Success(value) =>\n+                releaseResource(value).flatMap(_ => releaseSubResources()) // Release all\n+              case Failure(_) =>\n+                releaseSubResources() // Only sub-release as the future will take care of itself\n             }\n-            .transform(\n+            .transform( // Then use set the promise as release completion future"
  },
  {
    "id" : "db302a29-4c2b-46e7-b244-43606434e378",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "444352e2-a221-49c2-be7a-53b6ebe36ba4",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n        else // A release is already in progress or completed; we wait for that instead\r\n```",
        "createdAt" : "2020-02-21T12:37:09Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -94,39 +131,67 @@ object Resource {\n                 exception\n               },\n             )\n-        else\n+        else // The release completion future is already the promise"
  },
  {
    "id" : "9056072b-81fe-4578-a7d7-5bf49dcba0c9",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "80b75f1e-96d1-45a0-b420-2ec9b7012092",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * Wraps a simple [[Future]] in a [[Resource]] that doesn't need to be released.\r\n```",
        "createdAt" : "2020-02-21T12:37:42Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -94,39 +131,67 @@ object Resource {\n                 exception\n               },\n             )\n-        else\n+        else // The release completion future is already the promise\n           releasePromise.future\n     }\n \n+  /**\n+    * Builds a [[Resource]] from a [[Future]] plus release logic.\n+    */\n   def apply[T](future: Future[T])(releaseResource: T => Future[Unit])(\n       implicit executionContext: ExecutionContext\n   ): Resource[T] =\n     nest(future)(releaseResource, () => Future.successful(()))\n \n   /**\n-    * Useful to wrap a simple [[Future]] that doesn't need releasing in a [[Resource]]\n+    * Wraps in a [[Resource]] a simple [[Future]] that doesn't need any releasing."
  },
  {
    "id" : "89d8e037-6b68-43bb-9dbf-3232df631d6b",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "2cf49e2a-af6e-43f9-8807-096a446426b5",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * Builds a [[Resource]] from a [[Future]] and some release logic.\r\n```",
        "createdAt" : "2020-02-21T12:37:59Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -94,39 +131,67 @@ object Resource {\n                 exception\n               },\n             )\n-        else\n+        else // The release completion future is already the promise\n           releasePromise.future\n     }\n \n+  /**\n+    * Builds a [[Resource]] from a [[Future]] plus release logic."
  },
  {
    "id" : "24e63a8a-21e1-4a00-96b6-7d8dbe31cdc0",
    "prId" : 4651,
    "comments" : [
      {
        "id" : "ff4124ad-0685-4b8a-b34e-a83b5000e1c7",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "```suggestion\r\n    * @param bf The projection from a [[TraversableOnce]] of resources into one of their values.\r\n```",
        "createdAt" : "2020-02-21T12:38:16Z",
        "updatedAt" : "2020-02-21T13:18:36Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e8aa67a65271644c311c750c07b2c133a7e52bf",
    "line" : null,
    "diffHunk" : "@@ -94,39 +131,67 @@ object Resource {\n                 exception\n               },\n             )\n-        else\n+        else // The release completion future is already the promise\n           releasePromise.future\n     }\n \n+  /**\n+    * Builds a [[Resource]] from a [[Future]] plus release logic.\n+    */\n   def apply[T](future: Future[T])(releaseResource: T => Future[Unit])(\n       implicit executionContext: ExecutionContext\n   ): Resource[T] =\n     nest(future)(releaseResource, () => Future.successful(()))\n \n   /**\n-    * Useful to wrap a simple [[Future]] that doesn't need releasing in a [[Resource]]\n+    * Wraps in a [[Resource]] a simple [[Future]] that doesn't need any releasing.\n     */\n   def fromFuture[T](future: Future[T])(implicit executionContext: ExecutionContext): Resource[T] =\n     apply(future)(_ => Future.successful(()))\n \n+  /**\n+    * Produces a [[Resource]] that has already succeeded with a given value.\n+    */\n   def successful[T](value: T)(implicit executionContext: ExecutionContext): Resource[T] =\n     Resource.fromFuture(Future.successful(value))\n \n+  /**\n+    * Produces a [[Resource]] that has already failed with a given exception.\n+    */\n   def failed[T](exception: Throwable)(implicit executionContext: ExecutionContext): Resource[T] =\n     Resource.fromFuture(Future.failed(exception))\n \n+  /**\n+    * Sequences a [[TraversableOnce]] of [[Resource]]s into a [[Resource]] of the [[TraversableOnce]] of their values.\n+    *\n+    * @param seq The [[TraversableOnce]] of [[Resource]]s.\n+    * @param bf The projection from a [[TraversableOnce]] of resources into a one of their values."
  },
  {
    "id" : "ade7464d-c18b-447a-a636-77d2974061a5",
    "prId" : 4382,
    "comments" : [
      {
        "id" : "4433f283-2a00-4cb6-b646-9f6900fc5f8f",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Good name.",
        "createdAt" : "2020-02-04T15:57:24Z",
        "updatedAt" : "2020-02-04T16:01:08Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "107e162c8d59dbb6d113a47cd9e9b597f8b760d2",
    "line" : 71,
    "diffHunk" : "@@ -40,37 +40,31 @@ trait Resource[A] {\n           Future.successful(value)\n         else\n           Future.failed(new ResourceAcquisitionFilterException()))\n-    Resource(future, _ => Future.successful(()), release _)\n+    Resource.nest(future)(_ => Future.successful(()), release _)\n   }\n \n   def flatten[B](\n-      implicit nestedEvidence: <:<[A, Resource[B]],\n+      implicit nestedEvidence: A <:< Resource[B],\n       executionContext: ExecutionContext,\n   ): Resource[B] =\n-    flatMap(nested => nested)\n+    flatMap(identity[A])\n \n   def transformWith[B](f: Try[A] => Resource[B])(\n       implicit executionContext: ExecutionContext,\n   ): Resource[B] =\n-    Resource(\n-      asFuture.transformWith(f.andThen(Future.successful)),\n-      (nested: Resource[B]) => nested.release(),\n-      release _,\n-    ).flatten\n+    Resource\n+      .nest(asFuture.transformWith(f.andThen(Future.successful)))(\n+        (nested: Resource[B]) => nested.release(),\n+        release _,\n+      )\n+      .flatten\n \n-  def vary[B >: A]: Resource[B] = asInstanceOf[Resource[B]]\n }\n \n object Resource {\n   import scala.language.higherKinds\n \n-  def apply[T](future: Future[T], releaseResource: T => Future[Unit])(\n-      implicit executionContext: ExecutionContext\n-  ): Resource[T] =\n-    apply(future, releaseResource, () => Future.successful(()))\n-\n-  private def apply[T](\n-      future: Future[T],\n+  private def nest[T](future: Future[T])("
  }
]