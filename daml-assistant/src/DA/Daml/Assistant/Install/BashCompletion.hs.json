[
  {
    "id" : "febc2e12-341b-4bcd-b6f1-d779a6d5dc02",
    "prId" : 3946,
    "comments" : [
      {
        "id" : "63078ffd-82da-42a3-bbe6-29334e9eccfa",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can you write here without being root?",
        "createdAt" : "2020-01-03T17:08:22Z",
        "updatedAt" : "2020-01-06T14:53:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "07c86bdd-225e-4c9f-b064-baef389dc76e",
        "parentId" : "63078ffd-82da-42a3-bbe6-29334e9eccfa",
        "author" : null,
        "body" : "Yes, you can.",
        "createdAt" : "2020-01-03T17:15:58Z",
        "updatedAt" : "2020-01-06T14:53:20Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e43c28d9-6c68-4142-a549-3fe834ac1403",
        "parentId" : "63078ffd-82da-42a3-bbe6-29334e9eccfa",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "On my machine at least, yes. On macOS, `/usr/local` is meant for user files and generally doesn't require root access.",
        "createdAt" : "2020-01-03T17:17:59Z",
        "updatedAt" : "2020-01-06T14:53:20Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9834fde080e9fe0d6601d19b4e4df2372db2ded0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Installation of bash completions. These are installed in\n+-- /usr/local/etc/bash_completion.d (on Mac) or\n+-- /etc/bash_completion.d (elsewhere). These are not installed on\n+-- Windows by default, and won't be reinstalled unless the user\n+-- asks by passing @--bash-completions=yes@ explicitly.\n+module DA.Daml.Assistant.Install.BashCompletion\n+    ( installBashCompletions\n+    ) where\n+\n+import DA.Daml.Assistant.Types\n+\n+import qualified Data.ByteString.Lazy as BSL\n+import Control.Monad.Extra (andM, whenM)\n+import System.Directory (doesDirectoryExist, doesFileExist)\n+import System.FilePath ((</>))\n+import System.Info.Extra (isMac, isWindows)\n+import System.Process.Typed (proc, readProcessStdout_)\n+\n+installBashCompletions :: InstallOptions -> DamlPath -> (String -> IO ()) -> IO ()\n+installBashCompletions options damlPath output =\n+    whenM (shouldInstallBashCompletions options) $\n+        doInstallBashCompletions damlPath output\n+\n+shouldInstallBashCompletions :: InstallOptions -> IO Bool\n+shouldInstallBashCompletions options =\n+    case iBashCompletions options of\n+        BashCompletions Yes -> pure True\n+        BashCompletions No -> pure False\n+        BashCompletions Auto -> andM\n+            [ pure (not isWindows)\n+            , doesDirectoryExist bashCompletionDirPath\n+            , not <$> doesFileExist bashCompletionScriptPath\n+            ]\n+\n+doInstallBashCompletions :: DamlPath -> (String -> IO ()) -> IO ()\n+doInstallBashCompletions damlPath output = do\n+    dirExists <- doesDirectoryExist bashCompletionDirPath\n+    if dirExists\n+        then do\n+            completionScript <- getCompletionScript damlPath\n+            BSL.writeFile bashCompletionScriptPath completionScript\n+            output \"Bash completions installed for DAML assistant.\"\n+        else output (\"Bash completions not installed for DAML assistant: \" <> bashCompletionDirPath <> \" does not exist\")\n+\n+getCompletionScript :: DamlPath -> IO BSL.ByteString\n+getCompletionScript damlPath = do\n+    let assistant = assistantPath damlPath\n+    readProcessStdout_ (proc assistant [\"--bash-completion-script\", assistant])\n+\n+assistantPath :: DamlPath -> FilePath\n+assistantPath (DamlPath p) = p </> \"bin\" </> \"daml\"\n+\n+bashCompletionDirPath :: FilePath\n+bashCompletionDirPath\n+    | isMac = \"/usr/local/etc/bash_completion.d\""
  },
  {
    "id" : "e964d02a-1278-48a6-9071-f5b461fce766",
    "prId" : 3946,
    "comments" : [
      {
        "id" : "5a5796ad-ea2a-4a2b-93c6-6d759f3426ae",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here, I would expect that you need to be root for this.",
        "createdAt" : "2020-01-03T17:08:36Z",
        "updatedAt" : "2020-01-06T14:53:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a11ae2de-f344-44c9-b662-d21baa62e89e",
        "parentId" : "5a5796ad-ea2a-4a2b-93c6-6d759f3426ae",
        "author" : null,
        "body" : "Unsure",
        "createdAt" : "2020-01-03T17:16:04Z",
        "updatedAt" : "2020-01-06T14:53:20Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "110861a3-a7e6-41c3-b187-7dfa55a3f4e5",
        "parentId" : "5a5796ad-ea2a-4a2b-93c6-6d759f3426ae",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I just checked this on my Ubuntu machine and this directory has permissions 755 so you canâ€™t write there.",
        "createdAt" : "2020-01-03T17:18:53Z",
        "updatedAt" : "2020-01-06T14:53:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1bcf2e98-cda6-4c96-a215-2e30458aa0b9",
        "parentId" : "5a5796ad-ea2a-4a2b-93c6-6d759f3426ae",
        "author" : null,
        "body" : "I will switch to your plan :) ",
        "createdAt" : "2020-01-03T17:24:16Z",
        "updatedAt" : "2020-01-06T14:53:20Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9834fde080e9fe0d6601d19b4e4df2372db2ded0",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,62 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Installation of bash completions. These are installed in\n+-- /usr/local/etc/bash_completion.d (on Mac) or\n+-- /etc/bash_completion.d (elsewhere). These are not installed on\n+-- Windows by default, and won't be reinstalled unless the user\n+-- asks by passing @--bash-completions=yes@ explicitly.\n+module DA.Daml.Assistant.Install.BashCompletion\n+    ( installBashCompletions\n+    ) where\n+\n+import DA.Daml.Assistant.Types\n+\n+import qualified Data.ByteString.Lazy as BSL\n+import Control.Monad.Extra (andM, whenM)\n+import System.Directory (doesDirectoryExist, doesFileExist)\n+import System.FilePath ((</>))\n+import System.Info.Extra (isMac, isWindows)\n+import System.Process.Typed (proc, readProcessStdout_)\n+\n+installBashCompletions :: InstallOptions -> DamlPath -> (String -> IO ()) -> IO ()\n+installBashCompletions options damlPath output =\n+    whenM (shouldInstallBashCompletions options) $\n+        doInstallBashCompletions damlPath output\n+\n+shouldInstallBashCompletions :: InstallOptions -> IO Bool\n+shouldInstallBashCompletions options =\n+    case iBashCompletions options of\n+        BashCompletions Yes -> pure True\n+        BashCompletions No -> pure False\n+        BashCompletions Auto -> andM\n+            [ pure (not isWindows)\n+            , doesDirectoryExist bashCompletionDirPath\n+            , not <$> doesFileExist bashCompletionScriptPath\n+            ]\n+\n+doInstallBashCompletions :: DamlPath -> (String -> IO ()) -> IO ()\n+doInstallBashCompletions damlPath output = do\n+    dirExists <- doesDirectoryExist bashCompletionDirPath\n+    if dirExists\n+        then do\n+            completionScript <- getCompletionScript damlPath\n+            BSL.writeFile bashCompletionScriptPath completionScript\n+            output \"Bash completions installed for DAML assistant.\"\n+        else output (\"Bash completions not installed for DAML assistant: \" <> bashCompletionDirPath <> \" does not exist\")\n+\n+getCompletionScript :: DamlPath -> IO BSL.ByteString\n+getCompletionScript damlPath = do\n+    let assistant = assistantPath damlPath\n+    readProcessStdout_ (proc assistant [\"--bash-completion-script\", assistant])\n+\n+assistantPath :: DamlPath -> FilePath\n+assistantPath (DamlPath p) = p </> \"bin\" </> \"daml\"\n+\n+bashCompletionDirPath :: FilePath\n+bashCompletionDirPath\n+    | isMac = \"/usr/local/etc/bash_completion.d\"\n+    | otherwise = \"/etc/bash_completion.d\""
  }
]