[
  {
    "id" : "503d04c6-e838-4682-b322-77927b4da30a",
    "prId" : 1677,
    "comments" : [
      {
        "id" : "ee680708-ca88-4adb-9abf-50bf17e4d6cc",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Do you need to `displayException raw` here too?",
        "createdAt" : "2019-06-14T17:13:48Z",
        "updatedAt" : "2019-06-14T17:15:51Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "373f89ce-607b-4330-82c2-ccfe30d31fa0",
        "parentId" : "ee680708-ca88-4adb-9abf-50bf17e4d6cc",
        "author" : null,
        "body" : "Nope! It's a string. It's a little confusing but these are the return types of the errors we get from Data.Yaml...",
        "createdAt" : "2019-06-14T17:24:00Z",
        "updatedAt" : "2019-06-14T17:24:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e4615060e9f47b17e3716044a018e6c3816c21f9",
    "line" : 42,
    "diffHunk" : "@@ -50,20 +50,38 @@ getAssistantSdkVersion = do\n -- AssistantError exception if the version cannot be determined.\n getSdkVersionFromSdkPath :: SdkPath -> IO SdkVersion\n getSdkVersionFromSdkPath sdkPath = do\n-    config <- requiredIO \"Failed to read SDK config.\" $\n+    config <- requiredAny \"Failed to read SDK config.\" $\n         readSdkConfig sdkPath\n     requiredE \"Failed to parse SDK version from SDK config.\" $\n         sdkVersionFromSdkConfig config\n \n -- | Determine SDK version from project root. Fails with an\n -- AssistantError exception if the version cannot be determined.\n getSdkVersionFromProjectPath :: ProjectPath -> IO SdkVersion\n-getSdkVersionFromProjectPath projectPath = do\n-    config <- requiredIO \"Failed to read project config.\" $\n-        readProjectConfig projectPath\n-    versionM <- requiredE \"Failed to parse SDK version from project config.\" $\n-        sdkVersionFromProjectConfig config\n-    required \"SDK version missing from project config.\" versionM\n+getSdkVersionFromProjectPath projectPath =\n+    requiredIO (\"Failed to read SDK version from \" <> pack projectConfigName) $ do\n+        configE <- tryConfig $ readProjectConfig projectPath\n+        case sdkVersionFromProjectConfig =<< configE of\n+            Right (Just v) ->\n+                pure v\n+            Left (ConfigFileInvalid _ raw) ->\n+                throwIO $ assistantErrorDetails\n+                    (projectConfigName <> \" is an invalid YAML file\")\n+                    [(\"path\", unwrapProjectPath projectPath </> projectConfigName)\n+                    ,(\"internal\", displayException raw)]\n+            Right Nothing ->\n+                throwIO $ assistantErrorDetails\n+                    (\"sdk-version field is missing from \" <> projectConfigName)\n+                    [(\"path\", unwrapProjectPath projectPath </> projectConfigName)]\n+            Left (ConfigFieldMissing _ _) ->\n+                throwIO $ assistantErrorDetails\n+                    (\"sdk-version field is missing from \" <> projectConfigName)\n+                    [(\"path\", unwrapProjectPath projectPath </> projectConfigName)]\n+            Left (ConfigFieldInvalid _ _ raw) ->\n+                throwIO $ assistantErrorDetails\n+                    (\"sdk-version field is invalid in \" <> projectConfigName)\n+                    [(\"path\", unwrapProjectPath projectPath </> projectConfigName)\n+                    ,(\"internal\", raw)]"
  },
  {
    "id" : "b4c13118-df81-4fc5-bf73-b77db66033bd",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "8c5cb686-8e01-44de-bfae-e2d857fc56be",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I thought Aeson would prefer to decode it to a Data.HashMap.Strict? And thus go the unordered-containers route?",
        "createdAt" : "2019-05-23T11:24:41Z",
        "updatedAt" : "2019-05-23T14:05:16Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a5b24fe4-f1c7-4dc3-8921-a52bb8acaa00",
        "parentId" : "8c5cb686-8e01-44de-bfae-e2d857fc56be",
        "author" : null,
        "body" : "Didn't even think about it -- I'll switch over.",
        "createdAt" : "2019-05-23T11:33:16Z",
        "updatedAt" : "2019-05-23T14:05:16Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3a711ef84155acf0b8e25f398231dd2e4238e28",
    "line" : null,
    "diffHunk" : "@@ -5,34 +5,33 @@\n \n module DAML.Assistant.Version\n     ( getInstalledSdkVersions\n-    , getLatestSdkVersionCached\n     , getSdkVersionFromSdkPath\n     , getSdkVersionFromProjectPath\n     , getAssistantSdkVersion\n     , getDefaultSdkVersion\n+    , getAvailableSdkVersions\n+    , getAvailableSdkVersionsCached\n+    , refreshAvailableSdkVersions\n+    , getLatestSdkVersionCached\n     ) where\n \n import DAML.Assistant.Types\n import DAML.Assistant.Util\n import DAML.Assistant.Cache\n-import DAML.Assistant.Install\n import DAML.Project.Config\n import DAML.Project.Consts hiding (getDamlPath, getProjectPath)\n import System.Directory\n import System.FilePath\n import System.Environment.Blank\n+import Control.Exception.Safe\n import Control.Monad.Extra\n import Data.Maybe\n+import Data.List\n import Data.Either.Extra\n+import Data.Aeson (eitherDecodeStrict')\n import Safe\n-\n--- | Get the latest released SDK version. Designed to return Nothing if\n--- anything fails (e.g. machine is offline). The result is cached in\n--- $DAML_HOME/cache/latest-sdk-version.txt and only polled once a day.\n-getLatestSdkVersionCached :: DamlPath -> IO (Maybe SdkVersion)\n-getLatestSdkVersionCached damlPath =\n-    cacheLatestSdkVersion damlPath $ do\n-        tryAssistantM getLatestVersion\n+import Network.HTTP.Simple\n+import qualified Data.Map as M"
  },
  {
    "id" : "6c7c0c53-cd00-46f6-9f52-c77dbdacf9fd",
    "prId" : 1339,
    "comments" : [
      {
        "id" : "ebd346e3-41dc-4a26-a43c-b9287efeb9ea",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n            (throwIO . assistantErrorBecause \"Versions list from docs.daml.com does not contain valid JSON\" . pack)\r\n```",
        "createdAt" : "2019-05-23T13:47:18Z",
        "updatedAt" : "2019-05-23T14:05:16Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d3a711ef84155acf0b8e25f398231dd2e4238e28",
    "line" : null,
    "diffHunk" : "@@ -92,5 +90,44 @@ getDefaultSdkVersion damlPath = do\n     required \"There are no installed SDK versions.\" $\n         maximumMay (filter isStableVersion installedVersions)\n \n+-- | Get the list of available versions afresh. This will fetch.\n+-- https://docs.daml.com/versions.json and parse the obtained list\n+-- of versions.\n+getAvailableSdkVersions :: IO [SdkVersion]\n+getAvailableSdkVersions = wrapErr \"Fetching list of avalaible SDK versions\" $ do\n+    response <- requiredAny \"HTTPS connection to docs.daml.com failed\" $\n+        httpBS \"GET http://docs.daml.com/versions.json\"\n+\n+    when (getResponseStatusCode response /= 200) $ do\n+        throwIO $ assistantErrorBecause\n+            \"Fetching list of available SDK versions from docs.daml.com failed\"\n+            (pack . show $ getResponseStatus response)\n \n+    versionsMap :: M.HashMap Text Text <-\n+        fromRightM\n+            (throwIO . assistantErrorBecause \"Versions list from docs.daml.com does not contain vaild JSON\" . pack)"
  }
]