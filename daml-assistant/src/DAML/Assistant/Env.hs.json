[
  {
    "id" : "f7098a45-c11e-4f89-902a-c6ae8ba2ba62",
    "prId" : 951,
    "comments" : [
      {
        "id" : "b7a311dc-4209-452b-b264-bbfcbdc2b49d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I feel like we should be able to simplify this somehow but I also don’t have a good suggestion.",
        "createdAt" : "2019-05-06T15:35:19Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +78,82 @@    -> IO (Maybe t)             -- ^ calculation to override\n    -> IO (Maybe t)\noverrideWithEnvVarMaybe envVar parse calculate = do\n    valueM <- getEnv envVar\n    case valueM of"
  },
  {
    "id" : "f790feca-a51d-47c6-a25a-9ae656d42bd5",
    "prId" : 951,
    "comments" : [
      {
        "id" : "4be6fa6b-7ab2-4747-b12c-4b85ab3c0dac",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Is this an override or a default? I don't get how this overrides?",
        "createdAt" : "2019-05-06T17:43:19Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +76,80 @@    => String                   -- ^ env var name\n    -> (String -> Either e t)   -- ^ parser for env var\n    -> IO (Maybe t)             -- ^ calculation to override\n    -> IO (Maybe t)\noverrideWithEnvVarMaybe envVar parse calculate = do"
  },
  {
    "id" : "e9c45655-098c-4c16-8e11-8948f3004157",
    "prId" : 951,
    "comments" : [
      {
        "id" : "8bd489f3-ea4e-447b-bc80-e05106948abe",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should this be `@Void` and we have an exception instance for void? Or a `NoException` void like type? I hate seeing SomeException in the code.",
        "createdAt" : "2019-05-06T17:47:31Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +200,204 @@getProjectPath :: IO (Maybe ProjectPath)\ngetProjectPath = wrapErr \"Detecting daml project.\" $ do\n        pathM <- overrideWithEnvVarMaybe @SomeException projectPathEnvVar Right $ do\n            cwd <- getCurrentDirectory\n            findM hasProjectConfig (ascendants cwd)"
  },
  {
    "id" : "eb9e829d-be44-4a34-b69e-bc2334dfa65c",
    "prId" : 692,
    "comments" : [
      {
        "id" : "785a1fe1-42a2-4eb6-a0e7-1459016d8b47",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Why not just if it is newer than the one currently running? I see no requirement to always go to the latest stable. Being always 1 behind would be just fine.",
        "createdAt" : "2019-04-25T11:43:16Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "927dd50e-7ada-46bd-8261-76e01820d964",
        "parentId" : "785a1fe1-42a2-4eb6-a0e7-1459016d8b47",
        "author" : null,
        "body" : "That does make more sense here.",
        "createdAt" : "2019-04-25T12:20:43Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e47fc50478453b402b5094af058fe8b6e60409",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +216,220 @@\n-- | Auto-installs requested version if it is missing and updates daml-assistant\n-- if it is the latest stable version.\nautoInstall\n    :: DamlPath"
  },
  {
    "id" : "e0374e19-2dff-453b-812d-3e1a7d385432",
    "prId" : 545,
    "comments" : [
      {
        "id" : "e4dfd42b-9bd0-40f9-87be-5fd758a998dd",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Vomit. Why does our packaging logic for Haskell do that? Can we fix it at source?",
        "createdAt" : "2019-04-16T15:18:14Z",
        "updatedAt" : "2019-04-16T15:25:15Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c9a82eb3-b94d-4cde-b1f3-39a846af0484",
        "parentId" : "e4dfd42b-9bd0-40f9-87be-5fd758a998dd",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Our packaging logic does this because producing reasonably portable, dynamically linked binaries on Linux is fairly tricky. My attempts at fixing it so far sadly weren’t particularly successful and so far I wanted to avoid having to patch our dynamic linker :smile:",
        "createdAt" : "2019-04-16T15:22:06Z",
        "updatedAt" : "2019-04-16T15:25:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0c7887e2-04e2-4f50-89ed-b7adc2dff032",
        "parentId" : "e4dfd42b-9bd0-40f9-87be-5fd758a998dd",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Fair enough. Could we write an HLint rule banning getExecutablePath, if it's never going to be correct? I imagine whatever you learnt was hard won knowledge I don't want to get lost.",
        "createdAt" : "2019-04-16T15:26:51Z",
        "updatedAt" : "2019-04-16T15:26:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d8d86f3f-c125-40b7-9b2e-7c8675748663",
        "parentId" : "e4dfd42b-9bd0-40f9-87be-5fd758a998dd",
        "author" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "body" : "`getExecutablePath` is still usable, and we do use it below. It just doesn't return what you might expect based on the docs . . .",
        "createdAt" : "2019-04-16T15:31:58Z",
        "updatedAt" : "2019-04-16T15:31:58Z",
        "lastEditedBy" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa796545cb4db6ebce53863f0a269efae559f20",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +62,66 @@-- | Determine the absolute path to the assistant.\ngetDamlAssistantPath :: Applicative f => DamlPath -> f DamlAssistantPath\ngetDamlAssistantPath (DamlPath damlPath)\n    -- Our packaging logic for Haskell results in getExecutablePath\n    -- pointing to the dynamic linker and getProgramName returning \"daml\" in"
  }
]