[
  {
    "id" : "d74ff15a-45f1-4a0f-a85d-97e169e8c363",
    "prId" : 997,
    "comments" : [
      {
        "id" : "4db70c06-c44a-44b5-a42f-9a057d22ecad",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I am not sure if the `daml-sdk-head` script works on Windows but it probably wouldn’t do any harm to make this map to `daml-head.cmd` on Windows.",
        "createdAt" : "2019-05-08T12:48:05Z",
        "updatedAt" : "2019-05-08T13:15:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f7359664-3914-45fa-886f-a621ba8bf580",
        "parentId" : "4db70c06-c44a-44b5-a42f-9a057d22ecad",
        "author" : null,
        "body" : "Ok, updated.",
        "createdAt" : "2019-05-08T13:16:16Z",
        "updatedAt" : "2019-05-08T13:16:17Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cf0d1c7e766e3d299dca09cc3b3e7a9c5816654d",
    "line" : null,
    "diffHunk" : "@@ -129,19 +130,21 @@ testDamlEnv Env{..} = firstJustM (\\(test, msg) -> unlessMaybeM test (pure msg))\n \n -- | Determine the absolute path to the assistant. Can be overriden with\n -- DAML_ASSISTANT env var.\n-getDamlAssistantPath :: DamlPath -> IO DamlAssistantPath\n-getDamlAssistantPath damlPath =\n+getDamlAssistantPath :: DamlPath -> Maybe DamlAssistantSdkVersion -> IO DamlAssistantPath\n+getDamlAssistantPath damlPath damlVersion =\n     overrideWithEnvVar damlAssistantEnvVar DamlAssistantPath $\n-        getDamlAssistantPathDefault damlPath\n-\n--- | Determine the absolute path to the assistant.\n-getDamlAssistantPathDefault :: Applicative f => DamlPath -> f DamlAssistantPath\n-getDamlAssistantPathDefault (DamlPath damlPath)\n-    -- Our packaging logic for Haskell results in getExecutablePath\n-    -- pointing to the dynamic linker and getProgramName returning \"daml\" in\n-    -- both cases so we use this hack to figure out the executable name.\n-    | takeFileName damlPath == \".daml-head\" = pure $ DamlAssistantPath $ damlPath </> \"bin\" </> \"daml-head\"\n-    | otherwise = pure $ DamlAssistantPath $ damlPath </> \"bin\" </> \"daml\"\n+        pure (getDamlAssistantPathDefault damlPath damlVersion)\n+\n+-- | Determine the absolute path to the assistant. Note that there is no\n+-- daml-head on Windows at the moment.\n+getDamlAssistantPathDefault :: DamlPath -> Maybe DamlAssistantSdkVersion -> DamlAssistantPath\n+getDamlAssistantPathDefault (DamlPath damlPath) _ | isWindows =\n+    DamlAssistantPath (damlPath </> \"bin\" </> \"daml\" <.> \"cmd\")"
  },
  {
    "id" : "24dc6e57-73a3-4ceb-ae68-71687b808525",
    "prId" : 951,
    "comments" : [
      {
        "id" : "e137f139-ff14-4c0a-b8f4-a1bc2f1e61e6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    maybeM calculate parse (getEnv envVar)\r\n```",
        "createdAt" : "2019-05-06T15:32:29Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : null,
    "diffHunk" : "@@ -59,11 +59,51 @@ getDamlEnv = do\n     envLatestStableSdkVersion <- getLatestStableSdkVersion envDamlPath\n     pure Env {..}\n \n+-- | (internal) Override function with environment variable\n+-- if it is available.\n+overrideWithEnvVar\n+    :: String                   -- ^ env var name\n+    -> (String -> t)            -- ^ parser for env var\n+    -> IO t                     -- ^ calculation to override\n+    -> IO t\n+overrideWithEnvVar envVar parse calculate = do\n+    valueM <- getEnv envVar"
  },
  {
    "id" : "ebbf1e2a-6348-472a-826b-d1b1c0e1da1a",
    "prId" : 951,
    "comments" : [
      {
        "id" : "d619f988-aec8-4047-8076-30e236597720",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I feel like we should be able to simplify this somehow but I also don’t have a good suggestion.",
        "createdAt" : "2019-05-06T15:35:19Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : 31,
    "diffHunk" : "@@ -59,11 +59,51 @@ getDamlEnv = do\n     envLatestStableSdkVersion <- getLatestStableSdkVersion envDamlPath\n     pure Env {..}\n \n+-- | (internal) Override function with environment variable\n+-- if it is available.\n+overrideWithEnvVar\n+    :: String                   -- ^ env var name\n+    -> (String -> t)            -- ^ parser for env var\n+    -> IO t                     -- ^ calculation to override\n+    -> IO t\n+overrideWithEnvVar envVar parse calculate = do\n+    valueM <- getEnv envVar\n+    case valueM of\n+        Nothing -> calculate\n+        Just value -> pure (parse value)\n+\n+-- | (internal) Same as overrideWithEnvVar but accepts \"\" as\n+-- Nothing and throws exception on parse failure.\n+overrideWithEnvVarMaybe\n+    :: Exception e\n+    => String                   -- ^ env var name\n+    -> (String -> Either e t)   -- ^ parser for env var\n+    -> IO (Maybe t)             -- ^ calculation to override\n+    -> IO (Maybe t)\n+overrideWithEnvVarMaybe envVar parse calculate = do"
  },
  {
    "id" : "62e98605-e37f-4d1f-aa55-f26d8578142f",
    "prId" : 951,
    "comments" : [
      {
        "id" : "4e003ca9-fda3-44c4-be45-52486589ab9b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That looks like you are replicating `overrideWithEnvVarMaybe`.",
        "createdAt" : "2019-05-06T15:35:56Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4cd7665b-3c94-4ba5-95b4-ad811f95ccd1",
        "parentId" : "4e003ca9-fda3-44c4-be45-52486589ab9b",
        "author" : null,
        "body" : "oops!",
        "createdAt" : "2019-05-06T15:41:41Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : null,
    "diffHunk" : "@@ -90,18 +130,40 @@ testDamlEnv Env{..} = firstJustM (\\(test, msg) -> unlessMaybeM test (pure msg))\n       , \"The project directory does not exist. Please check if DAML_PROJECT is incorrectly set.\")\n     ]\n \n+-- | Determine the absolute path to the assistant. Can be overriden with\n+-- DAML_ASSISTANT env var.\n+getDamlAssistantPath :: DamlPath -> IO DamlAssistantPath\n+getDamlAssistantPath damlPath =\n+    overrideWithEnvVar damlAssistantEnvVar DamlAssistantPath $\n+        getDamlAssistantPathDefault damlPath\n+\n -- | Determine the absolute path to the assistant.\n-getDamlAssistantPath :: Applicative f => DamlPath -> f DamlAssistantPath\n-getDamlAssistantPath (DamlPath damlPath)\n+getDamlAssistantPathDefault :: Applicative f => DamlPath -> f DamlAssistantPath\n+getDamlAssistantPathDefault (DamlPath damlPath)\n     -- Our packaging logic for Haskell results in getExecutablePath\n     -- pointing to the dynamic linker and getProgramName returning \"daml\" in\n     -- both cases so we use this hack to figure out the executable name.\n     | takeFileName damlPath == \".daml-head\" = pure $ DamlAssistantPath $ damlPath </> \"bin\" </> \"daml-head\"\n     | otherwise = pure $ DamlAssistantPath $ damlPath </> \"bin\" </> \"daml\"\n \n--- | Determine SDK version of running daml assistant.\n+-- | Determine SDK version of running daml assistant. Can be overriden\n+-- with DAML_ASSISTANT_VERSION env var.\n getDamlAssistantSdkVersion :: IO (Maybe DamlAssistantSdkVersion)\n-getDamlAssistantSdkVersion = fmap DamlAssistantSdkVersion <$> do\n+getDamlAssistantSdkVersion = do\n+    versionStrM <- getEnv damlAssistantVersionEnvVar"
  },
  {
    "id" : "a1d936a6-0383-46a6-9073-783077ec0a1f",
    "prId" : 951,
    "comments" : [
      {
        "id" : "3549e823-88a6-488d-9a0e-4cff6c1534a1",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Is this an override or a default? I don't get how this overrides?",
        "createdAt" : "2019-05-06T17:43:19Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : 29,
    "diffHunk" : "@@ -59,11 +59,48 @@ getDamlEnv = do\n     envLatestStableSdkVersion <- getLatestStableSdkVersion envDamlPath\n     pure Env {..}\n \n+-- | (internal) Override function with environment variable\n+-- if it is available.\n+overrideWithEnvVar\n+    :: String                   -- ^ env var name\n+    -> (String -> t)            -- ^ parser for env var\n+    -> IO t                     -- ^ calculation to override\n+    -> IO t\n+overrideWithEnvVar envVar parse calculate =\n+    maybeM calculate (pure . parse) (getEnv envVar)\n+\n+-- | (internal) Same as overrideWithEnvVar but accepts \"\" as\n+-- Nothing and throws exception on parse failure.\n+overrideWithEnvVarMaybe\n+    :: Exception e\n+    => String                   -- ^ env var name\n+    -> (String -> Either e t)   -- ^ parser for env var\n+    -> IO (Maybe t)             -- ^ calculation to override"
  },
  {
    "id" : "90f32e07-4a32-4db4-a5b7-12a11e324f51",
    "prId" : 951,
    "comments" : [
      {
        "id" : "6d67219b-7ae7-4ca3-883b-174e89511d30",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should this be `@Void` and we have an exception instance for void? Or a `NoException` void like type? I hate seeing SomeException in the code.",
        "createdAt" : "2019-05-06T17:47:31Z",
        "updatedAt" : "2019-05-06T18:41:43Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec70931aecdfe07d7ccfbe670c9ad12d0c349a6",
    "line" : 115,
    "diffHunk" : "@@ -147,10 +199,9 @@ getDamlPath = wrapErr \"Determining daml home directory.\" $ do\n -- environment variable.\n getProjectPath :: IO (Maybe ProjectPath)\n getProjectPath = wrapErr \"Detecting daml project.\" $ do\n-        pathM <- firstJustM id\n-            [ lookupEnv projectPathEnvVar\n-            , findM hasProjectConfig . ascendants =<< getCurrentDirectory\n-            ]\n+        pathM <- overrideWithEnvVarMaybe @SomeException projectPathEnvVar Right $ do"
  },
  {
    "id" : "4769ded7-25f3-474b-b597-f3910fbd55d5",
    "prId" : 758,
    "comments" : [
      {
        "id" : "e76ad4b5-1897-48d6-be52-32fcb134e18f",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Is this a remote call to an http server? How often will it happen? Will  it work offline? Is it cached?",
        "createdAt" : "2019-04-29T10:52:22Z",
        "updatedAt" : "2019-05-02T12:28:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "02e009ec-52e3-4b9c-b838-41320bd5c0a7",
        "parentId" : "e76ad4b5-1897-48d6-be52-32fcb134e18f",
        "author" : null,
        "body" : "Yes, every time the user runs `daml`. It will returns Nothing on failure, such as when the user is offline. It's not cached yet. How often should the cache be refreshed?",
        "createdAt" : "2019-04-29T11:20:14Z",
        "updatedAt" : "2019-05-02T12:28:55Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d1670b6-cd28-479d-a3fd-cc4cd8ee08c7",
        "parentId" : "e76ad4b5-1897-48d6-be52-32fcb134e18f",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I think if every command is doing it, we want to cache it now - otherwise when someone is benchmarking `daml compile ...` they're going to be benchmarking a remote HTTP request. It should be possible to configure the thing to never update unless you explicitly `daml update`. Otherwise daily seems fine?",
        "createdAt" : "2019-04-29T11:22:27Z",
        "updatedAt" : "2019-05-02T12:28:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "47df5a77-f43c-4109-96e4-44821abff310",
        "parentId" : "e76ad4b5-1897-48d6-be52-32fcb134e18f",
        "author" : null,
        "body" : "Yep, I will add caching now, and make the polling configurable soon.",
        "createdAt" : "2019-04-29T11:30:37Z",
        "updatedAt" : "2019-05-02T12:28:55Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fc6256c0aa30c13f75615acecbf56bdd80036de3",
    "line" : null,
    "diffHunk" : "@@ -42,6 +42,7 @@ getDamlEnv = do\n     envProjectPath <- getProjectPath\n     (envSdkVersion, envSdkPath) <- getSdk envDamlPath\n         envDamlAssistantSdkVersion envProjectPath\n+    envLatestStableSdkVersion <- fmap eitherToMaybe (try getLatestVersion :: IO (Either AssistantError SdkVersion))"
  },
  {
    "id" : "1f31fb99-5d1e-4b2c-8a56-78c7e60fb840",
    "prId" : 692,
    "comments" : [
      {
        "id" : "37065181-a87f-4f0a-bc5a-3ea918021fb4",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I find this block pretty confusing. I'd just pattern match on sdkVersionM and simplify it a lot.",
        "createdAt" : "2019-04-25T11:42:36Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "78e23b20-b6eb-40d3-866a-9304c27c01ee",
        "parentId" : "37065181-a87f-4f0a-bc5a-3ea918021fb4",
        "author" : null,
        "body" : ":+1:",
        "createdAt" : "2019-04-25T12:17:33Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b0e47fc50478453b402b5094af058fe8b6e60409",
    "line" : null,
    "diffHunk" : "@@ -157,6 +160,12 @@ getSdk damlPath projectPathM =\n                     config <- readConfig path\n                     fromRightM throwIO (parseVersion config)\n \n+        sdkPathFallback :: DamlPath -> Maybe SdkVersion -> IO (Maybe SdkPath)\n+        sdkPathFallback damlPath sdkVersionM = do"
  },
  {
    "id" : "ec2db16b-c168-40e6-a91d-9d0acb8d90f6",
    "prId" : 692,
    "comments" : [
      {
        "id" : "0c9da012-9c7c-4ad7-a958-fde0e911571c",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Why not just if it is newer than the one currently running? I see no requirement to always go to the latest stable. Being always 1 behind would be just fine.",
        "createdAt" : "2019-04-25T11:43:16Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1ceeca82-0905-43b9-82df-648ea72aa08e",
        "parentId" : "0c9da012-9c7c-4ad7-a958-fde0e911571c",
        "author" : null,
        "body" : "That does make more sense here.",
        "createdAt" : "2019-04-25T12:20:43Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e47fc50478453b402b5094af058fe8b6e60409",
    "line" : 95,
    "diffHunk" : "@@ -181,3 +190,41 @@ getDispatchEnv Env{..} = do\n            , (sdkVersionEnvVar, maybe \"\" versionToString envSdkVersion)\n            , (damlAssistantEnvVar, unwrapDamlAssistantPath envDamlAssistantPath)\n            ] ++ filter ((`notElem` damlEnvVars) . fst) originalEnv\n+\n+\n+-- | Auto-installs requested version if it is missing and updates daml-assistant\n+-- if it is the latest stable version."
  },
  {
    "id" : "d3638551-cc8f-425c-8ca9-2b174ce45df3",
    "prId" : 692,
    "comments" : [
      {
        "id" : "a48434d3-cf17-4b91-911a-9cbad7a9f435",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "`either (const True) (fromMaybe True) doAutoInstallME` seems simpler than doing it in two steps.",
        "createdAt" : "2019-04-25T11:44:09Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ff7ab231-5149-4c29-922c-aecf7695346f",
        "parentId" : "a48434d3-cf17-4b91-911a-9cbad7a9f435",
        "author" : null,
        "body" : "managed to make it even simpler :-)",
        "createdAt" : "2019-04-25T12:28:49Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b0e47fc50478453b402b5094af058fe8b6e60409",
    "line" : null,
    "diffHunk" : "@@ -181,3 +190,41 @@ getDispatchEnv Env{..} = do\n            , (sdkVersionEnvVar, maybe \"\" versionToString envSdkVersion)\n            , (damlAssistantEnvVar, unwrapDamlAssistantPath envDamlAssistantPath)\n            ] ++ filter ((`notElem` damlEnvVars) . fst) originalEnv\n+\n+\n+-- | Auto-installs requested version if it is missing and updates daml-assistant\n+-- if it is the latest stable version.\n+autoInstall :: DamlPath -> Maybe SdkVersion -> IO (Maybe SdkPath)\n+autoInstall damlPath sdkVersionM = do\n+    damlConfigE <- try $ readDamlConfig damlPath\n+    let doAutoInstallME = queryDamlConfig [\"auto-install\"] =<< damlConfigE\n+        doAutoInstallM  = either (const (Just True)) id doAutoInstallME"
  },
  {
    "id" : "5a6e9ddd-4376-4bce-8b54-6640cf535bfb",
    "prId" : 692,
    "comments" : [
      {
        "id" : "cd5ed0a1-72d4-4c0f-963f-aff4813d804f",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I think this should just be if its newer than what is currently installed",
        "createdAt" : "2019-04-25T11:45:11Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a5635ce9-5bad-494f-a32c-facebf3b52c3",
        "parentId" : "cd5ed0a1-72d4-4c0f-963f-aff4813d804f",
        "author" : null,
        "body" : "Done!",
        "createdAt" : "2019-04-25T15:16:14Z",
        "updatedAt" : "2019-04-25T15:16:15Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b0e47fc50478453b402b5094af058fe8b6e60409",
    "line" : null,
    "diffHunk" : "@@ -181,3 +190,41 @@ getDispatchEnv Env{..} = do\n            , (sdkVersionEnvVar, maybe \"\" versionToString envSdkVersion)\n            , (damlAssistantEnvVar, unwrapDamlAssistantPath envDamlAssistantPath)\n            ] ++ filter ((`notElem` damlEnvVars) . fst) originalEnv\n+\n+\n+-- | Auto-installs requested version if it is missing and updates daml-assistant\n+-- if it is the latest stable version.\n+autoInstall :: DamlPath -> Maybe SdkVersion -> IO (Maybe SdkPath)\n+autoInstall damlPath sdkVersionM = do\n+    damlConfigE <- try $ readDamlConfig damlPath\n+    let doAutoInstallME = queryDamlConfig [\"auto-install\"] =<< damlConfigE\n+        doAutoInstallM  = either (const (Just True)) id doAutoInstallME\n+        doAutoInstall   = fromMaybe True doAutoInstallM\n+    whenMaybe (doAutoInstall && isJust sdkVersionM) $ do\n+        let sdkVersion = fromJust sdkVersionM\n+            sdkPath = defaultSdkPath damlPath sdkVersion\n+\n+        unlessM (doesDirectoryExist (unwrapSdkPath sdkPath)) $ do\n+            -- sdk is missing, so let's install it!\n+            -- first, determine if it is the latest stable version\n+            latestVersionE :: Either AssistantError SdkVersion\n+                <- try getLatestVersion"
  },
  {
    "id" : "4694e1d7-ff61-4a17-b951-bbd3472840a5",
    "prId" : 692,
    "comments" : [
      {
        "id" : "2a46a949-66ef-4736-9fc3-cbdf10180e77",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It took me a while to figure out why we use `stderr` in one case and `stdout` in the other so I think adding some comments to explain the reasoning might be helpful.",
        "createdAt" : "2019-04-25T11:58:53Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b0e47fc50478453b402b5094af058fe8b6e60409",
    "line" : null,
    "diffHunk" : "@@ -181,3 +190,41 @@ getDispatchEnv Env{..} = do\n            , (sdkVersionEnvVar, maybe \"\" versionToString envSdkVersion)\n            , (damlAssistantEnvVar, unwrapDamlAssistantPath envDamlAssistantPath)\n            ] ++ filter ((`notElem` damlEnvVars) . fst) originalEnv\n+\n+\n+-- | Auto-installs requested version if it is missing and updates daml-assistant\n+-- if it is the latest stable version.\n+autoInstall :: DamlPath -> Maybe SdkVersion -> IO (Maybe SdkPath)\n+autoInstall damlPath sdkVersionM = do\n+    damlConfigE <- try $ readDamlConfig damlPath\n+    let doAutoInstallME = queryDamlConfig [\"auto-install\"] =<< damlConfigE\n+        doAutoInstallM  = either (const (Just True)) id doAutoInstallME\n+        doAutoInstall   = fromMaybe True doAutoInstallM\n+    whenMaybe (doAutoInstall && isJust sdkVersionM) $ do\n+        let sdkVersion = fromJust sdkVersionM\n+            sdkPath = defaultSdkPath damlPath sdkVersion\n+\n+        unlessM (doesDirectoryExist (unwrapSdkPath sdkPath)) $ do\n+            -- sdk is missing, so let's install it!\n+            -- first, determine if it is the latest stable version\n+            latestVersionE :: Either AssistantError SdkVersion\n+                <- try getLatestVersion\n+            let isLatest = latestVersionE == Right sdkVersion\n+                options = InstallOptions\n+                    { iTargetM = Nothing\n+                    , iQuiet = QuietInstall False\n+                    , iActivate = ActivateInstall isLatest\n+                    , iForce = ForceInstall False\n+                    }\n+                env = InstallEnv\n+                    { options = options\n+                    , damlPath = damlPath\n+                    , targetVersionM = Just sdkVersion\n+                    , projectPathM = Nothing\n+                    , out = stderr"
  },
  {
    "id" : "4f111237-269e-4627-b971-33585a64dc1d",
    "prId" : 692,
    "comments" : [
      {
        "id" : "cf68700e-1809-40c8-94de-8099a42f9138",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like `autoInstall` does roughly the same check as `sdkPathFallback` at the beginning if `auto-install` is enabled and if it isn’t we use `sdkPathFallback` anyway. Can we move `sdkPathFallback` before `autoInstall` and remove the check from `autoInstall`?",
        "createdAt" : "2019-04-25T12:02:47Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bf163ae0-da5f-48fa-a907-f5eff93d5f53",
        "parentId" : "cf68700e-1809-40c8-94de-8099a42f9138",
        "author" : null,
        "body" : "Oh, that's true! :+1:",
        "createdAt" : "2019-04-25T12:10:07Z",
        "updatedAt" : "2019-04-25T15:15:29Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b0e47fc50478453b402b5094af058fe8b6e60409",
    "line" : null,
    "diffHunk" : "@@ -139,7 +141,8 @@ getSdk damlPath projectPathM =\n \n         sdkPath <- firstJustM id\n             [ fmap SdkPath <$> lookupEnv sdkPathEnvVar\n-            , pure (defaultSdkPath damlPath <$> sdkVersion)\n+            , autoInstall damlPath sdkVersion"
  },
  {
    "id" : "f4357efd-7023-49da-b9b6-334d8bcede2a",
    "prId" : 545,
    "comments" : [
      {
        "id" : "dee2a014-58c7-4ea2-93d0-7ba69000e866",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Vomit. Why does our packaging logic for Haskell do that? Can we fix it at source?",
        "createdAt" : "2019-04-16T15:18:14Z",
        "updatedAt" : "2019-04-16T15:25:15Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "817ab457-0ed5-41e2-88e2-8770f6298b87",
        "parentId" : "dee2a014-58c7-4ea2-93d0-7ba69000e866",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Our packaging logic does this because producing reasonably portable, dynamically linked binaries on Linux is fairly tricky. My attempts at fixing it so far sadly weren’t particularly successful and so far I wanted to avoid having to patch our dynamic linker :smile:",
        "createdAt" : "2019-04-16T15:22:06Z",
        "updatedAt" : "2019-04-16T15:25:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "555add9d-02d7-4d19-8548-296be64fec68",
        "parentId" : "dee2a014-58c7-4ea2-93d0-7ba69000e866",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Fair enough. Could we write an HLint rule banning getExecutablePath, if it's never going to be correct? I imagine whatever you learnt was hard won knowledge I don't want to get lost.",
        "createdAt" : "2019-04-16T15:26:51Z",
        "updatedAt" : "2019-04-16T15:26:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9bec85b0-092a-4fdc-a219-7a77da50ba46",
        "parentId" : "dee2a014-58c7-4ea2-93d0-7ba69000e866",
        "author" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "body" : "`getExecutablePath` is still usable, and we do use it below. It just doesn't return what you might expect based on the docs . . .",
        "createdAt" : "2019-04-16T15:31:58Z",
        "updatedAt" : "2019-04-16T15:31:58Z",
        "lastEditedBy" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa796545cb4db6ebce53863f0a269efae559f20",
    "line" : 22,
    "diffHunk" : "@@ -57,6 +59,15 @@ testDamlEnv Env{..} = firstJustM (\\(test, msg) -> unlessMaybeM test (pure msg))\n       , \"The project directory does not exist. Please check if DAML_PROJECT is incorrectly set.\")\n     ]\n \n+-- | Determine the absolute path to the assistant.\n+getDamlAssistantPath :: Applicative f => DamlPath -> f DamlAssistantPath\n+getDamlAssistantPath (DamlPath damlPath)"
  },
  {
    "id" : "58f3aadf-0e77-455e-9ec1-34be25a5598d",
    "prId" : 337,
    "comments" : [
      {
        "id" : "7dc76570-c94f-48d3-a55a-83493c4cb66e",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "```suggestion\r\n                Just (SdkVersion v)\r\n```\r\nGiven that there is another use of `pure` 3 lines above this for a different instance, I think it’s easier to understand this if you make it explicit which instance is being used.",
        "createdAt" : "2019-04-10T06:47:04Z",
        "updatedAt" : "2019-04-10T08:58:45Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d2af5f3e-7526-408a-8086-7c0dfbaec222",
        "parentId" : "7dc76570-c94f-48d3-a55a-83493c4cb66e",
        "author" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "body" : "yep, this makes sense\r\n",
        "createdAt" : "2019-04-10T07:43:18Z",
        "updatedAt" : "2019-04-10T08:58:45Z",
        "lastEditedBy" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c63dc83e702244360b482149bc1bc3dfc388c2b4",
    "line" : null,
    "diffHunk" : "@@ -104,7 +105,11 @@ getSdk damlPath projectPathM =\n     wrapErr \"Determining SDK version and path.\" $ do\n \n         sdkVersion <- firstJustM id\n-            [ fmap (SdkVersion . pack) <$> lookupEnv sdkVersionEnvVar\n+            [ lookupEnv sdkVersionEnvVar >>= \\ vstrM -> pure $ do\n+                vstr <- vstrM\n+                v <- eitherToMaybe (V.fromText (pack vstr))\n+                pure (SdkVersion v)"
  },
  {
    "id" : "1f59fa87-a14f-408c-8a8c-79e62488b5c7",
    "prId" : 337,
    "comments" : [
      {
        "id" : "abcd9769-3a58-45a5-9756-cb73fee6f868",
        "parentId" : null,
        "author" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "body" : "Should we throw an for subdirs that cannot be parsed instead of silently filtering them?\r\nWhat does `preversions` stand for? It sounds similar to `prereleases` but that doesn’t seem to be accurate?",
        "createdAt" : "2019-04-10T06:49:10Z",
        "updatedAt" : "2019-04-10T08:58:45Z",
        "lastEditedBy" : {
          "login" : "moritzkiefer-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/45630097?u=88b1986f5b2d192d97f54101aaa165147493ebdc&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3a62b8ad-5f2a-4340-9d8b-8d17c1653a3c",
        "parentId" : "abcd9769-3a58-45a5-9756-cb73fee6f868",
        "author" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "body" : "it's just a variable name -_- I guess `semvers` would be more accurate",
        "createdAt" : "2019-04-10T07:44:27Z",
        "updatedAt" : "2019-04-10T08:58:45Z",
        "lastEditedBy" : {
          "login" : "fmota-da",
          "name" : "Fran",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/45589443?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c63dc83e702244360b482149bc1bc3dfc388c2b4",
    "line" : null,
    "diffHunk" : "@@ -146,11 +149,10 @@ getLatestInstalledSdkVersion (DamlPath path) = do\n             Left _ -> pure Nothing\n             Right dirlist -> do\n                 subdirs <- filterM (doesDirectoryExist . (dpath </>)) dirlist\n-                -- TODO (FAFM): warn if subdirs /= dirlist\n-                --  (i.e. $DAML_HOME/sdk is polluted with non-dirs).\n-                let versions = filter (\"nightly-\" `isPrefixOf`) subdirs\n-                    -- TODO (FAFM): configurable channels\n-                pure $ fmap (SdkVersion . pack) (maximumMay versions)\n+                let preversions = mapMaybe (eitherToMaybe . V.fromText . pack) subdirs"
  }
]