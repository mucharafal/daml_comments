[
  {
    "id" : "0dfddc21-63c5-4d69-aef0-6c388a1873c4",
    "prId" : 1837,
    "comments" : [
      {
        "id" : "15335704-8b3e-4a3a-b5da-52738783ffc4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What is the usecase for this?",
        "createdAt" : "2019-06-24T10:55:14Z",
        "updatedAt" : "2019-06-24T12:39:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9cb481ef-8763-439e-85b2-234a77677ba0",
        "parentId" : "15335704-8b3e-4a3a-b5da-52738783ffc4",
        "author" : null,
        "body" : "For when you want to run a script using `--on-start` and then quit after the script finishes (e.g. for testing).",
        "createdAt" : "2019-06-24T11:24:44Z",
        "updatedAt" : "2019-06-24T12:39:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c5d42e3b-a4b9-4796-8aa5-645b02bddfa0",
        "parentId" : "15335704-8b3e-4a3a-b5da-52738783ffc4",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks, sounds like a reasonable usecase. An alternative worth considering might be to exit if the start script fails with a non-zero exit code but I donâ€™t feel strongly about this so your choice.",
        "createdAt" : "2019-06-24T11:30:34Z",
        "updatedAt" : "2019-06-24T12:39:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1b621340-12a4-4f40-a280-ccde9e5219e8",
        "parentId" : "15335704-8b3e-4a3a-b5da-52738783ffc4",
        "author" : null,
        "body" : "Seems reasonable to me to make `daml start` exit with the exit code of the `--on-start` command whenever it's non-zero.",
        "createdAt" : "2019-06-24T13:59:45Z",
        "updatedAt" : "2019-06-24T13:59:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8231d2448a81cd780c6ffb476357ba6d8683ef",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +539,543 @@\n-- | Whether `daml start` should wait for Ctrl+C or interrupt after starting servers.\nnewtype WaitForSignal = WaitForSignal Bool\n\nrunStart :: StartNavigator -> OpenBrowser -> Maybe String -> WaitForSignal -> IO ()"
  },
  {
    "id" : "4b822977-89cb-4e00-ab27-2b56e5168cd6",
    "prId" : 1212,
    "comments" : [
      {
        "id" : "60a6262b-a36c-45e3-8bac-fcbd8217bf83",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we need the `projectName == targetFolder` check here?",
        "createdAt" : "2019-05-17T10:02:33Z",
        "updatedAt" : "2019-05-17T10:30:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d5482e45-3eea-46ed-9fde-dba45c0302f9",
        "parentId" : "60a6262b-a36c-45e3-8bac-fcbd8217bf83",
        "author" : null,
        "body" : "My thinking is that if the user passes a targetFolder that isn't a straight up filename (i.e. contains path separators), then they probably know what they're doing.",
        "createdAt" : "2019-05-17T10:12:42Z",
        "updatedAt" : "2019-05-17T10:30:12Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a779562c-12b1-4fb9-8e0a-f2380af825b0",
        "parentId" : "60a6262b-a36c-45e3-8bac-fcbd8217bf83",
        "author" : null,
        "body" : "There's a world of difference between `daml new quickstart-java` and `daml new quickstart-java/` :-)\r\n",
        "createdAt" : "2019-05-17T10:15:22Z",
        "updatedAt" : "2019-05-17T10:30:12Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ca687b84-d267-45d9-badc-e7252fb9e5d1",
        "parentId" : "60a6262b-a36c-45e3-8bac-fcbd8217bf83",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Sounds very reasonable, would be nice to capture this thinking in a comment.",
        "createdAt" : "2019-05-17T10:16:03Z",
        "updatedAt" : "2019-05-17T10:30:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "08905771-81c4-4092-9fdb-25f5ea3a2252",
        "parentId" : "60a6262b-a36c-45e3-8bac-fcbd8217bf83",
        "author" : null,
        "body" : "Ok, i'll add it :)",
        "createdAt" : "2019-05-17T10:19:32Z",
        "updatedAt" : "2019-05-17T10:30:12Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "51ed640157df86a53b0d03ed2732f76d115e8db0",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +367,371 @@    -- contains path separators), then it's likely that they did\n    -- intend to pass a target folder and not a template name.\n    when (isNothing templateNameM && projectName == targetFolder) $ do\n        whenM (doesDirectoryExist (templatesFolder </> projectName)) $ do\n            hPutStr stderr $ unlines"
  },
  {
    "id" : "de1c535d-4ed3-4221-8875-c5e43ec33d76",
    "prId" : 1212,
    "comments" : [
      {
        "id" : "d77dd2ad-dc11-4a98-b779-b8929c421e49",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would probably just enclose it in `'` and ignore the case where `'` is in the project name but your choice :smile:",
        "createdAt" : "2019-05-17T10:05:00Z",
        "updatedAt" : "2019-05-17T10:30:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "eb5cb299-fb46-4c18-a6d6-69bf0bdd7586",
        "parentId" : "d77dd2ad-dc11-4a98-b779-b8929c421e49",
        "author" : null,
        "body" : "I find it annoying when tools add quotation marks around paths when they aren't strictly necessary ... so I'll stick with this for now.",
        "createdAt" : "2019-05-17T10:18:23Z",
        "updatedAt" : "2019-05-17T10:30:12Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "51ed640157df86a53b0d03ed2732f76d115e8db0",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +445,449 @@escapePath :: FilePath -> FilePath\nescapePath p | isWindows = concat [\"\\\"\", p, \"\\\"\"] -- Windows is a mess\nescapePath p = p >>= \\c ->\n    if c `elem` (\" \\\\\\\"\\'$*{}#\" :: String)\n        then ['\\\\', c]"
  },
  {
    "id" : "befc3bf9-7f55-4c3f-8b31-591ecd4d0b68",
    "prId" : 1080,
    "comments" : [
      {
        "id" : "85004260-775e-4eec-9399-b60cd59fc3c5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Great documentation, thank you!",
        "createdAt" : "2019-05-10T13:12:24Z",
        "updatedAt" : "2019-05-10T15:44:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7c962901-f4f3-40c6-afe9-6ec54158da3e",
        "parentId" : "85004260-775e-4eec-9399-b60cd59fc3c5",
        "author" : null,
        "body" : "Thanks :-)",
        "createdAt" : "2019-05-10T13:28:57Z",
        "updatedAt" : "2019-05-10T15:44:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "02d6ebc6dbdedfba174e31f1415e5bd64f03b1a6",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +131,135 @@getTemplatesFolder = fmap (</> \"templates\") getSdkPath\n\n-- | Initialize a daml project in the current or specified directory.\n-- It will do the following (first that applies):\n--"
  },
  {
    "id" : "40eed1ad-5813-4964-856b-e465a33e4de5",
    "prId" : 1080,
    "comments" : [
      {
        "id" : "219d3d70-f1e7-4aeb-90de-15f0d94772aa",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Can we get a function `upgradeOldProject` and split this logic into a separate individual piece? I imagine you're going to want to write a couple of tests for that piece.",
        "createdAt" : "2019-05-10T15:18:06Z",
        "updatedAt" : "2019-05-10T15:44:24Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02d6ebc6dbdedfba174e31f1415e5bd64f03b1a6",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +202,206 @@    daProjectRootM <- findDaProjectRoot targetFolderAbs\n    whenJust daProjectRootM $ \\projectRoot -> do\n        when (targetFolderAbs /= projectRoot) $ do\n            let projectRootRel = makeRelative currentDir projectRoot\n            hPutStr stderr $ unlines"
  },
  {
    "id" : "ad143bf3-4415-4991-994a-6936e0cca797",
    "prId" : 1080,
    "comments" : [
      {
        "id" : "3f96976e-65f3-4d05-a372-aec35d39f9a5",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Not sure how I feel about `exitSuccess` as a `return` - feels a bit like exceptions as control flow... I can live with it though, the code is very neat.",
        "createdAt" : "2019-05-10T15:18:58Z",
        "updatedAt" : "2019-05-10T15:44:24Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02d6ebc6dbdedfba174e31f1415e5bd64f03b1a6",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +265,269 @@\n        putStrLn (\"Done! Please verify \" <> projectConfigRel)\n        exitSuccess\n\n"
  },
  {
    "id" : "c5c3e4eb-3ff0-411a-9adb-cea44a83c444",
    "prId" : 1080,
    "comments" : [
      {
        "id" : "042664e0-ae50-48e8-a991-1e98df36b705",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I tend to hack it up with `show` and then remove the first/last `\"` characters...",
        "createdAt" : "2019-05-10T15:20:05Z",
        "updatedAt" : "2019-05-10T15:44:24Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02d6ebc6dbdedfba174e31f1415e5bd64f03b1a6",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +311,315 @@        -- why don't any good filepath libraries have something like this?\n        escapePath :: FilePath -> FilePath\n        escapePath = concatMap $ \\c ->\n            if c `elem` (\" \\\\\\\"\\'$\" :: String)\n                then ['\\\\', c]"
  },
  {
    "id" : "94a0f169-d35e-4f53-bda3-48f013c69dea",
    "prId" : 993,
    "comments" : [
      {
        "id" : "719104a1-0f1f-45fc-a794-8e6c5aa80e27",
        "parentId" : null,
        "author" : null,
        "body" : "This is the default output path of `build` even without a `-o` argument. Is there an easy way to just use the same path as `build`? e.g. if we want to make the build location configurable in the future, we currently have to change it here as well to maintain consistency, but it would be nicer if they both got the \".dar\" path from daml-project-config or something.",
        "createdAt" : "2019-05-08T07:54:20Z",
        "updatedAt" : "2019-05-08T07:55:27Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "7d201f7c-cc0c-456c-b244-353dece7d16e",
        "parentId" : "719104a1-0f1f-45fc-a794-8e6c5aa80e27",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I guess we could move it to `daml-project-config` but that also feels like the wrong place for it. Not passing `-o` doesnâ€™t really help since we need to pass a path to sandbox and navigator so we still have to specify an explicit path. Iâ€™d say we probably change this sufficiently rarely that I donâ€™t see this being a big problem.",
        "createdAt" : "2019-05-08T07:57:05Z",
        "updatedAt" : "2019-05-08T07:57:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "47c766e2fbd4107330af35c7ab8380fccd8c796e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +213,217 @@    let darPath = \"dist\" </> projectName <> \".dar\"\n    assistant <- getDamlAssistant\n    callCommand (unwords $ assistant : [\"build\", \"-o\", darPath])\n    let scenarioArgs = maybe [] (\\scenario -> [\"--scenario\", scenario]) mbScenario\n    withSandbox sandboxPort (darPath : scenarioArgs) $ \\sandboxPh -> do"
  },
  {
    "id" : "9bf799e5-d8a4-4bd8-967a-224f7f4b79f5",
    "prId" : 693,
    "comments" : [
      {
        "id" : "33760014-f5ce-4085-8fc7-cd791b0dc376",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "The reason is that `code` is really `code.cmd` which can only be run through a shell.",
        "createdAt" : "2019-04-25T11:49:48Z",
        "updatedAt" : "2019-04-25T11:50:22Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6673ed1ca99d1962f2ca3672c7c9fb1d9d415bc2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +78,82 @@    installExtension vscodeExtensionSrcDir vscodeExtensionTargetDir\n    -- Note that it is important that we use `shell` rather than `proc` here as\n    -- `proc` will look for `code.exe` in PATH which does not exist.\n    exitCode <- withCreateProcess (shell $ unwords $ \"code\" : remainingArguments) $ \\_ _ _ -> waitForProcess\n    exitWith exitCode"
  },
  {
    "id" : "e028c701-4e84-4c89-ad16-2a7d745db4fd",
    "prId" : 545,
    "comments" : [
      {
        "id" : "5172fc7e-180c-4c7c-8721-203c79b90fdb",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Will this always build? Should we add short circuiting to `daml build`?",
        "createdAt" : "2019-04-16T15:02:15Z",
        "updatedAt" : "2019-04-16T15:25:15Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "70034b06-cfd4-47ff-a8ec-de948932d88a",
        "parentId" : "5172fc7e-180c-4c7c-8721-203c79b90fdb",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "For now it will always build. We should definitely make sure that `daml build` does not always rebuild.",
        "createdAt" : "2019-04-16T15:26:29Z",
        "updatedAt" : "2019-04-16T15:26:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "352ee159-4c2b-4aee-bf0d-db1a8c3483d3",
        "parentId" : "5172fc7e-180c-4c7c-8721-203c79b90fdb",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Sure. Can we get a ticket to that effect?",
        "createdAt" : "2019-04-16T15:27:47Z",
        "updatedAt" : "2019-04-16T15:27:47Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "adb1e1bb-b7eb-4ae6-bb38-a14ef0cf705d",
        "parentId" : "5172fc7e-180c-4c7c-8721-203c79b90fdb",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "https://github.com/digital-asset/daml/issues/550",
        "createdAt" : "2019-04-16T15:31:42Z",
        "updatedAt" : "2019-04-16T15:31:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa796545cb4db6ebce53863f0a269efae559f20",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +153,157 @@    let darName = projectName <> \".dar\"\n    assistant <- getDamlAssistant\n    callProcess assistant [\"build\", \"-o\", darName]\n    withSandbox sandboxPort [darName] $ \\sandboxPh -> do\n        parties <- getProjectParties"
  }
]