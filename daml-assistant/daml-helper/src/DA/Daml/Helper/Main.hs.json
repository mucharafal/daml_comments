[
  {
    "id" : "af2ce0d9-b10d-4f2a-8b2d-07c05f37cf57",
    "prId" : 7700,
    "comments" : [
      {
        "id" : "d73c6cd6-bd7a-4c8f-87d1-4d1fe654912d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "given that the command is called `daml json-api` not `daml http-json-api` how do you feel about calling this `--json-api`?",
        "createdAt" : "2020-10-15T14:45:41Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "639f180d-6c98-40e6-b069-22b4c9c755e2",
        "parentId" : "d73c6cd6-bd7a-4c8f-87d1-4d1fe654912d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "sure.",
        "createdAt" : "2020-10-15T15:04:40Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : null,
    "diffHunk" : "@@ -340,6 +343,12 @@ commandParser = subparser $ fold\n                 , clientMetadataPlugin = Nothing\n                 }\n \n+    httpJsonFlag :: ShowJsonApi -> Parser LedgerApi\n+    httpJsonFlag (ShowJsonApi showJsonApi) = flag GRPC HttpJson $\n+        (if showJsonApi then mempty else internal)\n+        <> long \"http-json-api\""
  },
  {
    "id" : "700c2086-dc45-4650-a105-f2d4071c453b",
    "prId" : 7700,
    "comments" : [
      {
        "id" : "eb4391ee-054a-4573-aa88-c91806a708dd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What do we gain by only hiding it instead of doing something like `if not showJsonApi then pure GRPC else flag …` so you cannot even use it?",
        "createdAt" : "2020-10-15T14:46:40Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3ea03021-65ce-4ee7-9a2f-00f6586ce733",
        "parentId" : "eb4391ee-054a-4573-aa88-c91806a708dd",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "agreed, removed the flag for unsupported commands.",
        "createdAt" : "2020-10-15T15:25:06Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : null,
    "diffHunk" : "@@ -340,6 +343,12 @@ commandParser = subparser $ fold\n                 , clientMetadataPlugin = Nothing\n                 }\n \n+    httpJsonFlag :: ShowJsonApi -> Parser LedgerApi\n+    httpJsonFlag (ShowJsonApi showJsonApi) = flag GRPC HttpJson $"
  },
  {
    "id" : "82cd4b18-b2d2-453f-965c-4cae41edb6e7",
    "prId" : 6877,
    "comments" : [
      {
        "id" : "2a29b1f1-6006-4649-ade1-6cff33eee5f9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What happens if I do\r\n```sh\r\ndaml new foobar create-daml-app --template create-daml-app\r\n```\r\n?",
        "createdAt" : "2020-07-27T13:57:13Z",
        "updatedAt" : "2020-07-27T14:03:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9f4579b2-72d7-4670-ad96-773b5c5963cd",
        "parentId" : "2a29b1f1-6006-4649-ade1-6cff33eee5f9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```\r\nInvalid option `--template'\r\n```\r\nNot great but good enough imho (and definitely better than no error).",
        "createdAt" : "2020-07-27T14:04:52Z",
        "updatedAt" : "2020-07-27T14:04:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4922c4ba-7e47-4f99-a260-93f666f08a36",
        "parentId" : "2a29b1f1-6006-4649-ade1-6cff33eee5f9",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yeah, I agree that's good enough for now.",
        "createdAt" : "2020-07-27T15:00:22Z",
        "updatedAt" : "2020-07-27T15:00:22Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "200f6d47bf9183f810c1ffea79c1a24d0b286498",
    "line" : 18,
    "diffHunk" : "@@ -129,11 +129,19 @@ commandParser = subparser $ fold\n         <*> strOption (long \"logback-config\")\n         <*> stdinCloseOpt\n \n-    newCmd = asum\n+    newCmd =\n+        let tplOpts :: HasMetavar a => Mod a String\n+            tplOpts =\n+                metavar \"TEMPLATE\" <>\n+                help (\"Name of the template used to create the project (default: \" <> defaultProjectTemplate <> \")\")\n+        in asum\n         [ ListTemplates <$ flag' () (long \"list\" <> help \"List the available project templates.\")\n         , New\n             <$> argument str (metavar \"TARGET_PATH\" <> help \"Path where the new project should be located\")\n-            <*> optional (argument str (metavar \"TEMPLATE\" <> help (\"Name of the template used to create the project (default: \" <> defaultProjectTemplate <> \")\")))\n+            <*> optional\n+                  (strOption (long \"template\" <> tplOpts) <|>\n+                   argument str tplOpts\n+                  )"
  },
  {
    "id" : "1f35a6f3-a8f7-4c49-88f0-e6621d43d113",
    "prId" : 6774,
    "comments" : [
      {
        "id" : "fdae2413-9369-429c-8136-ee26b254b82d",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n        , help \"Timeout of gRPC operations in seconds. Defaults to 30s. Must be > 0.\"\r\n```",
        "createdAt" : "2020-07-17T11:45:52Z",
        "updatedAt" : "2020-07-17T12:33:15Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9e7a0d49-ac54-4906-ae29-2c3fbbfac4a6",
        "parentId" : "fdae2413-9369-429c-8136-ee26b254b82d",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "The reason I think this is worth mentioning is there are timeout APIs out there where `-1` or `0` have a special \"unlimited\" meaning.",
        "createdAt" : "2020-07-17T12:07:13Z",
        "updatedAt" : "2020-07-17T12:33:15Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "40557e4a8074ed5155897ca5083af6462ccc7304",
    "line" : null,
    "diffHunk" : "@@ -337,6 +338,14 @@ commandParser = subparser $ fold\n         <> metavar \"TOKEN_PATH\"\n         <> help \"Path to the token-file for ledger authorization\"\n \n+    timeoutOption :: Parser TimeoutSeconds\n+    timeoutOption = option auto $ mconcat\n+        [ long \"timeout\"\n+        , metavar \"TIMEOUT\"\n+        , value 30\n+        , help \"Timeout of gRPC operations in seconds. Defaults to 30s\""
  },
  {
    "id" : "41c2fbf0-febd-46c6-b7c1-bd75e8e95748",
    "prId" : 6774,
    "comments" : [
      {
        "id" : "4c262bfb-4c69-47e2-9be1-dc7d7ceaa831",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "```suggestion\r\n        , metavar \"INT\"\r\n```",
        "createdAt" : "2020-07-17T11:46:01Z",
        "updatedAt" : "2020-07-17T12:33:15Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "40557e4a8074ed5155897ca5083af6462ccc7304",
    "line" : null,
    "diffHunk" : "@@ -337,6 +338,14 @@ commandParser = subparser $ fold\n         <> metavar \"TOKEN_PATH\"\n         <> help \"Path to the token-file for ledger authorization\"\n \n+    timeoutOption :: Parser TimeoutSeconds\n+    timeoutOption = option auto $ mconcat\n+        [ long \"timeout\"\n+        , metavar \"TIMEOUT\""
  },
  {
    "id" : "a2886b21-4bdb-4746-994a-a902ec1765c6",
    "prId" : 5295,
    "comments" : [
      {
        "id" : "787f8a1a-0520-4085-9eb9-9fbe6fe94499",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        <*> (SandboxClassic <$> flagYesNoAuto \"sandbox-classic\" False \"Run with sandbox-classic.\" idm)\r\n```\r\nI somewhat wonder if `flagYesNoAuto` is really a good idea for this. I think we originally added it because negative options sound weird (I think `--open-browser=no` was the first one) but for this one and quite a few others, I’m not sure an `auto` option makes sense and whether it needs to take an argument at all. e.g. `daml start --sandbox-classic` doesn’t have the issue of having a negative option.",
        "createdAt" : "2020-03-31T10:26:28Z",
        "updatedAt" : "2020-03-31T11:48:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "797b4cec-916c-4dd9-a0c8-65024c14e95f",
        "parentId" : "787f8a1a-0520-4085-9eb9-9fbe6fe94499",
        "author" : null,
        "body" : "Ok, changed it to a switch.",
        "createdAt" : "2020-03-31T11:24:59Z",
        "updatedAt" : "2020-03-31T11:48:45Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7ea70f7b86fceb49148130a60f1be2a5ac6c5098",
    "line" : null,
    "diffHunk" : "@@ -130,6 +131,7 @@ commandParser = subparser $ fold\n         <*> (JsonApiOptions <$> many (strOption (long \"json-api-option\" <> metavar \"JSON_API_OPTION\" <> help \"Pass option to HTTP JSON API\")))\n         <*> (ScriptOptions <$> many (strOption (long \"script-option\" <> metavar \"SCRIPT_OPTION\" <> help \"Pass option to DAML script interpreter\")))\n         <*> stdinCloseOpt\n+        <*> (SandboxClassic <$> flagYesNoAuto \"sandbox-classic\" False \"Run with old sandbox.\" idm)"
  },
  {
    "id" : "7e31907d-bc74-4a65-acf6-e53546c74dd6",
    "prId" : 5259,
    "comments" : [
      {
        "id" : "8a8fafe1-9e2e-48d3-abf3-43db30169c5b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`create-daml-app foobar` now does something different from `new foobar create-daml-app`. We should either kill the command `create-daml-app` or make it do the same.",
        "createdAt" : "2020-03-30T06:51:58Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cdb0045c-2c04-4a47-aa8d-5ab3f4db7ead",
        "parentId" : "8a8fafe1-9e2e-48d3-abf3-43db30169c5b",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Planning to kill the `create-daml-app` command and just use `daml new`. I was keeping it in for now in case we still want to fetch from the repo in a transition period or something",
        "createdAt" : "2020-03-30T22:19:27Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "874cfad7-c46d-47fa-8ce6-151fb2728067",
        "parentId" : "8a8fafe1-9e2e-48d3-abf3-43db30169c5b",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "No need to keep backwards-compatibility for a feature that's never been released, even in snapshots.",
        "createdAt" : "2020-03-31T14:24:34Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cc74a78d-3cc5-4d6e-89bf-7e864a625599",
        "parentId" : "8a8fafe1-9e2e-48d3-abf3-43db30169c5b",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I made `daml create-daml-app foo` an alias for `daml new foo create-daml-app` for now.",
        "createdAt" : "2020-04-01T01:33:34Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e0e25e64-9ea6-46f1-a88e-f0764a4eeec6",
        "parentId" : "8a8fafe1-9e2e-48d3-abf3-43db30169c5b",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Will need to figure out what to do with the helper tests though",
        "createdAt" : "2020-04-01T01:56:35Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0fc0444f-ddcb-42eb-a235-d89bb902bd42",
        "parentId" : "8a8fafe1-9e2e-48d3-abf3-43db30169c5b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just kill the helper tests. They don’t make any sense now. As long as we have an integration test that checks that at least `daml new` and `daml build` works, we should be good.",
        "createdAt" : "2020-04-01T06:28:24Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fd1e1e34624b602bb4585644d0d7669f4ddafa8",
    "line" : null,
    "diffHunk" : "@@ -308,9 +308,7 @@ runCommand = \\case\n     RunJar {..} ->\n         (if shutdownStdinClose then withCloseOnStdin else id) $\n         runJar jarPath mbLogbackConfig remainingArguments\n-    New {..}\n-        | templateNameM == Just \"create-daml-app\" -> runCreateDamlApp targetFolder\n-        | otherwise -> runNew targetFolder templateNameM [] []\n+    New {..} -> runNew targetFolder templateNameM [] []\n     CreateDamlApp{..} -> runCreateDamlApp targetFolder"
  },
  {
    "id" : "da32ea74-2fb2-422d-94f1-8dc9172b061b",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "ead50168-1075-4209-a20d-5730068aa3dd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        <*> argument str (metavar \"PKGID\" <> help \"Fetch DAR for this package identifier.\")\r\n```\r\nPID is very commonly used as process ID.",
        "createdAt" : "2020-03-27T07:30:44Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e0879859-b442-41e5-911e-d08efc92e70a",
        "parentId" : "ead50168-1075-4209-a20d-5730068aa3dd",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-27T11:59:55Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : null,
    "diffHunk" : "@@ -221,6 +225,11 @@ commandParser = subparser $ fold\n         <$> ledgerFlags\n         <*> optional (argument str (metavar \"PATH\" <> help \"DAR file to upload (defaults to project DAR)\"))\n \n+    ledgerFetchDarCmd = LedgerFetchDar\n+        <$> ledgerFlags\n+        <*> argument str (metavar \"PID\" <> help \"Fetch DAR for this package identifier.\")"
  },
  {
    "id" : "f132b4b7-1ce6-484c-b889-d2b768e3c1a4",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "b7259ab9-4fc6-4ae6-b6e9-f4adcd474226",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Two position string arguments is confusing and doesn’t match the UX of e.g. `daml build -o`. How about we use `-o` for this and something like `--main-package-id` for the other one? Yes it’s a bit more to type but I don’t expect that this is a command that people will run frequently so being explicit seems more useful.",
        "createdAt" : "2020-03-27T07:31:56Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e00aa96-37e8-426c-9704-f1f1f3ae65df",
        "parentId" : "b7259ab9-4fc6-4ae6-b6e9-f4adcd474226",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-27T12:00:03Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : null,
    "diffHunk" : "@@ -221,6 +225,11 @@ commandParser = subparser $ fold\n         <$> ledgerFlags\n         <*> optional (argument str (metavar \"PATH\" <> help \"DAR file to upload (defaults to project DAR)\"))\n \n+    ledgerFetchDarCmd = LedgerFetchDar\n+        <$> ledgerFlags\n+        <*> argument str (metavar \"PID\" <> help \"Fetch DAR for this package identifier.\")\n+        <*> argument str (metavar \"PATH\" <> help \"Save fetched DAR into this file.\")"
  },
  {
    "id" : "680eb479-34f8-422d-a356-5412d295bb20",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "f5787b3a-d3a3-488b-824b-b7102d0a3b62",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would recommend to have `pid` here be of type `PackageId` already instead of doing the conversion later.",
        "createdAt" : "2020-03-27T07:41:11Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 4,
    "diffHunk" : "@@ -56,6 +56,7 @@ data Command\n     | LedgerListParties { flags :: LedgerFlags, json :: JsonFlag }\n     | LedgerAllocateParties { flags :: LedgerFlags, parties :: [String] }\n     | LedgerUploadDar { flags :: LedgerFlags, darPathM :: Maybe FilePath }\n+    | LedgerFetchDar { flags :: LedgerFlags, pid :: String, saveAs :: FilePath }"
  },
  {
    "id" : "23d0b1f2-7475-408d-9ee6-f686d835debd",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "02e8c0d6-d80d-4108-95fa-8bc5058da8eb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        <*> option str (long \"main-package-id\" <> metavar \"PKGID\" <> help \"Fetch DAR for this package identifier.\")\r\n```",
        "createdAt" : "2020-03-27T11:57:57Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : null,
    "diffHunk" : "@@ -245,6 +249,11 @@ commandParser = subparser $ fold\n         <$> ledgerFlags\n         <*> optional (argument str (metavar \"PATH\" <> help \"DAR file to upload (defaults to project DAR)\"))\n \n+    ledgerFetchDarCmd = LedgerFetchDar\n+        <$> ledgerFlags\n+        <*> option str (long \"main-package-id\" <> metavar \"PGKID\" <> help \"Fetch DAR for this package identifier.\")"
  },
  {
    "id" : "b63a41b0-5f58-4d54-a697-7735aa92fb0e",
    "prId" : 5155,
    "comments" : [
      {
        "id" : "37c31039-9588-4526-902d-574373d7e179",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We're using `--start-navigator=yes` in the example in the docs below. Should we change that to `--start-navigator=true` then?",
        "createdAt" : "2020-03-24T12:24:08Z",
        "updatedAt" : "2020-03-24T12:28:47Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "670d974a-dcb5-4a78-a534-136e0354973d",
        "parentId" : "37c31039-9588-4526-902d-574373d7e179",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, I’ve switched to `true`.",
        "createdAt" : "2020-03-24T12:28:51Z",
        "updatedAt" : "2020-03-24T12:28:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4f5f182db58024e2ea36dd5ff55a4bd69b04c1b5",
    "line" : 36,
    "diffHunk" : "@@ -122,6 +122,22 @@ commandParser = subparser $ fold\n         <*> (ScriptOptions <$> many (strOption (long \"script-option\" <> metavar \"SCRIPT_OPTION\" <> help \"Pass option to DAML script interpreter\")))\n         <*> stdinCloseOpt\n \n+    navigatorFlag =\n+        -- We do not use flagYesNoAuto here since that doesn’t allow us to differentiate\n+        -- if the flag was passed explicitly or not.\n+        StartNavigator <$>\n+        option reader (long \"start-navigator\" <> help helpText <> completeWith [\"true\", \"false\"] <> idm)\n+        where\n+            reader = eitherReader $ \\case\n+                -- We allow for both yes and true since we want a boolean in daml.yaml\n+                \"true\" -> Right True\n+                \"yes\" -> Right True\n+                \"false\" -> Right False\n+                \"no\" -> Right False\n+                \"auto\" -> Right True\n+                s -> Left (\"Expected \\\"yes\\\", \\\"true\\\", \\\"no\\\", \\\"false\\\" or \\\"auto\\\" but got \" <> show s)\n+            -- To make things less confusing, we do not mention yes, no and auto here."
  },
  {
    "id" : "ecf48350-3775-4588-97f7-afcf1bb56952",
    "prId" : 5155,
    "comments" : [
      {
        "id" : "9a2e4936-92e0-406f-9040-20e84c7b8d87",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we change `flagYesNoAuto` to have the behaviour we need here in a followup PR?",
        "createdAt" : "2020-03-24T12:25:11Z",
        "updatedAt" : "2020-03-24T12:28:47Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5261f2c7-61e6-4748-a893-17358290bb3a",
        "parentId" : "9a2e4936-92e0-406f-9040-20e84c7b8d87",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "There are two things that are different here:\r\n\r\n1. We need to be able to check if the flag was passed or not.\r\n2. We want `true` and `false` to work as well. \r\n\r\nThere are quite a few other uses of `flagYesNoAuto` that don’t need this so for now I would leave it as is. I somewhat wonder if the `flagYesNoAuto` thing is a good idea anyway and we should just switch to `true` `false` and no `auto` everywhere but I’m not touching that for now.",
        "createdAt" : "2020-03-24T13:04:22Z",
        "updatedAt" : "2020-03-24T13:04:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4f5f182db58024e2ea36dd5ff55a4bd69b04c1b5",
    "line" : 24,
    "diffHunk" : "@@ -122,6 +122,22 @@ commandParser = subparser $ fold\n         <*> (ScriptOptions <$> many (strOption (long \"script-option\" <> metavar \"SCRIPT_OPTION\" <> help \"Pass option to DAML script interpreter\")))\n         <*> stdinCloseOpt\n \n+    navigatorFlag =\n+        -- We do not use flagYesNoAuto here since that doesn’t allow us to differentiate\n+        -- if the flag was passed explicitly or not."
  },
  {
    "id" : "e74c724b-3a2a-4ae9-ad28-829129e564dc",
    "prId" : 5152,
    "comments" : [
      {
        "id" : "4c99705b-77c9-4896-b559-8f5f1ad0e20c",
        "parentId" : null,
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I'm not entirely sure I agree it should get special treatment — using the generic syntax removes magic and hints at the existence of other templates — but if we do make it special, why not go a bit further? `daml create app` sounds a lot nicer to me.",
        "createdAt" : "2020-03-24T17:02:19Z",
        "updatedAt" : "2020-03-24T17:02:20Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7374e4ab-4649-40bc-80b8-5801f0066297",
        "parentId" : "4c99705b-77c9-4896-b559-8f5f1ad0e20c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`daml create app` looks confusing. That sounds like `daml create`  also accepts other parameters. `daml create-app` would be reasonable but I’m not sure that’s better given that we refer to it as `create-daml-app` everywhere else.\r\n\r\nAs for making it a special command `daml create-daml-app foobar` seems sufficiently nicer to me for a GTG than `daml new foobar create-daml-app` that I think it makes sense to have it. (Note that `daml new foobar create-daml-app` still works if you want to use it)",
        "createdAt" : "2020-03-24T17:08:11Z",
        "updatedAt" : "2020-03-24T17:08:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "246e1510-ec11-4fd7-bed6-8654301e22df",
        "parentId" : "4c99705b-77c9-4896-b559-8f5f1ad0e20c",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "An even nicer-to-have would be `daml create-daml-app` creating a directory called `create-daml-app` by default, to avoid `daml create-daml-app create-daml-app`.",
        "createdAt" : "2020-03-24T17:32:59Z",
        "updatedAt" : "2020-03-24T17:33:00Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "66f26c32-9104-41c9-a73c-86be823a526a",
        "parentId" : "4c99705b-77c9-4896-b559-8f5f1ad0e20c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I considered that but I’m not sure anyone wants to call their project `create-daml-app` so that seems a bit silly.",
        "createdAt" : "2020-03-24T17:33:59Z",
        "updatedAt" : "2020-03-24T17:33:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "00a544e7-34b4-41de-9bfb-2c20ae7b318a",
        "parentId" : "4c99705b-77c9-4896-b559-8f5f1ad0e20c",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Sort of a moot point by now, but for clarity I feel compelled to clarify that I meant it as `daml create <new-folder/project-name>`.",
        "createdAt" : "2020-03-30T10:18:48Z",
        "updatedAt" : "2020-03-30T10:18:49Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6d59130e585d20018e3b1d91fc3e82aefaa532aa",
    "line" : 6,
    "diffHunk" : "@@ -37,6 +37,9 @@ data Command\n         , shutdownStdinClose :: Bool\n         }\n     | New { targetFolder :: FilePath, templateNameM :: Maybe String }\n+    | CreateDamlApp { targetFolder :: FilePath }\n+    -- ^ CreateDamlApp is sufficiently special that in addition to\n+    -- `daml new foobar create-daml-app` we also make `daml create-daml-app foobar` work."
  },
  {
    "id" : "e291e0ce-fe56-4c9c-bbf1-af4f6ffa6a0d",
    "prId" : 2451,
    "comments" : [
      {
        "id" : "b90cae06-48c0-424b-b4f0-988700ca94d0",
        "parentId" : null,
        "author" : null,
        "body" : "I prefer this URL:\r\n\r\n```suggestion\r\n    deployFooter = footer \"See https://docs.daml.com/deploy/ for more information on deployment.\"\r\n```",
        "createdAt" : "2019-08-08T08:01:27Z",
        "updatedAt" : "2019-08-08T08:02:57Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e7b8ae4f-369f-4881-9415-fe7bc9d88deb",
        "parentId" : "b90cae06-48c0-424b-b4f0-988700ca94d0",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Definitely nicer! I just copied whatever my browser ended up pointing me to :slightly_smiling_face: ",
        "createdAt" : "2019-08-08T08:04:56Z",
        "updatedAt" : "2019-08-08T08:04:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f8d306cb0e38c070c450009d1250e0c046e0ea3d",
    "line" : null,
    "diffHunk" : "@@ -94,25 +94,33 @@ commandParser = subparser $ fold\n         <*> optional (option str (long \"on-start\" <> metavar \"COMMAND\" <> help \"Command to run once sandbox and navigator are running.\"))\n         <*> (WaitForSignal <$> flagYesNoAuto \"wait-for-signal\" True \"Wait for Ctrl+C or interrupt after starting servers.\" idm)\n \n-    deployCmdInfo = progDesc . concat $\n-        [ \"Deploy the current DAML project to a remote DAML ledger. \"\n-        , \"This will allocate the project's parties on the ledger \"\n-        , \"(if missing) and upload the project's built DAR file. You \"\n-        , \"can specify the ledger in daml.yaml with the ledger.host and \"\n-        , \"ledger.port options, or you can pass the --host and --port \"\n-        , \"flags to this command instead.\"\n+    deployCmdInfo = mconcat\n+        [ progDesc $ concat\n+              [ \"Deploy the current DAML project to a remote DAML ledger. \"\n+              , \"This will allocate the project's parties on the ledger \"\n+              , \"(if missing) and upload the project's built DAR file. You \"\n+              , \"can specify the ledger in daml.yaml with the ledger.host and \"\n+              , \"ledger.port options, or you can pass the --host and --port \"\n+              , \"flags to this command instead.\"\n+              ]\n+        , deployFooter\n         ]\n \n+    deployFooter = footer \"See https://docs.daml.com/deploy/index.html for more information on deployment.\""
  },
  {
    "id" : "f8943ad8-b511-450f-a14b-22e52a4b6da8",
    "prId" : 2451,
    "comments" : [
      {
        "id" : "2f4d18ed-6f28-412d-ae43-e2f2c43ee288",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Just an idea for the future: using `unwords` instead of `concat` allows for skipping the trailing spaces.",
        "createdAt" : "2019-08-08T09:31:02Z",
        "updatedAt" : "2019-08-08T09:31:03Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "61e829e3-bb2b-45df-8ea1-dbe9831f6e37",
        "parentId" : "2f4d18ed-6f28-412d-ae43-e2f2c43ee288",
        "author" : null,
        "body" : "Ah yes, I had done this already in my PR for this same issue, but Moritz's PR was slightly better (and we submitted them at the same time) :-) ",
        "createdAt" : "2019-08-08T10:18:10Z",
        "updatedAt" : "2019-08-08T10:18:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "f8d306cb0e38c070c450009d1250e0c046e0ea3d",
    "line" : 12,
    "diffHunk" : "@@ -94,25 +94,33 @@ commandParser = subparser $ fold\n         <*> optional (option str (long \"on-start\" <> metavar \"COMMAND\" <> help \"Command to run once sandbox and navigator are running.\"))\n         <*> (WaitForSignal <$> flagYesNoAuto \"wait-for-signal\" True \"Wait for Ctrl+C or interrupt after starting servers.\" idm)\n \n-    deployCmdInfo = progDesc . concat $\n-        [ \"Deploy the current DAML project to a remote DAML ledger. \"\n-        , \"This will allocate the project's parties on the ledger \"\n-        , \"(if missing) and upload the project's built DAR file. You \"\n-        , \"can specify the ledger in daml.yaml with the ledger.host and \"\n-        , \"ledger.port options, or you can pass the --host and --port \"\n-        , \"flags to this command instead.\"\n+    deployCmdInfo = mconcat\n+        [ progDesc $ concat"
  },
  {
    "id" : "894109d7-6d00-45aa-bc39-e90a3f7b5fb4",
    "prId" : 2416,
    "comments" : [
      {
        "id" : "1f50a6e4-2424-424f-a247-5f5ff9d0b128",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe we should introduce a level of nesting here to match the CLI structure, i.e., introduce a new `LedgerCommand` type and then only have a single constructor with a field of type `LedgerCommand` in `Command`.",
        "createdAt" : "2019-08-06T11:25:43Z",
        "updatedAt" : "2019-08-06T11:29:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "02636b37-b979-4737-a28d-b68cc931e6b4",
        "parentId" : "1f50a6e4-2424-424f-a247-5f5ff9d0b128",
        "author" : null,
        "body" : "👍 I'll do this in another PR",
        "createdAt" : "2019-08-06T11:41:36Z",
        "updatedAt" : "2019-08-06T11:41:37Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "172becf84237e97507ffe46f870956648ed94aa0",
    "line" : 16,
    "diffHunk" : "@@ -32,71 +33,132 @@ data Command\n     | Init { targetFolderM :: Maybe FilePath }\n     | ListTemplates\n     | Start { sandboxPortM :: Maybe SandboxPort, openBrowser :: OpenBrowser, startNavigator :: StartNavigator, onStartM :: Maybe String, waitForSignal :: WaitForSignal }\n-    | Deploy        { flags :: HostAndPortFlags }\n-    | ListParties   { flags :: HostAndPortFlags }\n-    | AllocateParty { flags :: HostAndPortFlags , party :: String }\n+    | Deploy { flags :: HostAndPortFlags }\n+    | LedgerListParties { flags :: HostAndPortFlags }"
  },
  {
    "id" : "3f7d2e3c-9eb4-4e90-aafa-ed1663153483",
    "prId" : 2384,
    "comments" : [
      {
        "id" : "22d2b4ba-38ba-47b1-a606-1d2c13c60c54",
        "parentId" : null,
        "author" : null,
        "body" : "Like I said below, I think these would all be better organized as subcommands of \"deploy\".",
        "createdAt" : "2019-08-02T17:05:20Z",
        "updatedAt" : "2019-08-02T17:31:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2db21be3-18cf-4aaa-8935-b428c3d3249c",
        "parentId" : "22d2b4ba-38ba-47b1-a606-1d2c13c60c54",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Yup. Where are the existing examples?",
        "createdAt" : "2019-08-02T17:07:04Z",
        "updatedAt" : "2019-08-02T17:31:48Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e2bd9984-2a31-4221-855f-62e720e12f57",
        "parentId" : "22d2b4ba-38ba-47b1-a606-1d2c13c60c54",
        "author" : null,
        "body" : "I can dig up an old example for you.",
        "createdAt" : "2019-08-02T17:24:05Z",
        "updatedAt" : "2019-08-02T17:31:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0fbcf3e1-dbbc-47bb-8aa6-bff3e2c447f9",
        "parentId" : "22d2b4ba-38ba-47b1-a606-1d2c13c60c54",
        "author" : null,
        "body" : "Here, from the `da` code base:\r\n\r\nhttps://github.com/digital-asset/daml/blob/1fcf2e4442f102c894af06164c5c0872db85e4b0/da-assistant/DA/Sdk/Cli/Command.hs#L107\r\n\r\nYou can see `templateActionParser` is defined further below as another `subparser ... subcommand` list. Note that `subcommand` is defined in that file as a convenience around `command ... (info ...)` but you don't really need it.",
        "createdAt" : "2019-08-02T17:29:37Z",
        "updatedAt" : "2019-08-02T17:31:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 37,
    "diffHunk" : "@@ -48,6 +45,8 @@ commandParser =\n          , command \"init\" (info (initCmd <**> helper) idm)\n          , command \"start\" (info (startCmd <**> helper) idm)\n          , command \"deploy\" (info (deployCmd <**> helper) idm)\n+         , command \"list-parties\" (info (listPartiesCmd <**> helper) idm)\n+         , command \"allocate-party\" (info (allocatePartyCmd <**> helper) idm)"
  }
]