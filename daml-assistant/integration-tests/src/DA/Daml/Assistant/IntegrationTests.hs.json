[
  {
    "id" : "c67c66ad-f9f8-4f25-9975-5b929aeb300c",
    "prId" : 7700,
    "comments" : [
      {
        "id" : "0517c0a7-f195-4c2e-90f0-299d6d17bf3c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should move this into a separate package once we add more tests involving the JSON API.",
        "createdAt" : "2020-10-20T16:07:40Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "febda335-3338-4ce9-9db9-9e99bf4659b1",
        "parentId" : "0517c0a7-f195-4c2e-90f0-299d6d17bf3c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "agreed.",
        "createdAt" : "2020-10-20T17:05:06Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : 58,
    "diffHunk" : "@@ -361,6 +361,72 @@ packagingTests = testGroup \"packaging\"\n               responseBody queryResponse @?= \"{\\\"result\\\":{\\\"identifier\\\":\\\"Alice\\\",\\\"isLocal\\\":true},\\\"status\\\":200}\"\n               -- waitForProcess' will block on Windows so we explicitly kill the process.\n               terminateProcess ph\n+    , testCase \"daml ledger via json api\" $ withTempDir $ \\tmpDir -> do\n+          writeFileUTF8 (tmpDir </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: ledger-json-api\"\n+              , \"version: \\\"1.0\\\"\"\n+              , \"source: .\"\n+              , \"dependencies:\"\n+              , \"  - daml-prim\"\n+              , \"  - daml-stdlib\"\n+              ]\n+          sandboxPort :: Int <- fromIntegral <$> getFreePort\n+          jsonApiPort :: Int <- fromIntegral <$> getFreePort\n+          let startProc = shell $ unwords\n+                [ \"daml\"\n+                , \"start\"\n+                , \"--start-navigator no\"\n+                , \"--sandbox-port \" <> show sandboxPort\n+                , \"--json-api-port \" <> show jsonApiPort\n+                ]\n+          withCurrentDirectory tmpDir $\n+            withCreateProcess startProc $ \\_ _ _ startPh ->\n+              race_ (waitForProcess' startProc startPh) $ do\n+                let token ="
  },
  {
    "id" : "c08944d5-4382-47c0-918f-b4378f87d224",
    "prId" : 7700,
    "comments" : [
      {
        "id" : "d9ebde82-f749-4b19-9292-f0cdccfede8f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should check that the output actually lists \"Alice\".",
        "createdAt" : "2020-10-20T16:08:34Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "abe56292-ee3a-4684-a489-aa66a056f8c6",
        "parentId" : "d9ebde82-f749-4b19-9292-f0cdccfede8f",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "This is now checked.",
        "createdAt" : "2020-10-21T13:19:03Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : null,
    "diffHunk" : "@@ -361,6 +361,72 @@ packagingTests = testGroup \"packaging\"\n               responseBody queryResponse @?= \"{\\\"result\\\":{\\\"identifier\\\":\\\"Alice\\\",\\\"isLocal\\\":true},\\\"status\\\":200}\"\n               -- waitForProcess' will block on Windows so we explicitly kill the process.\n               terminateProcess ph\n+    , testCase \"daml ledger via json api\" $ withTempDir $ \\tmpDir -> do\n+          writeFileUTF8 (tmpDir </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: ledger-json-api\"\n+              , \"version: \\\"1.0\\\"\"\n+              , \"source: .\"\n+              , \"dependencies:\"\n+              , \"  - daml-prim\"\n+              , \"  - daml-stdlib\"\n+              ]\n+          sandboxPort :: Int <- fromIntegral <$> getFreePort\n+          jsonApiPort :: Int <- fromIntegral <$> getFreePort\n+          let startProc = shell $ unwords\n+                [ \"daml\"\n+                , \"start\"\n+                , \"--start-navigator no\"\n+                , \"--sandbox-port \" <> show sandboxPort\n+                , \"--json-api-port \" <> show jsonApiPort\n+                ]\n+          withCurrentDirectory tmpDir $\n+            withCreateProcess startProc $ \\_ _ _ startPh ->\n+              race_ (waitForProcess' startProc startPh) $ do\n+                let token =\n+                      JWT.encodeSigned\n+                        (JWT.HMACSecret \"secret\")\n+                        mempty\n+                        mempty\n+                          { JWT.unregisteredClaims =\n+                              JWT.ClaimsMap $\n+                              Map.fromList\n+                                [ ( \"https://daml.com/ledger-api\"\n+                                  , Aeson.Object $\n+                                    HashMap.fromList\n+                                      [ (\"actAs\", Aeson.toJSON [\"Alice\" :: T.Text])\n+                                      , (\"ledgerId\", \"MyLedger\")\n+                                      , (\"applicationId\", \"foobar\")\n+                                      ])\n+                                ]\n+                          }\n+                writeFileUTF8 (tmpDir </> \"token.txt\") $ T.unpack token\n+                let headers =\n+                      [ (\"Authorization\", \"Bearer \" <> T.encodeUtf8 token)\n+                      ] :: RequestHeaders\n+                waitForHttpServer (threadDelay 100000) (\"http://localhost:\" <> show jsonApiPort <> \"/v1/query\") headers\n+                callCommand $\n+                  unwords\n+                    [ \"daml\"\n+                    , \"ledger\"\n+                    , \"allocate-party\"\n+                    , \"--port\"\n+                    , show sandboxPort\n+                    , \"alice\"\n+                    ]\n+                callCommand $\n+                  unwords\n+                    [ \"daml\"\n+                    , \"ledger\"\n+                    , \"list-parties\"\n+                    , \"--json-api\"\n+                    , \"--port\"\n+                    , show jsonApiPort\n+                    , \"--access-token-file\"\n+                    , \"token.txt\"\n+                    ]"
  },
  {
    "id" : "6eb21c04-5077-42b2-876c-a062209d253e",
    "prId" : 7516,
    "comments" : [
      {
        "id" : "1ffb3a88-d549-4340-b639-a905cd69fee7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n                -- 30 secs for all the codegens to complete\r\n```",
        "createdAt" : "2020-10-02T11:14:37Z",
        "updatedAt" : "2020-10-02T13:24:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cd0cfe10-b6d5-4e80-88bd-5f58a8f4ed8a",
        "parentId" : "1ffb3a88-d549-4340-b639-a905cd69fee7",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "reduced to 15 secs and changed the comment.",
        "createdAt" : "2020-10-02T11:34:10Z",
        "updatedAt" : "2020-10-02T13:24:54Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f519d770116ce3ec6cb36f801850b6e96231cc90",
    "line" : null,
    "diffHunk" : "@@ -389,7 +389,8 @@ packagingTests = testGroup \"packaging\"\n             withCurrentDirectory tmpDir $\n               withCreateProcess startProc $ \\_ _ _ startPh -> do\n               race_ (waitForProcess' startProc startPh) $ do\n-                threadDelay 2000000\n+                -- 20 secs for all the codegens to complete"
  },
  {
    "id" : "7bf596ab-b245-4358-abd9-f5c337590464",
    "prId" : 7301,
    "comments" : [
      {
        "id" : "a9744821-be7b-4f6e-bfcb-0adf7581b1f7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The `Script` type is apparently too much for `data-dependencies` to handle. This isn’t actually what we want to test here so using a type synynym as a replacement is good enough.",
        "createdAt" : "2020-09-02T11:22:45Z",
        "updatedAt" : "2020-09-02T11:22:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b1d6a8e173f94891967ab9bc9e5381c7c037dfc6",
    "line" : 6,
    "diffHunk" : "@@ -157,8 +157,8 @@ packagingTests = testGroup \"packaging\"\n           ]\n         writeFileUTF8 (tmpDir </> \"proj\" </> \"A.daml\") $ unlines\n           [ \"module A where\"\n-          , \"import Main (setup)\"\n-          , \"setup' = setup\"\n+          , \"import Main (Asset)\""
  },
  {
    "id" : "0e8aed1e-c99e-47b7-8c1c-c00d4932248b",
    "prId" : 6877,
    "comments" : [
      {
        "id" : "6655e855-eef5-40ac-b27e-b281ffd5ef37",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Shouldn't the name of the project be `foobar`?",
        "createdAt" : "2020-07-27T13:54:44Z",
        "updatedAt" : "2020-07-27T14:03:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f11d4ce-0cb4-4ca3-8902-f6d4d8aa4216",
        "parentId" : "6655e855-eef5-40ac-b27e-b281ffd5ef37",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No, `quickstart-java` is like the old `create-daml-app` in that it has a hardcoded name so this is a cheap way of making sure we pick up the right template.",
        "createdAt" : "2020-07-27T14:03:50Z",
        "updatedAt" : "2020-07-27T14:06:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "200f6d47bf9183f810c1ffea79c1a24d0b286498",
    "line" : 68,
    "diffHunk" : "@@ -553,15 +553,23 @@ cleanTests baseDir = testGroup \"daml clean\"\n                                 ]\n \n templateTests :: TestTree\n-templateTests = testGroup \"templates\"\n+templateTests = testGroup \"templates\" $\n     [ testCase name $ do\n           withTempDir $ \\dir -> withCurrentDirectory dir $ do\n-              callCommandSilent $ unwords [\"daml\", \"new\", \"foobar\", name]\n+              callCommandSilent $ unwords [\"daml\", \"new\", \"foobar\", \"--template\", name]\n               withCurrentDirectory (dir </> \"foobar\") $ callCommandSilent \"daml build\"\n     | name <- templateNames\n+    ] <>\n+    [ testCase \"quickstart-java, positional template\" $ do\n+          -- Verify that the old syntax for `daml new` still works.\n+          withTempDir $ \\dir -> withCurrentDirectory dir $ do\n+              callCommandSilent \"daml new foobar quickstart-java\"\n+              contents <- readFileUTF8 \"foobar/daml.yaml\"\n+              assertInfixOf \"name: quickstart\" contents"
  },
  {
    "id" : "83861138-c530-4168-af76-1f668afaf6b6",
    "prId" : 5630,
    "comments" : [
      {
        "id" : "76eabbb9-d922-426c-b809-2a205646a096",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "So to clarify, this does not create a sandbox port file but does find a free port and pass that as the `ledger-port` to the JSON API?",
        "createdAt" : "2020-04-20T14:57:22Z",
        "updatedAt" : "2020-04-20T14:57:22Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "970250aa-18a8-41b3-9976-f0c2ee6094eb",
        "parentId" : "76eabbb9-d922-426c-b809-2a205646a096",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The assistant uses the --port-file option internally so it does technically create a portfile but not one visible to the user.",
        "createdAt" : "2020-04-20T14:59:26Z",
        "updatedAt" : "2020-04-20T14:59:27Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9ca27777-4411-49f6-8a61-7641186ce2af",
        "parentId" : "76eabbb9-d922-426c-b809-2a205646a096",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Ok. In my testing the sandbox does not remove its port file on termination (a bug I think), so I'm wondering if that file will be visible to the user and if we need to clean it up.",
        "createdAt" : "2020-04-20T15:03:35Z",
        "updatedAt" : "2020-04-20T15:03:35Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "08fa51fa-ccf4-40fb-9e69-2af96935af1a",
        "parentId" : "76eabbb9-d922-426c-b809-2a205646a096",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "daml-helper creates a temp file and cleans it up itself.",
        "createdAt" : "2020-04-20T15:04:26Z",
        "updatedAt" : "2020-04-20T15:04:27Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4c79d7560258e5aa814d195921109a03722ecf27",
    "line" : 26,
    "diffHunk" : "@@ -320,6 +321,46 @@ packagingTests = testGroup \"packaging\"\n               statusCode (responseStatus createResponse) @?= 200\n               -- waitForProcess' will block on Windows so we explicitly kill the process.\n               terminateProcess startPh\n+    , testCase \"daml start --sandbox-port=0\" $ withTempDir $ \\tmpDir -> do\n+          writeFileUTF8 (tmpDir </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: sandbox-options\"\n+              , \"version: \\\"1.0\\\"\"\n+              , \"source: .\"\n+              , \"dependencies:\"\n+              , \"  - daml-prim\"\n+              , \"  - daml-stdlib\"\n+              , \"start-navigator: false\"\n+              ]\n+          let startProc = shell $ unwords\n+                  [ \"daml\"\n+                  , \"start\"\n+                  , \"--sandbox-port=0\""
  },
  {
    "id" : "4773f6f2-9be7-4033-b367-810cfb4f49f1",
    "prId" : 5540,
    "comments" : [
      {
        "id" : "05269a26-3b32-464a-badd-a2c99265bb7c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We probably need to consider moving the whole GSG stuff to a separate test suite soonish. This test  was already really really slow. Adding pupeteer isn’t going to make it faster.",
        "createdAt" : "2020-04-14T18:42:49Z",
        "updatedAt" : "2020-04-17T16:24:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13d2b727-493c-4628-833d-9856a3f2da3d",
        "parentId" : "05269a26-3b32-464a-badd-a2c99265bb7c",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Would the point of splitting it up be to allow running them in parallel? We could move this test to `templates`.",
        "createdAt" : "2020-04-14T21:14:26Z",
        "updatedAt" : "2020-04-17T16:24:22Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03838c50-50f6-46db-968d-b6e695eddae1",
        "parentId" : "05269a26-3b32-464a-badd-a2c99265bb7c",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Moved the GSG tests to a separate target (in the same directory) in 4fb53662fa39e74a5aa64ac19aa68320efe82931",
        "createdAt" : "2020-04-15T22:57:11Z",
        "updatedAt" : "2020-04-17T16:24:22Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "022f7a09b19657608748dce2c6402328ae375078",
    "line" : null,
    "diffHunk" : "@@ -602,6 +602,16 @@ createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not\n           step \"Build the new UI\"\n           callCommandSilent \"yarn build\"\n \n+        -- Run end to end testing for the app.\n+        withCurrentDirectory (cdaDir </> \"ui\") $ do"
  },
  {
    "id" : "61d7c885-498b-43f0-a398-78d18ebc28d1",
    "prId" : 5507,
    "comments" : [
      {
        "id" : "70e2da4c-4cdd-48e8-a2ad-b8d8a480c80a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This test is quite long now. I don’t think it makes much sense to split it up but I think it would be nice to use `testCaseSteps` to make the individual steps a bit more explicit.",
        "createdAt" : "2020-04-09T05:30:37Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8948afbc-4915-4eae-a91e-b58d61df518c",
        "parentId" : "70e2da4c-4cdd-48e8-a2ad-b8d8a480c80a",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Done now",
        "createdAt" : "2020-04-10T21:53:49Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e854eec01ea6cee5425c06d485a565c92ed461eb",
    "line" : 12,
    "diffHunk" : "@@ -550,6 +550,8 @@ createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not\n         withCurrentDirectory tmpDir $ do\n           callCommandSilent \"daml new create-daml-app create-daml-app\"\n         let cdaDir = tmpDir </> \"create-daml-app\"\n+\n+        -- First test the base application (without the user-added feature)."
  },
  {
    "id" : "3569191a-9a59-49c7-ae20-a1f18fcf186d",
    "prId" : 5507,
    "comments" : [
      {
        "id" : "fbb06e5f-77da-4d8c-ae67-578266ba6034",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        messagingPatch <- locateRunfiles (mainWorkspace </> \"templates\" </> \"messaging.patch\")\r\n```\r\nA file group is not a thing on disk that you can locate.",
        "createdAt" : "2020-04-09T05:35:37Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e854eec01ea6cee5425c06d485a565c92ed461eb",
    "line" : null,
    "diffHunk" : "@@ -568,6 +570,27 @@ createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not\n         doesFileExist (cdaDir </> \"ui\" </> \"build\" </> \"index.html\") >>=\n           assertBool \"ui/build/index.html has been produced\"\n \n+        -- Now test that the messaging feature works by applying the necessary\n+        -- changes and testing in the same way as above.\n+        messagingPatch <- locateRunfiles (mainWorkspace </> \"templates\" </> \"messaging-patch\")"
  },
  {
    "id" : "0b481b79-725a-41ca-9b97-bdd48171a639",
    "prId" : 5507,
    "comments" : [
      {
        "id" : "a6632ee0-bc03-425a-a74e-b626ba625e19",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like on Linux this is not in the Bazel sandbox, you can probably get it from nix for now.",
        "createdAt" : "2020-04-09T05:35:59Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a643848a-fc72-4017-b9a9-f96ee1a0428a",
        "parentId" : "a6632ee0-bc03-425a-a74e-b626ba625e19",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Is there example of how to do this somewhere you could point me to? I tried adding to the WORKSPACE as with `tar` (https://github.com/digital-asset/daml/blob/master/WORKSPACE#L169) and to bazel.nix (https://github.com/digital-asset/daml/blob/master/nix/bazel.nix#L7) but I'm not sure what I'm doing here :)",
        "createdAt" : "2020-04-09T22:42:27Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e854eec01ea6cee5425c06d485a565c92ed461eb",
    "line" : null,
    "diffHunk" : "@@ -568,6 +570,27 @@ createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not\n         doesFileExist (cdaDir </> \"ui\" </> \"build\" </> \"index.html\") >>=\n           assertBool \"ui/build/index.html has been produced\"\n \n+        -- Now test that the messaging feature works by applying the necessary\n+        -- changes and testing in the same way as above.\n+        messagingPatch <- locateRunfiles (mainWorkspace </> \"templates\" </> \"messaging-patch\")\n+        withCurrentDirectory cdaDir $ do\n+          callCommandSilent $ \"patch -s -p2 < \" ++ messagingPatch"
  },
  {
    "id" : "f2be6f8c-3f14-49a1-b8d7-7f83e27c9152",
    "prId" : 5507,
    "comments" : [
      {
        "id" : "52750e51-b4ad-4237-b9fe-ad9731bb52be",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why would this file not exist anymore? I suggest we remove the whole whole `ui/build` directory once the first half of the test is done.",
        "createdAt" : "2020-04-09T07:18:06Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e854eec01ea6cee5425c06d485a565c92ed461eb",
    "line" : null,
    "diffHunk" : "@@ -568,6 +570,27 @@ createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not\n         doesFileExist (cdaDir </> \"ui\" </> \"build\" </> \"index.html\") >>=\n           assertBool \"ui/build/index.html has been produced\"\n \n+        -- Now test that the messaging feature works by applying the necessary\n+        -- changes and testing in the same way as above.\n+        messagingPatch <- locateRunfiles (mainWorkspace </> \"templates\" </> \"messaging-patch\")\n+        withCurrentDirectory cdaDir $ do\n+          callCommandSilent $ \"patch -s -p2 < \" ++ messagingPatch\n+          forM_ [\"MessageEdit\", \"MessageList\"] $ \\messageComponent ->\n+            doesFileExist (\"ui\" </> \"src\" </> \"components\" </> messageComponent <.> \"tsx\") >>=\n+              assertBool (\"New \" <> messageComponent <> \" component was not created by patch\")\n+              . not\n+          callCommandSilent \"daml build\"\n+          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/daml.js\"]) [DamlTypes]\n+          callCommandSilent \"daml codegen js -o daml.js .daml/dist/create-daml-app-0.1.0.dar\"\n+        doesFileExist (cdaDir </> \"ui\" </> \"build\" </> \"index.html\") >>=\n+          assertBool \"ui/build/index.html does not yet exist\" . not"
  },
  {
    "id" : "879128f4-1ec6-4b99-8ef0-20d7318a2be8",
    "prId" : 5507,
    "comments" : [
      {
        "id" : "02b1df1b-8c37-4e0a-bef3-05f53be21593",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we still expect this to be flaky here? I would have thought that the flaky part is getting dependencies from the network. This shouldn’t happen here. Unless I’m missing something here, we should remove the `retry 3`.",
        "createdAt" : "2020-04-11T16:25:46Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ca3c0043-5346-4ed3-9309-d9d7105d30de",
        "parentId" : "02b1df1b-8c37-4e0a-bef3-05f53be21593",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Good point, will do",
        "createdAt" : "2020-04-11T18:44:42Z",
        "updatedAt" : "2020-04-11T19:22:26Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e854eec01ea6cee5425c06d485a565c92ed461eb",
    "line" : null,
    "diffHunk" : "@@ -545,27 +545,62 @@ codegenTests codegenDir = testGroup \"daml codegen\" (\n createDamlAppTests :: TestTree\n createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not isWindows]\n   where\n-    gettingStartedGuideTest = testCase \"Getting Started Guide\" $\n+    gettingStartedGuideTest = testCaseSteps \"Getting Started Guide\" $ \\step ->\n       withTempDir $ \\tmpDir -> do\n+        step \"Create app from template\"\n         withCurrentDirectory tmpDir $ do\n           callCommandSilent \"daml new create-daml-app create-daml-app\"\n         let cdaDir = tmpDir </> \"create-daml-app\"\n+\n+        -- First test the base application (without the user-added feature).\n         withCurrentDirectory cdaDir $ do\n+          step \"Build DAML model for base application\"\n           callCommandSilent \"daml build\"\n+          step \"Set up TypeScript libraries and Yarn workspaces for codegen\"\n           setupYarnEnv tmpDir (Workspaces [\"create-daml-app/daml.js\"]) [DamlTypes]\n+          step \"Run JavaScript codegen\"\n           callCommandSilent \"daml codegen js -o daml.js .daml/dist/create-daml-app-0.1.0.dar\"\n         assertFileDoesNotExist (cdaDir </> \"ui\" </> \"build\" </> \"index.html\")\n         withCurrentDirectory (cdaDir </> \"ui\") $ do\n           -- NOTE(MH): We set up the yarn env again to avoid having all the\n           -- dependencies of the UI already in scope when `daml2js` runs\n           -- `yarn install`. Some of the UI dependencies are a bit flaky to\n           -- install and might need some retries.\n+          step \"Set up libraries and workspaces again for UI build\"\n           setupYarnEnv tmpDir (Workspaces [\"create-daml-app/ui\"]) allTsLibraries\n+          step \"Install dependencies for UI\"\n           retry 3 (callCommandSilent \"yarn install\")\n+          step \"Run linter\"\n           callCommandSilent \"yarn lint --max-warnings 0\"\n+          step \"Build the application UI\"\n           callCommandSilent \"yarn build\"\n         assertFileExists (cdaDir </> \"ui\" </> \"build\" </> \"index.html\")\n \n+        -- Now test that the messaging feature works by applying the necessary\n+        -- changes and testing in the same way as above.\n+        step \"Patch the application code with messaging feature\"\n+        messagingPatch <- locateRunfiles (mainWorkspace </> \"templates\" </> \"messaging.patch\")\n+        patchTool <- locateRunfiles \"patch_dev_env/bin/patch\"\n+        withCurrentDirectory cdaDir $ do\n+          callCommandSilent $ unwords [patchTool, \"-s\", \"-p2\", \"<\", messagingPatch]\n+          forM_ [\"MessageEdit\", \"MessageList\"] $ \\messageComponent ->\n+            assertFileExists (\"ui\" </> \"src\" </> \"components\" </> messageComponent <.> \"tsx\")\n+          step \"Build the new DAML model\"\n+          callCommandSilent \"daml build\"\n+          step \"Set up TypeScript libraries and Yarn workspaces for codegen again\"\n+          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/daml.js\"]) [DamlTypes]\n+          step \"Run JavaScript codegen for new DAML model\"\n+          callCommandSilent \"daml codegen js -o daml.js .daml/dist/create-daml-app-0.1.0.dar\"\n+        withCurrentDirectory (cdaDir </> \"ui\") $ do\n+          step \"Set up libraries and workspaces again for UI build\"\n+          setupYarnEnv tmpDir (Workspaces [\"create-daml-app/ui\"]) allTsLibraries\n+          step \"Install UI dependencies again, forcing rebuild of generated code\"\n+          retry 3 (callCommandSilent \"yarn install --force --frozen-lockfile\")"
  },
  {
    "id" : "8e8994d5-1a9e-4555-a5ca-1fa0add69e43",
    "prId" : 5389,
    "comments" : [
      {
        "id" : "e09c481e-28f9-4a61-ac45-a4b629452a43",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We did try running things manually on Windows right? Judging from the number of support requests that I see, things are going to blow up pretty badly if things don’t work on Windows.\r\n\r\nNot quite sure what we do about this in the long-term, I guess we have to fix `rules_nodejs` :cry: ",
        "createdAt" : "2020-04-02T18:18:37Z",
        "updatedAt" : "2020-04-02T18:37:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "73f3fc68-7631-4434-b472-6a165da6d274",
        "parentId" : "e09c481e-28f9-4a61-ac45-a4b629452a43",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree that we need to make sure this works on Windows. I don't have a Windows machine handy myself. Let's discuss this tomorrow morning.\r\n\r\nI'm afraid fixing `rules_nodejs` is a bullet we have to bite. And that sucks a lot! 😿",
        "createdAt" : "2020-04-02T18:40:40Z",
        "updatedAt" : "2020-04-02T18:40:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f7838d34-8e1c-4c88-8a6a-dc9760cb93b2",
        "parentId" : "e09c481e-28f9-4a61-ac45-a4b629452a43",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I just started testing, we get up to the `daml2ts` step which fails so I guess the good news is users “finish” quickstart on Windws in about 1 minute :tada: \r\n\r\nI know what the issue is and will fix it but I’m getting a bit tired so might have to wait until tomorrow.",
        "createdAt" : "2020-04-02T19:35:44Z",
        "updatedAt" : "2020-04-02T19:35:44Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b91e937f-8c99-41ac-816d-6ac0299da43f",
        "parentId" : "e09c481e-28f9-4a61-ac45-a4b629452a43",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "First fix in https://github.com/digital-asset/daml/pull/5391, now need to figure out how to build the npm packages on Linux and then copy them over to Windows. Very disappointed that Github does not have a vomitting emoji.",
        "createdAt" : "2020-04-02T19:49:39Z",
        "updatedAt" : "2020-04-02T19:49:40Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43e4cf54-8f55-4eda-b9df-56e707f183da",
        "parentId" : "e09c481e-28f9-4a61-ac45-a4b629452a43",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "With #5391, I managed to go through the first section of the GTG on Windows :tada: I’m not going through the messaging feature for now but given that this seems more of the same, I expect no issues there.",
        "createdAt" : "2020-04-02T20:22:12Z",
        "updatedAt" : "2020-04-02T20:22:18Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0a1466f6-7c12-46c8-84d1-c460355496f1",
        "parentId" : "e09c481e-28f9-4a61-ac45-a4b629452a43",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Awesome, thanks @cocreature !",
        "createdAt" : "2020-04-02T21:26:54Z",
        "updatedAt" : "2020-04-02T21:26:54Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1634d1e6a8267b79cd5fe0399a026fc5a1afb513",
    "line" : 22,
    "diffHunk" : "@@ -551,6 +554,38 @@ codegenTests codegenDir damlTypes = testGroup \"daml codegen\" (\n                         contents <- listDirectory outDir\n                         assertBool \"bindings were written\" (not $ null contents)\n \n+createDamlAppTests :: TestTree\n+createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not isWindows]"
  },
  {
    "id" : "4838f1c1-2465-4acb-b96d-f6993728a2b3",
    "prId" : 5389,
    "comments" : [
      {
        "id" : "1e0fb6c3-7684-4e9c-9acc-4da43b7fc7a3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We should add `assertFileExists` to `DA.Test.Util` at some point.",
        "createdAt" : "2020-04-02T18:25:35Z",
        "updatedAt" : "2020-04-02T18:37:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8561d2eb-8562-4117-a81b-664526222ef5",
        "parentId" : "1e0fb6c3-7684-4e9c-9acc-4da43b7fc7a3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'll take care of it.",
        "createdAt" : "2020-04-02T18:36:41Z",
        "updatedAt" : "2020-04-02T18:37:32Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1634d1e6a8267b79cd5fe0399a026fc5a1afb513",
    "line" : 44,
    "diffHunk" : "@@ -551,6 +554,38 @@ codegenTests codegenDir damlTypes = testGroup \"daml codegen\" (\n                         contents <- listDirectory outDir\n                         assertBool \"bindings were written\" (not $ null contents)\n \n+createDamlAppTests :: TestTree\n+createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not isWindows]\n+  where\n+    gettingStartedGuideTest = testCase \"Getting Started Guide\" $\n+      withTempDir $ \\tmpDir -> do\n+        let tsLibs = [\"daml-types\", \"daml-ledger\", \"daml-react\"]\n+        forM_  tsLibs $ \\tsLib -> do\n+          srcDir <- locateRunfiles $ mainWorkspace </> \"language-support\" </> \"ts\" </> tsLib </> \"npm_package\"\n+          copyDirectory srcDir (tmpDir </> tsLib)\n+        BSL.writeFile (tmpDir </> \"package.json\") $ Aeson.encode $ object\n+          [ \"private\" .= True\n+          , \"workspaces\" .= [\"create-daml-app/daml-ts\", \"create-daml-app/ui\" :: String]\n+          , \"resolutions\" .= object\n+              [ pkgName .= (\"file:\" ++ tsLib)\n+              | tsLib <- tsLibs, let pkgName = \"@\" <> T.replace \"-\" \"/\"  (T.pack tsLib)\n+              ]\n+          ]\n+        withCurrentDirectory tmpDir $ do\n+          callCommandSilent \"daml new create-daml-app create-daml-app\"\n+        let cdaDir = tmpDir </> \"create-daml-app\"\n+        withCurrentDirectory cdaDir $ do\n+          callCommandSilent \"daml build\"\n+          callCommandSilent \"daml codegen ts -o daml-ts .daml/dist/create-daml-app-0.1.0.dar\"\n+        doesFileExist (cdaDir </> \"ui\" </> \"build\" </> \"index.html\") >>="
  },
  {
    "id" : "a72711ea-9f02-4456-a259-dd4572305671",
    "prId" : 5389,
    "comments" : [
      {
        "id" : "35c695cf-e276-4da3-bdff-405b7383ebef",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "This is slightly different to the manual test procedure - do we not want the package.json inside the create-daml-app dir created after `daml new`?",
        "createdAt" : "2020-04-02T18:45:09Z",
        "updatedAt" : "2020-04-02T18:48:31Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9b5abe6d-6a03-47e1-9328-f3d38e3f38b2",
        "parentId" : "35c695cf-e276-4da3-bdff-405b7383ebef",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "IMO, this is an improvement of the manual test procedure we discussed yesterday. We can even have the `package.json` we use to trick `yarn` into using our packages outside of the project. Doesn't that sound better?",
        "createdAt" : "2020-04-02T18:51:29Z",
        "updatedAt" : "2020-04-02T18:51:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6a145588-9f35-4e7c-a3c1-e1f717425f74",
        "parentId" : "35c695cf-e276-4da3-bdff-405b7383ebef",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Not sure if it's better or worse, but I didn't know that this package.json would have an effect here since you call `daml codegen ts` in the `create-daml-app` directory.",
        "createdAt" : "2020-04-02T18:57:29Z",
        "updatedAt" : "2020-04-02T18:57:29Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff3d55ec-7c8d-488d-a8fe-8d74de026589",
        "parentId" : "35c695cf-e276-4da3-bdff-405b7383ebef",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`daml codegen ts` itself does not care about this itself at all. It calls `yarn install` in `daml-ts`, which then does its magic and searches for a workspace `package.json` somewhere along the path to the root directory.\r\n\r\nThe advantage of what we're doing here is that we don't need to mess around with the directory produced by `daml new` at all. The only thing we mess around with is tricking `yarn install` into picking up our libraries. In fact, this approach can be used to share a single `node_modules` folder as a cache between multiple test runs without weirdly copying it around. I already have big plans for using this to make the `daml2ts` tests faster.",
        "createdAt" : "2020-04-02T19:06:39Z",
        "updatedAt" : "2020-04-02T19:06:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2216d29f-ef53-4651-a58f-d12a4034cab9",
        "parentId" : "35c695cf-e276-4da3-bdff-405b7383ebef",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "> I already have big plans for using this to make the `daml2ts` tests faster.\r\n\r\nI’ll only approve if they get faster by at least 30x.",
        "createdAt" : "2020-04-02T19:08:07Z",
        "updatedAt" : "2020-04-02T19:08:07Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "67215a89-1cf7-482f-af1c-4cbf2b0abea1",
        "parentId" : "35c695cf-e276-4da3-bdff-405b7383ebef",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should only measure the sum of all `yarn install` steps for this benchmark. If this change doesn't make it 30x fast, then I'll add more test cases until it does make it 30x faster. And I'll add them each in a separate PR. That's what I call two birds with one stone. 🤓",
        "createdAt" : "2020-04-02T19:10:23Z",
        "updatedAt" : "2020-04-02T19:10:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1634d1e6a8267b79cd5fe0399a026fc5a1afb513",
    "line" : 32,
    "diffHunk" : "@@ -551,6 +554,38 @@ codegenTests codegenDir damlTypes = testGroup \"daml codegen\" (\n                         contents <- listDirectory outDir\n                         assertBool \"bindings were written\" (not $ null contents)\n \n+createDamlAppTests :: TestTree\n+createDamlAppTests = testGroup \"create-daml-app\" [gettingStartedGuideTest | not isWindows]\n+  where\n+    gettingStartedGuideTest = testCase \"Getting Started Guide\" $\n+      withTempDir $ \\tmpDir -> do\n+        let tsLibs = [\"daml-types\", \"daml-ledger\", \"daml-react\"]\n+        forM_  tsLibs $ \\tsLib -> do\n+          srcDir <- locateRunfiles $ mainWorkspace </> \"language-support\" </> \"ts\" </> tsLib </> \"npm_package\"\n+          copyDirectory srcDir (tmpDir </> tsLib)\n+        BSL.writeFile (tmpDir </> \"package.json\") $ Aeson.encode $ object\n+          [ \"private\" .= True\n+          , \"workspaces\" .= [\"create-daml-app/daml-ts\", \"create-daml-app/ui\" :: String]"
  },
  {
    "id" : "523eb58c-cff0-419a-8f80-f15d177032c4",
    "prId" : 5342,
    "comments" : [
      {
        "id" : "bb16205a-a784-4909-a9ab-73b1579b1971",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’d like to keep this here. This is a rather gross hack and I don’t want to use it anywhere else.",
        "createdAt" : "2020-04-01T14:47:55Z",
        "updatedAt" : "2020-04-02T08:48:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6474ac5-1a48-4bec-9315-5ae399bbb7c4",
        "parentId" : "bb16205a-a784-4909-a9ab-73b1579b1971",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "The reason for moving the `getFreePort` was because at one point during the refactor I needed to use it in two different test suites. In general I don't think it is a good idea to try to hide hackiness by obscuring it. But anyway I moved the `FreePort.hs` file back into the integration-tests, so we don't encourage it's further use.",
        "createdAt" : "2020-04-02T08:36:08Z",
        "updatedAt" : "2020-04-02T08:48:06Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c4585811a1d5dd8c2de2c7598d8e15a88ac1b345",
    "line" : 208,
    "diffHunk" : "@@ -543,179 +540,7 @@ codegenTests codegenDir damlTypes = testGroup \"daml codegen\" (\n                         contents <- listDirectory outDir\n                         assertBool \"bindings were written\" (not $ null contents)\n \n--- | Start a sandbox on any free port\n-withSandboxOnFreePort :: (Int -> IO ()) -> IO ()\n-withSandboxOnFreePort f = do\n-  port :: Int <- fromIntegral <$> getFreePort\n-  withDevNull $ \\devNull -> do\n-    let sandboxProc =\n-          (shell $ unwords\n-           [\"daml\"\n-           , \"sandbox\"\n-           , \"--wall-clock-time\"\n-           , \"--port\", show port\n-           ]) { std_out = UseHandle devNull, std_in = CreatePipe }\n-    withCreateProcess sandboxProc  $ \\_ _ _ ph -> do\n-      race_ (waitForProcess' sandboxProc ph) $ do\n-        waitForConnectionOnPort (threadDelay 100000) port\n-        f port\n-        -- waitForProcess' will block on Windows so we explicitly kill the process.\n-        terminateProcess ph\n-\n--- | Using `daml inspect-dar`, discover the main package-identifier of a dar.\n-getMainPidByInspecingDar :: FilePath -> String -> IO String\n-getMainPidByInspecingDar dar projName = do\n-  stdout <- callCommandForStdout $ unwords [\"daml damlc inspect-dar\", dar ]\n-  [grepped] <- pure $\n-        [ line\n-        | line <- lines stdout\n-        -- expect a single line containing double quotes and the projName\n-        , \"\\\"\" `isInfixOf` line\n-        , projName `isInfixOf` line\n-        ]\n-  -- and the main pid is found between the 1st and 2nd double-quotes\n-  [_,pid,_] <- pure $ splitOn \"\\\"\" grepped\n-  return pid\n-\n--- | Tests for the `daml ledger fetch-dar` command\n-fetchTest :: FilePath -> TestTree\n-fetchTest tmpDir = testCaseSteps \"daml ledger fetch-dar\" $ \\step -> do\n-  let fetchDir = tmpDir </> \"fetchTest\"\n-  withSandboxOnFreePort $ \\port -> do\n-    createDirectoryIfMissing True fetchDir\n-    withCurrentDirectory fetchDir $ do\n-      callCommandQuiet $ unwords [\"daml new\", \"proj1\"]\n-      withCurrentDirectory \"proj1\" $ do\n-        let origDar = \".daml/dist/proj1-0.0.1.dar\"\n-        step \"build/upload\"\n-        callCommandQuiet $ unwords [\"daml ledger upload-dar --port\", show port]\n-        pid <- getMainPidByInspecingDar origDar \"proj1\"\n-        step \"fetch/validate\"\n-        let fetchedDar = \"fetched.dar\"\n-        callCommandQuiet $ unwords [ \"daml ledger fetch-dar\"\n-                                   , \"--port\", show port\n-                                   , \"--main-package-id\", pid\n-                                   , \"-o\", fetchedDar\n-                                   ]\n-        callCommandQuiet $ unwords [\"daml damlc validate-dar\", fetchedDar]\n-\n-deployTest :: FilePath -> TestTree\n-deployTest deployDir = testCase \"daml deploy\" $ do\n-    createDirectoryIfMissing True deployDir\n-    withCurrentDirectory deployDir $ do\n-        callCommandQuiet $ unwords [\"daml new\", deployDir </> \"proj1\"]\n-        callCommandQuiet $ unwords [\"daml new\", deployDir </> \"proj2\", \"quickstart-java\"]\n-        withCurrentDirectory (deployDir </> \"proj1\") $ do\n-            callCommandQuiet \"daml build\"\n-            withDevNull $ \\devNull -> do\n-                port :: Int <- fromIntegral <$> getFreePort\n-                let sharedSecret = \"TheSharedSecret\"\n-                let sandboxProc =\n-                        (shell $ unwords\n-                            [\"daml\"\n-                            , \"sandbox\"\n-                            , \"--wall-clock-time\"\n-                            , \"--auth-jwt-hs256-unsafe=\" <> sharedSecret\n-                            , \"--port\", show port\n-                            , \".daml/dist/proj1-0.0.1.dar\"\n-                            ]) { std_out = UseHandle devNull, std_in = CreatePipe }\n-                let tokenFile = deployDir </> \"secretToken.jwt\"\n-                -- The trailing newline is not required but we want to test that it is supported.\n-                writeFileUTF8 tokenFile (\"Bearer \" <> makeSignedJwt sharedSecret <> \"\\n\")\n-                withCreateProcess sandboxProc  $ \\_ _ _ ph ->\n-                    race_ (waitForProcess' sandboxProc ph) $ do\n-                        waitForConnectionOnPort (threadDelay 100000) port\n-                        withCurrentDirectory (deployDir </> \"proj2\") $ do\n-                            callCommandQuiet $ unwords\n-                                [ \"daml deploy\"\n-                                , \"--access-token-file \" <> tokenFile\n-                                , \"--port\", show port\n-                                , \"--host localhost\"\n-                                ]\n-                        -- waitForProcess' will block on Windows so we explicitly kill the process.\n-                        terminateProcess ph\n-\n-makeSignedJwt :: String -> String\n-makeSignedJwt sharedSecret = do\n-  let urc = JWT.ClaimsMap $ Map.fromList [ (\"admin\", Aeson.Bool True)]\n-  let cs = mempty { JWT.unregisteredClaims = urc }\n-  let key = JWT.hmacSecret $ T.pack sharedSecret\n-  let text = JWT.encodeSigned key mempty cs\n-  T.unpack text\n-\n-\n damlInstallerName :: String\n damlInstallerName\n     | isWindows = \"daml.exe\"\n     | otherwise = \"daml\"\n-\n--- | Like call process but returning stdout.\n-runCreateProcessForStdout :: CreateProcess -> IO String\n-runCreateProcessForStdout createProcess = do\n-    -- We use `repeat ' '` to keep stdin open. Really we would just\n-    -- like to inherit stdin but readCreateProcessWithExitCode does\n-    -- not allow us to overwrite just that and I don’t want to\n-    -- reimplement everything.\n-    (exit, out, err) <- readCreateProcessWithExitCode createProcess (repeat ' ')\n-    hPutStr stderr err\n-    unless (exit == ExitSuccess) $ throwIO $ ProcessExitFailure exit createProcess\n-    return out\n-\n-callCommandForStdout :: String -> IO String\n-callCommandForStdout cmd =\n-    runCreateProcessForStdout (shell cmd)\n-\n--- | Like call process but hiding stdout.\n-runCreateProcessQuiet :: CreateProcess -> IO ()\n-runCreateProcessQuiet createProcess = do\n-  _ <- runCreateProcessForStdout createProcess\n-  return ()\n-\n--- | Like callProcess but hides stdout.\n-callProcessQuiet :: FilePath -> [String] -> IO ()\n-callProcessQuiet cmd args =\n-    runCreateProcessQuiet (proc cmd args)\n-\n--- | Like callCommand but hides stdout.\n-callCommandQuiet :: String -> IO ()\n-callCommandQuiet cmd =\n-    runCreateProcessQuiet (shell cmd)\n-\n-data ProcessExitFailure = ProcessExitFailure !ExitCode !CreateProcess\n-    deriving (Show, Typeable)\n-\n-instance Exception ProcessExitFailure\n-\n--- This is slightly hacky: we need to find a free port but pass it to an\n--- external process. Technically this port could be reused between us\n--- getting it from the kernel and the external process listening\n--- on that port but ports are usually not reused aggressively so this should\n--- be fine and is certainly better than hardcoding the port.\n-getFreePort :: IO PortNumber"
  },
  {
    "id" : "9051321c-13bc-4012-8ab5-8b57ca56e065",
    "prId" : 5273,
    "comments" : [
      {
        "id" : "4cdc3c63-0831-4609-b7f7-8b33d0a27f15",
        "parentId" : null,
        "author" : null,
        "body" : "This should be fine as long as we never add a space in a template name.",
        "createdAt" : "2020-03-30T11:38:44Z",
        "updatedAt" : "2020-03-30T11:39:35Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "89c9febd-792a-4ed1-b0bb-026859e93930",
        "parentId" : "4cdc3c63-0831-4609-b7f7-8b33d0a27f15",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Spaces in template names seems like a pretty terrible UX so I’m happy to have that blow up in tests :slightly_smiling_face: ",
        "createdAt" : "2020-03-30T11:44:25Z",
        "updatedAt" : "2020-03-30T11:44:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9a025ec56aad37716cf5f8cc85113ce2fe7a45f8",
    "line" : 16,
    "diffHunk" : "@@ -466,6 +467,29 @@ cleanTests baseDir = testGroup \"daml clean\"\n                                 , unlines (map (\"       \"++) filesAtEnd)\n                                 ]\n \n+templateTests :: TestTree\n+templateTests = testGroup \"templates\"\n+    [ testCase name $ do\n+          withTempDir $ \\dir -> withCurrentDirectory dir $ do\n+              callCommandQuiet $ unwords [\"daml\", \"new\", \"foobar\", name]"
  },
  {
    "id" : "05d90dd6-196d-4ba8-bdb2-baf99942eef8",
    "prId" : 5259,
    "comments" : [
      {
        "id" : "7c8327a4-5451-48cd-a194-07201d563245",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This should go in `templateTests` not `cleanTests`.",
        "createdAt" : "2020-04-01T06:32:49Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fd1e1e34624b602bb4585644d0d7669f4ddafa8",
    "line" : null,
    "diffHunk" : "@@ -435,10 +437,19 @@ quickstartTests quickstartDir mvnDir = testGroup \"quickstart\"\n     where\n         mvnRepoFlag = \"-Dmaven.repo.local=\" <> mvnDir\n \n+createDamlAppTests :: FilePath -> TestTree\n+createDamlAppTests createDamlAppDir = testGroup \"create-daml-app\"\n+    [ testCase \"daml new\" $\n+          callCommandQuiet $ unwords [\"daml\", \"new\", createDamlAppDir, \"create-daml-app\"]\n+    , testCase \"daml build\" $ withCurrentDirectory createDamlAppDir $\n+          callCommandQuiet \"daml build\"\n+    ]\n+\n -- | Ensure that daml clean removes precisely the files created by daml build.\n cleanTests :: FilePath -> TestTree\n cleanTests baseDir = testGroup \"daml clean\"\n     [ cleanTestFor \"skeleton\"\n+    , cleanTestFor \"create-daml-app\""
  },
  {
    "id" : "04d13a5c-0730-4145-8a77-f449ecd2e073",
    "prId" : 5259,
    "comments" : [
      {
        "id" : "c6a4c656-e25d-493f-9d07-38bec4f1dcc6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Just create a new temp dir for the tests that need this. No need to copy more of the mess that we made here for new tests.",
        "createdAt" : "2020-04-01T06:33:34Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fd1e1e34624b602bb4585644d0d7669f4ddafa8",
    "line" : null,
    "diffHunk" : "@@ -68,13 +68,15 @@ tests tmpDir damlTypesDir = withSdkResource $ \\_ -> testGroup \"Integration tests\n     , testCase \"daml new --list\" $ callCommandQuiet \"daml new --list\"\n     , packagingTests\n     , quickstartTests quickstartDir mvnDir\n+    , createDamlAppTests createDamlAppDir\n     , cleanTests cleanDir\n     , templateTests\n     , deployTest deployDir\n     , fetchTest tmpDir\n     , codegenTests codegenDir damlTypesDir\n     ]\n     where quickstartDir = tmpDir </> \"q-u-i-c-k-s-t-a-r-t\"\n+          createDamlAppDir = tmpDir </> \"createApp\""
  },
  {
    "id" : "7e9ed8d5-8b24-4344-87df-4668662f46c2",
    "prId" : 5259,
    "comments" : [
      {
        "id" : "87b07229-9ac3-44b7-a983-56646cc6abd4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You can kill that in favor of just adding it to `templateTests`.",
        "createdAt" : "2020-04-01T06:35:06Z",
        "updatedAt" : "2020-04-01T23:57:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fd1e1e34624b602bb4585644d0d7669f4ddafa8",
    "line" : null,
    "diffHunk" : "@@ -435,10 +437,19 @@ quickstartTests quickstartDir mvnDir = testGroup \"quickstart\"\n     where\n         mvnRepoFlag = \"-Dmaven.repo.local=\" <> mvnDir\n \n+createDamlAppTests :: FilePath -> TestTree\n+createDamlAppTests createDamlAppDir = testGroup \"create-daml-app\""
  },
  {
    "id" : "af5ef557-c069-418a-ab0a-da86ba4b67f5",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "965efba7-b78b-4969-887b-1d3c8baa5fac",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I recently wrote a `DA.Test.Sandbx` module exactly for managing sandbox in tests. Let’s please use that.",
        "createdAt" : "2020-03-27T07:33:02Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 13,
    "diffHunk" : "@@ -499,6 +500,56 @@ codegenTests codegenDir = testGroup \"daml codegen\"\n                         contents <- listDirectory outDir\n                         assertBool \"bindings were written\" (not $ null contents)\n \n+-- | Start a sandbox on any free port\n+withSandboxOnFreePort :: (Int -> IO ()) -> IO ()"
  },
  {
    "id" : "4d51726b-fab0-4a0e-91bf-044dc57e36bf",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "afe57cdd-313f-4e34-98d5-2b89a46b33f5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Please don’t add more things to the integration tests that don’t absolutely need to be there. The integration tests are for testing an installed SDK and commands that rely on that. So it’s useful to test things like `daml start` that actually shell out to various SDK processes and rely on the assistant for that but it doesn’t buy us anything here.\r\n\r\nThe integration tests are already very slow and a nightmare to work with (they rebuild the world, `-p` doesn’t work, …). For this test, I would recommend that you add them to `//daml-assistant/daml-helper:tests`.",
        "createdAt" : "2020-03-27T07:35:17Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 4,
    "diffHunk" : "@@ -78,6 +78,7 @@ tests damlDir tmpDir = testGroup \"Integration tests\"\n     , quickstartTests quickstartDir mvnDir\n     , cleanTests cleanDir\n     , deployTest deployDir\n+    , fetchTest tmpDir"
  },
  {
    "id" : "193cd725-0813-41fb-94e3-28cf1afff0cf",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "70aaf407-5042-48d4-bbbe-f5cfe8e9ab65",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems very hacky, why not simply parse the DAR directly? The packaging tests have an example, see https://github.com/digital-asset/daml/blob/1872c668a554e2ec7cff8bc8838e3895a253962f/compiler/damlc/tests/src/DA/Test/Packaging.hs#L760",
        "createdAt" : "2020-03-27T07:36:44Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 32,
    "diffHunk" : "@@ -499,6 +500,56 @@ codegenTests codegenDir = testGroup \"daml codegen\"\n                         contents <- listDirectory outDir\n                         assertBool \"bindings were written\" (not $ null contents)\n \n+-- | Start a sandbox on any free port\n+withSandboxOnFreePort :: (Int -> IO ()) -> IO ()\n+withSandboxOnFreePort f = do\n+  port :: Int <- fromIntegral <$> getFreePort\n+  withDevNull $ \\devNull -> do\n+    let sandboxProc =\n+          (shell $ unwords\n+           [\"daml\"\n+           , \"sandbox\"\n+           , \"--wall-clock-time\"\n+           , \"--port\", show port\n+           ]) { std_out = UseHandle devNull, std_in = CreatePipe }\n+    withCreateProcess sandboxProc  $ \\_ _ _ ph -> do\n+      race_ (waitForProcess' sandboxProc ph) $ do\n+        waitForConnectionOnPort (threadDelay 100000) port\n+        f port\n+\n+-- | Using `daml inspect-dar`, discover the main package-identifier of a dar.\n+getMainPidByInspecingDar :: FilePath -> String -> IO String"
  },
  {
    "id" : "d11a4471-0e2c-4e06-ab55-be7456c86c2c",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "be1e7fcf-7789-465d-aba2-816de359ea84",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Unfortunately, doing this is the only way I've found to reliably get at the directory containing yarn.",
        "createdAt" : "2020-03-25T16:43:28Z",
        "updatedAt" : "2020-03-25T16:45:52Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "856ec26d-6cb0-4181-bfb8-269ecd9153e0",
        "parentId" : "be1e7fcf-7789-465d-aba2-816de359ea84",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's fine. We're doing this in other places too.",
        "createdAt" : "2020-03-25T17:17:09Z",
        "updatedAt" : "2020-03-25T17:50:49Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 21,
    "diffHunk" : "@@ -31,33 +31,43 @@ import Test.Main\n import Test.Tasty\n import Test.Tasty.HUnit\n import qualified Web.JWT as JWT\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.HashMap.Strict as HMS\n+import Data.Aeson\n \n+import DA.Directory\n import DA.Bazel.Runfiles\n import DA.Daml.Helper.Run\n import SdkVersion\n \n main :: IO ()\n-main =\n-    withTempDir $ \\tmpDir -> do\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n     -- We manipulate global state via the working directory and\n     -- the environment so running tests in parallel will cause trouble.\n-    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    yarn : damlTypesPath : args <- getArgs"
  },
  {
    "id" : "f4e43487-c331-48ce-bf8c-b80d9de22547",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "28af08ab-36b2-49e3-b6d3-998db1b250cc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why did you move this above the explaining comment?",
        "createdAt" : "2020-03-25T17:16:45Z",
        "updatedAt" : "2020-03-25T17:50:49Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8567df4f-a831-49b2-9675-c2f3e8e4f047",
        "parentId" : "28af08ab-36b2-49e3-b6d3-998db1b250cc",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "~Actually, I introduced the explaining comment 😄~ Oops, I lie. I'll move the comment above the action.",
        "createdAt" : "2020-03-25T18:21:56Z",
        "updatedAt" : "2020-03-25T18:23:01Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 17,
    "diffHunk" : "@@ -31,33 +31,43 @@ import Test.Main\n import Test.Tasty\n import Test.Tasty.HUnit\n import qualified Web.JWT as JWT\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.HashMap.Strict as HMS\n+import Data.Aeson\n \n+import DA.Directory\n import DA.Bazel.Runfiles\n import DA.Daml.Helper.Run\n import SdkVersion\n \n main :: IO ()\n-main =\n-    withTempDir $ \\tmpDir -> do\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True"
  },
  {
    "id" : "2b66ccfe-47bb-4f71-8f6c-062b4d1a53eb",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "53f3c44a-5b90-4785-a7b6-6aade14550ec",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Isn't that how it looks like?\r\n```suggestion\r\n                            -- SDK version is 0.0.0-SDKVERSION; daml2ts needs\r\n```",
        "createdAt" : "2020-03-25T17:19:51Z",
        "updatedAt" : "2020-03-25T17:50:49Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 93,
    "diffHunk" : "@@ -490,8 +503,22 @@ codegenTests codegenDir = testGroup \"daml codegen\"\n                     callCommandQuiet $ unwords [\"daml new\", projectDir, \"skeleton\"]\n                     withCurrentDirectory projectDir $ do\n                         callCommandQuiet \"daml build\"\n-                        let darFile = projectDir</> \".daml/dist/proj-\" ++ lang ++ \"-0.0.1.dar\"\n-                            outDir  = projectDir</> \"generated\" </> lang\n+                        let darFile = projectDir </> \".daml/dist/proj-\" ++ lang ++ \"-0.0.1.dar\"\n+                            outDir  = projectDir </> \"generated\" </> lang\n+                        when (lang == \"ts\") $ do\n+                          createDirectoryIfMissing True \"generated\"\n+                          withCurrentDirectory \"generated\" $ do\n+                            -- SDK version is 0.0.0; daml2ts needs"
  },
  {
    "id" : "026974c9-6c92-4f94-97b0-f1bbb29e5d7f",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "698c4157-d064-4b05-a781-2da1b47da67d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why not spend more 💵s?\r\n```suggestion\r\n                            BSL.writeFile \"package.json\" $ encode $\r\n                            -- ... and this package.json so it can find it.\r\n                              object\r\n                                [ \"private\" .= True\r\n                                , \"workspaces\" .= [T.pack lang]\r\n                                , \"resolutions\" .= HMS.fromList ([(\"@daml/types\", \"file:daml-types\")] :: [(T.Text, T.Text)])\r\n                                ]\r\n```",
        "createdAt" : "2020-03-25T17:21:44Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8c54e31c-4f01-4c97-b83a-db6a0e31679e",
        "parentId" : "698c4157-d064-4b05-a781-2da1b47da67d",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Lol :) Ok",
        "createdAt" : "2020-03-25T18:26:38Z",
        "updatedAt" : "2020-03-25T18:26:38Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 103,
    "diffHunk" : "@@ -490,8 +503,22 @@ codegenTests codegenDir = testGroup \"daml codegen\"\n                     callCommandQuiet $ unwords [\"daml new\", projectDir, \"skeleton\"]\n                     withCurrentDirectory projectDir $ do\n                         callCommandQuiet \"daml build\"\n-                        let darFile = projectDir</> \".daml/dist/proj-\" ++ lang ++ \"-0.0.1.dar\"\n-                            outDir  = projectDir</> \"generated\" </> lang\n+                        let darFile = projectDir </> \".daml/dist/proj-\" ++ lang ++ \"-0.0.1.dar\"\n+                            outDir  = projectDir </> \"generated\" </> lang\n+                        when (lang == \"ts\") $ do\n+                          createDirectoryIfMissing True \"generated\"\n+                          withCurrentDirectory \"generated\" $ do\n+                            -- SDK version is 0.0.0; daml2ts needs\n+                            -- 'daml-types' to be here in the filesystem...\n+                            copyDirectory damlTypes \"daml-types\"\n+                            BSL.writeFile \"package.json\" $ encode (\n+                            -- ... and this package.json so it can find it.\n+                              object\n+                                [ \"private\" .= True\n+                                , \"workspaces\" .= [T.pack lang]\n+                                , \"resolutions\" .= HMS.fromList ([(\"@daml/types\", \"file:daml-types\")] :: [(T.Text, T.Text)])\n+                                ]\n+                              )"
  },
  {
    "id" : "cb4a2200-4ea2-4bd1-bff0-e6d8d871305f",
    "prId" : 5171,
    "comments" : [
      {
        "id" : "b127ebce-7f89-41c6-9ae6-228171fcf94c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can you please leave _one_ comment that explains what we're doing here, namely making `@daml-types-0.0.9-SDKVERSION` available to yarn, instead of having multiple comments spread out below.\r\n\r\nOther than that, very nice solution!",
        "createdAt" : "2020-03-25T17:26:11Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "01da854f-be19-4ded-a6a2-e9c8055516c1",
        "parentId" : "b127ebce-7f89-41c6-9ae6-228171fcf94c",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok",
        "createdAt" : "2020-03-25T18:25:45Z",
        "updatedAt" : "2020-03-25T18:25:45Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 90,
    "diffHunk" : "@@ -490,8 +503,22 @@ codegenTests codegenDir = testGroup \"daml codegen\"\n                     callCommandQuiet $ unwords [\"daml new\", projectDir, \"skeleton\"]\n                     withCurrentDirectory projectDir $ do\n                         callCommandQuiet \"daml build\"\n-                        let darFile = projectDir</> \".daml/dist/proj-\" ++ lang ++ \"-0.0.1.dar\"\n-                            outDir  = projectDir</> \"generated\" </> lang\n+                        let darFile = projectDir </> \".daml/dist/proj-\" ++ lang ++ \"-0.0.1.dar\"\n+                            outDir  = projectDir </> \"generated\" </> lang\n+                        when (lang == \"ts\") $ do"
  },
  {
    "id" : "5863ff68-e3dc-4539-bf9f-5e40b5906811",
    "prId" : 5001,
    "comments" : [
      {
        "id" : "15e857a1-77aa-4c75-80c2-7712db166c90",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think this needs a newtype, it is quite unclear from reading the code what the boolean does.",
        "createdAt" : "2020-03-13T19:54:53Z",
        "updatedAt" : "2020-03-13T20:44:57Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "65f95b5a-5954-4b72-b5ec-a3730f4a0fde",
        "parentId" : "15e857a1-77aa-4c75-80c2-7712db166c90",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok",
        "createdAt" : "2020-03-13T20:02:52Z",
        "updatedAt" : "2020-03-13T20:44:57Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fd62e20b94f00b0592230f520a91b0f57ca3096f",
    "line" : null,
    "diffHunk" : "@@ -456,13 +456,13 @@ cleanTests baseDir = testGroup \"daml clean\"\n -- | Check we can generate language bindings.\n codegenTests :: FilePath -> TestTree\n codegenTests codegenDir = testGroup \"daml codegen\"\n-    [ codegenTestFor \"ts\" Nothing\n-    , codegenTestFor \"java\" Nothing\n-    , codegenTestFor \"scala\" (Just \"com.cookiemonster.nomnomnom\")\n+    [ codegenTestFor \"ts\" Nothing True"
  },
  {
    "id" : "9215ae37-fdf9-4181-8929-a00c8c847e70",
    "prId" : 4685,
    "comments" : [
      {
        "id" : "b9fa341e-5961-47d3-8744-bb93a165c3a1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Would be good to at least have a comment on what is in the token and maybe just use the JWT Haskell library to generate it (`daml start` in `daml-helper` does this).",
        "createdAt" : "2020-02-25T11:58:40Z",
        "updatedAt" : "2020-02-25T17:04:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46bb44d8-e97e-4286-ae73-8e9637262bed",
        "parentId" : "b9fa341e-5961-47d3-8744-bb93a165c3a1",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Done, I've gone the JWT route.",
        "createdAt" : "2020-02-25T17:21:18Z",
        "updatedAt" : "2020-02-25T17:21:18Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2ff1b1209f70bdf38b45c40fa67428615648db76",
    "line" : null,
    "diffHunk" : "@@ -185,6 +186,73 @@ packagingTests = testGroup \"packaging\"\n         withCurrentDirectory projDir $ callCommandQuiet \"daml build\"\n         let dar = projDir </> \".daml/dist/script-example-0.0.1.dar\"\n         assertBool \"script-example-0.0.1.dar was not created.\" =<< doesFileExist dar\n+     , testCase \"Run init-script\" $ withTempDir $ \\tmpDir -> do\n+        let projDir = tmpDir </> \"init-script-example\"\n+        createDirectoryIfMissing True (projDir </> \"daml\")\n+        writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+          [ \"sdk-version: \" <> sdkVersion\n+          , \"name: init-script-example\"\n+          , \"version: \\\"1.0\\\"\"\n+          , \"source: daml\"\n+          , \"dependencies:\"\n+          , \"  - daml-prim\"\n+          , \"  - daml-stdlib\"\n+          , \"  - daml-script\"\n+          , \"parties:\"\n+          , \"- Alice\"\n+          , \"init-script: Main:init\"\n+          ]\n+        writeFileUTF8 (projDir </> \"daml/Main.daml\") $ unlines\n+          [ \"daml 1.2\"\n+          , \"module Main where\"\n+          , \"import Prelude hiding (submit)\"\n+          , \"import Daml.Script\"\n+          , \"template T with p : Party where signatory p\"\n+          , \"init : Script ()\"\n+          , \"init = do\"\n+          , \"  alice <- allocatePartyWithHint \\\"Alice\\\" (PartyIdHint \\\"Alice\\\")\"\n+          , \"  alice `submit` createCmd (T alice)\"\n+          , \"  pure ()\"\n+          ]\n+        withCurrentDirectory projDir $ do\n+          callProcess \"daml\" [\"build\"]\n+          callProcess \"daml\" [\"damlc\", \"inspect-dar\", \".daml/dist/init-script-example-1.0.dar\"]\n+        sandboxPort :: Int <- fromIntegral <$> getFreePort\n+        jsonApiPort :: Int <- fromIntegral <$> getFreePort\n+        let startProc = shell $ unwords\n+              [ \"daml\"\n+              , \"start\"\n+              , \"--start-navigator\"\n+              , \"no\"\n+              , \"--sandbox-port\"\n+              , show sandboxPort\n+              , \"--json-api-port\"\n+              , show jsonApiPort\n+              ]\n+        withCurrentDirectory projDir $\n+          withCreateProcess startProc $ \\_ _ _ startPh ->\n+            race_ (waitForProcess' startProc startPh) $ do\n+              let headers =\n+                    [ (\"Authorization\", \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZWRnZXJJZCI6Ik15TGVkZ2VyIiwiYXBwbGljYXRpb25JZCI6ImZvb2JhciIsInBhcnR5IjoiQWxpY2UifQ.4HYfzjlYr1ApUDot0a6a4zB49zS_jrwRUOCkAiPMqo0\")"
  },
  {
    "id" : "44a9ca3e-1db9-4ae4-a637-887c856041c7",
    "prId" : 3696,
    "comments" : [
      {
        "id" : "2a0615a1-82e0-4f55-83fb-0be0977aa9f6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we have a tracking ticket for this please? 😬 ",
        "createdAt" : "2019-12-02T19:59:55Z",
        "updatedAt" : "2019-12-04T14:02:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8cf50d29-d7c6-402d-82ba-47ad853f0110",
        "parentId" : "2a0615a1-82e0-4f55-83fb-0be0977aa9f6",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I opened https://github.com/digital-asset/daml/issues/3704 and added a warning when you invoke `damlc migrate`.",
        "createdAt" : "2019-12-02T20:20:27Z",
        "updatedAt" : "2019-12-04T14:02:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7c070b98-acf6-4582-9c4c-5756a6c8cbbc",
        "parentId" : "2a0615a1-82e0-4f55-83fb-0be0977aa9f6",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The warning is a great idea. 👍 ",
        "createdAt" : "2019-12-02T20:22:32Z",
        "updatedAt" : "2019-12-04T14:02:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "72ee178dfa935c138612161f3bdfb610910e1412",
    "line" : 208,
    "diffHunk" : "@@ -145,287 +145,292 @@ packagingTests = testGroup \"packaging\"\n         withCurrentDirectory projDir $ callCommandQuiet \"daml build\"\n         let dar = projDir </> \".daml/dist/script-example-0.0.1.dar\"\n         assertBool \"script-example-0.0.1.dar was not created.\" =<< doesFileExist dar\n-     , testCaseSteps \"Build migration package\" $ \\step -> withTempDir $ \\tmpDir -> do\n-        -- it's important that we have fresh empty directories here!\n-        let projectA = tmpDir </> \"a-1.0\"\n-        let projectB = tmpDir </> \"a-2.0\"\n-        let projectUpgrade = tmpDir </> \"upgrade\"\n-        let projectRollback = tmpDir </> \"rollback\"\n-        let aDar = projectA </> \"projecta.dar\"\n-        let bDar = projectB </> \"projectb.dar\"\n-        let upgradeDar = projectUpgrade </> distDir </> \"upgrade-0.0.1.dar\"\n-        let rollbackDar= projectRollback </> distDir </> \"rollback-0.0.1.dar\"\n-        let bWithUpgradesDar = \"a-2.0-with-upgrades.dar\"\n-        step \"Creating project a-1.0 ...\"\n-        createDirectoryIfMissing True (projectA </> \"daml\")\n-        writeFileUTF8 (projectA </> \"daml\" </> \"Main.daml\") $ unlines\n-            [ \"{-# LANGUAGE EmptyCase #-}\"\n-            , \"daml 1.2\"\n-            , \"module Main where\"\n-            , \"data OnlyA\"\n-            , \"data Both\"\n-            , \"template Foo\"\n-            , \"  with\"\n-            , \"    a : Int\"\n-            , \"    p : Party\"\n-            , \"  where\"\n-            , \"    signatory p\"\n-            ]\n-        writeFileUTF8 (projectA </> \"daml.yaml\") $ unlines\n-            [ \"sdk-version: \" <> sdkVersion\n-            , \"name: a\"\n-            , \"version: \\\"1.0\\\"\"\n-            , \"source: daml\"\n-            , \"exposed-modules: [Main]\"\n-            , \"dependencies:\"\n-            , \"  - daml-prim\"\n-            , \"  - daml-stdlib\"\n-            ]\n-        -- We use -o to test that we do not depend on the name of the dar\n-        withCurrentDirectory projectA $ callCommandQuiet $ \"daml build -o \" <> aDar\n-        assertBool \"a-1.0.dar was not created.\" =<< doesFileExist aDar\n-        step \"Creating project a-2.0 ...\"\n-        createDirectoryIfMissing True (projectB </> \"daml\")\n-        writeFileUTF8 (projectB </> \"daml\" </> \"Main.daml\") $ unlines\n-            [ \"daml 1.2\"\n-            , \"module Main where\"\n-            , \"data OnlyB\"\n-            , \"data Both\"\n-            , \"template Foo\"\n-            , \"  with\"\n-            , \"    a : Int\"\n-            , \"    p : Party\"\n-            , \"  where\"\n-            , \"    signatory p\"\n-            ]\n-        writeFileUTF8 (projectB </> \"daml.yaml\") $ unlines\n-            [ \"sdk-version: \" <> sdkVersion\n-            , \"name: a\"\n-            , \"version: \\\"2.0\\\"\"\n-            , \"source: daml\"\n-            , \"exposed-modules: [Main]\"\n-            , \"dependencies:\"\n-            , \"  - daml-prim\"\n-            , \"  - daml-stdlib\"\n-            ]\n-        -- We use -o to test that we do not depend on the name of the dar\n-        withCurrentDirectory projectB $ callCommandQuiet $ \"daml build -o \" <> bDar\n-        assertBool \"a-2.0.dar was not created.\" =<< doesFileExist bDar\n-        step \"Creating upgrade/rollback project\"\n-        -- We use -o to verify that we do not depend on the\n-        callCommandQuiet $ unwords [\"daml\", \"migrate\", projectUpgrade, aDar, bDar]\n-        callCommandQuiet $ unwords [\"daml\", \"migrate\", projectRollback, bDar, aDar]\n-        step \"Build migration project\"\n-        withCurrentDirectory projectUpgrade $\n-            callCommandQuiet \"daml build\"\n-        assertBool \"upgrade-0.0.1.dar was not created\" =<< doesFileExist upgradeDar\n-        step \"Build rollback project\"\n-        withCurrentDirectory projectRollback $\n-            callCommandQuiet \"daml build\"\n-        assertBool \"rollback-0.0.1.dar was not created\" =<< doesFileExist rollbackDar\n-        step \"Merging upgrade dar\"\n-        callCommandQuiet $\n-          unwords\n-              [ \"daml damlc merge-dars\"\n-              , bDar\n-              , upgradeDar\n-              , \"--dar-name\"\n-              , bWithUpgradesDar\n-              ]\n-        assertBool \"a-0.2-with-upgrades.dar was not created.\" =<< doesFileExist bWithUpgradesDar\n-      , testCaseSteps \"Build migration package with generics\" $ \\step -> withTempDir $ \\tmpDir -> do\n-        -- it's important that we have fresh empty directories here!\n-        let projectA = tmpDir </> \"a-1.0\"\n-        let projectB = tmpDir </> \"a-2.0\"\n-        let projectUpgrade = tmpDir </> \"upgrade\"\n-        let aDar = projectA </> \"projecta.dar\"\n-        let bDar = projectB </> \"projectb.dar\"\n-        let upgradeDar = projectUpgrade </> distDir </> \"upgrade-0.0.1.dar\"\n-        step \"Creating project a-1.0 ...\"\n-        createDirectoryIfMissing True (projectA </> \"daml\")\n-        writeFileUTF8 (projectA </> \"daml\" </> \"Main.daml\") $ unlines\n-            [ \"{-# LANGUAGE EmptyCase #-}\"\n-            , \"daml 1.2\"\n-            , \"module Main where\"\n-            , \"data OnlyA\"\n-            , \"data Both\"\n-            , \"template Foo\"\n-            , \"  with\"\n-            , \"    a : Int\"\n-            , \"    p : Party\"\n-            , \"  where\"\n-            , \"    signatory p\"\n-            ]\n-        writeFileUTF8 (projectA </> \"daml.yaml\") $ unlines\n-            [ \"sdk-version: \" <> sdkVersion\n-            , \"name: a\"\n-            , \"version: \\\"1.0\\\"\"\n-            , \"source: daml\"\n-            , \"exposed-modules: [Main]\"\n-            , \"dependencies:\"\n-            , \"  - daml-prim\"\n-            , \"  - daml-stdlib\"\n-            ]\n-        -- We use -o to test that we do not depend on the name of the dar\n-        withCurrentDirectory projectA $ callCommandQuiet $ \"daml build -o \" <> aDar\n-        assertBool \"a-1.0.dar was not created.\" =<< doesFileExist aDar\n-        step \"Creating project a-2.0 ...\"\n-        createDirectoryIfMissing True (projectB </> \"daml\")\n-        writeFileUTF8 (projectB </> \"daml\" </> \"Main.daml\") $ unlines\n-            [ \"daml 1.2\"\n-            , \"module Main where\"\n-            , \"data OnlyB\"\n-            , \"data Both\"\n-            , \"template Foo\"\n-            , \"  with\"\n-            , \"    a : Int\"\n-            , \"    p : Party\"\n-            , \"    new : Optional Text\"\n-            , \"  where\"\n-            , \"    signatory p\"\n-            ]\n-        writeFileUTF8 (projectB </> \"daml.yaml\") $ unlines\n-            [ \"sdk-version: \" <> sdkVersion\n-            , \"name: a\"\n-            , \"version: \\\"2.0\\\"\"\n-            , \"source: daml\"\n-            , \"exposed-modules: [Main]\"\n-            , \"dependencies:\"\n-            , \"  - daml-prim\"\n-            , \"  - daml-stdlib\"\n-            ]\n-        -- We use -o to test that we do not depend on the name of the dar\n-        withCurrentDirectory projectB $ callCommandQuiet $ \"daml build -o \" <> bDar\n-        assertBool \"a-2.0.dar was not created.\" =<< doesFileExist bDar\n-        step \"Creating upgrade/rollback project\"\n-        callCommandQuiet $ unwords [\"daml\", \"migrate\", projectUpgrade, aDar, bDar]\n-        step \"Generate generic instances\"\n-        writeFileUTF8 (projectUpgrade </> \"daml\" </> \"Main.daml\") $ unlines\n-           [ \"daml 1.2\"\n-           , \"module Main where\"\n-           , \"import MainA qualified as A\"\n-           , \"import MainB qualified as B\"\n-           , \"import MainAGenInstances()\"\n-           , \"import MainBGenInstances()\"\n-           , \"import DA.Upgrade\"\n-           , \"import DA.Generics\"\n-           , \"instance Convertible A.Foo B.Foo\"\n-           , \"instance Convertible B.Foo A.Foo\"\n-           ]\n-        callCommandQuiet $\n-            unwords\n-                [ \"daml\"\n-                , \"damlc\"\n-                , \"generate-generic-src\"\n-                , \"--srcdir\"\n-                , projectUpgrade </> \"daml\"\n-                , \"--qualify\"\n-                , \"A\"\n-                , aDar\n-                ]\n-        callCommandQuiet $\n-            unwords\n-                [ \"daml\"\n-                , \"damlc\"\n-                , \"generate-generic-src\"\n-                , \"--srcdir\"\n-                , projectUpgrade </> \"daml\"\n-                , \"--qualify\"\n-                , \"B\"\n-                , bDar\n-                ]\n-        step \"Build migration project\"\n-        withCurrentDirectory projectUpgrade $\n-            callCommandQuiet \"daml build --generated-src\"\n-        assertBool \"upgrade-0.0.1.dar was not created\" =<< doesFileExist upgradeDar\n+    -- Note(MK): The hacks around daml-prim which were already not quite right, e.g.,\n+    -- we didn’t include daml-prim from all SDK versions, are broken completely\n+    -- now that we split daml-prim into multiple packages. Therefore, we\n+    -- disable this for now."
  }
]