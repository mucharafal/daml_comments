[
  {
    "id" : "5cdd39af-d8e4-4d47-8c2e-09c8e0010bc0",
    "prId" : 1762,
    "comments" : [
      {
        "id" : "5269a131-4a2a-47eb-be2e-4c495350303c",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n                  && length files == 3\r\n```\r\n\r\nI think ^",
        "createdAt" : "2019-06-19T12:57:15Z",
        "updatedAt" : "2019-06-19T13:14:47Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d70830f2-c748-45b7-8731-dfe82e61e05b",
        "parentId" : "5269a131-4a2a-47eb-be2e-4c495350303c",
        "author" : null,
        "body" : "& maybe change the exception below to mention `unreleased.rst` as well",
        "createdAt" : "2019-06-19T12:58:02Z",
        "updatedAt" : "2019-06-19T13:14:47Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dc7ad27b-bec0-4482-88ab-c297423e0a89",
        "parentId" : "5269a131-4a2a-47eb-be2e-4c495350303c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Ooops, thanks.",
        "createdAt" : "2019-06-19T12:59:49Z",
        "updatedAt" : "2019-06-19T13:14:47Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "48693c38-c73a-41bf-99af-69f368c21555",
        "parentId" : "5269a131-4a2a-47eb-be2e-4c495350303c",
        "author" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/1762/commits/7574d179921f8de806e3cfed0c2568f454c9eacb",
        "createdAt" : "2019-06-19T13:07:18Z",
        "updatedAt" : "2019-06-19T13:14:47Z",
        "lastEditedBy" : {
          "login" : "stefanobaghino-da",
          "name" : "Stefano Baghino",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/43749967?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "42749ed7-2418-472b-b797-68caae865055",
        "parentId" : "5269a131-4a2a-47eb-be2e-4c495350303c",
        "author" : null,
        "body" : "Perfect, thank you!",
        "createdAt" : "2019-06-19T13:08:27Z",
        "updatedAt" : "2019-06-19T13:14:47Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ee571e9d5b98070ec11151840369f2f710c9e0ae",
    "line" : null,
    "diffHunk" : "@@ -380,6 +380,7 @@ isReleaseCommit :: MonadCI m => m Bool\n isReleaseCommit = do\n     files <- gitChangedFiles \"HEAD\"\n     let isRelease = \"VERSION\" `elem` files\n+                 && \"unreleased.rst\" `elem` files\n                  && \"docs/source/support/release-notes.rst\" `elem` files\n                  && length files == 2"
  },
  {
    "id" : "921a5a4f-bcbf-434d-b1ad-b2381f0e6f79",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "ec854710-aadb-4b34-9a94-47f4a119d348",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Instead of creating 5 singleton lists and concatenating them, could you please create just one list with 5 elements.",
        "createdAt" : "2019-05-17T06:34:04Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "407d0507-c409-49b6-866c-70595ee11743",
        "parentId" : "ec854710-aadb-4b34-9a94-47f4a119d348",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "I think that this not possible due to guards on each of the elements.",
        "createdAt" : "2019-05-17T19:54:34Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "44203b5c-da6a-4e09-87e6-4ccdb9ae02b2",
        "parentId" : "ec854710-aadb-4b34-9a94-47f4a119d348",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yeah, you're right. I didn't scroll all the way to the end. My bad. :|",
        "createdAt" : "2019-05-20T12:40:22Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -254,6 +259,26 @@ artifactFiles allArtifacts art@Artifact{..} = do\n         [(directory </> scalaSourceJarIn, outDir </> scalaSourceJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just scalaSourceJarIn <- pure mbScalaSourceJarIn] <>\n         [(directory </> javadocJarIn, outDir </> javadocJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just javadocJarIn <- pure mbJavadocJarIn]\n \n+-- | Given an artifact, produce a list of pairs of an input file and the Maven coordinates\n+artifactCoords :: E.MonadThrow m => AllArtifacts -> Artifact PomData -> m [(MavenCoords, Path Rel File)]\n+artifactCoords allArtifacts art@Artifact{..} = do\n+    let PomData{..} = artMetadata\n+    let (directory, name) = splitBazelTarget artTarget\n+    let jarClassifier =  if getPlatformDependent artPlatformDependent then Just osName else Nothing\n+    directory <- parseRelDir $ unpack directory\n+\n+    mainArtifactFile <- parseRelFile $ unpack $ mainFileName artReleaseType name\n+    pomFile <- parseRelFile (unpack (name <> \"_pom.xml\"))\n+    mbSourceJarFile <- traverse (parseRelFile . unpack) (sourceJarName art)\n+    mbScalaSourceJarFile <- traverse (parseRelFile . unpack) (scalaSourceJarName art)\n+    mbJavadocJarFile <- traverse (parseRelFile . unpack) (javadocJarName art)\n+\n+    pure $ [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = jarClassifier, artifactType = mainExt artReleaseType }, directory </> mainArtifactFile) | shouldRelease allArtifacts artPlatformDependent] <>\n+           [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = Nothing, artifactType = T.pack \"pom\" }, directory </> pomFile) | isJar artReleaseType, shouldRelease allArtifacts (PlatformDependent False)] <>\n+           [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = Just $ T.pack \"sources\", artifactType = T.pack \"jar\" }, directory </> sourceJarFile) | shouldRelease allArtifacts (PlatformDependent False), Just sourceJarFile <- pure mbSourceJarFile] <>\n+           [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = Just $ T.pack \"sources\", artifactType = T.pack \"jar\" }, directory </> scalaSourceJarFile) | shouldRelease allArtifacts (PlatformDependent False), Just scalaSourceJarFile <- pure mbScalaSourceJarFile] <>\n+           [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = Just $ T.pack \"javadocs\", artifactType = T.pack \"jar\" }, directory </> javadocSourceJarFile) | shouldRelease allArtifacts (PlatformDependent False), Just javadocSourceJarFile <- pure mbJavadocJarFile]"
  },
  {
    "id" : "a2b37168-d7b4-4e68-8be4-a152c977e8d7",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "ac2843d1-79a2-407b-a2cc-3f319ec1d46f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n           [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = Just \"sources\", artifactType = \"jar\" }, directory </> sourceJarFile) | shouldRelease allArtifacts (PlatformDependent False), sourceJarFile <- maybeToList mbSourceJarFile] <>\r\n```\r\nDue to `{-# LANGUAGE OverloadedStrings #-}` we don't need the `T.pack`. Same in the next two lines.",
        "createdAt" : "2019-05-20T12:40:56Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -254,6 +259,26 @@ artifactFiles allArtifacts art@Artifact{..} = do\n         [(directory </> scalaSourceJarIn, outDir </> scalaSourceJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just scalaSourceJarIn <- pure mbScalaSourceJarIn] <>\n         [(directory </> javadocJarIn, outDir </> javadocJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just javadocJarIn <- pure mbJavadocJarIn]\n \n+-- | Given an artifact, produce a list of pairs of an input file and the Maven coordinates\n+artifactCoords :: E.MonadThrow m => AllArtifacts -> Artifact PomData -> m [(MavenCoords, Path Rel File)]\n+artifactCoords allArtifacts art@Artifact{..} = do\n+    let PomData{..} = artMetadata\n+    let (directory, name) = splitBazelTarget artTarget\n+    let jarClassifier =  if getPlatformDependent artPlatformDependent then Just osName else Nothing\n+    directory <- parseRelDir $ unpack directory\n+\n+    mainArtifactFile <- parseRelFile $ unpack $ mainFileName artReleaseType name\n+    pomFile <- parseRelFile (unpack (name <> \"_pom.xml\"))\n+    mbSourceJarFile <- traverse (parseRelFile . unpack) (sourceJarName art)\n+    mbScalaSourceJarFile <- traverse (parseRelFile . unpack) (scalaSourceJarName art)\n+    mbJavadocJarFile <- traverse (parseRelFile . unpack) (javadocJarName art)\n+\n+    pure $ [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = jarClassifier, artifactType = mainExt artReleaseType }, directory </> mainArtifactFile) | shouldRelease allArtifacts artPlatformDependent] <>\n+           [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = Nothing, artifactType = T.pack \"pom\" }, directory </> pomFile) | isJar artReleaseType, shouldRelease allArtifacts (PlatformDependent False)] <>\n+           [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = Just $ T.pack \"sources\", artifactType = T.pack \"jar\" }, directory </> sourceJarFile) | shouldRelease allArtifacts (PlatformDependent False), Just sourceJarFile <- pure mbSourceJarFile] <>"
  },
  {
    "id" : "6ca25bf4-1cd5-4725-b1d6-f44de6568ca4",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "e3510eee-2bfc-488e-b997-740def2b5b78",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Adding\r\n```haskell\r\nlet mavenCoords classifier artifactType =\r\n      MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier, artifactType }\r\n```\r\nwould simplify this code quite a bit. Moving the `shouldRelease allArtifacts (PlatformDependent False)` part out of the last 4 list comprehensions might also make it easier to understand.",
        "createdAt" : "2019-05-20T12:44:28Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "387dc13b-7685-4123-a84e-45e565b7dc1e",
        "parentId" : "e3510eee-2bfc-488e-b997-740def2b5b78",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Much cleaner. Thanks",
        "createdAt" : "2019-05-27T08:49:51Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -254,6 +259,26 @@ artifactFiles allArtifacts art@Artifact{..} = do\n         [(directory </> scalaSourceJarIn, outDir </> scalaSourceJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just scalaSourceJarIn <- pure mbScalaSourceJarIn] <>\n         [(directory </> javadocJarIn, outDir </> javadocJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just javadocJarIn <- pure mbJavadocJarIn]\n \n+-- | Given an artifact, produce a list of pairs of an input file and the Maven coordinates\n+artifactCoords :: E.MonadThrow m => AllArtifacts -> Artifact PomData -> m [(MavenCoords, Path Rel File)]\n+artifactCoords allArtifacts art@Artifact{..} = do\n+    let PomData{..} = artMetadata\n+    let (directory, name) = splitBazelTarget artTarget\n+    let jarClassifier =  if getPlatformDependent artPlatformDependent then Just osName else Nothing\n+    directory <- parseRelDir $ unpack directory\n+\n+    mainArtifactFile <- parseRelFile $ unpack $ mainFileName artReleaseType name\n+    pomFile <- parseRelFile (unpack (name <> \"_pom.xml\"))\n+    mbSourceJarFile <- traverse (parseRelFile . unpack) (sourceJarName art)\n+    mbScalaSourceJarFile <- traverse (parseRelFile . unpack) (scalaSourceJarName art)\n+    mbJavadocJarFile <- traverse (parseRelFile . unpack) (javadocJarName art)\n+\n+    pure $ [ (MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier = jarClassifier, artifactType = mainExt artReleaseType }, directory </> mainArtifactFile) | shouldRelease allArtifacts artPlatformDependent] <>"
  },
  {
    "id" : "1a8047e4-4c11-4dcf-8506-796d772507eb",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "e462ba77-3bf8-46b3-9c09-4d2810f9ef74",
        "parentId" : null,
        "author" : null,
        "body" : "Not sure if `shouldReleasePlatInd` should appear on this line ... the main artifact doesn't have to be platform independent in `artifactFiles`.",
        "createdAt" : "2019-06-14T13:16:23Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ad1aad03-1cb3-4fd1-8dcf-29871b87095d",
        "parentId" : "e462ba77-3bf8-46b3-9c09-4d2810f9ef74",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Good catch! Too much copy and pasting...",
        "createdAt" : "2019-06-14T13:20:19Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2e2b4819-17f5-4bff-b5d8-4c970e4fbc02",
        "parentId" : "e462ba77-3bf8-46b3-9c09-4d2810f9ef74",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "implemented In 2d9b593a6",
        "createdAt" : "2019-06-14T18:35:53Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -233,32 +245,64 @@ artifactFiles allArtifacts art@Artifact{..} = do\n     directory <- parseRelDir $ unpack directory\n \n     mainArtifactIn <- parseRelFile $ unpack $ mainFileName artReleaseType name\n-    mainArtifactOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # mainExt artReleaseType))\n+    mainArtifactOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \".\" # mainExt artReleaseType))\n \n     pomFileIn <- parseRelFile (unpack (name <> \"_pom.xml\"))\n     pomFileOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion #\".pom\"))\n \n     mbSourceJarIn <- traverse (parseRelFile . unpack) (sourceJarName art)\n-    sourceJarOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \"-sources\" # mainExt artReleaseType))\n+    sourceJarOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \"-sources\" # \".\" # mainExt artReleaseType))\n \n     mbScalaSourceJarIn <- traverse (parseRelFile . unpack) (scalaSourceJarName art)\n-    scalaSourceJarOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \"-sources\" # mainExt artReleaseType))\n+    scalaSourceJarOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \"-sources\" # \".\" # mainExt artReleaseType))\n \n     mbJavadocJarIn <- traverse (parseRelFile . unpack) (javadocJarName art)\n-    javadocJarOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \"-javadoc\" # mainExt artReleaseType))\n+    javadocJarOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \"-javadoc\" # \".\" # mainExt artReleaseType))\n+\n+    mbScaladocJarIn <- traverse (parseRelFile . unpack) (scaladocJarName art)\n+    scaladocJarOut <- parseRelFile (unpack (pomArtifactId #\"-\"# pomVersion # ostxt # \"-scaladoc\" # \".\" # mainExt artReleaseType))\n+\n+    let shouldReleasePlatInd = shouldRelease allArtifacts (PlatformDependent False)\n \n     pure $\n         [(directory </> mainArtifactIn, outDir </> mainArtifactOut) | shouldRelease allArtifacts artPlatformDependent] <>\n-        [(directory </> pomFileIn, outDir </> pomFileOut) | isJar artReleaseType, shouldRelease allArtifacts (PlatformDependent False)] <>\n-        [(directory </> sourceJarIn, outDir </> sourceJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just sourceJarIn <- pure mbSourceJarIn] <>\n-        [(directory </> scalaSourceJarIn, outDir </> scalaSourceJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just scalaSourceJarIn <- pure mbScalaSourceJarIn] <>\n-        [(directory </> javadocJarIn, outDir </> javadocJarOut) | shouldRelease allArtifacts (PlatformDependent False), Just javadocJarIn <- pure mbJavadocJarIn]\n+        [(directory </> pomFileIn, outDir </> pomFileOut) | isJar artReleaseType, shouldReleasePlatInd] <>\n+        [(directory </> sourceJarIn, outDir </> sourceJarOut) | shouldReleasePlatInd, Just sourceJarIn <- pure mbSourceJarIn] <>\n+        [(directory </> scalaSourceJarIn, outDir </> scalaSourceJarOut) | shouldReleasePlatInd, Just scalaSourceJarIn <- pure mbScalaSourceJarIn] <>\n+        [(directory </> javadocJarIn, outDir </> javadocJarOut) | shouldReleasePlatInd, Just javadocJarIn <- pure mbJavadocJarIn] <>\n+        [(directory </> scaladocJarIn, outDir </> scaladocJarOut) | shouldReleasePlatInd, Just scaladocJarIn <- pure mbScaladocJarIn]\n+\n+-- | Given an artifact, produce a list of pairs of an input file and the Maven coordinates\n+artifactCoords :: E.MonadThrow m => AllArtifacts -> Artifact PomData -> m [(MavenCoords, Path Rel File)]\n+artifactCoords allArtifacts art@Artifact{..} = do\n+    let PomData{..} = artMetadata\n+    let (directory, name) = splitBazelTarget artTarget\n+    let jarClassifier =  if getPlatformDependent artPlatformDependent then Just osName else Nothing\n+    directory <- parseRelDir $ unpack directory\n+\n+    mainArtifactFile <- parseRelFile $ unpack $ mainFileName artReleaseType name\n+    pomFile <- parseRelFile (unpack (name <> \"_pom.xml\"))\n+    mbSourceJarFile <- traverse (parseRelFile . unpack) (sourceJarName art)\n+    mbScalaSourceJarFile <- traverse (parseRelFile . unpack) (scalaSourceJarName art)\n+    mbJavadocJarFile <- traverse (parseRelFile . unpack) (javadocJarName art)\n+    mbScaladocJarFile <- traverse (parseRelFile . unpack) (scaladocJarName art)\n+\n+    let mavenCoords classifier artifactType =\n+           MavenCoords { groupId = pomGroupId, artifactId = pomArtifactId, version = pomVersion, classifier, artifactType }\n+    let shouldReleasePlatInd = shouldRelease allArtifacts (PlatformDependent False)\n+\n+    pure $ [ (mavenCoords jarClassifier $ mainExt artReleaseType, directory </> mainArtifactFile) | shouldReleasePlatInd] <>"
  },
  {
    "id" : "52f51600-f6f1-42db-97a2-e35052c02aa6",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "69512875-eb97-4f00-900b-6af41146955c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n      -- ^ A scala library jar, with source and scaladoc jars. Use when\r\n```",
        "createdAt" : "2019-06-17T09:53:05Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3b8f4596-c98b-48c4-adb7-8003dbd4bc78",
        "parentId" : "69512875-eb97-4f00-900b-6af41146955c",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Fixed in 7a8baf12b",
        "createdAt" : "2019-06-17T10:40:26Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -66,14 +69,14 @@ data JarType\n     = Plain\n       -- ^ Plain java or scala library, without source jar.\n     | Lib\n-      -- ^ A java library jar, with a source jar.\n+      -- ^ A java library jar, with source and javadoc jars.\n     | Deploy\n       -- ^ Deploy jar, e.g. a fat jar containing transitive deps.\n     | Proto\n       -- ^ A java protobuf library (*-speed.jar).\n     | Scala\n-      -- ^ A scala library jar, with a source jar. Use when source jar\n-      -- is desired, otherwise use 'Plain'.\n+      -- ^ A scala library jar, with source and scaladoc jarsr. Use when"
  }
]