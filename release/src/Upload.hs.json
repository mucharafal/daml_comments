[
  {
    "id" : "47c0ebad-8e11-42db-8bd0-40468e0154e8",
    "prId" : 1756,
    "comments" : [
      {
        "id" : "9613fef3-87a9-426e-b3ab-5ea524c37a3e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You might just want to switch to `aeson` for doing the JSON encoding to avoid that kind of error prone string munging.",
        "createdAt" : "2019-06-19T09:24:39Z",
        "updatedAt" : "2019-06-19T09:57:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0ca4ec80-114c-4676-9ec8-d5130f01f3de",
        "parentId" : "9613fef3-87a9-426e-b3ab-5ea524c37a3e",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "I will, if this release round doesn't work!",
        "createdAt" : "2019-06-19T09:26:05Z",
        "updatedAt" : "2019-06-19T09:57:47Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "85e002d9ae7dfdf09f2437712af2a7863ce5aeaf",
    "line" : 5,
    "diffHunk" : "@@ -235,7 +235,7 @@ publishStagingRepo baseRequest manager comDamlRepoId comDigitalassetRepoId = do\n          $ setRequestPath  \"/service/local/staging/bulk/promote\"\n          $ setRequestHeader \"content-type\" [ \"application/json\" ]\n          $ setRequestHeader \"accept\" [ \"application/json\" ]\n-         $ setRequestBodyLBS (textToLazyByteString $ \"{\\\"data\\\":{\\\"stagedRepositoryIds\\\":[\\\"\" <> comDamlRepoId <> \"\\\",\\\"\" <> comDigitalassetRepoId <> \"]\\\",\\\"description\\\":\\\"\\\",\\\"autoDropAfterRelease\\\":true}}\") baseRequest\n+         $ setRequestBodyLBS (textToLazyByteString $ \"{\\\"data\\\":{\\\"stagedRepositoryIds\\\":[\\\"\" <> comDamlRepoId <> \"\\\",\\\"\" <> comDigitalassetRepoId <> \"\\\"],\\\"description\\\":\\\"\\\",\\\"autoDropAfterRelease\\\":true}}\") baseRequest"
  },
  {
    "id" : "67a093b1-43ff-4929-b0d3-c7c329182a94",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "eed354ce-7c08-4484-84c7-3a52ab834d3b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Most of these language extensions are not used in this module. Can you please remove all unused ones, particularly `TemplateHaskell` and `UndecidableInstances`.",
        "createdAt" : "2019-05-17T06:32:52Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE FlexibleInstances #-}\n+{-# LANGUAGE GADTs #-}\n+{-# LANGUAGE MultiWayIf #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE StrictData #-}\n+{-# LANGUAGE TemplateHaskell #-}\n+{-# LANGUAGE UndecidableInstances #-}"
  },
  {
    "id" : "706a75c4-da04-4323-a3b1-49fac3e40d30",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "6694e385-1ff7-4962-ba23-c7d3af7badd2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like that URL is probably left over from testing?",
        "createdAt" : "2019-05-17T06:38:24Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ef8e34bf-5375-42cb-95e1-63602dfe4105",
        "parentId" : "6694e385-1ff7-4962-ba23-c7d3af7badd2",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Correct. I haven't added the configuration handling as yet.",
        "createdAt" : "2019-05-17T07:33:36Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE FlexibleInstances #-}\n+{-# LANGUAGE GADTs #-}\n+{-# LANGUAGE MultiWayIf #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE StrictData #-}\n+{-# LANGUAGE TemplateHaskell #-}\n+{-# LANGUAGE UndecidableInstances #-}\n+\n+module Upload (\n+    uploadToMavenCentral\n+) where\n+\n+import qualified Control.Exception.Safe as E\n+import           Control.Monad.Logger\n+import           Control.Monad.IO.Class\n+import           Data.Foldable (for_)\n+import           Data.List (foldl)\n+import           Network.HTTP.Client (newManager, httpNoBody)\n+import           Network.HTTP.Client.TLS (tlsManagerSettings)\n+import           Network.HTTP.Simple (getResponseStatusCode, parseRequest, setRequestBasicAuth, setRequestBodyFile, setRequestHeader, setRequestMethod, setRequestPath)\n+import           Data.Text (Text, pack)\n+import           Data.Text.Encoding (encodeUtf8)\n+import           Path\n+import           Path.IO\n+\n+import Types\n+import Util (BazelLocations(..))\n+\n+uploadToMavenCentral ::(MonadLogger m, MonadIO m, E.MonadThrow m) => PerformUpload -> BazelLocations -> [(MavenCoords, Path Rel File)] -> m ()\n+uploadToMavenCentral upload BazelLocations{..} artifacts = do\n+\n+    manager <- liftIO $ newManager tlsManagerSettings\n+\n+    initialRequest' <- parseRequest \"http://localhost:8081\""
  },
  {
    "id" : "9bc7e4f3-a4f7-48e1-a360-35f7b1af82d4",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "32b54ec0-88c2-47b7-898d-845f626d619d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like you are uploading the files directly from the Bazel output directory instead of uploading them from the release directory like we did for Bintray. Any reason for that? Iâ€™d prefer the latter as it puts the files in the right locations and you will get an error even in dry run if the file to be uploaded does not exist.",
        "createdAt" : "2019-05-17T06:40:15Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "52ad06c4-fe5b-4667-87d8-d0bee4ae4fee",
        "parentId" : "32b54ec0-88c2-47b7-898d-845f626d619d",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "It's more or less just a designed decision as I wanted the Maven Coordinates available for uploading, then not having the files in the right locations isn't a problem.\r\n\r\nI could either\r\na) read from release directory (assuming that everything needed will always be there) o\r\nor\r\nb) check the file existence (and possible for read permissions) when in dry run mode.\r\n\r\nWDYT?",
        "createdAt" : "2019-05-17T07:39:04Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2b5760f9-9c9a-425f-8eaa-f42d723fe591",
        "parentId" : "32b54ec0-88c2-47b7-898d-845f626d619d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would go with a) given that this was who we handled things for the bintray upload.",
        "createdAt" : "2019-05-17T09:40:02Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6093a4f3-7150-4f58-9bca-8f2258e829d2",
        "parentId" : "32b54ec0-88c2-47b7-898d-845f626d619d",
        "author" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "body" : "Implemented.",
        "createdAt" : "2019-06-12T12:33:38Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "nicholassmith-da",
          "name" : "Nick Smith",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/47316213?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE FlexibleInstances #-}\n+{-# LANGUAGE GADTs #-}\n+{-# LANGUAGE MultiWayIf #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE StrictData #-}\n+{-# LANGUAGE TemplateHaskell #-}\n+{-# LANGUAGE UndecidableInstances #-}\n+\n+module Upload (\n+    uploadToMavenCentral\n+) where\n+\n+import qualified Control.Exception.Safe as E\n+import           Control.Monad.Logger\n+import           Control.Monad.IO.Class\n+import           Data.Foldable (for_)\n+import           Data.List (foldl)\n+import           Network.HTTP.Client (newManager, httpNoBody)\n+import           Network.HTTP.Client.TLS (tlsManagerSettings)\n+import           Network.HTTP.Simple (getResponseStatusCode, parseRequest, setRequestBasicAuth, setRequestBodyFile, setRequestHeader, setRequestMethod, setRequestPath)\n+import           Data.Text (Text, pack)\n+import           Data.Text.Encoding (encodeUtf8)\n+import           Path\n+import           Path.IO\n+\n+import Types\n+import Util (BazelLocations(..))\n+\n+uploadToMavenCentral ::(MonadLogger m, MonadIO m, E.MonadThrow m) => PerformUpload -> BazelLocations -> [(MavenCoords, Path Rel File)] -> m ()\n+uploadToMavenCentral upload BazelLocations{..} artifacts = do\n+\n+    manager <- liftIO $ newManager tlsManagerSettings\n+\n+    initialRequest' <- parseRequest \"http://localhost:8081\"\n+\n+    for_ artifacts $ \\(coords@MavenCoords{..}, file) -> do\n+        binExists <- doesFileExist (bazelBin </> file)"
  },
  {
    "id" : "ab8564ac-a757-4980-a55d-7c40eccc0417",
    "prId" : 1205,
    "comments" : [
      {
        "id" : "a252e07d-58f4-4fb1-be95-4a66929d8345",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n     (intercalate \"/\" (\"/artifactory/libs-release-local\" : groupId <> [artifactId, version, artifactId]) <> \"-\" <> version <> (maybe \"\" (\"-\" <>) classifier) <> \".\" <> artifactType\r\n```",
        "createdAt" : "2019-05-17T06:43:28Z",
        "updatedAt" : "2019-06-17T13:09:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4e921d1c4fbbaa2ed6afdae1675b3daaa6fa5ef3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,71 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE FlexibleInstances #-}\n+{-# LANGUAGE GADTs #-}\n+{-# LANGUAGE MultiWayIf #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE StrictData #-}\n+{-# LANGUAGE TemplateHaskell #-}\n+{-# LANGUAGE UndecidableInstances #-}\n+\n+module Upload (\n+    uploadToMavenCentral\n+) where\n+\n+import qualified Control.Exception.Safe as E\n+import           Control.Monad.Logger\n+import           Control.Monad.IO.Class\n+import           Data.Foldable (for_)\n+import           Data.List (foldl)\n+import           Network.HTTP.Client (newManager, httpNoBody)\n+import           Network.HTTP.Client.TLS (tlsManagerSettings)\n+import           Network.HTTP.Simple (getResponseStatusCode, parseRequest, setRequestBasicAuth, setRequestBodyFile, setRequestHeader, setRequestMethod, setRequestPath)\n+import           Data.Text (Text, pack)\n+import           Data.Text.Encoding (encodeUtf8)\n+import           Path\n+import           Path.IO\n+\n+import Types\n+import Util (BazelLocations(..))\n+\n+uploadToMavenCentral ::(MonadLogger m, MonadIO m, E.MonadThrow m) => PerformUpload -> BazelLocations -> [(MavenCoords, Path Rel File)] -> m ()\n+uploadToMavenCentral upload BazelLocations{..} artifacts = do\n+\n+    manager <- liftIO $ newManager tlsManagerSettings\n+\n+    initialRequest' <- parseRequest \"http://localhost:8081\"\n+\n+    for_ artifacts $ \\(coords@MavenCoords{..}, file) -> do\n+        binExists <- doesFileExist (bazelBin </> file)\n+        let absFile | binExists = bazelBin </> file\n+                    | otherwise = bazelGenfiles </> file\n+\n+        let artUploadPath = uploadPath coords\n+        let request\n+             = setRequestMethod \"PUT\"\n+             $ setRequestHeader \"Content-Type\" [ encodeUtf8 (getContentType artifactType) ]\n+             $ setRequestPath (encodeUtf8 artUploadPath)\n+             $ setRequestBasicAuth (encodeUtf8 \"user\") (encodeUtf8 \"LandRover\")\n+             $ setRequestBodyFile (fromAbsFile absFile) initialRequest'\n+\n+        if getPerformUpload upload\n+            then do\n+                $logInfo (\"(Uploading \" <> artUploadPath <> \" from \" <> (pack $ show absFile) <> \")\")\n+                response <- liftIO $ httpNoBody request manager\n+\n+                $logInfo (\"Upload status: \" <> (pack $ show $ getResponseStatusCode response))\n+        else\n+            $logInfo (\"(In dry run, skipping \" <> artUploadPath <> \")\")\n+\n+uploadPath :: MavenCoords -> Text\n+uploadPath MavenCoords{..} = do\n+    -- Use repository root as starting value for the accumulator.\n+     (foldl (\\acc x -> acc <> \"/\" <> x) \"/artifactory/libs-release-local\" groupId) <> \"/\" <> artifactId <> \"/\" <> version <> \"/\" <> artifactId<> \"-\" <> version <> (maybe \"\" (\"-\" <>) classifier) <> \".\" <> artifactType"
  }
]