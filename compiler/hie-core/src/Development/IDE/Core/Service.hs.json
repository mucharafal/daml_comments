[
  {
    "id" : "4898e12d-1628-452b-96b5-f405b25b34a2",
    "prId" : 2257,
    "comments" : [
      {
        "id" : "3b6854b0-957a-4208-88f5-9add6acb1406",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    updatePositionMapping,\r\n```\r\nThat will avoid noise in future diffs.",
        "createdAt" : "2019-07-23T10:01:26Z",
        "updatedAt" : "2019-07-23T12:16:41Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0a507defa99383adda7779ab3da3c31a1db28779",
    "line" : null,
    "diffHunk" : "@@ -15,7 +15,8 @@ module Development.IDE.Core.Service(\n     runActionSync,\n     writeProfile,\n     getDiagnostics, unsafeClearDiagnostics,\n-    ideLogger\n+    ideLogger,\n+    updatePositionMapping"
  },
  {
    "id" : "a99cad3a-bc7f-4daf-8e65-ec5d87a99767",
    "prId" : 1938,
    "comments" : [
      {
        "id" : "e9b79d55-2202-403c-9d32-1da8e591da83",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This comment seems slightly off, if `shakeRun` throws an exception `runAction` will terminate with an exception. Presumably you mean that the action passed to `shakeRun` throws an exception?",
        "createdAt" : "2019-06-28T12:20:26Z",
        "updatedAt" : "2019-06-28T12:24:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a2ec3efc-8c66-445c-a310-81aaac659240",
        "parentId" : "e9b79d55-2202-403c-9d32-1da8e591da83",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Hard to argue with more comments here. shakeRun also gets actions that are default actions, like ofInterest, and if they throw exceptions it could take out `action`.",
        "createdAt" : "2019-06-28T12:25:06Z",
        "updatedAt" : "2019-06-28T12:25:06Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "04f76bb455dda631de8cedb09b2c3ae2ff0070ee",
    "line" : null,
    "diffHunk" : "@@ -68,32 +70,24 @@ setProfiling opts shakeOpts =\n shutdown :: IdeState -> IO ()\n shutdown = shakeShut\n \n--- | Run a single action using the supplied service. See `runActions`\n--- for more details.\n-runAction :: IdeState -> Action a -> IO a\n-runAction service action = head <$> runActions service [action]\n-\n--- | Run a list of actions in parallel using the supplied service.\n--- This will return as soon as the results of the actions are\n+-- This will return as soon as the result of the action is\n -- available.  There might still be other rules running at this point,\n -- e.g., the ofInterestRule.\n-runActions :: IdeState -> [Action a] -> IO [a]\n-runActions x acts = do\n-    var <- newBarrier\n-    _ <- shakeRun x acts (signalBarrier var)\n-    waitBarrier var\n-\n--- | This is a synchronous variant of `runAction`. See\n--- `runActionsSync` of more details.\n-runActionSync :: IdeState -> Action a -> IO a\n-runActionSync s a = head <$> runActionsSync s [a]\n+runAction :: IdeState -> Action a -> IO a\n+runAction ide action = do\n+    bar <- newBarrier\n+    res <- shakeRun ide [do v <- action; liftIO $ signalBarrier bar v; return v]\n+    -- shakeRun might throw an exception, in which case res will finish first"
  }
]