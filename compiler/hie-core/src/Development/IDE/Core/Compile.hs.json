[
  {
    "id" : "26a7c191-46d3-418c-ba13-501c8e41da24",
    "prId" : 2291,
    "comments" : [
      {
        "id" : "ff182240-22b0-466f-a56d-3ce39fac92c6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This looks like a regression: You are now always producing hie files even if we do not use them.",
        "createdAt" : "2019-07-25T17:44:55Z",
        "updatedAt" : "2019-07-26T11:33:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ad8e94da-a1d8-4fb7-8475-b00eef8f8ad5",
        "parentId" : "ff182240-22b0-466f-a56d-3ce39fac92c6",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "if producing the hie files is very costy, we can instead put the necessary arguments to produce them later into the TcModuleResult.",
        "createdAt" : "2019-07-26T09:51:11Z",
        "updatedAt" : "2019-07-26T11:33:56Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1eb2f17c-a7c9-42cc-8709-1d7dcf3d2fd6",
        "parentId" : "ff182240-22b0-466f-a56d-3ce39fac92c6",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Sounds good! You might need to be a bit careful that putting additional stuff in `TcModuleResult` does not make things more expensive since we force it to NF.",
        "createdAt" : "2019-07-26T09:53:15Z",
        "updatedAt" : "2019-07-26T11:33:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e5a9ba4b5b29946bade90058e5d3ed453b249320",
    "line" : null,
    "diffHunk" : "@@ -138,25 +136,18 @@ addRelativeImport modu dflags = dflags\n \n mkTcModuleResult\n     :: GhcMonad m\n-    => InterfaceDirectory\n-    -> TypecheckedModule\n+    => TypecheckedModule\n     -> m TcModuleResult\n-mkTcModuleResult (InterfaceDirectory mbIfaceDir) tcm = do\n-    session   <- getSession\n-    (iface,_) <- liftIO $ mkIfaceTc session Nothing Sf_None details tcGblEnv\n-    liftIO $ whenJust mbIfaceDir $ \\ifaceDir -> do\n-        let path = ifaceDir </> file tcm\n-        createDirectoryIfMissing True (takeDirectory path)\n-        writeIfaceFile (hsc_dflags session) (replaceExtension path \".hi\") iface\n-        -- For now, we write .hie files whenever we write .hi files which roughly corresponds to\n-        -- when we are building a package. It should be easily decoupable if that turns out to be\n-        -- useful.\n-        hieFile <- runHsc session $ mkHieFile (tcModSummary tcm) tcGblEnv (fromJust $ renamedSource tcm)\n-        writeHieFile (replaceExtension path \".hie\") hieFile\n+mkTcModuleResult tcm = do\n+    session <- getSession\n+    (iface, _) <- liftIO $ mkIfaceTc session Nothing Sf_None details tcGblEnv\n+    hieFile <-"
  },
  {
    "id" : "a993cd2c-a0bd-4105-b01a-38af57012826",
    "prId" : 1992,
    "comments" : [
      {
        "id" : "4389db94-757d-4a33-b2e8-750892db1882",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  (modName, imports) <- liftEither $ getImportsParsed dflags parsed\r\n```",
        "createdAt" : "2019-07-03T14:50:36Z",
        "updatedAt" : "2019-07-03T15:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f7626491-2773-417c-b54c-b0077a332142",
        "parentId" : "4389db94-757d-4a33-b2e8-750892db1882",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Thanks, done as a commit (since it requires an extra import)",
        "createdAt" : "2019-07-03T15:06:29Z",
        "updatedAt" : "2019-07-03T15:06:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4f45c4393302586fdff5e0c6768fb699051f0e65",
    "line" : null,
    "diffHunk" : "@@ -267,7 +266,7 @@ getModSummaryFromBuffer\n     -> GHC.ParsedSource\n     -> ExceptT [FileDiagnostic] m ModSummary\n getModSummaryFromBuffer fp contents dflags parsed = do\n-  (modName, imports) <- FindImports.getImportsParsed dflags parsed\n+  (modName, imports) <- ExceptT $ return $ getImportsParsed dflags parsed"
  },
  {
    "id" : "a8c3fce6-f389-4b37-8887-eda64a70383a",
    "prId" : 1959,
    "comments" : [
      {
        "id" : "bb760780-26e7-4124-a130-988fef371383",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we make this a `Maybe FilePath` instead of having a `Bool` and a `FilePath`?",
        "createdAt" : "2019-07-01T14:07:03Z",
        "updatedAt" : "2019-07-01T14:28:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aa77adb2-3b6b-400b-88f5-4b93ea752740",
        "parentId" : "bb760780-26e7-4124-a130-988fef371383",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Changed",
        "createdAt" : "2019-07-01T14:20:35Z",
        "updatedAt" : "2019-07-01T14:28:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0f0640e251881e6bf870ad6471639ffb2fba2308",
    "line" : null,
    "diffHunk" : "@@ -202,13 +202,14 @@ newtype WriteInterface = WriteInterface Bool\n mkTcModuleResult\n     :: GhcMonad m\n     => WriteInterface"
  },
  {
    "id" : "0fe30f20-d517-42cc-910c-58896f2cf99a",
    "prId" : 1903,
    "comments" : [
      {
        "id" : "6e59deef-2b53-4c30-96a5-850498e65e15",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Converting a UTF-8 encoded `StringBuffer` to `[Char]` only to then convert it back to a UTF-8 encoded file seems needlessly wasteful. On the other hand, there also doesnâ€™t seem to be a nice API for writing a `StringBuffer` to a file so you have to mess around with pointers and this is probably not a bottleneck either way.",
        "createdAt" : "2019-06-27T07:08:54Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ff5cc5be-d19b-4e71-a7b1-29b01f0c2f68",
        "parentId" : "6e59deef-2b53-4c30-96a5-850498e65e15",
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "I'll add a helper function to abstract it out, then at least the silly is only in one place",
        "createdAt" : "2019-06-27T07:50:05Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "83429e18-554a-4aa3-b094-1fe265308030",
        "parentId" : "6e59deef-2b53-4c30-96a5-850498e65e15",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "hPutStringBuffer was added in 8.8, so I've written a compat version for 8.6 and am using that.",
        "createdAt" : "2019-06-27T21:37:50Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "961a774b69885b8de3edbed8762fcdc4f19ce99f",
    "line" : null,
    "diffHunk" : "@@ -310,29 +311,61 @@ getModSummaryFromBuffer fp contents dflags parsed = do\n     , ms_parsed_mod   = Nothing\n     }\n \n+-- | Run CPP on a file\n+runCpp :: DynFlags -> FilePath -> Maybe SB.StringBuffer -> IO SB.StringBuffer\n+runCpp dflags filename contents = withTempDir $ \\dir -> do\n+    let out = dir </> takeFileName filename <.> \"out\"\n+    case contents of\n+        Nothing -> do\n+            -- Happy case, file is not modified, so run CPP on it in-place\n+            -- which also makes things like relative #include files work\n+            -- and means location information is correct\n+            doCpp dflags True filename out\n+            liftIO $ SB.hGetStringBuffer out\n+\n+        Just contents -> do\n+            -- Sad path, we have to create a version of the path in a temp dir\n+            -- __FILE__ macro is wrong, ignoring that for now (likely not a real issue)\n+\n+            -- Relative includes aren't going to work, so we fix that by adding to the include path.\n+            let addSelf (IncludeSpecs quote global) = IncludeSpecs (takeDirectory filename : quote) global\n+            dflags <- return dflags{includePaths = addSelf $ includePaths dflags}\n+\n+            -- Location information is wrong, so we fix that by patching it afterwards.\n+            let inp = dir </> \"___HIE_CORE_MAGIC___\"\n+            let f x = if SB.atEnd x then Nothing else Just $ SB.nextChar x\n+            liftIO $ writeFileUTF8 inp (unfoldr f contents)"
  },
  {
    "id" : "f21a350e-eaef-4550-8676-581c682bf0e8",
    "prId" : 1903,
    "comments" : [
      {
        "id" : "151bf3f4-ef71-4e00-840e-02881ef5909d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ugh, I feel like there must be a better way to handle this. This seems like a problem that every LSP server for languages that support CPP has to deal with.",
        "createdAt" : "2019-06-27T07:11:03Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "540e8b2e-be55-4872-90f6-0faa933bae3a",
        "parentId" : "151bf3f4-ef71-4e00-840e-02881ef5909d",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Agreed - but inclined to leave it as is for now. It works. If there's a better way, that's step 2.",
        "createdAt" : "2019-06-27T21:38:24Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "740eb524-8991-4255-a950-daa9f1c3db06",
        "parentId" : "151bf3f4-ef71-4e00-840e-02881ef5909d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Absolutely, I wasnâ€™t trying to suggest that this needs fixing before merging. Just something that we might want to cleanup at some point.",
        "createdAt" : "2019-06-28T07:11:04Z",
        "updatedAt" : "2019-06-28T07:11:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "961a774b69885b8de3edbed8762fcdc4f19ce99f",
    "line" : 51,
    "diffHunk" : "@@ -310,29 +311,61 @@ getModSummaryFromBuffer fp contents dflags parsed = do\n     , ms_parsed_mod   = Nothing\n     }\n \n+-- | Run CPP on a file\n+runCpp :: DynFlags -> FilePath -> Maybe SB.StringBuffer -> IO SB.StringBuffer\n+runCpp dflags filename contents = withTempDir $ \\dir -> do\n+    let out = dir </> takeFileName filename <.> \"out\"\n+    case contents of\n+        Nothing -> do\n+            -- Happy case, file is not modified, so run CPP on it in-place\n+            -- which also makes things like relative #include files work\n+            -- and means location information is correct\n+            doCpp dflags True filename out\n+            liftIO $ SB.hGetStringBuffer out\n+\n+        Just contents -> do\n+            -- Sad path, we have to create a version of the path in a temp dir\n+            -- __FILE__ macro is wrong, ignoring that for now (likely not a real issue)\n+\n+            -- Relative includes aren't going to work, so we fix that by adding to the include path.\n+            let addSelf (IncludeSpecs quote global) = IncludeSpecs (takeDirectory filename : quote) global\n+            dflags <- return dflags{includePaths = addSelf $ includePaths dflags}\n+\n+            -- Location information is wrong, so we fix that by patching it afterwards.\n+            let inp = dir </> \"___HIE_CORE_MAGIC___\"\n+            let f x = if SB.atEnd x then Nothing else Just $ SB.nextChar x\n+            liftIO $ writeFileUTF8 inp (unfoldr f contents)\n+            doCpp dflags True inp out\n+\n+            -- Fix up the filename in lines like:\n+            -- # 1 \"C:/Temp/extra-dir-914611385186/___HIE_CORE_MAGIC___\"\n+            let tweak x\n+                    | Just x <- stripPrefix \"# \" x\n+                    , \"___HIE_CORE_MAGIC___\" `isInfixOf` x"
  },
  {
    "id" : "dcaf891b-8ead-4680-bdf2-3928f5458828",
    "prId" : 1903,
    "comments" : [
      {
        "id" : "a9348efc-2030-48b8-922a-b3b394af4519",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems like you are basically inlining what we do when converting to `NormalizedFilePath` but in a slightly different way (we normalize to `pathSeparator` instead of `/`). Do we rely on the fact that this normalizes to `/`? If so it would be good to point this out in a comment, if not, I would suggest to use `NormalizedFilePath` instead.",
        "createdAt" : "2019-06-27T07:12:49Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c74f11e9-eae2-43da-8880-f9f0fb36d96f",
        "parentId" : "a9348efc-2030-48b8-922a-b3b394af4519",
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "On Windows \\ plus Cpp escaping plus GHC unescaping all goes very wrong. The use of / is essential. I'll add a comment",
        "createdAt" : "2019-06-27T07:51:12Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "961a774b69885b8de3edbed8762fcdc4f19ce99f",
    "line" : 55,
    "diffHunk" : "@@ -310,29 +311,61 @@ getModSummaryFromBuffer fp contents dflags parsed = do\n     , ms_parsed_mod   = Nothing\n     }\n \n+-- | Run CPP on a file\n+runCpp :: DynFlags -> FilePath -> Maybe SB.StringBuffer -> IO SB.StringBuffer\n+runCpp dflags filename contents = withTempDir $ \\dir -> do\n+    let out = dir </> takeFileName filename <.> \"out\"\n+    case contents of\n+        Nothing -> do\n+            -- Happy case, file is not modified, so run CPP on it in-place\n+            -- which also makes things like relative #include files work\n+            -- and means location information is correct\n+            doCpp dflags True filename out\n+            liftIO $ SB.hGetStringBuffer out\n+\n+        Just contents -> do\n+            -- Sad path, we have to create a version of the path in a temp dir\n+            -- __FILE__ macro is wrong, ignoring that for now (likely not a real issue)\n+\n+            -- Relative includes aren't going to work, so we fix that by adding to the include path.\n+            let addSelf (IncludeSpecs quote global) = IncludeSpecs (takeDirectory filename : quote) global\n+            dflags <- return dflags{includePaths = addSelf $ includePaths dflags}\n+\n+            -- Location information is wrong, so we fix that by patching it afterwards.\n+            let inp = dir </> \"___HIE_CORE_MAGIC___\"\n+            let f x = if SB.atEnd x then Nothing else Just $ SB.nextChar x\n+            liftIO $ writeFileUTF8 inp (unfoldr f contents)\n+            doCpp dflags True inp out\n+\n+            -- Fix up the filename in lines like:\n+            -- # 1 \"C:/Temp/extra-dir-914611385186/___HIE_CORE_MAGIC___\"\n+            let tweak x\n+                    | Just x <- stripPrefix \"# \" x\n+                    , \"___HIE_CORE_MAGIC___\" `isInfixOf` x\n+                    , let num = takeWhile (not . isSpace) x\n+                        = \"# \" <> num <> \" \\\"\" <> map (\\x -> if isPathSeparator x then '/' else x) filename <> \"\\\"\""
  }
]