[
  {
    "id" : "63922b09-be4a-413b-a51c-1cd8461e3f78",
    "prId" : 1903,
    "comments" : [
      {
        "id" : "c7abbe7a-d1f7-4aa6-903b-4f112f0d6817",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ugh, I feel like there must be a better way to handle this. This seems like a problem that every LSP server for languages that support CPP has to deal with.",
        "createdAt" : "2019-06-27T07:11:03Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b800ab63-3759-42e5-a7e7-16a4a01d388d",
        "parentId" : "c7abbe7a-d1f7-4aa6-903b-4f112f0d6817",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Agreed - but inclined to leave it as is for now. It works. If there's a better way, that's step 2.",
        "createdAt" : "2019-06-27T21:38:24Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6fff83f1-ec80-472a-964b-592146fbdec9",
        "parentId" : "c7abbe7a-d1f7-4aa6-903b-4f112f0d6817",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Absolutely, I wasnâ€™t trying to suggest that this needs fixing before merging. Just something that we might want to cleanup at some point.",
        "createdAt" : "2019-06-28T07:11:04Z",
        "updatedAt" : "2019-06-28T07:11:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "961a774b69885b8de3edbed8762fcdc4f19ce99f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +342,346 @@            let tweak x\n                    | Just x <- stripPrefix \"# \" x\n                    , \"___HIE_CORE_MAGIC___\" `isInfixOf` x\n                    , let num = takeWhile (not . isSpace) x\n                    -- important to use /, and never \\ for paths, even on Windows, since then C escapes them"
  },
  {
    "id" : "e6dd02f9-bd8b-4802-ab23-25a2028d0e12",
    "prId" : 1903,
    "comments" : [
      {
        "id" : "383b0b57-2cbc-46a0-9c7c-9bfc30cb9f84",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems like you are basically inlining what we do when converting to `NormalizedFilePath` but in a slightly different way (we normalize to `pathSeparator` instead of `/`). Do we rely on the fact that this normalizes to `/`? If so it would be good to point this out in a comment, if not, I would suggest to use `NormalizedFilePath` instead.",
        "createdAt" : "2019-06-27T07:12:49Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "23674aa4-a7d7-4ba3-92c5-225c0f503bdc",
        "parentId" : "383b0b57-2cbc-46a0-9c7c-9bfc30cb9f84",
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "On Windows \\ plus Cpp escaping plus GHC unescaping all goes very wrong. The use of / is essential. I'll add a comment",
        "createdAt" : "2019-06-27T07:51:12Z",
        "updatedAt" : "2019-06-27T21:43:56Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "961a774b69885b8de3edbed8762fcdc4f19ce99f",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +346,350 @@                    -- important to use /, and never \\ for paths, even on Windows, since then C escapes them\n                    -- and GHC gets all confused\n                        = \"# \" <> num <> \" \\\"\" <> map (\\x -> if isPathSeparator x then '/' else x) filename <> \"\\\"\"\n                    | otherwise = x\n            stringToStringBuffer . unlines . map tweak . lines <$> readFileUTF8' out"
  }
]