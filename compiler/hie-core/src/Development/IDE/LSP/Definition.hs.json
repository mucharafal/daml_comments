[
  {
    "id" : "48b4cd4d-7552-4ea8-a676-1828eac1c3c8",
    "prId" : 1862,
    "comments" : [
      {
        "id" : "85ff7009-d2cd-4131-b324-ec8bd68ae648",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe `setGotoDefinition`? This will override an already existing handler.",
        "createdAt" : "2019-06-25T13:10:16Z",
        "updatedAt" : "2019-06-25T13:55:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7bc9e951e1b9870a20cebab7f75884497a5ac28e",
    "line" : null,
    "diffHunk" : "@@ -5,38 +5,41 @@\n \n -- | Go to the definition of a variable.\n module Development.IDE.LSP.Definition\n-    ( handle\n+    ( gotoDefinition\n+    , addGotoDefinition\n     ) where\n \n import           Language.Haskell.LSP.Types\n import Development.IDE.Types.Location\n \n import Development.IDE.Types.Logger\n import Development.IDE.Core.Rules\n+import Development.IDE.Core.Service\n+import Development.IDE.LSP.Server\n+import qualified Language.Haskell.LSP.Core as LSP\n+import Language.Haskell.LSP.Messages\n \n import qualified Data.Text as T\n \n -- | Go to the definition of a variable.\n-handle\n-    :: Logger\n-    -> IdeState\n+gotoDefinition\n+    :: IdeState\n     -> TextDocumentPositionParams\n     -> IO LocationResponseParams\n-handle logger compilerH (TextDocumentPositionParams (TextDocumentIdentifier uri) pos) = do\n-\n-\n+gotoDefinition ide (TextDocumentPositionParams (TextDocumentIdentifier uri) pos) = do\n     mbResult <- case uriToFilePath' uri of\n-        Just (toNormalizedFilePath -> filePath) -> do\n-          logInfo logger $\n-            \"Definition request at position \" <>\n-            T.pack (showPosition pos) <>\n-            \" in file: \" <> T.pack (fromNormalizedFilePath filePath)\n-          runAction compilerH (getDefinition filePath pos)\n-        Nothing       -> pure Nothing\n-\n-    case mbResult of\n-        Nothing ->\n-            pure $ MultiLoc []\n-\n-        Just loc ->\n-            pure $ SingleLoc loc\n+        Just path -> do\n+            logInfo (ideLogger ide) $\n+                \"Definition request at position \" <> T.pack (showPosition pos) <>\n+                \" in file: \" <> T.pack path\n+            runAction ide $ getDefinition (toNormalizedFilePath path) pos\n+        Nothing -> pure Nothing\n+    pure $ case mbResult of\n+        Nothing -> MultiLoc []\n+        Just loc -> SingleLoc loc\n+\n+\n+addGotoDefinition :: RunHandler -> LSP.Handlers -> IO LSP.Handlers"
  }
]