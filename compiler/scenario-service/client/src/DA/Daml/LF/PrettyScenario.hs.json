[
  {
    "id" : "26335d06-898a-4c11-b234-8ca481d29d42",
    "prId" : 7610,
    "comments" : [
      {
        "id" : "8f303444-2be4-484e-8cb2-9487898773cb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Would it make sense to distinguish between creating a contract and looking up a contract in this error message?",
        "createdAt" : "2020-10-09T13:54:53Z",
        "updatedAt" : "2020-10-09T16:18:04Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5d8c3af2-d098-4392-b575-83bfd7684464",
        "parentId" : "8f303444-2be4-484e-8cb2-9487898773cb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I created two exceptions.  ",
        "createdAt" : "2020-10-09T16:19:42Z",
        "updatedAt" : "2020-10-09T16:19:42Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d2952baa01fa2244cf872d357d6943045d56cf93",
    "line" : null,
    "diffHunk" : "@@ -230,15 +230,17 @@ prettyScenarioErrorError (Just err) =  do\n                   scenarioError_ContractNotActiveContractRef\n         ]\n     ScenarioErrorErrorUpdateEmptyContractKeyMaintainers ScenarioError_EmptyContractKeyMaintainers{..} ->\n-      pure $\n-        \"Attempt to create a contract key with an empty set of maintainers in:\"\n-          $$ nest 2\n-          (   \"create\"\n-          <-> prettyMay \"<missing template id>\" (prettyDefName world) scenarioError_EmptyContractKeyMaintainersTemplateId\n-          $$ (   keyword_ \"with\"\n-              $$ nest 2 (prettyMay \"<missing argument>\" (prettyValue' False 0 world) scenarioError_EmptyContractKeyMaintainersArg)\n-             )\n-          )\n+      pure $ vcat\n+        [ \"Attempt to create or operate on a contract key with an empty set of maintainers\""
  },
  {
    "id" : "0fd1ea03-ef0b-4d3a-8816-b573ae3d3186",
    "prId" : 6587,
    "comments" : [
      {
        "id" : "95c334d5-2d8c-41c9-94e7-48838b40e69c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What is the purpose of the `disclosed` class? It seems unused.",
        "createdAt" : "2020-07-02T14:26:18Z",
        "updatedAt" : "2020-07-03T09:40:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bcd66bba-441d-4532-8fa7-85c96cf8f8e7",
        "parentId" : "95c334d5-2d8c-41c9-94e7-48838b40e69c",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Indeed it is. It should not be. Its purpose is to scope the replacement by X to only the disclosed cells, i.e. not replace `-`. It seems like I forgot to do that. I'll add it :-)",
        "createdAt" : "2020-07-02T14:57:40Z",
        "updatedAt" : "2020-07-03T09:40:15Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "391c607a-337a-4b22-a65c-531fe3107294",
        "parentId" : "95c334d5-2d8c-41c9-94e7-48838b40e69c",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Fixed by\r\n```patch\r\n$ git add -p\r\ndiff --git a/compiler/daml-extension/src/webview.css b/compiler/daml-extension/src/webview.css\r\nindex 05d9bd785..8060f088c 100644\r\n--- a/compiler/daml-extension/src/webview.css\r\n+++ b/compiler/daml-extension/src/webview.css\r\n@@ -31,10 +31,10 @@ td.disclosure {\r\n tr.archived td.disclosure {\r\n   text-decoration: none;\r\n }\r\n-.hidden_disclosure td.disclosure span {\r\n+.hidden_disclosure td.disclosed.disclosure span {\r\n   display: none;\r\n }\r\n-.hidden_disclosure td.disclosure:after {\r\n+.hidden_disclosure td.disclosed.disclosure:after {\r\n   content: 'X';\r\n }\r\n th {\r\n(1/1) Stage this hunk [y,n,q,a,d,s,e,?]? y\r\n```\r\n\r\n<img width=\"408\" alt=\"Screenshot 2020-07-02 at 19 33\" src=\"https://user-images.githubusercontent.com/45561385/86391967-ed461500-bc9a-11ea-952e-bee7f5c40cf7.png\">\r\n<img width=\"405\" alt=\"Screenshot 2020-07-02 at 19 33 1\" src=\"https://user-images.githubusercontent.com/45561385/86391981-f3d48c80-bc9a-11ea-8bae-1f94edd053a5.png\">\r\n",
        "createdAt" : "2020-07-02T17:33:54Z",
        "updatedAt" : "2020-07-03T09:40:15Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8ca704a5-5363-4721-973e-532f26fac741",
        "parentId" : "95c334d5-2d8c-41c9-94e7-48838b40e69c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That looks great! One suggestion to simplify the code:\r\n```suggestion\r\n            H.td H.! A.class_ (H.textValue $ T.unwords $ \"disclosure\" : [\"disclosed\" | isJust mbHint]) $ H.div H.! A.class_ \"tooltip\" $ do\r\n```\r\nI'm a bit sad we can't do\r\n```haskell\r\nA.td H.! A.class_ \"disclosure\" H.!? (isJust mbHint, A.class_ \"disclosed\") $ ...\r\n```\r\nbut unfortunately, the `blaze` library does not combine multiple `class` attributes. ðŸ˜ž",
        "createdAt" : "2020-07-03T07:11:14Z",
        "updatedAt" : "2020-07-03T09:40:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "912b69d8-df6d-473a-bf46-bc6efb113ec5",
        "parentId" : "95c334d5-2d8c-41c9-94e7-48838b40e69c",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "To be fair to Blaze, that's really a quirk of the HTML standard: the `class` attribute looks like a string but is really a list. AFAIK it's the only one that behaves like that, other attributes don't have any \"merge\" semantics, so this would require a lot of special-casing.",
        "createdAt" : "2020-07-03T09:25:19Z",
        "updatedAt" : "2020-07-03T09:40:15Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "205149d5079acf316a8f165559d135a9e6cfe17e",
    "line" : null,
    "diffHunk" : "@@ -845,8 +845,8 @@ renderRow world parties NodeInfo{..} =\n                     | party `S.member` niDivulgences = (\"D\", Just \"Divulged\")\n                     | otherwise = (\"-\", Nothing)\n             in\n-            H.td H.! A.class_ \"disclosure\" $ H.div H.! A.class_ \"tooltip\" $ do\n-                H.text label\n+            H.td H.! (A.class_ (H.textValue $ T.pack $ concat $ [\"disclosure\"] <> [\" disclosed\" | isJust mbHint])) $ H.div H.! A.class_ \"tooltip\" $ do"
  },
  {
    "id" : "6d404c96-95b0-4b97-baa2-6b0889509667",
    "prId" : 6475,
    "comments" : [
      {
        "id" : "157d7803-6085-4532-b7ad-ff537447aae3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "How about we display that at the end instead of at the beginning? If I have 50 parties that becomes completely unusable otherwise.",
        "createdAt" : "2020-06-24T11:33:21Z",
        "updatedAt" : "2020-06-24T13:04:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a08db53b-29e2-4b35-84a9-2179e1b6871f",
        "parentId" : "157d7803-6085-4532-b7ad-ff537447aae3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This PR has not really changed the situation here. But since I agree and it's easy enough to fix, I've moved them to the end.",
        "createdAt" : "2020-06-24T13:05:47Z",
        "updatedAt" : "2020-06-24T13:05:47Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca0f2dbf4ecf8ae7cd8009ddd0e37688177f6e22",
    "line" : null,
    "diffHunk" : "@@ -829,10 +833,14 @@ renderRow world parties NodeInfo{..} =\n             , H.th \"status\"\n             , ths\n             ]\n-        observed party = if party `S.member` niObservers then \"X\" else \"-\"\n+        viewStatus party\n+            | party `S.member` niSignatories = \"S\"  -- \"S\" for signatory.\n+            | party `S.member` niStakeholders = \"O\"  -- \"O\" for observer.\n+            | party `S.member` niWitnesses = \"D\"  -- \"D\" for disclosed/divulged.\n+            | otherwise = \"-\"\n         active = if niActive then \"active\" else \"archived\"\n         row = H.tr H.! A.class_ (H.textValue active) $ mconcat\n-            [ foldMap ((H.td H.! A.class_ \"disclosure\") . H.text . observed) parties\n+            [ foldMap ((H.td H.! A.class_ \"disclosure\") . H.text . viewStatus) parties"
  },
  {
    "id" : "911d1331-8c15-457a-85c4-a8fc51d9e760",
    "prId" : 5595,
    "comments" : [
      {
        "id" : "7712d30c-1fe9-4d42-b60d-7ef137e17208",
        "parentId" : null,
        "author" : null,
        "body" : "Throwing run time errors in patterns makes me a bit anxious...",
        "createdAt" : "2020-04-17T09:20:41Z",
        "updatedAt" : "2020-04-17T09:21:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1cc38924-048d-4b54-9e80-c61cb293ef7e",
        "parentId" : "7712d30c-1fe9-4d42-b60d-7ef137e17208",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yeah itâ€™s not great but if this actually fails something is broken so Iâ€™d rather have it blow up than fall back into some other code path.",
        "createdAt" : "2020-04-17T09:29:40Z",
        "updatedAt" : "2020-04-17T09:29:40Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dca389e8a29ab12ec3da24526ed71b5c21f39d1d",
    "line" : 35,
    "diffHunk" : "@@ -46,6 +47,23 @@ type M = ExceptT Error (Reader (MS.Map NodeId Node, LF.World))\n \n type ModuleRef = LF.Qualified ()\n \n+unmangleQualifiedName :: T.Text -> (LF.ModuleName, T.Text)\n+unmangleQualifiedName t = case T.splitOn \":\" t of\n+    [modName, defName] -> (unmangleModuleName modName, unmangle defName)\n+    _ -> error \"Bad definition\"\n+\n+unmangleModuleName :: T.Text -> LF.ModuleName\n+unmangleModuleName t = LF.ModuleName (map unmangle $ T.splitOn \".\" t)\n+\n+unmangle :: T.Text -> T.Text\n+unmangle s = case unmangleIdentifier s of\n+    Left err -> error err\n+    Right (UnmangledIdentifier s) -> s\n+\n+{-# COMPLETE UnmangledQualifiedName #-}\n+pattern UnmangledQualifiedName :: LF.ModuleName -> T.Text -> TL.Text\n+pattern UnmangledQualifiedName mod def <- (unmangleQualifiedName . TL.toStrict -> (mod, def))"
  },
  {
    "id" : "87b0507d-6380-49b0-ada2-e44e99c2eca4",
    "prId" : 2141,
    "comments" : [
      {
        "id" : "00b6a163-0ae0-418f-80c9-04a938846539",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we actually need the `hide_note` class? It looks like we are actually clearing the content so I donâ€™t see why we ever need to hide it.",
        "createdAt" : "2019-07-15T11:42:47Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "26466268-3a3a-461e-82ed-144c3536741e",
        "parentId" : "00b6a163-0ae0-418f-80c9-04a938846539",
        "author" : {
          "login" : "majcherm-da",
          "name" : "MichaÅ‚ Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "body" : "I left it as is, since it's hiding whole `div` which is a container for notes' HTML. If shown, even when empty it could add some margins, etc, so it's better to have this hidden if not used.",
        "createdAt" : "2019-07-15T15:00:17Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "majcherm-da",
          "name" : "MichaÅ‚ Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f91e4fdc-5698-458d-99d2-4900287f1d8c",
        "parentId" : "00b6a163-0ae0-418f-80c9-04a938846539",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2019-07-22T07:05:05Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0daa7be342dc63694da9cd5a53a357e8c4fbb3af",
    "line" : 17,
    "diffHunk" : "@@ -911,9 +913,12 @@ renderScenarioResult world res = TL.toStrict $ Blaze.renderHtml $ do\n             H.script \"\" H.! A.src \"$webviewSrc\"\n         let tableView = renderTableView world res\n         let transView = renderTransactionView world res\n+        let noteView = H.div H.! A.class_ \"note\" H.! A.id \"note\" $ H.toHtml $ T.pack \" \"\n         case tableView of\n-            Nothing -> H.body transView\n-            Just tbl -> H.body H.! A.class_ \"hide_archived hide_transaction\" $ do\n+            Nothing -> H.body H.! A.class_ \"hide_note\" $ do"
  },
  {
    "id" : "e6dabc00-d8b2-4ba7-922e-9d7b7b03d41f",
    "prId" : 1397,
    "comments" : [
      {
        "id" : "8e75c6fe-7101-4e87-8ec5-0302e4d0df99",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        prettyMay \"\" (\\x -> prettyDefName world x <> \":\") mbEnumId <> ltext constructor\r\n```",
        "createdAt" : "2019-05-27T21:50:52Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0148d158-38a1-4ee3-8f94-d5858cbf8556",
        "parentId" : "8e75c6fe-7101-4e87-8ec5-0302e4d0df99",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2019-05-28T07:00:24Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ce95b727edd6150f719d1c4c22df4bde71e6ef6",
    "line" : null,
    "diffHunk" : "@@ -682,6 +682,8 @@ prettyValue' showRecordType prec world (Value (Just vsum)) = case vsum of\n   ValueSumVariant (Variant mbVariantId ctor mbValue) ->\n         prettyMay \"\" (\\v -> prettyDefName world v <> \":\") mbVariantId <> ltext ctor\n     <-> prettyMay \"<missing value>\" (prettyValue' True precHighest world) mbValue\n+  ValueSumEnum (Enum mbEnumId constructor) ->\n+        prettyMay \"\"(\\x -> prettyDefName world x <> \":\") mbEnumId <> ltext constructor"
  },
  {
    "id" : "6313275d-33a2-4b90-8c65-a09201a22428",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "c2cc43ef-5f97-4559-94f8-a8f61b6e2961",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Is this line redundant?",
        "createdAt" : "2019-05-21T13:21:24Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "abd1fc1c-a599-4673-98f4-2c968f302e5b",
        "parentId" : "c2cc43ef-5f97-4559-94f8-a8f61b6e2961",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yes. Trying to debug the rendering part still. ",
        "createdAt" : "2019-05-21T13:54:37Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -810,15 +808,36 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: LF.World -> Identifier -> Maybe (LF.Qualified LF.TypeConName)\n+templateConName world (Identifier mbPkgId (TL.toStrict -> qualName)) = do\n+  (modName, defName, mod0) <- lookupModuleFromQualifiedName world mbPkgId qualName\n+  tpl <- NM.lookup (Tagged [defName]) (LF.moduleTemplates mod0)\n+  let pkgRef = case mbPkgId of\n+                Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) -> LF.PRImport $ Tagged $ TL.toStrict pkgId\n+                _ -> LF.PRSelf\n+  return (LF.Qualified pkgRef modName (LF.tplTypeCon tpl))\n+\n+\n+renderHeader :: LF.World -> Identifier -> [T.Text]\n+renderHeader world identifier = case templateConName world identifier of \n+  Just typeConName -> \n+    case (LF.lookupDataType typeConName world) of\n+      Right (LF.DefDataType {..} ) -> map unTagged (map fst dataParams)\n+      Left  _ -> []\n+  Nothing -> []\n+\n+\n renderRow :: LF.World -> S.Set T.Text -> NodeInfo -> (H.Html, H.Html)\n renderRow world parties NodeInfo{..} =\n-    let (ths, tds) = renderValue world [] niValue\n+    let (_, tds) = renderValue world [] niValue\n+        ths = renderHeader world niTemplateId\n         header = H.tr $ mconcat\n             [ foldMap (H.th . (H.div H.! A.class_ \"observer\") . H.text) parties\n             , H.th \"id\"\n             , H.th \"status\"\n-            , ths\n+            , foldMap (H.th . H.text) ths\n             ]\n+        _test = renderHeader world niTemplateId"
  },
  {
    "id" : "63f61fd4-50a2-4a3f-9a74-679abc8ecdab",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "10d06434-3098-4bef-b017-8f07a3047e73",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Is there no helper function in the LF world that does this lookup for us? If not, should there be?",
        "createdAt" : "2019-05-21T13:27:58Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -810,15 +808,36 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: LF.World -> Identifier -> Maybe (LF.Qualified LF.TypeConName)"
  },
  {
    "id" : "7026a5c6-bf7e-47b7-baee-be0a4a6f6b57",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "7a527e01-7a34-463a-a1e6-562161b775cd",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "This would be nicer with a pattern guard.",
        "createdAt" : "2019-05-21T13:28:47Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -810,15 +808,36 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: LF.World -> Identifier -> Maybe (LF.Qualified LF.TypeConName)\n+templateConName world (Identifier mbPkgId (TL.toStrict -> qualName)) = do\n+  (modName, defName, mod0) <- lookupModuleFromQualifiedName world mbPkgId qualName\n+  tpl <- NM.lookup (Tagged [defName]) (LF.moduleTemplates mod0)\n+  let pkgRef = case mbPkgId of\n+                Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) -> LF.PRImport $ Tagged $ TL.toStrict pkgId\n+                _ -> LF.PRSelf\n+  return (LF.Qualified pkgRef modName (LF.tplTypeCon tpl))\n+\n+\n+renderHeader :: LF.World -> Identifier -> [T.Text]\n+renderHeader world identifier = case templateConName world identifier of \n+  Just typeConName -> \n+    case (LF.lookupDataType typeConName world) of"
  },
  {
    "id" : "dd1ba7de-0084-444f-9d42-f403704ed708",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "284becc1-822c-478b-b60f-8da4b2763c64",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Using `Tagged` is an anti pattern. Is there a `mkModuleName` or similar that wraps that?",
        "createdAt" : "2019-05-21T13:32:06Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -810,15 +808,36 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: LF.World -> Identifier -> Maybe (LF.Qualified LF.TypeConName)\n+templateConName world (Identifier mbPkgId (TL.toStrict -> qualName)) = do\n+  (modName, defName, mod0) <- lookupModuleFromQualifiedName world mbPkgId qualName\n+  tpl <- NM.lookup (Tagged [defName]) (LF.moduleTemplates mod0)"
  },
  {
    "id" : "ee410d49-eade-4daf-86e7-a2d221adc7b3",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "45797690-b3e7-41d1-805d-d42f407d4dbb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Instead of `PRSelf` we should use the package name in the first argument of `Identifier` above (the `_`).",
        "createdAt" : "2019-05-23T13:38:47Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,39 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> Maybe (LF.Qualified LF.TypeConName)\n+templateConName (Identifier _ (TL.toStrict -> qualName)) = do\n+  (modName, tpl) <- case T.splitOn \":\" qualName of \n+    [mdN, defN] -> Just (LF.ModuleName (T.splitOn \".\" mdN), LF.TypeConName [defN])\n+    _ -> error \"Bad definition\"\n+  return (LF.Qualified LF.PRSelf  modName tpl)"
  },
  {
    "id" : "fbc0a782-4c89-4e02-aac3-3f4c97062aac",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "4c925439-53b3-4109-8197-0281a5daa3c5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We must split `defN` at all `\".\"`s as well, like `mdN`.",
        "createdAt" : "2019-05-23T13:39:41Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,39 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> Maybe (LF.Qualified LF.TypeConName)\n+templateConName (Identifier _ (TL.toStrict -> qualName)) = do\n+  (modName, tpl) <- case T.splitOn \":\" qualName of \n+    [mdN, defN] -> Just (LF.ModuleName (T.splitOn \".\" mdN), LF.TypeConName [defN])"
  },
  {
    "id" : "75ddc94a-5487-485d-88d9-78877d257004",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "f0eaff2a-9b06-49cc-bba3-231ce0cb20e6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This never returns `Nothing`. Can we please drop the `Maybe`? It would be an internal error if `Identifier` does not have the format we're expecting.",
        "createdAt" : "2019-05-23T13:43:11Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,39 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> Maybe (LF.Qualified LF.TypeConName)"
  },
  {
    "id" : "b0282015-12a7-4ea1-8754-ccad1e0f9019",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "4d33db23-3e59-41d4-ab04-e0a3a80bd657",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n          _ -> error \"malformed identifier\"\r\n```",
        "createdAt" : "2019-05-24T13:03:40Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,38 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> LF.Qualified LF.TypeConName\n+templateConName (Identifier mbPkgId (TL.toStrict -> qualName)) = LF.Qualified pkgRef  mdN tpl\n+  where (mdN, tpl) = case T.splitOn \":\" qualName of\n+          [modName, defN] -> (LF.ModuleName (T.splitOn \".\" modName) , LF.TypeConName (T.splitOn \".\" defN) )\n+          _ -> (LF.ModuleName [] , LF.TypeConName [])"
  },
  {
    "id" : "09704798-1fb4-4e9e-b6f9-7ae885bbc226",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "1ce32d13-317a-4468-a7dc-360315738e86",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n                  Just (PackageIdentifier Nothing) -> error \"malformed identifier\"\r\n                  Nothing -> LF.PRSelf\r\n```",
        "createdAt" : "2019-05-24T13:04:57Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,38 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> LF.Qualified LF.TypeConName\n+templateConName (Identifier mbPkgId (TL.toStrict -> qualName)) = LF.Qualified pkgRef  mdN tpl\n+  where (mdN, tpl) = case T.splitOn \":\" qualName of\n+          [modName, defN] -> (LF.ModuleName (T.splitOn \".\" modName) , LF.TypeConName (T.splitOn \".\" defN) )\n+          _ -> (LF.ModuleName [] , LF.TypeConName [])\n+        pkgRef = case mbPkgId of\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) ->\n+                    LF.PRImport $ LF.PackageId $ TL.toStrict pkgId\n+                  _ -> LF.PRSelf"
  },
  {
    "id" : "ad7a965c-aa15-4d1d-9877-3c67ce4c6817",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "b56189fc-063a-4eb5-88d4-f11e675fcafc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n                  Nothing -> error \"malformed identifier\"\r\n```\r\nI didn't know the `PackageIdentifierSumSelf` case also existed.",
        "createdAt" : "2019-05-24T15:45:51Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ee09ee26-ee13-42aa-b8eb-f57d561aad54",
        "parentId" : "b56189fc-063a-4eb5-88d4-f11e675fcafc",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "How has this been resolved?",
        "createdAt" : "2019-05-28T11:50:12Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,39 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> LF.Qualified LF.TypeConName\n+templateConName (Identifier mbPkgId (TL.toStrict -> qualName)) = LF.Qualified pkgRef  mdN tpl\n+  where (mdN, tpl) = case T.splitOn \":\" qualName of\n+          [modName, defN] -> (LF.ModuleName (T.splitOn \".\" modName) , LF.TypeConName (T.splitOn \".\" defN) )\n+          _ -> error \"malformed identifier\"\n+        pkgRef = case mbPkgId of\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) -> LF.PRImport $ LF.PackageId $ TL.toStrict pkgId\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumSelf _))) -> LF.PRSelf\n+                  Just (PackageIdentifier Nothing) -> error \"malformed identifier\"\n+                  Nothing -> LF.PRSelf"
  },
  {
    "id" : "1a569607-a18f-4e0a-8ae8-7d3999b39ee5",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "212163e7-e1fe-451b-8d78-111bcb8ff418",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "A variant type is something like `Either`. It should only produce one entry in the header, most likely `[\"\"]`. I suggest you try to render something involving `Either` and it will become clear what the problem is.",
        "createdAt" : "2019-05-24T15:52:22Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6107b498-feb4-4f3d-953d-9feda65c2017",
        "parentId" : "212163e7-e1fe-451b-8d78-111bcb8ff418",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Instead of repeating this long pattern twice you could do something like\r\n```haskell\r\ncase LF.lookupDataType qName world of\r\n  Right dataType -> case LF.dataCons dataType of\r\n    LF.DataRecord re -> ...\r\n    LF.DataVariant re -> ...\r\n```",
        "createdAt" : "2019-05-24T15:54:26Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,39 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> LF.Qualified LF.TypeConName\n+templateConName (Identifier mbPkgId (TL.toStrict -> qualName)) = LF.Qualified pkgRef  mdN tpl\n+  where (mdN, tpl) = case T.splitOn \":\" qualName of\n+          [modName, defN] -> (LF.ModuleName (T.splitOn \".\" modName) , LF.TypeConName (T.splitOn \".\" defN) )\n+          _ -> error \"malformed identifier\"\n+        pkgRef = case mbPkgId of\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) -> LF.PRImport $ LF.PackageId $ TL.toStrict pkgId\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumSelf _))) -> LF.PRSelf\n+                  Just (PackageIdentifier Nothing) -> error \"malformed identifier\"\n+                  Nothing -> LF.PRSelf\n+\n+typeConFieldsNames :: LF.World -> (LF.FieldName, LF.Type) -> [T.Text]\n+typeConFieldsNames world (LF.FieldName fName, LF.TCon tcn) = map (TE.append (TE.append fName \".\")) (templateConFields tcn world)\n+typeConFieldsNames _ (LF.FieldName fName, _) = [fName]\n+\n+templateConFields :: LF.Qualified LF.TypeConName -> LF.World -> [T.Text]\n+templateConFields qName world = case LF.lookupDataType qName world of\n+    Right (LF.DefDataType _ _ _ _ (LF.DataRecord re) ) -> concatMap (typeConFieldsNames world) re\n+    Right (LF.DefDataType _ _ _ _ (LF.DataVariant re) ) -> map (LF.unVariantConName . fst) re"
  },
  {
    "id" : "92634891-d2fa-4a22-a740-6e5421df5cba",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "381237ec-734d-44c5-8548-c45fa83ab501",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ntypeConFieldsNames world (LF.FieldName fName, LF.TCon tcn) = map (\\label -> fName <> \".\" <> label) (templateConFields tcn world)\r\n```",
        "createdAt" : "2019-05-24T15:56:36Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,39 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> LF.Qualified LF.TypeConName\n+templateConName (Identifier mbPkgId (TL.toStrict -> qualName)) = LF.Qualified pkgRef  mdN tpl\n+  where (mdN, tpl) = case T.splitOn \":\" qualName of\n+          [modName, defN] -> (LF.ModuleName (T.splitOn \".\" modName) , LF.TypeConName (T.splitOn \".\" defN) )\n+          _ -> error \"malformed identifier\"\n+        pkgRef = case mbPkgId of\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) -> LF.PRImport $ LF.PackageId $ TL.toStrict pkgId\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumSelf _))) -> LF.PRSelf\n+                  Just (PackageIdentifier Nothing) -> error \"malformed identifier\"\n+                  Nothing -> LF.PRSelf\n+\n+typeConFieldsNames :: LF.World -> (LF.FieldName, LF.Type) -> [T.Text]\n+typeConFieldsNames world (LF.FieldName fName, LF.TCon tcn) = map (TE.append (TE.append fName \".\")) (templateConFields tcn world)"
  },
  {
    "id" : "b8ad0da3-6ab3-4503-b0e0-5f5501d3d448",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "82bbac24-1b24-4851-8874-f3b41c27186b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ntypeConFieldsNames world (LF.FieldName fName, LF.TConApp tcn _) = map (\\label -> fName <> \".\" <> label) (templateConFields tcn world)\r\n```",
        "createdAt" : "2019-05-24T21:11:31Z",
        "updatedAt" : "2019-05-28T13:00:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : null,
    "diffHunk" : "@@ -825,14 +825,40 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n+templateConName :: Identifier -> LF.Qualified LF.TypeConName\n+templateConName (Identifier mbPkgId (TL.toStrict -> qualName)) = LF.Qualified pkgRef  mdN tpl\n+  where (mdN, tpl) = case T.splitOn \":\" qualName of\n+          [modName, defN] -> (LF.ModuleName (T.splitOn \".\" modName) , LF.TypeConName (T.splitOn \".\" defN) )\n+          _ -> error \"malformed identifier\"\n+        pkgRef = case mbPkgId of\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) -> LF.PRImport $ LF.PackageId $ TL.toStrict pkgId\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumSelf _))) -> LF.PRSelf\n+                  Just (PackageIdentifier Nothing) -> error \"malformed identifier\"\n+                  Nothing -> LF.PRSelf\n+\n+typeConFieldsNames :: LF.World -> (LF.FieldName, LF.Type) -> [T.Text]\n+typeConFieldsNames world (LF.FieldName fName, LF.TCon tcn) = map (\\label -> fName <> \".\" <> label) (templateConFields tcn world)"
  },
  {
    "id" : "79534778-c2a1-4990-a830-591ce073ad8a",
    "prId" : 1285,
    "comments" : [
      {
        "id" : "87ae4da6-44e9-4c81-b1a5-07dcf3d7b990",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The first component of `renderValue` should not be needed anymore. Let's remove it in a follow up PR.",
        "createdAt" : "2019-05-28T14:34:03Z",
        "updatedAt" : "2019-05-28T14:34:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3e261ebb84a05fb429117bfc750aa0c3519cd59c",
    "line" : 45,
    "diffHunk" : "@@ -825,15 +825,43 @@ renderValue world name = \\case\n         renderField (Field label mbValue) =\n             renderValue world (name ++ [TL.toStrict label]) (fromJust mbValue)\n \n-renderRow :: LF.World -> S.Set T.Text -> NodeInfo -> (H.Html, H.Html)\n-renderRow world parties NodeInfo{..} =\n-    let (ths, tds) = renderValue world [] niValue\n-        header = H.tr $ mconcat\n+templateConName :: Identifier -> LF.Qualified LF.TypeConName\n+templateConName (Identifier mbPkgId (TL.toStrict -> qualName)) = LF.Qualified pkgRef  mdN tpl\n+  where (mdN, tpl) = case T.splitOn \":\" qualName of\n+          [modName, defN] -> (LF.ModuleName (T.splitOn \".\" modName) , LF.TypeConName (T.splitOn \".\" defN) )\n+          _ -> error \"malformed identifier\"\n+        pkgRef = case mbPkgId of\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumPackageId pkgId))) -> LF.PRImport $ LF.PackageId $ TL.toStrict pkgId\n+                  Just (PackageIdentifier (Just (PackageIdentifierSumSelf _))) -> LF.PRSelf\n+                  Just (PackageIdentifier Nothing) -> error \"unidentified package reference\"\n+                  Nothing -> error \"unidentified package reference\"\n+\n+labledField :: T.Text -> T.Text -> T.Text\n+labledField fname \"\" = fname\n+labledField fname label = fname <> \".\" <> label\n+\n+typeConFieldsNames :: LF.World -> (LF.FieldName, LF.Type) -> [T.Text]\n+typeConFieldsNames world (LF.FieldName fName, LF.TConApp tcn _) = map (labledField fName) (typeConFields tcn world)\n+typeConFieldsNames _ (LF.FieldName fName, _) = [fName]\n+\n+typeConFields :: LF.Qualified LF.TypeConName -> LF.World -> [T.Text]\n+typeConFields qName world = case LF.lookupDataType qName world of\n+  Right dataType -> case LF.dataCons dataType of\n+    LF.DataRecord re -> concatMap (typeConFieldsNames world) re\n+    LF.DataVariant _ -> [\"\"]\n+  Left _ -> error \"malformed template constructor\"\n+\n+renderHeader :: LF.World -> Identifier -> S.Set T.Text -> H.Html\n+renderHeader world identifier parties = H.tr $ mconcat\n             [ foldMap (H.th . (H.div H.! A.class_ \"observer\") . H.text) parties\n             , H.th \"id\"\n             , H.th \"status\"\n-            , ths\n+            , foldMap (H.th . H.text) (typeConFields (templateConName identifier) world)\n             ]\n+\n+renderRow :: LF.World -> S.Set T.Text -> NodeInfo -> H.Html\n+renderRow world parties NodeInfo{..} =\n+    let (_, tds) = renderValue world [] niValue"
  },
  {
    "id" : "27244a6b-b002-4329-aafb-8be41809f318",
    "prId" : 1124,
    "comments" : [
      {
        "id" : "71ff4fcf-85cc-44c4-8f33-6df3c7fe587a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n            (\"failed due to that some parties are maintainers but not signatories:\"\r\n```\r\nThe `<->` adds the space already.",
        "createdAt" : "2019-05-14T12:14:54Z",
        "updatedAt" : "2019-05-21T11:06:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e02a90f7c76b60417d93812592cf1fb6d7cbcb45",
    "line" : 9,
    "diffHunk" : "@@ -287,6 +287,22 @@ prettyFailedAuthorization world (FailedAuthorization mbNodeId mbFa) =\n              )\n             )\n \n+        Just (FailedAuthorizationSumMaintainersNotSubsetOfSignatories\n+          (FailedAuthorization_MaintainersNotSubsetOfSignatories templateId mbLoc signatories maintainers)) ->\n+          \"create of\" <-> prettyMay \"<missing template id>\" (prettyDefName world) templateId\n+          <-> \"at\" <-> prettyMayLocation world mbLoc\n+          $$\n+            (\"failed due to that some parties are maintainers but not signatories: \""
  }
]