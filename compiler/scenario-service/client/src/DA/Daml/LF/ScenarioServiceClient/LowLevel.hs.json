[
  {
    "id" : "440c7dad-ddf9-4338-936c-7ab4a1f1e0b1",
    "prId" : 1974,
    "comments" : [
      {
        "id" : "e257fddb-1f69-4555-885a-01baec7996b3",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Would it be good to point at this PR in that comment? The comment alone doesn't quite do it for me, if there was some clarification or improvement that would be nice. I think I understand what it's getting at, but with my current level of understanding, I think I'd struggle to explain it to others.",
        "createdAt" : "2019-07-02T14:34:06Z",
        "updatedAt" : "2019-07-02T14:36:06Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b600d5a8-d2b8-4e5e-a455-a929309902c8",
        "parentId" : "e257fddb-1f69-4555-885a-01baec7996b3",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I expanded the comment and added a link to this PR.",
        "createdAt" : "2019-07-02T14:36:12Z",
        "updatedAt" : "2019-07-02T14:36:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "73a67b68-3bbe-4da7-9be5-d9b9f9955961",
        "parentId" : "e257fddb-1f69-4555-885a-01baec7996b3",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "That's way clearer - thanks",
        "createdAt" : "2019-07-02T15:10:51Z",
        "updatedAt" : "2019-07-02T15:10:51Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "af8bb49cfb042057b2fbb952ad955b63ec665327",
    "line" : 21,
    "diffHunk" : "@@ -173,12 +174,20 @@ withCheckedProcessCleanup' cp f = withRunInIO $ \\run -> bracket\n             then return res\n             else throwIO $ ProcessExitedUnsuccessfully cp ec\n \n-handleCrashingScenarioService :: StreamingProcessHandle -> IO a -> IO a\n-handleCrashingScenarioService h act = do\n-    res <- race (waitForStreamingProcess h) act\n-    case res of\n-        Left _ -> fail \"Scenario service exited unexpectedly\"\n-        Right r -> pure r\n+handleCrashingScenarioService :: IORef Bool -> StreamingProcessHandle -> IO a -> IO a\n+handleCrashingScenarioService exitExpected h act =\n+    -- `race` doesnâ€™t quite work here since we might end up\n+    -- declaring an expected exit at the very end as a failure."
  },
  {
    "id" : "6d5166b4-2622-41ce-8a7c-4076f914cfa0",
    "prId" : 1970,
    "comments" : [
      {
        "id" : "d4022263-3fd1-4a4f-9fcb-ce21bf15fa40",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  cp <- javaProc ([\"-jar\" , optServerJar] ++ maybeToList (show <$> optGrpcMaxMessageSize))\r\n```",
        "createdAt" : "2019-07-02T11:36:21Z",
        "updatedAt" : "2019-07-02T11:49:42Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "99daebb8-9a80-4c7d-94d0-9575ef6b0177",
        "parentId" : "d4022263-3fd1-4a4f-9fcb-ce21bf15fa40",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":fire:",
        "createdAt" : "2019-07-02T11:42:51Z",
        "updatedAt" : "2019-07-02T11:49:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c48864812b9ae7d83844fe88fe52b1305db02418",
    "line" : 21,
    "diffHunk" : "@@ -185,7 +187,7 @@ withScenarioService opts@Options{..} f = do\n   unless serverJarExists $\n       throwIO (ScenarioServiceException (optServerJar <> \" does not exist.\"))\n   validateJava opts\n-  cp <- javaProc [\"-jar\" , optServerJar]\n+  cp <- javaProc ([\"-jar\" , optServerJar] <> maybeToList (show <$> optGrpcMaxMessageSize))"
  },
  {
    "id" : "bfcb6fda-c0b4-41c1-866d-4a6dba4895ac",
    "prId" : 1858,
    "comments" : [
      {
        "id" : "f61c0cd7-b3f9-4148-8197-6f61c52de51f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we make a PR to fix this upstream?",
        "createdAt" : "2019-06-25T12:21:00Z",
        "updatedAt" : "2019-06-25T12:21:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "896d6eea61a59ed30b6a0660a5a3eb77d0464718",
    "line" : 22,
    "diffHunk" : "@@ -146,6 +146,38 @@ validateJava Options{..} = do\n         ExitFailure _ -> throwIO (ScenarioServiceException (\"Failed to start `java -version`: \" <> stderr))\n         ExitSuccess -> pure ()\n \n+-- | This is sadly not exposed by Data.Conduit.Process."
  },
  {
    "id" : "6c6bb7fb-ff89-4b54-8e09-fe87be302ebe",
    "prId" : 1858,
    "comments" : [
      {
        "id" : "f998f4f2-e7cc-406e-b2eb-5acb8be0516c",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "This looks like a general purpose thing to go upstream too",
        "createdAt" : "2019-06-25T12:32:39Z",
        "updatedAt" : "2019-06-25T12:33:26Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "896d6eea61a59ed30b6a0660a5a3eb77d0464718",
    "line" : 28,
    "diffHunk" : "@@ -146,6 +146,38 @@ validateJava Options{..} = do\n         ExitFailure _ -> throwIO (ScenarioServiceException (\"Failed to start `java -version`: \" <> stderr))\n         ExitSuccess -> pure ()\n \n+-- | This is sadly not exposed by Data.Conduit.Process.\n+terminateStreamingProcess :: MonadIO m => StreamingProcessHandle -> m ()\n+terminateStreamingProcess = liftIO . terminateProcess . streamingProcessHandleRaw\n+\n+-- | Variant of withCheckedProcessCleanup that gives access to the\n+-- StreamingProcessHandle.\n+withCheckedProcessCleanup'"
  },
  {
    "id" : "18f6e7bd-be99-42e6-85b6-bdef642a4db1",
    "prId" : 1508,
    "comments" : [
      {
        "id" : "bd093208-1869-47dd-9a4e-c9053edfdcfc",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I do wonder if this should have a timeout on it...",
        "createdAt" : "2019-06-04T12:46:05Z",
        "updatedAt" : "2019-06-04T14:03:55Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "17411959141284526399ee9f2ef5735ad2a26033",
    "line" : 56,
    "diffHunk" : "@@ -181,15 +181,14 @@ start opts@Options{..} = do\n         -- callback or withAsync will block forever.\n         flip finally (System.IO.hClose stdinHdl) $ do\n             System.IO.hFlush System.IO.stdout\n-            either fail resume =<< takeMVar portMVar\n-  liftIO $ optLogInfo $ \"Scenario service backend running on port \" <> show port\n-  let grpcConfig = ClientConfig (Host \"localhost\") (Port port) [] Nothing\n-  client <- managed (withGRPCClient grpcConfig)\n-  return $\n-    Handle\n-    { hClient = client\n-    , hOptions = opts\n-    }\n+            port <- either fail pure =<< takeMVar portMVar"
  },
  {
    "id" : "cd92930d-fe66-490d-8891-1fb71ddd054e",
    "prId" : 629,
    "comments" : [
      {
        "id" : "a5fb9b53-c2f4-4d22-a21a-eeee3144ac50",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "```suggestion\r\n            either fail resume =<< takeMVar portMVar\r\n```\r\n\r\nBest not to use lazy expressions if we can trivially avoid it.",
        "createdAt" : "2019-04-23T13:23:20Z",
        "updatedAt" : "2019-04-23T19:06:34Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "64da24551b91b17470c6a1b143ff69680a90c13c",
    "line" : null,
    "diffHunk" : "@@ -174,12 +168,15 @@ start opts@Options{..} = do\n                 _ -> do\n                   liftIO (optLogError (\"Expected PORT=<port> from scenario service, but got '\" <> line <> \"'. Ignoring it.\"))\n                   handleStdout\n-\n-    bracket (pure stdinHdl) System.IO.hClose $ \\_ ->\n-      withAsync (runConduit (stderrSrc .| splitOutput .| C.awaitForever printStderr)) $ \\_ ->\n-      withAsync (runConduit (stdoutSrc .| splitOutput .| handleStdout)) $ \\_ -> do\n-        System.IO.hFlush System.IO.stdout\n-        either error resume =<< takeMVar portMVar\n+    withAsync (runConduit (stderrSrc .| splitOutput .| C.awaitForever printStderr)) $ \\_ ->\n+        withAsync (runConduit (stdoutSrc .| splitOutput .| handleStdout)) $ \\_ ->\n+        -- The scenario service will shut down cleanly when stdin is closed so we do this at the end of\n+        -- the callback. Note that on Windows, killThread will not be able to kill the conduits\n+        -- if they are blocked in hGetNonBlocking so it is crucial that we close stdin in the\n+        -- callback or withAsync will block forever.\n+        flip finally (System.IO.hClose stdinHdl) $ do\n+            System.IO.hFlush System.IO.stdout\n+            either error resume =<< takeMVar portMVar"
  }
]