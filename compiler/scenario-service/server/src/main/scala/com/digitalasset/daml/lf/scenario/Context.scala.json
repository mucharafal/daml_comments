[
  {
    "id" : "1fb8318d-9a39-49d3-b212-a0110bc2a335",
    "prId" : 7292,
    "comments" : [
      {
        "id" : "7226e6fa-a7a6-4931-8563-aef827e44137",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "It's a bit confusing that `runner.machine` corresponds to `clientMachine` while `client.machine` corresponds to `ledger.machine`. Maybe it's worth it to rename `client` to `ledgerClient`?",
        "createdAt" : "2020-09-01T15:59:22Z",
        "updatedAt" : "2020-09-01T16:27:08Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "90d0cb96-f6a3-472a-bc61-93ddc5bfd28f",
        "parentId" : "7226e6fa-a7a6-4931-8563-aef827e44137",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "good idea, renamed.",
        "createdAt" : "2020-09-01T16:27:21Z",
        "updatedAt" : "2020-09-01T16:27:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "00064d291b7f830115747541612d6af611501433",
    "line" : null,
    "diffHunk" : "@@ -206,11 +206,12 @@ class Context(val contextId: Context.ContextId, languageVersion: LanguageVersion\n     val client = new IdeClient(compiledPackages)\n     val participants = Participants(Some(client), Map.empty, Map.empty)\n     runner.runWithClients(participants).transform {\n-      case Success(v) => Success(Some((client.scenarioRunner.ledger, client.machine, Right(v))))\n+      case Success(v) =>\n+        Success(Some((client.scenarioRunner.ledger, (runner.machine, client.machine), Right(v))))"
  },
  {
    "id" : "38137914-e417-4450-b64a-582dd5c935b5",
    "prId" : 7062,
    "comments" : [
      {
        "id" : "930da4de-6216-40e4-bdab-d3d21ab3fd8a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "döp döp döp https://www.youtube.com/watch?v=0aV_vHcunSQ",
        "createdAt" : "2020-08-07T14:21:54Z",
        "updatedAt" : "2020-08-07T14:24:07Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6723ee22264e1312ff746283cd17c19310d27ba0",
    "line" : 40,
    "diffHunk" : "@@ -86,16 +87,13 @@ class Context(val contextId: Context.ContextId) {\n     newCtx\n   }\n \n-  private def decodeModule(\n-      major: LanguageVersion.Major,\n-      minor: String,\n-      bytes: ByteString,\n-  ): Ast.Module = {\n-    val lfVer = LanguageVersion(major, LanguageVersion.Minor fromProtoIdentifier minor)\n-    val dop: Decode.OfPackage[_] = Decode.decoders\n-      .lift(lfVer)\n-      .getOrElse(throw Context.ContextException(s\"No decode support for LF ${lfVer.pretty}\"))\n-      .decoder\n+  private[this] val dop: Decode.OfPackage[_] = Decode.decoders"
  },
  {
    "id" : "d6a392f8-87e5-4b1c-96d4-21c12a021053",
    "prId" : 6907,
    "comments" : [
      {
        "id" : "fdcf1f72-6d88-4005-9796-c2f05219d60a",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "collect ? ",
        "createdAt" : "2020-08-06T20:21:23Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a5fad39-9b82-48eb-ae2d-91b712f994b6",
        "parentId" : "fdcf1f72-6d88-4005-9796-c2f05219d60a",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Why not. ead2923dd0",
        "createdAt" : "2020-08-06T21:07:35Z",
        "updatedAt" : "2020-08-07T14:57:00Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0be6183109e0ca2416eea13d320bcf30594c3988",
    "line" : null,
    "diffHunk" : "@@ -197,7 +197,7 @@ class Context(val contextId: Context.ContextId) {\n     val compiledPackages =\n       PureCompiledPackages(allPackages, defns, Compiler.FullStackTrace, Compiler.NoProfile)\n     val (scriptPackageId, _) = allPackages.find {"
  },
  {
    "id" : "d807ebca-780c-4484-ab4a-a41b1bb6d768",
    "prId" : 5666,
    "comments" : [
      {
        "id" : "42228b21-4652-4a31-8024-2676ad551f69",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Afaik `orElse` can end up doing two map lookups whereas before we only did one. On the other hand if the first one succeeds, it is probably cheaper since the map is small. I guess the different performance characteristic here just doesn’t matter?",
        "createdAt" : "2020-04-22T10:48:14Z",
        "updatedAt" : "2020-04-22T19:01:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "aaae97a9-b223-45a9-b04b-96f0277e0474",
        "parentId" : "42228b21-4652-4a31-8024-2676ad551f69",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "In fact, the performance characteristic matter here. Thanks for underlying it. \r\nAny function call in the engine will be slower with this double lookup. \r\nI rewrite to remove this double lookup.  ",
        "createdAt" : "2020-04-22T13:01:19Z",
        "updatedAt" : "2020-04-22T19:01:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2e3c90b06280d918103985b718218124e90ba768",
    "line" : null,
    "diffHunk" : "@@ -83,60 +89,50 @@ class Context(val contextId: Context.ContextId) {\n     dop.decodeScenarioModule(homePackageId, lfScenarioModule)\n   }\n \n-  private def validate(pkgIds: Traversable[PackageId]): Unit =\n-    pkgIds.foreach(\n-      Validation.checkPackage(allPackages, _).left.foreach(e => throw ParseError(e.pretty)),\n-    )\n-\n   @throws[ParseError]\n   def update(\n-      unloadModules: Seq[String],\n+      unloadModules: Set[ModuleName],\n       loadModules: Seq[ProtoScenarioModule],\n-      unloadPackages: Seq[String],\n+      unloadPackages: Set[PackageId],\n       loadPackages: Seq[ByteString],\n       omitValidation: Boolean,\n-  ): Unit = this.synchronized {\n+  ): Unit = synchronized {\n \n-    // First we unload modules and packages\n-    unloadModules.foreach { moduleId =>\n-      val lfModuleId = assert(ModuleName.fromString(moduleId))\n-      modules -= lfModuleId\n-      defns = defns.filterKeys(ref => ref.packageId != homePackageId || ref.modName != lfModuleId)\n-    }\n-    unloadPackages.foreach { pkgId =>\n-      val lfPkgId = assert(PackageId.fromString(pkgId))\n-      extPackages -= lfPkgId\n-      defns = defns.filterKeys(ref => ref.packageId != lfPkgId)\n-    }\n-    // Now we can load the new packages.\n     val newPackages =\n       loadPackages.map { archive =>\n         Decode.decodeArchiveFromInputStream(archive.newInput)\n       }.toMap\n-    extPackages ++= newPackages\n-    defns ++= Compiler(extPackages).compilePackages(extPackages.keys, !omitValidation)\n \n-    // And now the new modules can be loaded.\n+    if (unloadPackages.nonEmpty || newPackages.nonEmpty) {\n+      // if any change we recompile everything\n+      extPackages --= unloadPackages\n+      extPackages ++= newPackages\n+      extDefns = Compiler(extPackages).compilePackages(extPackages.keys)\n+    }\n+\n     val lfModules = loadModules.map(module =>\n       decodeModule(LanguageVersion.Major.V1, module.getMinor, module.getDamlLf1))\n \n-    modules ++= lfModules.map(m => m.name -> m)\n+    modules --= unloadModules\n+    lfModules.foreach(mod => modules += mod.name -> mod)\n \n-    // At this point 'allPackages' is consistent and we can\n-    // compile the new modules.\n     val compiler = Compiler(allPackages)\n-    defns = lfModules.foldLeft(defns)(\n-      (newDefns, m) =>\n-        newDefns.filterKeys(ref => ref.packageId != homePackageId || ref.modName != m.name)\n-          ++ m.definitions.flatMap {\n-            case (defName, defn) =>\n-              compiler\n-                .compileDefn(Identifier(homePackageId, QualifiedName(m.name, defName)), defn)\n-        })\n+    modDefns = HashMap.empty\n+    modules.foreach {\n+      case (modName, mod) =>\n+        mod.definitions.foreach {\n+          case (defName, defn) =>\n+            modDefns ++= compiler\n+              .compileDefn(Identifier(homePackageId, QualifiedName(modName, defName)), defn)\n+        }\n+    }\n+\n+    defns = modDefns orElse extDefns"
  },
  {
    "id" : "9b6af914-d4d3-4140-af19-b72d79971f28",
    "prId" : 5666,
    "comments" : [
      {
        "id" : "f6b23818-a226-4666-b87a-06ba40721ecf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Before we only recompiled `lfModules` ,i.e., modules that are newly loaded. Now you seem to be recompiling all modules. This might not seem like a big difference but in the IDE the most common case is that you modified a single file and only that one will be updated. So on a large project (and we do have a project with modules in the order of thousands) this seems potentially problematic.",
        "createdAt" : "2020-04-22T10:50:45Z",
        "updatedAt" : "2020-04-22T19:01:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5405b782-fd99-4264-9a8f-f252eecd6886",
        "parentId" : "f6b23818-a226-4666-b87a-06ba40721ecf",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "You are right. I forget we have such a project. ",
        "createdAt" : "2020-04-22T13:02:31Z",
        "updatedAt" : "2020-04-22T19:01:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2e3c90b06280d918103985b718218124e90ba768",
    "line" : null,
    "diffHunk" : "@@ -83,60 +89,50 @@ class Context(val contextId: Context.ContextId) {\n     dop.decodeScenarioModule(homePackageId, lfScenarioModule)\n   }\n \n-  private def validate(pkgIds: Traversable[PackageId]): Unit =\n-    pkgIds.foreach(\n-      Validation.checkPackage(allPackages, _).left.foreach(e => throw ParseError(e.pretty)),\n-    )\n-\n   @throws[ParseError]\n   def update(\n-      unloadModules: Seq[String],\n+      unloadModules: Set[ModuleName],\n       loadModules: Seq[ProtoScenarioModule],\n-      unloadPackages: Seq[String],\n+      unloadPackages: Set[PackageId],\n       loadPackages: Seq[ByteString],\n       omitValidation: Boolean,\n-  ): Unit = this.synchronized {\n+  ): Unit = synchronized {\n \n-    // First we unload modules and packages\n-    unloadModules.foreach { moduleId =>\n-      val lfModuleId = assert(ModuleName.fromString(moduleId))\n-      modules -= lfModuleId\n-      defns = defns.filterKeys(ref => ref.packageId != homePackageId || ref.modName != lfModuleId)\n-    }\n-    unloadPackages.foreach { pkgId =>\n-      val lfPkgId = assert(PackageId.fromString(pkgId))\n-      extPackages -= lfPkgId\n-      defns = defns.filterKeys(ref => ref.packageId != lfPkgId)\n-    }\n-    // Now we can load the new packages.\n     val newPackages =\n       loadPackages.map { archive =>\n         Decode.decodeArchiveFromInputStream(archive.newInput)\n       }.toMap\n-    extPackages ++= newPackages\n-    defns ++= Compiler(extPackages).compilePackages(extPackages.keys, !omitValidation)\n \n-    // And now the new modules can be loaded.\n+    if (unloadPackages.nonEmpty || newPackages.nonEmpty) {\n+      // if any change we recompile everything\n+      extPackages --= unloadPackages\n+      extPackages ++= newPackages\n+      extDefns = Compiler(extPackages).compilePackages(extPackages.keys)\n+    }\n+\n     val lfModules = loadModules.map(module =>\n       decodeModule(LanguageVersion.Major.V1, module.getMinor, module.getDamlLf1))\n \n-    modules ++= lfModules.map(m => m.name -> m)\n+    modules --= unloadModules\n+    lfModules.foreach(mod => modules += mod.name -> mod)\n \n-    // At this point 'allPackages' is consistent and we can\n-    // compile the new modules.\n     val compiler = Compiler(allPackages)\n-    defns = lfModules.foldLeft(defns)(\n-      (newDefns, m) =>\n-        newDefns.filterKeys(ref => ref.packageId != homePackageId || ref.modName != m.name)\n-          ++ m.definitions.flatMap {\n-            case (defName, defn) =>\n-              compiler\n-                .compileDefn(Identifier(homePackageId, QualifiedName(m.name, defName)), defn)\n-        })\n+    modDefns = HashMap.empty\n+    modules.foreach {"
  },
  {
    "id" : "83985888-e844-439a-bd30-c19087721062",
    "prId" : 5666,
    "comments" : [
      {
        "id" : "23673558-7be4-498a-abab-ebbc6c742828",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe this is my lack of scala experience but I would find it easier to read if the `atmLong` was declared at the scope of the `Object`.",
        "createdAt" : "2020-04-22T10:52:56Z",
        "updatedAt" : "2020-04-22T19:01:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5d6422f-8f06-4d69-aac3-6bc68cadd365",
        "parentId" : "23673558-7be4-498a-abab-ebbc6c742828",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed",
        "createdAt" : "2020-04-22T11:28:12Z",
        "updatedAt" : "2020-04-22T19:01:39Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2e3c90b06280d918103985b718218124e90ba768",
    "line" : null,
    "diffHunk" : "@@ -17,26 +19,26 @@ import com.daml.lf.speedy.SExpr\n import com.daml.lf.speedy.SValue\n import com.daml.lf.types.Ledger.Ledger\n import com.daml.lf.speedy.SExpr.{LfDefRef, SDefinitionRef}\n-import com.daml.lf.validation.Validation\n import com.google.protobuf.ByteString\n \n+import scala.collection.immutable.HashMap\n+\n /**\n   * Scenario interpretation context: maintains a set of modules and external packages, with which\n   * scenarios can be interpreted.\n   */\n object Context {\n   type ContextId = Long\n-  case class ContextException(err: String) extends RuntimeException(err, null, true, false)\n+  case class ContextException(err: String) extends RuntimeException(err)\n \n-  var nextContextId: ContextId = 0\n-\n-  def newContext(): Context = {\n-    this.synchronized {\n-      nextContextId += 1\n-      new Context(nextContextId)\n-    }\n+  private val nextContextId: () => ContextId = {"
  },
  {
    "id" : "a4063c68-6f5a-4c95-a57d-5b4c48ae7d13",
    "prId" : 5638,
    "comments" : [
      {
        "id" : "0dd6ebe9-dd75-4b2c-9659-ee1c021f45fb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The variable name is really confusing. This whole code is only used in the scenario service. The difference is that in the IDE we run it in a mode where we do not perform validation whereas in the tests we do enable validation.",
        "createdAt" : "2020-04-20T17:41:20Z",
        "updatedAt" : "2020-04-20T18:22:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d1438e81-fcbd-4db1-bf97-50693f35af8c",
        "parentId" : "0dd6ebe9-dd75-4b2c-9659-ee1c021f45fb",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Good point. I changed the name.",
        "createdAt" : "2020-04-20T18:22:15Z",
        "updatedAt" : "2020-04-20T18:23:02Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c108d27f161b196b453a4e23b93794d5a7b5e908",
    "line" : null,
    "diffHunk" : "@@ -114,15 +114,13 @@ class Context(val contextId: Context.ContextId) {\n         Decode.decodeArchiveFromInputStream(archive.newInput)\n       }.toMap\n     extPackages ++= newPackages\n-    defns ++= Compiler(extPackages).compilePackages(extPackages.keys)\n+    defns ++= Compiler(extPackages).compilePackages(extPackages.keys, !forScenarioService)"
  },
  {
    "id" : "53fac3a5-b654-45ed-9750-fe2b02f926da",
    "prId" : 5609,
    "comments" : [
      {
        "id" : "2ed137a9-13f0-444a-91c6-b1fe3c583b2e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I assume you are planning to remove this check in a follow-up PR?",
        "createdAt" : "2020-04-17T13:37:54Z",
        "updatedAt" : "2020-04-17T13:41:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4db394fa-35f2-4c47-a077-40d5a7883222",
        "parentId" : "2ed137a9-13f0-444a-91c6-b1fe3c583b2e",
        "author" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "body" : "Yes thanks. everything related to this will go away. just piece by piece :)",
        "createdAt" : "2020-04-17T13:52:48Z",
        "updatedAt" : "2020-04-17T13:52:49Z",
        "lastEditedBy" : {
          "login" : "gerolf-da",
          "name" : "Gerolf Seitz",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/29121423?u=f683aa614e742c653ae8c01b194905dcdef6e974&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4f84a5a2-9114-4fa0-a569-6ba44db08dc0",
        "parentId" : "2ed137a9-13f0-444a-91c6-b1fe3c583b2e",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Yes. ",
        "createdAt" : "2020-04-17T14:05:34Z",
        "updatedAt" : "2020-04-17T14:05:34Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fbc8cf29253becdad2aa530837a456b664279cff",
    "line" : 58,
    "diffHunk" : "@@ -158,16 +148,15 @@ class Context(val contextId: Context.ContextId) {\n \n   private def buildMachine(identifier: Identifier): Option[Speedy.Machine] = {\n     for {\n-      res <- defns.get(LfDefRef(identifier))\n-      (lfVer, defn) = res\n+      defn <- defns.get(LfDefRef(identifier))\n     } yield\n     // note that the use of `Map#mapValues` here is intentional: we lazily project the\n     // definition out rather than rebuilding the map.\n     Speedy.Machine\n       .build(\n-        checkSubmitterInMaintainers = VersionTimeline.checkSubmitterInMaintainers(lfVer),\n+        checkSubmitterInMaintainers = false,"
  },
  {
    "id" : "be29fe70-2b9d-4199-8835-48b3f36e5b86",
    "prId" : 5296,
    "comments" : [
      {
        "id" : "7cb7852d-b192-4fa4-8eef-2136ca57d693",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does this not run into the entropy issues? Also why do we do this? Given that we remap them to node ids anyway, why not use a fixed seed?",
        "createdAt" : "2020-03-31T10:34:38Z",
        "updatedAt" : "2020-03-31T10:58:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5fb94c63-68f5-4bab-acd1-39f657e79fa9",
        "parentId" : "7cb7852d-b192-4fa4-8eef-2136ca57d693",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "no entropy issue here. Anyway dropped ",
        "createdAt" : "2020-03-31T10:57:49Z",
        "updatedAt" : "2020-03-31T10:58:11Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "82ad165fe963f3750aa68238a25e26ec5aa3fde5",
    "line" : null,
    "diffHunk" : "@@ -149,6 +150,16 @@ class Context(val contextId: Context.ContextId) {\n   def allPackages: Map[PackageId, Ast.Package] =\n     extPackages + (homePackageId -> Ast.Package(modules, extPackages.keySet, None))\n \n+  private val nextTransactionSeedAndSubmissionTime = {\n+    // we seed crypto.Hash.secureRandom with time to get different coid at each run."
  },
  {
    "id" : "976cdd7c-d6c1-41b4-97f6-0d97672c1efb",
    "prId" : 5296,
    "comments" : [
      {
        "id" : "2acd825e-4f5a-474b-ace4-91fbae3f1eb0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This comment doesn’t explain why it’s fine. Presumably because you remap to node ids which are not going to differ between each run.",
        "createdAt" : "2020-03-31T10:35:06Z",
        "updatedAt" : "2020-03-31T10:58:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "773a5e23-6b42-4865-ad36-c9cb39dc6b11",
        "parentId" : "2acd825e-4f5a-474b-ace4-91fbae3f1eb0",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I change to use a  fix hash and fix time.",
        "createdAt" : "2020-03-31T10:56:46Z",
        "updatedAt" : "2020-03-31T10:58:37Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "82ad165fe963f3750aa68238a25e26ec5aa3fde5",
    "line" : null,
    "diffHunk" : "@@ -149,6 +150,16 @@ class Context(val contextId: Context.ContextId) {\n   def allPackages: Map[PackageId, Ast.Package] =\n     extPackages + (homePackageId -> Ast.Package(modules, extPackages.keySet, None))\n \n+  private val nextTransactionSeedAndSubmissionTime = {\n+    // we seed crypto.Hash.secureRandom with time to get different coid at each run.\n+    // This is fine"
  },
  {
    "id" : "5f6b8f24-22f5-47a6-b934-e5c101a4debf",
    "prId" : 3726,
    "comments" : [
      {
        "id" : "ce836921-1126-4ccc-b4dc-7be0890c3ebf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I guess this is fine since we simply don’t care about this in the scenario service? If so it might be worth pointing this out in a comment.",
        "createdAt" : "2019-12-04T09:30:11Z",
        "updatedAt" : "2019-12-04T12:11:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "108c676e-2351-498a-852c-b303756c909a",
        "parentId" : "ce836921-1126-4ccc-b4dc-7be0890c3ebf",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "I'll add a comment.",
        "createdAt" : "2019-12-04T10:50:24Z",
        "updatedAt" : "2019-12-04T12:11:21Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ff6917f8-0232-41b5-907c-a5a8b1ff19a9",
        "parentId" : "ce836921-1126-4ccc-b4dc-7be0890c3ebf",
        "author" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "body" : "Actually I'll just do the right thing and pass `extPackages` as the dependencies.",
        "createdAt" : "2019-12-04T10:51:45Z",
        "updatedAt" : "2019-12-04T12:11:21Z",
        "lastEditedBy" : {
          "login" : "dajmaki",
          "name" : "Jussi Mäki",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/19684330?u=abb996187e6b472110abdd8dc3c27c4fc0140b92&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "172715cbea18231150b7d6276af1c3f63490bc2f",
    "line" : null,
    "diffHunk" : "@@ -148,7 +148,7 @@ class Context(val contextId: Context.ContextId) {\n   }\n \n   def allPackages: Map[PackageId, Ast.Package] =\n-    extPackages + (homePackageId -> Ast.Package(modules))\n+    extPackages + (homePackageId -> Ast.Package(modules, Set.empty[PackageId]))"
  },
  {
    "id" : "a080644d-4f7d-46fd-95e1-637e3cd39ae6",
    "prId" : 1967,
    "comments" : [
      {
        "id" : "85e1af4f-fd6b-4287-bbbb-df15733a700c",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Should be split into a bind and an =.",
        "createdAt" : "2019-07-02T13:21:14Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0e217e37-4842-4a68-a36b-a072c35deacb",
        "parentId" : "85e1af4f-fd6b-4287-bbbb-df15733a700c",
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "done.",
        "createdAt" : "2019-07-03T13:34:49Z",
        "updatedAt" : "2019-07-05T08:39:36Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ab26f081f43a184ed21982c7e26995630d1f49e",
    "line" : null,
    "diffHunk" : "@@ -151,10 +159,16 @@ class Context(val contextId: Context.ContextId) {\n   def allPackages: Map[PackageId, Ast.Package] =\n     extPackages + (homePackageId -> Ast.Package(modules))\n \n-  private def buildMachine(identifier: Identifier): Option[Speedy.Machine] = {\n+  private def buildMachine(identifier: Identifier): Option[(LanguageVersion, Speedy.Machine)] = {\n     for {\n-      defn <- defns.get(LfDefRef(identifier))\n-    } yield Speedy.Machine.build(defn, PureCompiledPackages(allPackages, defns).right.get)\n+      (lfVer, defn) <- defns.get(LfDefRef(identifier))"
  }
]