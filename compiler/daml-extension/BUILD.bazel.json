[
  {
    "id" : "d69a5e7b-8f2d-4595-9a41-62f25dff989a",
    "prId" : 7115,
    "comments" : [
      {
        "id" : "92b01c97-e5e1-4870-98f6-2ba6795629e9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Could we unzip and rezip to fix this?",
        "createdAt" : "2020-08-13T09:04:53Z",
        "updatedAt" : "2020-08-13T09:05:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "896de9c0-fa2c-42eb-8e9d-c0625d94096e",
        "parentId" : "92b01c97-e5e1-4870-98f6-2ba6795629e9",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Yes, I was hoping to find a way to do this with vsce directly, but failing that this should do it. ",
        "createdAt" : "2020-08-13T09:12:01Z",
        "updatedAt" : "2020-08-13T09:12:02Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34696a31-762b-47da-a124-92d350f5b658",
        "parentId" : "92b01c97-e5e1-4870-98f6-2ba6795629e9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not much to be gained trying to fix this if we cannot fix Navigator. In the end, the thing we really want to be reproducible is the SDK tarball.",
        "createdAt" : "2020-08-13T09:19:31Z",
        "updatedAt" : "2020-08-13T09:19:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "adc19d37704cdfbab2dcbf782fe97d6c21e94bd4",
    "line" : 7,
    "diffHunk" : "@@ -73,6 +73,10 @@ genrule(\n     tools = [\"//bazel_tools/sh:mktgz\"],\n )\n \n+# This rule is not reproducible. `vsce package` generates a `.vsix` file which\n+# is just a zip archive. The order of entries in that archive is\n+# non-deterministic and the individual entries contain non-reproducible\n+# timestamps."
  },
  {
    "id" : "fb4cec6e-8762-4484-9179-809f799a7b91",
    "prId" : 6884,
    "comments" : [
      {
        "id" : "61a5b4d9-86cd-4291-a755-1d04f4dd7a04",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What changed here? Shouldn’t the paths still be the same as before?",
        "createdAt" : "2020-07-30T13:59:31Z",
        "updatedAt" : "2020-08-05T14:02:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "644383d3-3206-4103-92aa-85a89ed8cce1",
        "parentId" : "61a5b4d9-86cd-4291-a755-1d04f4dd7a04",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "This is a consequence of `--format=ustar`. Looking at IEEE Std 1003.1-1988 the filename is limited to 256 characters split into two components separated by `/`: a prefix of at most 155 characters and the filename of at most 100 characters. In this case the filename `97e9576e421fc74fc3b3eed0f6f0ab3be937d0f110bacca2151119236a1a6fc2a5262b044ec008be7300e3489eb49631d1f0572d08ca99384f2f9182ab57` exceeds the 100 character limit.\r\n\r\nIf need longer file names at some point then [reproducible-builds.org](https://reproducible-builds.org/docs/archives/) recommends\r\n\r\n> To avoid this, either unset POSIXLY_CORRECT (only works with tar>1.32) or add to the tar call --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime or --format=gnu (both only available in GNU tar) or use --format=ustar if the limitations in that format are not a problem.\r\n\r\nto avoid non-deterministic PAX headers. However, it places some restrictions on the tar version.\r\n",
        "createdAt" : "2020-08-05T13:39:40Z",
        "updatedAt" : "2020-08-05T14:02:53Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c10397c3-2d20-4b34-b4e2-ff3c19161819",
        "parentId" : "61a5b4d9-86cd-4291-a755-1d04f4dd7a04",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense, thanks for the explanation!",
        "createdAt" : "2020-08-05T13:48:28Z",
        "updatedAt" : "2020-08-05T14:02:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "19f57f0075be4b6776ef77d0a7374fd6831b28dd",
    "line" : 8,
    "diffHunk" : "@@ -66,10 +66,11 @@ genrule(\n             cp ../$$f $$dir/$$file\n         done\n         cd ..\n-        tar c node_modules \\\\\n-          --owner=0 --group=0 --numeric-owner --mtime=2000-01-01\\\\ 00:00Z --sort=name \\\\\n-          | gzip -n > $@\n+        # Avoid file path too long errors on Windows of the form\n+        #   .../tar_dev_env/usr/bin/tar: node_modules/.cache/terser-webpack-plugin/...: file name is too long (cannot be split); not dumped"
  },
  {
    "id" : "d60a95ff-fe56-4780-9674-47295955a0fb",
    "prId" : 6870,
    "comments" : [
      {
        "id" : "b281e93e-e5bb-4c79-8dee-341450f4fbab",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not quite sure what changed here but it doesn’t seem all that surprising that vsce does not have npm implicitly in PATH.",
        "createdAt" : "2020-07-27T13:14:25Z",
        "updatedAt" : "2020-07-27T16:18:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f892739781276e7facc8c21b59996c40648ebaab",
    "line" : 7,
    "diffHunk" : "@@ -103,7 +103,9 @@ genrule(\n         sed -i 's/\"name\": \"daml\"/\"name\": \"daml-bundled\"/' package.json\n         $$DIR/$(location //:yarn)\n         $$DIR/$(location //:yarn) compile\n-        $$DIR/$(location @daml_extension_deps//vsce/bin:vsce) package -o $$DIR/$@\n+        # vsce needs Yarn or NPM in path and for some reason NPM\n+        # fails to find npm-cli.js so we use Yarn.\n+        PATH=$$(dirname $$DIR/$(location //:yarn)):$$PATH $$DIR/$(location @daml_extension_deps//vsce/bin:vsce) package --yarn -o $$DIR/$@"
  },
  {
    "id" : "c6edb031-568a-4030-a266-7c164662e57a",
    "prId" : 6870,
    "comments" : [
      {
        "id" : "56d3dfce-270a-4f90-8ae0-aea9498acb21",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Maybe an instance of https://github.com/bazelbuild/rules_nodejs/issues/1565?",
        "createdAt" : "2020-07-27T13:23:21Z",
        "updatedAt" : "2020-07-27T16:18:10Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "779934f6-eaca-4944-a1c9-5d3d95716297",
        "parentId" : "56d3dfce-270a-4f90-8ae0-aea9498acb21",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like it! Although that issue is pretty old so I would have expected that we hit this before? I’m now slightly worried that this will break publishing to NPM as well :thinking: ",
        "createdAt" : "2020-07-27T13:26:01Z",
        "updatedAt" : "2020-07-27T16:18:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "23f77b5f-5c4c-4527-88f9-5b4c6a9ba453",
        "parentId" : "56d3dfce-270a-4f90-8ae0-aea9498acb21",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "We hit it before on publishing and fixed it with [this patch](https://github.com/digital-asset/daml/blob/e0b9a535b32b57e9f1a79f0626458e3e1edfcfbc/bazel_tools/rules_nodejs_npm_cli_path.patch) (also linked on the issue). I'm not sure what's different in this case.",
        "createdAt" : "2020-07-27T13:39:45Z",
        "updatedAt" : "2020-07-27T16:18:10Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "21443c80-7623-4ec8-bb65-bd8c08f35c69",
        "parentId" : "56d3dfce-270a-4f90-8ae0-aea9498acb21",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Alright, then I’m less worried. The workaround of using Yarn seems somewhat sensible here given that we use Yarn everywhere else.",
        "createdAt" : "2020-07-27T13:47:15Z",
        "updatedAt" : "2020-07-27T16:18:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f892739781276e7facc8c21b59996c40648ebaab",
    "line" : 6,
    "diffHunk" : "@@ -103,7 +103,9 @@ genrule(\n         sed -i 's/\"name\": \"daml\"/\"name\": \"daml-bundled\"/' package.json\n         $$DIR/$(location //:yarn)\n         $$DIR/$(location //:yarn) compile\n-        $$DIR/$(location @daml_extension_deps//vsce/bin:vsce) package -o $$DIR/$@\n+        # vsce needs Yarn or NPM in path and for some reason NPM\n+        # fails to find npm-cli.js so we use Yarn."
  },
  {
    "id" : "714bd6e5-662f-48d2-97bf-64457a5c6236",
    "prId" : 5258,
    "comments" : [
      {
        "id" : "17d55404-94ca-4393-a489-934886ef597f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Given that we don’t test the vscode extension if would be great if you could make sure this does not break anything by running `daml-sdk-head --skip-jars` and then `daml studio --replace=always`.",
        "createdAt" : "2020-03-30T06:36:19Z",
        "updatedAt" : "2020-03-30T17:12:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1da4e2e6-ff90-4b18-a35b-dbd23faffe4a",
        "parentId" : "17d55404-94ca-4393-a489-934886ef597f",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I've tested this on an example project. The extension and the scenario runner seem to be working.",
        "createdAt" : "2020-03-30T17:12:23Z",
        "updatedAt" : "2020-03-30T17:12:24Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69349542a5aabac60ab89317fcc23e11433cf9ae",
    "line" : null,
    "diffHunk" : "@@ -43,32 +44,15 @@ sh_test(\n # copies them to their intended place, and then bundles the whole node_modules\n # folder as a tarball so the next task, below, can depend on that cached\n # tarball and be fast.\n-# Also for some reason on Windows I get \"cannot ceate node_modules: file\n-# exists\", so at this point I'm completely out of trust.\n-genrule(\n+# XXX: Use rules_nodejs to generate the extension.\n+pkg_tar("
  },
  {
    "id" : "0086ec0d-fe6d-48ab-9369-ff6eb75a9ba0",
    "prId" : 4513,
    "comments" : [
      {
        "id" : "655b73a8-2331-4540-a835-9676fb3ee163",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this required by this PR?",
        "createdAt" : "2020-02-19T10:07:09Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3bab952c-3c04-427b-b63c-db1ba1f2edb2",
        "parentId" : "655b73a8-2331-4540-a835-9676fb3ee163",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Yes: because we add a call to .format at the end of that string, Bazel will take anything in squiggly brackets as a substitution; the double brackets prevent that.",
        "createdAt" : "2020-02-19T12:36:18Z",
        "updatedAt" : "2020-02-25T14:08:02Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81246bd2733ace93653cb663dca5a0cdaf7c11e9",
    "line" : 22,
    "diffHunk" : "@@ -91,19 +92,18 @@ genrule(\n         export HOME=/does-not-exist\n         set -euo pipefail\n         TMP_DIR=$$(mktemp -d)\n-        cleanup () { rm -rf $$TMP_DIR || return; }\n+        cleanup () {{ rm -rf $$TMP_DIR || return; }}"
  },
  {
    "id" : "75049f89-91d0-4db7-b330-bd78dbc5fc03",
    "prId" : 2113,
    "comments" : [
      {
        "id" : "e0250bb3-f820-4688-ab01-cca9eb51effe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That looks like you already added it in #2103 ",
        "createdAt" : "2019-07-11T15:27:30Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "eaf70ee6-c0fb-4c18-a8fa-ebbeb25b1724",
        "parentId" : "e0250bb3-f820-4688-ab01-cca9eb51effe",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Yes sorry bit of a mixup between branches.",
        "createdAt" : "2019-07-11T16:02:37Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b34fe776d6ca357e55f939cf9039de5e2127dfef",
    "line" : null,
    "diffHunk" : "@@ -3,77 +3,65 @@\n \n package(default_visibility = [\"//visibility:public\"])\n \n-load(\"@npm_bazel_typescript//:index.bzl\", \"ts_library\")\n-load(\"@build_bazel_rules_nodejs//:defs.bzl\", \"npm_package\")\n-load(\"//bazel_tools:pkg.bzl\", \"pkg_tar\")\n-\n-ts_library(\n-    name = \"daml_extension_lib\",\n-    # TODO(MH): Unfortunately, the current packaging setup does not work with\n-    # multiple source files. We need to figure out how to split this file up\n-    # before it gets too big and package it properly.\n-    srcs = [\"src/extension.ts\"],\n-    node_modules = \"@daml_extension_deps//:node_modules\",\n-    tsconfig = \":tsconfig.json\",\n-    deps = [\n-        \"@daml_extension_deps//@types\",\n-        \"@daml_extension_deps//vscode\",\n-        \"@daml_extension_deps//vscode-languageclient\",\n-    ],\n+sh_test("
  },
  {
    "id" : "aa2882eb-42ef-459e-9697-6419f3368758",
    "prId" : 2113,
    "comments" : [
      {
        "id" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is it actually worth caching this separately? How slow is it? The extension doesn’t change too often so the cases where the yarn lock file doesn’t change while the extension changes (which would be the only case where this helps) should be quite rare.",
        "createdAt" : "2019-07-11T15:29:46Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8b934b39-7ae2-4646-aefb-5701fbd0bacb",
        "parentId" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Takes about 80s on my machine, whereas the rest (which required most of the iterating) runs in about 3s. It was definitely worth separating for writing these rules. I suppose once it all works we may go back and merge them, but I'm not sure what harm it makes to hacve this as a separate step?",
        "createdAt" : "2019-07-11T16:03:56Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5262b490-9f94-4520-84dd-ec030741f1f4",
        "parentId" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No harm, I was just thinking about reducing the complexity. But given those timings it seems quite reasonable to have this as a separate step. That said, I am not sure we gain much by splitting this into one rule that wraps `node_modules` in a tarball only to then extract it in the other rule so I would just inline the logic for this. The actual caching should come from copying `@daml_extension_deps//:node_modules` not from the fact that this is a separate rule.",
        "createdAt" : "2019-07-12T07:00:14Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2aa284da-b2ce-4b36-a461-5a621d543bd5",
        "parentId" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I totally agree with you, but my computer doesn't. Getting the files from Bazel takes 80s, getting the tarball from Bazel, extracting it, _and_ doing all the other stuff with yarn & vsce takes 5s.",
        "createdAt" : "2019-07-12T13:23:47Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "88fbd17e-1c4d-49fd-b726-bda11a46d201",
        "parentId" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m confused, you are saying if you copy from `@daml_extension_deps//:node_modules` to `node_modules` before calling `yarn` instead of going via the indirection it gets slower?",
        "createdAt" : "2019-07-12T13:25:23Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "560c058f-990b-4337-92d5-1e22f34e9340",
        "parentId" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "From my observations, it looks like what is slow is getting files from Bazel (specifically lots of small files). I suspect this has something to do with symlinks and may be faster on Linux.\r\n\r\nSo getting `node_modules` one file at a time, as currently done in the `node_deps_cache` rule, takes a _long_ time (we're talking ~80s on my machine for about 60MB across 3k files), whereas fetching one tarball from Bazel and extracting that \"locally\" (as currently done by the `vsix` rule) is about as fast as I'd expect, i.e. practically instant.\r\n\r\nI don't really have a good explanation for why (except that hunch about symlinks), but there it is. I do not observe any speed-up attributable to caching if I inline the logic from `node_deps_cache` into `vsix`*. This is in fact what I started with; this is not a case of premature optimization, I had written the slow version first.\r\n\r\n*: Other than caching the whole result of the genrule, obviously. But when I change the text of the genrule, even for steps that happen strictly after that point, I get the full 80s again if the fetching of files is inline.",
        "createdAt" : "2019-07-12T17:09:55Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8efde41-781c-4722-9db4-83998b1d9414",
        "parentId" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "> I’m confused, you are saying if you copy from `@daml_extension_deps//:node_modules` to `node_modules` before calling `yarn` instead of going via the indirection it gets slower?\r\n\r\nMore specifically: the copying is what is slow, hence the creation of a separate rule that just does the copying, so that gets cached as a single tarball and on subsequent runs I only have to pay the cost of accessing a Bazel-provided file once (rather than 3k times).",
        "createdAt" : "2019-07-12T17:11:40Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bc8a115d-9e12-43c6-aaf0-e2c774eb5cd5",
        "parentId" : "6709cbd6-54f7-4f8f-b4bf-475a40e38332",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thank you for the clarification! I definitely did not expect that copying a bunch of files takes 80s which is why I got a bit confused. I completely agree that a separate rule is the right way to handle this in that case!",
        "createdAt" : "2019-07-12T17:27:20Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b34fe776d6ca357e55f939cf9039de5e2127dfef",
    "line" : 36,
    "diffHunk" : "@@ -3,77 +3,65 @@\n \n package(default_visibility = [\"//visibility:public\"])\n \n-load(\"@npm_bazel_typescript//:index.bzl\", \"ts_library\")\n-load(\"@build_bazel_rules_nodejs//:defs.bzl\", \"npm_package\")\n-load(\"//bazel_tools:pkg.bzl\", \"pkg_tar\")\n-\n-ts_library(\n-    name = \"daml_extension_lib\",\n-    # TODO(MH): Unfortunately, the current packaging setup does not work with\n-    # multiple source files. We need to figure out how to split this file up\n-    # before it gets too big and package it properly.\n-    srcs = [\"src/extension.ts\"],\n-    node_modules = \"@daml_extension_deps//:node_modules\",\n-    tsconfig = \":tsconfig.json\",\n-    deps = [\n-        \"@daml_extension_deps//@types\",\n-        \"@daml_extension_deps//vscode\",\n-        \"@daml_extension_deps//vscode-languageclient\",\n-    ],\n+sh_test(\n+    name = \"valid-json\",\n+    srcs = [\"ci-tests.sh\"],\n+    data = glob([\n+        \"*.json\",\n+        \"syntaxes/*.json\",\n+    ]),\n )\n \n-# With this rule we get access to extension.js, as\n-# the ts_library only has the .d.ts file in the outputs.\n-# Could possibly also use filegroup, which allows specifying\n-# the output group (es5_source).\n-npm_package(\n-    name = \"out\",  # named out, so it goes to same place as before\n-    deps = [\n-        \":daml_extension_lib\",\n-    ],\n+genrule(\n+    name = \"node_deps_cache\","
  },
  {
    "id" : "a4414fb1-0296-4742-ba46-850ace1279fe",
    "prId" : 2113,
    "comments" : [
      {
        "id" : "27807ff9-caed-4993-a664-a404a64af67d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe add a comment on what you are doing here. Took me a few seconds to decypher (yes I’m bad at bash :slightly_smiling_face:)",
        "createdAt" : "2019-07-11T15:32:31Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ba3602d-3c56-4a36-870d-d97426541248",
        "parentId" : "27807ff9-caed-4993-a664-a404a64af67d",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Fair enough. It took me a while to figure out I had to do that, too. (Still hoping I'm missing something and I don't actually have to do it, though.)",
        "createdAt" : "2019-07-11T16:04:33Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b34fe776d6ca357e55f939cf9039de5e2127dfef",
    "line" : 51,
    "diffHunk" : "@@ -3,77 +3,65 @@\n \n package(default_visibility = [\"//visibility:public\"])\n \n-load(\"@npm_bazel_typescript//:index.bzl\", \"ts_library\")\n-load(\"@build_bazel_rules_nodejs//:defs.bzl\", \"npm_package\")\n-load(\"//bazel_tools:pkg.bzl\", \"pkg_tar\")\n-\n-ts_library(\n-    name = \"daml_extension_lib\",\n-    # TODO(MH): Unfortunately, the current packaging setup does not work with\n-    # multiple source files. We need to figure out how to split this file up\n-    # before it gets too big and package it properly.\n-    srcs = [\"src/extension.ts\"],\n-    node_modules = \"@daml_extension_deps//:node_modules\",\n-    tsconfig = \":tsconfig.json\",\n-    deps = [\n-        \"@daml_extension_deps//@types\",\n-        \"@daml_extension_deps//vscode\",\n-        \"@daml_extension_deps//vscode-languageclient\",\n-    ],\n+sh_test(\n+    name = \"valid-json\",\n+    srcs = [\"ci-tests.sh\"],\n+    data = glob([\n+        \"*.json\",\n+        \"syntaxes/*.json\",\n+    ]),\n )\n \n-# With this rule we get access to extension.js, as\n-# the ts_library only has the .d.ts file in the outputs.\n-# Could possibly also use filegroup, which allows specifying\n-# the output group (es5_source).\n-npm_package(\n-    name = \"out\",  # named out, so it goes to same place as before\n-    deps = [\n-        \":daml_extension_lib\",\n-    ],\n+genrule(\n+    name = \"node_deps_cache\",\n+    srcs = [\"@daml_extension_deps//:node_modules\"],\n+    outs = [\"node_modules.tar.gz\"],\n+    cmd = \"\"\"\n+        mkdir node_modules\n+        cd node_modules\n+        for f in $(locations @daml_extension_deps//:node_modules); do\n+            file=$$(basename $$f)\n+            dir=$$(dirname $$f | sed 's:^.*/node_modules/::')"
  },
  {
    "id" : "10c5bf04-02f6-4e93-b814-f5a33d6ff2c4",
    "prId" : 2113,
    "comments" : [
      {
        "id" : "c5315526-678b-4a4c-b22f-a913efc46ea6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Storing `$PWD` before you `cd` might be easier to understand.",
        "createdAt" : "2019-07-11T15:33:40Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b34fe776d6ca357e55f939cf9039de5e2127dfef",
    "line" : null,
    "diffHunk" : "@@ -3,77 +3,65 @@\n \n package(default_visibility = [\"//visibility:public\"])\n \n-load(\"@npm_bazel_typescript//:index.bzl\", \"ts_library\")\n-load(\"@build_bazel_rules_nodejs//:defs.bzl\", \"npm_package\")\n-load(\"//bazel_tools:pkg.bzl\", \"pkg_tar\")\n-\n-ts_library(\n-    name = \"daml_extension_lib\",\n-    # TODO(MH): Unfortunately, the current packaging setup does not work with\n-    # multiple source files. We need to figure out how to split this file up\n-    # before it gets too big and package it properly.\n-    srcs = [\"src/extension.ts\"],\n-    node_modules = \"@daml_extension_deps//:node_modules\",\n-    tsconfig = \":tsconfig.json\",\n-    deps = [\n-        \"@daml_extension_deps//@types\",\n-        \"@daml_extension_deps//vscode\",\n-        \"@daml_extension_deps//vscode-languageclient\",\n-    ],\n+sh_test(\n+    name = \"valid-json\",\n+    srcs = [\"ci-tests.sh\"],\n+    data = glob([\n+        \"*.json\",\n+        \"syntaxes/*.json\",\n+    ]),\n )\n \n-# With this rule we get access to extension.js, as\n-# the ts_library only has the .d.ts file in the outputs.\n-# Could possibly also use filegroup, which allows specifying\n-# the output group (es5_source).\n-npm_package(\n-    name = \"out\",  # named out, so it goes to same place as before\n-    deps = [\n-        \":daml_extension_lib\",\n-    ],\n+genrule(\n+    name = \"node_deps_cache\",\n+    srcs = [\"@daml_extension_deps//:node_modules\"],\n+    outs = [\"node_modules.tar.gz\"],\n+    cmd = \"\"\"\n+        mkdir node_modules\n+        cd node_modules\n+        for f in $(locations @daml_extension_deps//:node_modules); do\n+            file=$$(basename $$f)\n+            dir=$$(dirname $$f | sed 's:^.*/node_modules/::')\n+            mkdir -p $$dir\n+            cp ../$$f $$dir/$$file\n+        done\n+        cd ..\n+        tar czf node_modules.tar.gz node_modules\n+        cp node_modules.tar.gz $@\n+    \"\"\"\n )\n \n-pkg_tar(\n-    name = \"dot-dist\",\n+genrule(\n+    name = \"vsix\",\n     srcs = glob([\n         \"package.json\",\n         \"syntaxes/*\",\n         \"snippets/*\",\n         \"images/*\",\n         \"*.json\",\n         \"README.md\",\n+        \"yarn.lock\",\n+        \"src/*\",\n     ]) + [\n-        \":out\",\n-        \"src/webview.js\",\n-        \"@daml_extension_deps//vscode-jsonrpc:vscode-jsonrpc\",\n-        \"@daml_extension_deps//vscode-languageclient:vscode-languageclient\",\n-        \"@daml_extension_deps//vscode-languageserver-types:vscode-languageserver-types\",\n-        \"@daml_extension_deps//which:which\",\n+        \":node_deps_cache\",\n         \"//:VERSION\",\n     ],\n-    extension = \"tar.gz\",\n-    mode = \"0755\",\n-    package_dir = \"daml-extension\",\n-    remap_paths = {\n-        \"../daml_extension_deps/node_modules\": \"node_modules\",\n-    },\n-    strip_prefix = \"./\",\n-)\n-\n-# NOTE(MH): The `pkg_tar` rule puts a `.` at the beginning of every path, which\n-# would break assumptions made in the sdk assistant. Hence we need to repack\n-# the tarball to get rid of the `.`.\n-genrule(\n-    name = \"dist\",\n-    srcs = [\n-        \":dot-dist\",\n-        \"//:VERSION\",\n+    tools = [\n+        \"@daml_extension_deps//vsce/bin:vsce\",\n+        \"@nodejs//:bin/yarn\"\n     ],\n-    outs = [\"dist.tar.gz\"],\n+    outs = [\"daml-bundled.vsix\"],\n     cmd = \"\"\"\n-        tar zxf $(location :dot-dist)\n         VERSION=$$(cat $(location //:VERSION))\n-        sed -i \"s/__VERSION__/$$VERSION/\" daml-extension/package.json\n-        tar zcf $@ daml-extension\n+        cd compiler/daml-extension\n+        cp ../../$(location :node_deps_cache) ./node_cache_deps.tar.gz\n+        tar xzf node_cache_deps.tar.gz\n+        rm node_cache_deps.tar.gz\n+        sed -i \"s/__VERSION__/$$VERSION/\" package.json\n+        sed -i 's/\"name\": \"daml\"/\"name\": \"daml-bundled\"/' package.json\n+        ../../$(location @nodejs//:bin/yarn)"
  },
  {
    "id" : "b48bcc14-0c79-4463-8c26-92994ac6cdc4",
    "prId" : 2113,
    "comments" : [
      {
        "id" : "53f6caa2-893c-4f23-b527-7f8e44b5d64e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m not sure why you copy that file at all instead of just using `tar xzf $(location :node_deps_cache)`.",
        "createdAt" : "2019-07-11T15:34:38Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2089a045-e9cb-4164-af82-3d5469cc9791",
        "parentId" : "53f6caa2-893c-4f23-b527-7f8e44b5d64e",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I tend to not trust `tar` enough for that. I'll try it.",
        "createdAt" : "2019-07-11T16:13:47Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b34fe776d6ca357e55f939cf9039de5e2127dfef",
    "line" : null,
    "diffHunk" : "@@ -3,77 +3,65 @@\n \n package(default_visibility = [\"//visibility:public\"])\n \n-load(\"@npm_bazel_typescript//:index.bzl\", \"ts_library\")\n-load(\"@build_bazel_rules_nodejs//:defs.bzl\", \"npm_package\")\n-load(\"//bazel_tools:pkg.bzl\", \"pkg_tar\")\n-\n-ts_library(\n-    name = \"daml_extension_lib\",\n-    # TODO(MH): Unfortunately, the current packaging setup does not work with\n-    # multiple source files. We need to figure out how to split this file up\n-    # before it gets too big and package it properly.\n-    srcs = [\"src/extension.ts\"],\n-    node_modules = \"@daml_extension_deps//:node_modules\",\n-    tsconfig = \":tsconfig.json\",\n-    deps = [\n-        \"@daml_extension_deps//@types\",\n-        \"@daml_extension_deps//vscode\",\n-        \"@daml_extension_deps//vscode-languageclient\",\n-    ],\n+sh_test(\n+    name = \"valid-json\",\n+    srcs = [\"ci-tests.sh\"],\n+    data = glob([\n+        \"*.json\",\n+        \"syntaxes/*.json\",\n+    ]),\n )\n \n-# With this rule we get access to extension.js, as\n-# the ts_library only has the .d.ts file in the outputs.\n-# Could possibly also use filegroup, which allows specifying\n-# the output group (es5_source).\n-npm_package(\n-    name = \"out\",  # named out, so it goes to same place as before\n-    deps = [\n-        \":daml_extension_lib\",\n-    ],\n+genrule(\n+    name = \"node_deps_cache\",\n+    srcs = [\"@daml_extension_deps//:node_modules\"],\n+    outs = [\"node_modules.tar.gz\"],\n+    cmd = \"\"\"\n+        mkdir node_modules\n+        cd node_modules\n+        for f in $(locations @daml_extension_deps//:node_modules); do\n+            file=$$(basename $$f)\n+            dir=$$(dirname $$f | sed 's:^.*/node_modules/::')\n+            mkdir -p $$dir\n+            cp ../$$f $$dir/$$file\n+        done\n+        cd ..\n+        tar czf node_modules.tar.gz node_modules\n+        cp node_modules.tar.gz $@\n+    \"\"\"\n )\n \n-pkg_tar(\n-    name = \"dot-dist\",\n+genrule(\n+    name = \"vsix\",\n     srcs = glob([\n         \"package.json\",\n         \"syntaxes/*\",\n         \"snippets/*\",\n         \"images/*\",\n         \"*.json\",\n         \"README.md\",\n+        \"yarn.lock\",\n+        \"src/*\",\n     ]) + [\n-        \":out\",\n-        \"src/webview.js\",\n-        \"@daml_extension_deps//vscode-jsonrpc:vscode-jsonrpc\",\n-        \"@daml_extension_deps//vscode-languageclient:vscode-languageclient\",\n-        \"@daml_extension_deps//vscode-languageserver-types:vscode-languageserver-types\",\n-        \"@daml_extension_deps//which:which\",\n+        \":node_deps_cache\",\n         \"//:VERSION\",\n     ],\n-    extension = \"tar.gz\",\n-    mode = \"0755\",\n-    package_dir = \"daml-extension\",\n-    remap_paths = {\n-        \"../daml_extension_deps/node_modules\": \"node_modules\",\n-    },\n-    strip_prefix = \"./\",\n-)\n-\n-# NOTE(MH): The `pkg_tar` rule puts a `.` at the beginning of every path, which\n-# would break assumptions made in the sdk assistant. Hence we need to repack\n-# the tarball to get rid of the `.`.\n-genrule(\n-    name = \"dist\",\n-    srcs = [\n-        \":dot-dist\",\n-        \"//:VERSION\",\n+    tools = [\n+        \"@daml_extension_deps//vsce/bin:vsce\",\n+        \"@nodejs//:bin/yarn\"\n     ],\n-    outs = [\"dist.tar.gz\"],\n+    outs = [\"daml-bundled.vsix\"],\n     cmd = \"\"\"\n-        tar zxf $(location :dot-dist)\n         VERSION=$$(cat $(location //:VERSION))\n-        sed -i \"s/__VERSION__/$$VERSION/\" daml-extension/package.json\n-        tar zcf $@ daml-extension\n+        cd compiler/daml-extension\n+        cp ../../$(location :node_deps_cache) ./node_cache_deps.tar.gz"
  },
  {
    "id" : "a4118965-239d-424b-93f0-341eb825c9a4",
    "prId" : 2113,
    "comments" : [
      {
        "id" : "ef8ac79c-d8af-46fd-9e88-c3e12a0c0dfe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like `vsce package` has a `-o` argument so no need to copy.",
        "createdAt" : "2019-07-11T15:36:10Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "00bfd83e-ba1a-4a83-873b-46b41086f7c0",
        "parentId" : "ef8ac79c-d8af-46fd-9e88-c3e12a0c0dfe",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "I'd missed that. Thanks!",
        "createdAt" : "2019-07-11T16:14:49Z",
        "updatedAt" : "2019-07-12T21:01:03Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b34fe776d6ca357e55f939cf9039de5e2127dfef",
    "line" : null,
    "diffHunk" : "@@ -3,77 +3,65 @@\n \n package(default_visibility = [\"//visibility:public\"])\n \n-load(\"@npm_bazel_typescript//:index.bzl\", \"ts_library\")\n-load(\"@build_bazel_rules_nodejs//:defs.bzl\", \"npm_package\")\n-load(\"//bazel_tools:pkg.bzl\", \"pkg_tar\")\n-\n-ts_library(\n-    name = \"daml_extension_lib\",\n-    # TODO(MH): Unfortunately, the current packaging setup does not work with\n-    # multiple source files. We need to figure out how to split this file up\n-    # before it gets too big and package it properly.\n-    srcs = [\"src/extension.ts\"],\n-    node_modules = \"@daml_extension_deps//:node_modules\",\n-    tsconfig = \":tsconfig.json\",\n-    deps = [\n-        \"@daml_extension_deps//@types\",\n-        \"@daml_extension_deps//vscode\",\n-        \"@daml_extension_deps//vscode-languageclient\",\n-    ],\n+sh_test(\n+    name = \"valid-json\",\n+    srcs = [\"ci-tests.sh\"],\n+    data = glob([\n+        \"*.json\",\n+        \"syntaxes/*.json\",\n+    ]),\n )\n \n-# With this rule we get access to extension.js, as\n-# the ts_library only has the .d.ts file in the outputs.\n-# Could possibly also use filegroup, which allows specifying\n-# the output group (es5_source).\n-npm_package(\n-    name = \"out\",  # named out, so it goes to same place as before\n-    deps = [\n-        \":daml_extension_lib\",\n-    ],\n+genrule(\n+    name = \"node_deps_cache\",\n+    srcs = [\"@daml_extension_deps//:node_modules\"],\n+    outs = [\"node_modules.tar.gz\"],\n+    cmd = \"\"\"\n+        mkdir node_modules\n+        cd node_modules\n+        for f in $(locations @daml_extension_deps//:node_modules); do\n+            file=$$(basename $$f)\n+            dir=$$(dirname $$f | sed 's:^.*/node_modules/::')\n+            mkdir -p $$dir\n+            cp ../$$f $$dir/$$file\n+        done\n+        cd ..\n+        tar czf node_modules.tar.gz node_modules\n+        cp node_modules.tar.gz $@\n+    \"\"\"\n )\n \n-pkg_tar(\n-    name = \"dot-dist\",\n+genrule(\n+    name = \"vsix\",\n     srcs = glob([\n         \"package.json\",\n         \"syntaxes/*\",\n         \"snippets/*\",\n         \"images/*\",\n         \"*.json\",\n         \"README.md\",\n+        \"yarn.lock\",\n+        \"src/*\",\n     ]) + [\n-        \":out\",\n-        \"src/webview.js\",\n-        \"@daml_extension_deps//vscode-jsonrpc:vscode-jsonrpc\",\n-        \"@daml_extension_deps//vscode-languageclient:vscode-languageclient\",\n-        \"@daml_extension_deps//vscode-languageserver-types:vscode-languageserver-types\",\n-        \"@daml_extension_deps//which:which\",\n+        \":node_deps_cache\",\n         \"//:VERSION\",\n     ],\n-    extension = \"tar.gz\",\n-    mode = \"0755\",\n-    package_dir = \"daml-extension\",\n-    remap_paths = {\n-        \"../daml_extension_deps/node_modules\": \"node_modules\",\n-    },\n-    strip_prefix = \"./\",\n-)\n-\n-# NOTE(MH): The `pkg_tar` rule puts a `.` at the beginning of every path, which\n-# would break assumptions made in the sdk assistant. Hence we need to repack\n-# the tarball to get rid of the `.`.\n-genrule(\n-    name = \"dist\",\n-    srcs = [\n-        \":dot-dist\",\n-        \"//:VERSION\",\n+    tools = [\n+        \"@daml_extension_deps//vsce/bin:vsce\",\n+        \"@nodejs//:bin/yarn\"\n     ],\n-    outs = [\"dist.tar.gz\"],\n+    outs = [\"daml-bundled.vsix\"],\n     cmd = \"\"\"\n-        tar zxf $(location :dot-dist)\n         VERSION=$$(cat $(location //:VERSION))\n-        sed -i \"s/__VERSION__/$$VERSION/\" daml-extension/package.json\n-        tar zcf $@ daml-extension\n+        cd compiler/daml-extension\n+        cp ../../$(location :node_deps_cache) ./node_cache_deps.tar.gz\n+        tar xzf node_cache_deps.tar.gz\n+        rm node_cache_deps.tar.gz\n+        sed -i \"s/__VERSION__/$$VERSION/\" package.json\n+        sed -i 's/\"name\": \"daml\"/\"name\": \"daml-bundled\"/' package.json\n+        ../../$(location @nodejs//:bin/yarn)\n+        ../../$(location @nodejs//:bin/yarn) compile\n+        ../../$(location @daml_extension_deps//vsce/bin:vsce) package"
  }
]