[
  {
    "id" : "d832a5a5-b720-4a92-9b9e-59b91fd80c19",
    "prId" : 3738,
    "comments" : [
      {
        "id" : "e90f7c7b-c59a-43a1-b1e8-ede3ffc24a3a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n            const latestTitle = latestBlog.title.join();\r\n```\r\nor\r\n```suggestion\r\n            const latestTitle = latestBlog.title.join(' ');\r\n```",
        "createdAt" : "2019-12-04T20:53:02Z",
        "updatedAt" : "2019-12-04T20:53:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9e796d4039c8ee539d252e9d33b56ed19cf7c561",
    "line" : 4,
    "diffHunk" : "@@ -175,17 +175,19 @@ async function showBlogIfNotSeen(config: WorkspaceConfiguration, context: Extens\n             const rssXml = await res.text();\n             const rss = await parseStringPromise(rssXml);\n             const latestBlog = rss.rss.channel[0].item[0];\n+            const latestTitle = latestBlog.title[0];"
  },
  {
    "id" : "04424c3a-33df-4905-81ad-cab6cb617e02",
    "prId" : 3623,
    "comments" : [
      {
        "id" : "3b264db1-b30f-4762-b85f-dcec7c2e5469",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Shouldn’t we be using an `await` on the `fetch` here? Our typescript expert @hurryabit can probably tell you more :trollface: ",
        "createdAt" : "2019-11-26T13:55:11Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b08d1e87-6447-4e0d-911b-c0f96b9e6cdb",
        "parentId" : "3b264db1-b30f-4762-b85f-dcec7c2e5469",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Hmm reading/thinking about this now",
        "createdAt" : "2019-11-26T15:51:13Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "91f76413-4334-45e4-b096-a5c428dba81e",
        "parentId" : "3b264db1-b30f-4762-b85f-dcec7c2e5469",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "So, `await` means that \"the evaluation of the async function halts until the promise is resolved\". Don't know why we would need to do this here - it seems like the notification might be slightly delayed this way but don't think that's an issue.",
        "createdAt" : "2019-11-26T16:34:01Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a1062614-70a4-46df-9398-2fecafa764d7",
        "parentId" : "3b264db1-b30f-4762-b85f-dcec7c2e5469",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yes, let's please use await. That makes it easier to read.",
        "createdAt" : "2019-11-26T16:36:40Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e92fc22d-75a5-44c5-b5c4-12e7898729da",
        "parentId" : "3b264db1-b30f-4762-b85f-dcec7c2e5469",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`.then` only gets called once the promise has been resolved too. `const x = await P; E` and `P.then(x => E)` are pretty much the same. IMO, the former is easier to read. It's a bit like using `do` syntax rather than `>>= \\_ ->` in Haskell. (In fact, promise is a monad, probably modulo some quirks.)",
        "createdAt" : "2019-11-26T17:37:23Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "699b5efb729a83b210be307c5176165018e9faf5",
    "line" : null,
    "diffHunk" : "@@ -147,6 +151,37 @@ async function showReleaseNotes(version: string) {\n     });\n }\n \n+// Check if there is a new blog post which the user has not yet seen.\n+// If so, display a notification with the link to the new post.\n+// Update the user state so we don't notify about the same blog post again.\n+// The user can opt out of these notifications entirely by changing the\n+// 'daml.showNewBlogPosts' setting.\n+async function showBlogIfNotSeen(config: WorkspaceConfiguration, context: ExtensionContext) {\n+    if (!config.get('showNewBlogPosts')) { return; }\n+    const feedUrl = 'https://blog.daml.com/daml-driven/rss.xml';\n+    fetch(feedUrl).then(async (res: Response) => {"
  },
  {
    "id" : "8d920243-c21c-453e-829c-f9ae8c7499ca",
    "prId" : 3623,
    "comments" : [
      {
        "id" : "adb1131b-a92d-45d4-898b-3ff23dd2fb04",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What happens if this fails, e.g., due to a network error (might be caused by a firewall). I guess since this is `async` we will still continue? We definitely don’t want to prevent the rest of the extension from loading.",
        "createdAt" : "2019-11-26T13:59:29Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "17a7eddd-6927-49ca-9fec-efb870207bf5",
        "parentId" : "adb1131b-a92d-45d4-898b-3ff23dd2fb04",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yes, I think it's safe because\r\n1. It's async\r\n2. I don't do anything in the error cases, e.g. if the `fetch` of the daml blog post fails, I just silently move on.",
        "createdAt" : "2019-11-26T15:27:58Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "decdedc9-8f8e-4ac5-91cb-519b809245b3",
        "parentId" : "adb1131b-a92d-45d4-898b-3ff23dd2fb04",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we please verify that it is not harmful by running it with wifi turned off.",
        "createdAt" : "2019-11-26T16:35:33Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "699b5efb729a83b210be307c5176165018e9faf5",
    "line" : 21,
    "diffHunk" : "@@ -33,8 +35,10 @@ export async function activate(context: vscode.ExtensionContext) {\n     // Get telemetry consent\n     const consent = getTelemetryConsent(config, context);\n \n-    // Check extension version to display release notes on updates\n+    // Display release notes on updates\n     showReleaseNotesIfNewVersion(context);\n+    // Notify about new blog posts\n+    showBlogIfNotSeen(config, context);"
  },
  {
    "id" : "4bd1965e-afc7-4cee-a47d-09680d4bdef0",
    "prId" : 3623,
    "comments" : [
      {
        "id" : "a38683a7-258e-4233-8978-1650b117cb16",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should use `parseStringPromise` and async/await here.",
        "createdAt" : "2019-11-26T16:46:01Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "699b5efb729a83b210be307c5176165018e9faf5",
    "line" : null,
    "diffHunk" : "@@ -147,6 +151,37 @@ async function showReleaseNotes(version: string) {\n     });\n }\n \n+// Check if there is a new blog post which the user has not yet seen.\n+// If so, display a notification with the link to the new post.\n+// Update the user state so we don't notify about the same blog post again.\n+// The user can opt out of these notifications entirely by changing the\n+// 'daml.showNewBlogPosts' setting.\n+async function showBlogIfNotSeen(config: WorkspaceConfiguration, context: ExtensionContext) {\n+    if (!config.get('showNewBlogPosts')) { return; }\n+    const feedUrl = 'https://blog.daml.com/daml-driven/rss.xml';\n+    fetch(feedUrl).then(async (res: Response) => {\n+        if (res.ok) {\n+            const rssXml = await res.text();\n+            parseString(rssXml, async function (err, rss) {"
  },
  {
    "id" : "6f09dd1e-94f2-49dd-8f4c-9569c355c48f",
    "prId" : 3623,
    "comments" : [
      {
        "id" : "5d6e8c42-5768-4385-aaba-4057f2a1d622",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Another case for `await`.",
        "createdAt" : "2019-11-26T16:49:00Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "699b5efb729a83b210be307c5176165018e9faf5",
    "line" : null,
    "diffHunk" : "@@ -147,6 +151,37 @@ async function showReleaseNotes(version: string) {\n     });\n }\n \n+// Check if there is a new blog post which the user has not yet seen.\n+// If so, display a notification with the link to the new post.\n+// Update the user state so we don't notify about the same blog post again.\n+// The user can opt out of these notifications entirely by changing the\n+// 'daml.showNewBlogPosts' setting.\n+async function showBlogIfNotSeen(config: WorkspaceConfiguration, context: ExtensionContext) {\n+    if (!config.get('showNewBlogPosts')) { return; }\n+    const feedUrl = 'https://blog.daml.com/daml-driven/rss.xml';\n+    fetch(feedUrl).then(async (res: Response) => {\n+        if (res.ok) {\n+            const rssXml = await res.text();\n+            parseString(rssXml, async function (err, rss) {\n+                const latestBlog = rss.rss.channel[0].item[0];\n+                const lastSeenBlog = context.globalState.get(recentBlogContextKey);\n+                if (latestBlog &&\n+                    (!lastSeenBlog || typeof lastSeenBlog === 'string' && lastSeenBlog !== latestBlog.title)) {\n+                    window.showInformationMessage("
  },
  {
    "id" : "3cb96141-25cc-472c-9b1a-030d801d3626",
    "prId" : 3623,
    "comments" : [
      {
        "id" : "2b4623dd-e6b9-48f9-8403-681a19c882e0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we change this to something like:\r\n```\r\nThere is a new post on the DAML Driven blog:\r\nAnother post why DAML is the best!\r\n[Go to blog] [Ignore] [Snooze for one week] [Never show this again]\r\n```",
        "createdAt" : "2019-11-26T16:53:09Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6fbce542-c13a-4950-8aed-b1aa06d729b7",
        "parentId" : "2b4623dd-e6b9-48f9-8403-681a19c882e0",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Hmm I kind of like the simplicity of the current notification. Snooze is a good idea, but our blog posts are not being released that frequently at the moment - maybe if we were releasing things more than once a week then this would be a useful button. \"Never show this again\" might also be handy - in the PR as it stands you have to go to your settings to turn the notifications off - but maybe that added hurdle is a good thing to get users to stick with the feature for a little while at first. Anyway, I suggest we merge this change as is (probably after the style changes) and then consider adding more options.",
        "createdAt" : "2019-11-26T18:04:36Z",
        "updatedAt" : "2019-11-26T19:05:08Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "699b5efb729a83b210be307c5176165018e9faf5",
    "line" : null,
    "diffHunk" : "@@ -147,6 +151,37 @@ async function showReleaseNotes(version: string) {\n     });\n }\n \n+// Check if there is a new blog post which the user has not yet seen.\n+// If so, display a notification with the link to the new post.\n+// Update the user state so we don't notify about the same blog post again.\n+// The user can opt out of these notifications entirely by changing the\n+// 'daml.showNewBlogPosts' setting.\n+async function showBlogIfNotSeen(config: WorkspaceConfiguration, context: ExtensionContext) {\n+    if (!config.get('showNewBlogPosts')) { return; }\n+    const feedUrl = 'https://blog.daml.com/daml-driven/rss.xml';\n+    fetch(feedUrl).then(async (res: Response) => {\n+        if (res.ok) {\n+            const rssXml = await res.text();\n+            parseString(rssXml, async function (err, rss) {\n+                const latestBlog = rss.rss.channel[0].item[0];\n+                const lastSeenBlog = context.globalState.get(recentBlogContextKey);\n+                if (latestBlog &&\n+                    (!lastSeenBlog || typeof lastSeenBlog === 'string' && lastSeenBlog !== latestBlog.title)) {\n+                    window.showInformationMessage(\n+                        `New blog post: ${latestBlog.title}`,\n+                        'Go to blog'\n+                    ).then(function(clicked) {"
  },
  {
    "id" : "e5d013fe-fe5e-4363-8cf4-5d1ce38c50d0",
    "prId" : 3535,
    "comments" : [
      {
        "id" : "ec6b2c3e-d8c5-4ff8-8a25-361d51682f92",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n                `New DAML SDK ${version} Available`, // Title of the panel displayed to the user\r\n```",
        "createdAt" : "2019-11-19T21:23:42Z",
        "updatedAt" : "2019-11-19T21:29:11Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1df2331bb10718001665b05b0bb9353b04fb90c0",
    "line" : null,
    "diffHunk" : "@@ -138,7 +138,7 @@ async function showReleaseNotes(version: string) {\n         if (result.ok) {\n             const panel = vscode.window.createWebviewPanel(\n                 'releaseNotes', // Identifies the type of the webview. Used internally\n-                `Release Notes for DAML SDK ${version}`, // Title of the panel displayed to the user\n+                `DAML SDK ${version} Available`, // Title of the panel displayed to the user"
  },
  {
    "id" : "4a872bb2-33c8-4a31-b7bd-ea005647a6bf",
    "prId" : 3321,
    "comments" : [
      {
        "id" : "ceebd448-2fb5-4d9e-8d48-cc1899ed457f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nasync function showReleaseNotes(version: string) {\r\n```",
        "createdAt" : "2019-11-02T00:42:57Z",
        "updatedAt" : "2019-11-06T21:26:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f9289d894ff1aca21093865758276428800073c",
    "line" : null,
    "diffHunk" : "@@ -97,17 +97,44 @@ export async function activate(context: vscode.ExtensionContext) {\n }\n \n // Compare the extension version with the one stored in the global state.\n-// This will be used to show release notes when the version has changed.\n-async function checkVersion(context: ExtensionContext) {\n+// If they are different, we assume the user has updated the extension and\n+// we display the release notes for the new SDK release in a new tab.\n+// This should only occur the first time the user uses the extension after\n+// an update.\n+async function showReleaseNotesIfNewVersion(context: ExtensionContext) {\n     let packageFile = path.join(context.extensionPath, 'package.json');\n     let packageData = await util.promisify(fs.readFile)(packageFile, \"utf8\");\n     let extensionVersion = JSON.parse(packageData).version;\n     let recordedVersion = context.globalState.get(versionContextKey);\n-    if (!recordedVersion || recordedVersion != extensionVersion ) {\n+    if (!recordedVersion || recordedVersion != extensionVersion) {\n+        // We have a new version of the extension so show the release notes\n+        // and update the current version so we don't show them again until\n+        // the next update.\n+        showReleaseNotes(extensionVersion);\n         await context.globalState.update(versionContextKey, extensionVersion);\n     }\n }\n \n+// Show the release notes from the DAML Blog.\n+// We display the HTML in a new editor tab using a \"webview\":\n+// https://code.visualstudio.com/api/extension-guides/webview\n+async function showReleaseNotes(version: String) {"
  },
  {
    "id" : "639ad5b9-2a86-4f92-92a5-cd4ed1a8de73",
    "prId" : 3321,
    "comments" : [
      {
        "id" : "f8004075-7a43-47bb-92ac-dc880c26a864",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The only way this can not hold is when `version` is the empty string. If we remove this `if` check, we would display all release notes. This seems fine to me.",
        "createdAt" : "2019-11-02T00:46:08Z",
        "updatedAt" : "2019-11-06T21:26:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9289d894ff1aca21093865758276428800073c",
    "line" : 75,
    "diffHunk" : "@@ -97,17 +97,44 @@ export async function activate(context: vscode.ExtensionContext) {\n }\n \n // Compare the extension version with the one stored in the global state.\n-// This will be used to show release notes when the version has changed.\n-async function checkVersion(context: ExtensionContext) {\n+// If they are different, we assume the user has updated the extension and\n+// we display the release notes for the new SDK release in a new tab.\n+// This should only occur the first time the user uses the extension after\n+// an update.\n+async function showReleaseNotesIfNewVersion(context: ExtensionContext) {\n     let packageFile = path.join(context.extensionPath, 'package.json');\n     let packageData = await util.promisify(fs.readFile)(packageFile, \"utf8\");\n     let extensionVersion = JSON.parse(packageData).version;\n     let recordedVersion = context.globalState.get(versionContextKey);\n-    if (!recordedVersion || recordedVersion != extensionVersion ) {\n+    if (!recordedVersion || recordedVersion != extensionVersion) {\n+        // We have a new version of the extension so show the release notes\n+        // and update the current version so we don't show them again until\n+        // the next update.\n+        showReleaseNotes(extensionVersion);\n         await context.globalState.update(versionContextKey, extensionVersion);\n     }\n }\n \n+// Show the release notes from the DAML Blog.\n+// We display the HTML in a new editor tab using a \"webview\":\n+// https://code.visualstudio.com/api/extension-guides/webview\n+async function showReleaseNotes(version: String) {\n+    let releaseNotesUrl = 'https://blog.daml.com/release-notes/';\n+    if (version) {"
  },
  {
    "id" : "0d0098be-97ae-4234-a3d9-f21ab49c0e31",
    "prId" : 3321,
    "comments" : [
      {
        "id" : "ac78198c-78bb-4c1e-8247-78926c9fb98b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n                `Release Notes for DAML SDK ${version}`, // Title of the panel displayed to the user\r\n```",
        "createdAt" : "2019-11-02T00:48:10Z",
        "updatedAt" : "2019-11-06T21:26:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f9289d894ff1aca21093865758276428800073c",
    "line" : null,
    "diffHunk" : "@@ -97,17 +97,44 @@ export async function activate(context: vscode.ExtensionContext) {\n }\n \n // Compare the extension version with the one stored in the global state.\n-// This will be used to show release notes when the version has changed.\n-async function checkVersion(context: ExtensionContext) {\n+// If they are different, we assume the user has updated the extension and\n+// we display the release notes for the new SDK release in a new tab.\n+// This should only occur the first time the user uses the extension after\n+// an update.\n+async function showReleaseNotesIfNewVersion(context: ExtensionContext) {\n     let packageFile = path.join(context.extensionPath, 'package.json');\n     let packageData = await util.promisify(fs.readFile)(packageFile, \"utf8\");\n     let extensionVersion = JSON.parse(packageData).version;\n     let recordedVersion = context.globalState.get(versionContextKey);\n-    if (!recordedVersion || recordedVersion != extensionVersion ) {\n+    if (!recordedVersion || recordedVersion != extensionVersion) {\n+        // We have a new version of the extension so show the release notes\n+        // and update the current version so we don't show them again until\n+        // the next update.\n+        showReleaseNotes(extensionVersion);\n         await context.globalState.update(versionContextKey, extensionVersion);\n     }\n }\n \n+// Show the release notes from the DAML Blog.\n+// We display the HTML in a new editor tab using a \"webview\":\n+// https://code.visualstudio.com/api/extension-guides/webview\n+async function showReleaseNotes(version: String) {\n+    let releaseNotesUrl = 'https://blog.daml.com/release-notes/';\n+    if (version) {\n+        let url = releaseNotesUrl + version;\n+        var result = await webrequest.get(url);\n+        if (result.statusCode === 200) {\n+            const panel = vscode.window.createWebviewPanel(\n+                'releaseNotes', // Identifies the type of the webview. Used internally\n+                'Release Notes for ' + version, // Title of the panel displayed to the user"
  },
  {
    "id" : "800c4c35-ea09-4014-a80d-2f8f9d2caf69",
    "prId" : 3321,
    "comments" : [
      {
        "id" : "3adca2e2-0d86-43ed-b9cf-99fc176e53ee",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    const releaseNotesUrl = 'https://blog.daml.com/release-notes/';\r\n```\r\nSame for all `let` and `var` below.",
        "createdAt" : "2019-11-02T00:48:24Z",
        "updatedAt" : "2019-11-06T21:26:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f9289d894ff1aca21093865758276428800073c",
    "line" : null,
    "diffHunk" : "@@ -97,17 +97,44 @@ export async function activate(context: vscode.ExtensionContext) {\n }\n \n // Compare the extension version with the one stored in the global state.\n-// This will be used to show release notes when the version has changed.\n-async function checkVersion(context: ExtensionContext) {\n+// If they are different, we assume the user has updated the extension and\n+// we display the release notes for the new SDK release in a new tab.\n+// This should only occur the first time the user uses the extension after\n+// an update.\n+async function showReleaseNotesIfNewVersion(context: ExtensionContext) {\n     let packageFile = path.join(context.extensionPath, 'package.json');\n     let packageData = await util.promisify(fs.readFile)(packageFile, \"utf8\");\n     let extensionVersion = JSON.parse(packageData).version;\n     let recordedVersion = context.globalState.get(versionContextKey);\n-    if (!recordedVersion || recordedVersion != extensionVersion ) {\n+    if (!recordedVersion || recordedVersion != extensionVersion) {\n+        // We have a new version of the extension so show the release notes\n+        // and update the current version so we don't show them again until\n+        // the next update.\n+        showReleaseNotes(extensionVersion);\n         await context.globalState.update(versionContextKey, extensionVersion);\n     }\n }\n \n+// Show the release notes from the DAML Blog.\n+// We display the HTML in a new editor tab using a \"webview\":\n+// https://code.visualstudio.com/api/extension-guides/webview\n+async function showReleaseNotes(version: String) {\n+    let releaseNotesUrl = 'https://blog.daml.com/release-notes/';"
  },
  {
    "id" : "5587690e-aaf1-4867-9da5-2494db10ad54",
    "prId" : 3321,
    "comments" : [
      {
        "id" : "6699dc09-21a2-4a58-8856-757fbfbe254b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we check that the version increased? If someone explicitly downgrades using `daml studio --replace=published` it doesn’t seem useful to show them the release notes for the old version.",
        "createdAt" : "2019-11-04T08:27:05Z",
        "updatedAt" : "2019-11-06T21:26:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "57a463ed-271f-4811-9353-04b43cabad4d",
        "parentId" : "6699dc09-21a2-4a58-8856-757fbfbe254b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good thinking. Let's do that/",
        "createdAt" : "2019-11-04T15:11:16Z",
        "updatedAt" : "2019-11-06T21:26:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f9289d894ff1aca21093865758276428800073c",
    "line" : null,
    "diffHunk" : "@@ -97,17 +97,44 @@ export async function activate(context: vscode.ExtensionContext) {\n }\n \n // Compare the extension version with the one stored in the global state.\n-// This will be used to show release notes when the version has changed.\n-async function checkVersion(context: ExtensionContext) {\n+// If they are different, we assume the user has updated the extension and\n+// we display the release notes for the new SDK release in a new tab.\n+// This should only occur the first time the user uses the extension after\n+// an update.\n+async function showReleaseNotesIfNewVersion(context: ExtensionContext) {\n     let packageFile = path.join(context.extensionPath, 'package.json');\n     let packageData = await util.promisify(fs.readFile)(packageFile, \"utf8\");\n     let extensionVersion = JSON.parse(packageData).version;\n     let recordedVersion = context.globalState.get(versionContextKey);\n-    if (!recordedVersion || recordedVersion != extensionVersion ) {\n+    if (!recordedVersion || recordedVersion != extensionVersion) {"
  },
  {
    "id" : "f80dc7d2-7615-451f-9ca4-e0c612f952de",
    "prId" : 3309,
    "comments" : [
      {
        "id" : "fec8fa86-453f-4035-b89b-7e088f2f78dc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Probably better to use https://stackoverflow.com/a/46867579/3877993 to turn `readFile` into an `async` (depending on which node version you use, you don’t even need that https://stackoverflow.com/a/56821924/3877993). `readFileSync` looks up the whole js runtime which is probably fine since VSCode sandboxes extensions but given that we can easily avoid it here, let’s do that.",
        "createdAt" : "2019-10-31T18:41:52Z",
        "updatedAt" : "2019-10-31T20:09:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "394b75ef856b947bfbf0d43338f942489a57a7b7",
    "line" : null,
    "diffHunk" : "@@ -86,6 +94,17 @@ export async function activate(context: vscode.ExtensionContext) {\n     context.subscriptions.push(d1, d2, d3, d4, d5);\n }\n \n+// Compare the extension version with the one stored in the global state.\n+// This will be used to show release notes when the version has changed.\n+async function checkVersion(context: ExtensionContext) {\n+    let packageFile = path.join(context.extensionPath, 'package.json');\n+    let data = fs.readFileSync(packageFile, \"utf8\");"
  },
  {
    "id" : "1bb37db4-623a-4962-b93f-e00f176d1201",
    "prId" : 3309,
    "comments" : [
      {
        "id" : "a0672877-e264-4ed5-aece-5b5c9920cb32",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Judging from the fact that `update` returns a `Thenable` we should probably wait for this. I /believe/ you can just use `await` on any `Thenable` but take that with a grain of salt.",
        "createdAt" : "2019-10-31T18:43:23Z",
        "updatedAt" : "2019-10-31T20:09:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "394b75ef856b947bfbf0d43338f942489a57a7b7",
    "line" : null,
    "diffHunk" : "@@ -86,6 +94,17 @@ export async function activate(context: vscode.ExtensionContext) {\n     context.subscriptions.push(d1, d2, d3, d4, d5);\n }\n \n+// Compare the extension version with the one stored in the global state.\n+// This will be used to show release notes when the version has changed.\n+async function checkVersion(context: ExtensionContext) {\n+    let packageFile = path.join(context.extensionPath, 'package.json');\n+    let data = fs.readFileSync(packageFile, \"utf8\");\n+    let extensionVersion = JSON.parse(data).version;\n+    let recordedVersion = context.globalState.get(versionContextKey);\n+    if (!recordedVersion || recordedVersion != extensionVersion ) {\n+        context.globalState.update(versionContextKey, extensionVersion);"
  },
  {
    "id" : "3383317b-d3c4-4f62-bc17-5dd312e36241",
    "prId" : 3309,
    "comments" : [
      {
        "id" : "c7a21b79-0075-469e-b0c8-40b06cba322d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    // Check extension version to display release notes on updates\r\n```",
        "createdAt" : "2019-11-01T14:30:02Z",
        "updatedAt" : "2019-11-01T14:32:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "394b75ef856b947bfbf0d43338f942489a57a7b7",
    "line" : 22,
    "diffHunk" : "@@ -13,17 +13,27 @@ import * as tmp from 'tmp';\n import { LanguageClient, LanguageClientOptions, RequestType, NotificationType, TextDocumentIdentifier, TextDocument, ExecuteCommandRequest } from 'vscode-languageclient';\n import { Uri, Event, TextDocumentContentProvider, ViewColumn, EventEmitter, window, QuickPickOptions, ExtensionContext, env, WorkspaceConfiguration } from 'vscode'\n import * as which from 'which';\n+import * as util from 'util';\n+\n \n let damlRoot: string = path.join(os.homedir(), '.daml');\n \n+let versionContextKey = 'version'\n+\n var damlLanguageClient: LanguageClient;\n // Extension activation\n+// Note: You can log debug information by using `console.log()`\n+// and then `Toggle Developer Tools` in VSCode. This will show\n+// output in the Console tab once the extension is activated.\n export async function activate(context: vscode.ExtensionContext) {\n     // Start the language clients\n     let config = vscode.workspace.getConfiguration('daml')\n     // Get telemetry consent\n     const consent = getTelemetryConsent(config, context);\n \n+    // Check extension version to publish release notes on updates"
  },
  {
    "id" : "f13ef0d0-96e0-4711-b0f1-2861df0c1fba",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "f4dbdbd7-f545-4201-aef8-4094a199d2d8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think it is a good idea to silently do nothing if this is not the case.",
        "createdAt" : "2019-08-20T06:37:20Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87fb5e8f-cca2-4736-9a15-f5e99e90525a",
        "parentId" : "f4dbdbd7-f545-4201-aef8-4094a199d2d8",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Now displaying and INFO if no DAML file is open",
        "createdAt" : "2019-08-20T16:44:17Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : 42,
    "diffHunk" : "@@ -99,34 +99,21 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n-async function visualize() {\n-    const util = require('util');\n-    const exec = util.promisify(require('child_process').exec);\n-    tmp.file(((err, path) => {\n-        if (err) throw err;\n-        let buildCmd = \"daml build -o \" + path\n-        let visualizeCmd = \"daml damlc visual \" + path\n-        let workspaceRoot = vscode.workspace.rootPath;\n-        let execOpts = { cwd: workspaceRoot }\n-        exec(buildCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-            if (error) {\n-                vscode.window.showErrorMessage(\"daml build failed with\" + error)\n-            }\n-            else {\n-                exec(visualizeCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-                    if (error) {\n-                        vscode.window.showErrorMessage(\"damlc visual command failed with \" + error)\n-                    }\n-                    else {\n-                        vscode.workspace.openTextDocument({ content: stdout, language: \"dot\" })\n+function visualize() {\n+    if (vscode.window.activeTextEditor) {"
  },
  {
    "id" : "c43740a6-a8ea-40d3-9248-19ea650f1456",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "df8cb1bf-9172-4466-9d10-0f710797dafa",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here, silently doing nothing is usually a bad idea.",
        "createdAt" : "2019-08-20T06:37:37Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "610f9fa2-a9e6-4a72-b5e5-2b11e83d1346",
        "parentId" : "df8cb1bf-9172-4466-9d10-0f710797dafa",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Now displaying info if we do not have a file open",
        "createdAt" : "2019-08-20T17:00:29Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -99,34 +99,21 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n-async function visualize() {\n-    const util = require('util');\n-    const exec = util.promisify(require('child_process').exec);\n-    tmp.file(((err, path) => {\n-        if (err) throw err;\n-        let buildCmd = \"daml build -o \" + path\n-        let visualizeCmd = \"daml damlc visual \" + path\n-        let workspaceRoot = vscode.workspace.rootPath;\n-        let execOpts = { cwd: workspaceRoot }\n-        exec(buildCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-            if (error) {\n-                vscode.window.showErrorMessage(\"daml build failed with\" + error)\n-            }\n-            else {\n-                exec(visualizeCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-                    if (error) {\n-                        vscode.window.showErrorMessage(\"damlc visual command failed with \" + error)\n-                    }\n-                    else {\n-                        vscode.workspace.openTextDocument({ content: stdout, language: \"dot\" })\n+function visualize() {\n+    if (vscode.window.activeTextEditor) {\n+        const workspace = vscode.workspace.workspaceFolders![0];\n+        if (workspace) {"
  },
  {
    "id" : "b32c9060-f268-4054-9375-462d28e20798",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "17725b11-2d58-4673-8f98-d9a3bb7e4ce6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think we should try to find the files on the client side. There are a few options here that I think are all a better option:\r\n\r\n1. Don’t pass any parameters in the command. Instead generate the visualization based on the list of open files.\r\n2. Don’t pass any parameters, instead read `daml.yaml` to find the root module.\r\n3. Pass a single file which corresponds to the currently open file.\r\n\r\n3 seems like the most reasonable option to me both from a user perspective as well as from an implementation perspective. 2 might be nice but it has an issue if the file is not already be open since we will garbage collect the result. 1 works nicely from an implementation perspective but seems a bit unintuitive for users.",
        "createdAt" : "2019-08-20T06:45:28Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f6037ddc-5e29-4b3f-abc3-6c0875402e49",
        "parentId" : "17725b11-2d58-4673-8f98-d9a3bb7e4ce6",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Went with 3rd approach we now generate visual for open files only.",
        "createdAt" : "2019-08-20T16:45:06Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -99,34 +99,21 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n-async function visualize() {\n-    const util = require('util');\n-    const exec = util.promisify(require('child_process').exec);\n-    tmp.file(((err, path) => {\n-        if (err) throw err;\n-        let buildCmd = \"daml build -o \" + path\n-        let visualizeCmd = \"daml damlc visual \" + path\n-        let workspaceRoot = vscode.workspace.rootPath;\n-        let execOpts = { cwd: workspaceRoot }\n-        exec(buildCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-            if (error) {\n-                vscode.window.showErrorMessage(\"daml build failed with\" + error)\n-            }\n-            else {\n-                exec(visualizeCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-                    if (error) {\n-                        vscode.window.showErrorMessage(\"damlc visual command failed with \" + error)\n-                    }\n-                    else {\n-                        vscode.workspace.openTextDocument({ content: stdout, language: \"dot\" })\n+function visualize() {\n+    if (vscode.window.activeTextEditor) {\n+        const workspace = vscode.workspace.workspaceFolders![0];\n+        if (workspace) {\n+            vscode.workspace.findFiles(new vscode.RelativePattern(workspace, \"**/*.daml\"), \"\").then(r => {"
  },
  {
    "id" : "c7a14c05-1751-45d8-96fb-5cb915ecd154",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "4770061c-35d3-4627-a3ac-688bd05745ea",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we come up with better names than `r`? This is especially confusing since you shadow `r` here.",
        "createdAt" : "2019-08-20T06:46:08Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "362cf50c-f858-46f3-8471-e84110e8bdee",
        "parentId" : "4770061c-35d3-4627-a3ac-688bd05745ea",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : ":( renamed that to dotFileContents",
        "createdAt" : "2019-08-20T16:46:21Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -99,34 +99,21 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n-async function visualize() {\n-    const util = require('util');\n-    const exec = util.promisify(require('child_process').exec);\n-    tmp.file(((err, path) => {\n-        if (err) throw err;\n-        let buildCmd = \"daml build -o \" + path\n-        let visualizeCmd = \"daml damlc visual \" + path\n-        let workspaceRoot = vscode.workspace.rootPath;\n-        let execOpts = { cwd: workspaceRoot }\n-        exec(buildCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-            if (error) {\n-                vscode.window.showErrorMessage(\"daml build failed with\" + error)\n-            }\n-            else {\n-                exec(visualizeCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-                    if (error) {\n-                        vscode.window.showErrorMessage(\"damlc visual command failed with \" + error)\n-                    }\n-                    else {\n-                        vscode.workspace.openTextDocument({ content: stdout, language: \"dot\" })\n+function visualize() {\n+    if (vscode.window.activeTextEditor) {\n+        const workspace = vscode.workspace.workspaceFolders![0];\n+        if (workspace) {\n+            vscode.workspace.findFiles(new vscode.RelativePattern(workspace, \"**/*.daml\"), \"\").then(r => {\n+                let files = r.map(f => f.path)\n+                damlLanguageClient.sendRequest(ExecuteCommandRequest.type,\n+                    { command: \"daml/damlVisualize\", arguments: [files] }).then(r => {"
  },
  {
    "id" : "38fb9fd3-6200-4e7a-a41c-342172a04138",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "922a8b69-6072-465c-9ca5-ea5903764baf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What happens if I have an open window but it’s not a .daml file?",
        "createdAt" : "2019-08-21T07:06:57Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ebc63a2-583a-4a8e-a7f2-2986f9224ccc",
        "parentId" : "922a8b69-6072-465c-9ca5-ea5903764baf",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Now should display an info message to open a DAML file",
        "createdAt" : "2019-08-21T19:52:03Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -99,34 +99,19 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n-async function visualize() {\n-    const util = require('util');\n-    const exec = util.promisify(require('child_process').exec);\n-    tmp.file(((err, path) => {\n-        if (err) throw err;\n-        let buildCmd = \"daml build -o \" + path\n-        let visualizeCmd = \"daml damlc visual \" + path\n-        let workspaceRoot = vscode.workspace.rootPath;\n-        let execOpts = { cwd: workspaceRoot }\n-        exec(buildCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-            if (error) {\n-                vscode.window.showErrorMessage(\"daml build failed with\" + error)\n-            }\n-            else {\n-                exec(visualizeCmd, execOpts, ((error: Error, stdout: string, stderr: string) => {\n-                    if (error) {\n-                        vscode.window.showErrorMessage(\"damlc visual command failed with \" + error)\n-                    }\n-                    else {\n-                        vscode.workspace.openTextDocument({ content: stdout, language: \"dot\" })\n-                            .then(doc => vscode.window.showTextDocument(doc, vscode.ViewColumn.One, true)\n-                                .then(_ => loadPreviewIfAvailable()))\n-                    }\n-                }))\n-            }\n-        }))\n-\n-    }))\n+function visualize() {\n+    if (vscode.window.activeTextEditor){"
  },
  {
    "id" : "96ef87af-812f-4968-8e6e-a33124c28bfc",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "5d6ad4c8-d2b1-42ba-8b7e-20c415d67345",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    let d5 = vscode.commands.registerCommand('daml.visualize', visualize);\r\n```",
        "createdAt" : "2019-08-09T06:47:53Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -54,6 +54,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     );\n \n     let d2 = vscode.commands.registerCommand('daml.openDamlDocs', openDamlDocs);\n+    let d5 = vscode.commands.registerCommand('daml.visual', execVisual);"
  },
  {
    "id" : "f2dc8d36-d51f-4b2a-bb81-c422b66555f9",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "a87cad63-9ede-4616-b05b-0036d9a45f72",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nfunction visualize() {\r\n```",
        "createdAt" : "2019-08-09T06:48:09Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +98,24 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function execVisual() {"
  },
  {
    "id" : "8b7df92e-2542-4028-9220-f325c6ec9f4d",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "177b9654-6e2b-4cf8-8e10-9fa43786fcc7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        let cmd = \"daml clean && daml build && daml damlc visual .daml/dist/*.dar > visual.dot\"\r\n```\r\nDo you only clean to make sure that there are no old `.dar`files lying around? In that case, I would propose that you complete ignore `.daml/dist` and instead run `daml build -o tempfile && daml damlc visual tempfile > visual.dot`. (There is probably a way to get a proper temp file in JS so don’t actually hardcode `tempfile` here).",
        "createdAt" : "2019-08-09T06:51:32Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd7fcd85-b0e9-4007-a13b-d70445363706",
        "parentId" : "177b9654-6e2b-4cf8-8e10-9fa43786fcc7",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yes to avoid using old dars. I found putting visual.dot file to be ugly, thanks for the suggestion let explore that.",
        "createdAt" : "2019-08-09T14:17:36Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4f598185-1ddd-4388-9861-b3556fef99bf",
        "parentId" : "177b9654-6e2b-4cf8-8e10-9fa43786fcc7",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Fixed this ",
        "createdAt" : "2019-08-09T21:26:34Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +98,24 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function execVisual() {\n+        let cmd = \"daml clean && daml build && daml damlc visual .daml/dist/*dar > visual.dot\""
  },
  {
    "id" : "7a378d8b-5068-42b5-8242-3c78689ce212",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "6fe88468-3c0c-4969-a8c1-65d3b784db27",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe we should only do this if the user has set the `debug` option?",
        "createdAt" : "2019-08-09T06:54:44Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d88ed16e-4018-4da1-b0b9-6c888a703c88",
        "parentId" : "6fe88468-3c0c-4969-a8c1-65d3b784db27",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "I don't think that is necessary now I was using it to debug while trying out a few things. I will get rid of them ",
        "createdAt" : "2019-08-09T14:18:41Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +98,24 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function execVisual() {\n+        let cmd = \"daml clean && daml build && daml damlc visual .daml/dist/*dar > visual.dot\"\n+        let workspaceRoot = vscode.workspace.rootPath;\n+        let execOpts = {cwd: workspaceRoot}\n+\t\tcp.exec(cmd, execOpts, (error, stdout, stderr) => {\n+            console.log('stdout: ' + stdout);"
  },
  {
    "id" : "474e1e72-325e-4ec9-81f5-b20c66288f3e",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "a71d8e8d-dc45-436d-b6f0-477749527823",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The indentation here seems to be a bit messed up (and below as well).",
        "createdAt" : "2019-08-09T06:55:19Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f5a18355-521a-4bd8-9acd-8353774d1bde",
        "parentId" : "a71d8e8d-dc45-436d-b6f0-477749527823",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-08-09T21:26:46Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +98,24 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function execVisual() {\n+        let cmd = \"daml clean && daml build && daml damlc visual .daml/dist/*dar > visual.dot\"\n+        let workspaceRoot = vscode.workspace.rootPath;\n+        let execOpts = {cwd: workspaceRoot}\n+\t\tcp.exec(cmd, execOpts, (error, stdout, stderr) => {"
  },
  {
    "id" : "126c305d-1144-4b89-9052-2090a261bf49",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "73e69fe4-8b96-4534-9a9a-b9af170c2c52",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Putting `visual.dot` directly in the user directory seems somewhat ugly. At the very least it should go in `.daml/visual.dot` or a temp file. But I’m actually not sure why we need that file at all. It looks like we could just capture stdout from `daml damlc visual` in a variable and then use the variant of `openTextDocument` that allows you to specify the content instead of a filepath.",
        "createdAt" : "2019-08-09T06:58:25Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "50c7da93-ace7-44b8-a880-6dc8a7c2f73a",
        "parentId" : "73e69fe4-8b96-4534-9a9a-b9af170c2c52",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Now it does not create a file, it creates an untitled file",
        "createdAt" : "2019-08-09T21:27:17Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +98,24 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function execVisual() {\n+        let cmd = \"daml clean && daml build && daml damlc visual .daml/dist/*dar > visual.dot\"\n+        let workspaceRoot = vscode.workspace.rootPath;\n+        let execOpts = {cwd: workspaceRoot}\n+\t\tcp.exec(cmd, execOpts, (error, stdout, stderr) => {\n+            console.log('stdout: ' + stdout);\n+            console.log('stderr: ' + stderr);\n+            if (!error) {\n+                vscode.window.showInformationMessage(\"Visual successfully generated, install a graphviz plugin to see image\")\n+                vscode.workspace.openTextDocument(vscode.workspace.rootPath +\"/visual.dot\").then( doc =>"
  },
  {
    "id" : "556921de-70d7-4d32-abf0-42609ced7a5f",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "8a0273c6-17cb-4838-b9ac-9eeee3ec49b0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Have you tested this on Windows? I am not sure that combining commands with `&&` works there.",
        "createdAt" : "2019-08-09T07:00:34Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7d3e1a77-8e6b-498c-a4f9-60fe0864de48",
        "parentId" : "8a0273c6-17cb-4838-b9ac-9eeee3ec49b0",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "I have not :(. I am hoping that node cp.exec handles it. Will test it now",
        "createdAt" : "2019-08-09T14:20:41Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a82e1600-54e8-444b-af6b-ba86772eca8c",
        "parentId" : "8a0273c6-17cb-4838-b9ac-9eeee3ec49b0",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "On windows it does not work :( Will have to look at alternatives ",
        "createdAt" : "2019-08-09T16:55:46Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2d62e052-5a8f-46e8-b52b-dc74293ee604",
        "parentId" : "8a0273c6-17cb-4838-b9ac-9eeee3ec49b0",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You could just execute the individual command separately instead if chaining them with &&. The stdout redirection probably still won't work but you can just capture stdout in a variable like I suggested",
        "createdAt" : "2019-08-09T16:57:53Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1259d3bc-ccce-4c10-be53-dbe24dcbee84",
        "parentId" : "8a0273c6-17cb-4838-b9ac-9eeee3ec49b0",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Broke this up to multiple commands and works on windows too. About the TMP file, I am having an issue with getting the dependency and shipped with vsix ",
        "createdAt" : "2019-08-09T21:30:17Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "183fd769-91f1-4774-9ac9-5425d6b0a0a4",
        "parentId" : "8a0273c6-17cb-4838-b9ac-9eeee3ec49b0",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "No more tmp files.  now all of the tmp files will be cleaned.",
        "createdAt" : "2019-08-11T13:40:23Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +98,24 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function execVisual() {\n+        let cmd = \"daml clean && daml build && daml damlc visual .daml/dist/*dar > visual.dot\""
  },
  {
    "id" : "7643872d-c71d-4100-82df-b3b181a8834b",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "521df723-0515-4815-a8da-9e6a93ad012c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n                vscode.window.showErrorMessage(\"Error generating visualization\" + taskName + error)\r\n```",
        "createdAt" : "2019-08-12T06:51:57Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +99,43 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function exec(command: string, options: cp.ExecOptions, taskName: String): Promise<{ stdout: string; stderr: string }> {\n+    return new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {\n+        cp.exec(command, options, (error, stdout, stderr) => {\n+            if (error) {\n+                reject({ error, stdout, stderr });\n+                vscode.window.showErrorMessage(\"Error Generating visual\" + taskName + error)"
  },
  {
    "id" : "6d171a19-ada5-47dc-8414-32004a6d1bf4",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "87416acf-058a-4250-a2be-73cc79665e09",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    tmp.file((err, path) => {\r\n```\r\nWe already use arrow functions elsewhere so we imght as well use them here.",
        "createdAt" : "2019-08-12T06:53:09Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5476b04b-a4cb-455c-8e19-785e69c5fef1",
        "parentId" : "87416acf-058a-4250-a2be-73cc79665e09",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Cool",
        "createdAt" : "2019-08-12T13:50:03Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +99,43 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function exec(command: string, options: cp.ExecOptions, taskName: String): Promise<{ stdout: string; stderr: string }> {\n+    return new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {\n+        cp.exec(command, options, (error, stdout, stderr) => {\n+            if (error) {\n+                reject({ error, stdout, stderr });\n+                vscode.window.showErrorMessage(\"Error Generating visual\" + taskName + error)\n+            }\n+            resolve({ stdout, stderr });\n+        });\n+    });\n+}\n+\n+async function visualize() {\n+    tmp.file(function _tempFileCreated(err, path) {"
  },
  {
    "id" : "2a34a992-9816-47ed-a76c-dc03e70ad1d4",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "1773fa8b-073e-4928-8197-3d439ebcd7e7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "When do you expect for this check to fail? Should we emit an error in that case?",
        "createdAt" : "2019-08-12T06:53:44Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8d29aaf3-5cac-482a-b8c3-eef3678bc192",
        "parentId" : "1773fa8b-073e-4928-8197-3d439ebcd7e7",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "This is a bit ugly if there was an error we will display an ErrorMessage box in exec function. I added this to make sure we don't present a user with a black file ",
        "createdAt" : "2019-08-12T13:36:44Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +99,43 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function exec(command: string, options: cp.ExecOptions, taskName: String): Promise<{ stdout: string; stderr: string }> {\n+    return new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {\n+        cp.exec(command, options, (error, stdout, stderr) => {\n+            if (error) {\n+                reject({ error, stdout, stderr });\n+                vscode.window.showErrorMessage(\"Error Generating visual\" + taskName + error)\n+            }\n+            resolve({ stdout, stderr });\n+        });\n+    });\n+}\n+\n+async function visualize() {\n+    tmp.file(function _tempFileCreated(err, path) {\n+        if (err) throw err;\n+        let buildCmd = \"daml build -o \" + path\n+        let visualizeCmd = \"daml damlc visual \" + path\n+        let workspaceRoot = vscode.workspace.rootPath;\n+        let execOpts = { cwd: workspaceRoot }\n+        exec(buildCmd, execOpts, \"Daml Build Command\").then(_ => {\n+            exec(visualizeCmd, execOpts, \"Generating dot file\").then(res => {\n+                if (res.stdout) {"
  },
  {
    "id" : "693357ab-5edc-469f-8747-4f1358089052",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "ca1d8454-9178-4afe-aaa6-98c91fb34f90",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we emit a warning if the extension is not installed?",
        "createdAt" : "2019-08-12T06:54:27Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "617dcd16-5ab3-4eed-b65a-d1073b9a4cd9",
        "parentId" : "ca1d8454-9178-4afe-aaa6-98c91fb34f90",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "As this is something that we don't ship along with vsix bundle an error message would mean we DAML extension would fail, maybe an info message would be better I think. Let me add that ",
        "createdAt" : "2019-08-12T13:39:08Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : 61,
    "diffHunk" : "@@ -97,6 +99,43 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function exec(command: string, options: cp.ExecOptions, taskName: String): Promise<{ stdout: string; stderr: string }> {\n+    return new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {\n+        cp.exec(command, options, (error, stdout, stderr) => {\n+            if (error) {\n+                reject({ error, stdout, stderr });\n+                vscode.window.showErrorMessage(\"Error Generating visual\" + taskName + error)\n+            }\n+            resolve({ stdout, stderr });\n+        });\n+    });\n+}\n+\n+async function visualize() {\n+    tmp.file(function _tempFileCreated(err, path) {\n+        if (err) throw err;\n+        let buildCmd = \"daml build -o \" + path\n+        let visualizeCmd = \"daml damlc visual \" + path\n+        let workspaceRoot = vscode.workspace.rootPath;\n+        let execOpts = { cwd: workspaceRoot }\n+        exec(buildCmd, execOpts, \"Daml Build Command\").then(_ => {\n+            exec(visualizeCmd, execOpts, \"Generating dot file\").then(res => {\n+                if (res.stdout) {\n+                    vscode.workspace.openTextDocument({ content: res.stdout, language: \"dot\" }).then(doc =>\n+                        vscode.window.showTextDocument(doc, vscode.ViewColumn.One, true).then(_ => loadPreviewIfAvailable())\n+                    )\n+                }\n+            })\n+        });\n+    });\n+}\n+\n+function loadPreviewIfAvailable() {\n+    if (vscode.extensions.getExtension(\"EFanZh.graphviz-preview\")) {\n+        vscode.commands.executeCommand(\"graphviz.showPreviewToSide\")"
  },
  {
    "id" : "dabfcb14-0950-4591-af32-265ddd101f57",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "9a1a196e-49ff-42e5-bbf0-4519a08c5e9a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Will we ever reach the error? I would have expected that the `reject` means that we never get there.",
        "createdAt" : "2019-08-12T06:57:08Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1dfdc389-bbdd-4ed0-861d-ec70bb326b08",
        "parentId" : "9a1a196e-49ff-42e5-bbf0-4519a08c5e9a",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yes, we do reach here when there is some error within daml build fails. I don't know details of how to `reject` works, but I have seen this being displayed to the user ",
        "createdAt" : "2019-08-12T13:44:37Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "983bbe3a-0848-42c9-97f9-d83fadc2edac",
        "parentId" : "9a1a196e-49ff-42e5-bbf0-4519a08c5e9a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "TIL! Apparently the code after the `reject` does get executed.",
        "createdAt" : "2019-08-12T14:04:28Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +99,43 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function exec(command: string, options: cp.ExecOptions, taskName: String): Promise<{ stdout: string; stderr: string }> {\n+    return new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {\n+        cp.exec(command, options, (error, stdout, stderr) => {\n+            if (error) {\n+                reject({ error, stdout, stderr });\n+                vscode.window.showErrorMessage(\"Error Generating visual\" + taskName + error)"
  },
  {
    "id" : "dcec9d9d-aae3-4516-ac0a-609e12b3dd74",
    "prId" : 2467,
    "comments" : [
      {
        "id" : "9da8c8fd-1f84-46e0-ad5f-220685d9f742",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The docs for the [Child Process](https://nodejs.org/api/child_process.html) module suggest to use\r\n```\r\nconst util = require('util');\r\nconst exec = util.promisify(require('child_process').exec);\r\n```\r\nto turn this into a promise. Might be a bit simpler than doing this ourselves.",
        "createdAt" : "2019-08-12T06:58:04Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e13bbbf5-2a38-4e06-9af8-d7dcc8c1f4d5",
        "parentId" : "9da8c8fd-1f84-46e0-ad5f-220685d9f742",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Cool, that sounds good made that change",
        "createdAt" : "2019-08-12T15:50:41Z",
        "updatedAt" : "2019-08-12T16:13:13Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6626f5f676315d973c8f71b406b9098d45b28aec",
    "line" : null,
    "diffHunk" : "@@ -97,6 +99,43 @@ function getViewColumnForShowResource(): ViewColumn {\n     }\n }\n \n+function exec(command: string, options: cp.ExecOptions, taskName: String): Promise<{ stdout: string; stderr: string }> {\n+    return new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {"
  },
  {
    "id" : "df99ab68-729c-4044-8bb7-5b0f94ff8a17",
    "prId" : 2141,
    "comments" : [
      {
        "id" : "b997dcc8-5fb1-4ec2-96ee-b3665bd1b975",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think you need to send this. Setting the `html` should reset web panel completely.",
        "createdAt" : "2019-07-15T11:14:41Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59f3966e-119a-49e2-a094-bde32fbb6ca2",
        "parentId" : "b997dcc8-5fb1-4ec2-96ee-b3665bd1b975",
        "author" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "body" : "This is what I started with, but notes were not cleared on `setContent`. It turned out to be caching mechanism, which was not reloading the page on consecutive `setContent` with the same input (as notes are added in JS) even though the DOM has changed in the meantime. Finally I removed this explicit notes clearing in favour of appending an HTML comment /w timestamp to the HTML content set in the `setContent`, so that this callback always performs a refresh.",
        "createdAt" : "2019-07-15T14:55:01Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "07933f81-0344-4247-9055-9e9fc050d836",
        "parentId" : "b997dcc8-5fb1-4ec2-96ee-b3665bd1b975",
        "author" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "body" : "https://github.com/digital-asset/daml/pull/2141/files#diff-dcb66422b3cf60ef53cbc28d1bd8cd01R342",
        "createdAt" : "2019-07-15T15:01:48Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "majcherm-da",
          "name" : "Michał Majcherski",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/43614029?u=8320ef35eb6289112c9c95df3e483f322c9aa60e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e39e7c13-498c-4adf-8b34-80c1ecea19b3",
        "parentId" : "b997dcc8-5fb1-4ec2-96ee-b3665bd1b975",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks for the explanation!",
        "createdAt" : "2019-07-22T07:05:21Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0daa7be342dc63694da9cd5a53a357e8c4fbb3af",
    "line" : null,
    "diffHunk" : "@@ -320,13 +339,21 @@ class VirtualResourceManager {\n         const panel = this._panels.get(uri);\n         if (panel) {\n             panel.webview.html = contents;\n+            panel.webview.postMessage({command: 'del_note'});"
  }
]