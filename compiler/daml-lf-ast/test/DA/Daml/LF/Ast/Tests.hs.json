[
  {
    "id" : "66e8a20a-78d7-4e30-a153-0f2b7782e71b",
    "prId" : 4027,
    "comments" : [
      {
        "id" : "f5c39770-0e87-429a-a6f7-6cb81a2acff6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What is this about?",
        "createdAt" : "2020-01-13T17:38:09Z",
        "updatedAt" : "2020-01-14T09:23:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "194b07d7-1e4d-4157-9871-52bab4b6ad61",
        "parentId" : "f5c39770-0e87-429a-a6f7-6cb81a2acff6",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Adding a lone `let` prevents HLint complaining about the unnecessary parens, which were added in the testcase to improve layout. But I removed these parens now.\r\n",
        "createdAt" : "2020-01-14T09:30:11Z",
        "updatedAt" : "2020-01-14T09:30:11Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "64ae5ad1-06f8-4946-8b42-bb8c457d698f",
        "parentId" : "f5c39770-0e87-429a-a6f7-6cb81a2acff6",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "thanks!",
        "createdAt" : "2020-01-14T09:32:29Z",
        "updatedAt" : "2020-01-14T09:32:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0c6a90f2f5823fd6ceaea0ea9defed41c0957ee9",
    "line" : null,
    "diffHunk" : "@@ -63,6 +64,17 @@ substitutionTests = testGroup \"substitution\"\n                 TBuiltin BTArrow `TApp` vBeta11 `TApp` vBeta1\n             ty2 = substitute subst ty1\n         assertBool \"wrong substitution\" (alphaEquiv ty1 ty2)\n+\n+    , testCase \"freeVars/TypeLevelNat\" $ do\n+        let -- no thank you HLint"
  },
  {
    "id" : "4a382f7f-acdc-4ff3-b811-d172f65c3302",
    "prId" : 3959,
    "comments" : [
      {
        "id" : "cc89623c-82e4-4d39-8734-8d5b497cb121",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It would be great if you could add one slightly bigger testcase that tests code a module that is more of the form that we will want to generate, e.g., a single module that defines type synonyms for `Functor` and `Applicative`, instances for one type and a definition that has an `Applicative` constraint. Don’t worry about exactly capturing how the generated code will look like.",
        "createdAt" : "2020-01-09T19:16:49Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5b81026a-8e38-4318-90bb-c84ee457ff59",
        "parentId" : "cc89623c-82e4-4d39-8734-8d5b497cb121",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Not sure exactly what you want to see in this bigger example.\r\nAnd what are we attempting to test, that isn't already tested?\r\n",
        "createdAt" : "2020-01-10T09:25:30Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f1365ab5-c30a-49b1-a045-7dc514349387",
        "parentId" : "cc89623c-82e4-4d39-8734-8d5b497cb121",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "something like the following (in pseudocode)\r\n\r\n```\r\ntype Functor f = [(\"fmap\", forall a b. (a -> b) -> f a -> f b)]\r\ntype Applicative f = [(\"super\", Functor f), (\"pure\", forall a. a -> f a), (\"<*>\", forall a b. f (a -> b) -> f b -> f a)]\r\noptFunctor : Functor Optional\r\noptFunctor = …\r\noptApplicative : Applicative Optional\r\noptApplicative = …\r\nf : Applicative f -> a -> f a\r\nf apDict = structProj \"pure\" apDict\r\n```\r\n\r\nWe probably do test the individual pieces already but having a test that puts it altogether is helpful both for documentation purposes and to make sure that we didn’t forget anything.",
        "createdAt" : "2020-01-10T09:33:01Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f4843189-ce59-4f7a-a0ed-f6d953dc0d79",
        "parentId" : "cc89623c-82e4-4d39-8734-8d5b497cb121",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "bigger example added",
        "createdAt" : "2020-01-10T16:10:25Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7e498a25-36ad-4b06-83a5-f8b7823a44b2",
        "parentId" : "cc89623c-82e4-4d39-8734-8d5b497cb121",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "it found two bugs, so thanks for asking for it",
        "createdAt" : "2020-01-10T16:10:58Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed149102-3b56-4798-9ef3-4dc3a3abe569",
        "parentId" : "cc89623c-82e4-4d39-8734-8d5b497cb121",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks a lot for adding it! It would be great if you could expand it to include the superclass case, i.e., `Applicative` (or `Pointed` or whatever) just to make sure there are no unforeseen issues there either.",
        "createdAt" : "2020-01-10T16:18:14Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1326446f-a883-455f-9d18-d73543c30232",
        "parentId" : "cc89623c-82e4-4d39-8734-8d5b497cb121",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, done",
        "createdAt" : "2020-01-10T16:43:17Z",
        "updatedAt" : "2020-01-10T16:43:18Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6a9feaae0a6921e3c04c93a65e754eca04cc83df",
    "line" : 37,
    "diffHunk" : "@@ -59,3 +69,166 @@ substitutionTests = testGroup \"substitution\"\n     beta11 = TypeVarName \"beta11\"\n     vBeta1 = TVar beta1\n     vBeta11 = TVar beta11\n+\n+\n+typeSynTests :: TestTree"
  }
]