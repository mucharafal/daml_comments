[
  {
    "id" : "fa70f202-5c45-4de3-8489-e45ed3db91dd",
    "prId" : 5472,
    "comments" : [
      {
        "id" : "8546ce33-df16-4bad-91e3-6918082dc129",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't think this is a good idea. Why did you change this?",
        "createdAt" : "2020-05-19T16:00:26Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ebb7ac99-f067-4cf9-8c9b-9a0fb6b708d5",
        "parentId" : "8546ce33-df16-4bad-91e3-6918082dc129",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Actually, this is fine. I cannot read and thought we were changing a DAML file here, which we obviously aren't. So it's all good. Apologies for the confusion I caused.",
        "createdAt" : "2020-05-19T16:17:32Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 5,
    "diffHunk" : "@@ -3,7 +3,7 @@\n \n -- | DAML-LF Numeric literals, with scale attached.\n module DA.Daml.LF.Ast.Numeric\n-    ( Numeric\n+    ( Numeric (..)"
  },
  {
    "id" : "9fe47528-e230-438b-a33d-b319c564e009",
    "prId" : 2706,
    "comments" : [
      {
        "id" : "add31f05-9c1b-484d-8be9-3e6d2f045a2e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`instance` isnâ€™t a typeclass instance right? I guess you mean a value of type `Numeric`?",
        "createdAt" : "2019-08-30T07:03:28Z",
        "updatedAt" : "2019-08-30T08:05:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c9adf9b7-4942-4141-86d6-5c70f022b9d8",
        "parentId" : "add31f05-9c1b-484d-8be9-3e6d2f045a2e",
        "author" : null,
        "body" : "Nice catch! :)",
        "createdAt" : "2019-08-30T07:59:05Z",
        "updatedAt" : "2019-08-30T08:05:59Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "513c13d565752ab84a0a5966b81080401d488452",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | DAML-LF Numeric literals, with scale attached.\n+module DA.Daml.LF.Ast.Numeric\n+    ( Numeric\n+    , numeric\n+    , numericScale\n+    , numericMaxScale\n+    ) where\n+\n+import Control.DeepSeq\n+import Control.Monad\n+import Data.Data\n+import Data.Decimal\n+import Data.Maybe\n+import GHC.Generics (Generic)\n+import Numeric.Natural\n+\n+-- | Numeric literal. This must encode both the mantissa (up to 38 digits) and\n+-- the scale (0-37), the latter controlling how many digits appear after the\n+-- decimal point. Furthermore, when reading or writing a numeric instance,"
  },
  {
    "id" : "cd7cee20-7494-48d0-b7aa-da21a128125e",
    "prId" : 2706,
    "comments" : [
      {
        "id" : "424b78a2-fcca-475f-92dc-6caf35eed4e5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks for the great explanations!",
        "createdAt" : "2019-08-30T07:08:03Z",
        "updatedAt" : "2019-08-30T08:05:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "513c13d565752ab84a0a5966b81080401d488452",
    "line" : 32,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | DAML-LF Numeric literals, with scale attached.\n+module DA.Daml.LF.Ast.Numeric\n+    ( Numeric\n+    , numeric\n+    , numericScale\n+    , numericMaxScale\n+    ) where\n+\n+import Control.DeepSeq\n+import Control.Monad\n+import Data.Data\n+import Data.Decimal\n+import Data.Maybe\n+import GHC.Generics (Generic)\n+import Numeric.Natural\n+\n+-- | Numeric literal. This must encode both the mantissa (up to 38 digits) and\n+-- the scale (0-37), the latter controlling how many digits appear after the\n+-- decimal point. Furthermore, when reading or writing a numeric instance,\n+-- we need to show every significant digit after the decimal point, in order\n+-- to preserve the scale. For scale 0, the decimal point needs to be shown\n+-- without a digit.\n+--\n+-- Internally we use Data.Decimal to represent these because it has the ability\n+-- to encode every Numeric alongside its scale, and it mostly does what we want\n+-- with Show and Read, with a few adjustments:\n+--\n+-- * we perform bounds checks with smart constructor 'numeric'\n+-- * for scale 0, we have to handle the decimal point in the Show"
  },
  {
    "id" : "14eba42c-5acc-48d0-9e81-e5778bce73f8",
    "prId" : 2706,
    "comments" : [
      {
        "id" : "c99eb79f-3644-4cce-b456-170dcbf3b71b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe this is a silly question but does DAML compilation rely on the `Show` and `Read` instances or is this just for tests/experimentation?",
        "createdAt" : "2019-08-30T07:09:40Z",
        "updatedAt" : "2019-08-30T08:05:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c0fba321-78d9-4e1c-8367-4af1d7ab4231",
        "parentId" : "c99eb79f-3644-4cce-b456-170dcbf3b71b",
        "author" : null,
        "body" : "They're used in the encoding and decoding of decimal/numeric literals in daml-lf-proto, and in the Pretty instance. Not sure how critical, but I don't want to be introducing weird behavior there :-) ",
        "createdAt" : "2019-08-30T07:57:40Z",
        "updatedAt" : "2019-08-30T08:05:59Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "bd946586-ab74-41c0-a4e6-002f0ffc26cb",
        "parentId" : "c99eb79f-3644-4cce-b456-170dcbf3b71b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah I see, totally agree that we should get this right.",
        "createdAt" : "2019-08-30T07:58:51Z",
        "updatedAt" : "2019-08-30T08:05:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "513c13d565752ab84a0a5966b81080401d488452",
    "line" : 74,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | DAML-LF Numeric literals, with scale attached.\n+module DA.Daml.LF.Ast.Numeric\n+    ( Numeric\n+    , numeric\n+    , numericScale\n+    , numericMaxScale\n+    ) where\n+\n+import Control.DeepSeq\n+import Control.Monad\n+import Data.Data\n+import Data.Decimal\n+import Data.Maybe\n+import GHC.Generics (Generic)\n+import Numeric.Natural\n+\n+-- | Numeric literal. This must encode both the mantissa (up to 38 digits) and\n+-- the scale (0-37), the latter controlling how many digits appear after the\n+-- decimal point. Furthermore, when reading or writing a numeric instance,\n+-- we need to show every significant digit after the decimal point, in order\n+-- to preserve the scale. For scale 0, the decimal point needs to be shown\n+-- without a digit.\n+--\n+-- Internally we use Data.Decimal to represent these because it has the ability\n+-- to encode every Numeric alongside its scale, and it mostly does what we want\n+-- with Show and Read, with a few adjustments:\n+--\n+-- * we perform bounds checks with smart constructor 'numeric'\n+-- * for scale 0, we have to handle the decimal point in the Show\n+--   and Read instances manually\n+-- * when reading, we check numeric bounds for scale and mantissa\n+-- * we add Data, NFData, Generic instances\n+-- * we don't add Num instances (for now anyway)\n+--\n+newtype Numeric = Numeric { numericDecimal :: Decimal }\n+  deriving (Eq, Ord, Generic)\n+\n+-- | Smart constructor for Numeric literals.\n+numeric :: Natural -> Integer -> Numeric\n+numeric s m\n+    | s > numericMaxScale = error \"numeric error: scale too large\"\n+    | m > numericMaxMantissa = error \"numeric error: mantissa too large\"\n+    | otherwise = Numeric $ Decimal (fromIntegral s) m\n+\n+-- | Upper bound for numeric scale (inclusive).\n+numericMaxScale :: Natural\n+numericMaxScale = 37\n+\n+-- | Upper bound for numeric mantissa (inclusive).\n+numericMaxMantissa :: Integer\n+numericMaxMantissa = 10^(38::Int)-1\n+\n+-- | Get scale associated with numeric literal. This is the\n+-- number of decimal places after the decimal point. Ranges\n+-- between 0 and 'numericMaxScale' (inclusive).\n+numericScale :: Numeric -> Natural\n+numericScale = fromIntegral . decimalPlaces . numericDecimal\n+\n+-- | Get mantissa associated with numeric literal. This is\n+-- the raw integer value of the numeric before adding the\n+-- decimal point. Ranges between 0 and 'numericMaxMantissa'\n+-- (inclusive).\n+numericMantissa :: Numeric -> Integer\n+numericMantissa = decimalMantissa . numericDecimal\n+\n+instance Show Numeric where\n+    showsPrec p n\n+        | numericScale n == 0 = shows (numericDecimal n) . (\".\" ++)\n+        | otherwise = showsPrec p (numericDecimal n)\n+\n+instance Read Numeric where"
  },
  {
    "id" : "265ed603-aad8-4f0d-9239-360bf0f03455",
    "prId" : 2706,
    "comments" : [
      {
        "id" : "6be051fb-361b-46e9-8f2b-bfd31b7f0bd6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Might be reasonable to propose the instance upstream.",
        "createdAt" : "2019-08-30T07:18:28Z",
        "updatedAt" : "2019-08-30T08:05:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "08aae858-496f-4fd6-92c1-19e00c0937bf",
        "parentId" : "6be051fb-361b-46e9-8f2b-bfd31b7f0bd6",
        "author" : null,
        "body" : "Yes, that's a good idea :)",
        "createdAt" : "2019-08-30T08:14:39Z",
        "updatedAt" : "2019-08-30T08:14:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "513c13d565752ab84a0a5966b81080401d488452",
    "line" : 93,
    "diffHunk" : "@@ -0,0 +1,105 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | DAML-LF Numeric literals, with scale attached.\n+module DA.Daml.LF.Ast.Numeric\n+    ( Numeric\n+    , numeric\n+    , numericScale\n+    , numericMaxScale\n+    ) where\n+\n+import Control.DeepSeq\n+import Control.Monad\n+import Data.Data\n+import Data.Decimal\n+import Data.Maybe\n+import GHC.Generics (Generic)\n+import Numeric.Natural\n+\n+-- | Numeric literal. This must encode both the mantissa (up to 38 digits) and\n+-- the scale (0-37), the latter controlling how many digits appear after the\n+-- decimal point. Furthermore, when reading or writing a numeric instance,\n+-- we need to show every significant digit after the decimal point, in order\n+-- to preserve the scale. For scale 0, the decimal point needs to be shown\n+-- without a digit.\n+--\n+-- Internally we use Data.Decimal to represent these because it has the ability\n+-- to encode every Numeric alongside its scale, and it mostly does what we want\n+-- with Show and Read, with a few adjustments:\n+--\n+-- * we perform bounds checks with smart constructor 'numeric'\n+-- * for scale 0, we have to handle the decimal point in the Show\n+--   and Read instances manually\n+-- * when reading, we check numeric bounds for scale and mantissa\n+-- * we add Data, NFData, Generic instances\n+-- * we don't add Num instances (for now anyway)\n+--\n+newtype Numeric = Numeric { numericDecimal :: Decimal }\n+  deriving (Eq, Ord, Generic)\n+\n+-- | Smart constructor for Numeric literals.\n+numeric :: Natural -> Integer -> Numeric\n+numeric s m\n+    | s > numericMaxScale = error \"numeric error: scale too large\"\n+    | m > numericMaxMantissa = error \"numeric error: mantissa too large\"\n+    | otherwise = Numeric $ Decimal (fromIntegral s) m\n+\n+-- | Upper bound for numeric scale (inclusive).\n+numericMaxScale :: Natural\n+numericMaxScale = 37\n+\n+-- | Upper bound for numeric mantissa (inclusive).\n+numericMaxMantissa :: Integer\n+numericMaxMantissa = 10^(38::Int)-1\n+\n+-- | Get scale associated with numeric literal. This is the\n+-- number of decimal places after the decimal point. Ranges\n+-- between 0 and 'numericMaxScale' (inclusive).\n+numericScale :: Numeric -> Natural\n+numericScale = fromIntegral . decimalPlaces . numericDecimal\n+\n+-- | Get mantissa associated with numeric literal. This is\n+-- the raw integer value of the numeric before adding the\n+-- decimal point. Ranges between 0 and 'numericMaxMantissa'\n+-- (inclusive).\n+numericMantissa :: Numeric -> Integer\n+numericMantissa = decimalMantissa . numericDecimal\n+\n+instance Show Numeric where\n+    showsPrec p n\n+        | numericScale n == 0 = shows (numericDecimal n) . (\".\" ++)\n+        | otherwise = showsPrec p (numericDecimal n)\n+\n+instance Read Numeric where\n+    readsPrec p = mapMaybe postProcess . readsPrec p\n+      where\n+        postProcess :: (Decimal, String) -> Maybe (Numeric, String)\n+        postProcess (d, xs) = do\n+            let n = Numeric d\n+            guard (numericValid n)\n+            if numericScale n > 0 then\n+                Just (n, xs)\n+            else -- for scale == 0, we have to take the decimal point manually\n+                case xs of\n+                    '.':ys -> Just (n, ys)\n+                    _ -> Nothing\n+\n+        numericValid :: Numeric -> Bool\n+        numericValid n =\n+            numericScale n <= numericMaxScale\n+            && numericMantissa n <= numericMaxMantissa\n+\n+instance Data Numeric where"
  }
]