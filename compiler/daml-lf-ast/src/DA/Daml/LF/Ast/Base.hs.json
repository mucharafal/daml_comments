[
  {
    "id" : "6a53930e-5c92-4670-868d-0fee5a90a8c3",
    "prId" : 7663,
    "comments" : [
      {
        "id" : "b6c95b39-f0c3-436a-983b-a287f75ff483",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  -- | Exercise choice on a contract given by contract id.\r\n```",
        "createdAt" : "2020-10-13T10:35:51Z",
        "updatedAt" : "2020-10-14T07:40:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e1bb99f2dfdce776c237675705d34d396135b71c",
    "line" : null,
    "diffHunk" : "@@ -581,7 +581,7 @@ data Update\n     , creArg      :: !Expr\n       -- ^ Argument for the contract template.\n     }\n-  -- | Exercise choice on a cotract template instance.\n+  -- | Exercise choice on a contract template instance."
  },
  {
    "id" : "713c563d-7700-4b8f-8499-c59523588f3d",
    "prId" : 7663,
    "comments" : [
      {
        "id" : "1b7966db-438b-4e88-baf4-6295b3e70b5a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  -- | Exercise a choice on a contract by key.\r\n```",
        "createdAt" : "2020-10-13T10:36:04Z",
        "updatedAt" : "2020-10-14T07:40:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e1bb99f2dfdce776c237675705d34d396135b71c",
    "line" : null,
    "diffHunk" : "@@ -594,6 +594,17 @@ data Update\n     , exeArg        :: !Expr\n       -- ^ Argument for the choice.\n     }\n+  -- | Exercise by key a choice on a contract template instance."
  },
  {
    "id" : "3c9fc2ae-6925-4df0-a177-1923a3f21942",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "94ed7e0c-38c6-4d95-ad96-33f9870615c4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We need to make this optional to enable the DAML-LF type checker to check that we only use choice observers when the DAML-LF version supports them. Wherever you've defaulted to `ENil TParty` now, we need to default to `Nothing` then.\r\n```suggestion\r\n  , chcObservers :: !(Maybe Expr)\r\n```",
        "createdAt" : "2020-10-14T10:47:56Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -799,6 +799,8 @@ data TemplateChoice = TemplateChoice\n   , chcControllers :: !Expr\n     -- ^ The controllers of the choice. They have type @List Party@ and the\n     -- template parameter in scope, and (since 1.2) also the choice parameter.\n+  , chcObservers :: !Expr"
  },
  {
    "id" : "e0652613-e8ba-47ea-ac72-0beb958e6dc8",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "a54a9c7c-47fa-4474-b1a9-fb9f65e90e2e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    -- ^ The observers of the choice. When they are present, they have type @List Party@.\r\n```",
        "createdAt" : "2020-10-15T11:40:24Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -810,6 +810,8 @@ data TemplateChoice = TemplateChoice\n   , chcControllers :: !Expr\n     -- ^ The controllers of the choice. They have type @List Party@ and the\n     -- template parameter in scope, and (since 1.2) also the choice parameter.\n+  , chcObservers :: !(Maybe Expr)\n+    -- ^ The controllers of the choice. They have type @List Party@"
  },
  {
    "id" : "f0f74705-9e1a-4e57-b4c7-e36af4c5069d",
    "prId" : 4616,
    "comments" : [
      {
        "id" : "cf712597-615f-414e-b695-1080c5c6769f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We could make this something more structured but at least on the protobuf side, Iâ€™d like to keep it a text to make it easier to extend it to semver or whatever in the future and for now, keeping it a `Text` seems fine on the Haskell side (and we can change that whenever we want to).",
        "createdAt" : "2020-02-20T09:57:53Z",
        "updatedAt" : "2020-02-20T11:28:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9f1fb74887df8292873e1d6f27279d6e6dea53d8",
    "line" : 14,
    "diffHunk" : "@@ -107,6 +107,20 @@ newtype PartyLiteral = PartyLiteral{unPartyLiteral :: T.Text}\n     deriving stock (Eq, Data, Generic, Ord, Show)\n     deriving newtype (Hashable, NFData)\n \n+-- | Human-readable name of a package. Must match the regex\n+--\n+-- > [a-zA-Z0-9_-]+\n+newtype PackageName = PackageName{unPackageName :: T.Text}\n+    deriving stock (Eq, Data, Generic, Ord, Show)\n+    deriving newtype (Hashable, NFData)\n+\n+-- | Human-readable version of a package. Must match the regex\n+--\n+-- > [0-9]+(\\.[0-9]+)*\n+newtype PackageVersion = PackageVersion{unPackageVersion :: T.Text}"
  },
  {
    "id" : "b0106dc7-d2b7-45aa-b89a-6ab08f8f839c",
    "prId" : 3959,
    "comments" : [
      {
        "id" : "eaae10a9-b5e3-4033-aa2c-cf1b6f066aa6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  -- | Fully-applied type synonym\r\n```",
        "createdAt" : "2020-01-09T19:01:24Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3d1dcf36-86f1-48ee-bde0-824cc9cb3782",
        "parentId" : "eaae10a9-b5e3-4033-aa2c-cf1b6f066aa6",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-01-10T08:59:08Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6a9feaae0a6921e3c04c93a65e754eca04cc83df",
    "line" : null,
    "diffHunk" : "@@ -171,9 +171,9 @@ data Type\n   -- | Reference to a type variable.\n   = TVar        !TypeVarName\n   -- | Reference to a type constructor.\n-  | TSyn        !(Qualified TypeSynName)\n-  -- | Application of a type function to a type.\n   | TCon        !(Qualified TypeConName)\n+  -- | Application of a type synonym to its arguments."
  },
  {
    "id" : "a16140b5-d13c-4938-8f30-2699fd456f15",
    "prId" : 3589,
    "comments" : [
      {
        "id" : "5e4dad1b-fbd2-41b4-8fbc-e62b7472826e",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n  -- Decimal arithmetic\r\n```",
        "createdAt" : "2019-11-22T16:22:21Z",
        "updatedAt" : "2019-11-25T11:44:14Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a84f590b351ebece449308a443df333eb4b8de57",
    "line" : null,
    "diffHunk" : "@@ -215,8 +215,8 @@ data BuiltinExpr\n   | BEGreater    !BuiltinType    -- :: t -> t -> Bool, where t is the builtin type\n   | BEToText     !BuiltinType    -- :: t -> Text, where t is one of the builtin types\n                                  -- {Int64, Decimal, Text, Timestamp, Date, Party}\n-\n-  -- Decimal arithmetic\n+                                 \n+  -- Decimal arithmetic          "
  },
  {
    "id" : "2967231e-36ed-43f1-97c0-cf06a15864a1",
    "prId" : 3085,
    "comments" : [
      {
        "id" : "069d73d8-d810-4094-a639-ba9a1c159624",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You changed the types here. Do we need to update the spec or is the spec already ahead of this?",
        "createdAt" : "2019-10-02T13:26:38Z",
        "updatedAt" : "2019-10-02T13:29:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7763e990-4f85-40c7-82bd-2c67ec611d76",
        "parentId" : "069d73d8-d810-4094-a639-ba9a1c159624",
        "author" : null,
        "body" : "The comment was out of date, the spec & typechecker were correct here.",
        "createdAt" : "2019-10-02T13:34:14Z",
        "updatedAt" : "2019-10-02T13:34:14Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "f9631283dd43576f6c41d5712f5867927ac1fabc",
    "line" : 7,
    "diffHunk" : "@@ -230,9 +230,11 @@ data BuiltinExpr\n   | BEToTextNumeric              -- :: âˆ€(s:nat). Numeric s -> Text\n   | BEAddNumeric                 -- :: âˆ€(s:nat). Numeric s -> Numeric s -> Numeric s, crashes on overflow\n   | BESubNumeric                 -- :: âˆ€(s:nat). Numeric s -> Numeric s -> Numeric s, crashes on overflow\n-  | BEMulNumeric                 -- :: âˆ€(s:nat). Numeric s -> Numeric s -> Numeric s, crashes on overflow and underflow, automatically rounds to even (see <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>)\n-  | BEDivNumeric                 -- :: âˆ€(s:nat). Numeric s -> Numeric s -> Numeric s, automatically rounds to even, crashes on divisor = 0 and on overflow\n-  | BERoundNumeric              -- :: âˆ€(s:nat). Int64 -> Numeric s -> Numeric s, the Int64 is the required scale. Note that this doesn't modify the scale of the type itself, it just zeroes things outside that scale out. Can be negative. Crashes if the scale is > 10 or < -27.\n+  | BEMulNumeric                 -- :: âˆ€(s1:nat). âˆ€(s2:nat). âˆ€(s3:nat). Numeric s1 -> Numeric s2 -> Numeric s3, crashes on overflow and underflow, automatically rounds to even (see <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>)"
  },
  {
    "id" : "377f8dc9-3b3c-47de-a68e-7a9c15746027",
    "prId" : 2670,
    "comments" : [
      {
        "id" : "e41afa23-42f1-4a14-a845-0bf781be02db",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It crashes indeed. This is different from the Decimal version where the result always fit.\r\nyou can always double check in the [spec](https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst#conversions-functions)",
        "createdAt" : "2019-08-27T17:49:46Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2900d7cd2fd33fbf5de9881afed0fec07bff1f",
    "line" : 65,
    "diffHunk" : "@@ -228,6 +247,8 @@ data BuiltinExpr\n   -- Numerical conversion\n   | BEInt64ToDecimal           -- :: Int64 -> Decimal, always succeeds since 10^28 > 2^63\n   | BEDecimalToInt64           -- :: Decimal -> Int64, only converts the whole part, crashes if it doesn't fit\n+  | BEInt64ToNumeric           -- :: âˆ€(s:nat). Int64 -> Numeric s, crashes if it doesn't fit (TODO: verify?)"
  },
  {
    "id" : "e2334824-4ed8-4a50-9a68-93b036c71435",
    "prId" : 2670,
    "comments" : [
      {
        "id" : "3d916d72-b235-4441-a2cf-120d114a69cf",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we require the fractional part to be zero?",
        "createdAt" : "2019-08-28T09:36:57Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e1b5f865-caf1-4227-bb4b-b0681d1d9021",
        "parentId" : "3d916d72-b235-4441-a2cf-120d114a69cf",
        "author" : null,
        "body" : "The fractional part is truncated, according to the [spec](https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst#conversions-functions).",
        "createdAt" : "2019-08-28T11:25:09Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2900d7cd2fd33fbf5de9881afed0fec07bff1f",
    "line" : 66,
    "diffHunk" : "@@ -228,6 +247,8 @@ data BuiltinExpr\n   -- Numerical conversion\n   | BEInt64ToDecimal           -- :: Int64 -> Decimal, always succeeds since 10^28 > 2^63\n   | BEDecimalToInt64           -- :: Decimal -> Int64, only converts the whole part, crashes if it doesn't fit\n+  | BEInt64ToNumeric           -- :: âˆ€(s:nat). Int64 -> Numeric s, crashes if it doesn't fit (TODO: verify?)\n+  | BENumericToInt64           -- :: âˆ€(s:nat). Numeric s -> Int64, only converts the whole part, crashes if it doesn't fit"
  },
  {
    "id" : "1865cba4-1c7e-49ae-94d0-4e49432c8a2a",
    "prId" : 1054,
    "comments" : [
      {
        "id" : "623f417e-93d4-403c-98a2-6ea66bb03f70",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`DA.Daml.LF.Ast.Util` would be a better home for this function.",
        "createdAt" : "2019-05-09T16:10:33Z",
        "updatedAt" : "2019-05-10T01:44:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "17047be91475eaf590b2ff4e97a4adc76b3ec7b5",
    "line" : 4,
    "diffHunk" : "@@ -45,6 +45,9 @@ type ModuleName = Tagged ModuleNameTag [T.Text]\n data ModuleNameTag\n deriving instance Data ModuleNameTag\n \n+moduleNameString :: ModuleName -> T.Text"
  },
  {
    "id" : "071d739c-2c36-4426-89af-4a3751d8cd92",
    "prId" : 914,
    "comments" : [
      {
        "id" : "21366aac-3576-4b51-89ec-3fa602191132",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nimport qualified \"template-haskell\" Language.Haskell.TH as TH\r\n```",
        "createdAt" : "2019-05-04T16:35:06Z",
        "updatedAt" : "2019-05-04T16:38:49Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "de6c5935884f4d96c87a57454a086b55dd5c4e3b",
    "line" : null,
    "diffHunk" : "@@ -12,13 +12,19 @@ module DA.Daml.LF.Ast.Base(\n     module DA.Daml.LF.Ast.Base\n     ) where\n \n-import DA.Prelude\n-\n+import Data.Hashable\n+import Data.Data\n+import Data.Tagged\n+import GHC.Generics(Generic)\n+import Data.Int\n import           Control.DeepSeq\n import           Control.Lens\n import qualified Data.NameMap as NM\n import qualified Data.Text          as T\n import Data.Fixed\n+import qualified \"template-haskell\" Language.Haskell.TH        as TH"
  },
  {
    "id" : "5c34a118-13ea-42d7-a93b-9f67a2beb98d",
    "prId" : 914,
    "comments" : [
      {
        "id" : "e1216ebe-5c50-4790-aef4-34bb7412945a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nimport qualified Control.Lens.TH as Lens.TH\r\n```",
        "createdAt" : "2019-05-04T16:35:19Z",
        "updatedAt" : "2019-05-04T16:38:49Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "de6c5935884f4d96c87a57454a086b55dd5c4e3b",
    "line" : null,
    "diffHunk" : "@@ -12,13 +12,19 @@ module DA.Daml.LF.Ast.Base(\n     module DA.Daml.LF.Ast.Base\n     ) where\n \n-import DA.Prelude\n-\n+import Data.Hashable\n+import Data.Data\n+import Data.Tagged\n+import GHC.Generics(Generic)\n+import Data.Int\n import           Control.DeepSeq\n import           Control.Lens\n import qualified Data.NameMap as NM\n import qualified Data.Text          as T\n import Data.Fixed\n+import qualified \"template-haskell\" Language.Haskell.TH        as TH\n+import qualified Control.Lens.TH            as Lens.TH"
  }
]