[
  {
    "id" : "e5cd5966-ea81-4c03-8fb9-14dbb3b6a360",
    "prId" : 4616,
    "comments" : [
      {
        "id" : "e33d3818-b078-454e-9384-939315e3a50c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We could make this something more structured but at least on the protobuf side, I’d like to keep it a text to make it easier to extend it to semver or whatever in the future and for now, keeping it a `Text` seems fine on the Haskell side (and we can change that whenever we want to).",
        "createdAt" : "2020-02-20T09:57:53Z",
        "updatedAt" : "2020-02-20T11:28:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9f1fb74887df8292873e1d6f27279d6e6dea53d8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +118,122 @@--\n-- > [0-9]+(\\.[0-9]+)*\nnewtype PackageVersion = PackageVersion{unPackageVersion :: T.Text}\n    deriving stock (Eq, Data, Generic, Ord, Show)\n    deriving newtype (Hashable, NFData)"
  },
  {
    "id" : "f9744758-e434-4ade-acd5-5e36975ef994",
    "prId" : 3085,
    "comments" : [
      {
        "id" : "5c339b4a-0844-48aa-8f48-93802322fad3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You changed the types here. Do we need to update the spec or is the spec already ahead of this?",
        "createdAt" : "2019-10-02T13:26:38Z",
        "updatedAt" : "2019-10-02T13:29:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ad75073c-b1c5-4f91-ba31-f635b3bee2a6",
        "parentId" : "5c339b4a-0844-48aa-8f48-93802322fad3",
        "author" : null,
        "body" : "The comment was out of date, the spec & typechecker were correct here.",
        "createdAt" : "2019-10-02T13:34:14Z",
        "updatedAt" : "2019-10-02T13:34:14Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "f9631283dd43576f6c41d5712f5867927ac1fabc",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +231,235 @@  | BEAddNumeric                 -- :: ∀(s:nat). Numeric s -> Numeric s -> Numeric s, crashes on overflow\n  | BESubNumeric                 -- :: ∀(s:nat). Numeric s -> Numeric s -> Numeric s, crashes on overflow\n  | BEMulNumeric                 -- :: ∀(s1:nat). ∀(s2:nat). ∀(s3:nat). Numeric s1 -> Numeric s2 -> Numeric s3, crashes on overflow and underflow, automatically rounds to even (see <https://en.wikipedia.org/wiki/Rounding#Round_half_to_even>)\n  | BEDivNumeric                 -- :: ∀(s1:nat). ∀(s2:nat). ∀(s3:nat). Numeric s1 -> Numeric s2 -> Numeric s3, automatically rounds to even, crashes on divisor = 0 and on overflow\n  | BERoundNumeric               -- :: ∀(s:nat). Int64 -> Numeric s -> Numeric s, the Int64 is the required scale. Note that this doesn't modify the scale of the type itself, it just zeroes things outside that scale out. Can be negative. Crashes if the scale is > 10 or < -27."
  },
  {
    "id" : "042444eb-caf6-456f-8a1a-2ae61e2efcbf",
    "prId" : 2670,
    "comments" : [
      {
        "id" : "3e422cc4-7ffd-4822-bb06-269d6b0d8e85",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "It crashes indeed. This is different from the Decimal version where the result always fit.\r\nyou can always double check in the [spec](https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst#conversions-functions)",
        "createdAt" : "2019-08-27T17:49:46Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2900d7cd2fd33fbf5de9881afed0fec07bff1f",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +248,252 @@  | BEInt64ToDecimal           -- :: Int64 -> Decimal, always succeeds since 10^28 > 2^63\n  | BEDecimalToInt64           -- :: Decimal -> Int64, only converts the whole part, crashes if it doesn't fit\n  | BEInt64ToNumeric           -- :: ∀(s:nat). Int64 -> Numeric s, crashes if it doesn't fit (TODO: verify?)\n  | BENumericToInt64           -- :: ∀(s:nat). Numeric s -> Int64, only converts the whole part, crashes if it doesn't fit\n"
  },
  {
    "id" : "f79ecabd-359b-4850-bf6e-e62ca8b9f512",
    "prId" : 2670,
    "comments" : [
      {
        "id" : "89f465f5-4f72-4d9d-bd25-93e3d31f56ed",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we require the fractional part to be zero?",
        "createdAt" : "2019-08-28T09:36:57Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e6b40908-30b4-4868-a8dc-1d9c1a2cbc98",
        "parentId" : "89f465f5-4f72-4d9d-bd25-93e3d31f56ed",
        "author" : null,
        "body" : "The fractional part is truncated, according to the [spec](https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst#conversions-functions).",
        "createdAt" : "2019-08-28T11:25:09Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2900d7cd2fd33fbf5de9881afed0fec07bff1f",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +249,253 @@  | BEDecimalToInt64           -- :: Decimal -> Int64, only converts the whole part, crashes if it doesn't fit\n  | BEInt64ToNumeric           -- :: ∀(s:nat). Int64 -> Numeric s, crashes if it doesn't fit (TODO: verify?)\n  | BENumericToInt64           -- :: ∀(s:nat). Numeric s -> Int64, only converts the whole part, crashes if it doesn't fit\n\n  -- Time conversion"
  },
  {
    "id" : "eb0fd0f7-ee74-4361-8314-b2ceaa877fea",
    "prId" : 1054,
    "comments" : [
      {
        "id" : "d30a73b4-c42d-4019-be7a-cecc78489451",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`DA.Daml.LF.Ast.Util` would be a better home for this function.",
        "createdAt" : "2019-05-09T16:10:33Z",
        "updatedAt" : "2019-05-10T01:44:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "17047be91475eaf590b2ff4e97a4adc76b3ec7b5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +46,50 @@deriving instance Data ModuleNameTag\n\nmoduleNameString :: ModuleName -> T.Text\nmoduleNameString = T.intercalate \".\" . unTagged\n"
  }
]