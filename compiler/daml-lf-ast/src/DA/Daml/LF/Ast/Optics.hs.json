[
  {
    "id" : "cb84f35d-41bb-4df4-9249-70322fff2765",
    "prId" : 2327,
    "comments" : [
      {
        "id" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "parentId" : null,
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "@dajmaki Was there any reason for the prior instance? See https://github.com/digital-asset/daml/pull/1996#discussion_r300250409",
        "createdAt" : "2019-07-29T21:28:15Z",
        "updatedAt" : "2019-07-30T19:55:37Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "29d65a3f-ea98-41d3-9955-cbe035eada88",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We use `monoTraverse` to collect all `ModuleRefs` in a module or package in order to figure out its dependencies. Inlining can cause location information to reference the original source file although there's not a proper dependency. Given that we're not using GHC's inliner, I'm not sure we ever hit this case. Even if we do, it shouldn't be too often and not interning here shouldn't do any harm. Thus, I'd prefer if we don't change this and give a better explanation why we don't do it.",
        "createdAt" : "2019-07-30T07:05:38Z",
        "updatedAt" : "2019-07-30T19:55:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8ae0da94-6fbe-46e1-9df6-80a7ff85dc0d",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "It's a little more concerning in the context of LF language 2.x, where we should eliminate the uninterned case of `PackageRef` entirely.",
        "createdAt" : "2019-07-30T19:04:21Z",
        "updatedAt" : "2019-07-30T19:55:37Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b966f9c8-9a05-48a9-8676-a6e51c6b8515",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Not-doing and explanation in 6312b987bf944c7170a9bea396fb5a14c35daf65",
        "createdAt" : "2019-07-30T19:56:01Z",
        "updatedAt" : "2019-07-30T19:56:02Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b4a08f5a-e42b-48e5-9e1f-9c93183f0432",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "cc @cocreature who wondered why they were skipped",
        "createdAt" : "2019-07-30T20:32:53Z",
        "updatedAt" : "2019-07-30T20:32:54Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "475cf649-fd5c-444a-a12b-d4023edd6f48",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not entirely convinced by the explanation tbh. I wouldn’t expect interning to randomly (in the context of interning) skip things just because we want to reuse a traversal. But since this PR doesn’t change this, I’m fine with it for now.",
        "createdAt" : "2019-07-31T06:57:36Z",
        "updatedAt" : "2019-07-31T06:57:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a100bfb-046e-41bc-b1bf-db4a54236fc7",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Actually, looking at this again. It seems like this is exactly what this PR changes. So I’m not sure the changes here are actually a good idea.\r\nI would change `MonoTraversable` to hit all `PackageRef`s and then have a separate traversal for collecting dependencies that skips `SourceLoc`.",
        "createdAt" : "2019-07-31T06:59:27Z",
        "updatedAt" : "2019-07-31T06:59:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "961623b9-026e-4b37-8e54-bf0c6158f397",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree that this situation is not optimal. I'm tempted to merge this now nevertheless and clean up the mess in a future PR.",
        "createdAt" : "2019-07-31T07:22:05Z",
        "updatedAt" : "2019-07-31T07:22:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9a9edd6e-c05f-4fad-9538-2a8720f4d7a3",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "To be more specific, we skip the `ModuleRef` in `SourceLoc` when collecting dependencies for correctness reasons whereas we'd like to intern it for for performance reasons. Now, the former should win but in the long run we need to do both of them properly.",
        "createdAt" : "2019-07-31T07:24:11Z",
        "updatedAt" : "2019-07-31T07:24:11Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "18209a71-7253-4261-adae-e8e78e518e60",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Without this PR, we skipped `ModuleRef` when collecting dependencies and we didn’t skip it when interning. So this PR does improve neither correctness nor performance, in fact it’s a regression in performance and I would argue that skipping things during interning does at least break the very reasonable assumption that everything is interned afterwards.",
        "createdAt" : "2019-07-31T07:27:28Z",
        "updatedAt" : "2019-07-31T07:27:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e206805e-48b4-4521-8e3a-746e52aed02c",
        "parentId" : "21121204-36cc-4483-b913-bf4d18a4dbff",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "> So this PR does improve neither correctness nor performance, in fact it’s a regression in performance\r\n\r\n@cocreature You're right, but for now, the small (possibly nil as @hurryabit said) likelihood of not interning a SourceLoc PackageId because it's not referenced in a non-SourceLoc context anywhere in the package isn't worth having code for two traversals.\r\n\r\nNote that not traversing a package ref doesn't necessarily mean it won't be interned. For example, I compared the runs before and after this patch on a very large LF package, and the size was exactly the same, so any external SourceLocs therein still had their package IDs interned.\r\n\r\n> and I would argue that skipping things during interning does at least break the very reasonable assumption that everything is interned afterwards.\r\n\r\nWe deliberately didn't promise to intern everything, because the LF governance rules and [testing tools](https://github.com/digital-asset/daml/blob/0c154b7948ab28f21730962cb82e08c294d99c42/daml-lf/encoder/src/main/scala/com/digitalasset/daml/lf/archive/testing/EncodeV1.scala#L78-L82) make it much simpler to reserve that promise for LF v2.\r\n\r\n> I would change `MonoTraversable` to hit all `PackageRef`s and then have a separate traversal for collecting dependencies that skips `SourceLoc`.\r\n\r\nI gave the `MonoTraversable` priority for its seniority. However, for 2 traversals, I would prefer to delete `MonoTraversable`, resurrecting and parameterizing the `Generic`-derived traversal (we can't change `monoTraverse`'s signature) by whether you want to skip `SourceLoc`.",
        "createdAt" : "2019-07-31T15:27:40Z",
        "updatedAt" : "2019-07-31T15:27:41Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "6312b987bf944c7170a9bea396fb5a14c35daf65",
    "line" : null,
    "diffHunk" : "@@ -133,7 +127,10 @@ instance {-# OVERLAPPING #-} MonoTraversable ModuleRef FilePath where monoTraver\n instance MonoTraversable ModuleRef Kind where monoTraverse _ = pure\n instance MonoTraversable ModuleRef BuiltinType where monoTraverse _ = pure\n instance MonoTraversable ModuleRef BuiltinExpr where monoTraverse _ = pure\n-instance MonoTraversable ModuleRef SourceLoc where monoTraverse _ = pure\n+\n+instance MonoTraversable ModuleRef SourceLoc where\n+  monoTraverse f sl@SourceLoc{slocModuleRef} =\n+    (\\mr -> sl {slocModuleRef = mr}) <$> traverse f slocModuleRef"
  },
  {
    "id" : "97c61076-187a-47f3-be3e-58ce66cc9d04",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "c58755ae-2d42-4891-a82f-5f3092ebd595",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Surprisingly GHC allows trailing commas here, which makes future diffs less noisy.",
        "createdAt" : "2019-07-19T16:21:22Z",
        "updatedAt" : "2019-07-19T16:51:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 6,
    "diffHunk" : "@@ -16,7 +16,8 @@ module DA.Daml.LF.Ast.Optics(\n     exprPartyLiteral,\n     exprValueRef,\n     packageRefs,\n-    templateExpr\n+    templateExpr,\n+    builtinType"
  },
  {
    "id" : "0661d75b-462a-4d29-9d2f-ea85b3bc59d8",
    "prId" : 1614,
    "comments" : [
      {
        "id" : "683527c6-8af8-4e8f-9c75-f7e58dd10ead",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd be happy to turn on this extension by default - it's never a bad idea.",
        "createdAt" : "2019-06-21T12:09:59Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : 4,
    "diffHunk" : "@@ -2,9 +2,11 @@\n -- SPDX-License-Identifier: Apache-2.0\n \n {-# OPTIONS_GHC -Wno-orphans #-}\n+{-# LANGUAGE DefaultSignatures #-}"
  },
  {
    "id" : "639c1254-8299-4cc4-b45c-64bf55b17f0f",
    "prId" : 1614,
    "comments" : [
      {
        "id" : "0d690201-7f64-4dd2-8cc6-ef6ff9e7e2b4",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd just import the whole module",
        "createdAt" : "2019-06-21T12:10:12Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1e2152da-51b9-4377-8520-04cba930be8b",
        "parentId" : "0d690201-7f64-4dd2-8cc6-ef6ff9e7e2b4",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Sure. c24463d00375c9f393def242afcdeeb991d9e0fc",
        "createdAt" : "2019-06-21T12:38:25Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : null,
    "diffHunk" : "@@ -13,17 +15,24 @@ module DA.Daml.LF.Ast.Optics(\n     _PRSelfModule,\n     exprPartyLiteral,\n     exprValueRef,\n+    packageRefs,\n     templateExpr\n     ) where\n \n import Control.Lens\n import Control.Lens.Ast\n import Control.Lens.MonoTraversal\n+import Data.Fixed (Fixed)\n import Data.Functor.Foldable (cata, embed)\n+import Data.Int (Int32, Int64)"
  },
  {
    "id" : "82945183-f81f-4e1c-916f-c0ae1c7cf381",
    "prId" : 1614,
    "comments" : [
      {
        "id" : "f0b09c83-0a07-4079-9f18-c27965f26f36",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "@hurryabit would be great to get your view if this is a reasonable approach. Seems fine to me.",
        "createdAt" : "2019-06-21T12:10:51Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : 42,
    "diffHunk" : "@@ -164,3 +173,100 @@ exprValueRef f = cata go\n     go = \\case\n       EValF val -> EVal <$> f val\n       e -> embed <$> sequenceA e\n+\n+class HasPackageRefs' a where"
  }
]