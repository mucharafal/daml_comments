[
  {
    "id" : "c678a736-0cab-42f7-8f18-a32b730bad06",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "7f41e91d-e01a-4884-9185-0c00bae6ea36",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Missing copyright header.",
        "createdAt" : "2020-06-29T15:13:54Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,252 @@\n+======================"
  },
  {
    "id" : "2e0713b5-a497-4ccd-90a0-486cdd0349f4",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "cb8c5b5c-8115-4ad0-897f-2450cf7f569a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I don't think this line serves a purpose.\r\n```suggestion\r\n======================\r\n```",
        "createdAt" : "2020-06-29T20:47:10Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================"
  },
  {
    "id" : "ed7f0404-f901-4b76-9125-08fce8cea907",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "32c02429-bfe7-49f6-83c2-11bc2a6e4797",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nProvided with a choice of a template and a field of a (potentially different) template, the verification tool employs symbolic \r\n```",
        "createdAt" : "2020-06-29T20:48:05Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic "
  },
  {
    "id" : "bb5afef6-2011-4e36-bbe1-c3a5fc8ea90b",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "8c58fc94-e0a8-4e75-ab96-a51535e37e25",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I prefer long options when writing docs since short options are often somewhat ambiguous. (Is `-f` for `--field` or `--file`?) There are quite a few more occurrences of this below.\r\n```suggestion\r\n  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar --choice Module:Template.Choice --field Module:Template.Field\r\n```",
        "createdAt" : "2020-06-29T20:49:29Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):\n+\n+.. code::\n+  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar -c Module:Template.Choice -f Module:Template.Field"
  },
  {
    "id" : "2090229b-1a73-4b57-a2dd-c922249d3037",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "415b3c87-8cd3-4ce2-ae01-8f28c329faf2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nverified (``--choice`` / ``-c``), and the field which should be preserved (``--field`` / ``-f``):\r\n```",
        "createdAt" : "2020-06-29T20:49:55Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):"
  },
  {
    "id" : "54ba43fb-8c60-4d43-bd93-f87d19d4959d",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "e5845b37-8cba-4b48-a950-de288a416a54",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nExamples\r\n========\r\n```",
        "createdAt" : "2020-06-29T20:50:32Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):\n+\n+.. code::\n+  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar -c Module:Template.Choice -f Module:Template.Field\n+\n+Some Examples\n+============="
  },
  {
    "id" : "2dd8a217-a451-422b-bd8f-155df5037bb9",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "c9fa125e-17b4-4793-9511-808de2d7a08b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\nExample 1: Transferring value\r\n-----------------------------\r\n```",
        "createdAt" : "2020-06-29T20:51:26Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):\n+\n+.. code::\n+  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar -c Module:Template.Choice -f Module:Template.Field\n+\n+Some Examples\n+=============\n+\n+Example 1\n+---------"
  },
  {
    "id" : "6118dff6-d73a-4ee7-bd81-4468836ab9e2",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "a661257b-f0f9-4810-b4ad-724e060eff35",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The word \"sum\" is a bit misleading here as we're not adding anything but are in a realm where additions would make sense.\r\n```suggestion\r\n          -- | Transfer some amount to the receiver, or do nothing if this would make the\r\n```",
        "createdAt" : "2020-06-29T20:52:35Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):\n+\n+.. code::\n+  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar -c Module:Template.Choice -f Module:Template.Field\n+\n+Some Examples\n+=============\n+\n+Example 1\n+---------\n+\n+As a first example, consider a simple ``Account`` template, with a single choice\n+``Account_Transfer`` for transfering from one account to another. Note that if\n+someone tries to transfer more than they own, the choice should just do nothing.\n+\n+.. code:: haskell\n+  module Demo where\n+    template Account\n+      with\n+        amount : Decimal\n+        owner : Party\n+      where\n+        ensure amount > 0.0\n+    \n+        signatory owner\n+    \n+        controller owner can\n+    \n+          -- | Transfer a sum to the receiver, or do nothing if this would make the"
  },
  {
    "id" : "7fa7b5e5-2647-41ef-aae3-a4751226cadf",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "e6438252-5b4e-4420-bebf-4f3726a72651",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`template` should have the same indentation as `module`.",
        "createdAt" : "2020-06-29T20:53:39Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):\n+\n+.. code::\n+  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar -c Module:Template.Choice -f Module:Template.Field\n+\n+Some Examples\n+=============\n+\n+Example 1\n+---------\n+\n+As a first example, consider a simple ``Account`` template, with a single choice\n+``Account_Transfer`` for transfering from one account to another. Note that if\n+someone tries to transfer more than they own, the choice should just do nothing.\n+\n+.. code:: haskell\n+  module Demo where\n+    template Account"
  },
  {
    "id" : "793555ce-e162-46be-a281-d3a56fff4970",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "00e4fea3-0ca6-485a-8d60-e2ac4fa9f079",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Don't we have a plugin for DAML as well?",
        "createdAt" : "2020-06-29T20:56:15Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "74158b78-544e-4727-a63e-3203be4a5cae",
        "parentId" : "00e4fea3-0ca6-485a-8d60-e2ac4fa9f079",
        "author" : {
          "login" : "Gertjan423",
          "name" : "Gert-Jan Bottu",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/5838382?u=b47bd98f384562b45de5cd99b73da4c1aac7aceb&v=4"
        },
        "body" : "Hmm... Possibly, but I've been grepping through the repo and I can't find any occurrence of it...",
        "createdAt" : "2020-06-30T06:55:28Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "Gertjan423",
          "name" : "Gert-Jan Bottu",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/5838382?u=b47bd98f384562b45de5cd99b73da4c1aac7aceb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "234ef274-fbdf-4ed9-9ef6-4edbf5854178",
        "parentId" : "00e4fea3-0ca6-485a-8d60-e2ac4fa9f079",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Search for `.. code-block:: daml`",
        "createdAt" : "2020-06-30T06:57:08Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "886f88dd-0d6a-4c23-8ff6-28eb51605eaf",
        "parentId" : "00e4fea3-0ca6-485a-8d60-e2ac4fa9f079",
        "author" : {
          "login" : "Gertjan423",
          "name" : "Gert-Jan Bottu",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/5838382?u=b47bd98f384562b45de5cd99b73da4c1aac7aceb&v=4"
        },
        "body" : "aha, you're right. I was looking for `.. code:: daml`",
        "createdAt" : "2020-06-30T07:15:02Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "Gertjan423",
          "name" : "Gert-Jan Bottu",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/5838382?u=b47bd98f384562b45de5cd99b73da4c1aac7aceb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5b17a678-b04d-4d48-8696-b44cdd9b8d26",
        "parentId" : "00e4fea3-0ca6-485a-8d60-e2ac4fa9f079",
        "author" : {
          "login" : "Gertjan423",
          "name" : "Gert-Jan Bottu",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/5838382?u=b47bd98f384562b45de5cd99b73da4c1aac7aceb&v=4"
        },
        "body" : "I was hoping to link this Readme in the blogpost. Does anyone know why the code does not show up in Github?\r\nI tried both `.. code::` and `.. code-block::` both with and without the `daml` added...\r\nhttps://github.com/digital-asset/daml/tree/daml-lf-verification/compiler/daml-lf-verify",
        "createdAt" : "2020-06-30T09:24:42Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "Gertjan423",
          "name" : "Gert-Jan Bottu",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/5838382?u=b47bd98f384562b45de5cd99b73da4c1aac7aceb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):\n+\n+.. code::\n+  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar -c Module:Template.Choice -f Module:Template.Field\n+\n+Some Examples\n+=============\n+\n+Example 1\n+---------\n+\n+As a first example, consider a simple ``Account`` template, with a single choice\n+``Account_Transfer`` for transfering from one account to another. Note that if\n+someone tries to transfer more than they own, the choice should just do nothing.\n+\n+.. code:: haskell"
  },
  {
    "id" : "a8c3fd50-c2bd-4598-a9ad-824593dd35f3",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "7285f5d0-6379-4c86-8c5d-385464ba46cb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's obviously not Haskell. 😉\r\n```suggestion\r\n.. code::\r\n```\r\nThe same problem occurs more often below.",
        "createdAt" : "2020-06-29T20:56:38Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,255 @@\n+.. Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+.. SPDX-License-Identifier: Apache-2.0\n+\n+======================\n+DAML Verification Tool\n+======================\n+\n+This project performs fully automated formal verification of DAML code.\n+Provided with a choice and a field, the verification tool employs symbolic \n+execution and an SMT solver, to verify whether the given choice always preserves\n+the total amount of the given field. This allows it to automatically answer\n+the common question \"Could this smart contract model ever burn money or create\n+money out of thin air?\"\n+\n+Installation\n+============\n+\n+- Install the `DAML development dependecies`_.\n+\n+- Install the `Z3 SMT solver`_. \n+  Note that on Linux, you can alternatively install Z3 using\n+  ``sudo apt install z3``.\n+\n+.. _DAML development dependecies: https://github.com/digital-asset/daml/\n+.. _Z3 SMT solver: https://github.com/Z3Prover/z3\n+\n+Running the Verification Tool\n+=============================\n+\n+At the moment, the verification tool is launched from a command line interface.\n+Execute the tool by passing in the DAR file, the choice to be \n+verified (--choice / -c), and the field which should be preserved (--field / -f):\n+\n+.. code::\n+  > bazel run //compiler/daml-lf-verify:daml-lf-verify -- file.dar -c Module:Template.Choice -f Module:Template.Field\n+\n+Some Examples\n+=============\n+\n+Example 1\n+---------\n+\n+As a first example, consider a simple ``Account`` template, with a single choice\n+``Account_Transfer`` for transfering from one account to another. Note that if\n+someone tries to transfer more than they own, the choice should just do nothing.\n+\n+.. code:: haskell\n+  module Demo where\n+    template Account\n+      with\n+        amount : Decimal\n+        owner : Party\n+      where\n+        ensure amount > 0.0\n+    \n+        signatory owner\n+    \n+        controller owner can\n+    \n+          -- | Transfer a sum to the receiver, or do nothing if this would make the\n+          -- remaining amount in the account negative.\n+          nonconsuming Account_Transfer : (ContractId Account, ContractId Account)\n+            with\n+              transferAmount: Decimal\n+              receiverCid: ContractId Account\n+            do\n+              if amount >= transferAmount\n+              then do\n+                -- The account has sufficient funds.\n+                receiver <- fetch receiverCid\n+                newSelf <- create this with amount = amount - transferAmount\n+                newReceiver <- create receiver with \n+                  amount = receiver.amount + transferAmount\n+                archive receiverCid\n+                return (newSelf, newReceiver)\n+              else do\n+                -- The account does not have sufficient funds, and the transfer is\n+                -- cancelled.\n+                return (self, receiverCid)\n+\n+It is clear that making a transfer between two accounts, should always preserve\n+the total amount of funds. However, running the verification tool produces the \n+following output:\n+\n+.. code:: haskell"
  }
]