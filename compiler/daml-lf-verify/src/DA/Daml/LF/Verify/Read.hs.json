[
  {
    "id" : "4d37c30a-561f-4b92-8d35-32e8fcb18066",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "68c668bb-7873-4c66-8e72-4ddd82ad88a5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "A comment with an example of the syntax would be great. It looks like itâ€™s `A.B:T.C` for template `T`, choice `C` and module `A.B`?",
        "createdAt" : "2020-06-29T07:43:45Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 15,
    "diffHunk" : "@@ -25,33 +25,51 @@ import DA.Daml.LF.Ast\n \n data Options = Options\n     { optInputDar :: FilePath\n-    , optChoiceTmpl :: String\n-    , optChoiceName :: String\n-    , optFieldTmpl :: String\n-    , optFieldName :: String\n+    , optChoice :: (ModuleName, TypeConName, ChoiceName)\n+    , optField :: (ModuleName, TypeConName, FieldName)\n     }\n \n+choiceReader :: String -> Maybe (ModuleName, TypeConName, ChoiceName)"
  },
  {
    "id" : "0b4b493d-b1ab-4cf6-9d15-bfd62cd9eea7",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "111b3d24-1782-4ac1-bbe8-9d4df1a7f2e1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Comment please :)",
        "createdAt" : "2020-06-29T07:44:00Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 30,
    "diffHunk" : "@@ -25,33 +25,51 @@ import DA.Daml.LF.Ast\n \n data Options = Options\n     { optInputDar :: FilePath\n-    , optChoiceTmpl :: String\n-    , optChoiceName :: String\n-    , optFieldTmpl :: String\n-    , optFieldName :: String\n+    , optChoice :: (ModuleName, TypeConName, ChoiceName)\n+    , optField :: (ModuleName, TypeConName, FieldName)\n     }\n \n+choiceReader :: String -> Maybe (ModuleName, TypeConName, ChoiceName)\n+choiceReader str =\n+  let (modStr, remStr) = break (':' ==) str\n+  in if null modStr || null remStr\n+     then Nothing\n+     else let (tmpStr, choStr) = break ('.' ==) (tail remStr)\n+          in if null tmpStr || null choStr\n+             then Nothing\n+             else Just ( ModuleName [T.pack modStr]\n+                       , TypeConName [T.pack tmpStr]\n+                       , ChoiceName (T.pack $ tail choStr) )\n+\n+fieldReader :: String -> Maybe (ModuleName, TypeConName, FieldName)"
  },
  {
    "id" : "ac1000d7-1fac-48db-81f9-87825d936af6",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "51e9d184-b412-4df4-bdd5-83b15bbddab6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "An example of the format here would be super useful.",
        "createdAt" : "2020-06-29T11:42:56Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 64,
    "diffHunk" : "@@ -25,33 +25,51 @@ import DA.Daml.LF.Ast\n \n data Options = Options\n     { optInputDar :: FilePath\n-    , optChoiceTmpl :: String\n-    , optChoiceName :: String\n-    , optFieldTmpl :: String\n-    , optFieldName :: String\n+    , optChoice :: (ModuleName, TypeConName, ChoiceName)\n+    , optField :: (ModuleName, TypeConName, FieldName)\n     }\n \n+choiceReader :: String -> Maybe (ModuleName, TypeConName, ChoiceName)\n+choiceReader str =\n+  let (modStr, remStr) = break (':' ==) str\n+  in if null modStr || null remStr\n+     then Nothing\n+     else let (tmpStr, choStr) = break ('.' ==) (tail remStr)\n+          in if null tmpStr || null choStr\n+             then Nothing\n+             else Just ( ModuleName [T.pack modStr]\n+                       , TypeConName [T.pack tmpStr]\n+                       , ChoiceName (T.pack $ tail choStr) )\n+\n+fieldReader :: String -> Maybe (ModuleName, TypeConName, FieldName)\n+fieldReader str =\n+  let (modStr, remStr) = break (':' ==) str\n+  in if null modStr || null remStr\n+     then Nothing\n+     else let (tmpStr, fldStr) = break ('.' ==) (tail remStr)\n+          in if null tmpStr || null fldStr\n+             then Nothing\n+             else Just ( ModuleName [T.pack modStr]\n+                       , TypeConName [T.pack tmpStr]\n+                       , FieldName (T.pack $ tail fldStr) )\n+\n optionsParser :: Parser Options\n optionsParser = Options\n     <$> argument str\n         (  metavar \"DAR-FILE\"\n         <> help \"DAR file to analyse\"\n         )\n-    <*> argument str\n-        (  metavar \"CHOICE-TEMPLATE\"\n-        <> help \"Template of the choice to analyse\"\n-        )\n-    <*> argument str\n-        (  metavar \"CHOICE-NAME\"\n-        <> help \"Name of the choice to analyse\"\n-        )\n-    <*> argument str\n-        (  metavar \"FIELD-TEMPLATE\"\n-        <> help \"Template of the field to verify\"\n+    <*> option (maybeReader choiceReader)\n+        (  long \"choice\"\n+        <> short 'c'\n+        <> metavar \"CHOICE\"\n+        <> help \"The choice to analyse\""
  },
  {
    "id" : "dc7b46a6-0b26-4a25-82b8-45360f3de3f0",
    "prId" : 6516,
    "comments" : [
      {
        "id" : "5778e5a3-c286-4c44-a041-ab0902e6115d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here, without an example you have to resort to guessing.",
        "createdAt" : "2020-06-29T11:43:10Z",
        "updatedAt" : "2020-06-30T18:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8c9efc7a1908f7441b41b0d2ca49c22490f8c777",
    "line" : 74,
    "diffHunk" : "@@ -25,33 +25,51 @@ import DA.Daml.LF.Ast\n \n data Options = Options\n     { optInputDar :: FilePath\n-    , optChoiceTmpl :: String\n-    , optChoiceName :: String\n-    , optFieldTmpl :: String\n-    , optFieldName :: String\n+    , optChoice :: (ModuleName, TypeConName, ChoiceName)\n+    , optField :: (ModuleName, TypeConName, FieldName)\n     }\n \n+choiceReader :: String -> Maybe (ModuleName, TypeConName, ChoiceName)\n+choiceReader str =\n+  let (modStr, remStr) = break (':' ==) str\n+  in if null modStr || null remStr\n+     then Nothing\n+     else let (tmpStr, choStr) = break ('.' ==) (tail remStr)\n+          in if null tmpStr || null choStr\n+             then Nothing\n+             else Just ( ModuleName [T.pack modStr]\n+                       , TypeConName [T.pack tmpStr]\n+                       , ChoiceName (T.pack $ tail choStr) )\n+\n+fieldReader :: String -> Maybe (ModuleName, TypeConName, FieldName)\n+fieldReader str =\n+  let (modStr, remStr) = break (':' ==) str\n+  in if null modStr || null remStr\n+     then Nothing\n+     else let (tmpStr, fldStr) = break ('.' ==) (tail remStr)\n+          in if null tmpStr || null fldStr\n+             then Nothing\n+             else Just ( ModuleName [T.pack modStr]\n+                       , TypeConName [T.pack tmpStr]\n+                       , FieldName (T.pack $ tail fldStr) )\n+\n optionsParser :: Parser Options\n optionsParser = Options\n     <$> argument str\n         (  metavar \"DAR-FILE\"\n         <> help \"DAR file to analyse\"\n         )\n-    <*> argument str\n-        (  metavar \"CHOICE-TEMPLATE\"\n-        <> help \"Template of the choice to analyse\"\n-        )\n-    <*> argument str\n-        (  metavar \"CHOICE-NAME\"\n-        <> help \"Name of the choice to analyse\"\n-        )\n-    <*> argument str\n-        (  metavar \"FIELD-TEMPLATE\"\n-        <> help \"Template of the field to verify\"\n+    <*> option (maybeReader choiceReader)\n+        (  long \"choice\"\n+        <> short 'c'\n+        <> metavar \"CHOICE\"\n+        <> help \"The choice to analyse\"\n         )\n-    <*> argument str\n-        (  metavar \"FIELD-NAME\"\n-        <> help \"Name of the field to verify\"\n+    <*> option (maybeReader fieldReader)\n+        (  long \"field\"\n+        <> short 'f'\n+        <> metavar \"Field\"\n+        <> help \"The field to verify\""
  },
  {
    "id" : "2b8053b5-2757-4ae2-a001-b9ea58062c3d",
    "prId" : 5472,
    "comments" : [
      {
        "id" : "5aacd0b1-9e4e-45e9-9374-190a2285ba51",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Might be easier to understand if you already use the proper LF type here.",
        "createdAt" : "2020-05-07T19:28:34Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 28,
    "diffHunk" : "@@ -0,0 +1,77 @@\n+\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- TODO: There is a lot of copying going on here from TsCodeGenMain.hs.\n+-- A nicer alternative would be to just change the exports from this module.\n+\n+-- | Reading dar files for DAML LF verification.\n+module DA.Daml.LF.Verify.Read\n+  ( readPackages\n+  , optionsParserInfo\n+  , Options(..)\n+  ) where\n+\n+import qualified DA.Daml.LF.Proto3.Archive as Archive\n+import qualified DA.Daml.LF.Reader as DAR\n+import qualified Data.ByteString as B\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text.Extended as T\n+import qualified \"zip-archive\" Codec.Archive.Zip as Zip\n+import Control.Monad.Extra\n+import Options.Applicative\n+\n+import DA.Daml.LF.Ast\n+\n+data Options = Options\n+    { optInputDar :: FilePath\n+    , optChoiceTmpl :: String"
  },
  {
    "id" : "45bb5ddd-72dc-4e84-8ab4-733f5ceff369",
    "prId" : 5472,
    "comments" : [
      {
        "id" : "01128e80-2383-4634-bd66-131aeb697128",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We seem to be repeating that piece of code over and over. We should probably move it into some helper library at some point (not in this PR).",
        "createdAt" : "2020-05-07T19:30:53Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 67,
    "diffHunk" : "@@ -0,0 +1,77 @@\n+\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- TODO: There is a lot of copying going on here from TsCodeGenMain.hs.\n+-- A nicer alternative would be to just change the exports from this module.\n+\n+-- | Reading dar files for DAML LF verification.\n+module DA.Daml.LF.Verify.Read\n+  ( readPackages\n+  , optionsParserInfo\n+  , Options(..)\n+  ) where\n+\n+import qualified DA.Daml.LF.Proto3.Archive as Archive\n+import qualified DA.Daml.LF.Reader as DAR\n+import qualified Data.ByteString as B\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text.Extended as T\n+import qualified \"zip-archive\" Codec.Archive.Zip as Zip\n+import Control.Monad.Extra\n+import Options.Applicative\n+\n+import DA.Daml.LF.Ast\n+\n+data Options = Options\n+    { optInputDar :: FilePath\n+    , optChoiceTmpl :: String\n+    , optChoiceName :: String\n+    , optFieldTmpl :: String\n+    , optFieldName :: String\n+    }\n+\n+optionsParser :: Parser Options\n+optionsParser = Options\n+    <$> argument str\n+        (  metavar \"DAR-FILE\"\n+        <> help \"DAR file to analyse\"\n+        )\n+    <*> argument str\n+        (  metavar \"CHOICE-TEMPLATE\"\n+        <> help \"Template of the choice to analyse\"\n+        )\n+    <*> argument str\n+        (  metavar \"CHOICE-NAME\"\n+        <> help \"Name of the choice to analyse\"\n+        )\n+    <*> argument str\n+        (  metavar \"FIELD-TEMPLATE\"\n+        <> help \"Template of the field to verify\"\n+        )\n+    <*> argument str\n+        (  metavar \"FIELD-NAME\"\n+        <> help \"Name of the field to verify\"\n+        )\n+\n+optionsParserInfo :: ParserInfo Options\n+optionsParserInfo = info (optionsParser <**> helper)\n+    (  fullDesc\n+    <> progDesc \"Perform static analysis on a DAR\"\n+    )\n+\n+-- Build a list of packages from a list of DAR file paths.\n+readPackages :: [FilePath] -> IO [(PackageId, (Package, Maybe PackageName))]\n+readPackages dars = concatMapM darToPackages dars\n+  where\n+    darToPackages :: FilePath -> IO [(PackageId, (Package, Maybe PackageName))]"
  },
  {
    "id" : "f92c15d1-ee23-42e9-ab95-a1b455639254",
    "prId" : 5472,
    "comments" : [
      {
        "id" : "504867cc-bd7d-45bb-8f19-45f9b29b3ceb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Having so many positional arguments will probably become an issue in the future because it's easy to mix them up. But let's fix that in a follow-up PR.",
        "createdAt" : "2020-05-11T08:10:31Z",
        "updatedAt" : "2020-05-19T20:39:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7c840ec94d841cd4a9d3f0bd85eabff75e5d3a",
    "line" : 35,
    "diffHunk" : "@@ -0,0 +1,77 @@\n+\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- TODO: There is a lot of copying going on here from TsCodeGenMain.hs.\n+-- A nicer alternative would be to just change the exports from this module.\n+\n+-- | Reading dar files for DAML LF verification.\n+module DA.Daml.LF.Verify.Read\n+  ( readPackages\n+  , optionsParserInfo\n+  , Options(..)\n+  ) where\n+\n+import qualified DA.Daml.LF.Proto3.Archive as Archive\n+import qualified DA.Daml.LF.Reader as DAR\n+import qualified Data.ByteString as B\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text.Extended as T\n+import qualified \"zip-archive\" Codec.Archive.Zip as Zip\n+import Control.Monad.Extra\n+import Options.Applicative\n+\n+import DA.Daml.LF.Ast\n+\n+data Options = Options\n+    { optInputDar :: FilePath\n+    , optChoiceTmpl :: String\n+    , optChoiceName :: String\n+    , optFieldTmpl :: String\n+    , optFieldName :: String\n+    }\n+\n+optionsParser :: Parser Options\n+optionsParser = Options"
  }
]