[
  {
    "id" : "01d68236-0d63-4cf4-8358-854596f2faec",
    "prId" : 3959,
    "comments" : [
      {
        "id" : "837f8723-5069-4efb-9c21-e15381056f5a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is still missing the check for cyclic type synonyms. Let’s leave that for a separate PR but please add a TODO.",
        "createdAt" : "2020-01-09T19:24:45Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4a80a927-a79f-47b9-8393-0ad290e37641",
        "parentId" : "837f8723-5069-4efb-9c21-e15381056f5a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "we have this TODO already... In `checkModule` :\r\n```-- TODO #3616: check type synonyms for cycles```\r\n",
        "createdAt" : "2020-01-10T09:07:45Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b159283e-7ed7-4317-a3ef-471e69a03a86",
        "parentId" : "837f8723-5069-4efb-9c21-e15381056f5a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-01-10T09:34:41Z",
        "updatedAt" : "2020-01-10T16:41:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6a9feaae0a6921e3c04c93a65e754eca04cc83df",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +602,606 @@checkExpr expr typ = void (checkExpr' expr typ)\n\n-- | Check that a type synonym definition is well-formed.\ncheckDefTypeSyn :: MonadGamma m => DefTypeSyn -> m ()\ncheckDefTypeSyn DefTypeSyn{synParams,synType} = do"
  },
  {
    "id" : "bdbda69a-2f84-4f1b-af14-ac7dda4cf574",
    "prId" : 3703,
    "comments" : [
      {
        "id" : "1079be2a-a18c-4e90-8752-c5732cd8eb08",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Where is the case where we are checking the type of an expression against a type synonym?",
        "createdAt" : "2019-12-03T08:09:09Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22c42dee-d2f7-4af7-a15d-cca1c663ab2e",
        "parentId" : "1079be2a-a18c-4e90-8752-c5732cd8eb08",
        "author" : {
          "login" : "Nick-Chapman",
          "name" : "Nick Chapman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/7867928?u=69447afebf94adceb0dce70221641775915bedea&v=4"
        },
        "body" : "Not there yet. This PR doesn't extend the haskell type checker.\r\nMy idea is that type synonyms will be handled (expanded) by `lookupDataType`.\r\nBut there might be a better place. We shall see in the following PR! ",
        "createdAt" : "2019-12-03T12:28:47Z",
        "updatedAt" : "2019-12-03T12:40:39Z",
        "lastEditedBy" : {
          "login" : "Nick-Chapman",
          "name" : "Nick Chapman",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/7867928?u=69447afebf94adceb0dce70221641775915bedea&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8e10f3d85f2547f8c6f1968d814c0ffeba77445b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +564,568 @@        unless (null params) $ throwWithContext EEnumTypeWithParams\n        checkUnique EDuplicateConstructor names\n      DataSynonym typ -> do -- TODO(NICK): check for cycles\n        typ `checkType` KStar\n"
  },
  {
    "id" : "bceb7efe-67cd-488f-b807-7e669307017f",
    "prId" : 3437,
    "comments" : [
      {
        "id" : "679a04e8-ef95-41a7-bb8f-6b264c3f7fba",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Perhaps that is nitpicking but I would find this easier to read if we called the type variables `k` and `v` or `key` and `value`.",
        "createdAt" : "2019-11-13T07:42:23Z",
        "updatedAt" : "2019-11-13T10:15:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2687a7b32b981b95bbe4f511bdbce97d15c432ca",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +213,217 @@  BEMapToList -> pure $ TForall (alpha, KStar) $ TMap tAlpha :-> TList (TMapEntry tAlpha)\n  BEMapSize   -> pure $ TForall (alpha, KStar) $ TMap tAlpha :-> TInt64\n  BEGenMapEmpty -> pure $ TForall (alpha, KStar) $ TForall (beta, KStar) $ TGenMap tAlpha tBeta\n  BEGenMapInsert -> pure $ TForall (alpha, KStar) $ TForall (beta, KStar) $ tAlpha :-> tBeta :-> TGenMap tAlpha tBeta :-> TGenMap tAlpha tBeta\n  BEGenMapLookup -> pure $ TForall (alpha, KStar) $ TForall (beta, KStar) $ tAlpha :-> TGenMap tAlpha tBeta :-> TOptional tBeta"
  },
  {
    "id" : "aa3ffb7f-dece-4fe3-a821-e371aca57da0",
    "prId" : 3141,
    "comments" : [
      {
        "id" : "859d0cb1-46e3-478c-814d-f10b24963b30",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Won't this produce very confusing compiler errors if a type has free type variables?",
        "createdAt" : "2019-10-09T12:59:27Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2f3f09b4-b5a2-43f8-8ce7-47fb4ae2ccdb",
        "parentId" : "859d0cb1-46e3-478c-814d-f10b24963b30",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That’s a fair point but given that DAML users should never see this check I don’t think we need to aim for a good error message here.",
        "createdAt" : "2019-10-09T13:08:32Z",
        "updatedAt" : "2019-10-10T04:59:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9f33ac4e3d1ffe96883e634244b43469966c6fd2",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +503,507 @@  EToAny ty bodyExpr -> do\n    -- We clear the environment to make sure that there are no free type variables in ty\n    clearTypeVars $ checkType ty KStar\n    checkExpr bodyExpr ty\n    pure $ TBuiltin BTAny"
  },
  {
    "id" : "f20014c6-70f0-415c-b544-75c54f54369d",
    "prId" : 3118,
    "comments" : [
      {
        "id" : "6802ca4a-d25e-4133-8de4-eb252da1f00a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "... and a template type. :)",
        "createdAt" : "2019-10-09T08:45:30Z",
        "updatedAt" : "2019-10-09T08:46:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c8cea9b36628653cfe6827ff1ff5d531151c27b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +510,514 @@    pure $ TOptional (TCon tpl)\n  EToTextTemplateId tpl -> do\n    -- Ensure that the type is known.\n    _ :: Template <- inWorld (lookupTemplate tpl)\n    pure $ TBuiltin BTText"
  },
  {
    "id" : "530cd741-2a94-4344-8395-ebd88e10232c",
    "prId" : 663,
    "comments" : [
      {
        "id" : "e0ff36d1-7dea-47d5-ac02-e97ccebe470d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like the changes here result in a call to `error` rather than a call to `throwWithContext`. It isn’t immediately obvious to me that this will be handled the same way and if not, what exactly this implies.",
        "createdAt" : "2019-04-24T11:50:57Z",
        "updatedAt" : "2019-04-25T10:40:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "19f98bea-1c90-4c07-8b83-831a1df853ff",
        "parentId" : "e0ff36d1-7dea-47d5-ac02-e97ccebe470d",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Nope, this calls a different checkFeature which does call throwWithContext - so all good.",
        "createdAt" : "2019-04-24T12:40:27Z",
        "updatedAt" : "2019-04-25T10:40:16Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6a253f4205edcddd905fb7a7812b140b113c8d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +387,391 @@checkRetrieveByKey :: MonadGamma m => RetrieveByKey -> m (Type, Type)\ncheckRetrieveByKey RetrieveByKey{..} = do\n  checkFeature featureContractKeys\n  tpl <- inWorld (lookupTemplate retrieveByKeyTemplate)\n  case tplKey tpl of"
  },
  {
    "id" : "98c54750-92d0-41af-bd08-a9ac6f1d83ee",
    "prId" : 639,
    "comments" : [
      {
        "id" : "ece90688-7ca6-4456-a8d6-9a6b56a54268",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Surprised there isn't a generate `checkSupported` which takes the predicate an error message and hides the magic.",
        "createdAt" : "2019-04-23T16:18:32Z",
        "updatedAt" : "2019-04-24T08:38:01Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e91f8d34bc3cd39588ceb7348f9adb4e0a46b8c6",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +548,552 @@\ncheckSupportsContractKeys :: MonadGamma m => m ()\ncheckSupportsContractKeys = do\n    v <- view lfVersion\n    unless (supportsContractKeys v) $"
  },
  {
    "id" : "059bf31e-3e40-4a13-ad58-ef8850a2c462",
    "prId" : 639,
    "comments" : [
      {
        "id" : "0f878fbd-cec6-4822-85d0-f2a1ff8e4815",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Not such a fan that `supportsContractKeys` is a nicely abstracted predicate, and then the error message repeats the version miles away from it",
        "createdAt" : "2019-04-23T16:19:22Z",
        "updatedAt" : "2019-04-24T08:38:01Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b52fd880-277b-49e8-af1d-47f8a52cadda",
        "parentId" : "0f878fbd-cec6-4822-85d0-f2a1ff8e4815",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I totally agree. I'll clean that up in a followup PR for all features that depend on the DAML-LF version. Same for the other remark.",
        "createdAt" : "2019-04-23T16:23:24Z",
        "updatedAt" : "2019-04-24T08:38:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e91f8d34bc3cd39588ceb7348f9adb4e0a46b8c6",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +551,555 @@    v <- view lfVersion\n    unless (supportsContractKeys v) $\n        throwWithContext $ EUnsupportedFeature \"Contract keys\" version1_3\n\ncheckTemplateKey :: MonadGamma m => ExprVarName -> Qualified TypeConName -> TemplateKey -> m ()"
  }
]