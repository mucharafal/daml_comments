[
  {
    "id" : "568d0874-27d2-4629-b70c-42180154bf64",
    "prId" : 5219,
    "comments" : [
      {
        "id" : "d7f16454-ace6-4b44-8406-6bde67b61b30",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I had exactly the same chain of functions in my prototype. ðŸ˜ƒ ",
        "createdAt" : "2020-03-26T17:19:30Z",
        "updatedAt" : "2020-03-26T17:37:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "665f6e8821c0da979ddb3a800d0b3ccca0652576",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +267,271 @@    | null components = error \"Empty module names are invalid.\"\n    | otherwise = map (\\v -> (ModuleName v, origin))  ((tail . inits . init) components)\n    -- init goes from A.B.C to A.B, inits gives us [[], [A], [A,B]], tail drops []"
  },
  {
    "id" : "674c0c1f-7b43-4be7-83d9-afa20bd52da8",
    "prId" : 3827,
    "comments" : [
      {
        "id" : "144437fe-0e3f-4a3b-b528-c93a02966cd0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "thanks for the nice comment!",
        "createdAt" : "2019-12-12T12:23:33Z",
        "updatedAt" : "2019-12-12T12:27:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6475bdd2fc3262167a8b84f938509e3f5be0f358",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +186,190 @@    checkModuleBody m\n\n-- | Is one module an ascendant of another? For instance\n-- module \"A\" is an ascendant of module \"A.B\" and \"A.B.C\".\n--"
  },
  {
    "id" : "5d170e3d-ccd8-4a57-8344-244c258e55ca",
    "prId" : 3770,
    "comments" : [
      {
        "id" : "30f75dc0-7cc1-474d-a3c2-8cc6efc57bfa",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Iâ€™m a bit confused about this. Do we have some concept of hierarchical modules in DAML-LF? I thought this worked just like in Haskell where the hierarchy doesnâ€™t really mean anything.",
        "createdAt" : "2019-12-06T15:41:13Z",
        "updatedAt" : "2019-12-09T15:52:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "631f6c31-7d83-4c3e-b1c0-077a334f60e5",
        "parentId" : "30f75dc0-7cc1-474d-a3c2-8cc6efc57bfa",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah I think I got it now, we need to check for collisions between module `A.B` and type `B` in module `A`. It would be good to add a comment on this.",
        "createdAt" : "2019-12-06T15:55:15Z",
        "updatedAt" : "2019-12-09T15:52:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b1382228b2d92a9bd730fb850759d8b2e4479841",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +181,185 @@-- | Is the first module an ascendant of the second? This check\n-- is case-insensitive because name collisions are case-insensitive.\nisAscendant :: ModuleName -> ModuleName -> Bool\nisAscendant (ModuleName xs) (ModuleName ys) =\n    (length xs < length ys) && and (zipWith sameish xs ys)"
  },
  {
    "id" : "d4e74f3e-9e96-4517-bd05-a82d07aa5876",
    "prId" : 2981,
    "comments" : [
      {
        "id" : "8d7bb1d7-19e6-484a-9e6f-75c27b57aa8c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That seems like a weird rule, I would have expected the opposite if anything, i.e., collisions are only allowed if they are in different modules â€¦",
        "createdAt" : "2019-09-23T15:06:15Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1e855bc1-95fd-4a89-84d0-df3018b62cd1",
        "parentId" : "8d7bb1d7-19e6-484a-9e6f-75c27b57aa8c",
        "author" : null,
        "body" : "I think it's got something to do with the conversion of named fields in variant types.",
        "createdAt" : "2019-09-23T15:15:43Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "114c6562-4238-4e8b-a80e-e6146ddc1663",
        "parentId" : "8d7bb1d7-19e6-484a-9e6f-75c27b57aa8c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Let consider the following daml:\r\n```\r\nmodule Mod where\r\ndata T @a : A = {x: a, y: a} | B {x: a, y: a}\r\n```\r\n\r\nis compiled in LF\r\n```\r\nmod Mod {\r\n  \r\nrecord T.A @a = {x: a, y: a};\r\nrecord T.B @a = {x: a, y: a};\r\n\r\nvariant T @a := A (Mod:T.A a) | B (Mod:T.B b);\r\n}\r\n```\r\n \r\nIn this case you have a collision between\r\n\r\n- the record constructor `A.C` (noted `Mod:A.C` in LF and translated in java/scala as `Mod.A.C`) and \r\n- the constructor `A` of the variant `T` (noted `Mod:A:C` in LF and translated in java/scala as `Mod.A.C`).\r\n\r\nThis is OK to have such \"collision\" because the record constructor and the variant constructor will be merged back in the same object in java/scala.\r\n\r\n\r\n",
        "createdAt" : "2019-09-23T15:32:34Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "17690e0e-b678-4e21-b280-b14190d54a25",
        "parentId" : "8d7bb1d7-19e6-484a-9e6f-75c27b57aa8c",
        "author" : null,
        "body" : "Thanks for the explanation @remyhaemmerle-da! ",
        "createdAt" : "2019-09-23T15:35:28Z",
        "updatedAt" : "2019-09-23T16:49:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@-- | Asks whether a name collision is permitted. According to the\n-- LF Spec, a name collision is only permitted when it occurs\n-- between a record type and a variant constructor defined in\n-- the same module.\nnameCollisionPermitted :: Name -> Name -> Bool"
  },
  {
    "id" : "bcc277ff-921c-4b65-a9a6-23e4a9cd1048",
    "prId" : 2981,
    "comments" : [
      {
        "id" : "f5291c57-0234-4aeb-ab49-12d39366f51a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Could we remove the `ModuleName` from each constructor and use `Qualified Name` instead?",
        "createdAt" : "2019-09-23T16:57:15Z",
        "updatedAt" : "2019-09-23T17:04:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1941cb1-7039-4983-919f-cf61fd04fe8a",
        "parentId" : "f5291c57-0234-4aeb-ab49-12d39366f51a",
        "author" : null,
        "body" : "We don't care about carrying around the package name though. Maybe I will change it later if it turns out to be useful?",
        "createdAt" : "2019-09-23T17:17:23Z",
        "updatedAt" : "2019-09-23T17:17:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@-- the corresponding case insensitive fully resolved name,\n-- see 'FRName'.\ndata Name\n    = NModule ModuleName\n    | NRecordType ModuleName TypeConName"
  },
  {
    "id" : "a4a34657-e6cf-438a-b0aa-3de974c7a8b6",
    "prId" : 2981,
    "comments" : [
      {
        "id" : "8c5b2fec-11ee-480a-a81e-9fa461af8e5f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does this detect collisions when the modules don't depend on each other? Please convince me it does by adding a test. :smiley: ",
        "createdAt" : "2019-09-23T17:02:14Z",
        "updatedAt" : "2019-09-23T17:04:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b2161db5-6502-4ecb-bacf-d74de92f8abc",
        "parentId" : "8c5b2fec-11ee-480a-a81e-9fa461af8e5f",
        "author" : null,
        "body" : "I think for that we need to check the full package, not just a module? This PR only deals with a single module check.",
        "createdAt" : "2019-09-23T17:10:22Z",
        "updatedAt" : "2019-09-23T17:10:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +154,158 @@\n-- | Check whether a module satisfies the name collision condition.\ncheckModule :: MonadGamma m => Module -> m ()\ncheckModule mod0 =\n    void . flip S.runStateT initialState $ do"
  },
  {
    "id" : "82a236fd-e21a-44a8-b6b4-c1e3e3757829",
    "prId" : 2981,
    "comments" : [
      {
        "id" : "4964d81d-66cc-4c27-8cd9-742f94282b2d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can field and choice names actually collide with anything?",
        "createdAt" : "2019-09-23T17:04:05Z",
        "updatedAt" : "2019-09-23T17:04:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e7cc310e-7930-4914-a311-1625da3bc31f",
        "parentId" : "4964d81d-66cc-4c27-8cd9-742f94282b2d",
        "author" : null,
        "body" : "I don't think so, at least not from DAML, but it's in the spec (unlike fully resolved value names, which aren't in the spec for some reason).",
        "createdAt" : "2019-09-23T17:09:19Z",
        "updatedAt" : "2019-09-23T17:09:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "717e0bb83a08360e6aa87ffdd32e1bee88891def",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@    | NVariantCon ModuleName TypeConName VariantConName\n    | NEnumCon ModuleName TypeConName VariantConName\n    | NField ModuleName TypeConName FieldName\n    | NChoice ModuleName TypeConName ChoiceName\n"
  }
]