[
  {
    "id" : "f1577b94-f9f7-4198-b064-075c8b87e5c4",
    "prId" : 5546,
    "comments" : [
      {
        "id" : "07bf6353-53d9-4e45-bada-2ae8b6173862",
        "parentId" : null,
        "author" : null,
        "body" : "👍 This type signature is permutation-proof. \r\n",
        "createdAt" : "2020-04-15T10:14:29Z",
        "updatedAt" : "2020-04-15T10:14:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "1e81c02c0fbe6985c9723ff0d5190fd0622b0c80",
    "line" : 89,
    "diffHunk" : "@@ -265,25 +265,20 @@ getDamlRootFiles srcRoot = do\n         then liftIO $ damlFilesInDir srcRoot\n         else pure [toNormalizedFilePath' srcRoot]\n \n-mkConfFile ::\n-       LF.Version -> PackageConfigFields -> [String] -> LF.PackageId -> IO (String, BS.ByteString)\n-mkConfFile lfVersion PackageConfigFields {..} pkgModuleNames pkgId = do\n-    deps <- mapM darUnitId =<< expandSdkPackages lfVersion pDependencies\n-    pure (confName, confContent deps)\n+mkConfFile\n+    :: LF.PackageName\n+    -> Maybe LF.PackageVersion\n+    -> [UnitId]\n+    -> Maybe [Ghc.ModuleName]\n+    -> [Ghc.ModuleName]\n+    -> LF.PackageId\n+    -> (FilePath, BS.ByteString)"
  },
  {
    "id" : "010fe4a0-c123-46b9-8e31-29ea2b2012e9",
    "prId" : 4104,
    "comments" : [
      {
        "id" : "ffa2f7dc-f8e8-49cf-875d-e979c0e15d89",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I was literally about to ask why not use the unix epoch. That explains it. Thanks.",
        "createdAt" : "2020-01-20T13:56:57Z",
        "updatedAt" : "2020-01-20T13:56:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cdd961b732a95f15d739dde089c9b113ef25373",
    "line" : 38,
    "diffHunk" : "@@ -325,6 +328,19 @@ mkConfFile PackageConfigFields {..} pkgModuleNames pkgId = do\n             , \"depends: \" ++ unwords deps\n             ]\n \n+sinkEntryDeterministic\n+    :: Zip.CompressionMethod\n+    -> ConduitT () BS.ByteString (ResourceT IO) ()\n+    -> Zip.EntrySelector\n+    -> Zip.ZipArchive ()\n+sinkEntryDeterministic compression sink sel = do\n+    Zip.sinkEntry compression sink sel\n+    Zip.setModTime fixedTime sel\n+  -- The ZIP file format uses the MS-DOS timestamp format\n+  -- (I didn’t even knew that existed) which starts at\n+  -- 1980 rather than 1970."
  },
  {
    "id" : "d8df7468-59ce-49e5-a6d4-8e3ce2a085e3",
    "prId" : 3637,
    "comments" : [
      {
        "id" : "d70aeb08-3e59-4d43-894f-8accde6d95db",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems to be completely unrelated to this PR.",
        "createdAt" : "2019-11-26T19:46:51Z",
        "updatedAt" : "2019-11-26T21:03:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "afa0b1a8-be75-44a7-a491-34d137d59b88",
        "parentId" : "d70aeb08-3e59-4d43-894f-8accde6d95db",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "uh, thanks for spotting this. Seems this slipped in when I pushed after scalafmt.",
        "createdAt" : "2019-11-26T19:52:50Z",
        "updatedAt" : "2019-11-26T21:03:00Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "92a31d9c-bd3d-4716-b6f2-33011d2a68fb",
        "parentId" : "d70aeb08-3e59-4d43-894f-8accde6d95db",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "ironically scalafmt still seems unhappy :slightly_smiling_face: ",
        "createdAt" : "2019-11-26T19:53:40Z",
        "updatedAt" : "2019-11-26T21:03:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ca76e19-4bf1-4db2-ba97-1d5363f5fa91",
        "parentId" : "d70aeb08-3e59-4d43-894f-8accde6d95db",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "scalafmt is trolling me ...",
        "createdAt" : "2019-11-26T21:03:12Z",
        "updatedAt" : "2019-11-26T21:03:12Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9c09eb0639de31ace3da61d8e9462e59744a1fdd",
    "line" : null,
    "diffHunk" : "@@ -298,7 +298,7 @@ createArchive ::\n        PackageConfigFields\n     -> String\n     -> BSL.ByteString -- ^ DALF\n-    -> [(T.Text, BS.ByteString)] -- ^ DALF dependencies\n+    -> [(T.Text, BS.ByteString, LF.PackageId)] -- ^ DALF dependencies"
  },
  {
    "id" : "72147e82-2e3e-41b1-8d6e-a4b809435289",
    "prId" : 3624,
    "comments" : [
      {
        "id" : "62bda653-c816-4c2c-b3a1-12bd6398abfb",
        "parentId" : null,
        "author" : {
          "login" : "tamaskalcza-da",
          "name" : "Tamás Kálcza",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/54800417?u=2f23b2f81e5322e0a3ccde86f489a6f607b51fcb&v=4"
        },
        "body" : "I wonder if it was cleaner (possible?) to keep the empty match and simply return something \"empty\" and leave the rest.",
        "createdAt" : "2019-11-25T20:07:08Z",
        "updatedAt" : "2019-11-25T20:07:09Z",
        "lastEditedBy" : {
          "login" : "tamaskalcza-da",
          "name" : "Tamás Kálcza",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/54800417?u=2f23b2f81e5322e0a3ccde86f489a6f607b51fcb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d34346f-9871-4d03-bed4-3ba630444310",
        "parentId" : "62bda653-c816-4c2c-b3a1-12bd6398abfb",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It definitely would be possible but I find it easier to understand and cleaner this way. It makes it clear that this is just a left-fold with the empty package being the identity.",
        "createdAt" : "2019-11-25T20:08:23Z",
        "updatedAt" : "2019-11-25T20:08:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "afa7671dcbc3fd1bc4a260a96bae036a3185c7a7",
    "line" : 29,
    "diffHunk" : "@@ -204,16 +206,15 @@ getSrcRoot fileOrDir = do\n           pure $ toNormalizedFilePath root\n \n -- | Merge several packages into one.\n-mergePkgs :: [WhnfPackage] -> LF.Package\n-mergePkgs [] = error \"No package build when building dar\"\n-mergePkgs (WhnfPackage pkg0:pkgs) =\n-    foldl\n-        (\\pkg1 (WhnfPackage pkg2) ->\n+mergePkgs :: LF.Version -> [WhnfPackage] -> LF.Package\n+mergePkgs ver pkgs ="
  },
  {
    "id" : "9e3b95de-6d10-4ada-84c3-d1a310080a5d",
    "prId" : 3399,
    "comments" : [
      {
        "id" : "0d1af309-21db-45e3-8be5-36e1023553d8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Given that the other field is called `dependencies` maybe `data-dependencies` would make sense? @bame-da what do you think?",
        "createdAt" : "2019-11-08T12:16:44Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3d9851e204dcebd5655cc9f17cb2763d0fa1942c",
    "line" : null,
    "diffHunk" : "@@ -88,6 +88,7 @@ data PackageConfigFields = PackageConfigFields\n     , pExposedModules :: Maybe [String]\n     , pVersion :: Maybe String\n     , pDependencies :: [String]\n+    , pDataImports :: [String]"
  },
  {
    "id" : "f378ad51-b337-465f-a7a3-fe2d935d0a35",
    "prId" : 3176,
    "comments" : [
      {
        "id" : "5416b4d2-dce0-48bf-847d-0eb36ca6dac1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we pass the version as a `Maybe` to make it explicit that it’s optional?",
        "createdAt" : "2019-10-15T11:44:04Z",
        "updatedAt" : "2019-10-15T14:51:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5cf62db8-34f4-4b57-9130-1c858beba28c",
        "parentId" : "5416b4d2-dce0-48bf-847d-0eb36ca6dac1",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "That makes sense.",
        "createdAt" : "2019-10-15T12:23:04Z",
        "updatedAt" : "2019-10-15T14:51:02Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "45fdc25e48bcb73c44106adba42b01b2161be66a",
    "line" : null,
    "diffHunk" : "@@ -234,10 +234,14 @@ getDamlRootFiles srcRoot = do\n         else pure [toNormalizedFilePath srcRoot]\n \n fullPkgName :: String -> String -> String -> String\n-fullPkgName n v h = intercalate \"-\" [n, v, h]\n+fullPkgName n v h\n+    | null v = n <> \"-\" <> h"
  },
  {
    "id" : "e8909122-021b-4d3e-a4ac-6bbcc7599b60",
    "prId" : 2989,
    "comments" : [
      {
        "id" : "585f9299-1bd3-49a1-9028-0029889e0d35",
        "parentId" : null,
        "author" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "body" : "For completeness... maybe adjust that comment here back to reality. The paragraph about `topdir` in the description after the imports could be moved here. ",
        "createdAt" : "2019-09-23T23:47:39Z",
        "updatedAt" : "2019-09-23T23:47:39Z",
        "lastEditedBy" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "93729fe077a629ccbd010d4c1c6b0a59ea2ac18f",
    "line" : 12,
    "diffHunk" : "@@ -175,10 +175,16 @@ writeIfacesAndHie ifDir files =\n \n -- For backwards compatibility we allow a file at the source root level and just take it's directory\n -- to be the source root."
  },
  {
    "id" : "60fe240f-9c6f-46e9-bcc1-de8b7f1eee5d",
    "prId" : 2970,
    "comments" : [
      {
        "id" : "eccd6247-e94e-4361-a96e-2754b66754d5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is unrelated to this PR and was literally copied from `ghcide` to match https://github.com/digital-asset/ghcide/pull/112 which I noticed while I was touching this code.",
        "createdAt" : "2019-09-23T08:22:19Z",
        "updatedAt" : "2019-09-23T08:22:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "01b0e09d2e3abe82c59f1c0e3e934d736144f6ac",
    "line" : 52,
    "diffHunk" : "@@ -130,6 +139,39 @@ buildDar service pkgConf@PackageConfigFields {..} ifDir dalfInput = do\n                          dataFiles\n                          ifaces\n \n+-- | Write interface files and hie files to the location specified by the given options.\n+writeIfacesAndHie ::"
  },
  {
    "id" : "b0fde03a-2274-49a8-8af6-d32be7f9d63d",
    "prId" : 2500,
    "comments" : [
      {
        "id" : "11797bc9-8179-491b-acc7-94bd2968b661",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That looks really similar to [`moduleImportPaths`](https://github.com/digital-asset/daml/blob/b87215e111a0a99209d3993b9e527551c178cace/compiler/hie-core/src/Development/IDE/GHC/Util.hs#L97). Can we reuse the code? If not, why not?",
        "createdAt" : "2019-08-12T18:11:58Z",
        "updatedAt" : "2019-08-13T10:50:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c2bfe649-8d5b-4c70-8956-037dd90834fd",
        "parentId" : "11797bc9-8179-491b-acc7-94bd2968b661",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "sure, I'll check what's in `moduleImportPaths`. I'll extend the integration tests a bit in my next PR, we're also missing one for the `merge` command.",
        "createdAt" : "2019-08-13T10:31:29Z",
        "updatedAt" : "2019-08-13T10:50:29Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d03ff9b4a0cf7f45354c3a7a11b5bfa4d4290c52",
    "line" : 42,
    "diffHunk" : "@@ -88,10 +87,20 @@ buildDar service pkgConf@PackageConfigFields {..} ifDir dalfInput = do\n         then liftIO $\n              Just <$> do\n                  bytes <- BSL.readFile pMain\n-                 createArchive pkgConf \"\" bytes [] [] [] []\n+                 createArchive pkgConf \"\" bytes [] (toNormalizedFilePath \".\") [] [] []\n         else runAction service $\n              runMaybeT $ do\n                  WhnfPackage pkg <- useE GeneratePackage file\n+                 parsedMain <- useE GetParsedModule file"
  },
  {
    "id" : "b00c7587-ef14-4665-9ee6-e3cabf7ba750",
    "prId" : 2268,
    "comments" : [
      {
        "id" : "b7a9b044-99aa-40af-bae5-68e390c38838",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  -> ((FilePath, LF.Package) -> [(FilePath, BS.ByteString)])\r\n```\r\nMakes it a bit easier to see what this type represents.",
        "createdAt" : "2019-07-24T06:55:53Z",
        "updatedAt" : "2019-07-31T11:22:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ef3cd94-e923-44d5-9dc1-b3e93e4899e8",
        "parentId" : "b7a9b044-99aa-40af-bae5-68e390c38838",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Let's do \r\n```\r\n(String, LF.Package) -> [(FilePath, BS.ByteString)]\r\n```\r\nbecause the first String is the package hash.\r\n\r\n\r\n",
        "createdAt" : "2019-07-24T09:50:29Z",
        "updatedAt" : "2019-07-31T11:22:28Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "664b8631-c7a5-4526-bb6e-8967658e51d8",
        "parentId" : "b7a9b044-99aa-40af-bae5-68e390c38838",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Or even better, add a newtype for hashes as @hurryabit suggested :slightly_smiling_face: ",
        "createdAt" : "2019-07-24T09:51:12Z",
        "updatedAt" : "2019-07-31T11:22:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39dfd80b6810b8f21343745be999425a66d547d3",
    "line" : null,
    "diffHunk" : "@@ -71,7 +71,7 @@ buildDar\n   -> Maybe [String] -- ^ exposed modules\n   -> String -- ^ package name\n   -> String -- ^ sdk version\n-  -> (LF.Package -> [(String, BS.ByteString)])\n+  -> ((String, LF.Package) -> [(String, BS.ByteString)])"
  },
  {
    "id" : "c4d95191-9f92-4176-881c-da614f61404e",
    "prId" : 2268,
    "comments" : [
      {
        "id" : "6d5b18b5-a31e-4885-8292-add206f65cd3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We already do all of the encoding and hash calculation as part of `encodeArchiveLazy` so it seems slightly wasteful to do it again in `encodePackageHash`. How about we make `encodeArchiveLazy` return a tuple of the hash and the bytes? Alternatively we could also factor out the call to `Proto.toLazyByteString` from `encodeArchiveLazy` and have it return a `ProtoLF.Archive`.",
        "createdAt" : "2019-07-24T07:10:57Z",
        "updatedAt" : "2019-07-31T11:22:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "39dfd80b6810b8f21343745be999425a66d547d3",
    "line" : null,
    "diffHunk" : "@@ -105,80 +106,100 @@ buildDar service file mbExposedModules pkgName sdkVersion buildDataFiles dalfInp\n               \"The following modules are declared in exposed-modules but are not part of the DALF: \" <>\n               show (S.toList missingExposed)\n       let dalf = encodeArchiveLazy pkg"
  },
  {
    "id" : "769e2ffa-81b1-43e9-a0a3-52cec300513d",
    "prId" : 2268,
    "comments" : [
      {
        "id" : "ecda690f-6c2b-40f1-9636-ab7256646d47",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What has actually changed in this signature? Can we please undo the formatting change.",
        "createdAt" : "2019-07-24T08:50:11Z",
        "updatedAt" : "2019-07-31T11:22:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2e17ba71-e6d7-4eeb-a851-038f3f7f5fea",
        "parentId" : "ecda690f-6c2b-40f1-9636-ab7256646d47",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Nothing, but let's keep the formatting change, the way it's formatted right now makes my eyes bleed. ",
        "createdAt" : "2019-07-24T09:40:53Z",
        "updatedAt" : "2019-07-31T11:22:28Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "39dfd80b6810b8f21343745be999425a66d547d3",
    "line" : 73,
    "diffHunk" : "@@ -105,80 +106,100 @@ buildDar service file mbExposedModules pkgName sdkVersion buildDataFiles dalfInp\n               \"The following modules are declared in exposed-modules but are not part of the DALF: \" <>\n               show (S.toList missingExposed)\n       let dalf = encodeArchiveLazy pkg\n+      let hash = T.unpack $ encodePackageHash pkg\n       -- get all dalf dependencies.\n       dalfDependencies0 <- getDalfDependencies file\n       let dalfDependencies =\n               [ (T.pack $ unitIdString unitId, dalfPackageBytes pkg) | (unitId, pkg) <- Map.toList dalfDependencies0 ]\n       -- get all file dependencies\n       fileDependencies <- MaybeT $ getDependencies file\n+      let dataFiles = buildDataFiles (hash, pkg)\n       liftIO $\n         createArchive\n           dalf\n+          hash\n           (toNormalizedFilePath $ takeDirectory file')\n           dalfDependencies\n           (file:fileDependencies)\n-          (buildDataFiles pkg)\n+          dataFiles\n           pkgName\n           sdkVersion\n \n -- | Helper to bundle up all files into a DAR.\n-createArchive\n-  :: BSL.ByteString -- ^ DALF\n-  -> NormalizedFilePath -- ^ Module root used to locate interface and source files\n-  -> [(T.Text, BS.ByteString)] -- ^ DALF dependencies\n-  -> [NormalizedFilePath] -- ^ Module dependencies\n-  -> [(String, BS.ByteString)] -- ^ Data files\n-  -> String -- ^ Name of the main DALF\n-  -> String -- ^ SDK version\n-  -> IO BS.ByteString\n-createArchive dalf modRoot dalfDependencies fileDependencies dataFiles name sdkVersion = do\n+createArchive ::\n+       BSL.ByteString -- ^ DALF\n+    -> String -- ^ Package id\n+    -> NormalizedFilePath -- ^ Module root used to locate interface and source files\n+    -> [(T.Text, BS.ByteString)] -- ^ DALF dependencies\n+    -> [NormalizedFilePath] -- ^ Module dependencies\n+    -> [(String, BS.ByteString)] -- ^ Data files\n+    -> String -- ^ Name of the main DALF\n+    -> String -- ^ SDK version\n+    -> IO BS.ByteString\n+createArchive dalf hash modRoot dalfDependencies fileDependencies dataFiles name sdkVersion"
  }
]