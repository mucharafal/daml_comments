[
  {
    "id" : "7c81a45a-7739-4cb1-b481-509bae90c44e",
    "prId" : 3477,
    "comments" : [
      {
        "id" : "07b9670f-4e70-41fa-b200-d4da65a81864",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "btw, in case youâ€™re still looking for what to work on next, we also need `TemplateKey` instances.",
        "createdAt" : "2019-11-19T08:04:24Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2a0601b4-46cb-47fd-a26a-2489b41459ad",
        "parentId" : "07b9670f-4e70-41fa-b200-d4da65a81864",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I'll discuss with Robin who is best placed to work on these.",
        "createdAt" : "2019-11-19T09:19:54Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +113,117 @@    | otherwise = Nothing\n  where\n    instances = templateInstances env externPkgId ++ choiceInstances env externPkgId\n\n    mod = envMod env"
  },
  {
    "id" : "3e9cbdd9-b43f-415d-b2c4-465a503a7bbf",
    "prId" : 3477,
    "comments" : [
      {
        "id" : "9dd6a1ce-eca6-444f-a870-9f0af1befbc8",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "You will have to import these now as `Sdk.DA.Internal.Prelude` and expose the modules with this alias in `generateAndInstallInstancesPackage` in Packaging.hs.",
        "createdAt" : "2019-11-19T12:22:47Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "caa4bfd1-1036-4a57-b880-db9718b55635",
        "parentId" : "9dd6a1ce-eca6-444f-a870-9f0af1befbc8",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I dont understand what is special about the 2 imports I added. \r\nMany cases of `DA.Internal.`... without an `Sdk.` prefix were already present in this file.\r\n\r\nPlease feel free to make the change you think is necessary in this PR.\r\n",
        "createdAt" : "2019-11-19T16:17:21Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "98ab2f90-b608-46f0-a285-41c8e5810a77",
        "parentId" : "9dd6a1ce-eca6-444f-a870-9f0af1befbc8",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Now I understand. This change is necessary after rebasing on master.",
        "createdAt" : "2019-11-19T16:30:14Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +139,143 @@        , \"import \\\"\" <> packageName <> \"\\\" \" <> modName\n        , \"import qualified DA.Internal.LF\"\n        , \"import qualified DA.Internal.Prelude\"\n        , \"import qualified DA.Internal.Template\"\n        , \"import qualified Sdk.DA.Internal.Template\""
  },
  {
    "id" : "f95e5cf5-1909-459b-a487-41872f98db81",
    "prId" : 3477,
    "comments" : [
      {
        "id" : "b9a01670-c77b-444a-92d9-075b47108fbb",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "we have copies of `lfTemplateType`, `mkExternalString` and `methodMapping` in `generateChoiceInstance` and `generateTemplateInstance`. We should factor these out.",
        "createdAt" : "2019-11-19T12:31:13Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "329fec1b-a356-4b39-b885-e54c975897ef",
        "parentId" : "b9a01670-c77b-444a-92d9-075b47108fbb",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done, except for `mkExternalString` which varies",
        "createdAt" : "2019-11-19T16:09:22Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +278,282 @@    lfTemplateType = mkLfTemplateType moduleName0 typeCon typeParams\n    mkExternalString :: T.Text -> String\n    mkExternalString funName =\n        (T.unpack $ LF.unPackageId externPkgId) <>\n        \":\" <> moduleNameStr <>"
  },
  {
    "id" : "82d5c487-b875-4335-8313-65e42b888f8d",
    "prId" : 3358,
    "comments" : [
      {
        "id" : "ab8ad59b-346b-4c9d-8ae0-341dd76827e8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This generates source containing _only_ the instances but not the datatype stubs right? Is the input to this the original DALF or the stub package containing the data type? Would be good to record this in a comment.",
        "createdAt" : "2019-11-06T13:52:14Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "70e03750-20b0-45cf-a9e4-7270e6267254",
        "parentId" : "ab8ad59b-346b-4c9d-8ae0-341dd76827e8",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Yes, and yes. I'll add a comment to make it clear.",
        "createdAt" : "2019-11-06T14:52:24Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8620208-8c2a-4594-9f7a-f4621a14ded6",
        "parentId" : "ab8ad59b-346b-4c9d-8ae0-341dd76827e8",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Actually, just for the stub you don't need the DALF, only when you convert to daml-lf.",
        "createdAt" : "2019-11-06T15:00:28Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0aeb99ed4d3a42210e8653d7873d2ba828d51d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +87,91 @@    ]\n\n-- | Generate the source for a package containing template instances for all templates defined in a\n-- package. It _only_ contains the instance stubs. The correct implementation happens in the\n-- conversion to daml-lf, where `extenal` calls are inlined to daml-lf contained in the dalf of the"
  },
  {
    "id" : "a1076286-c7fb-4e84-aa63-5b51eaf402bd",
    "prId" : 3358,
    "comments" : [
      {
        "id" : "46b75ee8-2494-46ff-8cbc-c69b4a706fdf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this case just an optimization? I donâ€™t see what goes wrong if we try to generate a module with no instances here. Would be good to document this.",
        "createdAt" : "2019-11-06T14:07:52Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3d0b3f48-07f4-4979-aa07-ef3f120eb97b",
        "parentId" : "46b75ee8-2494-46ff-8cbc-c69b4a706fdf",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "it's optimization, I'll add a comment.",
        "createdAt" : "2019-11-06T15:24:28Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0aeb99ed4d3a42210e8653d7873d2ba828d51d",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +120,124 @@              nubSort imports ++\n              map (showSDocForUser fakeDynFlags alwaysQualify . ppr) instances)\n    | otherwise = Nothing\n  where\n    instances = templInstances"
  },
  {
    "id" : "a461df56-53b5-41d5-870c-d884bce1ef08",
    "prId" : 3358,
    "comments" : [
      {
        "id" : "0ecd3ad8-366d-496a-bad1-31c88ce124e8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This whole function is almost identical to `generateGenInstanceModule` apart from the actual generation of the instances which is a separate function anyway. Can we factor out the common code?",
        "createdAt" : "2019-11-06T14:10:13Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c3d020b3-49e3-46fc-a8b9-54c94e1e30bb",
        "parentId" : "0ecd3ad8-366d-496a-bad1-31c88ce124e8",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "They are also slightly different in the qualification. I find harder to read and understand when I factor it out.",
        "createdAt" : "2019-11-06T16:18:08Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0aeb99ed4d3a42210e8653d7873d2ba828d51d",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +111,115 @@-- Return Nothing if there are no instances, so no unnecessary modules are created.\ngenerateTemplateInstanceModule ::\n       Env -> LF.PackageId -> Maybe (NormalizedFilePath, String)\ngenerateTemplateInstanceModule env externPkgId\n    | not $ null instances ="
  },
  {
    "id" : "e0b2f217-cdfe-4d09-ab0b-9774a46bf92c",
    "prId" : 3342,
    "comments" : [
      {
        "id" : "e2141da9-8206-4d13-b7b7-ce5d52d525d3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same question as below: Why canâ€™t we always use the first case?",
        "createdAt" : "2019-11-05T15:03:37Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "441bf850-87a3-42a0-b47d-9e4b301b67db",
        "parentId" : "e2141da9-8206-4d13-b7b7-ce5d52d525d3",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Same answer, because if you're compiling with the same sdk the instances modules will not be there. I'll add a comment.",
        "createdAt" : "2019-11-05T16:35:20Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +58,62 @@  where\n    header\n      | diffSdks = header0 ++ header1 ++ header2\n      | otherwise = header0 ++ header2\n      -- If we compile with packages from a single sdk version, the instances modules will not be"
  },
  {
    "id" : "7414e1dc-7eea-40b7-993d-bcd1e85b21f2",
    "prId" : 2884,
    "comments" : [
      {
        "id" : "16d18c70-e777-4f53-91a6-cfeddb0c302f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We really need better tests to catch this!",
        "createdAt" : "2019-09-11T13:15:10Z",
        "updatedAt" : "2019-09-11T13:15:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6f5451fffaf6994c322999fe6012b0e159c9df",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +93,97 @@upgradeTemplates :: String -> [String]\nupgradeTemplates n =\n    [ \"template instance \" <> n <> \"Upgrade = Upgrade A.\" <> n <> \" B.\" <> n\n    , \"template instance \" <> n <> \"Rollback = Rollback A.\" <> n <> \" B.\" <> n\n    , \"instance Convertible A.\" <> n <> \" B.\" <> n"
  },
  {
    "id" : "81681464-6f01-4bc0-87ef-8550871cafd6",
    "prId" : 2228,
    "comments" : [
      {
        "id" : "17c0eed0-54b6-4eeb-a96b-3dd4360884d3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'd mention that some of them are converted to types built into DAML-LF.",
        "createdAt" : "2019-07-19T17:00:06Z",
        "updatedAt" : "2019-07-19T17:02:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c9709b97d4d4b0beadf6ec27f63d90b1f4c16595",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +142,146 @@    -- =========\n    --\n    -- The following are datatypes that are not compiled to daml-lf, they will not show up in any\n    -- daml-lf package and can hence not be recovered. They are however needed to generate interface\n    -- files. If you delete any of the following definitions in GHC.Types, DA.Internal.LF or"
  },
  {
    "id" : "ae242f1c-cb01-4650-a20f-364052003edb",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "24d9c65a-f0d9-48e7-8b02-3d47b76bbfec",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It might be helpful to factor this into a helper function to make it easy to see which fields of the import decl are different between different imports and to capture the pattern of filtering out the import on the module itself.",
        "createdAt" : "2019-07-19T04:41:09Z",
        "updatedAt" : "2019-07-19T09:48:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "92780733-3733-4135-a16e-e4595cb02461",
        "parentId" : "24d9c65a-f0d9-48e7-8b02-3d47b76bbfec",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree.",
        "createdAt" : "2019-07-19T16:34:47Z",
        "updatedAt" : "2019-07-19T16:51:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 315,
    "diffHunk" : "@@ -1,1 +535,539 @@    additionalImports =\n        [ noLoc $\n        ImportDecl\n            { ideclExt = noExt\n            , ideclSourceSrc = NoSourceText"
  },
  {
    "id" : "34c3e636-cc24-4faa-bce7-68cd3739ee79",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "bd3eb54e-cbce-4288-b3db-1439790888aa",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Double negations like `DontQualify False` make my brain explode. :)\r\nWe should consider renaming this to `Qualify` and negate all the payloads in the future.",
        "createdAt" : "2019-07-19T16:24:07Z",
        "updatedAt" : "2019-07-19T16:51:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +151,155 @@        | otherwise = []\n\nnewtype DontQualify = DontQualify Bool\n\n-- | Extract all data defintions from a daml-lf module and generate a haskell source file from it."
  },
  {
    "id" : "a4687ce4-39f3-49fd-921b-56e01cc0bbbc",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "d1af95a4-0ea2-4101-8d59-974cdde14816",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we have an idea how this plays out if we add another builtin type to DAML-LF at some point in the future?",
        "createdAt" : "2019-07-19T16:25:04Z",
        "updatedAt" : "2019-07-19T16:51:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0fe0b893-95d1-41a0-a4fa-52a43ed947fb",
        "parentId" : "d1af95a4-0ea2-4101-8d59-974cdde14816",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Adding should be unproblematic, you would just add it here.",
        "createdAt" : "2019-07-22T09:35:36Z",
        "updatedAt" : "2019-07-22T09:35:37Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +142,146 @@            , \"data Update a = Update GHC.Types.Opaque\"\n            , \"data Scenario a = Scenario GHC.Types.Opaque\"\n            , \"data Party = Party GHC.Types.Opaque\"\n            ]\n        | LF.unModuleName (LF.moduleName m) == [\"DA\", \"Internal\", \"Template\"] ="
  },
  {
    "id" : "4af14615-f412-4000-8cf8-b80943eeefdf",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "c2a6fa82-81e3-426f-ab73-bf1608360486",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's only deal with serializable types. They can be spotted using https://github.com/digital-asset/daml/blob/98a8135cb58b76ad7203cba723c3484077099efe/compiler/daml-lf-ast/src/DA/Daml/LF/Ast/Base.hs#L613",
        "createdAt" : "2019-07-19T16:34:00Z",
        "updatedAt" : "2019-07-19T16:51:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "19875d58-fc0f-43c3-803f-db9a6873a500",
        "parentId" : "c2a6fa82-81e3-426f-ab73-bf1608360486",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "changed.",
        "createdAt" : "2019-07-22T10:00:52Z",
        "updatedAt" : "2019-07-22T10:00:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +206,210 @@        concat $ do\n            LF.DefDataType {..} <- NM.toList $ LF.moduleDataTypes m\n            guard $ not $ isTypeClass dataCons\n            let numberOfNameComponents = length (LF.unTypeConName dataTypeCon)\n            -- we should never encounter more than two name components in dalfs."
  },
  {
    "id" : "739e4b89-ef34-4ba7-b855-ad1413094581",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "04d72331-a653-4c03-a19c-d1e5d1ffda76",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's use `dataConsType` here:\r\nhttps://github.com/digital-asset/daml/blob/b641ba495b34c9b03fe14c916ee55318e2c2d800/compiler/daml-lf-ast/src/DA/Daml/LF/Ast/Optics.hs#L94",
        "createdAt" : "2019-07-19T16:48:40Z",
        "updatedAt" : "2019-07-19T16:51:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "762bd63d-054b-4d0d-86b3-581389e6b8fb",
        "parentId" : "04d72331-a653-4c03-a19c-d1e5d1ffda76",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "changed.",
        "createdAt" : "2019-07-22T09:56:25Z",
        "updatedAt" : "2019-07-22T09:56:25Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 381,
    "diffHunk" : "@@ -1,1 +594,598 @@         concat $ do\n             dataTy <- NM.toList $ LF.moduleDataTypes m\n             case LF.dataCons dataTy of\n                 LF.DataRecord fs -> map (toListOf builtinType . snd) fs\n                 LF.DataVariant vs -> map (toListOf builtinType . snd) vs"
  },
  {
    "id" : "63f7cdf4-21e3-4e09-a75b-159672d250bb",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "c7b40dd9-46f9-4b18-915e-e17f81b4f2d2",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```haskell\r\nmodRef `notElem` [LF.moduleName m, LF.ModuleName [\"GHC\", \"Prim\"]]\r\n```",
        "createdAt" : "2019-07-19T16:50:40Z",
        "updatedAt" : "2019-07-19T16:51:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "84d10dfe-0170-434c-a421-f36341d367ad",
        "parentId" : "c7b40dd9-46f9-4b18-915e-e17f81b4f2d2",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "changed.",
        "createdAt" : "2019-07-22T09:46:26Z",
        "updatedAt" : "2019-07-22T09:46:41Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 369,
    "diffHunk" : "@@ -1,1 +583,587 @@            } :: LImportDecl GhcPs\n        | (_unitId, modRef) <- modRefs\n        , modRef /= LF.moduleName m\n        , LF.unModuleName modRef /= [\"GHC\", \"Prim\"]\n        ]"
  },
  {
    "id" : "55c98a3f-b644-49bf-9027-5e4da59d2a92",
    "prId" : 2169,
    "comments" : [
      {
        "id" : "8b8d07b2-5c06-4667-883f-ac6121722ac5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n                                  in case (t :: HsType GhcPs) of\r\n```",
        "createdAt" : "2019-07-16T16:24:48Z",
        "updatedAt" : "2019-07-16T16:59:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "96796cb792561955bd36fd86c2aa7d64862d4762",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +361,365 @@                              otherTy ->\n                                  let t = convType otherTy\n                                   in case (t :: HsType GhcPs) of\n                                          HsRecTy _ext fs -> RecCon $ noLoc fs\n                                          _other -> PrefixCon [noLoc t]"
  },
  {
    "id" : "2aa5dfb8-cb48-404b-a212-9fbd59376bc6",
    "prId" : 2169,
    "comments" : [
      {
        "id" : "9217d0d5-ff56-4a0d-bb79-09233ab148d3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What's the difference between `NoExt` and `noExt`?",
        "createdAt" : "2019-07-16T16:28:50Z",
        "updatedAt" : "2019-07-16T16:59:20Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5b2ecdf9-27ea-408d-9236-15df9cc3f1c6",
        "parentId" : "9217d0d5-ff56-4a0d-bb79-09233ab148d3",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "none I think.",
        "createdAt" : "2019-07-16T16:49:37Z",
        "updatedAt" : "2019-07-16T16:59:20Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "96796cb792561955bd36fd86c2aa7d64862d4762",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +434,438 @@                    cs -> errTooManyNameComponents cs\n            LF.TApp ty1 ty2 ->\n                HsParTy noExt $\n                noLoc $ HsAppTy NoExt (noLoc $ convType ty1) (noLoc $ convType ty2)\n            LF.TBuiltin builtinTy -> convBuiltInTy builtinTy"
  },
  {
    "id" : "0cd33fb6-720e-4414-b8b9-45b9fdcc00e3",
    "prId" : 2151,
    "comments" : [
      {
        "id" : "21c2bc68-3466-436e-a78d-d9d35e1c7c2d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should fail hard if the type constructor name has more than one component, unless it's coming from a sum-of-products type.",
        "createdAt" : "2019-07-15T16:38:28Z",
        "updatedAt" : "2019-07-16T09:53:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "401c5844-69cf-45cb-8390-70742adfb1da",
        "parentId" : "21c2bc68-3466-436e-a78d-d9d35e1c7c2d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I'll do that in the next PR, where I fix the sum of products translation.",
        "createdAt" : "2019-07-16T09:45:14Z",
        "updatedAt" : "2019-07-16T09:53:08Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "739fd71f-1196-47ee-977f-e3f5ac090d71",
        "parentId" : "21c2bc68-3466-436e-a78d-d9d35e1c7c2d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Makes sense.",
        "createdAt" : "2019-07-16T09:49:41Z",
        "updatedAt" : "2019-07-16T09:53:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0a3d126b7a3f438fd5aeab809b4352d28723ba26",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +174,178 @@                    mkOccName varName $\n                    T.unpack $\n                    sanitize $ T.intercalate \".\" $ LF.unTypeConName dataTypeCon\n            let dataDecl =\n                    noLoc $"
  },
  {
    "id" : "68c86dbd-a079-4452-9d98-96ec75a42eec",
    "prId" : 2124,
    "comments" : [
      {
        "id" : "d5350e62-77ad-4f29-a5a8-bdfe4c3ee106",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like a reasonable function to factor out into `daml-lf-tools`.",
        "createdAt" : "2019-07-12T14:08:59Z",
        "updatedAt" : "2019-07-12T14:10:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2963b01e-7ac5-4047-a8df-4be95778728a",
        "parentId" : "d5350e62-77ad-4f29-a5a8-bdfe4c3ee106",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I'll do a bigger refactoring of everything once everything works smoothly.",
        "createdAt" : "2019-07-12T14:42:20Z",
        "updatedAt" : "2019-07-12T14:42:20Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "14f7dff5cdd0d0f492cab84fcc091650c2a50aec",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +117,121 @@    mod <- NM.toList $ LF.packageModules pkg\n    let fp =\n            toNormalizedFilePath $\n            (T.unpack $ T.intercalate \"/\" $ LF.unModuleName $ LF.moduleName mod) <.>\n            \".daml\""
  }
]