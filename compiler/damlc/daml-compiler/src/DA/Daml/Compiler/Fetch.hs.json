[
  {
    "id" : "2aed9173-ccc0-4503-a476-4d562d261c71",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "10ee9714-9d1e-4d5a-8b7a-1dd51794dc07",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems like a very arbitrary place for this to live in. Would it make sense to move this into the Haskell ledger bindings? Or maybe a helper library somewhere?",
        "createdAt" : "2020-03-27T07:44:25Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 25,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs"
  },
  {
    "id" : "24fb2743-eb5a-4c79-bc8d-1cea81dca14d",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "79a06ec6-22d9-44fe-b050-8b7d78ce55ec",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Instead of returning a list from here and then doing a partial pattern match afterwards, how about we just return `((PackageId, Package), [(PackageId, Package)])` (or a non-empty list if you prefer that) from `downloadAllReachablePackages`?",
        "createdAt" : "2020-03-27T07:45:42Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 38,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid"
  },
  {
    "id" : "0c20125f-d67b-4fc0-a0c1-de999f161241",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "ccdb8e93-d416-4d78-b1b2-4db970a3632e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        [ (name,bs,pkgId)\r\n        | (pid,pkg) <- xs, pid /= rootPid\r\n        , let name = T.pack (\"dep-\" <> T.unpack (LF.unPackageId pid))\r\n```",
        "createdAt" : "2020-03-27T07:47:32Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid\n+  [pkg] <- pure [ pkg | (pid,pkg) <- xs, pid == rootPid ]\n+  let (dalf,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+  let dalfDependencies :: [(T.Text,BS.ByteString,LF.PackageId)] =\n+        [ (txt,bs,pkgId)\n+        | (pid,pkg) <- xs, pid /= rootPid\n+        , let txt = T.pack (\"dep-\" <> T.unpack (LF.unPackageId pid))"
  },
  {
    "id" : "a61c9103-d1e3-476e-9b5c-7292abf5b4f9",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "41c982a7-8434-4a93-bdef-f4f0d310c7c5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The name and the version end up in the Manifest which at least atm is still used by the typescript codegen. Please use the package metadata if itâ€™s there instead of setting it to fixed values.",
        "createdAt" : "2020-03-27T07:51:51Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5a7e0e20-788e-4844-aa7d-f5412ed2bb8f",
        "parentId" : "41c982a7-8434-4a93-bdef-f4f0d310c7c5",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "The metadata which comes back from the ledger doesn't seem to contain the package name",
        "createdAt" : "2020-03-27T12:00:46Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f26d7ce8-9b16-4990-a1ac-21ef69789ab1",
        "parentId" : "41c982a7-8434-4a93-bdef-f4f0d310c7c5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "For DAML-LF 1.8 it does have package metadata.",
        "createdAt" : "2020-03-27T12:03:02Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d5005db1-1487-4e59-aac0-d85b471158f4",
        "parentId" : "41c982a7-8434-4a93-bdef-f4f0d310c7c5",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Do I need an explicit flag somewhere to select 1.8 so that the ledger returns metadata with the package name. Because when I tried it was `Nothing` ?",
        "createdAt" : "2020-03-27T13:29:17Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dd83c2e4-f592-4f5a-9066-670c9a8be838",
        "parentId" : "41c982a7-8434-4a93-bdef-f4f0d310c7c5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you rebased recently, DAML-LF 1.8 should be the default target. Maybe try explicitly compiling with `--target=1.8`.",
        "createdAt" : "2020-03-27T13:39:06Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid\n+  [pkg] <- pure [ pkg | (pid,pkg) <- xs, pid == rootPid ]\n+  let (dalf,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+  let dalfDependencies :: [(T.Text,BS.ByteString,LF.PackageId)] =\n+        [ (txt,bs,pkgId)\n+        | (pid,pkg) <- xs, pid /= rootPid\n+        , let txt = T.pack (\"dep-\" <> T.unpack (LF.unPackageId pid))\n+        , let (bsl,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+        , let bs = BSL.toStrict bsl\n+        ]\n+  let pName :: LF.PackageName = LF.PackageName $ T.pack \"reconstructed\""
  },
  {
    "id" : "20fb7e62-b98a-4eda-ae8b-aadb15b5749b",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "539a9c6e-53f0-42ff-9c7d-6d1a8af999f5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    loop :: Map LF.PackageId LF.Package -> Set LF.PackageId -> IO Map LF.PackageId LF.Package\r\n```\r\nNot really worried about performance here (although I wouldnâ€™t be surprised if people end up with a DAR referencing 100 packages) but using lists for maps and sets doesnâ€™t show you that itâ€™s unique. For pattern matching you can use `Set.minView`.",
        "createdAt" : "2020-03-27T07:58:55Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 72,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid\n+  [pkg] <- pure [ pkg | (pid,pkg) <- xs, pid == rootPid ]\n+  let (dalf,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+  let dalfDependencies :: [(T.Text,BS.ByteString,LF.PackageId)] =\n+        [ (txt,bs,pkgId)\n+        | (pid,pkg) <- xs, pid /= rootPid\n+        , let txt = T.pack (\"dep-\" <> T.unpack (LF.unPackageId pid))\n+        , let (bsl,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+        , let bs = BSL.toStrict bsl\n+        ]\n+  let pName :: LF.PackageName = LF.PackageName $ T.pack \"reconstructed\"\n+  let pVersion = Nothing\n+  let pSdkVersion = PackageSdkVersion SdkVersion.sdkVersion\n+  let srcRoot = error \"unexpected use of srcRoot when there are no sources\"\n+  let za = createArchive pName pVersion pSdkVersion pkgId dalf dalfDependencies srcRoot [] [] []\n+  createDarFile saveAs za\n+  return $ length xs\n+\n+-- | Download all Packages reachable from a PackageId; fail if any don't exist or can't be decoded.\n+downloadAllReachablePackages :: LedgerArgs -> LF.PackageId -> IO [(LF.PackageId,LF.Package)]\n+downloadAllReachablePackages ledgerArgs pid = loop [] [pid]\n+  where\n+    loop :: [(LF.PackageId,LF.Package)] -> [LF.PackageId] -> IO [(LF.PackageId,LF.Package)]"
  },
  {
    "id" : "ddc9f114-0ba1-45fe-92f1-a79e77afdd6c",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "fd6a0503-8fe1-48df-ad83-c625a9efee1f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    Nothing -> fail $ \"Unable to download package with identity: \" <> show pid\r\n```\r\nShould be fine here but in general `error` in IO is a bit fishy since it throws when evaluated rather than when executed.",
        "createdAt" : "2020-03-27T08:02:31Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "02a6d32e-fddb-481f-92be-9606a600a914",
        "parentId" : "fd6a0503-8fe1-48df-ad83-c625a9efee1f",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-27T12:00:59Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid\n+  [pkg] <- pure [ pkg | (pid,pkg) <- xs, pid == rootPid ]\n+  let (dalf,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+  let dalfDependencies :: [(T.Text,BS.ByteString,LF.PackageId)] =\n+        [ (txt,bs,pkgId)\n+        | (pid,pkg) <- xs, pid /= rootPid\n+        , let txt = T.pack (\"dep-\" <> T.unpack (LF.unPackageId pid))\n+        , let (bsl,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+        , let bs = BSL.toStrict bsl\n+        ]\n+  let pName :: LF.PackageName = LF.PackageName $ T.pack \"reconstructed\"\n+  let pVersion = Nothing\n+  let pSdkVersion = PackageSdkVersion SdkVersion.sdkVersion\n+  let srcRoot = error \"unexpected use of srcRoot when there are no sources\"\n+  let za = createArchive pName pVersion pSdkVersion pkgId dalf dalfDependencies srcRoot [] [] []\n+  createDarFile saveAs za\n+  return $ length xs\n+\n+-- | Download all Packages reachable from a PackageId; fail if any don't exist or can't be decoded.\n+downloadAllReachablePackages :: LedgerArgs -> LF.PackageId -> IO [(LF.PackageId,LF.Package)]\n+downloadAllReachablePackages ledgerArgs pid = loop [] [pid]\n+  where\n+    loop :: [(LF.PackageId,LF.Package)] -> [LF.PackageId] -> IO [(LF.PackageId,LF.Package)]\n+    loop acc = \\case\n+      [] -> return acc\n+      pid:morePids ->\n+        if pid `elem` [ pid | (pid,_) <- acc ]\n+        then loop acc morePids\n+        else do\n+          pkg <- downloadPackage ledgerArgs pid\n+          loop ((pid,pkg):acc) (packageRefs pkg ++ morePids)\n+\n+packageRefs :: LF.Package -> [LF.PackageId]\n+packageRefs pkg = nubSort [ pid | LF.PRImport pid <- toListOf LF.packageRefs pkg ]\n+\n+-- | Download the Package identified by a PackageId; fail if it doesn't exist or can't be decoded.\n+downloadPackage :: LedgerArgs -> LF.PackageId -> IO LF.Package\n+downloadPackage ledgerArgs pid = do\n+  let ls :: L.LedgerService (Maybe L.Package) = do\n+        lid <- L.getLedgerIdentity\n+        L.getPackage lid $ convPid pid\n+  runWithLedgerArgs ledgerArgs ls >>= \\case\n+    Nothing -> error $ \"Unable to download package with identity: \" <> show pid"
  },
  {
    "id" : "c4f0826b-9ff9-4309-87a4-b4f08e26fe31",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "b4783356-5551-44a8-a86a-a9af389c457a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        Left err -> fail $ show err\r\n```",
        "createdAt" : "2020-03-27T08:02:43Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "32956e07-c549-487e-bb53-6bdd9ffcda20",
        "parentId" : "b4783356-5551-44a8-a86a-a9af389c457a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-03-27T12:01:06Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid\n+  [pkg] <- pure [ pkg | (pid,pkg) <- xs, pid == rootPid ]\n+  let (dalf,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+  let dalfDependencies :: [(T.Text,BS.ByteString,LF.PackageId)] =\n+        [ (txt,bs,pkgId)\n+        | (pid,pkg) <- xs, pid /= rootPid\n+        , let txt = T.pack (\"dep-\" <> T.unpack (LF.unPackageId pid))\n+        , let (bsl,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+        , let bs = BSL.toStrict bsl\n+        ]\n+  let pName :: LF.PackageName = LF.PackageName $ T.pack \"reconstructed\"\n+  let pVersion = Nothing\n+  let pSdkVersion = PackageSdkVersion SdkVersion.sdkVersion\n+  let srcRoot = error \"unexpected use of srcRoot when there are no sources\"\n+  let za = createArchive pName pVersion pSdkVersion pkgId dalf dalfDependencies srcRoot [] [] []\n+  createDarFile saveAs za\n+  return $ length xs\n+\n+-- | Download all Packages reachable from a PackageId; fail if any don't exist or can't be decoded.\n+downloadAllReachablePackages :: LedgerArgs -> LF.PackageId -> IO [(LF.PackageId,LF.Package)]\n+downloadAllReachablePackages ledgerArgs pid = loop [] [pid]\n+  where\n+    loop :: [(LF.PackageId,LF.Package)] -> [LF.PackageId] -> IO [(LF.PackageId,LF.Package)]\n+    loop acc = \\case\n+      [] -> return acc\n+      pid:morePids ->\n+        if pid `elem` [ pid | (pid,_) <- acc ]\n+        then loop acc morePids\n+        else do\n+          pkg <- downloadPackage ledgerArgs pid\n+          loop ((pid,pkg):acc) (packageRefs pkg ++ morePids)\n+\n+packageRefs :: LF.Package -> [LF.PackageId]\n+packageRefs pkg = nubSort [ pid | LF.PRImport pid <- toListOf LF.packageRefs pkg ]\n+\n+-- | Download the Package identified by a PackageId; fail if it doesn't exist or can't be decoded.\n+downloadPackage :: LedgerArgs -> LF.PackageId -> IO LF.Package\n+downloadPackage ledgerArgs pid = do\n+  let ls :: L.LedgerService (Maybe L.Package) = do\n+        lid <- L.getLedgerIdentity\n+        L.getPackage lid $ convPid pid\n+  runWithLedgerArgs ledgerArgs ls >>= \\case\n+    Nothing -> error $ \"Unable to download package with identity: \" <> show pid\n+    Just (L.Package bs) -> do\n+      let mode = LFArchive.DecodeAsMain\n+      case LFArchive.decodePackage mode pid bs of\n+        Left err -> error $ show err"
  },
  {
    "id" : "020ad2b6-daad-4826-8eaa-1944bc7c5143",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "8f6fa510-6834-45e8-a7a9-c6b27619636d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "At some point, Iâ€™m going to patch that protobuf library just so I donâ€™t have to deal with lazy text values :slightly_smiling_face: ",
        "createdAt" : "2020-03-27T08:03:17Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 100,
    "diffHunk" : "@@ -0,0 +1,100 @@\n+-- Copyright (c) 2020 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid\n+  [pkg] <- pure [ pkg | (pid,pkg) <- xs, pid == rootPid ]\n+  let (dalf,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+  let dalfDependencies :: [(T.Text,BS.ByteString,LF.PackageId)] =\n+        [ (txt,bs,pkgId)\n+        | (pid,pkg) <- xs, pid /= rootPid\n+        , let txt = T.pack (\"dep-\" <> T.unpack (LF.unPackageId pid))\n+        , let (bsl,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+        , let bs = BSL.toStrict bsl\n+        ]\n+  let pName :: LF.PackageName = LF.PackageName $ T.pack \"reconstructed\"\n+  let pVersion = Nothing\n+  let pSdkVersion = PackageSdkVersion SdkVersion.sdkVersion\n+  let srcRoot = error \"unexpected use of srcRoot when there are no sources\"\n+  let za = createArchive pName pVersion pSdkVersion pkgId dalf dalfDependencies srcRoot [] [] []\n+  createDarFile saveAs za\n+  return $ length xs\n+\n+-- | Download all Packages reachable from a PackageId; fail if any don't exist or can't be decoded.\n+downloadAllReachablePackages :: LedgerArgs -> LF.PackageId -> IO [(LF.PackageId,LF.Package)]\n+downloadAllReachablePackages ledgerArgs pid = loop [] [pid]\n+  where\n+    loop :: [(LF.PackageId,LF.Package)] -> [LF.PackageId] -> IO [(LF.PackageId,LF.Package)]\n+    loop acc = \\case\n+      [] -> return acc\n+      pid:morePids ->\n+        if pid `elem` [ pid | (pid,_) <- acc ]\n+        then loop acc morePids\n+        else do\n+          pkg <- downloadPackage ledgerArgs pid\n+          loop ((pid,pkg):acc) (packageRefs pkg ++ morePids)\n+\n+packageRefs :: LF.Package -> [LF.PackageId]\n+packageRefs pkg = nubSort [ pid | LF.PRImport pid <- toListOf LF.packageRefs pkg ]\n+\n+-- | Download the Package identified by a PackageId; fail if it doesn't exist or can't be decoded.\n+downloadPackage :: LedgerArgs -> LF.PackageId -> IO LF.Package\n+downloadPackage ledgerArgs pid = do\n+  let ls :: L.LedgerService (Maybe L.Package) = do\n+        lid <- L.getLedgerIdentity\n+        L.getPackage lid $ convPid pid\n+  runWithLedgerArgs ledgerArgs ls >>= \\case\n+    Nothing -> error $ \"Unable to download package with identity: \" <> show pid\n+    Just (L.Package bs) -> do\n+      let mode = LFArchive.DecodeAsMain\n+      case LFArchive.decodePackage mode pid bs of\n+        Left err -> error $ show err\n+        Right pkg -> return pkg\n+  where\n+    convPid :: LF.PackageId -> L.PackageId\n+    convPid (LF.PackageId text) = L.PackageId $ TL.fromStrict text"
  },
  {
    "id" : "79d7ab26-be3d-4ceb-a705-4c731b71a2b8",
    "prId" : 5225,
    "comments" : [
      {
        "id" : "adb62459-b631-4713-9d9c-6ab18d34b577",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1: Thanks!",
        "createdAt" : "2020-03-27T16:28:42Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12094270-1a68-41d6-a689-1ac9e16517cf",
        "parentId" : "adb62459-b631-4713-9d9c-6ab18d34b577",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "woo hoo :)",
        "createdAt" : "2020-03-27T16:31:43Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "83935854-b4d4-4932-89f7-8942fafc4b37",
        "parentId" : "adb62459-b631-4713-9d9c-6ab18d34b577",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Now, just hope I'll finally get green on on the CI...",
        "createdAt" : "2020-03-27T16:32:12Z",
        "updatedAt" : "2020-03-27T17:24:55Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "10d4db63259ee00af10a40ad04d1b5e3a64d75dc",
    "line" : 48,
    "diffHunk" : "@@ -0,0 +1,112 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module DA.Daml.Compiler.Fetch (\n+  LedgerArgs(..), runWithLedgerArgs,\n+  createDarFile,\n+  fetchDar\n+  ) where\n+\n+import Control.Lens (toListOf)\n+import Data.List.Extra (nubSort)\n+import Data.String (fromString)\n+import qualified Data.ByteString as BS\n+import qualified Data.ByteString.Lazy as BSL\n+import qualified Data.Text as T\n+import qualified Data.Text.Lazy as TL\n+\n+import DA.Daml.Compiler.Dar (PackageSdkVersion(..),createDarFile,createArchive)\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Ast.Optics as LF (packageRefs)\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified DA.Ledger as L\n+import qualified SdkVersion\n+\n+data LedgerArgs = LedgerArgs\n+  { host :: String\n+  , port :: Int\n+  , tokM :: Maybe L.Token\n+  , sslConfigM :: Maybe L.ClientSSLConfig\n+  }\n+\n+instance Show LedgerArgs where\n+  show LedgerArgs{host,port} = host <> \":\" <> show port\n+\n+-- | Reconstruct a DAR file by downloading packages from a ledger. Returns how many packages fetched.\n+fetchDar :: LedgerArgs -> LF.PackageId -> FilePath -> IO Int\n+fetchDar ledgerArgs rootPid saveAs = do\n+  xs <- downloadAllReachablePackages ledgerArgs rootPid\n+  [pkg] <- pure [ pkg | (pid,pkg) <- xs, pid == rootPid ]\n+  let (dalf,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+  let dalfDependencies :: [(T.Text,BS.ByteString,LF.PackageId)] =\n+        [ (txt,bs,pkgId)\n+        | (pid,pkg) <- xs, pid /= rootPid\n+        , let txt = recoverPackageName pkg (\"dep\",pid)\n+        , let (bsl,pkgId) = LFArchive.encodeArchiveAndHash pkg\n+        , let bs = BSL.toStrict bsl\n+        ]\n+  let (pName,pVersion) = do"
  }
]