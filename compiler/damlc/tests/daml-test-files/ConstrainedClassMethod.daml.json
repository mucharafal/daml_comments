[
  {
    "id" : "f388b5e2-9d50-4a59-931a-9d48a0494c5e",
    "prId" : 4023,
    "comments" : [
      {
        "id" : "06c84c36-35da-4273-9b66-1f633da244b1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We decided to just disable this for now. We don’t use this on our large internal DAML codebase. There is a reasonable workaround with manual dictionary passing and if it does become a record we could either handle this in the LF conversion or support infinite types (something like OCaml’s `-rectypes`).",
        "createdAt" : "2020-01-23T13:19:01Z",
        "updatedAt" : "2020-01-24T08:42:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1299c83e-51cd-4e67-b4d3-172e40e66e6a",
        "parentId" : "06c84c36-35da-4273-9b66-1f633da244b1",
        "author" : null,
        "body" : "Seems reasonable to me. I don't know of any natural examples of a class that requires itself as a constraint.",
        "createdAt" : "2020-01-24T08:36:42Z",
        "updatedAt" : "2020-01-24T08:42:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "7756a58dadb0273a3e473dd5238baa88e5f39809",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +9,13 @@    bar : Eq t => t -> t\n\n-- This would create a recursive type synonym.\n-- For now, we do not support this. As a workaround\n-- you can do manual dictionary passing."
  },
  {
    "id" : "56f13603-2f5a-4fc0-a229-74c4c55ff1ea",
    "prId" : 2632,
    "comments" : [
      {
        "id" : "289ab5b5-a59f-4893-b0b7-153c65497a4b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "fwiw it’s not that much of an edge case `foldMap` is the first non-artifical example that comes to mind.",
        "createdAt" : "2019-08-22T12:34:09Z",
        "updatedAt" : "2019-08-22T13:17:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d2d07e1a-7924-45d5-9c66-03b1b40bb1db",
        "parentId" : "289ab5b5-a59f-4893-b0b7-153c65497a4b",
        "author" : null,
        "body" : "Good point! 👍 ",
        "createdAt" : "2019-08-22T13:17:59Z",
        "updatedAt" : "2019-08-22T13:17:59Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bbcd2c41d3a0b442a584d575d784209b0d007d0b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@module ConstrainedClassMethod where\n\nclass A t where\n    foo : t -> t\n    bar : Eq t => t -> t"
  }
]