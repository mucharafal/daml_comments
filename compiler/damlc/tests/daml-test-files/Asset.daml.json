[
  {
    "id" : "37ade371-f420-48d6-bd59-5dfcb2230be4",
    "prId" : 2727,
    "comments" : [
      {
        "id" : "355c9b04-e679-47bf-abc1-fd00f3af4e29",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not relevant here since this is just a test but once we start moving towards a library for generic templates (docs are somewhere in the middle), I’m not a fan of relying on `HasField` instances here. E.g. consider your test below where you only have self-issued assets. You can’t make a type just for those since you force users to have both `issuer` and `owner` fields separately.\r\nA more compelling example would be a type where `amount` can be derived from other quantities but you force users to have a redundant field that can get out of sync.",
        "createdAt" : "2019-09-02T17:07:55Z",
        "updatedAt" : "2019-09-02T18:11:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ecae9c4f-b2ba-4cbe-a1b6-5ac2f6dbd261",
        "parentId" : "355c9b04-e679-47bf-abc1-fd00f3af4e29",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Yeah, I agree these type classes are too restrictive at the moment. We'll need to find a good interface for our generic template library.",
        "createdAt" : "2019-09-02T17:17:32Z",
        "updatedAt" : "2019-09-02T18:11:55Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5a087632644b067d0bc550b6a55a377383641312",
    "line" : 11,
    "diffHunk" : "@@ -0,0 +1,13 @@\n+daml 1.2\n+module Asset where\n+\n+import DA.Record\n+\n+-- These are some simple typeclasses that can be used as preconditions for\n+-- generic templates, for example in the Fungible and Transferrable templates.\n+-- It would be better to write these as constraint synonyms, but DAML doesn't\n+-- allow them at the moment.\n+\n+class (Eq t, HasField \"issuer\" t Party, HasField \"owner\" t Party) => Asset t"
  },
  {
    "id" : "f287464a-7f47-48cf-8566-fd355cdd5e5f",
    "prId" : 2727,
    "comments" : [
      {
        "id" : "7163ff87-3f8b-4f09-ba22-0ec59642fd59",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If we move this to a library we might want to generalize `Amount` to something with an `Additive` instance.",
        "createdAt" : "2019-09-02T17:10:28Z",
        "updatedAt" : "2019-09-02T18:11:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5a087632644b067d0bc550b6a55a377383641312",
    "line" : 13,
    "diffHunk" : "@@ -0,0 +1,13 @@\n+daml 1.2\n+module Asset where\n+\n+import DA.Record\n+\n+-- These are some simple typeclasses that can be used as preconditions for\n+-- generic templates, for example in the Fungible and Transferrable templates.\n+-- It would be better to write these as constraint synonyms, but DAML doesn't\n+-- allow them at the moment.\n+\n+class (Eq t, HasField \"issuer\" t Party, HasField \"owner\" t Party) => Asset t\n+\n+class (Asset t, HasField \"amount\" t Decimal) => Quantity t"
  }
]