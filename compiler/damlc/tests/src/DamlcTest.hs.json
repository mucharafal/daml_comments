[
  {
    "id" : "7383bd43-5058-4de3-899f-c26285f6ce85",
    "prId" : 4654,
    "comments" : [
      {
        "id" : "9edb7034-07f7-48a4-b6b8-64c1748e72e7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is definitely not going to work on WIndows. You can just call `removeFile` here https://hackage.haskell.org/package/directory-1.3.6.0/docs/System-Directory.html#v:removeFile",
        "createdAt" : "2020-02-21T15:37:49Z",
        "updatedAt" : "2020-02-27T10:23:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2cff90af-d199-4c8b-b2a4-9166edfb3b56",
        "parentId" : "9edb7034-07f7-48a4-b6b8-64c1748e72e7",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "yes",
        "createdAt" : "2020-02-25T19:34:53Z",
        "updatedAt" : "2020-02-27T10:23:19Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c3d3a0f5929bb9828dde33019f7bf542771a8edb",
    "line" : null,
    "diffHunk" : "@@ -26,7 +26,113 @@ main = do\n     defaultMain (tests damlc)\n \n tests :: FilePath -> TestTree\n-tests damlc = testGroup \"damlc test\" $\n+tests damlc = testGroup \"damlc\" $ map (\\f -> f damlc)\n+  [ testsForDamlcValidate\n+  , testsForDamlcTest\n+  ]\n+\n+testsForDamlcValidate :: FilePath -> TestTree\n+testsForDamlcValidate damlc = testGroup \"damlc validate-dar\"\n+  [ testCase \"Non-existent file\" $ do\n+      (exitCode, stdout, stderr) <- readProcessWithExitCode damlc [\"validate-dar\", \"does-not-exist.dar\"] \"\"\n+      exitCode @?= ExitFailure 1\n+      assertInfixOf \"does not exist\" stderr\n+      stdout @?= \"\"\n+\n+  , testCaseSteps \"Good\" $ \\step -> withTempDir $ \\projDir -> do\n+      step \"prepare\"\n+      writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: good\"\n+        , \"version: 0.0.1\"\n+        , \"source: .\"\n+        , \"dependencies: [daml-prim, daml-stdlib]\"\n+        ]\n+      writeFileUTF8 (projDir </> \"Good.daml\") $ unlines\n+        [ \"daml 1.2 module Good where\"\n+        , \"good = 1\"\n+        ]\n+      step \"build\"\n+      callProcessSilent damlc [\"build\", \"--project-root\", projDir]\n+      let dar = projDir </> \".daml/dist/good-0.0.1.dar\"\n+      step \"validate\"\n+      (exitCode, stdout, stderr) <- readProcessWithExitCode damlc [\"validate-dar\", dar] \"\"\n+      exitCode @?= ExitSuccess\n+      assertInfixOf \"DAR is valid\" stdout\n+      stderr @?= \"\"\n+\n+  , testCaseSteps \"Bad, DAR contains a bad DALF\" $ \\step -> withTempDir $ \\projDir -> do\n+      step \"prepare\"\n+      writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: good\"\n+        , \"version: 0.0.1\"\n+        , \"source: .\"\n+        , \"dependencies: [daml-prim, daml-stdlib]\"\n+        ]\n+      writeFileUTF8 (projDir </> \"Good.daml\") $ unlines\n+        [ \"daml 1.2 module Good where\"\n+        , \"good = 1\"\n+        ]\n+      step \"build\"\n+      callProcessSilent damlc [\"build\", \"--project-root\", projDir]\n+      let origDar = projDir </> \".daml/dist/good-0.0.1.dar\"\n+      let tmpDirForUnzipping = projDir </> \"temp-dir-for-unzipping\"\n+      let hackedDar = projDir </> \"hacked.dar\"\n+      step \"unzip\"\n+      callProcess \"/usr/bin/unzip\" [\"-q\", origDar, \"-d\", tmpDirForUnzipping]\n+      step \"add bad dalf\"\n+      writeFileUTF8 (tmpDirForUnzipping </> \"rubbish.dalf\") $ unlines\n+        [ \"I am not a DALF file.\"\n+        , \"I shouldn't be in the archive with a .dalf extension.\" ]\n+      step \"re-zip\"\n+      callProcess \"/usr/bin/zip\" [\"-q\", \"-r\", hackedDar, tmpDirForUnzipping]\n+      step \"validate\"\n+      (exitCode, stdout, stderr) <- readProcessWithExitCode damlc [\"validate-dar\", hackedDar] \"\"\n+      exitCode @?= ExitFailure 1\n+      assertInfixOf \"Invalid DAR\" stderr\n+      assertInfixOf \"DALF entry cannot be decoded\" stderr\n+      stdout @?= \"\"\n+\n+  , testCaseSteps \"Bad, unclosed\" $ \\step -> withTempDir $ \\projDir -> do\n+      step \"prepare\"\n+      writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: good\"\n+        , \"version: 0.0.1\"\n+        , \"source: .\"\n+        , \"dependencies: [daml-prim, daml-stdlib]\"\n+        ]\n+      writeFileUTF8 (projDir </> \"Good.daml\") $ unlines\n+        [ \"daml 1.2 module Good where\"\n+        , \"good = 1\"\n+        ]\n+      step \"build\"\n+      callProcessSilent damlc [\"build\", \"--project-root\", projDir]\n+      let origDar = projDir </> \".daml/dist/good-0.0.1.dar\"\n+      let tmpDirForUnzipping = projDir </> \"temp-dir-for-unzipping\"\n+      let hackedDar = projDir </> \"hacked.dar\"\n+      step \"unzip\"\n+      callProcess \"/usr/bin/unzip\" [\"-q\", origDar, \"-d\", tmpDirForUnzipping]\n+      step \"find\"\n+      (_,findOut,_) <- readProcessWithExitCode\"/usr/bin/find\" [tmpDirForUnzipping] \"\"\n+      step \"select file\"\n+      [selectedFile] <- pure [ filename | filename <- lines findOut, \"Date-Types\" `isInfixOf` filename ]\n+      step \"remove file\"\n+      callProcess \"/bin/rm\" [selectedFile]"
  },
  {
    "id" : "e7c8d129-401b-4083-8dbe-39d8c51a6d87",
    "prId" : 4654,
    "comments" : [
      {
        "id" : "534afd17-29df-4306-93f4-8bf0adc9dfd1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same issue here, this will not work on Windows (and `/usr/bin` doesn’t even work on Linux on things like nixos). You need to get this from `dev-env` by adding `@zip_dev_env///:zip` to `data` of this test and then find it using `locate-runfiles` or alternatively you can just use one of the Haskell zip libs e.g. `zip`.",
        "createdAt" : "2020-02-21T15:40:44Z",
        "updatedAt" : "2020-02-27T10:23:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fc07c17f-4487-433b-b3be-7da605656df1",
        "parentId" : "534afd17-29df-4306-93f4-8bf0adc9dfd1",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Switch to using `\"zip-archive\"` haskell library - much simpler!",
        "createdAt" : "2020-02-25T19:36:05Z",
        "updatedAt" : "2020-02-27T10:23:19Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c3d3a0f5929bb9828dde33019f7bf542771a8edb",
    "line" : null,
    "diffHunk" : "@@ -26,7 +26,113 @@ main = do\n     defaultMain (tests damlc)\n \n tests :: FilePath -> TestTree\n-tests damlc = testGroup \"damlc test\" $\n+tests damlc = testGroup \"damlc\" $ map (\\f -> f damlc)\n+  [ testsForDamlcValidate\n+  , testsForDamlcTest\n+  ]\n+\n+testsForDamlcValidate :: FilePath -> TestTree\n+testsForDamlcValidate damlc = testGroup \"damlc validate-dar\"\n+  [ testCase \"Non-existent file\" $ do\n+      (exitCode, stdout, stderr) <- readProcessWithExitCode damlc [\"validate-dar\", \"does-not-exist.dar\"] \"\"\n+      exitCode @?= ExitFailure 1\n+      assertInfixOf \"does not exist\" stderr\n+      stdout @?= \"\"\n+\n+  , testCaseSteps \"Good\" $ \\step -> withTempDir $ \\projDir -> do\n+      step \"prepare\"\n+      writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: good\"\n+        , \"version: 0.0.1\"\n+        , \"source: .\"\n+        , \"dependencies: [daml-prim, daml-stdlib]\"\n+        ]\n+      writeFileUTF8 (projDir </> \"Good.daml\") $ unlines\n+        [ \"daml 1.2 module Good where\"\n+        , \"good = 1\"\n+        ]\n+      step \"build\"\n+      callProcessSilent damlc [\"build\", \"--project-root\", projDir]\n+      let dar = projDir </> \".daml/dist/good-0.0.1.dar\"\n+      step \"validate\"\n+      (exitCode, stdout, stderr) <- readProcessWithExitCode damlc [\"validate-dar\", dar] \"\"\n+      exitCode @?= ExitSuccess\n+      assertInfixOf \"DAR is valid\" stdout\n+      stderr @?= \"\"\n+\n+  , testCaseSteps \"Bad, DAR contains a bad DALF\" $ \\step -> withTempDir $ \\projDir -> do\n+      step \"prepare\"\n+      writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: good\"\n+        , \"version: 0.0.1\"\n+        , \"source: .\"\n+        , \"dependencies: [daml-prim, daml-stdlib]\"\n+        ]\n+      writeFileUTF8 (projDir </> \"Good.daml\") $ unlines\n+        [ \"daml 1.2 module Good where\"\n+        , \"good = 1\"\n+        ]\n+      step \"build\"\n+      callProcessSilent damlc [\"build\", \"--project-root\", projDir]\n+      let origDar = projDir </> \".daml/dist/good-0.0.1.dar\"\n+      let tmpDirForUnzipping = projDir </> \"temp-dir-for-unzipping\"\n+      let hackedDar = projDir </> \"hacked.dar\"\n+      step \"unzip\"\n+      callProcess \"/usr/bin/unzip\" [\"-q\", origDar, \"-d\", tmpDirForUnzipping]\n+      step \"add bad dalf\"\n+      writeFileUTF8 (tmpDirForUnzipping </> \"rubbish.dalf\") $ unlines\n+        [ \"I am not a DALF file.\"\n+        , \"I shouldn't be in the archive with a .dalf extension.\" ]\n+      step \"re-zip\"\n+      callProcess \"/usr/bin/zip\" [\"-q\", \"-r\", hackedDar, tmpDirForUnzipping]\n+      step \"validate\"\n+      (exitCode, stdout, stderr) <- readProcessWithExitCode damlc [\"validate-dar\", hackedDar] \"\"\n+      exitCode @?= ExitFailure 1\n+      assertInfixOf \"Invalid DAR\" stderr\n+      assertInfixOf \"DALF entry cannot be decoded\" stderr\n+      stdout @?= \"\"\n+\n+  , testCaseSteps \"Bad, unclosed\" $ \\step -> withTempDir $ \\projDir -> do\n+      step \"prepare\"\n+      writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+        [ \"sdk-version: \" <> sdkVersion\n+        , \"name: good\"\n+        , \"version: 0.0.1\"\n+        , \"source: .\"\n+        , \"dependencies: [daml-prim, daml-stdlib]\"\n+        ]\n+      writeFileUTF8 (projDir </> \"Good.daml\") $ unlines\n+        [ \"daml 1.2 module Good where\"\n+        , \"good = 1\"\n+        ]\n+      step \"build\"\n+      callProcessSilent damlc [\"build\", \"--project-root\", projDir]\n+      let origDar = projDir </> \".daml/dist/good-0.0.1.dar\"\n+      let tmpDirForUnzipping = projDir </> \"temp-dir-for-unzipping\"\n+      let hackedDar = projDir </> \"hacked.dar\"\n+      step \"unzip\"\n+      callProcess \"/usr/bin/unzip\" [\"-q\", origDar, \"-d\", tmpDirForUnzipping]\n+      step \"find\"\n+      (_,findOut,_) <- readProcessWithExitCode\"/usr/bin/find\" [tmpDirForUnzipping] \"\"\n+      step \"select file\"\n+      [selectedFile] <- pure [ filename | filename <- lines findOut, \"Date-Types\" `isInfixOf` filename ]\n+      step \"remove file\"\n+      callProcess \"/bin/rm\" [selectedFile]\n+      step \"re-zip\"\n+      callProcess \"/usr/bin/zip\" [\"-q\", \"-r\", hackedDar, tmpDirForUnzipping]"
  },
  {
    "id" : "cfed10e8-618e-480a-af61-01017d894789",
    "prId" : 4654,
    "comments" : [
      {
        "id" : "7ae0639a-bf5e-48e7-8b9d-ea102207c459",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Generally, I wouldn’t put “trivial” stuff into its own step. Steps are mostly useful if you have expensive calls that can fail individually, e.g., first a build step and then a validation step.",
        "createdAt" : "2020-02-26T09:10:51Z",
        "updatedAt" : "2020-02-27T10:23:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c3d3a0f5929bb9828dde33019f7bf542771a8edb",
    "line" : 40,
    "diffHunk" : "@@ -26,7 +29,104 @@ main = do\n     defaultMain (tests damlc)\n \n tests :: FilePath -> TestTree\n-tests damlc = testGroup \"damlc test\" $\n+tests damlc = testGroup \"damlc\" $ map (\\f -> f damlc)\n+  [ testsForDamlcValidate\n+  , testsForDamlcTest\n+  ]\n+\n+testsForDamlcValidate :: FilePath -> TestTree\n+testsForDamlcValidate damlc = testGroup \"damlc validate-dar\"\n+  [ testCase \"Non-existent file\" $ do\n+      (exitCode, stdout, stderr) <- readProcessWithExitCode damlc [\"validate-dar\", \"does-not-exist.dar\"] \"\"\n+      exitCode @?= ExitFailure 1\n+      assertInfixOf \"does not exist\" stderr\n+      stdout @?= \"\"\n+\n+  , testCaseSteps \"Good\" $ \\step -> withTempDir $ \\projDir -> do\n+      step \"prepare\""
  }
]