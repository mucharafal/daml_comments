[
  {
    "id" : "aa6e494a-a1c8-470a-9589-9df74a43740c",
    "prId" : 7815,
    "comments" : [
      {
        "id" : "75d85538-9c28-4f3f-a8c6-a91040dfbdaf",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What would happen here if we lost the MINIMAL pragma? I assume we would get a warning. Would that make this test fail?",
        "createdAt" : "2020-10-27T13:50:45Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "52499a42-325b-4fe3-a59f-49999656a12c",
        "parentId" : "75d85538-9c28-4f3f-a8c6-a91040dfbdaf",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "We get errors all around (tested it).",
        "createdAt" : "2020-10-28T09:40:45Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "323977ef2324d231a554726a69744fffb86d151b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1837,1841 @@        , \"instance MyClass B where\"\n        , \"    bar _ = 20\"\n        , \"    baz _ = 30\"\n        ]\n"
  },
  {
    "id" : "8799e905-fcf3-4b5a-915a-edff43327b4f",
    "prId" : 7664,
    "comments" : [
      {
        "id" : "d1f3aef1-52be-44d2-be1d-8696470edd62",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`P1` and `P2` seems unnecessarily confusing. Why not `Dep` and `Main` or `Importer` and `Importee`?",
        "createdAt" : "2020-10-13T11:25:10Z",
        "updatedAt" : "2020-10-13T11:26:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "121be0c1-0ace-4997-873e-96f1d77cf755",
        "parentId" : "d1f3aef1-52be-44d2-be1d-8696470edd62",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I thought about that as well. I'll change it to `Lib` and `Main`, I'm worried `Importer` and `Importee` are too close to get mixed up.",
        "createdAt" : "2020-10-13T11:29:13Z",
        "updatedAt" : "2020-10-13T11:29:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4c647d4e-68f5-4b4c-b703-d97805460f78",
        "parentId" : "d1f3aef1-52be-44d2-be1d-8696470edd62",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `automerge` label was faster than me... Here we go: https://github.com/digital-asset/daml/pull/7665",
        "createdAt" : "2020-10-13T11:37:24Z",
        "updatedAt" : "2020-10-13T11:37:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5b959cc8-ab1f-4f24-8a14-4080d739b897",
        "parentId" : "d1f3aef1-52be-44d2-be1d-8696470edd62",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not gaming my PR stats!",
        "createdAt" : "2020-10-13T11:37:49Z",
        "updatedAt" : "2020-10-13T11:37:49Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2436b398-209a-46af-9d16-cabaac02030a",
        "parentId" : "d1f3aef1-52be-44d2-be1d-8696470edd62",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "looking at the contributor stats you should :trollface: ",
        "createdAt" : "2020-10-13T11:40:38Z",
        "updatedAt" : "2020-10-13T11:40:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2f1c2e4d416f8ae752df9caeaf5a25afa9f4b044",
    "line" : 427,
    "diffHunk" : "@@ -1,1 +1771,1775 @@                , \"dependencies: [daml-prim, daml-stdlib]\"\n                ]\n            writeFileUTF8 (tmpDir </> \"type\" </> \"P1.daml\") $ unlines importee\n            withCurrentDirectory (tmpDir </> \"type\") $\n                callProcessSilent damlc [\"build\", \"-o\", \"type.dar\"]"
  },
  {
    "id" : "880f432c-dad2-401f-b00f-7433b115be3e",
    "prId" : 7320,
    "comments" : [
      {
        "id" : "56c7ba31-39c1-44a6-9bd5-5b0cb1d0f4d5",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I wonder if we can make a test that reliably generates an implicit parameter instance?\r\n\r\nOr perhaps, add some a check to this test that an implicit parameter instance is in the DAR.",
        "createdAt" : "2020-09-03T20:21:38Z",
        "updatedAt" : "2020-09-04T06:51:05Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "de6ae2ca-bcfa-43c8-b4e2-0f6c1c4c0292",
        "parentId" : "56c7ba31-39c1-44a6-9bd5-5b0cb1d0f4d5",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Ah, I wonder if we can slip it in to the \"Simple DALF\" test or something. (It's not so simple...) ",
        "createdAt" : "2020-09-03T20:22:53Z",
        "updatedAt" : "2020-09-04T06:51:05Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d06bda94-00f4-4975-9693-edbd8f1cbedf",
        "parentId" : "56c7ba31-39c1-44a6-9bd5-5b0cb1d0f4d5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ve added an assertion that we have 2 implicit instances. Simple DALF would work as well I guess but this has the advantage that it tests what our users actually hit which seems useful. I still don’t understand how to generate it reliably. Even in this example you can remove the type signature, the inferred type stays the same but now it’s inlined :shrug: ",
        "createdAt" : "2020-09-04T06:52:53Z",
        "updatedAt" : "2020-09-04T06:52:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a48f78df-9e50-4796-94e4-32d6cfa90fdb",
        "parentId" : "56c7ba31-39c1-44a6-9bd5-5b0cb1d0f4d5",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Awesome, thank you!",
        "createdAt" : "2020-09-04T08:34:16Z",
        "updatedAt" : "2020-09-04T08:34:16Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e0f939823ee767bead19253d2ada1b70ca3b7145",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1742,1746 @@            ]\n        withCurrentDirectory (tmpDir </> \"dep\") $\n            callProcessSilent damlc [\"build\", \"-o\", \"dep.dar\"]\n        Right Dalfs{..} <- readDalfs . Zip.toArchive <$> BSL.readFile (tmpDir </> \"dep\" </> \"dep.dar\")\n        (_pkgId, pkg) <- either (fail . show) pure (LFArchive.decodeArchive LFArchive.DecodeAsMain (BSL.toStrict mainDalf))"
  },
  {
    "id" : "3dc0a8d8-d51c-4f89-bba4-4d010b516d04",
    "prId" : 7303,
    "comments" : [
      {
        "id" : "e97b3363-ea31-41cf-9a1d-de9f14b5ee75",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we add a third case `D ()` and check that it behaves like `D` when imported as data-dependency?",
        "createdAt" : "2020-09-02T12:33:10Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "00d81549-7d06-4e3e-a9b0-dbf517375223",
        "parentId" : "e97b3363-ea31-41cf-9a1d-de9f14b5ee75",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I don't think so. `D ()` is something we're deprecating, and the fact that it's treated the same as `D` in the current compiler is mostly a mistake.",
        "createdAt" : "2020-09-02T12:59:33Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e4812e39-2f44-44da-92ed-bbdf9c8994c4",
        "parentId" : "e97b3363-ea31-41cf-9a1d-de9f14b5ee75",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I generally agree but would feel more comfortable to have a test as long as users can still write it, even though they get warned about it.",
        "createdAt" : "2020-09-02T13:34:57Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cc2f8648-011d-4e3c-b38b-9f9648cc8c29",
        "parentId" : "e97b3363-ea31-41cf-9a1d-de9f14b5ee75",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I added a test for `D ()` in the single constructor case, which is something we had talked about adding as a special case  (since we can't distinguish single-constructor variants from enums any other way, and there's no ambiguity in the single constructor case). (This actually also came up in one of the other tests, but better to add one here as well.)",
        "createdAt" : "2020-09-02T15:07:37Z",
        "updatedAt" : "2020-09-02T15:08:43Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "59926babb9e698dbaa9e85ecabacd3d575c25df0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1682,1686 @@        writeFileUTF8 (tmpDir </> \"type\" </> \"Foo.daml\") $ unlines\n            [ \"module Foo where\"\n            , \"data A = B | C Int\"\n            , \"data D = D ()\" -- single-constructor case uses explicit unit\n            ]"
  },
  {
    "id" : "8555e604-4a01-4398-86e8-24a12eff1e62",
    "prId" : 4901,
    "comments" : [
      {
        "id" : "07c7de22-4f12-41c7-80e9-66e37669c11f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "These tests will break once we make DAML-LF 1.8 the default target, won't they? Shall we nail down the second target to DAML-LF 1.7 to prevent this?",
        "createdAt" : "2020-03-11T08:58:52Z",
        "updatedAt" : "2020-03-11T08:59:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "15f9dcc4-82fd-44c4-bdce-8f405dafb224",
        "parentId" : "07c7de22-4f12-41c7-80e9-66e37669c11f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "oops, I thought I had done that but apparently I didn’t. I’ll fix it. Thanks!",
        "createdAt" : "2020-03-11T09:01:47Z",
        "updatedAt" : "2020-03-11T09:01:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ec4777b371e43fdf83120b0f43d09e043682ec",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +592,596 @@          buildProjectError projC \"\" \"dependencies with same unit id but conflicting package ids: a-0.0.1\"\n\n    , testCaseSteps \"Error on newer LF data-dependency\" $ \\step -> withTempDir $ \\tmpDir -> do\n          step \"Building 'a\"\n          createDirectoryIfMissing True (tmpDir </> \"a\")"
  },
  {
    "id" : "ce4ae567-5d2b-4681-a8a7-05ddd7822a0b",
    "prId" : 4714,
    "comments" : [
      {
        "id" : "112d02fe-9bdc-4877-8797-52e8daa64d79",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "🔥 ",
        "createdAt" : "2020-02-26T10:37:08Z",
        "updatedAt" : "2020-02-26T10:37:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fe8f2bc527269ea19ac1cb3cdd6c4ffb931d0b53",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +889,893 @@              ]\n          writeFileUTF8 (tmpDir </> \"dep\" </> \"Foo.daml\") $ unlines\n              [ \"daml 1.2\"\n              , \"module Foo where\"\n              , \"data X = X (Text, Int)\""
  },
  {
    "id" : "c6ad78eb-6c9d-4103-979b-e64a6ed812de",
    "prId" : 4710,
    "comments" : [
      {
        "id" : "d5d61ee1-fcc9-464c-958f-7bfca1985623",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe a usage of that type would be useful?",
        "createdAt" : "2020-02-26T09:52:46Z",
        "updatedAt" : "2020-02-26T09:59:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "279e1656-c3f4-4e32-a38f-61712da0b25a",
        "parentId" : "d5d61ee1-fcc9-464c-958f-7bfca1985623",
        "author" : null,
        "body" : "Added!",
        "createdAt" : "2020-02-26T09:59:13Z",
        "updatedAt" : "2020-02-26T09:59:13Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "42e4a4e11e9cf653a83d431041ac5d02fec4816c",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1322,1326 @@        writeFileUTF8 (tmpDir </> \"proj\" </> \"Main.daml\") $ unlines\n            [ \"daml 1.2\"\n            , \"module Main where\"\n            , \"import Foo\"\n            , \"mkA : A Int\""
  },
  {
    "id" : "3cf1d5ca-c7b6-4b04-a659-32a06af4d57a",
    "prId" : 4696,
    "comments" : [
      {
        "id" : "6028b271-2a75-457c-9194-aa97df729da1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We don’t strictly need both `a` and `b` here if we use `package`-flags to rename `Lib` we could directly reference both from `a`. However, this seems a bit more natural as something that users might run into themselves so I prefer to keep it like this.",
        "createdAt" : "2020-02-25T16:48:16Z",
        "updatedAt" : "2020-02-26T12:28:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d7b44c5e8520cd952f6f76d76efb8b230d06d237",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +952,956 @@          withCurrentDirectory projDir $ callProcessSilent damlc [\"build\", \"-o\", projDir </> \"a.dar\"]\n\n          step \"Building b\"\n          let projDir = tmpDir </> \"b\"\n          createDirectoryIfMissing True projDir"
  },
  {
    "id" : "b2fc8668-a676-4733-a391-3964c5ba0641",
    "prId" : 4421,
    "comments" : [
      {
        "id" : "770ea89a-cbbb-47e1-8d7a-ae770e6dd848",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We should really make a helper function for creating `daml.yaml` files in tests :slightly_smiling_face: ",
        "createdAt" : "2020-02-06T12:17:26Z",
        "updatedAt" : "2020-02-06T14:11:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ded024d96b658daf9adac370050f78ba296dd20d",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +514,518 @@          createDirectoryIfMissing True (projC </> \"src\")\n\n          writeFileUTF8 (projA </> \"daml.yaml\") $ unlines\n            [ \"sdk-version: \" <> sdkVersion\n            , \"name: a\""
  },
  {
    "id" : "a077e1a6-71c8-41e8-a0b3-505375818538",
    "prId" : 4325,
    "comments" : [
      {
        "id" : "6b722f96-6d95-4aa1-bb37-a57af80bb9a1",
        "parentId" : null,
        "author" : null,
        "body" : "Gosh, that's so much nicer! Thank you.",
        "createdAt" : "2020-01-31T13:29:28Z",
        "updatedAt" : "2020-01-31T13:29:44Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b125836240ec94339d4d25b6c2f38b05805cf309",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +450,454 @@          (exitCode, _, stderr) <- readProcessWithExitCode damlc [\"build\", \"--project-root\", projDir] \"\"\n          exitCode @?= ExitFailure 1\n          assertBool (\"Expected \\\"non-exhaustive\\\" error in stderr but got: \" <> show stderr) (\"non-exhaustive\" `isInfixOf` stderr)\n    ] <>\n    [ damlcTestTests damlc"
  },
  {
    "id" : "4aea5434-06bc-4938-8603-7f490e148e09",
    "prId" : 4222,
    "comments" : [
      {
        "id" : "e5f66101-d491-4026-804d-da397f0dbdac",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you think `left-pad` was the most useless library, think again!",
        "createdAt" : "2020-01-27T13:19:48Z",
        "updatedAt" : "2020-01-27T13:19:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1b7759c43720ed16a58242f1f8878b29c70516",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +654,658 @@          writeFileUTF8 (tmpDir </> \"lib\" </> \"Lib.daml\") $ unlines\n              [ \"daml 1.2 module Lib where\"\n              , \"inc : Int -> Int\"\n              , \"inc = (+ 1)\"\n              ]"
  },
  {
    "id" : "461858c1-e213-44c1-95ac-7291ae2e977a",
    "prId" : 4099,
    "comments" : [
      {
        "id" : "26028127-2349-462a-b122-8e28d3c7d225",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In what sense are we checking correctness here?",
        "createdAt" : "2020-01-20T12:50:29Z",
        "updatedAt" : "2020-01-20T12:50:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "38ae9f4c-e5a6-4515-b9a5-1c98c06c0166",
        "parentId" : "26028127-2349-462a-b122-8e28d3c7d225",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Dunno tbh, this test just got shuffled around not changed. I think it is supposed to check that `Tuple2` is mapped back to a DAML tuple.",
        "createdAt" : "2020-01-20T12:54:18Z",
        "updatedAt" : "2020-01-20T12:54:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6b9f32c8d01070bdea665097a682f65dced38ed9",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +586,590 @@        , \"   with\"\n        , \"     p : Party\"\n        , \"     t : (Text, Int)\" -- check for correct tuple type generation\n        , \"   where\"\n        , \"     signatory p\""
  },
  {
    "id" : "7411522e-93cb-46d5-b10f-2b170b9348b1",
    "prId" : 3624,
    "comments" : [
      {
        "id" : "9d959c49-5676-4ab2-8c40-f9407966c317",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What exactly in an empty package depends on these libraries? ;)",
        "createdAt" : "2019-11-25T20:17:46Z",
        "updatedAt" : "2019-11-25T20:22:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d883f392-fdfa-4550-b12d-67e7029171d2",
        "parentId" : "9d959c49-5676-4ab2-8c40-f9407966c317",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Even if something depends on them, the entries are meaningless since we filter those two libs out :slightly_smiling_face: ",
        "createdAt" : "2019-11-25T20:24:27Z",
        "updatedAt" : "2019-11-25T20:24:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "afa7671dcbc3fd1bc4a260a96bae036a3185c7a7",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +303,307 @@            , \"version: 0.0.1\"\n            , \"source: src\"\n            , \"dependencies: [daml-prim, daml-stdlib]\"\n            ]\n        createDirectoryIfMissing True (projDir </> \"src\")"
  }
]