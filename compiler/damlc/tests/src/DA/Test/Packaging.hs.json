[
  {
    "id" : "f631dfd3-24c6-40bb-94f1-c07ca0064c0b",
    "prId" : 7815,
    "comments" : [
      {
        "id" : "dbfabdb1-f83f-41bc-a6b3-ccee3bd46973",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What would happen here if we lost the MINIMAL pragma? I assume we would get a warning. Would that make this test fail?",
        "createdAt" : "2020-10-27T13:50:45Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d63499a8-9808-4760-8221-7aeb7ff347d5",
        "parentId" : "dbfabdb1-f83f-41bc-a6b3-ccee3bd46973",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "We get errors all around (tested it).",
        "createdAt" : "2020-10-28T09:40:45Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "323977ef2324d231a554726a69744fffb86d151b",
    "line" : 24,
    "diffHunk" : "@@ -1816,6 +1816,29 @@ dataDependencyTests Tools{damlc,repl,validate,davlDar,oldProjDar} = testGroup \"D\n           -- of myShow fails.\n         ]\n \n+    , simpleImportTest \"MINIMAL pragma\"\n+        [ \"module Lib where\"\n+        , \"class Dummy t where\"\n+        , \"    {-# MINIMAL #-}\"\n+        , \"    dummy : t -> Int\"\n+        , \"class MyClass t where\"\n+        , \"    {-# MINIMAL foo | (bar, baz) #-}\"\n+        , \"    foo : t -> Int\"\n+        , \"    bar : t -> Int\"\n+        , \"    baz : t -> Int\"\n+        ]\n+        [ \"module Main where\"\n+        , \"import Lib\"\n+        , \"data A = A\"\n+        , \"data B = B\"\n+        , \"instance Dummy A where\"\n+        , \"instance MyClass A where\"\n+        , \"    foo _ = 10\"\n+        , \"instance MyClass B where\"\n+        , \"    bar _ = 20\"\n+        , \"    baz _ = 30\""
  },
  {
    "id" : "5e31d2ac-caba-4fde-87d9-6e1861441f9a",
    "prId" : 7664,
    "comments" : [
      {
        "id" : "9d4c7819-d8a8-4129-b5c9-6b2c651c46ed",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`P1` and `P2` seems unnecessarily confusing. Why not `Dep` and `Main` or `Importer` and `Importee`?",
        "createdAt" : "2020-10-13T11:25:10Z",
        "updatedAt" : "2020-10-13T11:26:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff2335ed-491d-40df-b212-f0fbfd430837",
        "parentId" : "9d4c7819-d8a8-4129-b5c9-6b2c651c46ed",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I thought about that as well. I'll change it to `Lib` and `Main`, I'm worried `Importer` and `Importee` are too close to get mixed up.",
        "createdAt" : "2020-10-13T11:29:13Z",
        "updatedAt" : "2020-10-13T11:29:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7fc1037f-3047-41ab-8c4a-12ea1d0ee606",
        "parentId" : "9d4c7819-d8a8-4129-b5c9-6b2c651c46ed",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `automerge` label was faster than me... Here we go: https://github.com/digital-asset/daml/pull/7665",
        "createdAt" : "2020-10-13T11:37:24Z",
        "updatedAt" : "2020-10-13T11:37:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f1f0f7cc-ffa5-400a-a90b-d2ad3c4d3472",
        "parentId" : "9d4c7819-d8a8-4129-b5c9-6b2c651c46ed",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not gaming my PR stats!",
        "createdAt" : "2020-10-13T11:37:49Z",
        "updatedAt" : "2020-10-13T11:37:49Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43234021-0549-462d-b570-1aa7e248674f",
        "parentId" : "9d4c7819-d8a8-4129-b5c9-6b2c651c46ed",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "looking at the contributor stats you should :trollface: ",
        "createdAt" : "2020-10-13T11:40:38Z",
        "updatedAt" : "2020-10-13T11:40:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2f1c2e4d416f8ae752df9caeaf5a25afa9f4b044",
    "line" : 427,
    "diffHunk" : "@@ -1987,6 +1757,37 @@ dataDependencyTests Tools{damlc,repl,validate,davlDar,oldProjDar} = testGroup \"D\n         withCurrentDirectory (tmpDir </> \"proj\") $\n             callProcessSilent damlc [\"build\"]\n     ]\n+  where\n+    simpleImportTest :: String -> [String] -> [String] -> TestTree\n+    simpleImportTest title importee importer =\n+        testCaseSteps title $ \\step -> withTempDir $ \\tmpDir -> do\n+            step \"building project to be imported via data-dependencies\"\n+            createDirectoryIfMissing True (tmpDir </> \"type\")\n+            writeFileUTF8 (tmpDir </> \"type\" </> \"daml.yaml\") $ unlines\n+                [ \"sdk-version: \" <> sdkVersion\n+                , \"name: type\"\n+                , \"source: .\"\n+                , \"version: 0.1.0\"\n+                , \"dependencies: [daml-prim, daml-stdlib]\"\n+                ]\n+            writeFileUTF8 (tmpDir </> \"type\" </> \"P1.daml\") $ unlines importee"
  },
  {
    "id" : "ce80199c-3f95-4093-816b-55a7b5889fde",
    "prId" : 7320,
    "comments" : [
      {
        "id" : "4d79bb05-2d6f-45b7-ae6c-662514eb1ee9",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I wonder if we can make a test that reliably generates an implicit parameter instance?\r\n\r\nOr perhaps, add some a check to this test that an implicit parameter instance is in the DAR.",
        "createdAt" : "2020-09-03T20:21:38Z",
        "updatedAt" : "2020-09-04T06:51:05Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f5743948-b928-4671-b7bd-c3eadffa3240",
        "parentId" : "4d79bb05-2d6f-45b7-ae6c-662514eb1ee9",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Ah, I wonder if we can slip it in to the \"Simple DALF\" test or something. (It's not so simple...) ",
        "createdAt" : "2020-09-03T20:22:53Z",
        "updatedAt" : "2020-09-04T06:51:05Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "51bba8b6-7b61-4af3-80b1-c572ad636fea",
        "parentId" : "4d79bb05-2d6f-45b7-ae6c-662514eb1ee9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ve added an assertion that we have 2 implicit instances. Simple DALF would work as well I guess but this has the advantage that it tests what our users actually hit which seems useful. I still don’t understand how to generate it reliably. Even in this example you can remove the type signature, the inferred type stays the same but now it’s inlined :shrug: ",
        "createdAt" : "2020-09-04T06:52:53Z",
        "updatedAt" : "2020-09-04T06:52:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5540f71-e273-48c5-ac57-d1981133d74a",
        "parentId" : "4d79bb05-2d6f-45b7-ae6c-662514eb1ee9",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Awesome, thank you!",
        "createdAt" : "2020-09-04T08:34:16Z",
        "updatedAt" : "2020-09-04T08:34:16Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e0f939823ee767bead19253d2ada1b70ca3b7145",
    "line" : 43,
    "diffHunk" : "@@ -1717,6 +1717,49 @@ dataDependencyTests Tools{damlc,repl,validate,davlDar,oldProjDar} = testGroup \"D\n             ]\n         withCurrentDirectory (tmpDir </> \"proj\") $\n             callProcessSilent damlc [\"build\"]\n+\n+    , testCaseSteps \"Implicit parameters\" $ \\step -> withTempDir $ \\tmpDir -> do\n+        step \"building project with implicit parameters\"\n+        createDirectoryIfMissing True (tmpDir </> \"dep\")\n+        writeFileUTF8 (tmpDir </> \"dep\" </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: dep\"\n+            , \"source: .\"\n+            , \"version: 0.1.0\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\"\n+            ]\n+        writeFileUTF8 (tmpDir </> \"dep\" </> \"Foo.daml\") $ unlines\n+            [ \"module Foo where\"\n+            , \"f : Scenario ()\"\n+            , \"f = scenario do\"\n+            , \"  p <- getParty \\\"p\\\"\"\n+            , \"  submit p $ pure ()\"\n+            , \"  submit p $ pure ()\"\n+            -- This will produce two implicit instances.\n+            -- GHC occasionally seems to inline those instances and I don’t understand\n+            -- how to reliably stop it from doing this so be careful when changing this.\n+            ]\n+        withCurrentDirectory (tmpDir </> \"dep\") $\n+            callProcessSilent damlc [\"build\", \"-o\", \"dep.dar\"]"
  },
  {
    "id" : "fc403b0c-50b4-446b-b37f-f19a5debe0b8",
    "prId" : 7303,
    "comments" : [
      {
        "id" : "07f8ff8f-e45e-4158-a5fb-49cd317dac6c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we add a third case `D ()` and check that it behaves like `D` when imported as data-dependency?",
        "createdAt" : "2020-09-02T12:33:10Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0521dae6-f58d-4648-bb91-d0b9786d5473",
        "parentId" : "07f8ff8f-e45e-4158-a5fb-49cd317dac6c",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I don't think so. `D ()` is something we're deprecating, and the fact that it's treated the same as `D` in the current compiler is mostly a mistake.",
        "createdAt" : "2020-09-02T12:59:33Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "033f63af-5616-4d0e-80d3-9359f656dc8f",
        "parentId" : "07f8ff8f-e45e-4158-a5fb-49cd317dac6c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I generally agree but would feel more comfortable to have a test as long as users can still write it, even though they get warned about it.",
        "createdAt" : "2020-09-02T13:34:57Z",
        "updatedAt" : "2020-09-02T14:30:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "50d0a4cc-4ea0-49c5-81ed-77af45ac8b53",
        "parentId" : "07f8ff8f-e45e-4158-a5fb-49cd317dac6c",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I added a test for `D ()` in the single constructor case, which is something we had talked about adding as a special case  (since we can't distinguish single-constructor variants from enums any other way, and there's no ambiguity in the single constructor case). (This actually also came up in one of the other tests, but better to add one here as well.)",
        "createdAt" : "2020-09-02T15:07:37Z",
        "updatedAt" : "2020-09-02T15:08:43Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "59926babb9e698dbaa9e85ecabacd3d575c25df0",
    "line" : 18,
    "diffHunk" : "@@ -1667,6 +1667,49 @@ dataDependencyTests Tools{damlc,repl,validate,davlDar,oldProjDar} = testGroup \"D\n         withCurrentDirectory (tmpDir </> \"proj\") $\n             callProcessSilent damlc [\"build\"]\n \n+    , testCaseSteps \"Empty variant constructors\" $ \\step -> withTempDir $ \\tmpDir -> do\n+        -- This test checks that variant constructors without argument\n+        -- are preserved. This is a regression test for issue #7207.\n+        step \"building project with type definition\"\n+        createDirectoryIfMissing True (tmpDir </> \"type\")\n+        writeFileUTF8 (tmpDir </> \"type\" </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: type\"\n+            , \"source: .\"\n+            , \"version: 0.1.0\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\"\n+            ]\n+        writeFileUTF8 (tmpDir </> \"type\" </> \"Foo.daml\") $ unlines\n+            [ \"module Foo where\"\n+            , \"data A = B | C Int\""
  },
  {
    "id" : "fb072161-4ff4-463e-b3cd-b2cc5f0ee9c1",
    "prId" : 6894,
    "comments" : [
      {
        "id" : "60a4a569-1e2e-4c69-bce4-83da2dc14143",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Some more examples would be great:\r\n1. Something with parameters.\r\n2. Something that cannot be reconstructed to make sure things don’t explode in that case.",
        "createdAt" : "2020-07-28T12:07:55Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3aa1d84a-b478-4337-a1a0-f1b57a99b247",
        "parentId" : "60a4a569-1e2e-4c69-bce4-83da2dc14143",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "👍 Added!",
        "createdAt" : "2020-07-28T12:51:29Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dd8b14438d3d1adcf5a65aa01490d7b2fe3202d6",
    "line" : null,
    "diffHunk" : "@@ -1112,6 +1112,39 @@ dataDependencyTests Tools{damlc,repl,validate,davlDar,oldProjDar} = testGroup \"D\n               ]\n           withCurrentDirectory (tmpDir </> \"proj\") $ callProcessSilent damlc [\"build\", \"-o\", tmpDir </> \"proj\" </> \"proj.dar\"]\n \n+    , testCaseSteps \"Type synonyms over data-dependencies\" $ \\step -> withTempDir $ \\tmpDir -> do\n+          step \"Building dep\"\n+          createDirectoryIfMissing True (tmpDir </> \"dep\")\n+          writeFileUTF8 (tmpDir </> \"dep\" </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: dep\"\n+              , \"version: 0.1.0\"\n+              , \"source: .\"\n+              , \"dependencies: [daml-prim, daml-stdlib]\"\n+              ]\n+          writeFileUTF8 (tmpDir </> \"dep\" </> \"Foo.daml\") $ unlines\n+              [ \"module Foo where\"\n+              , \"type MyInt = Int\""
  },
  {
    "id" : "25fad421-f79a-4613-b6fc-4263a0776055",
    "prId" : 6894,
    "comments" : [
      {
        "id" : "34ce7816-1953-4845-a0db-4e0edd2ec27a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Does it make sense to put an apostrophe into the name of the synonym to make sure we're getting the mangling/unmangling right?",
        "createdAt" : "2020-07-28T12:11:56Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5c990008-7668-41aa-8cbc-53e7e2f9db9f",
        "parentId" : "34ce7816-1953-4845-a0db-4e0edd2ec27a",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "👍  Done!",
        "createdAt" : "2020-07-28T12:52:35Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "dd8b14438d3d1adcf5a65aa01490d7b2fe3202d6",
    "line" : null,
    "diffHunk" : "@@ -1112,6 +1112,39 @@ dataDependencyTests Tools{damlc,repl,validate,davlDar,oldProjDar} = testGroup \"D\n               ]\n           withCurrentDirectory (tmpDir </> \"proj\") $ callProcessSilent damlc [\"build\", \"-o\", tmpDir </> \"proj\" </> \"proj.dar\"]\n \n+    , testCaseSteps \"Type synonyms over data-dependencies\" $ \\step -> withTempDir $ \\tmpDir -> do\n+          step \"Building dep\"\n+          createDirectoryIfMissing True (tmpDir </> \"dep\")\n+          writeFileUTF8 (tmpDir </> \"dep\" </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: dep\"\n+              , \"version: 0.1.0\"\n+              , \"source: .\"\n+              , \"dependencies: [daml-prim, daml-stdlib]\"\n+              ]\n+          writeFileUTF8 (tmpDir </> \"dep\" </> \"Foo.daml\") $ unlines\n+              [ \"module Foo where\"\n+              , \"type MyInt = Int\""
  },
  {
    "id" : "e5138de5-590c-465e-a7dc-09f362d089cd",
    "prId" : 5330,
    "comments" : [
      {
        "id" : "7d41e22b-7bcd-405b-8b8e-8dd5ff0fb401",
        "parentId" : null,
        "author" : null,
        "body" : "is this supposed to be commented out?",
        "createdAt" : "2020-04-01T10:37:58Z",
        "updatedAt" : "2020-04-01T10:42:55Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "889498b4-f671-4a0c-a056-9a3a253bb73a",
        "parentId" : "7d41e22b-7bcd-405b-8b8e-8dd5ff0fb401",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":woman_facepalming: fixed",
        "createdAt" : "2020-04-01T10:39:33Z",
        "updatedAt" : "2020-04-01T10:42:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "668d007a6039bb8c0fd3d58a3ada5181a519d328",
    "line" : null,
    "diffHunk" : "@@ -703,6 +703,64 @@ tests tools@Tools{damlc} = testGroup \"Packaging\" $\n           (exitCode, _, stderr) <- readProcessWithExitCode damlc [\"build\", \"--project-root\", projDir] \"\"\n           exitCode @?= ExitFailure 1\n           assertBool (\"Expected \\\"non-exhaustive\\\" error in stderr but got: \" <> show stderr) (\"non-exhaustive\" `isInfixOf` stderr)\n+\n+    , testCaseSteps \"data-dependencies + exposed-modules\" $ \\step -> withTempDir $ \\projDir -> do\n+          step \"Building dependency\"\n+          createDirectoryIfMissing True (projDir </> \"dependency\")\n+          writeFileUTF8 (projDir </> \"dependency\" </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: dependency\"\n+            , \"version: 0.0.1\"\n+            , \"source: .\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\"\n+--            , \"exposed-modules: [B]\""
  },
  {
    "id" : "b78157d7-28ce-47e6-8fee-e4cc2676813d",
    "prId" : 5219,
    "comments" : [
      {
        "id" : "4a591457-5fc5-46b4-8922-be937228e05d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What do you think of speaking about \"module name prefixes\" in the error messages?",
        "createdAt" : "2020-03-26T17:23:35Z",
        "updatedAt" : "2020-03-26T17:37:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f2338526-0aa3-45d3-a8c8-53adce869f08",
        "parentId" : "4a591457-5fc5-46b4-8922-be937228e05d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Changed it to use `module prefix` instead of `virtual module` in the error message. I still call it virtual module internally since I think that makes the code easier to understand since it treats them pretty much exactly like other module names.",
        "createdAt" : "2020-03-26T17:39:37Z",
        "updatedAt" : "2020-03-26T17:39:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f2b80f41-0052-4d5b-8aae-3ed7132781c0",
        "parentId" : "4a591457-5fc5-46b4-8922-be937228e05d",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I totally agree regarding the internal naming.",
        "createdAt" : "2020-03-26T18:46:36Z",
        "updatedAt" : "2020-03-26T18:46:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "665f6e8821c0da979ddb3a800d0b3ccca0652576",
    "line" : null,
    "diffHunk" : "@@ -352,6 +353,31 @@ tests tools@Tools{damlc} = testGroup \"Packaging\" $\n             ]\n         buildProjectError projDir \"\" \"name collision\"\n \n+    , testCase \"Virtual module name collision\" $ withTempDir $ \\projDir -> do\n+        createDirectoryIfMissing True (projDir </> \"src\" </> \"A\" </> \"B\")\n+        writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: proj\"\n+            , \"version: 0.0.1\"\n+            , \"source: src\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\"\n+            ]\n+        writeFileUTF8 (projDir </> \"src\" </> \"A.daml\") $ unlines\n+            [ \"module A where\"\n+            , \"data B = B Int\"\n+            ]\n+        writeFileUTF8 (projDir </> \"src\" </> \"A\" </> \"B\" </> \"C.daml\") $ unlines\n+            [ \"module A.B.C where\"\n+            , \"data C = C Int\"\n+            ]\n+        (exitCode, out, err) <- readProcessWithExitCode damlc [\"build\", \"--project-root\", projDir] \"\"\n+        out @?= unlines\n+            [ \"Compiling proj to a DAR.\"\n+            , \"Created .daml/dist/proj-0.0.1.dar\"\n+            ]\n+        assertInfixOf \"collision between variant A:B and virtual module A.B (from A.B.C)\" err"
  },
  {
    "id" : "3149b4d1-c5bc-4beb-97b7-be910fdab5a6",
    "prId" : 4901,
    "comments" : [
      {
        "id" : "19da9e00-d25f-4fc2-adc8-c220d628f009",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "These tests will break once we make DAML-LF 1.8 the default target, won't they? Shall we nail down the second target to DAML-LF 1.7 to prevent this?",
        "createdAt" : "2020-03-11T08:58:52Z",
        "updatedAt" : "2020-03-11T08:59:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f011266b-e298-4f3f-bf87-06188b65d861",
        "parentId" : "19da9e00-d25f-4fc2-adc8-c220d628f009",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "oops, I thought I had done that but apparently I didn’t. I’ll fix it. Thanks!",
        "createdAt" : "2020-03-11T09:01:47Z",
        "updatedAt" : "2020-03-11T09:01:47Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ec4777b371e43fdf83120b0f43d09e043682ec",
    "line" : 4,
    "diffHunk" : "@@ -591,6 +591,73 @@ tests tools@Tools{damlc} = testGroup \"Packaging\" $\n             ]\n           buildProjectError projC \"\" \"dependencies with same unit id but conflicting package ids: a-0.0.1\"\n \n+    , testCaseSteps \"Error on newer LF data-dependency\" $ \\step -> withTempDir $ \\tmpDir -> do"
  },
  {
    "id" : "ba7c7e9d-2c78-404d-9956-115509cb472f",
    "prId" : 4714,
    "comments" : [
      {
        "id" : "5486a5eb-0502-4bb9-9ca2-f3ee595534aa",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "🔥 ",
        "createdAt" : "2020-02-26T10:37:08Z",
        "updatedAt" : "2020-02-26T10:37:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fe8f2bc527269ea19ac1cb3cdd6c4ffb931d0b53",
    "line" : 46,
    "diffHunk" : "@@ -877,37 +877,41 @@ dataDependencyTests damlc repl davlDar oldProjDar = testGroup \"Data Dependencies\n \n           step \"Validating DAR\"\n           callProcessSilent repl [\"validate\", tmpDir </> \"b\" </> \"b.dar\"]\n-    ] <>\n-    [ testCaseSteps \"Source generation edge cases\" $ \\step -> withTempDir $ \\tmpDir -> do\n-      writeFileUTF8 (tmpDir </> \"Foo.daml\") $ unlines\n-        [ \"daml 1.2\"\n-        , \"module Foo where\"\n-        , \"template Bar\"\n-        , \"   with\"\n-        , \"     p : Party\"\n-        , \"     t : (Text, Int)\" -- check for correct tuple type generation\n-        , \"   where\"\n-        , \"     signatory p\"\n-        ]\n-      withCurrentDirectory tmpDir $ do\n-        step \"Compile source to dalf ...\"\n-        callProcessSilent damlc [\"compile\", \"Foo.daml\", \"-o\", \"Foo.dalf\"]\n-        step \"Regenerate source ...\"\n-        callProcessSilent damlc [\"generate-src\", \"Foo.dalf\", \"--srcdir=gen\"]\n-        step \"Compile generated source ...\"\n-        callProcessSilent\n-            damlc\n-            [ \"compile\"\n-            , \"--generated-src\"\n-            , \"gen/Foo.daml\"\n-            , \"-o\"\n-            , \"FooGen.dalf\"\n-            , \"--package\"\n-            , unitIdString damlStdlib <> \" (DA.Internal.LF as CurrentSdk.DA.Internal.LF, DA.Internal.Prelude as CurrentSdk.DA.Internal.Prelude, DA.Internal.Template as CurrentSdk.DA.Internal.Template)\"\n-            , \"--package\"\n-            , \"daml-prim (DA.Types as CurrentSdk.DA.Types, GHC.Types as CurrentSdk.GHC.Types)\"\n-            ]\n-        assertBool \"FooGen.dalf was not created\" =<< doesFileExist \"FooGen.dalf\"\n+    , testCaseSteps \"Tuples\" $ \\step -> withTempDir $ \\tmpDir -> do\n+          step \"Building dep\"\n+          createDirectoryIfMissing True (tmpDir </> \"dep\")\n+          writeFileUTF8 (tmpDir </> \"dep\" </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: dep\"\n+              , \"version: 0.1.0\"\n+              , \"source: .\"\n+              , \"dependencies: [daml-prim, daml-stdlib]\"\n+              ]\n+          writeFileUTF8 (tmpDir </> \"dep\" </> \"Foo.daml\") $ unlines\n+              [ \"daml 1.2\""
  },
  {
    "id" : "9c0a35b8-67d1-40b4-85fb-a85e51fd5f30",
    "prId" : 4710,
    "comments" : [
      {
        "id" : "8efdc1f1-f6a2-4d1b-9cfd-f972ef3f5cb9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe a usage of that type would be useful?",
        "createdAt" : "2020-02-26T09:52:46Z",
        "updatedAt" : "2020-02-26T09:59:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "97b88238-bbf6-4c10-8234-202987d75b75",
        "parentId" : "8efdc1f1-f6a2-4d1b-9cfd-f972ef3f5cb9",
        "author" : null,
        "body" : "Added!",
        "createdAt" : "2020-02-26T09:59:13Z",
        "updatedAt" : "2020-02-26T09:59:13Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "42e4a4e11e9cf653a83d431041ac5d02fec4816c",
    "line" : 38,
    "diffHunk" : "@@ -1287,6 +1287,45 @@ dataDependencyTests damlc repl davlDar oldProjDar = testGroup \"Data Dependencies\n               , \"f = pure () : Proxy ()\"\n               ]\n           withCurrentDirectory (tmpDir </> \"top\") $ callProcessSilent damlc [\"build\", \"-o\", \"top.dar\"]\n+    , testCaseSteps \"Generic variants with record constructors\" $ \\step -> withTempDir $ \\tmpDir -> do\n+        -- This test checks that data definitions of the form\n+        --    data A t = B t | C { x: t, y: t }\n+        -- are handled correctly. This is a regression test for issue #4707.\n+        step \"building project with type definition\"\n+        createDirectoryIfMissing True (tmpDir </> \"type\")\n+        writeFileUTF8 (tmpDir </> \"type\" </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: type\"\n+            , \"source: .\"\n+            , \"version: 0.1.0\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\"\n+            ]\n+        writeFileUTF8 (tmpDir </> \"type\" </> \"Main.daml\") $ unlines\n+            [ \"daml 1.2\"\n+            , \"module Main where\"\n+            , \"data A t = B t | C { x: t, y: t }\"\n+            ]\n+        withCurrentDirectory (tmpDir </> \"type\") $\n+            callProcessSilent damlc [\"build\", \"-o\", \"type.dar\"]\n+\n+        step \"building a project that uses it as a data-dependency\"\n+        createDirectoryIfMissing True (tmpDir </> \"proj\")\n+        writeFileUTF8 (tmpDir </> \"proj\" </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: proj\"\n+            , \"source: .\"\n+            , \"version: 0.1.0\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\"\n+            , \"data-dependencies: \"\n+            , \"  - \" <> (tmpDir </> \"type\" </> \"type.dar\")\n+            ]\n+        writeFileUTF8 (tmpDir </> \"proj\" </> \"Main.daml\") $ unlines\n+            [ \"daml 1.2\"\n+            , \"module Main where\""
  },
  {
    "id" : "c105f51b-a466-4790-9fe9-4ce07fc94d73",
    "prId" : 4696,
    "comments" : [
      {
        "id" : "641ca446-0012-486a-b873-8a09d6747975",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We don’t strictly need both `a` and `b` here if we use `package`-flags to rename `Lib` we could directly reference both from `a`. However, this seems a bit more natural as something that users might run into themselves so I prefer to keep it like this.",
        "createdAt" : "2020-02-25T16:48:16Z",
        "updatedAt" : "2020-02-26T12:28:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d7b44c5e8520cd952f6f76d76efb8b230d06d237",
    "line" : 50,
    "diffHunk" : "@@ -877,6 +877,90 @@ dataDependencyTests damlc repl davlDar oldProjDar = testGroup \"Data Dependencies\n \n           step \"Validating DAR\"\n           callProcessSilent repl [\"validate\", tmpDir </> \"b\" </> \"b.dar\"]\n+\n+    , testCaseSteps \"Colliding package names\" $ \\step -> withTempDir $ \\tmpDir -> do\n+          forM_ [\"1\", \"2\"] $ \\version -> do\n+              step (\"Building 'lib\" <> version <> \"'\")\n+              let projDir = tmpDir </> \"lib-\" <> version\n+              createDirectoryIfMissing True projDir\n+              writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+                  [ \"sdk-version: \" <> sdkVersion\n+                  , \"version: \" <> show version\n+                  , \"name: lib\"\n+                  , \"source: .\"\n+                  , \"dependencies: [daml-prim, daml-stdlib]\"\n+                  ]\n+              writeFileUTF8 (projDir </> \"Lib.daml\") $ unlines\n+                  [ \"daml 1.2 module Lib where\"\n+                  , \"data X\" <> version <> \" = X\"\n+                  ]\n+              withCurrentDirectory projDir $ callProcessSilent damlc [\"build\", \"-o\", projDir </> \"lib.dar\"]\n+\n+          step \"Building a\"\n+          let projDir = tmpDir </> \"a\"\n+          createDirectoryIfMissing True projDir\n+          writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+               [ \"sdk-version: \" <> sdkVersion\n+               , \"version: 0.0.0\"\n+               , \"name: a\"\n+               , \"source: .\"\n+               , \"dependencies: [daml-prim, daml-stdlib]\"\n+               , \"data-dependencies:\"\n+               , \"- \" <> show (tmpDir </> \"lib-1\" </> \"lib.dar\")\n+               ]\n+          writeFileUTF8 (projDir </> \"A.daml\") $ unlines\n+              [ \"daml 1.2 module A where\"\n+              , \"import Lib\"\n+              , \"data A = A X1\"\n+              ]\n+          withCurrentDirectory projDir $ callProcessSilent damlc [\"build\", \"-o\", projDir </> \"a.dar\"]\n+\n+          step \"Building b\""
  },
  {
    "id" : "a2c62ad5-caac-4d47-897e-c6c63a6bf898",
    "prId" : 4421,
    "comments" : [
      {
        "id" : "afdd86ce-8737-43cd-a821-815e44a9ea91",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We should really make a helper function for creating `daml.yaml` files in tests :slightly_smiling_face: ",
        "createdAt" : "2020-02-06T12:17:26Z",
        "updatedAt" : "2020-02-06T14:11:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ded024d96b658daf9adac370050f78ba296dd20d",
    "line" : 86,
    "diffHunk" : "@@ -431,6 +431,152 @@ tests damlc repl davlDar = testGroup \"Packaging\" $\n             ]\n           withCurrentDirectory projC $ callProcessSilent damlc [\"build\", \"-o\", \"baz.dar\"]\n \n+    , testCase \"Detects unitId collisions in dependencies\" $ withTempDir $ \\projDir -> do\n+          -- Check that two pacages with the same unit id is flagged as an error.\n+          let projA = projDir </> \"a\"\n+          let projB = projDir </> \"b\"\n+          let projC = projDir </> \"c\"\n+\n+          createDirectoryIfMissing True (projA </> \"src\")\n+          createDirectoryIfMissing True (projB </> \"src\")\n+          createDirectoryIfMissing True (projC </> \"src\")\n+\n+          writeFileUTF8 (projA </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: a\"\n+            , \"version: 0.0.1\"\n+            , \"source: src\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\"\n+            ]\n+          writeFileUTF8 (projA </> \"src\" </> \"A.daml\") $ unlines\n+            [ \"daml 1.2\"\n+            , \"module A where\"\n+            , \"foo : Int\"\n+            , \"foo = 10\"\n+            ]\n+          withCurrentDirectory projA $ callProcessSilent damlc [\"build\", \"-o\", \"a.dar\"]\n+          packageIdA1 <- head <$> darPackageIds (projA </> \"a.dar\")\n+\n+          writeFileUTF8 (projB </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: b\"\n+            , \"version: 0.0.1\"\n+            , \"source: src\"\n+            , \"dependencies:\"\n+            , \" - daml-prim\"\n+            , \" - daml-stdlib\"\n+            , \" - \" <> projA </> \"a.dar\"\n+            ]\n+          writeFileUTF8 (projB </> \"src\" </> \"B.daml\") $ unlines\n+            [ \"daml 1.2\"\n+            , \"module B where\"\n+            , \"import A ()\"\n+            ]\n+          withCurrentDirectory projB $ callProcessSilent damlc [\"build\", \"-o\", \"b.dar\"]\n+\n+          writeFileUTF8 (projA </> \"src\" </> \"A.daml\") $ unlines\n+            [ \"daml 1.2\"\n+            , \"module A where\"\n+            , \"foo : Int\"\n+            , \"foo = 20\"\n+            ]\n+          withCurrentDirectory projA $ callProcessSilent damlc [\"build\", \"-o\", \"a.dar\"]\n+          packageIdA2 <- head <$> darPackageIds (projA </> \"a.dar\")\n+          assertBool \"Expected two different package IDs\" (packageIdA1 /= packageIdA2)\n+\n+          writeFileUTF8 (projC </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: c\"\n+            , \"version: 0.0.1\"\n+            , \"source: src\"\n+            , \"dependencies:\"\n+            , \" - daml-prim\"\n+            , \" - daml-stdlib\"\n+            , \" - \" <> projA </> \"a.dar\"\n+            , \" - \" <> projB </> \"b.dar\"\n+            ]\n+          writeFileUTF8 (projC </> \"src\" </> \"C.daml\") $ unlines\n+            [ \"daml 1.2\"\n+            , \"module C where\"\n+            , \"import A ()\"\n+            , \"import B ()\"\n+            ]\n+          buildProjectError projC \"\" \"dependencies with same unit id but conflicting package ids: a-0.0.1\"\n+\n+    , testCase \"Detects unitId collisions in data-dependencies\" $ withTempDir $ \\projDir -> do\n+          -- Check that two pacages with the same unit id is flagged as an error.\n+          let projA = projDir </> \"a\"\n+          let projB = projDir </> \"b\"\n+          let projC = projDir </> \"c\"\n+\n+          createDirectoryIfMissing True (projA </> \"src\")\n+          createDirectoryIfMissing True (projB </> \"src\")\n+          createDirectoryIfMissing True (projC </> \"src\")\n+\n+          writeFileUTF8 (projA </> \"daml.yaml\") $ unlines"
  },
  {
    "id" : "90857515-6ffb-48a4-9215-fd7071b97860",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "3f0b4af3-ec16-4069-9b03-3603366a7012",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesn’t seem right, why do I need to specify `a`? I explicitly depend on it in `build-options`.",
        "createdAt" : "2020-02-05T08:14:49Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f50839b6-e003-474d-abcf-f426a1ffa74e",
        "parentId" : "3f0b4af3-ec16-4069-9b03-3603366a7012",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "this is sorted now",
        "createdAt" : "2020-02-11T22:11:40Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -132,9 +132,9 @@ tests damlc repl davlDar = testGroup \"Packaging\"\n             , \"name: b\"\n             , \"source: .\"\n             , \"dependencies:\"\n-            , \"  - daml-prim\"\n-            , \"  - daml-stdlib\"\n             , \"  - \" <> aDar\n+            , \"build-options:\"\n+            , \"- '--package=a-1.0'\""
  },
  {
    "id" : "8cec5812-14ec-42f5-b674-bcb3748fc7b1",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "02c4c9c8-4de8-41a0-b47a-279be1df26dc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same question here.",
        "createdAt" : "2020-02-05T08:14:58Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5c75b28b-7b44-4bd8-bd6b-76da949a99d7",
        "parentId" : "02c4c9c8-4de8-41a0-b47a-279be1df26dc",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "also sorted",
        "createdAt" : "2020-02-11T22:11:53Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -409,7 +409,10 @@ tests damlc repl davlDar = testGroup \"Packaging\"\n             , \"module B where\"\n             , \"import A\"\n             ]\n-          withCurrentDirectory projB $ callProcessSilent damlc [\"build\", \"-o\", \"bar.dar\"]\n+          withCurrentDirectory projB $ callProcessSilent damlc\n+            [ \"build\" , \"-o\", \"bar.dar\"\n+            , \"--package\", \"a-0.0.1\""
  },
  {
    "id" : "c5c6dcac-e494-4ea0-89a4-873b2480488b",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "0cd19914-8a8e-4dd7-9f6f-2bfb49e89a33",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "And here.",
        "createdAt" : "2020-02-05T08:15:03Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "84989c35-2abf-49f8-af9b-c48b0da37ce7",
        "parentId" : "0cd19914-8a8e-4dd7-9f6f-2bfb49e89a33",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "same",
        "createdAt" : "2020-02-11T22:12:08Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -429,7 +432,11 @@ tests damlc repl davlDar = testGroup \"Packaging\"\n             , \"import A\"\n             , \"import B\"\n             ]\n-          withCurrentDirectory projC $ callProcessSilent damlc [\"build\", \"-o\", \"baz.dar\"]\n+          withCurrentDirectory projC $ callProcessSilent damlc\n+            [\"build\" , \"-o\", \"baz.dar\""
  },
  {
    "id" : "cc0a288e-b2b8-49b5-b4a3-25e9a0331eb0",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "8883c795-cf39-45b4-ae26-7fec00f65a63",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why did you change this?",
        "createdAt" : "2020-02-12T08:29:20Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8241dc46-9157-4834-94fe-14b74191a709",
        "parentId" : "8883c795-cf39-45b4-ae26-7fec00f65a63",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : ":man_shrugging: \r\nI put it back",
        "createdAt" : "2020-02-12T12:37:05Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -132,8 +132,6 @@ tests damlc repl davlDar = testGroup \"Packaging\" $\n             , \"name: b\"\n             , \"source: .\"\n             , \"dependencies:\"\n-            , \"  - daml-prim\""
  },
  {
    "id" : "5e6ad005-6813-459c-ae92-bad775f0c522",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "bbd6d913-df11-4d7a-a3e7-01927bb2e775",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You still removed `daml-stdlib` here which should be able to stay afaict.",
        "createdAt" : "2020-02-18T08:16:57Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -134,7 +134,6 @@ tests damlc repl davlDar oldProjDar = testGroup \"Packaging\" $\n             , \"source: .\"\n             , \"dependencies:\"\n             , \"  - daml-prim\"\n-            , \"  - daml-stdlib\""
  },
  {
    "id" : "9e824b1f-45d7-4b48-a782-c514b06ab547",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "4a4d022c-ea5d-47df-b064-1fde7900ed8c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like leftover debugging output.",
        "createdAt" : "2020-02-18T08:17:52Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "16927ff7-6d2a-4ccb-a306-f1de64ece368",
        "parentId" : "4a4d022c-ea5d-47df-b064-1fde7900ed8c",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Aggh! Thank you",
        "createdAt" : "2020-02-18T11:20:08Z",
        "updatedAt" : "2020-02-18T11:20:09Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -1186,7 +1164,12 @@ dataDependencyTests damlc repl davlDar oldProjDar = testGroup \"Data Dependencies\n \n -- | Only displays stdout and stderr on errors\n callProcessSilent :: FilePath -> [String] -> IO ()\n-callProcessSilent cmd args = do\n+callProcessSilent prog args = do\n+  putStrLn $ \"PP: \" <> show (prog,args)"
  },
  {
    "id" : "7273b07e-ab1b-4819-8ccf-5f4f1ef21790",
    "prId" : 4325,
    "comments" : [
      {
        "id" : "8560b3a4-58ef-4dd1-a0f4-890adde6f49c",
        "parentId" : null,
        "author" : null,
        "body" : "Gosh, that's so much nicer! Thank you.",
        "createdAt" : "2020-01-31T13:29:28Z",
        "updatedAt" : "2020-01-31T13:29:44Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b125836240ec94339d4d25b6c2f38b05805cf309",
    "line" : 5,
    "diffHunk" : "@@ -449,7 +449,7 @@ tests damlc repl davlDar = testGroup \"Packaging\" $\n             ]\n           (exitCode, _, stderr) <- readProcessWithExitCode damlc [\"build\", \"--project-root\", projDir] \"\"\n           exitCode @?= ExitFailure 1\n-          assertBool (\"non-exhaustive error in \" <> stderr) (\"non-exhaustive\" `isInfixOf` stderr)\n+          assertBool (\"Expected \\\"non-exhaustive\\\" error in stderr but got: \" <> show stderr) (\"non-exhaustive\" `isInfixOf` stderr)"
  },
  {
    "id" : "14022d2e-6bb3-45f6-8480-1408fb5ca82a",
    "prId" : 4222,
    "comments" : [
      {
        "id" : "9536f78f-b7d3-43d5-b121-ef54e8f335d8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you think `left-pad` was the most useless library, think again!",
        "createdAt" : "2020-01-27T13:19:48Z",
        "updatedAt" : "2020-01-27T13:19:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1b7759c43720ed16a58242f1f8878b29c70516",
    "line" : 28,
    "diffHunk" : "@@ -644,6 +641,72 @@ dataDependencyTests damlc repl davlDar = testGroup \"Data Dependencies\" $\n           callProcessSilent repl [\"validate\", tmpDir </> \"foobar.dar\"]\n           step \"Testing scenario\"\n           callProcessSilent repl [\"test\", \"Main:test\", tmpDir </> \"foobar.dar\"]\n+    , testCaseSteps \"Mixed dependencies and data-dependencies\" $ \\step -> withTempDir $ \\tmpDir -> do\n+          step \"Building 'lib'\"\n+          createDirectoryIfMissing True (tmpDir </> \"lib\")\n+          writeFileUTF8 (tmpDir </> \"lib\" </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"version: 0.0.1\"\n+              , \"name: lib\"\n+              , \"source: .\"\n+              , \"dependencies: [daml-prim, daml-stdlib]\"\n+              ]\n+          writeFileUTF8 (tmpDir </> \"lib\" </> \"Lib.daml\") $ unlines\n+              [ \"daml 1.2 module Lib where\"\n+              , \"inc : Int -> Int\""
  },
  {
    "id" : "585f7857-c824-4078-bb48-f8b62401cc47",
    "prId" : 4113,
    "comments" : [
      {
        "id" : "5431634b-8a19-43b7-8621-c7600bb78ed1",
        "parentId" : null,
        "author" : null,
        "body" : "These comments still refer to versions 1.6, 1.7 specifically.",
        "createdAt" : "2020-01-20T14:23:57Z",
        "updatedAt" : "2020-01-20T14:33:28Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0b920a3a-facf-4f66-a948-86a19f468b89",
        "parentId" : "5431634b-8a19-43b7-8621-c7600bb78ed1",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, fixed and added a TODO for a bug.",
        "createdAt" : "2020-01-20T14:33:44Z",
        "updatedAt" : "2020-01-20T14:33:44Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e2223ca2d9971248deae6ae84834fccf5576707c",
    "line" : null,
    "diffHunk" : "@@ -575,10 +577,17 @@ dataDependencyTests damlc repl davlDar = testGroup \"Data Dependencies\" $\n           callProcessSilent repl [\"validate\", projb </> \"projb.dar\"]\n           projbPkgIds <- darPackageIds (projb </> \"projb.dar\")\n           -- daml-prim, daml-stdlib for 1.6, daml-prim, daml-stdlib for 1.7, proja and projb"
  },
  {
    "id" : "e126d47e-af1f-4844-acd4-9263bc7721e0",
    "prId" : 4099,
    "comments" : [
      {
        "id" : "c0a339bd-fa1c-468c-ae4b-98ffe0f76013",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In what sense are we checking correctness here?",
        "createdAt" : "2020-01-20T12:50:29Z",
        "updatedAt" : "2020-01-20T12:50:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "82856b91-7e46-43bb-b4bb-4f080a815744",
        "parentId" : "c0a339bd-fa1c-468c-ae4b-98ffe0f76013",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Dunno tbh, this test just got shuffled around not changed. I think it is supposed to check that `Tuple2` is mapped back to a DAML tuple.",
        "createdAt" : "2020-01-20T12:54:18Z",
        "updatedAt" : "2020-01-20T12:54:19Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6b9f32c8d01070bdea665097a682f65dced38ed9",
    "line" : 122,
    "diffHunk" : "@@ -504,11 +505,110 @@ lfVersionTests damlc = testGroup \"LF version dependencies\"\n     | version <- LF.supportedOutputVersions\n     ]\n \n-dataDependencyTests :: FilePath -> TestTree\n-dataDependencyTests damlc = testGroup \"Data Dependencies\" $\n-    (do\n-      withArchiveChoice <- [False,True] -- run two variations of the test\n-      return $ testCase (\"Dalf imports (withArchiveChoice=\" <> show withArchiveChoice <> \")\") $ withTempDir $ \\projDir -> do\n+darPackageIds :: FilePath -> IO [LF.PackageId]\n+darPackageIds fp = do\n+    archive <- Zip.toArchive <$> BSL.readFile fp\n+    Dalfs mainDalf dalfDeps <- either fail pure $ readDalfs archive\n+    Right parsedDalfs <- pure $ mapM (LFArchive.decodeArchive LFArchive.DecodeAsMain . BSL.toStrict) $ mainDalf : dalfDeps\n+    pure $ map fst parsedDalfs\n+\n+numStable16Packages :: Int\n+numStable16Packages = 13\n+\n+numStable17Packages :: Int\n+numStable17Packages = 14\n+\n+dataDependencyTests :: FilePath -> FilePath -> TestTree\n+dataDependencyTests damlc repl = testGroup \"Data Dependencies\" $\n+    [ testCaseSteps \"Cross DAML-LF version\" $ \\step -> withTempDir $ \\tmpDir -> do\n+          let proja = tmpDir </> \"proja\"\n+          let projb = tmpDir </> \"projb\"\n+\n+          step \"Build proja\"\n+          createDirectoryIfMissing True (proja </> \"src\")\n+          writeFileUTF8 (proja </> \"src\" </> \"A.daml\") $ unlines\n+              [\" daml 1.2\"\n+              , \"module A where\"\n+              , \"import DA.Text\"\n+              , \"data A = A Int deriving Show\"\n+              -- This ensures that we have a reference to daml-stdlib and therefore daml-prim.\n+              , \"x : [Text]\"\n+              , \"x = lines \\\"abc\\\\ndef\\\"\"\n+              ]\n+          writeFileUTF8 (proja </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: proja\"\n+              , \"version: 0.0.1\"\n+              , \"source: src\"\n+              , \"dependencies: [daml-prim, daml-stdlib]\"\n+              ]\n+          withCurrentDirectory proja $ callProcessSilent damlc [\"build\", \"--target=1.6\", \"-o\", proja </> \"proja.dar\"]\n+          projaPkgIds <- darPackageIds (proja </> \"proja.dar\")\n+          -- daml-stdlib, daml-prim and proja\n+          length projaPkgIds @?= numStable16Packages + 2 + 1\n+\n+          step \"Build projb\"\n+          createDirectoryIfMissing True (projb </> \"src\")\n+          writeFileUTF8 (projb </> \"src\" </> \"B.daml\") $ unlines\n+              [ \"daml 1.2\"\n+              , \"module B where\"\n+              , \"import A\"\n+              , \"data B = B A\"\n+              ]\n+          writeFileUTF8 (projb </> \"daml.yaml\") $ unlines\n+              [ \"sdk-version: \" <> sdkVersion\n+              , \"name: projb\"\n+              , \"version: 0.0.1\"\n+              , \"source: src\"\n+              , \"dependencies: [daml-prim, daml-stdlib]\"\n+              , \"data-dependencies: [\" <> show (proja </> \"proja.dar\") <> \"]\"\n+              ]\n+          -- TODO Users should not have to pass --hide-all-packages, see https://github.com/digital-asset/daml/issues/4094\n+          withCurrentDirectory projb $ callProcessSilent damlc\n+            [ \"build\", \"--target=1.7\", \"-o\", projb </> \"projb.dar\"\n+            , \"--hide-all-packages\"\n+            , \"--package\", \"(\\\"daml-prim\\\", True, [])\"\n+            , \"--package\", \"(\\\"\" <> damlStdlib <> \"\\\", True, [])\"\n+            , \"--package\", \"(\\\"proja-0.0.1\\\", True, [])\"\n+            ]\n+          callProcessSilent repl [\"validate\", projb </> \"projb.dar\"]\n+          projbPkgIds <- darPackageIds (projb </> \"projb.dar\")\n+          -- daml-prim, daml-stdlib for 1.6, daml-prim, daml-stdlib for 1.7, proja and projb\n+          length projbPkgIds @?= numStable17Packages + 2 + 2 + 1 + 1\n+          -- daml-prim, daml-stdlib for 1.7, 2 stable 1.7 packages and projb\n+          length (filter (`notElem` projaPkgIds) projbPkgIds) @?= 4\n+    ] <>\n+    [ testCaseSteps \"Source generation edge cases\" $ \\step -> withTempDir $ \\tmpDir -> do\n+      writeFileUTF8 (tmpDir </> \"Foo.daml\") $ unlines\n+        [ \"daml 1.2\"\n+        , \"module Foo where\"\n+        , \"template Bar\"\n+        , \"   with\"\n+        , \"     p : Party\"\n+        , \"     t : (Text, Int)\" -- check for correct tuple type generation"
  },
  {
    "id" : "551501f9-1a12-4df7-bc57-cd8f9f1f821e",
    "prId" : 4095,
    "comments" : [
      {
        "id" : "080e1b2b-2a4c-4e64-ace2-558cfba801d3",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think \"version\" is used with two different meanings here and we hence end up with `version > version`.",
        "createdAt" : "2020-01-17T13:38:26Z",
        "updatedAt" : "2020-01-17T15:50:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3c63ba99-ae4e-4a7e-9ef7-3879ea0a81a7",
        "parentId" : "080e1b2b-2a4c-4e64-ace2-558cfba801d3",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Clearly we need to start versioning the word `version` to avoid this.",
        "createdAt" : "2020-01-17T14:57:50Z",
        "updatedAt" : "2020-01-17T15:50:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e588a9f2fe86f65589fd37cd260560cb5c874a48",
    "line" : null,
    "diffHunk" : "@@ -476,6 +480,30 @@ tests damlc = testGroup \"Packaging\"\n                   ]\n               exitFailure\n \n+-- | Test that a package build with --target=version never has a dependency on a package with version > version"
  },
  {
    "id" : "1b3f3640-35db-425f-8a96-ae562d9359e5",
    "prId" : 3624,
    "comments" : [
      {
        "id" : "30753cb0-70dd-40b9-90ba-7622df7c67f4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What exactly in an empty package depends on these libraries? ;)",
        "createdAt" : "2019-11-25T20:17:46Z",
        "updatedAt" : "2019-11-25T20:22:13Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0d038c70-0030-4eb2-b7e3-0af3c7ff06b8",
        "parentId" : "30753cb0-70dd-40b9-90ba-7622df7c67f4",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Even if something depends on them, the entries are meaningless since we filter those two libs out :slightly_smiling_face: ",
        "createdAt" : "2019-11-25T20:24:27Z",
        "updatedAt" : "2019-11-25T20:24:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "afa7671dcbc3fd1bc4a260a96bae036a3185c7a7",
    "line" : 11,
    "diffHunk" : "@@ -295,6 +295,17 @@ tests damlc = testGroup \"Packaging\"\n             , \"dependencies: [daml-prim, daml-stdlib]\"\n             ]\n         buildProject projDir\n+\n+    , testCase \"Empty package\" $ withTempDir $ \\projDir -> do\n+        writeFileUTF8 (projDir </> \"daml.yaml\") $ unlines\n+            [ \"sdk-version: \" <> sdkVersion\n+            , \"name: proj\"\n+            , \"version: 0.0.1\"\n+            , \"source: src\"\n+            , \"dependencies: [daml-prim, daml-stdlib]\""
  }
]